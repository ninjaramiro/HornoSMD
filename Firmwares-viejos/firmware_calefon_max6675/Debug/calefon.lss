
calefon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000164  00800100  0000bcd4  0000bd88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000bcd4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000233  00800264  00800264  0000beec  2**0
                  ALLOC
  3 .eeprom       0000004c  00810000  00810000  0000beec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         0000a350  00000000  00000000  0000bf38  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00002926  00000000  00000000  00016288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00018bae  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00018bc0  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8b 01 	jmp	0x316	; 0x316 <__ctors_end>
       4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
       8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
       c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      10:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      14:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      18:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      1c:	0c 94 43 35 	jmp	0x6a86	; 0x6a86 <__vector_7>
      20:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      24:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      28:	0c 94 ef 35 	jmp	0x6bde	; 0x6bde <__vector_10>
      2c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      30:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      34:	0c 94 67 36 	jmp	0x6cce	; 0x6cce <__vector_13>
      38:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      3c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      40:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      44:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      48:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      4c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      50:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      54:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      58:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      5c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      60:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      64:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      68:	48 39       	cpi	r20, 0x98	; 152
      6a:	5b 39       	cpi	r21, 0x9B	; 155
      6c:	6b 39       	cpi	r22, 0x9B	; 155
      6e:	7e 39       	cpi	r23, 0x9E	; 158
      70:	8e 39       	cpi	r24, 0x9E	; 158
      72:	a1 39       	cpi	r26, 0x91	; 145
      74:	b1 39       	cpi	r27, 0x91	; 145
      76:	c4 39       	cpi	r28, 0x94	; 148

00000078 <__trampolines_end>:
      78:	56 61       	ori	r21, 0x16	; 22
      7a:	6c 69       	ori	r22, 0x9C	; 156
      7c:	64 61       	ori	r22, 0x14	; 20
      7e:	63 69       	ori	r22, 0x93	; 147
      80:	6f 6e       	ori	r22, 0xEF	; 239
      82:	20 47       	sbci	r18, 0x70	; 112
      84:	52 55       	subi	r21, 0x52	; 82
      86:	50 4f       	sbci	r21, 0xF0	; 240
      88:	5f 50       	subi	r21, 0x0F	; 15
      8a:	49 44       	sbci	r20, 0x49	; 73
      8c:	20 28       	or	r2, r0
      8e:	23 30       	cpi	r18, 0x03	; 3
      90:	29 3a       	cpi	r18, 0xA9	; 169
	...

00000094 <datosOriginalesOk_MSG>:
      94:	44 61 74 6f 73 20 6f 72 69 67 69 6e 61 6c 65 73     Datos originales
      a4:	20 4f 4b 00 00                                       OK..

000000a9 <datosBackUpError_MSG>:
      a9:	44 61 74 6f 73 20 64 65 20 62 61 63 6b 75 70 20     Datos de backup 
      b9:	45 52 52 4f 4e 45 4f 53 00 00                       ERRONEOS..

000000c3 <datosOriginalesError_MSG>:
      c3:	44 61 74 6f 73 20 6f 72 69 67 69 6e 61 6c 65 73     Datos originales
      d3:	20 45 52 52 4f 4e 45 4f 53 00 00                     ERRONEOS..

000000de <datosBackUpOK_MSG>:
      de:	44 61 74 6f 73 20 64 65 20 62 61 63 6b 75 70 20     Datos de backup 
      ee:	4f 4b 00 00                                         OK..

000000f2 <datosOrigBackUPError_MSG>:
      f2:	44 61 74 6f 73 20 6f 72 69 67 69 6e 61 6c 65 73     Datos originales
     102:	20 79 20 64 65 20 62 61 63 6b 75 70 20 45 52 52      y de backup ERR
     112:	4f 4e 45 4f 53 00 00                                ONEOS..

00000119 <cargaPorDefecto_MSG>:
     119:	43 61 72 67 61 20 76 61 6c 6f 72 65 73 20 70 6f     Carga valores po
     129:	72 20 64 65 66 65 63 74 6f 00 00                    r defecto..

00000134 <numeroGrupo_MSG>:
     134:	4e 75 6d 65 72 6f 20 64 65 20 47 72 75 70 6f 20     Numero de Grupo 
     144:	3d 00 00                                            =..

00000147 <Comando_MotorGasPP>:
     147:	4d 47 50 50 00 00                                   MGPP..

0000014d <Comando_KP>:
     14d:	4b 50 00 00                                         KP..

00000151 <Comando_KI>:
     151:	4b 49 00 00                                         KI..

00000155 <Comando_KD>:
     155:	4b 44 00 00                                         KD..

00000159 <Comando_Max_Integ>:
     159:	4d 41 58 49 4e 54 00 00                             MAXINT..

00000161 <Comando_Periodo_PID>:
     161:	54 50 49 44 00 00                                   TPID..

00000167 <Comando_Periodo_Veda_PID>:
     167:	54 56 50 49 44 00 00                                TVPID..

0000016e <Comando_Periodo_Veda_Caudal>:
     16e:	54 56 43 00 00                                      TVC..

00000173 <Comando_Porcent_Var_Caudal>:
     173:	50 56 43 00 00                                      PVC..

00000178 <Comando_Caudal_Escala_PID>:
     178:	43 45 4b 50 49 44 00 00                             CEKPID..

00000180 <Comando_Escala_Var_Caudal>:
     180:	45 56 43 00 00                                      EVC..

00000185 <Comando_Perfil>:
     185:	50 45 52 46 49 4c 00 00                             PERFIL..

0000018d <Comando_Print>:
     18d:	50 52 49 4e 54 00 00                                PRINT..

00000194 <Comando_Estado>:
     194:	45 53 54 41 44 4f 00 00                             ESTADO..

0000019c <Comando_PID>:
     19c:	50 49 44 00 00                                      PID..

000001a1 <Comando_Reset>:
     1a1:	52 45 53 45 54 00 00                                RESET..

000001a8 <Comando_Reiniciar>:
     1a8:	52 45 49 4e 49 43 49 41 52 00 00                    REINICIAR..

000001b3 <Comando_Factory_Reset>:
     1b3:	46 41 42 52 49 43 41 20 52 45 53 45 54 00 00        FABRICA RESET..

000001c2 <MSG_Comando>:
     1c2:	43 4f 4d 41 4e 44 4f 00 00                          COMANDO..

000001cb <MSG_Parametro>:
     1cb:	50 41 52 41 4d 45 54 52 4f 00 00                    PARAMETRO..

000001d6 <MSG_Desconocido>:
     1d6:	44 45 53 43 4f 4e 4f 43 49 44 4f 00 00              DESCONOCIDO..

000001e3 <MSG_Borrado>:
     1e3:	42 4f 52 52 41 44 4f 00 00                          BORRADO..

000001ec <MSG_Ok>:
     1ec:	4f 4b 00 00                                         OK..

000001f0 <MSG_End>:
     1f0:	45 4e 44 00 00                                      END..

000001f5 <MSG_Error>:
     1f5:	45 52 52 4f 52 00 00                                ERROR..

000001fc <MSG_Terminal_Lista>:
     1fc:	0a 0a 0d 54 65 72 6d 69 6e 61 6c 20 4c 69 73 74     ...Terminal List
     20c:	61 21 0a 0a 0d 00 00                                a!.....

00000213 <__c.2421>:
     213:	0a 0d 00 00                                         ....

00000217 <__c.2424>:
     217:	0a 0d 00 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     .....@z..Z..rN..
     227:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     237:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     247:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     257:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     267:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     277:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     287:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     297:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2a7:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2b7:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2c7:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2d7:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2e7:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2f7:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     307:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000316 <__ctors_end>:
     316:	11 24       	eor	r1, r1
     318:	1f be       	out	0x3f, r1	; 63
     31a:	cf ef       	ldi	r28, 0xFF	; 255
     31c:	d8 e0       	ldi	r29, 0x08	; 8
     31e:	de bf       	out	0x3e, r29	; 62
     320:	cd bf       	out	0x3d, r28	; 61

00000322 <__do_copy_data>:
     322:	12 e0       	ldi	r17, 0x02	; 2
     324:	a0 e0       	ldi	r26, 0x00	; 0
     326:	b1 e0       	ldi	r27, 0x01	; 1
     328:	e4 ed       	ldi	r30, 0xD4	; 212
     32a:	fc eb       	ldi	r31, 0xBC	; 188
     32c:	02 c0       	rjmp	.+4      	; 0x332 <__do_copy_data+0x10>
     32e:	05 90       	lpm	r0, Z+
     330:	0d 92       	st	X+, r0
     332:	a4 36       	cpi	r26, 0x64	; 100
     334:	b1 07       	cpc	r27, r17
     336:	d9 f7       	brne	.-10     	; 0x32e <__do_copy_data+0xc>

00000338 <__do_clear_bss>:
     338:	24 e0       	ldi	r18, 0x04	; 4
     33a:	a4 e6       	ldi	r26, 0x64	; 100
     33c:	b2 e0       	ldi	r27, 0x02	; 2
     33e:	01 c0       	rjmp	.+2      	; 0x342 <.do_clear_bss_start>

00000340 <.do_clear_bss_loop>:
     340:	1d 92       	st	X+, r1

00000342 <.do_clear_bss_start>:
     342:	a7 39       	cpi	r26, 0x97	; 151
     344:	b2 07       	cpc	r27, r18
     346:	e1 f7       	brne	.-8      	; 0x340 <.do_clear_bss_loop>
     348:	0e 94 3d 32 	call	0x647a	; 0x647a <main>
     34c:	0c 94 68 5e 	jmp	0xbcd0	; 0xbcd0 <_exit>

00000350 <__bad_interrupt>:
     350:	0c 94 a3 36 	jmp	0x6d46	; 0x6d46 <__vector_default>

00000354 <valor_ADC>:
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	28 97       	sbiw	r28, 0x08	; 8
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	80 91 68 02 	lds	r24, 0x0268
     374:	88 2f       	mov	r24, r24
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	81 30       	cpi	r24, 0x01	; 1
     37a:	91 05       	cpc	r25, r1
     37c:	d9 f0       	breq	.+54     	; 0x3b4 <valor_ADC+0x60>
     37e:	82 30       	cpi	r24, 0x02	; 2
     380:	91 05       	cpc	r25, r1
     382:	1c f4       	brge	.+6      	; 0x38a <valor_ADC+0x36>
     384:	89 2b       	or	r24, r25
     386:	49 f0       	breq	.+18     	; 0x39a <valor_ADC+0x46>
     388:	2e c1       	rjmp	.+604    	; 0x5e6 <valor_ADC+0x292>
     38a:	82 30       	cpi	r24, 0x02	; 2
     38c:	91 05       	cpc	r25, r1
     38e:	09 f4       	brne	.+2      	; 0x392 <valor_ADC+0x3e>
     390:	b3 c0       	rjmp	.+358    	; 0x4f8 <valor_ADC+0x1a4>
     392:	03 97       	sbiw	r24, 0x03	; 3
     394:	09 f4       	brne	.+2      	; 0x398 <valor_ADC+0x44>
     396:	bd c0       	rjmp	.+378    	; 0x512 <valor_ADC+0x1be>
     398:	26 c1       	rjmp	.+588    	; 0x5e6 <valor_ADC+0x292>
     39a:	8a e7       	ldi	r24, 0x7A	; 122
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	2a e7       	ldi	r18, 0x7A	; 122
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	f9 01       	movw	r30, r18
     3a4:	20 81       	ld	r18, Z
     3a6:	20 64       	ori	r18, 0x40	; 64
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 83       	st	Z, r18
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	80 93 68 02 	sts	0x0268, r24
     3b2:	1c c1       	rjmp	.+568    	; 0x5ec <valor_ADC+0x298>
     3b4:	8a e7       	ldi	r24, 0x7A	; 122
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	fc 01       	movw	r30, r24
     3ba:	80 81       	ld	r24, Z
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	80 74       	andi	r24, 0x40	; 64
     3c2:	99 27       	eor	r25, r25
     3c4:	89 2b       	or	r24, r25
     3c6:	09 f0       	breq	.+2      	; 0x3ca <valor_ADC+0x76>
     3c8:	96 c0       	rjmp	.+300    	; 0x4f6 <valor_ADC+0x1a2>
     3ca:	88 e7       	ldi	r24, 0x78	; 120
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	fc 01       	movw	r30, r24
     3d0:	80 81       	ld	r24, Z
     3d2:	91 81       	ldd	r25, Z+1	; 0x01
     3d4:	cc 01       	movw	r24, r24
     3d6:	a0 e0       	ldi	r26, 0x00	; 0
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	bc 01       	movw	r22, r24
     3dc:	cd 01       	movw	r24, r26
     3de:	0e 94 81 57 	call	0xaf02	; 0xaf02 <__floatunsisf>
     3e2:	dc 01       	movw	r26, r24
     3e4:	cb 01       	movw	r24, r22
     3e6:	21 e7       	ldi	r18, 0x71	; 113
     3e8:	3d eb       	ldi	r19, 0xBD	; 189
     3ea:	41 e8       	ldi	r20, 0x81	; 129
     3ec:	52 e4       	ldi	r21, 0x42	; 66
     3ee:	bc 01       	movw	r22, r24
     3f0:	cd 01       	movw	r24, r26
     3f2:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
     3f6:	dc 01       	movw	r26, r24
     3f8:	cb 01       	movw	r24, r22
     3fa:	89 83       	std	Y+1, r24	; 0x01
     3fc:	9a 83       	std	Y+2, r25	; 0x02
     3fe:	ab 83       	std	Y+3, r26	; 0x03
     400:	bc 83       	std	Y+4, r27	; 0x04
     402:	80 91 64 02 	lds	r24, 0x0264
     406:	90 91 65 02 	lds	r25, 0x0265
     40a:	a0 91 66 02 	lds	r26, 0x0266
     40e:	b0 91 67 02 	lds	r27, 0x0267
     412:	9c 01       	movw	r18, r24
     414:	ad 01       	movw	r20, r26
     416:	69 81       	ldd	r22, Y+1	; 0x01
     418:	7a 81       	ldd	r23, Y+2	; 0x02
     41a:	8b 81       	ldd	r24, Y+3	; 0x03
     41c:	9c 81       	ldd	r25, Y+4	; 0x04
     41e:	0e 94 67 56 	call	0xacce	; 0xacce <__subsf3>
     422:	dc 01       	movw	r26, r24
     424:	cb 01       	movw	r24, r22
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	48 ec       	ldi	r20, 0xC8	; 200
     42c:	52 e4       	ldi	r21, 0x42	; 66
     42e:	bc 01       	movw	r22, r24
     430:	cd 01       	movw	r24, r26
     432:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
     436:	dc 01       	movw	r26, r24
     438:	cb 01       	movw	r24, r22
     43a:	7c 01       	movw	r14, r24
     43c:	8d 01       	movw	r16, r26
     43e:	80 91 64 02 	lds	r24, 0x0264
     442:	90 91 65 02 	lds	r25, 0x0265
     446:	a0 91 66 02 	lds	r26, 0x0266
     44a:	b0 91 67 02 	lds	r27, 0x0267
     44e:	9c 01       	movw	r18, r24
     450:	ad 01       	movw	r20, r26
     452:	c8 01       	movw	r24, r16
     454:	b7 01       	movw	r22, r14
     456:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__addsf3>
     45a:	dc 01       	movw	r26, r24
     45c:	cb 01       	movw	r24, r22
     45e:	80 93 64 02 	sts	0x0264, r24
     462:	90 93 65 02 	sts	0x0265, r25
     466:	a0 93 66 02 	sts	0x0266, r26
     46a:	b0 93 67 02 	sts	0x0267, r27
     46e:	80 91 64 02 	lds	r24, 0x0264
     472:	90 91 65 02 	lds	r25, 0x0265
     476:	a0 91 66 02 	lds	r26, 0x0266
     47a:	b0 91 67 02 	lds	r27, 0x0267
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	40 e7       	ldi	r20, 0x70	; 112
     484:	51 e4       	ldi	r21, 0x41	; 65
     486:	bc 01       	movw	r22, r24
     488:	cd 01       	movw	r24, r26
     48a:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
     48e:	88 23       	and	r24, r24
     490:	54 f0       	brlt	.+20     	; 0x4a6 <valor_ADC+0x152>
     492:	88 e2       	ldi	r24, 0x28	; 40
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	28 e2       	ldi	r18, 0x28	; 40
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	f9 01       	movw	r30, r18
     49c:	20 81       	ld	r18, Z
     49e:	2f 7d       	andi	r18, 0xDF	; 223
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 83       	st	Z, r18
     4a4:	1b c0       	rjmp	.+54     	; 0x4dc <valor_ADC+0x188>
     4a6:	80 91 64 02 	lds	r24, 0x0264
     4aa:	90 91 65 02 	lds	r25, 0x0265
     4ae:	a0 91 66 02 	lds	r26, 0x0266
     4b2:	b0 91 67 02 	lds	r27, 0x0267
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e5       	ldi	r20, 0x50	; 80
     4bc:	51 e4       	ldi	r21, 0x41	; 65
     4be:	bc 01       	movw	r22, r24
     4c0:	cd 01       	movw	r24, r26
     4c2:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
     4c6:	18 16       	cp	r1, r24
     4c8:	4c f0       	brlt	.+18     	; 0x4dc <valor_ADC+0x188>
     4ca:	88 e2       	ldi	r24, 0x28	; 40
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	28 e2       	ldi	r18, 0x28	; 40
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	f9 01       	movw	r30, r18
     4d4:	20 81       	ld	r18, Z
     4d6:	20 62       	ori	r18, 0x20	; 32
     4d8:	fc 01       	movw	r30, r24
     4da:	20 83       	st	Z, r18
     4dc:	8c e7       	ldi	r24, 0x7C	; 124
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	2c e7       	ldi	r18, 0x7C	; 124
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	f9 01       	movw	r30, r18
     4e6:	20 81       	ld	r18, Z
     4e8:	21 60       	ori	r18, 0x01	; 1
     4ea:	fc 01       	movw	r30, r24
     4ec:	20 83       	st	Z, r18
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	80 93 68 02 	sts	0x0268, r24
     4f4:	7b c0       	rjmp	.+246    	; 0x5ec <valor_ADC+0x298>
     4f6:	7a c0       	rjmp	.+244    	; 0x5ec <valor_ADC+0x298>
     4f8:	8a e7       	ldi	r24, 0x7A	; 122
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	2a e7       	ldi	r18, 0x7A	; 122
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	f9 01       	movw	r30, r18
     502:	20 81       	ld	r18, Z
     504:	20 64       	ori	r18, 0x40	; 64
     506:	fc 01       	movw	r30, r24
     508:	20 83       	st	Z, r18
     50a:	83 e0       	ldi	r24, 0x03	; 3
     50c:	80 93 68 02 	sts	0x0268, r24
     510:	6d c0       	rjmp	.+218    	; 0x5ec <valor_ADC+0x298>
     512:	8a e7       	ldi	r24, 0x7A	; 122
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	fc 01       	movw	r30, r24
     518:	80 81       	ld	r24, Z
     51a:	88 2f       	mov	r24, r24
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	80 74       	andi	r24, 0x40	; 64
     520:	99 27       	eor	r25, r25
     522:	89 2b       	or	r24, r25
     524:	09 f0       	breq	.+2      	; 0x528 <valor_ADC+0x1d4>
     526:	5e c0       	rjmp	.+188    	; 0x5e4 <valor_ADC+0x290>
     528:	88 e7       	ldi	r24, 0x78	; 120
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	fc 01       	movw	r30, r24
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	cc 01       	movw	r24, r24
     534:	a0 e0       	ldi	r26, 0x00	; 0
     536:	b0 e0       	ldi	r27, 0x00	; 0
     538:	bc 01       	movw	r22, r24
     53a:	cd 01       	movw	r24, r26
     53c:	0e 94 81 57 	call	0xaf02	; 0xaf02 <__floatunsisf>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	21 e9       	ldi	r18, 0x91	; 145
     546:	3e e7       	ldi	r19, 0x7E	; 126
     548:	45 e2       	ldi	r20, 0x25	; 37
     54a:	51 e4       	ldi	r21, 0x41	; 65
     54c:	bc 01       	movw	r22, r24
     54e:	cd 01       	movw	r24, r26
     550:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	8d 83       	std	Y+5, r24	; 0x05
     55a:	9e 83       	std	Y+6, r25	; 0x06
     55c:	af 83       	std	Y+7, r26	; 0x07
     55e:	b8 87       	std	Y+8, r27	; 0x08
     560:	80 91 69 02 	lds	r24, 0x0269
     564:	90 91 6a 02 	lds	r25, 0x026A
     568:	a0 91 6b 02 	lds	r26, 0x026B
     56c:	b0 91 6c 02 	lds	r27, 0x026C
     570:	9c 01       	movw	r18, r24
     572:	ad 01       	movw	r20, r26
     574:	6d 81       	ldd	r22, Y+5	; 0x05
     576:	7e 81       	ldd	r23, Y+6	; 0x06
     578:	8f 81       	ldd	r24, Y+7	; 0x07
     57a:	98 85       	ldd	r25, Y+8	; 0x08
     57c:	0e 94 67 56 	call	0xacce	; 0xacce <__subsf3>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	48 ec       	ldi	r20, 0xC8	; 200
     58a:	52 e4       	ldi	r21, 0x42	; 66
     58c:	bc 01       	movw	r22, r24
     58e:	cd 01       	movw	r24, r26
     590:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	7c 01       	movw	r14, r24
     59a:	8d 01       	movw	r16, r26
     59c:	80 91 69 02 	lds	r24, 0x0269
     5a0:	90 91 6a 02 	lds	r25, 0x026A
     5a4:	a0 91 6b 02 	lds	r26, 0x026B
     5a8:	b0 91 6c 02 	lds	r27, 0x026C
     5ac:	9c 01       	movw	r18, r24
     5ae:	ad 01       	movw	r20, r26
     5b0:	c8 01       	movw	r24, r16
     5b2:	b7 01       	movw	r22, r14
     5b4:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__addsf3>
     5b8:	dc 01       	movw	r26, r24
     5ba:	cb 01       	movw	r24, r22
     5bc:	80 93 69 02 	sts	0x0269, r24
     5c0:	90 93 6a 02 	sts	0x026A, r25
     5c4:	a0 93 6b 02 	sts	0x026B, r26
     5c8:	b0 93 6c 02 	sts	0x026C, r27
     5cc:	8c e7       	ldi	r24, 0x7C	; 124
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	2c e7       	ldi	r18, 0x7C	; 124
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	f9 01       	movw	r30, r18
     5d6:	20 81       	ld	r18, Z
     5d8:	2e 7f       	andi	r18, 0xFE	; 254
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18
     5de:	10 92 68 02 	sts	0x0268, r1
     5e2:	04 c0       	rjmp	.+8      	; 0x5ec <valor_ADC+0x298>
     5e4:	03 c0       	rjmp	.+6      	; 0x5ec <valor_ADC+0x298>
     5e6:	0e 94 03 03 	call	0x606	; 0x606 <Inicio_valor_ADC>
     5ea:	00 00       	nop
     5ec:	28 96       	adiw	r28, 0x08	; 8
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	08 95       	ret

00000606 <Inicio_valor_ADC>:

/************************************************************************
* Funcion de medición de temperatura
************************************************************************/

void Inicio_valor_ADC(void){
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (OFF<<REFS1)|(ON<<REFS0)|(OFF<<ADLAR)|(OFF<<MUX3)|(ON<<MUX2)|(ON<<MUX1)|(OFF<<MUX0);	// referencia AVcc
     60e:	8c e7       	ldi	r24, 0x7C	; 124
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	26 e4       	ldi	r18, 0x46	; 70
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
	ADCSRA = (ON<<ADEN)|(ON<<ADSC)|(OFF<<ADATE)|(OFF<<ADIF)|(OFF<<ADIE)|(ON<<ADPS2)|(ON<<ADPS1)|(ON<<ADPS0);
     618:	8a e7       	ldi	r24, 0x7A	; 122
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	27 ec       	ldi	r18, 0xC7	; 199
     61e:	fc 01       	movw	r30, r24
     620:	20 83       	st	Z, r18

	flTensionBateria = 0;
     622:	10 92 64 02 	sts	0x0264, r1
     626:	10 92 65 02 	sts	0x0265, r1
     62a:	10 92 66 02 	sts	0x0266, r1
     62e:	10 92 67 02 	sts	0x0267, r1
	flTempSetP = 0;
     632:	10 92 69 02 	sts	0x0269, r1
     636:	10 92 6a 02 	sts	0x026A, r1
     63a:	10 92 6b 02 	sts	0x026B, r1
     63e:	10 92 6c 02 	sts	0x026C, r1

	chEstadoADC = CAPTURA_ADC_6_TENSION_BATERIA_START_CONV;
     642:	10 92 68 02 	sts	0x0268, r1
}
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	08 95       	ret

0000064c <Recepcion_USART_0>:

/************************************************************************
* Máquina de estados de recepción por USART del uc
************************************************************************/

void Recepcion_USART_0(void) {
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
	switch (uchEstadoRecepcionUSART0) {
     654:	80 91 38 03 	lds	r24, 0x0338
     658:	88 2f       	mov	r24, r24
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	00 97       	sbiw	r24, 0x00	; 0
     65e:	19 f0       	breq	.+6      	; 0x666 <Recepcion_USART_0+0x1a>
     660:	01 97       	sbiw	r24, 0x01	; 1
     662:	e1 f0       	breq	.+56     	; 0x69c <Recepcion_USART_0+0x50>
     664:	93 c1       	rjmp	.+806    	; 0x98c <__stack+0x8d>
		case STANDBY:
			if (((UCSR0A & (SET<<RXC0)) == 0) || (uchEstadoBufferRx_USART0 == LLENO)) {
     666:	80 ec       	ldi	r24, 0xC0	; 192
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	fc 01       	movw	r30, r24
     66c:	80 81       	ld	r24, Z
     66e:	88 23       	and	r24, r24
     670:	24 f4       	brge	.+8      	; 0x67a <Recepcion_USART_0+0x2e>
     672:	80 91 40 03 	lds	r24, 0x0340
     676:	81 30       	cpi	r24, 0x01	; 1
     678:	59 f4       	brne	.+22     	; 0x690 <Recepcion_USART_0+0x44>

				if (uContTimeoutLecturaRxUSART0 == 0)
     67a:	80 91 3a 03 	lds	r24, 0x033A
     67e:	90 91 3b 03 	lds	r25, 0x033B
     682:	89 2b       	or	r24, r25
     684:	11 f4       	brne	.+4      	; 0x68a <Recepcion_USART_0+0x3e>
					uchEstadoBufferRx_USART0 = VACIO;
     686:	10 92 40 03 	sts	0x0340, r1

				uchEstadoRecepcionUSART0 = STANDBY;
     68a:	10 92 38 03 	sts	0x0338, r1
			}
			else {
				uchContAuxRx_USART0 = 0;							
				uchEstadoRecepcionUSART0 = RECIBIR_USART0;
			}
			break;
     68e:	83 c1       	rjmp	.+774    	; 0x996 <__stack+0x97>
					uchEstadoBufferRx_USART0 = VACIO;

				uchEstadoRecepcionUSART0 = STANDBY;
			}
			else {
				uchContAuxRx_USART0 = 0;							
     690:	10 92 3e 03 	sts	0x033E, r1
				uchEstadoRecepcionUSART0 = RECIBIR_USART0;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 93 38 03 	sts	0x0338, r24
			}
			break;
     69a:	7d c1       	rjmp	.+762    	; 0x996 <__stack+0x97>
		
		case RECIBIR_USART0:
			if (uchContAuxRx_USART0 == 0) {
     69c:	80 91 3e 03 	lds	r24, 0x033E
     6a0:	88 23       	and	r24, r24
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <Recepcion_USART_0+0x5a>
     6a4:	85 c0       	rjmp	.+266    	; 0x7b0 <Recepcion_USART_0+0x164>
				if ((UCSR0A&(SET<<FE0)) || (UCSR0A&(SET<<DOR0)) || (UCSR0A&(SET<<UPE0))) {	/* Frame Error (FE), Data OverRun (DOR) and Parity Error (UPE) */
     6a6:	80 ec       	ldi	r24, 0xC0	; 192
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	fc 01       	movw	r30, r24
     6ac:	80 81       	ld	r24, Z
     6ae:	88 2f       	mov	r24, r24
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	80 71       	andi	r24, 0x10	; 16
     6b4:	99 27       	eor	r25, r25
     6b6:	89 2b       	or	r24, r25
     6b8:	a1 f4       	brne	.+40     	; 0x6e2 <Recepcion_USART_0+0x96>
     6ba:	80 ec       	ldi	r24, 0xC0	; 192
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	fc 01       	movw	r30, r24
     6c0:	80 81       	ld	r24, Z
     6c2:	88 2f       	mov	r24, r24
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	88 70       	andi	r24, 0x08	; 8
     6c8:	99 27       	eor	r25, r25
     6ca:	89 2b       	or	r24, r25
     6cc:	51 f4       	brne	.+20     	; 0x6e2 <Recepcion_USART_0+0x96>
     6ce:	80 ec       	ldi	r24, 0xC0	; 192
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	fc 01       	movw	r30, r24
     6d4:	80 81       	ld	r24, Z
     6d6:	88 2f       	mov	r24, r24
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	84 70       	andi	r24, 0x04	; 4
     6dc:	99 27       	eor	r25, r25
     6de:	89 2b       	or	r24, r25
     6e0:	39 f0       	breq	.+14     	; 0x6f0 <Recepcion_USART_0+0xa4>
					USART0_Flush();
     6e2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <USART0_Flush>
					uchEstadoBufferRx_USART0 = VACIO;
     6e6:	10 92 40 03 	sts	0x0340, r1
					uchEstadoRecepcionUSART0 = STANDBY;
     6ea:	10 92 38 03 	sts	0x0338, r1
     6ee:	5f c0       	rjmp	.+190    	; 0x7ae <Recepcion_USART_0+0x162>
				}
				else {
					chBufferRx_USART0[uchContAuxRx_USART0] = UDR0;
     6f0:	80 91 3e 03 	lds	r24, 0x033E
     6f4:	88 2f       	mov	r24, r24
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	26 ec       	ldi	r18, 0xC6	; 198
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	f9 01       	movw	r30, r18
     6fe:	20 81       	ld	r18, Z
     700:	80 59       	subi	r24, 0x90	; 144
     702:	9d 4f       	sbci	r25, 0xFD	; 253
     704:	fc 01       	movw	r30, r24
     706:	20 83       	st	Z, r18
					uContTimeoutRxUSART0 = TIMEOUT_RX_USART_0;
     708:	8c e4       	ldi	r24, 0x4C	; 76
     70a:	9d e1       	ldi	r25, 0x1D	; 29
     70c:	90 93 3d 03 	sts	0x033D, r25
     710:	80 93 3c 03 	sts	0x033C, r24

					#ifdef RECIBIR_NULL_AL_FINAL
					if  (chBufferRx_USART0[uchContAuxRx_USART0] == '\0') {	/* chequeo no haber recibido un \0, sino corto la recepción */
					#else
					if  ((chBufferRx_USART0[uchContAuxRx_USART0] == '\n') || (chBufferRx_USART0[uchContAuxRx_USART0] == '\r')) {	/* chequeo no haber recibido un \n o \r, sino corto la recepción */
     714:	80 91 3e 03 	lds	r24, 0x033E
     718:	88 2f       	mov	r24, r24
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	80 59       	subi	r24, 0x90	; 144
     71e:	9d 4f       	sbci	r25, 0xFD	; 253
     720:	fc 01       	movw	r30, r24
     722:	80 81       	ld	r24, Z
     724:	8a 30       	cpi	r24, 0x0A	; 10
     726:	51 f0       	breq	.+20     	; 0x73c <Recepcion_USART_0+0xf0>
     728:	80 91 3e 03 	lds	r24, 0x033E
     72c:	88 2f       	mov	r24, r24
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	80 59       	subi	r24, 0x90	; 144
     732:	9d 4f       	sbci	r25, 0xFD	; 253
     734:	fc 01       	movw	r30, r24
     736:	80 81       	ld	r24, Z
     738:	8d 30       	cpi	r24, 0x0D	; 13
     73a:	11 f5       	brne	.+68     	; 0x780 <Recepcion_USART_0+0x134>
						chBufferRx_USART0[uchContAuxRx_USART0] = '\0';
     73c:	80 91 3e 03 	lds	r24, 0x033E
     740:	88 2f       	mov	r24, r24
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	80 59       	subi	r24, 0x90	; 144
     746:	9d 4f       	sbci	r25, 0xFD	; 253
     748:	fc 01       	movw	r30, r24
     74a:	10 82       	st	Z, r1

						#ifdef TRANSMITIR_ECO
						/* escribo el enter */
						Esperar_USART_O_TX ();		/* si el registro de envio esta lleno, espero */
     74c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Esperar_USART_O_TX>
						UDR0 = '\n';
     750:	86 ec       	ldi	r24, 0xC6	; 198
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	2a e0       	ldi	r18, 0x0A	; 10
     756:	fc 01       	movw	r30, r24
     758:	20 83       	st	Z, r18
						Esperar_USART_O_TX ();		/* si el registro de envio esta lleno, espero */
     75a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Esperar_USART_O_TX>
						UDR0 = '\r';
     75e:	86 ec       	ldi	r24, 0xC6	; 198
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	2d e0       	ldi	r18, 0x0D	; 13
     764:	fc 01       	movw	r30, r24
     766:	20 83       	st	Z, r18
						#endif

					#endif

						uchEstadoBufferRx_USART0 = LLENO;
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	80 93 40 03 	sts	0x0340, r24
						uContTimeoutLecturaRxUSART0 = TIMEOUT_LECTURA_RX_USART_0;
     76e:	80 e2       	ldi	r24, 0x20	; 32
     770:	93 e0       	ldi	r25, 0x03	; 3
     772:	90 93 3b 03 	sts	0x033B, r25
     776:	80 93 3a 03 	sts	0x033A, r24
						uchEstadoRecepcionUSART0 = STANDBY;
     77a:	10 92 38 03 	sts	0x0338, r1
     77e:	17 c0       	rjmp	.+46     	; 0x7ae <Recepcion_USART_0+0x162>
					}
					else {
						#ifdef TRANSMITIR_ECO
						/* escribo el caracter que llegó*/
						Esperar_USART_O_TX ();		/* si el registro de envio esta lleno, espero */
     780:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Esperar_USART_O_TX>
						UDR0 = chBufferRx_USART0[uchContAuxRx_USART0];
     784:	86 ec       	ldi	r24, 0xC6	; 198
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	20 91 3e 03 	lds	r18, 0x033E
     78c:	22 2f       	mov	r18, r18
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	20 59       	subi	r18, 0x90	; 144
     792:	3d 4f       	sbci	r19, 0xFD	; 253
     794:	f9 01       	movw	r30, r18
     796:	20 81       	ld	r18, Z
     798:	fc 01       	movw	r30, r24
     79a:	20 83       	st	Z, r18
						#endif

						uchContAuxRx_USART0 ++;
     79c:	80 91 3e 03 	lds	r24, 0x033E
     7a0:	8f 5f       	subi	r24, 0xFF	; 255
     7a2:	80 93 3e 03 	sts	0x033E, r24
						uchEstadoRecepcionUSART0 = RECIBIR_USART0;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	80 93 38 03 	sts	0x0338, r24
     7ac:	ee c0       	rjmp	.+476    	; 0x98a <__stack+0x8b>
     7ae:	ed c0       	rjmp	.+474    	; 0x98a <__stack+0x8b>
					}
				}				
			}
			else if ((UCSR0A & (SET<<RXC0)) == 0) {			// espero recibir el siguiente caracter
     7b0:	80 ec       	ldi	r24, 0xC0	; 192
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	fc 01       	movw	r30, r24
     7b6:	80 81       	ld	r24, Z
     7b8:	88 23       	and	r24, r24
     7ba:	f4 f0       	brlt	.+60     	; 0x7f8 <Recepcion_USART_0+0x1ac>
				if (uContTimeoutRxUSART0 == 0) {			// si se vence el tiempo de espera del siguiente caracter
     7bc:	80 91 3c 03 	lds	r24, 0x033C
     7c0:	90 91 3d 03 	lds	r25, 0x033D
     7c4:	89 2b       	or	r24, r25
     7c6:	a1 f4       	brne	.+40     	; 0x7f0 <Recepcion_USART_0+0x1a4>
					chBufferRx_USART0[uchContAuxRx_USART0] = '\0';
     7c8:	80 91 3e 03 	lds	r24, 0x033E
     7cc:	88 2f       	mov	r24, r24
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	80 59       	subi	r24, 0x90	; 144
     7d2:	9d 4f       	sbci	r25, 0xFD	; 253
     7d4:	fc 01       	movw	r30, r24
     7d6:	10 82       	st	Z, r1
					uchEstadoBufferRx_USART0 = LLENO;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	80 93 40 03 	sts	0x0340, r24
					uContTimeoutLecturaRxUSART0 = TIMEOUT_LECTURA_RX_USART_0;
     7de:	80 e2       	ldi	r24, 0x20	; 32
     7e0:	93 e0       	ldi	r25, 0x03	; 3
     7e2:	90 93 3b 03 	sts	0x033B, r25
     7e6:	80 93 3a 03 	sts	0x033A, r24
					uchEstadoRecepcionUSART0 = STANDBY;
     7ea:	10 92 38 03 	sts	0x0338, r1
     7ee:	cd c0       	rjmp	.+410    	; 0x98a <__stack+0x8b>
				}
				else {										// si no se vence sigo esperando el siguiente caracter
					uchEstadoRecepcionUSART0 = RECIBIR_USART0;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 93 38 03 	sts	0x0338, r24
				uchEstadoRecepcionUSART0 = STANDBY;
			}						
			else {
				uchEstadoRecepcionUSART0 = RECIBIR_USART0;
			}
			break;
     7f6:	cf c0       	rjmp	.+414    	; 0x996 <__stack+0x97>
				}
				else {										// si no se vence sigo esperando el siguiente caracter
					uchEstadoRecepcionUSART0 = RECIBIR_USART0;
				}
			}
			else if (uchContAuxRx_USART0 < (USART0_BUFFER_ZISE-1)) {
     7f8:	80 91 3e 03 	lds	r24, 0x033E
     7fc:	87 3c       	cpi	r24, 0xC7	; 199
     7fe:	08 f0       	brcs	.+2      	; 0x802 <Recepcion_USART_0+0x1b6>
     800:	a8 c0       	rjmp	.+336    	; 0x952 <__stack+0x53>
				if ((UCSR0A&(SET<<FE0)) || (UCSR0A&(SET<<DOR0)) || (UCSR0A&(SET<<UPE0))) {	/* Frame Error (FE), Data OverRun (DOR) and Parity Error (UPE) */
     802:	80 ec       	ldi	r24, 0xC0	; 192
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	fc 01       	movw	r30, r24
     808:	80 81       	ld	r24, Z
     80a:	88 2f       	mov	r24, r24
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	80 71       	andi	r24, 0x10	; 16
     810:	99 27       	eor	r25, r25
     812:	89 2b       	or	r24, r25
     814:	a1 f4       	brne	.+40     	; 0x83e <Recepcion_USART_0+0x1f2>
     816:	80 ec       	ldi	r24, 0xC0	; 192
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	fc 01       	movw	r30, r24
     81c:	80 81       	ld	r24, Z
     81e:	88 2f       	mov	r24, r24
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	88 70       	andi	r24, 0x08	; 8
     824:	99 27       	eor	r25, r25
     826:	89 2b       	or	r24, r25
     828:	51 f4       	brne	.+20     	; 0x83e <Recepcion_USART_0+0x1f2>
     82a:	80 ec       	ldi	r24, 0xC0	; 192
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	fc 01       	movw	r30, r24
     830:	80 81       	ld	r24, Z
     832:	88 2f       	mov	r24, r24
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	84 70       	andi	r24, 0x04	; 4
     838:	99 27       	eor	r25, r25
     83a:	89 2b       	or	r24, r25
     83c:	39 f0       	breq	.+14     	; 0x84c <Recepcion_USART_0+0x200>
					USART0_Flush();
     83e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <USART0_Flush>
					uchEstadoBufferRx_USART0 = VACIO;
     842:	10 92 40 03 	sts	0x0340, r1
					uchEstadoRecepcionUSART0 = STANDBY;
     846:	10 92 38 03 	sts	0x0338, r1
     84a:	82 c0       	rjmp	.+260    	; 0x950 <__stack+0x51>
				}
				else {
					chBufferRx_USART0[uchContAuxRx_USART0] = UDR0;
     84c:	80 91 3e 03 	lds	r24, 0x033E
     850:	88 2f       	mov	r24, r24
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	26 ec       	ldi	r18, 0xC6	; 198
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	f9 01       	movw	r30, r18
     85a:	20 81       	ld	r18, Z
     85c:	80 59       	subi	r24, 0x90	; 144
     85e:	9d 4f       	sbci	r25, 0xFD	; 253
     860:	fc 01       	movw	r30, r24
     862:	20 83       	st	Z, r18
					uContTimeoutRxUSART0 = TIMEOUT_RX_USART_0;
     864:	8c e4       	ldi	r24, 0x4C	; 76
     866:	9d e1       	ldi	r25, 0x1D	; 29
     868:	90 93 3d 03 	sts	0x033D, r25
     86c:	80 93 3c 03 	sts	0x033C, r24

					#ifdef RECIBIR_NULL_AL_FINAL
					if  (chBufferRx_USART0[uchContAuxRx_USART0] == '\0') {	/* chequeo no haber recibido un \0, sino corto la recepción */
					#else
					if  ((chBufferRx_USART0[uchContAuxRx_USART0] == '\n') || (chBufferRx_USART0[uchContAuxRx_USART0] == '\r')) {	/* chequeo no haber recibido un \n o \r, sino corto la recepción */
     870:	80 91 3e 03 	lds	r24, 0x033E
     874:	88 2f       	mov	r24, r24
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	80 59       	subi	r24, 0x90	; 144
     87a:	9d 4f       	sbci	r25, 0xFD	; 253
     87c:	fc 01       	movw	r30, r24
     87e:	80 81       	ld	r24, Z
     880:	8a 30       	cpi	r24, 0x0A	; 10
     882:	51 f0       	breq	.+20     	; 0x898 <Recepcion_USART_0+0x24c>
     884:	80 91 3e 03 	lds	r24, 0x033E
     888:	88 2f       	mov	r24, r24
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	80 59       	subi	r24, 0x90	; 144
     88e:	9d 4f       	sbci	r25, 0xFD	; 253
     890:	fc 01       	movw	r30, r24
     892:	80 81       	ld	r24, Z
     894:	8d 30       	cpi	r24, 0x0D	; 13
     896:	11 f5       	brne	.+68     	; 0x8dc <Recepcion_USART_0+0x290>
						chBufferRx_USART0[uchContAuxRx_USART0] = '\0';
     898:	80 91 3e 03 	lds	r24, 0x033E
     89c:	88 2f       	mov	r24, r24
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	80 59       	subi	r24, 0x90	; 144
     8a2:	9d 4f       	sbci	r25, 0xFD	; 253
     8a4:	fc 01       	movw	r30, r24
     8a6:	10 82       	st	Z, r1

						#ifdef TRANSMITIR_ECO
						/* escribo el enter */
						Esperar_USART_O_TX ();		/* si el registro de envio esta lleno, espero */
     8a8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Esperar_USART_O_TX>
						UDR0 = '\n';
     8ac:	86 ec       	ldi	r24, 0xC6	; 198
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	2a e0       	ldi	r18, 0x0A	; 10
     8b2:	fc 01       	movw	r30, r24
     8b4:	20 83       	st	Z, r18
						Esperar_USART_O_TX (); 		/* si el registro de envio esta lleno, espero */
     8b6:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Esperar_USART_O_TX>
						UDR0 = '\r';
     8ba:	86 ec       	ldi	r24, 0xC6	; 198
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	2d e0       	ldi	r18, 0x0D	; 13
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18
						#endif

					#endif

						uchEstadoBufferRx_USART0 = LLENO;
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	80 93 40 03 	sts	0x0340, r24
						uContTimeoutLecturaRxUSART0 = TIMEOUT_LECTURA_RX_USART_0;
     8ca:	80 e2       	ldi	r24, 0x20	; 32
     8cc:	93 e0       	ldi	r25, 0x03	; 3
     8ce:	90 93 3b 03 	sts	0x033B, r25
     8d2:	80 93 3a 03 	sts	0x033A, r24
						uchEstadoRecepcionUSART0 = STANDBY;
     8d6:	10 92 38 03 	sts	0x0338, r1
     8da:	3a c0       	rjmp	.+116    	; 0x950 <__stack+0x51>
					}
					else {
						#ifdef TRANSMITIR_ECO
						/* escribo el caracter que llegó*/
						Esperar_USART_O_TX (); 		/* si el registro de envio esta lleno, espero */
     8dc:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Esperar_USART_O_TX>
						if (chBufferRx_USART0[uchContAuxRx_USART0] == 8) {
     8e0:	80 91 3e 03 	lds	r24, 0x033E
     8e4:	88 2f       	mov	r24, r24
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	80 59       	subi	r24, 0x90	; 144
     8ea:	9d 4f       	sbci	r25, 0xFD	; 253
     8ec:	fc 01       	movw	r30, r24
     8ee:	80 81       	ld	r24, Z
     8f0:	88 30       	cpi	r24, 0x08	; 8
     8f2:	c9 f4       	brne	.+50     	; 0x926 <__stack+0x27>
							UDR0=8;
     8f4:	86 ec       	ldi	r24, 0xC6	; 198
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	28 e0       	ldi	r18, 0x08	; 8
     8fa:	fc 01       	movw	r30, r24
     8fc:	20 83       	st	Z, r18
							Esperar_USART_O_TX ();
     8fe:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Esperar_USART_O_TX>
							UDR0=' ';
     902:	86 ec       	ldi	r24, 0xC6	; 198
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	20 e2       	ldi	r18, 0x20	; 32
     908:	fc 01       	movw	r30, r24
     90a:	20 83       	st	Z, r18
							Esperar_USART_O_TX ();
     90c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Esperar_USART_O_TX>
							UDR0=8;
     910:	86 ec       	ldi	r24, 0xC6	; 198
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	28 e0       	ldi	r18, 0x08	; 8
     916:	fc 01       	movw	r30, r24
     918:	20 83       	st	Z, r18
							uchContAuxRx_USART0 --;
     91a:	80 91 3e 03 	lds	r24, 0x033E
     91e:	81 50       	subi	r24, 0x01	; 1
     920:	80 93 3e 03 	sts	0x033E, r24
     924:	11 c0       	rjmp	.+34     	; 0x948 <__stack+0x49>
						}
						else {
							UDR0 = chBufferRx_USART0[uchContAuxRx_USART0];
     926:	86 ec       	ldi	r24, 0xC6	; 198
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	20 91 3e 03 	lds	r18, 0x033E
     92e:	22 2f       	mov	r18, r18
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	20 59       	subi	r18, 0x90	; 144
     934:	3d 4f       	sbci	r19, 0xFD	; 253
     936:	f9 01       	movw	r30, r18
     938:	20 81       	ld	r18, Z
     93a:	fc 01       	movw	r30, r24
     93c:	20 83       	st	Z, r18
							uchContAuxRx_USART0 ++;
     93e:	80 91 3e 03 	lds	r24, 0x033E
     942:	8f 5f       	subi	r24, 0xFF	; 255
     944:	80 93 3e 03 	sts	0x033E, r24
						}
						#else
						uchContAuxRx_USART0 ++;
						#endif
						uchEstadoRecepcionUSART0 = RECIBIR_USART0;
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	80 93 38 03 	sts	0x0338, r24
     94e:	1d c0       	rjmp	.+58     	; 0x98a <__stack+0x8b>
     950:	1c c0       	rjmp	.+56     	; 0x98a <__stack+0x8b>
					}
				}
			}
			else if (uchContAuxRx_USART0 == (USART0_BUFFER_ZISE-1)) {
     952:	80 91 3e 03 	lds	r24, 0x033E
     956:	87 3c       	cpi	r24, 0xC7	; 199
     958:	a1 f4       	brne	.+40     	; 0x982 <__stack+0x83>
				chBufferRx_USART0[uchContAuxRx_USART0] = '\0';
     95a:	80 91 3e 03 	lds	r24, 0x033E
     95e:	88 2f       	mov	r24, r24
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	80 59       	subi	r24, 0x90	; 144
     964:	9d 4f       	sbci	r25, 0xFD	; 253
     966:	fc 01       	movw	r30, r24
     968:	10 82       	st	Z, r1
				uchEstadoBufferRx_USART0 = LLENO;
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	80 93 40 03 	sts	0x0340, r24
				uContTimeoutLecturaRxUSART0 = TIMEOUT_LECTURA_RX_USART_0;
     970:	80 e2       	ldi	r24, 0x20	; 32
     972:	93 e0       	ldi	r25, 0x03	; 3
     974:	90 93 3b 03 	sts	0x033B, r25
     978:	80 93 3a 03 	sts	0x033A, r24
				uchEstadoRecepcionUSART0 = STANDBY;
     97c:	10 92 38 03 	sts	0x0338, r1
     980:	04 c0       	rjmp	.+8      	; 0x98a <__stack+0x8b>
			}						
			else {
				uchEstadoRecepcionUSART0 = RECIBIR_USART0;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 38 03 	sts	0x0338, r24
			}
			break;
     988:	06 c0       	rjmp	.+12     	; 0x996 <__stack+0x97>
     98a:	05 c0       	rjmp	.+10     	; 0x996 <__stack+0x97>
			
		default:
			uchEstadoBufferRx_USART0 = VACIO;
     98c:	10 92 40 03 	sts	0x0340, r1
			uchEstadoRecepcionUSART0 = STANDBY;
     990:	10 92 38 03 	sts	0x0338, r1
			break;
     994:	00 00       	nop
	}	
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <Inicio_USART_0>:
/************************************************************************
* Inicio del USART
************************************************************************/
/* La velocidad de transmisión es de 38,400(9,600) kbps UBRR=25(103), 8 bit de datos, sin control de paridad y 1 bit de parada. */

void Inicio_USART_0 (void) {
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
	/* cargo el UBRR necesario para el baudrate escogido */
//	UBRR0H = (UBRR0>>8) & BYTE_MASK;
//	UBRR0L = UBRR0 & BYTE_MASK;
	UBRR0 = 25;//(103)								/**< \brief UBRR para una velocidad de transmisión de 38400(9600)kbps con: fosc = 16MHz, U2X = 0 */
     9a4:	84 ec       	ldi	r24, 0xC4	; 196
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	29 e1       	ldi	r18, 0x19	; 25
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	fc 01       	movw	r30, r24
     9ae:	31 83       	std	Z+1, r19	; 0x01
     9b0:	20 83       	st	Z, r18

	/* limpio el flag de transmisión y no multiprocessor mode */
	UCSR0A = (OFF<<TXC0)|(VALOR_U2X0<<U2X0)|(OFF<<MPCM0);
     9b2:	80 ec       	ldi	r24, 0xC0	; 192
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	fc 01       	movw	r30, r24
     9b8:	10 82       	st	Z, r1
	
	/* deshabilito la interrupción por recepción, por transmisión y por buffer vacio. Habilito la transmisión y la recepicón, 8n bit de datos y pongo en 0 el noveno bit */
	UCSR0B = (OFF<<RXCIE0)|(OFF<<TXCIE0)|(OFF<<UDRIE0)|(SET<<RXEN0)|(SET<<TXEN0)|(OFF<<UCSZ02)|(OFF<<RXB80)|(OFF<<TXB80);
     9ba:	81 ec       	ldi	r24, 0xC1	; 193
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	28 e1       	ldi	r18, 0x18	; 24
     9c0:	fc 01       	movw	r30, r24
     9c2:	20 83       	st	Z, r18
	
	/* Modo asincronico, sin bit de paridad, un bit de stop, 8 bit de datos */ 
	UCSR0C = (OFF<<UMSEL01)|(OFF<<UMSEL00)|(OFF<<UPM01)|(OFF<<UPM00)|(OFF<<USBS0)|(SET<<UCSZ01)|(SET<<UCSZ00)|(OFF<<UCPOL0);
     9c4:	82 ec       	ldi	r24, 0xC2	; 194
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	26 e0       	ldi	r18, 0x06	; 6
     9ca:	fc 01       	movw	r30, r24
     9cc:	20 83       	st	Z, r18
	
	uchEstadoBufferRx_USART0 = VACIO;
     9ce:	10 92 40 03 	sts	0x0340, r1
	uchEstadoBufferTx_USART0 = VACIO;
     9d2:	10 92 6d 02 	sts	0x026D, r1
}
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <USART0_Flush>:

/************************************************************************
* USART vacio el buffer de recepción
************************************************************************/

void USART0_Flush(void) {
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <USART0_Flush+0x6>
     9e2:	1f 92       	push	r1
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
	unsigned char	uchDummy;
	unsigned int	uContFlush0 = 0;
     9e8:	1a 82       	std	Y+2, r1	; 0x02
     9ea:	19 82       	std	Y+1, r1	; 0x01
	
	while (UCSR0A & (SET<<RXC0)) {
     9ec:	10 c0       	rjmp	.+32     	; 0xa0e <USART0_Flush+0x32>
		uchDummy = UDR0;
     9ee:	86 ec       	ldi	r24, 0xC6	; 198
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	fc 01       	movw	r30, r24
     9f4:	80 81       	ld	r24, Z
     9f6:	8b 83       	std	Y+3, r24	; 0x03
		
		if (uContFlush0 == USART0_BUFFER_ZISE) {
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	9a 81       	ldd	r25, Y+2	; 0x02
     9fc:	88 3c       	cpi	r24, 0xC8	; 200
     9fe:	91 05       	cpc	r25, r1
     a00:	09 f4       	brne	.+2      	; 0xa04 <USART0_Flush+0x28>
			break;
     a02:	0b c0       	rjmp	.+22     	; 0xa1a <USART0_Flush+0x3e>
		}
		uContFlush0 ++;
     a04:	89 81       	ldd	r24, Y+1	; 0x01
     a06:	9a 81       	ldd	r25, Y+2	; 0x02
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	9a 83       	std	Y+2, r25	; 0x02
     a0c:	89 83       	std	Y+1, r24	; 0x01

void USART0_Flush(void) {
	unsigned char	uchDummy;
	unsigned int	uContFlush0 = 0;
	
	while (UCSR0A & (SET<<RXC0)) {
     a0e:	80 ec       	ldi	r24, 0xC0	; 192
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	fc 01       	movw	r30, r24
     a14:	80 81       	ld	r24, Z
     a16:	88 23       	and	r24, r24
     a18:	54 f3       	brlt	.-44     	; 0x9ee <USART0_Flush+0x12>
		if (uContFlush0 == USART0_BUFFER_ZISE) {
			break;
		}
		uContFlush0 ++;
	}	
}
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <Transmitir_Buffer_USART0>:

/************************************************************************
* Transmisión buffer conpleto por USART0 (de prepo y de corrido)
************************************************************************/

void Transmitir_Buffer_USART0 (char *chBufferPtr, int maxBufferSize) {
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <Transmitir_Buffer_USART0+0x6>
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <Transmitir_Buffer_USART0+0x8>
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <Transmitir_Buffer_USART0+0xa>
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	8b 83       	std	Y+3, r24	; 0x03
     a38:	7e 83       	std	Y+6, r23	; 0x06
     a3a:	6d 83       	std	Y+5, r22	; 0x05
	wdt_reset();
     a3c:	a8 95       	wdr
	int i = 0;
     a3e:	1a 82       	std	Y+2, r1	; 0x02
     a40:	19 82       	std	Y+1, r1	; 0x01

	while ((*(chBufferPtr + i) != '\0') && (i < (maxBufferSize-1))) {
     a42:	13 c0       	rjmp	.+38     	; 0xa6a <Transmitir_Buffer_USART0+0x44>
		Esperar_USART_O_TX (); 		/* si el registro de envio esta lleno, espero */
     a44:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Esperar_USART_O_TX>
		UDR0 = *(chBufferPtr + i);
     a48:	86 ec       	ldi	r24, 0xC6	; 198
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	29 81       	ldd	r18, Y+1	; 0x01
     a4e:	3a 81       	ldd	r19, Y+2	; 0x02
     a50:	4b 81       	ldd	r20, Y+3	; 0x03
     a52:	5c 81       	ldd	r21, Y+4	; 0x04
     a54:	24 0f       	add	r18, r20
     a56:	35 1f       	adc	r19, r21
     a58:	f9 01       	movw	r30, r18
     a5a:	20 81       	ld	r18, Z
     a5c:	fc 01       	movw	r30, r24
     a5e:	20 83       	st	Z, r18
		i ++;
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	9a 81       	ldd	r25, Y+2	; 0x02
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	9a 83       	std	Y+2, r25	; 0x02
     a68:	89 83       	std	Y+1, r24	; 0x01

void Transmitir_Buffer_USART0 (char *chBufferPtr, int maxBufferSize) {
	wdt_reset();
	int i = 0;

	while ((*(chBufferPtr + i) != '\0') && (i < (maxBufferSize-1))) {
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	9a 81       	ldd	r25, Y+2	; 0x02
     a6e:	2b 81       	ldd	r18, Y+3	; 0x03
     a70:	3c 81       	ldd	r19, Y+4	; 0x04
     a72:	82 0f       	add	r24, r18
     a74:	93 1f       	adc	r25, r19
     a76:	fc 01       	movw	r30, r24
     a78:	80 81       	ld	r24, Z
     a7a:	88 23       	and	r24, r24
     a7c:	51 f0       	breq	.+20     	; 0xa92 <Transmitir_Buffer_USART0+0x6c>
     a7e:	8d 81       	ldd	r24, Y+5	; 0x05
     a80:	9e 81       	ldd	r25, Y+6	; 0x06
     a82:	9c 01       	movw	r18, r24
     a84:	21 50       	subi	r18, 0x01	; 1
     a86:	31 09       	sbc	r19, r1
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	9a 81       	ldd	r25, Y+2	; 0x02
     a8c:	82 17       	cp	r24, r18
     a8e:	93 07       	cpc	r25, r19
     a90:	cc f2       	brlt	.-78     	; 0xa44 <Transmitir_Buffer_USART0+0x1e>
#ifdef TRANSMITIR_NULL_AL_FINAL
	Esperar_USART_O_TX (); 			/* si el registro de envio esta lleno, espero */
	UDR0 = '\0';
#endif

}
     a92:	26 96       	adiw	r28, 0x06	; 6
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	f8 94       	cli
     a98:	de bf       	out	0x3e, r29	; 62
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	cd bf       	out	0x3d, r28	; 61
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <Transmitir_Buffer_USART0_P>:

/************************************************************************
* Transmisión strig desde la memoria de programa (de prepo y de corrido)
************************************************************************/

void Transmitir_Buffer_USART0_P (const char *chStringPtr) {
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	2a 97       	sbiw	r28, 0x0a	; 10
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	9a 87       	std	Y+10, r25	; 0x0a
     aba:	89 87       	std	Y+9, r24	; 0x09
	wdt_reset();
     abc:	a8 95       	wdr
	int i = 0;
     abe:	1a 82       	std	Y+2, r1	; 0x02
     ac0:	19 82       	std	Y+1, r1	; 0x01

	while (pgm_read_byte(chStringPtr+i) != '\0') {
     ac2:	19 c0       	rjmp	.+50     	; 0xaf6 <Transmitir_Buffer_USART0_P+0x52>
		Esperar_USART_O_TX (); 		/* si el registro de envio esta lleno, espero */
     ac4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Esperar_USART_O_TX>
		UDR0 = pgm_read_byte(chStringPtr+i);
     ac8:	86 ec       	ldi	r24, 0xC6	; 198
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	29 81       	ldd	r18, Y+1	; 0x01
     ace:	3a 81       	ldd	r19, Y+2	; 0x02
     ad0:	49 85       	ldd	r20, Y+9	; 0x09
     ad2:	5a 85       	ldd	r21, Y+10	; 0x0a
     ad4:	24 0f       	add	r18, r20
     ad6:	35 1f       	adc	r19, r21
     ad8:	3f 83       	std	Y+7, r19	; 0x07
     ada:	2e 83       	std	Y+6, r18	; 0x06
     adc:	2e 81       	ldd	r18, Y+6	; 0x06
     ade:	3f 81       	ldd	r19, Y+7	; 0x07
     ae0:	f9 01       	movw	r30, r18
     ae2:	24 91       	lpm	r18, Z
     ae4:	28 87       	std	Y+8, r18	; 0x08
     ae6:	28 85       	ldd	r18, Y+8	; 0x08
     ae8:	fc 01       	movw	r30, r24
     aea:	20 83       	st	Z, r18
		i ++;
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	9a 81       	ldd	r25, Y+2	; 0x02
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01

void Transmitir_Buffer_USART0_P (const char *chStringPtr) {
	wdt_reset();
	int i = 0;

	while (pgm_read_byte(chStringPtr+i) != '\0') {
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	29 85       	ldd	r18, Y+9	; 0x09
     afc:	3a 85       	ldd	r19, Y+10	; 0x0a
     afe:	82 0f       	add	r24, r18
     b00:	93 1f       	adc	r25, r19
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	8b 83       	std	Y+3, r24	; 0x03
     b06:	8b 81       	ldd	r24, Y+3	; 0x03
     b08:	9c 81       	ldd	r25, Y+4	; 0x04
     b0a:	fc 01       	movw	r30, r24
     b0c:	84 91       	lpm	r24, Z
     b0e:	8d 83       	std	Y+5, r24	; 0x05
     b10:	8d 81       	ldd	r24, Y+5	; 0x05
     b12:	88 23       	and	r24, r24
     b14:	b9 f6       	brne	.-82     	; 0xac4 <Transmitir_Buffer_USART0_P+0x20>
#ifdef TRANSMITIR_NULL_AL_FINAL
	Esperar_USART_O_TX (); 			/* si el registro de envio esta lleno, espero */
	UDR0 = '\0';
#endif

}
     b16:	2a 96       	adiw	r28, 0x0a	; 10
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	08 95       	ret

00000b28 <Transmitir_Float_USART0>:

/************************************************************************
* Transmisión de un float por USART0
************************************************************************/

void Transmitir_Float_USART0 (float flValor, char chCantDigitos, char chDecimales) {
     b28:	cf 92       	push	r12
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	2a 97       	sbiw	r28, 0x0a	; 10
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	de bf       	out	0x3e, r29	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	6d 83       	std	Y+5, r22	; 0x05
     b4a:	7e 83       	std	Y+6, r23	; 0x06
     b4c:	8f 83       	std	Y+7, r24	; 0x07
     b4e:	98 87       	std	Y+8, r25	; 0x08
     b50:	49 87       	std	Y+9, r20	; 0x09
     b52:	2a 87       	std	Y+10, r18	; 0x0a
	wdt_reset();
	char charBuf [chCantDigitos+chDecimales];
	dtostrf(flValor, chCantDigitos, chDecimales, charBuf);
	Transmitir_Buffer_USART0 (charBuf, chCantDigitos+chDecimales);
}
     b54:	ed b6       	in	r14, 0x3d	; 61
     b56:	fe b6       	in	r15, 0x3e	; 62
     b58:	8d b7       	in	r24, 0x3d	; 61
     b5a:	9e b7       	in	r25, 0x3e	; 62
     b5c:	6c 01       	movw	r12, r24
/************************************************************************
* Transmisión de un float por USART0
************************************************************************/

void Transmitir_Float_USART0 (float flValor, char chCantDigitos, char chDecimales) {
	wdt_reset();
     b5e:	a8 95       	wdr
	char charBuf [chCantDigitos+chDecimales];
     b60:	89 85       	ldd	r24, Y+9	; 0x09
     b62:	28 2f       	mov	r18, r24
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	8a 85       	ldd	r24, Y+10	; 0x0a
     b68:	88 2f       	mov	r24, r24
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	82 0f       	add	r24, r18
     b6e:	93 1f       	adc	r25, r19
     b70:	9c 01       	movw	r18, r24
     b72:	21 50       	subi	r18, 0x01	; 1
     b74:	31 09       	sbc	r19, r1
     b76:	3a 83       	std	Y+2, r19	; 0x02
     b78:	29 83       	std	Y+1, r18	; 0x01
     b7a:	2d b7       	in	r18, 0x3d	; 61
     b7c:	3e b7       	in	r19, 0x3e	; 62
     b7e:	28 1b       	sub	r18, r24
     b80:	39 0b       	sbc	r19, r25
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	3e bf       	out	0x3e, r19	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	2d bf       	out	0x3d, r18	; 61
     b8c:	8d b7       	in	r24, 0x3d	; 61
     b8e:	9e b7       	in	r25, 0x3e	; 62
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	9c 83       	std	Y+4, r25	; 0x04
     b94:	8b 83       	std	Y+3, r24	; 0x03
	dtostrf(flValor, chCantDigitos, chDecimales, charBuf);
     b96:	2b 81       	ldd	r18, Y+3	; 0x03
     b98:	3c 81       	ldd	r19, Y+4	; 0x04
     b9a:	49 85       	ldd	r20, Y+9	; 0x09
     b9c:	8d 81       	ldd	r24, Y+5	; 0x05
     b9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ba0:	af 81       	ldd	r26, Y+7	; 0x07
     ba2:	b8 85       	ldd	r27, Y+8	; 0x08
     ba4:	89 01       	movw	r16, r18
     ba6:	2a 85       	ldd	r18, Y+10	; 0x0a
     ba8:	bc 01       	movw	r22, r24
     baa:	cd 01       	movw	r24, r26
     bac:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
	Transmitir_Buffer_USART0 (charBuf, chCantDigitos+chDecimales);
     bb0:	89 85       	ldd	r24, Y+9	; 0x09
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	8a 85       	ldd	r24, Y+10	; 0x0a
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	28 0f       	add	r18, r24
     bbe:	39 1f       	adc	r19, r25
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	9c 81       	ldd	r25, Y+4	; 0x04
     bc4:	b9 01       	movw	r22, r18
     bc6:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de be       	out	0x3e, r13	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd be       	out	0x3d, r12	; 61
}
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	fe be       	out	0x3e, r15	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	ed be       	out	0x3d, r14	; 61
     bde:	2a 96       	adiw	r28, 0x0a	; 10
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	df 90       	pop	r13
     bf8:	cf 90       	pop	r12
     bfa:	08 95       	ret

00000bfc <Esperar_USART_O_TX>:

/************************************************************************
* Esperar USART0 para transmitir
************************************************************************/

char Esperar_USART_O_TX (void) {
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	1f 92       	push	r1
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
	wdt_reset();
     c06:	a8 95       	wdr
	char chTimeout;

	uContTimeoutEsperaUSART0 = TIMEOUT_ESPERA_USART_0;
     c08:	82 e0       	ldi	r24, 0x02	; 2
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	90 93 6f 02 	sts	0x026F, r25
     c10:	80 93 6e 02 	sts	0x026E, r24

	while (((UCSR0A & (SET<<UDRE0)) == 0) && (uContTimeoutEsperaUSART0 != 0));
     c14:	00 00       	nop
     c16:	80 ec       	ldi	r24, 0xC0	; 192
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	fc 01       	movw	r30, r24
     c1c:	80 81       	ld	r24, Z
     c1e:	88 2f       	mov	r24, r24
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	80 72       	andi	r24, 0x20	; 32
     c24:	99 27       	eor	r25, r25
     c26:	89 2b       	or	r24, r25
     c28:	31 f4       	brne	.+12     	; 0xc36 <Esperar_USART_O_TX+0x3a>
     c2a:	80 91 6e 02 	lds	r24, 0x026E
     c2e:	90 91 6f 02 	lds	r25, 0x026F
     c32:	89 2b       	or	r24, r25
     c34:	81 f7       	brne	.-32     	; 0xc16 <Esperar_USART_O_TX+0x1a>

	(uContTimeoutEsperaUSART0 != 0) ? (chTimeout = NO) : (chTimeout = SI);
     c36:	80 91 6e 02 	lds	r24, 0x026E
     c3a:	90 91 6f 02 	lds	r25, 0x026F
     c3e:	89 2b       	or	r24, r25
     c40:	11 f0       	breq	.+4      	; 0xc46 <Esperar_USART_O_TX+0x4a>
     c42:	19 82       	std	Y+1, r1	; 0x01
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <Esperar_USART_O_TX+0x4e>
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	89 83       	std	Y+1, r24	; 0x01

	return chTimeout;
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c4c:	0f 90       	pop	r0
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <Recibir_Buffer_USART0>:

/************************************************************************
* Recepcion de buffer completo por USART 0 (de prepo y de corrido)
************************************************************************/

void Recibir_Buffer_USART0 (char *chBufferPtr, int maxBufferSize) {
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	27 97       	sbiw	r28, 0x07	; 7
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	9d 83       	std	Y+5, r25	; 0x05
     c6a:	8c 83       	std	Y+4, r24	; 0x04
     c6c:	7f 83       	std	Y+7, r23	; 0x07
     c6e:	6e 83       	std	Y+6, r22	; 0x06

	int i = 0;
     c70:	1a 82       	std	Y+2, r1	; 0x02
     c72:	19 82       	std	Y+1, r1	; 0x01
	char chTimeout = NO;
     c74:	1b 82       	std	Y+3, r1	; 0x03

	while ((chTimeout == NO) && (i < (maxBufferSize-1)) && (*(chBufferPtr+i-1) != '\0') && (*(chBufferPtr+i-1) != '\n') && (*(chBufferPtr+i-1) != '\r')) {
     c76:	17 c0       	rjmp	.+46     	; 0xca6 <Recibir_Buffer_USART0+0x52>

		chTimeout = Esperar_USART_0_RX();
     c78:	0e 94 93 06 	call	0xd26	; 0xd26 <Esperar_USART_0_RX>
     c7c:	8b 83       	std	Y+3, r24	; 0x03

		if (chTimeout == NO) {
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	88 23       	and	r24, r24
     c82:	89 f4       	brne	.+34     	; 0xca6 <Recibir_Buffer_USART0+0x52>
			*(chBufferPtr+i) = UDR0;
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	9a 81       	ldd	r25, Y+2	; 0x02
     c88:	2c 81       	ldd	r18, Y+4	; 0x04
     c8a:	3d 81       	ldd	r19, Y+5	; 0x05
     c8c:	82 0f       	add	r24, r18
     c8e:	93 1f       	adc	r25, r19
     c90:	26 ec       	ldi	r18, 0xC6	; 198
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	f9 01       	movw	r30, r18
     c96:	20 81       	ld	r18, Z
     c98:	fc 01       	movw	r30, r24
     c9a:	20 83       	st	Z, r18
			i++;
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	9a 83       	std	Y+2, r25	; 0x02
     ca4:	89 83       	std	Y+1, r24	; 0x01
void Recibir_Buffer_USART0 (char *chBufferPtr, int maxBufferSize) {

	int i = 0;
	char chTimeout = NO;

	while ((chTimeout == NO) && (i < (maxBufferSize-1)) && (*(chBufferPtr+i-1) != '\0') && (*(chBufferPtr+i-1) != '\n') && (*(chBufferPtr+i-1) != '\r')) {
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	88 23       	and	r24, r24
     caa:	61 f5       	brne	.+88     	; 0xd04 <Recibir_Buffer_USART0+0xb0>
     cac:	8e 81       	ldd	r24, Y+6	; 0x06
     cae:	9f 81       	ldd	r25, Y+7	; 0x07
     cb0:	9c 01       	movw	r18, r24
     cb2:	21 50       	subi	r18, 0x01	; 1
     cb4:	31 09       	sbc	r19, r1
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	82 17       	cp	r24, r18
     cbc:	93 07       	cpc	r25, r19
     cbe:	14 f5       	brge	.+68     	; 0xd04 <Recibir_Buffer_USART0+0xb0>
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	9a 81       	ldd	r25, Y+2	; 0x02
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	2c 81       	ldd	r18, Y+4	; 0x04
     cc8:	3d 81       	ldd	r19, Y+5	; 0x05
     cca:	82 0f       	add	r24, r18
     ccc:	93 1f       	adc	r25, r19
     cce:	fc 01       	movw	r30, r24
     cd0:	80 81       	ld	r24, Z
     cd2:	88 23       	and	r24, r24
     cd4:	b9 f0       	breq	.+46     	; 0xd04 <Recibir_Buffer_USART0+0xb0>
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	2c 81       	ldd	r18, Y+4	; 0x04
     cde:	3d 81       	ldd	r19, Y+5	; 0x05
     ce0:	82 0f       	add	r24, r18
     ce2:	93 1f       	adc	r25, r19
     ce4:	fc 01       	movw	r30, r24
     ce6:	80 81       	ld	r24, Z
     ce8:	8a 30       	cpi	r24, 0x0A	; 10
     cea:	61 f0       	breq	.+24     	; 0xd04 <Recibir_Buffer_USART0+0xb0>
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	9a 81       	ldd	r25, Y+2	; 0x02
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	2c 81       	ldd	r18, Y+4	; 0x04
     cf4:	3d 81       	ldd	r19, Y+5	; 0x05
     cf6:	82 0f       	add	r24, r18
     cf8:	93 1f       	adc	r25, r19
     cfa:	fc 01       	movw	r30, r24
     cfc:	80 81       	ld	r24, Z
     cfe:	8d 30       	cpi	r24, 0x0D	; 13
     d00:	09 f0       	breq	.+2      	; 0xd04 <Recibir_Buffer_USART0+0xb0>
     d02:	ba cf       	rjmp	.-140    	; 0xc78 <Recibir_Buffer_USART0+0x24>
			*(chBufferPtr+i) = UDR0;
			i++;
		}
	}

	*(chBufferPtr+i) = '\0';
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	9a 81       	ldd	r25, Y+2	; 0x02
     d08:	2c 81       	ldd	r18, Y+4	; 0x04
     d0a:	3d 81       	ldd	r19, Y+5	; 0x05
     d0c:	82 0f       	add	r24, r18
     d0e:	93 1f       	adc	r25, r19
     d10:	fc 01       	movw	r30, r24
     d12:	10 82       	st	Z, r1
}
     d14:	27 96       	adiw	r28, 0x07	; 7
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <Esperar_USART_0_RX>:

/************************************************************************
* Esperar USART0 para Recibir
************************************************************************/

char Esperar_USART_0_RX (void) {
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	1f 92       	push	r1
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
	wdt_reset();
     d30:	a8 95       	wdr
	char chTimeout;

	uContTimeoutEsperaUSART0 = TIMEOUT_ESPERA_USART_0;
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	90 93 6f 02 	sts	0x026F, r25
     d3a:	80 93 6e 02 	sts	0x026E, r24

	while (((UCSR0A & (SET<<RXC0)) == 0) && (uContTimeoutEsperaUSART0 != 0));
     d3e:	00 00       	nop
     d40:	80 ec       	ldi	r24, 0xC0	; 192
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	fc 01       	movw	r30, r24
     d46:	80 81       	ld	r24, Z
     d48:	88 23       	and	r24, r24
     d4a:	34 f0       	brlt	.+12     	; 0xd58 <Esperar_USART_0_RX+0x32>
     d4c:	80 91 6e 02 	lds	r24, 0x026E
     d50:	90 91 6f 02 	lds	r25, 0x026F
     d54:	89 2b       	or	r24, r25
     d56:	a1 f7       	brne	.-24     	; 0xd40 <Esperar_USART_0_RX+0x1a>

	(uContTimeoutEsperaUSART0 != 0) ? (chTimeout = NO) : (chTimeout = SI);
     d58:	80 91 6e 02 	lds	r24, 0x026E
     d5c:	90 91 6f 02 	lds	r25, 0x026F
     d60:	89 2b       	or	r24, r25
     d62:	11 f0       	breq	.+4      	; 0xd68 <Esperar_USART_0_RX+0x42>
     d64:	19 82       	std	Y+1, r1	; 0x01
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <Esperar_USART_0_RX+0x46>
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	89 83       	std	Y+1, r24	; 0x01

	return chTimeout;
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d6e:	0f 90       	pop	r0
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <Medicion_Caudales>:
*****************************************************************************/

/*****************************************************************************
* Maquina de estados
*****************************************************************************/
void Medicion_Caudales (void) {
     d76:	cf 92       	push	r12
     d78:	df 92       	push	r13
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	2a 97       	sbiw	r28, 0x0a	; 10
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
	switch (uchEstadoCaudales) {
     d96:	80 91 09 04 	lds	r24, 0x0409
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	91 05       	cpc	r25, r1
     da2:	19 f0       	breq	.+6      	; 0xdaa <Medicion_Caudales+0x34>
     da4:	02 97       	sbiw	r24, 0x02	; 2
     da6:	61 f0       	breq	.+24     	; 0xdc0 <Medicion_Caudales+0x4a>
     da8:	d7 c0       	rjmp	.+430    	; 0xf58 <Medicion_Caudales+0x1e2>

		case MEDICION_CAUDAL_STANDBY:
				if (uContStandbyCaudal == 0){	// si hay voy a medir
     daa:	80 91 0b 04 	lds	r24, 0x040B
     dae:	90 91 0c 04 	lds	r25, 0x040C
     db2:	89 2b       	or	r24, r25
     db4:	21 f4       	brne	.+8      	; 0xdbe <Medicion_Caudales+0x48>
					uchEstadoCaudales = MEDICION_CAUDAL;
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	80 93 09 04 	sts	0x0409, r24
				}
			break;
     dbc:	d0 c0       	rjmp	.+416    	; 0xf5e <Medicion_Caudales+0x1e8>
     dbe:	cf c0       	rjmp	.+414    	; 0xf5e <Medicion_Caudales+0x1e8>

		case MEDICION_CAUDAL:
			if (uchEtapaMedicionCaudal == ETAPA_MEDICION_STANDBY){
     dc0:	80 91 0a 04 	lds	r24, 0x040A
     dc4:	88 23       	and	r24, r24
     dc6:	19 f4       	brne	.+6      	; 0xdce <Medicion_Caudales+0x58>
				Iniciar_Medicion_Caudal();
     dc8:	0e 94 2d 08 	call	0x105a	; 0x105a <Iniciar_Medicion_Caudal>
     dcc:	c4 c0       	rjmp	.+392    	; 0xf56 <Medicion_Caudales+0x1e0>
			}
			else if (uchEtapaMedicionCaudal == ETAPA_MEDICION_CALCULO){
     dce:	80 91 0a 04 	lds	r24, 0x040A
     dd2:	83 30       	cpi	r24, 0x03	; 3
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <Medicion_Caudales+0x62>
     dd6:	a7 c0       	rjmp	.+334    	; 0xf26 <Medicion_Caudales+0x1b0>
				float flCuentas = uSegundaCaptura-uPrimerCaptura;
     dd8:	20 91 13 04 	lds	r18, 0x0413
     ddc:	30 91 14 04 	lds	r19, 0x0414
     de0:	80 91 11 04 	lds	r24, 0x0411
     de4:	90 91 12 04 	lds	r25, 0x0412
     de8:	a9 01       	movw	r20, r18
     dea:	48 1b       	sub	r20, r24
     dec:	59 0b       	sbc	r21, r25
     dee:	ca 01       	movw	r24, r20
     df0:	cc 01       	movw	r24, r24
     df2:	a0 e0       	ldi	r26, 0x00	; 0
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	bc 01       	movw	r22, r24
     df8:	cd 01       	movw	r24, r26
     dfa:	0e 94 81 57 	call	0xaf02	; 0xaf02 <__floatunsisf>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	8b 83       	std	Y+3, r24	; 0x03
     e04:	9c 83       	std	Y+4, r25	; 0x04
     e06:	ad 83       	std	Y+5, r26	; 0x05
     e08:	be 83       	std	Y+6, r27	; 0x06
				float flCaudal = 15000000/(flCuentas*PULSOS_X_LITRO_CAUDAL);	// en l/min
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	41 ee       	ldi	r20, 0xE1	; 225
     e10:	53 e4       	ldi	r21, 0x43	; 67
     e12:	6b 81       	ldd	r22, Y+3	; 0x03
     e14:	7c 81       	ldd	r23, Y+4	; 0x04
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	9c 01       	movw	r18, r24
     e24:	ad 01       	movw	r20, r26
     e26:	60 ec       	ldi	r22, 0xC0	; 192
     e28:	71 ee       	ldi	r23, 0xE1	; 225
     e2a:	84 e6       	ldi	r24, 0x64	; 100
     e2c:	9b e4       	ldi	r25, 0x4B	; 75
     e2e:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	8f 83       	std	Y+7, r24	; 0x07
     e38:	98 87       	std	Y+8, r25	; 0x08
     e3a:	a9 87       	std	Y+9, r26	; 0x09
     e3c:	ba 87       	std	Y+10, r27	; 0x0a
				int muestrasPromedio = 65535 / flCuentas;						//32767.5@1L 1000@30L
     e3e:	2b 81       	ldd	r18, Y+3	; 0x03
     e40:	3c 81       	ldd	r19, Y+4	; 0x04
     e42:	4d 81       	ldd	r20, Y+5	; 0x05
     e44:	5e 81       	ldd	r21, Y+6	; 0x06
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	7f ef       	ldi	r23, 0xFF	; 255
     e4a:	8f e7       	ldi	r24, 0x7F	; 127
     e4c:	97 e4       	ldi	r25, 0x47	; 71
     e4e:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	bc 01       	movw	r22, r24
     e58:	cd 01       	movw	r24, r26
     e5a:	0e 94 4b 57 	call	0xae96	; 0xae96 <__fixsfsi>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
				if (muestrasPromedio<1){
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	18 16       	cp	r1, r24
     e6c:	19 06       	cpc	r1, r25
     e6e:	2c f0       	brlt	.+10     	; 0xe7a <Medicion_Caudales+0x104>
					muestrasPromedio=1;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	08 c0       	rjmp	.+16     	; 0xe8a <Medicion_Caudales+0x114>
				}
				else if (muestrasPromedio>MAXIMO_MUESTRAS_CAUDAL){
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	0b 97       	sbiw	r24, 0x0b	; 11
     e80:	24 f0       	brlt	.+8      	; 0xe8a <Medicion_Caudales+0x114>
					muestrasPromedio=MAXIMO_MUESTRAS_CAUDAL;
     e82:	8a e0       	ldi	r24, 0x0A	; 10
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	9a 83       	std	Y+2, r25	; 0x02
     e88:	89 83       	std	Y+1, r24	; 0x01
				}
				flCaudalMedido = flCaudalMedido + (flCaudal - flCaudalMedido) / muestrasPromedio;	// hago una media movil											// cargo el valor medido
     e8a:	80 91 0d 04 	lds	r24, 0x040D
     e8e:	90 91 0e 04 	lds	r25, 0x040E
     e92:	a0 91 0f 04 	lds	r26, 0x040F
     e96:	b0 91 10 04 	lds	r27, 0x0410
     e9a:	9c 01       	movw	r18, r24
     e9c:	ad 01       	movw	r20, r26
     e9e:	6f 81       	ldd	r22, Y+7	; 0x07
     ea0:	78 85       	ldd	r23, Y+8	; 0x08
     ea2:	89 85       	ldd	r24, Y+9	; 0x09
     ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea6:	0e 94 67 56 	call	0xacce	; 0xacce <__subsf3>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	6c 01       	movw	r12, r24
     eb0:	7d 01       	movw	r14, r26
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	09 2e       	mov	r0, r25
     eb8:	00 0c       	add	r0, r0
     eba:	aa 0b       	sbc	r26, r26
     ebc:	bb 0b       	sbc	r27, r27
     ebe:	bc 01       	movw	r22, r24
     ec0:	cd 01       	movw	r24, r26
     ec2:	0e 94 83 57 	call	0xaf06	; 0xaf06 <__floatsisf>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	9c 01       	movw	r18, r24
     ecc:	ad 01       	movw	r20, r26
     ece:	c7 01       	movw	r24, r14
     ed0:	b6 01       	movw	r22, r12
     ed2:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	7c 01       	movw	r14, r24
     edc:	8d 01       	movw	r16, r26
     ede:	80 91 0d 04 	lds	r24, 0x040D
     ee2:	90 91 0e 04 	lds	r25, 0x040E
     ee6:	a0 91 0f 04 	lds	r26, 0x040F
     eea:	b0 91 10 04 	lds	r27, 0x0410
     eee:	9c 01       	movw	r18, r24
     ef0:	ad 01       	movw	r20, r26
     ef2:	c8 01       	movw	r24, r16
     ef4:	b7 01       	movw	r22, r14
     ef6:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__addsf3>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	80 93 0d 04 	sts	0x040D, r24
     f02:	90 93 0e 04 	sts	0x040E, r25
     f06:	a0 93 0f 04 	sts	0x040F, r26
     f0a:	b0 93 10 04 	sts	0x0410, r27

				uContStandbyCaudal = TIEMPO_MEDICION_CAUDAL_STANDBY;
     f0e:	8a e0       	ldi	r24, 0x0A	; 10
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	90 93 0c 04 	sts	0x040C, r25
     f16:	80 93 0b 04 	sts	0x040B, r24
				uchEtapaMedicionCaudal = ETAPA_MEDICION_STANDBY;
     f1a:	10 92 0a 04 	sts	0x040A, r1
				uchEstadoCaudales = MEDICION_CAUDAL_STANDBY;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	80 93 09 04 	sts	0x0409, r24
     f24:	18 c0       	rjmp	.+48     	; 0xf56 <Medicion_Caudales+0x1e0>
			}
			else if (uchEtapaMedicionCaudal == ETAPA_MEDICION_OVERFLOW){
     f26:	80 91 0a 04 	lds	r24, 0x040A
     f2a:	84 30       	cpi	r24, 0x04	; 4
     f2c:	a1 f4       	brne	.+40     	; 0xf56 <Medicion_Caudales+0x1e0>
				flCaudalMedido = 0;//lValorCaudal - flValorCaudal / MUESTRAS_CAUDAL;	// hago una media movil											// cargo el valor medido
     f2e:	10 92 0d 04 	sts	0x040D, r1
     f32:	10 92 0e 04 	sts	0x040E, r1
     f36:	10 92 0f 04 	sts	0x040F, r1
     f3a:	10 92 10 04 	sts	0x0410, r1

				uContStandbyCaudal = TIEMPO_MEDICION_CAUDAL_STANDBY;
     f3e:	8a e0       	ldi	r24, 0x0A	; 10
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	90 93 0c 04 	sts	0x040C, r25
     f46:	80 93 0b 04 	sts	0x040B, r24
				uchEtapaMedicionCaudal = ETAPA_MEDICION_STANDBY;
     f4a:	10 92 0a 04 	sts	0x040A, r1
				uchEstadoCaudales = MEDICION_CAUDAL_STANDBY;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	80 93 09 04 	sts	0x0409, r24
			}
			break;
     f54:	04 c0       	rjmp	.+8      	; 0xf5e <Medicion_Caudales+0x1e8>
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <Medicion_Caudales+0x1e8>

		default:
			Configuracion_Timer_Medicion_Caudales();
     f58:	0e 94 be 07 	call	0xf7c	; 0xf7c <Configuracion_Timer_Medicion_Caudales>
			break;
     f5c:	00 00       	nop
	}
}
     f5e:	2a 96       	adiw	r28, 0x0a	; 10
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	08 95       	ret

00000f7c <Configuracion_Timer_Medicion_Caudales>:

/*****************************************************************************
* Inicio de Maquina de estados
*****************************************************************************/
void Configuracion_Timer_Medicion_Caudales (void) {
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62

	TCCR1A = (OFF<<COM1A1)|(OFF<<COM1A0)|(OFF<<COM1B1)|(OFF<<COM1B0)|(OFF<<WGM11)|(OFF<<WGM10);				/* el timer opera en modo normal */
     f84:	80 e8       	ldi	r24, 0x80	; 128
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	fc 01       	movw	r30, r24
     f8a:	10 82       	st	Z, r1
	TCCR1B = (ON<<ICNC1)|(ON<<ICES1)|(OFF<<WGM13)|(OFF<<WGM12)|(OFF<<CS12)|(OFF<<CS11)|(OFF<<CS10);			/* con filtro activado, flanco positivo y sin prescaler */
     f8c:	81 e8       	ldi	r24, 0x81	; 129
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	20 ec       	ldi	r18, 0xC0	; 192
     f92:	fc 01       	movw	r30, r24
     f94:	20 83       	st	Z, r18
	TCCR1C = (OFF<<FOC1A)|(OFF<<FOC1B);	/* aseguro que no hay ninguna salida por comparación activada mas alla del modo de operacion */
     f96:	82 e8       	ldi	r24, 0x82	; 130
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	fc 01       	movw	r30, r24
     f9c:	10 82       	st	Z, r1
	CLEAR_BIT (TIMSK1, OCIE1A);			/* deshabilito la interrupción del comparador A */
     f9e:	8f e6       	ldi	r24, 0x6F	; 111
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	2f e6       	ldi	r18, 0x6F	; 111
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	f9 01       	movw	r30, r18
     fa8:	20 81       	ld	r18, Z
     faa:	2d 7f       	andi	r18, 0xFD	; 253
     fac:	fc 01       	movw	r30, r24
     fae:	20 83       	st	Z, r18
	CLEAR_BIT (TIMSK1, OCIE1B);			/* deshabilito la interrupción del comparador B */
     fb0:	8f e6       	ldi	r24, 0x6F	; 111
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	2f e6       	ldi	r18, 0x6F	; 111
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	f9 01       	movw	r30, r18
     fba:	20 81       	ld	r18, Z
     fbc:	2b 7f       	andi	r18, 0xFB	; 251
     fbe:	fc 01       	movw	r30, r24
     fc0:	20 83       	st	Z, r18
	CLEAR_BIT (TIMSK1, TOIE1);			/* deshabilito la interrupción por overflow */
     fc2:	8f e6       	ldi	r24, 0x6F	; 111
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	2f e6       	ldi	r18, 0x6F	; 111
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	f9 01       	movw	r30, r18
     fcc:	20 81       	ld	r18, Z
     fce:	2e 7f       	andi	r18, 0xFE	; 254
     fd0:	fc 01       	movw	r30, r24
     fd2:	20 83       	st	Z, r18
	CLEAR_BIT (TIMSK1, ICIE1);			/* deshabilito la interrupción por captura */
     fd4:	8f e6       	ldi	r24, 0x6F	; 111
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	2f e6       	ldi	r18, 0x6F	; 111
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	f9 01       	movw	r30, r18
     fde:	20 81       	ld	r18, Z
     fe0:	2f 7d       	andi	r18, 0xDF	; 223
     fe2:	fc 01       	movw	r30, r24
     fe4:	20 83       	st	Z, r18

	SET_BIT (TIFR1, ICF1);				/* reaseguro que no haya ninguna interrupción activa */
     fe6:	86 e3       	ldi	r24, 0x36	; 54
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	26 e3       	ldi	r18, 0x36	; 54
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	f9 01       	movw	r30, r18
     ff0:	20 81       	ld	r18, Z
     ff2:	20 62       	ori	r18, 0x20	; 32
     ff4:	fc 01       	movw	r30, r24
     ff6:	20 83       	st	Z, r18
	SET_BIT (TIFR1, OCF1A);				/* reaseguro que no haya ninguna interrupción activa */
     ff8:	86 e3       	ldi	r24, 0x36	; 54
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	26 e3       	ldi	r18, 0x36	; 54
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	f9 01       	movw	r30, r18
    1002:	20 81       	ld	r18, Z
    1004:	22 60       	ori	r18, 0x02	; 2
    1006:	fc 01       	movw	r30, r24
    1008:	20 83       	st	Z, r18
	SET_BIT (TIFR1, OCF1B);				/* reaseguro que no haya ninguna interrupción activa */
    100a:	86 e3       	ldi	r24, 0x36	; 54
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	26 e3       	ldi	r18, 0x36	; 54
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	f9 01       	movw	r30, r18
    1014:	20 81       	ld	r18, Z
    1016:	24 60       	ori	r18, 0x04	; 4
    1018:	fc 01       	movw	r30, r24
    101a:	20 83       	st	Z, r18
	SET_BIT (TIFR1, TOV1);				/* reaseguro que no haya ninguna interrupción activa */
    101c:	86 e3       	ldi	r24, 0x36	; 54
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	26 e3       	ldi	r18, 0x36	; 54
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	f9 01       	movw	r30, r18
    1026:	20 81       	ld	r18, Z
    1028:	21 60       	ori	r18, 0x01	; 1
    102a:	fc 01       	movw	r30, r24
    102c:	20 83       	st	Z, r18

	flCaudalMedido=0.0;
    102e:	10 92 0d 04 	sts	0x040D, r1
    1032:	10 92 0e 04 	sts	0x040E, r1
    1036:	10 92 0f 04 	sts	0x040F, r1
    103a:	10 92 10 04 	sts	0x0410, r1
	uContStandbyCaudal = TIEMPO_MEDICION_CAUDAL_STANDBY;
    103e:	8a e0       	ldi	r24, 0x0A	; 10
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	90 93 0c 04 	sts	0x040C, r25
    1046:	80 93 0b 04 	sts	0x040B, r24
	uchEtapaMedicionCaudal = ETAPA_MEDICION_STANDBY;
    104a:	10 92 0a 04 	sts	0x040A, r1
	uchEstadoCaudales = MEDICION_CAUDAL_STANDBY;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	80 93 09 04 	sts	0x0409, r24
}
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <Iniciar_Medicion_Caudal>:

/************************************************************************
* Inicio medicion
************************************************************************/
void Iniciar_Medicion_Caudal (void) {
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
	uchEtapaMedicionCaudal = ETAPA_MEDICION_CAPTURA_1;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	80 93 0a 04 	sts	0x040A, r24
	TCNT1 = 0;							/* pongo en cero el timer */
    1068:	84 e8       	ldi	r24, 0x84	; 132
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	fc 01       	movw	r30, r24
    106e:	11 82       	std	Z+1, r1	; 0x01
    1070:	10 82       	st	Z, r1

	SET_BIT (TIFR1, ICF1);				/* reaseguro que no haya ninguna interrupción activa */
    1072:	86 e3       	ldi	r24, 0x36	; 54
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	26 e3       	ldi	r18, 0x36	; 54
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	f9 01       	movw	r30, r18
    107c:	20 81       	ld	r18, Z
    107e:	20 62       	ori	r18, 0x20	; 32
    1080:	fc 01       	movw	r30, r24
    1082:	20 83       	st	Z, r18
	SET_BIT (TIFR1, OCF1A);				/* reaseguro que no haya ninguna interrupción activa */
    1084:	86 e3       	ldi	r24, 0x36	; 54
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	26 e3       	ldi	r18, 0x36	; 54
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	f9 01       	movw	r30, r18
    108e:	20 81       	ld	r18, Z
    1090:	22 60       	ori	r18, 0x02	; 2
    1092:	fc 01       	movw	r30, r24
    1094:	20 83       	st	Z, r18
	SET_BIT (TIFR1, OCF1B);				/* reaseguro que no haya ninguna interrupción activa */
    1096:	86 e3       	ldi	r24, 0x36	; 54
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	26 e3       	ldi	r18, 0x36	; 54
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	f9 01       	movw	r30, r18
    10a0:	20 81       	ld	r18, Z
    10a2:	24 60       	ori	r18, 0x04	; 4
    10a4:	fc 01       	movw	r30, r24
    10a6:	20 83       	st	Z, r18
	SET_BIT (TIFR1, TOV1);				/* reaseguro que no haya ninguna interrupción activa */
    10a8:	86 e3       	ldi	r24, 0x36	; 54
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	26 e3       	ldi	r18, 0x36	; 54
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	f9 01       	movw	r30, r18
    10b2:	20 81       	ld	r18, Z
    10b4:	21 60       	ori	r18, 0x01	; 1
    10b6:	fc 01       	movw	r30, r24
    10b8:	20 83       	st	Z, r18

	TCCR1B |= (ON<<CS11)|(ON<<CS10);	/* pongo a correr el timer con preescaler en 64 */
    10ba:	81 e8       	ldi	r24, 0x81	; 129
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	21 e8       	ldi	r18, 0x81	; 129
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	f9 01       	movw	r30, r18
    10c4:	20 81       	ld	r18, Z
    10c6:	23 60       	ori	r18, 0x03	; 3
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18

	SET_BIT (TIMSK1, ICIE1);			/* habilito la interrupción por captura */
    10cc:	8f e6       	ldi	r24, 0x6F	; 111
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	2f e6       	ldi	r18, 0x6F	; 111
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	f9 01       	movw	r30, r18
    10d6:	20 81       	ld	r18, Z
    10d8:	20 62       	ori	r18, 0x20	; 32
    10da:	fc 01       	movw	r30, r24
    10dc:	20 83       	st	Z, r18
	SET_BIT (TIMSK1, TOIE1);			/* habilito la interrupción por overflow */
    10de:	8f e6       	ldi	r24, 0x6F	; 111
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	2f e6       	ldi	r18, 0x6F	; 111
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	f9 01       	movw	r30, r18
    10e8:	20 81       	ld	r18, Z
    10ea:	21 60       	ori	r18, 0x01	; 1
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 83       	st	Z, r18
}
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	08 95       	ret

000010f6 <Control_Temp>:
extern char				chBufferTx_USART0[USART0_BUFFER_ZISE];	/**< \brief buffer de transmisión USART del uc */

/*****************************************************************************
* Maquina de estados
*****************************************************************************/
void Control_Temp (void) {
    10f6:	cf 92       	push	r12
    10f8:	df 92       	push	r13
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	2a 97       	sbiw	r28, 0x0a	; 10
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
	switch (uchEstadoControl) {
    1116:	80 91 15 04 	lds	r24, 0x0415
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	21 f0       	breq	.+8      	; 0x112a <Control_Temp+0x34>
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	09 f4       	brne	.+2      	; 0x1128 <Control_Temp+0x32>
    1126:	9d c1       	rjmp	.+826    	; 0x1462 <Control_Temp+0x36c>
    1128:	fa c6       	rjmp	.+3572   	; 0x1f1e <Control_Temp+0xe28>

		case CONTROL_STANDBY:
			// detecto caudal arranque
			if (flCaudalMedido > CAUDAL_ARRANQUE){
    112a:	80 91 0d 04 	lds	r24, 0x040D
    112e:	90 91 0e 04 	lds	r25, 0x040E
    1132:	a0 91 0f 04 	lds	r26, 0x040F
    1136:	b0 91 10 04 	lds	r27, 0x0410
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e4       	ldi	r20, 0x40	; 64
    1140:	50 e4       	ldi	r21, 0x40	; 64
    1142:	bc 01       	movw	r22, r24
    1144:	cd 01       	movw	r24, r26
    1146:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    114a:	18 16       	cp	r1, r24
    114c:	0c f0       	brlt	.+2      	; 0x1150 <Control_Temp+0x5a>
    114e:	91 c0       	rjmp	.+290    	; 0x1272 <Control_Temp+0x17c>
				// inicio el PID
				flPIDintegTerm=0;
    1150:	10 92 25 04 	sts	0x0425, r1
    1154:	10 92 26 04 	sts	0x0426, r1
    1158:	10 92 27 04 	sts	0x0427, r1
    115c:	10 92 28 04 	sts	0x0428, r1
				flTempMedidaAnterior = flTempMedida;
    1160:	80 91 7f 04 	lds	r24, 0x047F
    1164:	90 91 80 04 	lds	r25, 0x0480
    1168:	a0 91 81 04 	lds	r26, 0x0481
    116c:	b0 91 82 04 	lds	r27, 0x0482
    1170:	80 93 32 04 	sts	0x0432, r24
    1174:	90 93 33 04 	sts	0x0433, r25
    1178:	a0 93 34 04 	sts	0x0434, r26
    117c:	b0 93 35 04 	sts	0x0435, r27
				// inicio la deteccion de variacion brusca de caudal
				flCaudalMedidoAnterior=flCaudalMedido;
    1180:	80 91 0d 04 	lds	r24, 0x040D
    1184:	90 91 0e 04 	lds	r25, 0x040E
    1188:	a0 91 0f 04 	lds	r26, 0x040F
    118c:	b0 91 10 04 	lds	r27, 0x0410
    1190:	80 93 29 04 	sts	0x0429, r24
    1194:	90 93 2a 04 	sts	0x042A, r25
    1198:	a0 93 2b 04 	sts	0x042B, r26
    119c:	b0 93 2c 04 	sts	0x042C, r27
				// inicio los tiempos de veda de operacion de cada control
				uContPeriodoVedaPID=0;
    11a0:	10 92 3b 04 	sts	0x043B, r1
    11a4:	10 92 3a 04 	sts	0x043A, r1
				uContPeriodoVedaCaudal=uPeriodoVedaCaudal;
    11a8:	80 91 1d 04 	lds	r24, 0x041D
    11ac:	90 91 1e 04 	lds	r25, 0x041E
    11b0:	90 93 55 04 	sts	0x0455, r25
    11b4:	80 93 54 04 	sts	0x0454, r24
				// deteccion de condiciones inseguras
				if ((flTempMedida > MAX_TEMPERATURA_SEGURIDAD) || (flTempMedida < MIN_TEMPERATURA_SEGURIDAD) || (flCaudalMedido > MAX_CAUDAL_SEGURIDAD) || (flCaudalMedido < MIN_CAUDAL_SEGURIDAD)){
    11b8:	80 91 7f 04 	lds	r24, 0x047F
    11bc:	90 91 80 04 	lds	r25, 0x0480
    11c0:	a0 91 81 04 	lds	r26, 0x0481
    11c4:	b0 91 82 04 	lds	r27, 0x0482
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	40 ea       	ldi	r20, 0xA0	; 160
    11ce:	52 e4       	ldi	r21, 0x42	; 66
    11d0:	bc 01       	movw	r22, r24
    11d2:	cd 01       	movw	r24, r26
    11d4:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    11d8:	18 16       	cp	r1, r24
    11da:	a4 f1       	brlt	.+104    	; 0x1244 <Control_Temp+0x14e>
    11dc:	80 91 7f 04 	lds	r24, 0x047F
    11e0:	90 91 80 04 	lds	r25, 0x0480
    11e4:	a0 91 81 04 	lds	r26, 0x0481
    11e8:	b0 91 82 04 	lds	r27, 0x0482
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	a9 01       	movw	r20, r18
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    11fa:	88 23       	and	r24, r24
    11fc:	1c f1       	brlt	.+70     	; 0x1244 <Control_Temp+0x14e>
    11fe:	80 91 0d 04 	lds	r24, 0x040D
    1202:	90 91 0e 04 	lds	r25, 0x040E
    1206:	a0 91 0f 04 	lds	r26, 0x040F
    120a:	b0 91 10 04 	lds	r27, 0x0410
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e7       	ldi	r20, 0x70	; 112
    1214:	51 e4       	ldi	r21, 0x41	; 65
    1216:	bc 01       	movw	r22, r24
    1218:	cd 01       	movw	r24, r26
    121a:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    121e:	18 16       	cp	r1, r24
    1220:	8c f0       	brlt	.+34     	; 0x1244 <Control_Temp+0x14e>
    1222:	80 91 0d 04 	lds	r24, 0x040D
    1226:	90 91 0e 04 	lds	r25, 0x040E
    122a:	a0 91 0f 04 	lds	r26, 0x040F
    122e:	b0 91 10 04 	lds	r27, 0x0410
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	a9 01       	movw	r20, r18
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    1240:	88 23       	and	r24, r24
    1242:	54 f4       	brge	.+20     	; 0x1258 <Control_Temp+0x162>
					//cierro el gas
					CLEAR_BIT(RELAY_GAS_PORT, RELAY_GAS_PIN);
    1244:	88 e2       	ldi	r24, 0x28	; 40
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	28 e2       	ldi	r18, 0x28	; 40
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	f9 01       	movw	r30, r18
    124e:	20 81       	ld	r18, Z
    1250:	2f 7e       	andi	r18, 0xEF	; 239
    1252:	fc 01       	movw	r30, r24
    1254:	20 83       	st	Z, r18
    1256:	16 c0       	rjmp	.+44     	; 0x1284 <Control_Temp+0x18e>
				}
				else{
					// abro el gas
					SET_BIT(RELAY_GAS_PORT, RELAY_GAS_PIN);
    1258:	88 e2       	ldi	r24, 0x28	; 40
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	28 e2       	ldi	r18, 0x28	; 40
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	f9 01       	movw	r30, r18
    1262:	20 81       	ld	r18, Z
    1264:	20 61       	ori	r18, 0x10	; 16
    1266:	fc 01       	movw	r30, r24
    1268:	20 83       	st	Z, r18
					uchEstadoControl = CONTROL_PID_TEMP;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	80 93 15 04 	sts	0x0415, r24
    1270:	09 c0       	rjmp	.+18     	; 0x1284 <Control_Temp+0x18e>
				}
			}
			else{ // poco caudal cierro el gas
				CLEAR_BIT(RELAY_GAS_PORT, RELAY_GAS_PIN);
    1272:	88 e2       	ldi	r24, 0x28	; 40
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	28 e2       	ldi	r18, 0x28	; 40
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	f9 01       	movw	r30, r18
    127c:	20 81       	ld	r18, Z
    127e:	2f 7e       	andi	r18, 0xEF	; 239
    1280:	fc 01       	movw	r30, r24
    1282:	20 83       	st	Z, r18
			}

			// impresion de variables
			if (chPrintEstado == SI){
    1284:	80 91 16 04 	lds	r24, 0x0416
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	09 f0       	breq	.+2      	; 0x128e <Control_Temp+0x198>
    128c:	e9 c0       	rjmp	.+466    	; 0x1460 <Control_Temp+0x36a>
				int index = sprintf(chBufferTx_USART0, "\rCaud= ");
    128e:	88 e0       	ldi	r24, 0x08	; 8
    1290:	e0 e4       	ldi	r30, 0x40	; 64
    1292:	f1 e0       	ldi	r31, 0x01	; 1
    1294:	a1 e4       	ldi	r26, 0x41	; 65
    1296:	b3 e0       	ldi	r27, 0x03	; 3
    1298:	01 90       	ld	r0, Z+
    129a:	0d 92       	st	X+, r0
    129c:	8a 95       	dec	r24
    129e:	e1 f7       	brne	.-8      	; 0x1298 <Control_Temp+0x1a2>
    12a0:	87 e0       	ldi	r24, 0x07	; 7
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	9e 83       	std	Y+6, r25	; 0x06
    12a6:	8d 83       	std	Y+5, r24	; 0x05
				dtostrf(flCaudalMedido, 4, 1, chBufferTx_USART0+index);
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	9e 81       	ldd	r25, Y+6	; 0x06
    12ac:	9c 01       	movw	r18, r24
    12ae:	2f 5b       	subi	r18, 0xBF	; 191
    12b0:	3c 4f       	sbci	r19, 0xFC	; 252
    12b2:	80 91 0d 04 	lds	r24, 0x040D
    12b6:	90 91 0e 04 	lds	r25, 0x040E
    12ba:	a0 91 0f 04 	lds	r26, 0x040F
    12be:	b0 91 10 04 	lds	r27, 0x0410
    12c2:	89 01       	movw	r16, r18
    12c4:	21 e0       	ldi	r18, 0x01	; 1
    12c6:	44 e0       	ldi	r20, 0x04	; 4
    12c8:	bc 01       	movw	r22, r24
    12ca:	cd 01       	movw	r24, r26
    12cc:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
				index += 4;
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	04 96       	adiw	r24, 0x04	; 4
    12d6:	9e 83       	std	Y+6, r25	; 0x06
    12d8:	8d 83       	std	Y+5, r24	; 0x05
				index += sprintf(chBufferTx_USART0+index, " l/min; SetTemp= ");
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	9e 81       	ldd	r25, Y+6	; 0x06
    12de:	8f 5b       	subi	r24, 0xBF	; 191
    12e0:	9c 4f       	sbci	r25, 0xFC	; 252
    12e2:	22 e1       	ldi	r18, 0x12	; 18
    12e4:	e8 e4       	ldi	r30, 0x48	; 72
    12e6:	f1 e0       	ldi	r31, 0x01	; 1
    12e8:	dc 01       	movw	r26, r24
    12ea:	01 90       	ld	r0, Z+
    12ec:	0d 92       	st	X+, r0
    12ee:	2a 95       	dec	r18
    12f0:	e1 f7       	brne	.-8      	; 0x12ea <Control_Temp+0x1f4>
    12f2:	81 e1       	ldi	r24, 0x11	; 17
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	2d 81       	ldd	r18, Y+5	; 0x05
    12f8:	3e 81       	ldd	r19, Y+6	; 0x06
    12fa:	82 0f       	add	r24, r18
    12fc:	93 1f       	adc	r25, r19
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	8d 83       	std	Y+5, r24	; 0x05
				dtostrf(flTempSetP, 4, 1, chBufferTx_USART0+index);
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
    1304:	9e 81       	ldd	r25, Y+6	; 0x06
    1306:	9c 01       	movw	r18, r24
    1308:	2f 5b       	subi	r18, 0xBF	; 191
    130a:	3c 4f       	sbci	r19, 0xFC	; 252
    130c:	80 91 69 02 	lds	r24, 0x0269
    1310:	90 91 6a 02 	lds	r25, 0x026A
    1314:	a0 91 6b 02 	lds	r26, 0x026B
    1318:	b0 91 6c 02 	lds	r27, 0x026C
    131c:	89 01       	movw	r16, r18
    131e:	21 e0       	ldi	r18, 0x01	; 1
    1320:	44 e0       	ldi	r20, 0x04	; 4
    1322:	bc 01       	movw	r22, r24
    1324:	cd 01       	movw	r24, r26
    1326:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
				index += 4;
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	04 96       	adiw	r24, 0x04	; 4
    1330:	9e 83       	std	Y+6, r25	; 0x06
    1332:	8d 83       	std	Y+5, r24	; 0x05
				index += sprintf(chBufferTx_USART0+index, " C; AcTemp= ");
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	8f 5b       	subi	r24, 0xBF	; 191
    133a:	9c 4f       	sbci	r25, 0xFC	; 252
    133c:	2d e0       	ldi	r18, 0x0D	; 13
    133e:	ea e5       	ldi	r30, 0x5A	; 90
    1340:	f1 e0       	ldi	r31, 0x01	; 1
    1342:	dc 01       	movw	r26, r24
    1344:	01 90       	ld	r0, Z+
    1346:	0d 92       	st	X+, r0
    1348:	2a 95       	dec	r18
    134a:	e1 f7       	brne	.-8      	; 0x1344 <Control_Temp+0x24e>
    134c:	8c e0       	ldi	r24, 0x0C	; 12
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	2d 81       	ldd	r18, Y+5	; 0x05
    1352:	3e 81       	ldd	r19, Y+6	; 0x06
    1354:	82 0f       	add	r24, r18
    1356:	93 1f       	adc	r25, r19
    1358:	9e 83       	std	Y+6, r25	; 0x06
    135a:	8d 83       	std	Y+5, r24	; 0x05
				dtostrf(flTempMedida, 4, 1, chBufferTx_USART0+index);
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	9c 01       	movw	r18, r24
    1362:	2f 5b       	subi	r18, 0xBF	; 191
    1364:	3c 4f       	sbci	r19, 0xFC	; 252
    1366:	80 91 7f 04 	lds	r24, 0x047F
    136a:	90 91 80 04 	lds	r25, 0x0480
    136e:	a0 91 81 04 	lds	r26, 0x0481
    1372:	b0 91 82 04 	lds	r27, 0x0482
    1376:	89 01       	movw	r16, r18
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	44 e0       	ldi	r20, 0x04	; 4
    137c:	bc 01       	movw	r22, r24
    137e:	cd 01       	movw	r24, r26
    1380:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
				index += 4;
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	04 96       	adiw	r24, 0x04	; 4
    138a:	9e 83       	std	Y+6, r25	; 0x06
    138c:	8d 83       	std	Y+5, r24	; 0x05
				if (stepToRotate<0){
    138e:	80 91 92 04 	lds	r24, 0x0492
    1392:	90 91 93 04 	lds	r25, 0x0493
    1396:	99 23       	and	r25, r25
    1398:	7c f5       	brge	.+94     	; 0x13f8 <Control_Temp+0x302>
					index += sprintf(chBufferTx_USART0+index, " C; ValvPos= %03d%04d;", relativePositionBySteps, stepToRotate);
    139a:	40 91 92 04 	lds	r20, 0x0492
    139e:	50 91 93 04 	lds	r21, 0x0493
    13a2:	20 91 8c 04 	lds	r18, 0x048C
    13a6:	30 91 8d 04 	lds	r19, 0x048D
    13aa:	8d 81       	ldd	r24, Y+5	; 0x05
    13ac:	9e 81       	ldd	r25, Y+6	; 0x06
    13ae:	8f 5b       	subi	r24, 0xBF	; 191
    13b0:	9c 4f       	sbci	r25, 0xFC	; 252
    13b2:	65 2f       	mov	r22, r21
    13b4:	6f 93       	push	r22
    13b6:	4f 93       	push	r20
    13b8:	43 2f       	mov	r20, r19
    13ba:	4f 93       	push	r20
    13bc:	2f 93       	push	r18
    13be:	27 e6       	ldi	r18, 0x67	; 103
    13c0:	31 e0       	ldi	r19, 0x01	; 1
    13c2:	23 2f       	mov	r18, r19
    13c4:	2f 93       	push	r18
    13c6:	27 e6       	ldi	r18, 0x67	; 103
    13c8:	31 e0       	ldi	r19, 0x01	; 1
    13ca:	2f 93       	push	r18
    13cc:	29 2f       	mov	r18, r25
    13ce:	2f 93       	push	r18
    13d0:	8f 93       	push	r24
    13d2:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    13d6:	2d b7       	in	r18, 0x3d	; 61
    13d8:	3e b7       	in	r19, 0x3e	; 62
    13da:	28 5f       	subi	r18, 0xF8	; 248
    13dc:	3f 4f       	sbci	r19, 0xFF	; 255
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	9c 01       	movw	r18, r24
    13ea:	8d 81       	ldd	r24, Y+5	; 0x05
    13ec:	9e 81       	ldd	r25, Y+6	; 0x06
    13ee:	82 0f       	add	r24, r18
    13f0:	93 1f       	adc	r25, r19
    13f2:	9e 83       	std	Y+6, r25	; 0x06
    13f4:	8d 83       	std	Y+5, r24	; 0x05
    13f6:	2d c0       	rjmp	.+90     	; 0x1452 <Control_Temp+0x35c>
				}
				else{
					index += sprintf(chBufferTx_USART0+index, " C; ValvPos= %03d+%03d;", relativePositionBySteps, stepToRotate);
    13f8:	40 91 92 04 	lds	r20, 0x0492
    13fc:	50 91 93 04 	lds	r21, 0x0493
    1400:	20 91 8c 04 	lds	r18, 0x048C
    1404:	30 91 8d 04 	lds	r19, 0x048D
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	8f 5b       	subi	r24, 0xBF	; 191
    140e:	9c 4f       	sbci	r25, 0xFC	; 252
    1410:	65 2f       	mov	r22, r21
    1412:	6f 93       	push	r22
    1414:	4f 93       	push	r20
    1416:	43 2f       	mov	r20, r19
    1418:	4f 93       	push	r20
    141a:	2f 93       	push	r18
    141c:	2e e7       	ldi	r18, 0x7E	; 126
    141e:	31 e0       	ldi	r19, 0x01	; 1
    1420:	23 2f       	mov	r18, r19
    1422:	2f 93       	push	r18
    1424:	2e e7       	ldi	r18, 0x7E	; 126
    1426:	31 e0       	ldi	r19, 0x01	; 1
    1428:	2f 93       	push	r18
    142a:	29 2f       	mov	r18, r25
    142c:	2f 93       	push	r18
    142e:	8f 93       	push	r24
    1430:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    1434:	ed b7       	in	r30, 0x3d	; 61
    1436:	fe b7       	in	r31, 0x3e	; 62
    1438:	38 96       	adiw	r30, 0x08	; 8
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	9c 01       	movw	r18, r24
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	82 0f       	add	r24, r18
    144c:	93 1f       	adc	r25, r19
    144e:	9e 83       	std	Y+6, r25	; 0x06
    1450:	8d 83       	std	Y+5, r24	; 0x05
				}
				Transmitir_Buffer_USART0(chBufferTx_USART0, USART0_BUFFER_ZISE);
    1452:	68 ec       	ldi	r22, 0xC8	; 200
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	81 e4       	ldi	r24, 0x41	; 65
    1458:	93 e0       	ldi	r25, 0x03	; 3
    145a:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>
			}
			break;
    145e:	62 c5       	rjmp	.+2756   	; 0x1f24 <Control_Temp+0xe2e>
    1460:	61 c5       	rjmp	.+2754   	; 0x1f24 <Control_Temp+0xe2e>


		case CONTROL_PID_TEMP:
			// deteccion de condiciones inseguras
			if ((flTempMedida > MAX_TEMPERATURA_SEGURIDAD) || (flTempMedida < MIN_TEMPERATURA_SEGURIDAD) || (flCaudalMedido > MAX_CAUDAL_SEGURIDAD) || (flCaudalMedido < MIN_CAUDAL_SEGURIDAD)){
    1462:	80 91 7f 04 	lds	r24, 0x047F
    1466:	90 91 80 04 	lds	r25, 0x0480
    146a:	a0 91 81 04 	lds	r26, 0x0481
    146e:	b0 91 82 04 	lds	r27, 0x0482
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 ea       	ldi	r20, 0xA0	; 160
    1478:	52 e4       	ldi	r21, 0x42	; 66
    147a:	bc 01       	movw	r22, r24
    147c:	cd 01       	movw	r24, r26
    147e:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    1482:	18 16       	cp	r1, r24
    1484:	a4 f1       	brlt	.+104    	; 0x14ee <Control_Temp+0x3f8>
    1486:	80 91 7f 04 	lds	r24, 0x047F
    148a:	90 91 80 04 	lds	r25, 0x0480
    148e:	a0 91 81 04 	lds	r26, 0x0481
    1492:	b0 91 82 04 	lds	r27, 0x0482
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	a9 01       	movw	r20, r18
    149c:	bc 01       	movw	r22, r24
    149e:	cd 01       	movw	r24, r26
    14a0:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	1c f1       	brlt	.+70     	; 0x14ee <Control_Temp+0x3f8>
    14a8:	80 91 0d 04 	lds	r24, 0x040D
    14ac:	90 91 0e 04 	lds	r25, 0x040E
    14b0:	a0 91 0f 04 	lds	r26, 0x040F
    14b4:	b0 91 10 04 	lds	r27, 0x0410
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e7       	ldi	r20, 0x70	; 112
    14be:	51 e4       	ldi	r21, 0x41	; 65
    14c0:	bc 01       	movw	r22, r24
    14c2:	cd 01       	movw	r24, r26
    14c4:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    14c8:	18 16       	cp	r1, r24
    14ca:	8c f0       	brlt	.+34     	; 0x14ee <Control_Temp+0x3f8>
    14cc:	80 91 0d 04 	lds	r24, 0x040D
    14d0:	90 91 0e 04 	lds	r25, 0x040E
    14d4:	a0 91 0f 04 	lds	r26, 0x040F
    14d8:	b0 91 10 04 	lds	r27, 0x0410
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	a9 01       	movw	r20, r18
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    14ea:	88 23       	and	r24, r24
    14ec:	5c f4       	brge	.+22     	; 0x1504 <Control_Temp+0x40e>
				//cierro el gas
				CLEAR_BIT(RELAY_GAS_PORT, RELAY_GAS_PIN);
    14ee:	88 e2       	ldi	r24, 0x28	; 40
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	28 e2       	ldi	r18, 0x28	; 40
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	f9 01       	movw	r30, r18
    14f8:	20 81       	ld	r18, Z
    14fa:	2f 7e       	andi	r18, 0xEF	; 239
    14fc:	fc 01       	movw	r30, r24
    14fe:	20 83       	st	Z, r18
				uchEstadoControl = CONTROL_STANDBY;
    1500:	10 92 15 04 	sts	0x0415, r1
			}

			// lazo de control
			if (uContPeriodoPID == 0){
    1504:	80 91 17 04 	lds	r24, 0x0417
    1508:	90 91 18 04 	lds	r25, 0x0418
    150c:	89 2b       	or	r24, r25
    150e:	09 f0       	breq	.+2      	; 0x1512 <Control_Temp+0x41c>
    1510:	fa c3       	rjmp	.+2036   	; 0x1d06 <Control_Temp+0xc10>
				// deteccion de variacion brusca de caudal
				flVariacionCaudalMedido = (flCaudalMedido/flCaudalMedidoAnterior)-1.0;
    1512:	80 91 0d 04 	lds	r24, 0x040D
    1516:	90 91 0e 04 	lds	r25, 0x040E
    151a:	a0 91 0f 04 	lds	r26, 0x040F
    151e:	b0 91 10 04 	lds	r27, 0x0410
    1522:	20 91 29 04 	lds	r18, 0x0429
    1526:	30 91 2a 04 	lds	r19, 0x042A
    152a:	40 91 2b 04 	lds	r20, 0x042B
    152e:	50 91 2c 04 	lds	r21, 0x042C
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	bc 01       	movw	r22, r24
    1548:	cd 01       	movw	r24, r26
    154a:	0e 94 67 56 	call	0xacce	; 0xacce <__subsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	80 93 36 04 	sts	0x0436, r24
    1556:	90 93 37 04 	sts	0x0437, r25
    155a:	a0 93 38 04 	sts	0x0438, r26
    155e:	b0 93 39 04 	sts	0x0439, r27
				if (abs(flVariacionCaudalMedido) > (flVariacionCaudalSetP/100.0)){
    1562:	80 91 36 04 	lds	r24, 0x0436
    1566:	90 91 37 04 	lds	r25, 0x0437
    156a:	a0 91 38 04 	lds	r26, 0x0438
    156e:	b0 91 39 04 	lds	r27, 0x0439
    1572:	bc 01       	movw	r22, r24
    1574:	cd 01       	movw	r24, r26
    1576:	0e 94 4b 57 	call	0xae96	; 0xae96 <__fixsfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	99 23       	and	r25, r25
    1580:	1c f4       	brge	.+6      	; 0x1588 <Control_Temp+0x492>
    1582:	91 95       	neg	r25
    1584:	81 95       	neg	r24
    1586:	91 09       	sbc	r25, r1
    1588:	09 2e       	mov	r0, r25
    158a:	00 0c       	add	r0, r0
    158c:	aa 0b       	sbc	r26, r26
    158e:	bb 0b       	sbc	r27, r27
    1590:	bc 01       	movw	r22, r24
    1592:	cd 01       	movw	r24, r26
    1594:	0e 94 83 57 	call	0xaf06	; 0xaf06 <__floatsisf>
    1598:	6b 01       	movw	r12, r22
    159a:	7c 01       	movw	r14, r24
    159c:	80 91 58 04 	lds	r24, 0x0458
    15a0:	90 91 59 04 	lds	r25, 0x0459
    15a4:	a0 91 5a 04 	lds	r26, 0x045A
    15a8:	b0 91 5b 04 	lds	r27, 0x045B
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	48 ec       	ldi	r20, 0xC8	; 200
    15b2:	52 e4       	ldi	r21, 0x42	; 66
    15b4:	bc 01       	movw	r22, r24
    15b6:	cd 01       	movw	r24, r26
    15b8:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	9c 01       	movw	r18, r24
    15c2:	ad 01       	movw	r20, r26
    15c4:	c7 01       	movw	r24, r14
    15c6:	b6 01       	movw	r22, r12
    15c8:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    15cc:	18 16       	cp	r1, r24
    15ce:	0c f0       	brlt	.+2      	; 0x15d2 <Control_Temp+0x4dc>
    15d0:	ad c0       	rjmp	.+346    	; 0x172c <Control_Temp+0x636>
					// deteccion de condicion insegura
					if (abs(flVariacionCaudalMedido) > MAX_VARIACION_CAUDAL_SEGURIDAD){
    15d2:	80 91 36 04 	lds	r24, 0x0436
    15d6:	90 91 37 04 	lds	r25, 0x0437
    15da:	a0 91 38 04 	lds	r26, 0x0438
    15de:	b0 91 39 04 	lds	r27, 0x0439
    15e2:	bc 01       	movw	r22, r24
    15e4:	cd 01       	movw	r24, r26
    15e6:	0e 94 4b 57 	call	0xae96	; 0xae96 <__fixsfsi>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	99 23       	and	r25, r25
    15f0:	1c f4       	brge	.+6      	; 0x15f8 <Control_Temp+0x502>
    15f2:	91 95       	neg	r25
    15f4:	81 95       	neg	r24
    15f6:	91 09       	sbc	r25, r1
    15f8:	09 2e       	mov	r0, r25
    15fa:	00 0c       	add	r0, r0
    15fc:	aa 0b       	sbc	r26, r26
    15fe:	bb 0b       	sbc	r27, r27
    1600:	bc 01       	movw	r22, r24
    1602:	cd 01       	movw	r24, r26
    1604:	0e 94 83 57 	call	0xaf06	; 0xaf06 <__floatsisf>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e8       	ldi	r20, 0x80	; 128
    1612:	5f e3       	ldi	r21, 0x3F	; 63
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    161c:	18 16       	cp	r1, r24
    161e:	0c f5       	brge	.+66     	; 0x1662 <Control_Temp+0x56c>
						// cierro el gas
						CLEAR_BIT(RELAY_GAS_PORT, RELAY_GAS_PIN);
    1620:	88 e2       	ldi	r24, 0x28	; 40
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	28 e2       	ldi	r18, 0x28	; 40
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	f9 01       	movw	r30, r18
    162a:	20 81       	ld	r18, Z
    162c:	2f 7e       	andi	r18, 0xEF	; 239
    162e:	fc 01       	movw	r30, r24
    1630:	20 83       	st	Z, r18
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    1632:	87 e0       	ldi	r24, 0x07	; 7
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	88 70       	andi	r24, 0x08	; 8
    1638:	99 27       	eor	r25, r25
    163a:	89 2b       	or	r24, r25
    163c:	11 f0       	breq	.+4      	; 0x1642 <Control_Temp+0x54c>
    163e:	88 e2       	ldi	r24, 0x28	; 40
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <Control_Temp+0x54e>
    1642:	88 e0       	ldi	r24, 0x08	; 8
    1644:	97 e0       	ldi	r25, 0x07	; 7
    1646:	97 70       	andi	r25, 0x07	; 7
    1648:	89 2b       	or	r24, r25
    164a:	98 2f       	mov	r25, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    164c:	88 e1       	ldi	r24, 0x18	; 24
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	a8 95       	wdr
    1654:	80 93 60 00 	sts	0x0060, r24
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	90 93 60 00 	sts	0x0060, r25
						// reinicio el sistema
						UC_RESET();
    165e:	a8 95       	wdr
    1660:	ff cf       	rjmp	.-2      	; 0x1660 <Control_Temp+0x56a>
					}
					// accion en caso de deteccion de variacion brusca de caudal
					if ((uContPeriodoVedaCaudal==0) && (flEscalaVariacionCaudal != 0)){
    1662:	80 91 54 04 	lds	r24, 0x0454
    1666:	90 91 55 04 	lds	r25, 0x0455
    166a:	89 2b       	or	r24, r25
    166c:	09 f0       	breq	.+2      	; 0x1670 <Control_Temp+0x57a>
    166e:	5e c0       	rjmp	.+188    	; 0x172c <Control_Temp+0x636>
    1670:	80 91 48 04 	lds	r24, 0x0448
    1674:	90 91 49 04 	lds	r25, 0x0449
    1678:	a0 91 4a 04 	lds	r26, 0x044A
    167c:	b0 91 4b 04 	lds	r27, 0x044B
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	a9 01       	movw	r20, r18
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    168e:	88 23       	and	r24, r24
    1690:	09 f4       	brne	.+2      	; 0x1694 <Control_Temp+0x59e>
    1692:	4c c0       	rjmp	.+152    	; 0x172c <Control_Temp+0x636>
						// muevo el motor pp segun variacion de caudal
						stepToRotate = relativePositionBySteps*(int)(flVariacionCaudalMedido*flEscalaVariacionCaudal);
    1694:	80 91 36 04 	lds	r24, 0x0436
    1698:	90 91 37 04 	lds	r25, 0x0437
    169c:	a0 91 38 04 	lds	r26, 0x0438
    16a0:	b0 91 39 04 	lds	r27, 0x0439
    16a4:	20 91 48 04 	lds	r18, 0x0448
    16a8:	30 91 49 04 	lds	r19, 0x0449
    16ac:	40 91 4a 04 	lds	r20, 0x044A
    16b0:	50 91 4b 04 	lds	r21, 0x044B
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	bc 01       	movw	r22, r24
    16c2:	cd 01       	movw	r24, r26
    16c4:	0e 94 4b 57 	call	0xae96	; 0xae96 <__fixsfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	ac 01       	movw	r20, r24
    16ce:	20 91 8c 04 	lds	r18, 0x048C
    16d2:	30 91 8d 04 	lds	r19, 0x048D
    16d6:	42 9f       	mul	r20, r18
    16d8:	c0 01       	movw	r24, r0
    16da:	43 9f       	mul	r20, r19
    16dc:	90 0d       	add	r25, r0
    16de:	52 9f       	mul	r21, r18
    16e0:	90 0d       	add	r25, r0
    16e2:	11 24       	eor	r1, r1
    16e4:	90 93 93 04 	sts	0x0493, r25
    16e8:	80 93 92 04 	sts	0x0492, r24
						// reinicio el PID
						flPIDintegTerm=0;
    16ec:	10 92 25 04 	sts	0x0425, r1
    16f0:	10 92 26 04 	sts	0x0426, r1
    16f4:	10 92 27 04 	sts	0x0427, r1
    16f8:	10 92 28 04 	sts	0x0428, r1
						flTempMedidaAnterior = flTempMedida;
    16fc:	80 91 7f 04 	lds	r24, 0x047F
    1700:	90 91 80 04 	lds	r25, 0x0480
    1704:	a0 91 81 04 	lds	r26, 0x0481
    1708:	b0 91 82 04 	lds	r27, 0x0482
    170c:	80 93 32 04 	sts	0x0432, r24
    1710:	90 93 33 04 	sts	0x0433, r25
    1714:	a0 93 34 04 	sts	0x0434, r26
    1718:	b0 93 35 04 	sts	0x0435, r27
						// inicio el tiempos de veda de PID
						uContPeriodoVedaPID=uPeriodoVedaPID;
    171c:	80 91 56 04 	lds	r24, 0x0456
    1720:	90 91 57 04 	lds	r25, 0x0457
    1724:	90 93 3b 04 	sts	0x043B, r25
    1728:	80 93 3a 04 	sts	0x043A, r24
					}
				}
				flCaudalMedidoAnterior=flCaudalMedido;
    172c:	80 91 0d 04 	lds	r24, 0x040D
    1730:	90 91 0e 04 	lds	r25, 0x040E
    1734:	a0 91 0f 04 	lds	r26, 0x040F
    1738:	b0 91 10 04 	lds	r27, 0x0410
    173c:	80 93 29 04 	sts	0x0429, r24
    1740:	90 93 2a 04 	sts	0x042A, r25
    1744:	a0 93 2b 04 	sts	0x042B, r26
    1748:	b0 93 2c 04 	sts	0x042C, r27

				// control PID
				if (uContPeriodoVedaPID == 0) {
    174c:	80 91 3a 04 	lds	r24, 0x043A
    1750:	90 91 3b 04 	lds	r25, 0x043B
    1754:	89 2b       	or	r24, r25
    1756:	09 f0       	breq	.+2      	; 0x175a <Control_Temp+0x664>
    1758:	c9 c1       	rjmp	.+914    	; 0x1aec <Control_Temp+0x9f6>
					// escalo el valor de Kp, Ki, Kd segun caudal, si corresponde
					float flEscala = 1.0;
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	a0 e8       	ldi	r26, 0x80	; 128
    1760:	bf e3       	ldi	r27, 0x3F	; 63
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	9a 83       	std	Y+2, r25	; 0x02
    1766:	ab 83       	std	Y+3, r26	; 0x03
    1768:	bc 83       	std	Y+4, r27	; 0x04
					if(flCaudalEscalaKsPID != 0){
    176a:	80 91 3c 04 	lds	r24, 0x043C
    176e:	90 91 3d 04 	lds	r25, 0x043D
    1772:	a0 91 3e 04 	lds	r26, 0x043E
    1776:	b0 91 3f 04 	lds	r27, 0x043F
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	a9 01       	movw	r20, r18
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    1788:	88 23       	and	r24, r24
    178a:	d1 f0       	breq	.+52     	; 0x17c0 <Control_Temp+0x6ca>
						flEscala=flCaudalMedido/flCaudalEscalaKsPID;
    178c:	80 91 0d 04 	lds	r24, 0x040D
    1790:	90 91 0e 04 	lds	r25, 0x040E
    1794:	a0 91 0f 04 	lds	r26, 0x040F
    1798:	b0 91 10 04 	lds	r27, 0x0410
    179c:	20 91 3c 04 	lds	r18, 0x043C
    17a0:	30 91 3d 04 	lds	r19, 0x043D
    17a4:	40 91 3e 04 	lds	r20, 0x043E
    17a8:	50 91 3f 04 	lds	r21, 0x043F
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	9a 83       	std	Y+2, r25	; 0x02
    17bc:	ab 83       	std	Y+3, r26	; 0x03
    17be:	bc 83       	std	Y+4, r27	; 0x04
					}
					// calculo error
					flPIDerror = flTempSetP-flTempMedida;
    17c0:	80 91 69 02 	lds	r24, 0x0269
    17c4:	90 91 6a 02 	lds	r25, 0x026A
    17c8:	a0 91 6b 02 	lds	r26, 0x026B
    17cc:	b0 91 6c 02 	lds	r27, 0x026C
    17d0:	20 91 7f 04 	lds	r18, 0x047F
    17d4:	30 91 80 04 	lds	r19, 0x0480
    17d8:	40 91 81 04 	lds	r20, 0x0481
    17dc:	50 91 82 04 	lds	r21, 0x0482
    17e0:	bc 01       	movw	r22, r24
    17e2:	cd 01       	movw	r24, r26
    17e4:	0e 94 67 56 	call	0xacce	; 0xacce <__subsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	80 93 2d 04 	sts	0x042D, r24
    17f0:	90 93 2e 04 	sts	0x042E, r25
    17f4:	a0 93 2f 04 	sts	0x042F, r26
    17f8:	b0 93 30 04 	sts	0x0430, r27
					// calculo proporcional
					flPIDpropTerm = flPIDkP * flEscala * flPIDerror;
    17fc:	80 91 50 04 	lds	r24, 0x0450
    1800:	90 91 51 04 	lds	r25, 0x0451
    1804:	a0 91 52 04 	lds	r26, 0x0452
    1808:	b0 91 53 04 	lds	r27, 0x0453
    180c:	29 81       	ldd	r18, Y+1	; 0x01
    180e:	3a 81       	ldd	r19, Y+2	; 0x02
    1810:	4b 81       	ldd	r20, Y+3	; 0x03
    1812:	5c 81       	ldd	r21, Y+4	; 0x04
    1814:	bc 01       	movw	r22, r24
    1816:	cd 01       	movw	r24, r26
    1818:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	7c 01       	movw	r14, r24
    1822:	8d 01       	movw	r16, r26
    1824:	80 91 2d 04 	lds	r24, 0x042D
    1828:	90 91 2e 04 	lds	r25, 0x042E
    182c:	a0 91 2f 04 	lds	r26, 0x042F
    1830:	b0 91 30 04 	lds	r27, 0x0430
    1834:	9c 01       	movw	r18, r24
    1836:	ad 01       	movw	r20, r26
    1838:	c8 01       	movw	r24, r16
    183a:	b7 01       	movw	r22, r14
    183c:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	80 93 40 04 	sts	0x0440, r24
    1848:	90 93 41 04 	sts	0x0441, r25
    184c:	a0 93 42 04 	sts	0x0442, r26
    1850:	b0 93 43 04 	sts	0x0443, r27
					// calculo integral
					flPIDintegTerm += flPIDkI * flEscala * flPIDerror * uPeriodoPID / TIMER2_A_SEGUNDOS;
    1854:	80 91 4c 04 	lds	r24, 0x044C
    1858:	90 91 4d 04 	lds	r25, 0x044D
    185c:	a0 91 4e 04 	lds	r26, 0x044E
    1860:	b0 91 4f 04 	lds	r27, 0x044F
    1864:	29 81       	ldd	r18, Y+1	; 0x01
    1866:	3a 81       	ldd	r19, Y+2	; 0x02
    1868:	4b 81       	ldd	r20, Y+3	; 0x03
    186a:	5c 81       	ldd	r21, Y+4	; 0x04
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	7c 01       	movw	r14, r24
    187a:	8d 01       	movw	r16, r26
    187c:	80 91 2d 04 	lds	r24, 0x042D
    1880:	90 91 2e 04 	lds	r25, 0x042E
    1884:	a0 91 2f 04 	lds	r26, 0x042F
    1888:	b0 91 30 04 	lds	r27, 0x0430
    188c:	9c 01       	movw	r18, r24
    188e:	ad 01       	movw	r20, r26
    1890:	c8 01       	movw	r24, r16
    1892:	b7 01       	movw	r22, r14
    1894:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	6c 01       	movw	r12, r24
    189e:	7d 01       	movw	r14, r26
    18a0:	80 91 23 04 	lds	r24, 0x0423
    18a4:	90 91 24 04 	lds	r25, 0x0424
    18a8:	cc 01       	movw	r24, r24
    18aa:	a0 e0       	ldi	r26, 0x00	; 0
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	bc 01       	movw	r22, r24
    18b0:	cd 01       	movw	r24, r26
    18b2:	0e 94 81 57 	call	0xaf02	; 0xaf02 <__floatunsisf>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	9c 01       	movw	r18, r24
    18bc:	ad 01       	movw	r20, r26
    18be:	c7 01       	movw	r24, r14
    18c0:	b6 01       	movw	r22, r12
    18c2:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	4a e7       	ldi	r20, 0x7A	; 122
    18d0:	54 e4       	ldi	r21, 0x44	; 68
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	7c 01       	movw	r14, r24
    18e0:	8d 01       	movw	r16, r26
    18e2:	80 91 25 04 	lds	r24, 0x0425
    18e6:	90 91 26 04 	lds	r25, 0x0426
    18ea:	a0 91 27 04 	lds	r26, 0x0427
    18ee:	b0 91 28 04 	lds	r27, 0x0428
    18f2:	9c 01       	movw	r18, r24
    18f4:	ad 01       	movw	r20, r26
    18f6:	c8 01       	movw	r24, r16
    18f8:	b7 01       	movw	r22, r14
    18fa:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__addsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	80 93 25 04 	sts	0x0425, r24
    1906:	90 93 26 04 	sts	0x0426, r25
    190a:	a0 93 27 04 	sts	0x0427, r26
    190e:	b0 93 28 04 	sts	0x0428, r27
					if (flPIDintegTerm > flPIDintMax){
    1912:	80 91 25 04 	lds	r24, 0x0425
    1916:	90 91 26 04 	lds	r25, 0x0426
    191a:	a0 91 27 04 	lds	r26, 0x0427
    191e:	b0 91 28 04 	lds	r27, 0x0428
    1922:	20 91 19 04 	lds	r18, 0x0419
    1926:	30 91 1a 04 	lds	r19, 0x041A
    192a:	40 91 1b 04 	lds	r20, 0x041B
    192e:	50 91 1c 04 	lds	r21, 0x041C
    1932:	bc 01       	movw	r22, r24
    1934:	cd 01       	movw	r24, r26
    1936:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    193a:	18 16       	cp	r1, r24
    193c:	8c f4       	brge	.+34     	; 0x1960 <Control_Temp+0x86a>
						flPIDintegTerm = flPIDintMax;
    193e:	80 91 19 04 	lds	r24, 0x0419
    1942:	90 91 1a 04 	lds	r25, 0x041A
    1946:	a0 91 1b 04 	lds	r26, 0x041B
    194a:	b0 91 1c 04 	lds	r27, 0x041C
    194e:	80 93 25 04 	sts	0x0425, r24
    1952:	90 93 26 04 	sts	0x0426, r25
    1956:	a0 93 27 04 	sts	0x0427, r26
    195a:	b0 93 28 04 	sts	0x0428, r27
    195e:	28 c0       	rjmp	.+80     	; 0x19b0 <Control_Temp+0x8ba>
					}
					else if (flPIDintegTerm < -flPIDintMax){
    1960:	80 91 19 04 	lds	r24, 0x0419
    1964:	90 91 1a 04 	lds	r25, 0x041A
    1968:	a0 91 1b 04 	lds	r26, 0x041B
    196c:	b0 91 1c 04 	lds	r27, 0x041C
    1970:	b0 58       	subi	r27, 0x80	; 128
    1972:	20 91 25 04 	lds	r18, 0x0425
    1976:	30 91 26 04 	lds	r19, 0x0426
    197a:	40 91 27 04 	lds	r20, 0x0427
    197e:	50 91 28 04 	lds	r21, 0x0428
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    198a:	18 16       	cp	r1, r24
    198c:	8c f4       	brge	.+34     	; 0x19b0 <Control_Temp+0x8ba>
						flPIDintegTerm = -flPIDintMax;
    198e:	80 91 19 04 	lds	r24, 0x0419
    1992:	90 91 1a 04 	lds	r25, 0x041A
    1996:	a0 91 1b 04 	lds	r26, 0x041B
    199a:	b0 91 1c 04 	lds	r27, 0x041C
    199e:	b0 58       	subi	r27, 0x80	; 128
    19a0:	80 93 25 04 	sts	0x0425, r24
    19a4:	90 93 26 04 	sts	0x0426, r25
    19a8:	a0 93 27 04 	sts	0x0427, r26
    19ac:	b0 93 28 04 	sts	0x0428, r27
					}
					// calculo diferencial
					flPIDderivTerm = flPIDkD * flEscala * (flTempMedidaAnterior-flTempMedida) * TIMER2_A_SEGUNDOS / uPeriodoPID;
    19b0:	80 91 44 04 	lds	r24, 0x0444
    19b4:	90 91 45 04 	lds	r25, 0x0445
    19b8:	a0 91 46 04 	lds	r26, 0x0446
    19bc:	b0 91 47 04 	lds	r27, 0x0447
    19c0:	29 81       	ldd	r18, Y+1	; 0x01
    19c2:	3a 81       	ldd	r19, Y+2	; 0x02
    19c4:	4b 81       	ldd	r20, Y+3	; 0x03
    19c6:	5c 81       	ldd	r21, Y+4	; 0x04
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	6c 01       	movw	r12, r24
    19d6:	7d 01       	movw	r14, r26
    19d8:	80 91 32 04 	lds	r24, 0x0432
    19dc:	90 91 33 04 	lds	r25, 0x0433
    19e0:	a0 91 34 04 	lds	r26, 0x0434
    19e4:	b0 91 35 04 	lds	r27, 0x0435
    19e8:	20 91 7f 04 	lds	r18, 0x047F
    19ec:	30 91 80 04 	lds	r19, 0x0480
    19f0:	40 91 81 04 	lds	r20, 0x0481
    19f4:	50 91 82 04 	lds	r21, 0x0482
    19f8:	bc 01       	movw	r22, r24
    19fa:	cd 01       	movw	r24, r26
    19fc:	0e 94 67 56 	call	0xacce	; 0xacce <__subsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9c 01       	movw	r18, r24
    1a06:	ad 01       	movw	r20, r26
    1a08:	c7 01       	movw	r24, r14
    1a0a:	b6 01       	movw	r22, r12
    1a0c:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	4a e7       	ldi	r20, 0x7A	; 122
    1a1a:	54 e4       	ldi	r21, 0x44	; 68
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	6c 01       	movw	r12, r24
    1a2a:	7d 01       	movw	r14, r26
    1a2c:	80 91 23 04 	lds	r24, 0x0423
    1a30:	90 91 24 04 	lds	r25, 0x0424
    1a34:	cc 01       	movw	r24, r24
    1a36:	a0 e0       	ldi	r26, 0x00	; 0
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	cd 01       	movw	r24, r26
    1a3e:	0e 94 81 57 	call	0xaf02	; 0xaf02 <__floatunsisf>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	9c 01       	movw	r18, r24
    1a48:	ad 01       	movw	r20, r26
    1a4a:	c7 01       	movw	r24, r14
    1a4c:	b6 01       	movw	r22, r12
    1a4e:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	80 93 1f 04 	sts	0x041F, r24
    1a5a:	90 93 20 04 	sts	0x0420, r25
    1a5e:	a0 93 21 04 	sts	0x0421, r26
    1a62:	b0 93 22 04 	sts	0x0422, r27
					flTempMedidaAnterior = flTempMedida;
    1a66:	80 91 7f 04 	lds	r24, 0x047F
    1a6a:	90 91 80 04 	lds	r25, 0x0480
    1a6e:	a0 91 81 04 	lds	r26, 0x0481
    1a72:	b0 91 82 04 	lds	r27, 0x0482
    1a76:	80 93 32 04 	sts	0x0432, r24
    1a7a:	90 93 33 04 	sts	0x0433, r25
    1a7e:	a0 93 34 04 	sts	0x0434, r26
    1a82:	b0 93 35 04 	sts	0x0435, r27
					// muevo el motor pp
					stepToRotate = (int)(flPIDpropTerm+flPIDintegTerm+flPIDderivTerm);
    1a86:	80 91 40 04 	lds	r24, 0x0440
    1a8a:	90 91 41 04 	lds	r25, 0x0441
    1a8e:	a0 91 42 04 	lds	r26, 0x0442
    1a92:	b0 91 43 04 	lds	r27, 0x0443
    1a96:	20 91 25 04 	lds	r18, 0x0425
    1a9a:	30 91 26 04 	lds	r19, 0x0426
    1a9e:	40 91 27 04 	lds	r20, 0x0427
    1aa2:	50 91 28 04 	lds	r21, 0x0428
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__addsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	7c 01       	movw	r14, r24
    1ab4:	8d 01       	movw	r16, r26
    1ab6:	80 91 1f 04 	lds	r24, 0x041F
    1aba:	90 91 20 04 	lds	r25, 0x0420
    1abe:	a0 91 21 04 	lds	r26, 0x0421
    1ac2:	b0 91 22 04 	lds	r27, 0x0422
    1ac6:	9c 01       	movw	r18, r24
    1ac8:	ad 01       	movw	r20, r26
    1aca:	c8 01       	movw	r24, r16
    1acc:	b7 01       	movw	r22, r14
    1ace:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__addsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	cd 01       	movw	r24, r26
    1ada:	0e 94 4b 57 	call	0xae96	; 0xae96 <__fixsfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	90 93 93 04 	sts	0x0493, r25
    1ae6:	80 93 92 04 	sts	0x0492, r24
    1aea:	18 c0       	rjmp	.+48     	; 0x1b1c <Control_Temp+0xa26>
				}
				else {
					// inicio el PID
					flPIDintegTerm=0;
    1aec:	10 92 25 04 	sts	0x0425, r1
    1af0:	10 92 26 04 	sts	0x0426, r1
    1af4:	10 92 27 04 	sts	0x0427, r1
    1af8:	10 92 28 04 	sts	0x0428, r1
					flTempMedidaAnterior = flTempMedida;
    1afc:	80 91 7f 04 	lds	r24, 0x047F
    1b00:	90 91 80 04 	lds	r25, 0x0480
    1b04:	a0 91 81 04 	lds	r26, 0x0481
    1b08:	b0 91 82 04 	lds	r27, 0x0482
    1b0c:	80 93 32 04 	sts	0x0432, r24
    1b10:	90 93 33 04 	sts	0x0433, r25
    1b14:	a0 93 34 04 	sts	0x0434, r26
    1b18:	b0 93 35 04 	sts	0x0435, r27
				}

				// impresion de variables que observa el PID
				if (chPrintPID == SI){
    1b1c:	80 91 31 04 	lds	r24, 0x0431
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <Control_Temp+0xa30>
    1b24:	e8 c0       	rjmp	.+464    	; 0x1cf6 <Control_Temp+0xc00>
					int index = sprintf(chBufferTx_USART0, "\n\rCaud= ");
    1b26:	89 e0       	ldi	r24, 0x09	; 9
    1b28:	e6 e9       	ldi	r30, 0x96	; 150
    1b2a:	f1 e0       	ldi	r31, 0x01	; 1
    1b2c:	a1 e4       	ldi	r26, 0x41	; 65
    1b2e:	b3 e0       	ldi	r27, 0x03	; 3
    1b30:	01 90       	ld	r0, Z+
    1b32:	0d 92       	st	X+, r0
    1b34:	8a 95       	dec	r24
    1b36:	e1 f7       	brne	.-8      	; 0x1b30 <Control_Temp+0xa3a>
    1b38:	88 e0       	ldi	r24, 0x08	; 8
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	98 87       	std	Y+8, r25	; 0x08
    1b3e:	8f 83       	std	Y+7, r24	; 0x07
					dtostrf(flCaudalMedido, 4, 1, chBufferTx_USART0+index);
    1b40:	8f 81       	ldd	r24, Y+7	; 0x07
    1b42:	98 85       	ldd	r25, Y+8	; 0x08
    1b44:	9c 01       	movw	r18, r24
    1b46:	2f 5b       	subi	r18, 0xBF	; 191
    1b48:	3c 4f       	sbci	r19, 0xFC	; 252
    1b4a:	80 91 0d 04 	lds	r24, 0x040D
    1b4e:	90 91 0e 04 	lds	r25, 0x040E
    1b52:	a0 91 0f 04 	lds	r26, 0x040F
    1b56:	b0 91 10 04 	lds	r27, 0x0410
    1b5a:	89 01       	movw	r16, r18
    1b5c:	21 e0       	ldi	r18, 0x01	; 1
    1b5e:	44 e0       	ldi	r20, 0x04	; 4
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
					index += 4;
    1b68:	8f 81       	ldd	r24, Y+7	; 0x07
    1b6a:	98 85       	ldd	r25, Y+8	; 0x08
    1b6c:	04 96       	adiw	r24, 0x04	; 4
    1b6e:	98 87       	std	Y+8, r25	; 0x08
    1b70:	8f 83       	std	Y+7, r24	; 0x07
					index += sprintf(chBufferTx_USART0+index, " l/min; SetTemp= ");
    1b72:	8f 81       	ldd	r24, Y+7	; 0x07
    1b74:	98 85       	ldd	r25, Y+8	; 0x08
    1b76:	8f 5b       	subi	r24, 0xBF	; 191
    1b78:	9c 4f       	sbci	r25, 0xFC	; 252
    1b7a:	22 e1       	ldi	r18, 0x12	; 18
    1b7c:	e8 e4       	ldi	r30, 0x48	; 72
    1b7e:	f1 e0       	ldi	r31, 0x01	; 1
    1b80:	dc 01       	movw	r26, r24
    1b82:	01 90       	ld	r0, Z+
    1b84:	0d 92       	st	X+, r0
    1b86:	2a 95       	dec	r18
    1b88:	e1 f7       	brne	.-8      	; 0x1b82 <Control_Temp+0xa8c>
    1b8a:	81 e1       	ldi	r24, 0x11	; 17
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b90:	38 85       	ldd	r19, Y+8	; 0x08
    1b92:	82 0f       	add	r24, r18
    1b94:	93 1f       	adc	r25, r19
    1b96:	98 87       	std	Y+8, r25	; 0x08
    1b98:	8f 83       	std	Y+7, r24	; 0x07
					dtostrf(flTempSetP, 4, 1, chBufferTx_USART0+index);
    1b9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b9c:	98 85       	ldd	r25, Y+8	; 0x08
    1b9e:	9c 01       	movw	r18, r24
    1ba0:	2f 5b       	subi	r18, 0xBF	; 191
    1ba2:	3c 4f       	sbci	r19, 0xFC	; 252
    1ba4:	80 91 69 02 	lds	r24, 0x0269
    1ba8:	90 91 6a 02 	lds	r25, 0x026A
    1bac:	a0 91 6b 02 	lds	r26, 0x026B
    1bb0:	b0 91 6c 02 	lds	r27, 0x026C
    1bb4:	89 01       	movw	r16, r18
    1bb6:	21 e0       	ldi	r18, 0x01	; 1
    1bb8:	44 e0       	ldi	r20, 0x04	; 4
    1bba:	bc 01       	movw	r22, r24
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
					index += 4;
    1bc2:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc4:	98 85       	ldd	r25, Y+8	; 0x08
    1bc6:	04 96       	adiw	r24, 0x04	; 4
    1bc8:	98 87       	std	Y+8, r25	; 0x08
    1bca:	8f 83       	std	Y+7, r24	; 0x07
					index += sprintf(chBufferTx_USART0+index, " C; AcTemp= ");
    1bcc:	8f 81       	ldd	r24, Y+7	; 0x07
    1bce:	98 85       	ldd	r25, Y+8	; 0x08
    1bd0:	8f 5b       	subi	r24, 0xBF	; 191
    1bd2:	9c 4f       	sbci	r25, 0xFC	; 252
    1bd4:	2d e0       	ldi	r18, 0x0D	; 13
    1bd6:	ea e5       	ldi	r30, 0x5A	; 90
    1bd8:	f1 e0       	ldi	r31, 0x01	; 1
    1bda:	dc 01       	movw	r26, r24
    1bdc:	01 90       	ld	r0, Z+
    1bde:	0d 92       	st	X+, r0
    1be0:	2a 95       	dec	r18
    1be2:	e1 f7       	brne	.-8      	; 0x1bdc <Control_Temp+0xae6>
    1be4:	8c e0       	ldi	r24, 0x0C	; 12
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	2f 81       	ldd	r18, Y+7	; 0x07
    1bea:	38 85       	ldd	r19, Y+8	; 0x08
    1bec:	82 0f       	add	r24, r18
    1bee:	93 1f       	adc	r25, r19
    1bf0:	98 87       	std	Y+8, r25	; 0x08
    1bf2:	8f 83       	std	Y+7, r24	; 0x07
					dtostrf(flTempMedida, 4, 1, chBufferTx_USART0+index);
    1bf4:	8f 81       	ldd	r24, Y+7	; 0x07
    1bf6:	98 85       	ldd	r25, Y+8	; 0x08
    1bf8:	9c 01       	movw	r18, r24
    1bfa:	2f 5b       	subi	r18, 0xBF	; 191
    1bfc:	3c 4f       	sbci	r19, 0xFC	; 252
    1bfe:	80 91 7f 04 	lds	r24, 0x047F
    1c02:	90 91 80 04 	lds	r25, 0x0480
    1c06:	a0 91 81 04 	lds	r26, 0x0481
    1c0a:	b0 91 82 04 	lds	r27, 0x0482
    1c0e:	89 01       	movw	r16, r18
    1c10:	21 e0       	ldi	r18, 0x01	; 1
    1c12:	44 e0       	ldi	r20, 0x04	; 4
    1c14:	bc 01       	movw	r22, r24
    1c16:	cd 01       	movw	r24, r26
    1c18:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
					index += 4;
    1c1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c1e:	98 85       	ldd	r25, Y+8	; 0x08
    1c20:	04 96       	adiw	r24, 0x04	; 4
    1c22:	98 87       	std	Y+8, r25	; 0x08
    1c24:	8f 83       	std	Y+7, r24	; 0x07
					if (stepToRotate<0){
    1c26:	80 91 92 04 	lds	r24, 0x0492
    1c2a:	90 91 93 04 	lds	r25, 0x0493
    1c2e:	99 23       	and	r25, r25
    1c30:	7c f5       	brge	.+94     	; 0x1c90 <Control_Temp+0xb9a>
						index += sprintf(chBufferTx_USART0+index, " C; ValvPos= %03d%04d;", relativePositionBySteps, stepToRotate);
    1c32:	40 91 92 04 	lds	r20, 0x0492
    1c36:	50 91 93 04 	lds	r21, 0x0493
    1c3a:	20 91 8c 04 	lds	r18, 0x048C
    1c3e:	30 91 8d 04 	lds	r19, 0x048D
    1c42:	8f 81       	ldd	r24, Y+7	; 0x07
    1c44:	98 85       	ldd	r25, Y+8	; 0x08
    1c46:	8f 5b       	subi	r24, 0xBF	; 191
    1c48:	9c 4f       	sbci	r25, 0xFC	; 252
    1c4a:	65 2f       	mov	r22, r21
    1c4c:	6f 93       	push	r22
    1c4e:	4f 93       	push	r20
    1c50:	43 2f       	mov	r20, r19
    1c52:	4f 93       	push	r20
    1c54:	2f 93       	push	r18
    1c56:	27 e6       	ldi	r18, 0x67	; 103
    1c58:	31 e0       	ldi	r19, 0x01	; 1
    1c5a:	23 2f       	mov	r18, r19
    1c5c:	2f 93       	push	r18
    1c5e:	27 e6       	ldi	r18, 0x67	; 103
    1c60:	31 e0       	ldi	r19, 0x01	; 1
    1c62:	2f 93       	push	r18
    1c64:	29 2f       	mov	r18, r25
    1c66:	2f 93       	push	r18
    1c68:	8f 93       	push	r24
    1c6a:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    1c6e:	2d b7       	in	r18, 0x3d	; 61
    1c70:	3e b7       	in	r19, 0x3e	; 62
    1c72:	28 5f       	subi	r18, 0xF8	; 248
    1c74:	3f 4f       	sbci	r19, 0xFF	; 255
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	9c 01       	movw	r18, r24
    1c82:	8f 81       	ldd	r24, Y+7	; 0x07
    1c84:	98 85       	ldd	r25, Y+8	; 0x08
    1c86:	82 0f       	add	r24, r18
    1c88:	93 1f       	adc	r25, r19
    1c8a:	98 87       	std	Y+8, r25	; 0x08
    1c8c:	8f 83       	std	Y+7, r24	; 0x07
    1c8e:	2d c0       	rjmp	.+90     	; 0x1cea <Control_Temp+0xbf4>
					}
					else{
						index += sprintf(chBufferTx_USART0+index, " C; ValvPos= %03d+%03d;", relativePositionBySteps, stepToRotate);
    1c90:	40 91 92 04 	lds	r20, 0x0492
    1c94:	50 91 93 04 	lds	r21, 0x0493
    1c98:	20 91 8c 04 	lds	r18, 0x048C
    1c9c:	30 91 8d 04 	lds	r19, 0x048D
    1ca0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca2:	98 85       	ldd	r25, Y+8	; 0x08
    1ca4:	8f 5b       	subi	r24, 0xBF	; 191
    1ca6:	9c 4f       	sbci	r25, 0xFC	; 252
    1ca8:	65 2f       	mov	r22, r21
    1caa:	6f 93       	push	r22
    1cac:	4f 93       	push	r20
    1cae:	43 2f       	mov	r20, r19
    1cb0:	4f 93       	push	r20
    1cb2:	2f 93       	push	r18
    1cb4:	2e e7       	ldi	r18, 0x7E	; 126
    1cb6:	31 e0       	ldi	r19, 0x01	; 1
    1cb8:	23 2f       	mov	r18, r19
    1cba:	2f 93       	push	r18
    1cbc:	2e e7       	ldi	r18, 0x7E	; 126
    1cbe:	31 e0       	ldi	r19, 0x01	; 1
    1cc0:	2f 93       	push	r18
    1cc2:	29 2f       	mov	r18, r25
    1cc4:	2f 93       	push	r18
    1cc6:	8f 93       	push	r24
    1cc8:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    1ccc:	ed b7       	in	r30, 0x3d	; 61
    1cce:	fe b7       	in	r31, 0x3e	; 62
    1cd0:	38 96       	adiw	r30, 0x08	; 8
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	9c 01       	movw	r18, r24
    1cde:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce0:	98 85       	ldd	r25, Y+8	; 0x08
    1ce2:	82 0f       	add	r24, r18
    1ce4:	93 1f       	adc	r25, r19
    1ce6:	98 87       	std	Y+8, r25	; 0x08
    1ce8:	8f 83       	std	Y+7, r24	; 0x07
					}
					Transmitir_Buffer_USART0(chBufferTx_USART0, USART0_BUFFER_ZISE);
    1cea:	68 ec       	ldi	r22, 0xC8	; 200
    1cec:	70 e0       	ldi	r23, 0x00	; 0
    1cee:	81 e4       	ldi	r24, 0x41	; 65
    1cf0:	93 e0       	ldi	r25, 0x03	; 3
    1cf2:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>
				}

				uContPeriodoPID = uPeriodoPID;
    1cf6:	80 91 23 04 	lds	r24, 0x0423
    1cfa:	90 91 24 04 	lds	r25, 0x0424
    1cfe:	90 93 18 04 	sts	0x0418, r25
    1d02:	80 93 17 04 	sts	0x0417, r24
			}

			// impresion de variables
			if (chPrintEstado == SI){
    1d06:	80 91 16 04 	lds	r24, 0x0416
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <Control_Temp+0xc1a>
    1d0e:	e8 c0       	rjmp	.+464    	; 0x1ee0 <Control_Temp+0xdea>
				int index = sprintf(chBufferTx_USART0, "\rCaud= ");
    1d10:	88 e0       	ldi	r24, 0x08	; 8
    1d12:	e0 e4       	ldi	r30, 0x40	; 64
    1d14:	f1 e0       	ldi	r31, 0x01	; 1
    1d16:	a1 e4       	ldi	r26, 0x41	; 65
    1d18:	b3 e0       	ldi	r27, 0x03	; 3
    1d1a:	01 90       	ld	r0, Z+
    1d1c:	0d 92       	st	X+, r0
    1d1e:	8a 95       	dec	r24
    1d20:	e1 f7       	brne	.-8      	; 0x1d1a <Control_Temp+0xc24>
    1d22:	87 e0       	ldi	r24, 0x07	; 7
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9a 87       	std	Y+10, r25	; 0x0a
    1d28:	89 87       	std	Y+9, r24	; 0x09
				dtostrf(flCaudalMedido, 4, 1, chBufferTx_USART0+index);
    1d2a:	89 85       	ldd	r24, Y+9	; 0x09
    1d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2e:	9c 01       	movw	r18, r24
    1d30:	2f 5b       	subi	r18, 0xBF	; 191
    1d32:	3c 4f       	sbci	r19, 0xFC	; 252
    1d34:	80 91 0d 04 	lds	r24, 0x040D
    1d38:	90 91 0e 04 	lds	r25, 0x040E
    1d3c:	a0 91 0f 04 	lds	r26, 0x040F
    1d40:	b0 91 10 04 	lds	r27, 0x0410
    1d44:	89 01       	movw	r16, r18
    1d46:	21 e0       	ldi	r18, 0x01	; 1
    1d48:	44 e0       	ldi	r20, 0x04	; 4
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
				index += 4;
    1d52:	89 85       	ldd	r24, Y+9	; 0x09
    1d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d56:	04 96       	adiw	r24, 0x04	; 4
    1d58:	9a 87       	std	Y+10, r25	; 0x0a
    1d5a:	89 87       	std	Y+9, r24	; 0x09
				index += sprintf(chBufferTx_USART0+index, " l/min; SetTemp= ");
    1d5c:	89 85       	ldd	r24, Y+9	; 0x09
    1d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d60:	8f 5b       	subi	r24, 0xBF	; 191
    1d62:	9c 4f       	sbci	r25, 0xFC	; 252
    1d64:	22 e1       	ldi	r18, 0x12	; 18
    1d66:	e8 e4       	ldi	r30, 0x48	; 72
    1d68:	f1 e0       	ldi	r31, 0x01	; 1
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	01 90       	ld	r0, Z+
    1d6e:	0d 92       	st	X+, r0
    1d70:	2a 95       	dec	r18
    1d72:	e1 f7       	brne	.-8      	; 0x1d6c <Control_Temp+0xc76>
    1d74:	81 e1       	ldi	r24, 0x11	; 17
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	29 85       	ldd	r18, Y+9	; 0x09
    1d7a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d7c:	82 0f       	add	r24, r18
    1d7e:	93 1f       	adc	r25, r19
    1d80:	9a 87       	std	Y+10, r25	; 0x0a
    1d82:	89 87       	std	Y+9, r24	; 0x09
				dtostrf(flTempSetP, 4, 1, chBufferTx_USART0+index);
    1d84:	89 85       	ldd	r24, Y+9	; 0x09
    1d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d88:	9c 01       	movw	r18, r24
    1d8a:	2f 5b       	subi	r18, 0xBF	; 191
    1d8c:	3c 4f       	sbci	r19, 0xFC	; 252
    1d8e:	80 91 69 02 	lds	r24, 0x0269
    1d92:	90 91 6a 02 	lds	r25, 0x026A
    1d96:	a0 91 6b 02 	lds	r26, 0x026B
    1d9a:	b0 91 6c 02 	lds	r27, 0x026C
    1d9e:	89 01       	movw	r16, r18
    1da0:	21 e0       	ldi	r18, 0x01	; 1
    1da2:	44 e0       	ldi	r20, 0x04	; 4
    1da4:	bc 01       	movw	r22, r24
    1da6:	cd 01       	movw	r24, r26
    1da8:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
				index += 4;
    1dac:	89 85       	ldd	r24, Y+9	; 0x09
    1dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db0:	04 96       	adiw	r24, 0x04	; 4
    1db2:	9a 87       	std	Y+10, r25	; 0x0a
    1db4:	89 87       	std	Y+9, r24	; 0x09
				index += sprintf(chBufferTx_USART0+index, " C; AcTemp= ");
    1db6:	89 85       	ldd	r24, Y+9	; 0x09
    1db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dba:	8f 5b       	subi	r24, 0xBF	; 191
    1dbc:	9c 4f       	sbci	r25, 0xFC	; 252
    1dbe:	2d e0       	ldi	r18, 0x0D	; 13
    1dc0:	ea e5       	ldi	r30, 0x5A	; 90
    1dc2:	f1 e0       	ldi	r31, 0x01	; 1
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	01 90       	ld	r0, Z+
    1dc8:	0d 92       	st	X+, r0
    1dca:	2a 95       	dec	r18
    1dcc:	e1 f7       	brne	.-8      	; 0x1dc6 <Control_Temp+0xcd0>
    1dce:	8c e0       	ldi	r24, 0x0C	; 12
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	29 85       	ldd	r18, Y+9	; 0x09
    1dd4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1dd6:	82 0f       	add	r24, r18
    1dd8:	93 1f       	adc	r25, r19
    1dda:	9a 87       	std	Y+10, r25	; 0x0a
    1ddc:	89 87       	std	Y+9, r24	; 0x09
				dtostrf(flTempMedida, 4, 1, chBufferTx_USART0+index);
    1dde:	89 85       	ldd	r24, Y+9	; 0x09
    1de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de2:	9c 01       	movw	r18, r24
    1de4:	2f 5b       	subi	r18, 0xBF	; 191
    1de6:	3c 4f       	sbci	r19, 0xFC	; 252
    1de8:	80 91 7f 04 	lds	r24, 0x047F
    1dec:	90 91 80 04 	lds	r25, 0x0480
    1df0:	a0 91 81 04 	lds	r26, 0x0481
    1df4:	b0 91 82 04 	lds	r27, 0x0482
    1df8:	89 01       	movw	r16, r18
    1dfa:	21 e0       	ldi	r18, 0x01	; 1
    1dfc:	44 e0       	ldi	r20, 0x04	; 4
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
				index += 4;
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	04 96       	adiw	r24, 0x04	; 4
    1e0c:	9a 87       	std	Y+10, r25	; 0x0a
    1e0e:	89 87       	std	Y+9, r24	; 0x09
				if (stepToRotate<0){
    1e10:	80 91 92 04 	lds	r24, 0x0492
    1e14:	90 91 93 04 	lds	r25, 0x0493
    1e18:	99 23       	and	r25, r25
    1e1a:	7c f5       	brge	.+94     	; 0x1e7a <Control_Temp+0xd84>
					index += sprintf(chBufferTx_USART0+index, " C; ValvPos= %03d%04d;", relativePositionBySteps, stepToRotate);
    1e1c:	40 91 92 04 	lds	r20, 0x0492
    1e20:	50 91 93 04 	lds	r21, 0x0493
    1e24:	20 91 8c 04 	lds	r18, 0x048C
    1e28:	30 91 8d 04 	lds	r19, 0x048D
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e30:	8f 5b       	subi	r24, 0xBF	; 191
    1e32:	9c 4f       	sbci	r25, 0xFC	; 252
    1e34:	65 2f       	mov	r22, r21
    1e36:	6f 93       	push	r22
    1e38:	4f 93       	push	r20
    1e3a:	43 2f       	mov	r20, r19
    1e3c:	4f 93       	push	r20
    1e3e:	2f 93       	push	r18
    1e40:	27 e6       	ldi	r18, 0x67	; 103
    1e42:	31 e0       	ldi	r19, 0x01	; 1
    1e44:	23 2f       	mov	r18, r19
    1e46:	2f 93       	push	r18
    1e48:	27 e6       	ldi	r18, 0x67	; 103
    1e4a:	31 e0       	ldi	r19, 0x01	; 1
    1e4c:	2f 93       	push	r18
    1e4e:	29 2f       	mov	r18, r25
    1e50:	2f 93       	push	r18
    1e52:	8f 93       	push	r24
    1e54:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    1e58:	2d b7       	in	r18, 0x3d	; 61
    1e5a:	3e b7       	in	r19, 0x3e	; 62
    1e5c:	28 5f       	subi	r18, 0xF8	; 248
    1e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
    1e6a:	9c 01       	movw	r18, r24
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	82 0f       	add	r24, r18
    1e72:	93 1f       	adc	r25, r19
    1e74:	9a 87       	std	Y+10, r25	; 0x0a
    1e76:	89 87       	std	Y+9, r24	; 0x09
    1e78:	2d c0       	rjmp	.+90     	; 0x1ed4 <Control_Temp+0xdde>
				}
				else{
					index += sprintf(chBufferTx_USART0+index, " C; ValvPos= %03d+%03d;", relativePositionBySteps, stepToRotate);
    1e7a:	40 91 92 04 	lds	r20, 0x0492
    1e7e:	50 91 93 04 	lds	r21, 0x0493
    1e82:	20 91 8c 04 	lds	r18, 0x048C
    1e86:	30 91 8d 04 	lds	r19, 0x048D
    1e8a:	89 85       	ldd	r24, Y+9	; 0x09
    1e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8e:	8f 5b       	subi	r24, 0xBF	; 191
    1e90:	9c 4f       	sbci	r25, 0xFC	; 252
    1e92:	65 2f       	mov	r22, r21
    1e94:	6f 93       	push	r22
    1e96:	4f 93       	push	r20
    1e98:	43 2f       	mov	r20, r19
    1e9a:	4f 93       	push	r20
    1e9c:	2f 93       	push	r18
    1e9e:	2e e7       	ldi	r18, 0x7E	; 126
    1ea0:	31 e0       	ldi	r19, 0x01	; 1
    1ea2:	23 2f       	mov	r18, r19
    1ea4:	2f 93       	push	r18
    1ea6:	2e e7       	ldi	r18, 0x7E	; 126
    1ea8:	31 e0       	ldi	r19, 0x01	; 1
    1eaa:	2f 93       	push	r18
    1eac:	29 2f       	mov	r18, r25
    1eae:	2f 93       	push	r18
    1eb0:	8f 93       	push	r24
    1eb2:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    1eb6:	ed b7       	in	r30, 0x3d	; 61
    1eb8:	fe b7       	in	r31, 0x3e	; 62
    1eba:	38 96       	adiw	r30, 0x08	; 8
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	9c 01       	movw	r18, r24
    1ec8:	89 85       	ldd	r24, Y+9	; 0x09
    1eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ecc:	82 0f       	add	r24, r18
    1ece:	93 1f       	adc	r25, r19
    1ed0:	9a 87       	std	Y+10, r25	; 0x0a
    1ed2:	89 87       	std	Y+9, r24	; 0x09
				}
				Transmitir_Buffer_USART0(chBufferTx_USART0, USART0_BUFFER_ZISE);
    1ed4:	68 ec       	ldi	r22, 0xC8	; 200
    1ed6:	70 e0       	ldi	r23, 0x00	; 0
    1ed8:	81 e4       	ldi	r24, 0x41	; 65
    1eda:	93 e0       	ldi	r25, 0x03	; 3
    1edc:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>
			}

			// detecto caudal parada
			if (flCaudalMedido < CAUDAL_PARADA){
    1ee0:	80 91 0d 04 	lds	r24, 0x040D
    1ee4:	90 91 0e 04 	lds	r25, 0x040E
    1ee8:	a0 91 0f 04 	lds	r26, 0x040F
    1eec:	b0 91 10 04 	lds	r27, 0x0410
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e2       	ldi	r20, 0x20	; 32
    1ef6:	50 e4       	ldi	r21, 0x40	; 64
    1ef8:	bc 01       	movw	r22, r24
    1efa:	cd 01       	movw	r24, r26
    1efc:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    1f00:	88 23       	and	r24, r24
    1f02:	0c f0       	brlt	.+2      	; 0x1f06 <Control_Temp+0xe10>
				// cierro el gas
				CLEAR_BIT(RELAY_GAS_PORT, RELAY_GAS_PIN);
				uchEstadoControl = CONTROL_STANDBY;
			}
			break;
    1f04:	0f c0       	rjmp	.+30     	; 0x1f24 <Control_Temp+0xe2e>
			}

			// detecto caudal parada
			if (flCaudalMedido < CAUDAL_PARADA){
				// cierro el gas
				CLEAR_BIT(RELAY_GAS_PORT, RELAY_GAS_PIN);
    1f06:	88 e2       	ldi	r24, 0x28	; 40
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	28 e2       	ldi	r18, 0x28	; 40
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	f9 01       	movw	r30, r18
    1f10:	20 81       	ld	r18, Z
    1f12:	2f 7e       	andi	r18, 0xEF	; 239
    1f14:	fc 01       	movw	r30, r24
    1f16:	20 83       	st	Z, r18
				uchEstadoControl = CONTROL_STANDBY;
    1f18:	10 92 15 04 	sts	0x0415, r1
			}
			break;
    1f1c:	03 c0       	rjmp	.+6      	; 0x1f24 <Control_Temp+0xe2e>

		default:
			Inicio_Control_Temp();
    1f1e:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Inicio_Control_Temp>
			break;
    1f22:	00 00       	nop
	}
}
    1f24:	2a 96       	adiw	r28, 0x0a	; 10
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	1f 91       	pop	r17
    1f36:	0f 91       	pop	r16
    1f38:	ff 90       	pop	r15
    1f3a:	ef 90       	pop	r14
    1f3c:	df 90       	pop	r13
    1f3e:	cf 90       	pop	r12
    1f40:	08 95       	ret

00001f42 <Inicio_Control_Temp>:

/*****************************************************************************
* Inicio de Maquina de estados
*****************************************************************************/

void Inicio_Control_Temp(void){
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
	chPrintEstado=NO;
    1f4a:	10 92 16 04 	sts	0x0416, r1
	chPrintPID=NO;
    1f4e:	10 92 31 04 	sts	0x0431, r1
	uchEstadoControl = CONTROL_STANDBY;
    1f52:	10 92 15 04 	sts	0x0415, r1
}
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	08 95       	ret

00001f5c <Carga_Configuracion_Desde_Eeprom>:

/*****************************************************************************
* Funcion de carga de variables desde eeprom al inicio
*****************************************************************************/

void Carga_Configuracion_Desde_Eeprom (void) {
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	2a 97       	sbiw	r28, 0x0a	; 10
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
	unsigned int	uCRC_Eeprom;						/* Checksum eeprom */
	unsigned int	uCRC_BK;							/* Checksum backup */
	unsigned int	uCRC_Eeprom_BK;						/* Checksum eeprom backup */

	/* GRUPO_ALARMAS -0- */
	unsigned int uContIntentosValidacionChecksum = 0;
    1f70:	1a 82       	std	Y+2, r1	; 0x02
    1f72:	19 82       	std	Y+1, r1	; 0x01
	while (uContIntentosValidacionChecksum < CANT_INTENTOS_VALIDACION_CHECKSUM) {
    1f74:	15 c4       	rjmp	.+2090   	; 0x27a0 <Carga_Configuracion_Desde_Eeprom+0x844>
		sprintf (chBufferTx_USART0, "\n\r%S %d", (wchar_t*)validacion_PID_MSG, uContIntentosValidacionChecksum);
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	8f 93       	push	r24
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	8f 93       	push	r24
    1f7e:	88 e7       	ldi	r24, 0x78	; 120
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	89 2f       	mov	r24, r25
    1f84:	8f 93       	push	r24
    1f86:	88 e7       	ldi	r24, 0x78	; 120
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	8f 93       	push	r24
    1f8c:	8f e9       	ldi	r24, 0x9F	; 159
    1f8e:	91 e0       	ldi	r25, 0x01	; 1
    1f90:	89 2f       	mov	r24, r25
    1f92:	8f 93       	push	r24
    1f94:	8f e9       	ldi	r24, 0x9F	; 159
    1f96:	91 e0       	ldi	r25, 0x01	; 1
    1f98:	8f 93       	push	r24
    1f9a:	81 e4       	ldi	r24, 0x41	; 65
    1f9c:	93 e0       	ldi	r25, 0x03	; 3
    1f9e:	89 2f       	mov	r24, r25
    1fa0:	8f 93       	push	r24
    1fa2:	81 e4       	ldi	r24, 0x41	; 65
    1fa4:	93 e0       	ldi	r25, 0x03	; 3
    1fa6:	8f 93       	push	r24
    1fa8:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    1fac:	8d b7       	in	r24, 0x3d	; 61
    1fae:	9e b7       	in	r25, 0x3e	; 62
    1fb0:	08 96       	adiw	r24, 0x08	; 8
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
		Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    1fbc:	68 ec       	ldi	r22, 0xC8	; 200
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	81 e4       	ldi	r24, 0x41	; 65
    1fc2:	93 e0       	ldi	r25, 0x03	; 3
    1fc4:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>

		uContIntentosValidacionChecksum++;
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	01 96       	adiw	r24, 0x01	; 1
    1fce:	9a 83       	std	Y+2, r25	; 0x02
    1fd0:	89 83       	std	Y+1, r24	; 0x01

		// leo los valores originales
		Eeprom_a_Float(&flPIDkP_Eeprom, &flPIDkP);						/* leo los valores originales de la eeprom */
    1fd2:	60 e5       	ldi	r22, 0x50	; 80
    1fd4:	74 e0       	ldi	r23, 0x04	; 4
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
		uCRC = Float_a_Checksum(&flPIDkP);								/* calculo el checksum de los valores levantados a la ram */
    1fde:	80 e5       	ldi	r24, 0x50	; 80
    1fe0:	94 e0       	ldi	r25, 0x04	; 4
    1fe2:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    1fe6:	9c 83       	std	Y+4, r25	; 0x04
    1fe8:	8b 83       	std	Y+3, r24	; 0x03
		Eeprom_a_Float(&flPIDkI_Eeprom, &flPIDkI);						/* leo los valores originales de la eeprom */
    1fea:	6c e4       	ldi	r22, 0x4C	; 76
    1fec:	74 e0       	ldi	r23, 0x04	; 4
    1fee:	84 e0       	ldi	r24, 0x04	; 4
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
		uCRC += Float_a_Checksum(&flPIDkI);								/* calculo el checksum de los valores levantados a la ram */
    1ff6:	8c e4       	ldi	r24, 0x4C	; 76
    1ff8:	94 e0       	ldi	r25, 0x04	; 4
    1ffa:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    1ffe:	9c 01       	movw	r18, r24
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	9c 81       	ldd	r25, Y+4	; 0x04
    2004:	82 0f       	add	r24, r18
    2006:	93 1f       	adc	r25, r19
    2008:	9c 83       	std	Y+4, r25	; 0x04
    200a:	8b 83       	std	Y+3, r24	; 0x03
		Eeprom_a_Float(&flPIDkD_Eeprom, &flPIDkD);						/* leo los valores originales de la eeprom */
    200c:	64 e4       	ldi	r22, 0x44	; 68
    200e:	74 e0       	ldi	r23, 0x04	; 4
    2010:	88 e0       	ldi	r24, 0x08	; 8
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
		uCRC += Float_a_Checksum(&flPIDkD);								/* calculo el checksum de los valores levantados a la ram */
    2018:	84 e4       	ldi	r24, 0x44	; 68
    201a:	94 e0       	ldi	r25, 0x04	; 4
    201c:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    2020:	9c 01       	movw	r18, r24
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	9c 81       	ldd	r25, Y+4	; 0x04
    2026:	82 0f       	add	r24, r18
    2028:	93 1f       	adc	r25, r19
    202a:	9c 83       	std	Y+4, r25	; 0x04
    202c:	8b 83       	std	Y+3, r24	; 0x03
		Eeprom_a_Float(&flPIDintMax_Eeprom, &flPIDintMax);				/* leo los valores originales de la eeprom */
    202e:	69 e1       	ldi	r22, 0x19	; 25
    2030:	74 e0       	ldi	r23, 0x04	; 4
    2032:	8c e0       	ldi	r24, 0x0C	; 12
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
		uCRC += Float_a_Checksum(&flPIDintMax);							/* calculo el checksum de los valores levantados a la ram */
    203a:	89 e1       	ldi	r24, 0x19	; 25
    203c:	94 e0       	ldi	r25, 0x04	; 4
    203e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    2042:	9c 01       	movw	r18, r24
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	82 0f       	add	r24, r18
    204a:	93 1f       	adc	r25, r19
    204c:	9c 83       	std	Y+4, r25	; 0x04
    204e:	8b 83       	std	Y+3, r24	; 0x03
		Eeprom_a_Float(&flVariacionCaudalSetP_Eeprom, &flVariacionCaudalSetP);
    2050:	68 e5       	ldi	r22, 0x58	; 88
    2052:	74 e0       	ldi	r23, 0x04	; 4
    2054:	80 e1       	ldi	r24, 0x10	; 16
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
		uCRC += Float_a_Checksum(&flVariacionCaudalSetP);
    205c:	88 e5       	ldi	r24, 0x58	; 88
    205e:	94 e0       	ldi	r25, 0x04	; 4
    2060:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    2064:	9c 01       	movw	r18, r24
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	82 0f       	add	r24, r18
    206c:	93 1f       	adc	r25, r19
    206e:	9c 83       	std	Y+4, r25	; 0x04
    2070:	8b 83       	std	Y+3, r24	; 0x03
		Eeprom_a_Float(&flCaudalEscalaKsPID_Eeprom, &flCaudalEscalaKsPID);
    2072:	6c e3       	ldi	r22, 0x3C	; 60
    2074:	74 e0       	ldi	r23, 0x04	; 4
    2076:	84 e1       	ldi	r24, 0x14	; 20
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
		uCRC += Float_a_Checksum(&flCaudalEscalaKsPID);
    207e:	8c e3       	ldi	r24, 0x3C	; 60
    2080:	94 e0       	ldi	r25, 0x04	; 4
    2082:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    2086:	9c 01       	movw	r18, r24
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	9c 81       	ldd	r25, Y+4	; 0x04
    208c:	82 0f       	add	r24, r18
    208e:	93 1f       	adc	r25, r19
    2090:	9c 83       	std	Y+4, r25	; 0x04
    2092:	8b 83       	std	Y+3, r24	; 0x03
		Eeprom_a_Float(&flEscalaVariacionCaudal_Eeprom, &flEscalaVariacionCaudal);
    2094:	68 e4       	ldi	r22, 0x48	; 72
    2096:	74 e0       	ldi	r23, 0x04	; 4
    2098:	88 e1       	ldi	r24, 0x18	; 24
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
		uCRC += Float_a_Checksum(&flEscalaVariacionCaudal);
    20a0:	88 e4       	ldi	r24, 0x48	; 72
    20a2:	94 e0       	ldi	r25, 0x04	; 4
    20a4:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    20a8:	9c 01       	movw	r18, r24
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	82 0f       	add	r24, r18
    20b0:	93 1f       	adc	r25, r19
    20b2:	9c 83       	std	Y+4, r25	; 0x04
    20b4:	8b 83       	std	Y+3, r24	; 0x03
		Eeprom_a_UnsignedInt(&uPeriodoPID_Eeprom, &uPeriodoPID);
    20b6:	63 e2       	ldi	r22, 0x23	; 35
    20b8:	74 e0       	ldi	r23, 0x04	; 4
    20ba:	8c e1       	ldi	r24, 0x1C	; 28
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <Eeprom_a_UnsignedInt>
		uCRC += UnsignedInt_a_Checksum(&uPeriodoPID);
    20c2:	83 e2       	ldi	r24, 0x23	; 35
    20c4:	94 e0       	ldi	r25, 0x04	; 4
    20c6:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UnsignedInt_a_Checksum>
    20ca:	9c 01       	movw	r18, r24
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	9c 81       	ldd	r25, Y+4	; 0x04
    20d0:	82 0f       	add	r24, r18
    20d2:	93 1f       	adc	r25, r19
    20d4:	9c 83       	std	Y+4, r25	; 0x04
    20d6:	8b 83       	std	Y+3, r24	; 0x03
		Eeprom_a_UnsignedInt(&uPeriodoVedaPID_Eeprom, &uPeriodoVedaPID);
    20d8:	66 e5       	ldi	r22, 0x56	; 86
    20da:	74 e0       	ldi	r23, 0x04	; 4
    20dc:	8e e1       	ldi	r24, 0x1E	; 30
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <Eeprom_a_UnsignedInt>
		uCRC += UnsignedInt_a_Checksum(&uPeriodoVedaPID);
    20e4:	86 e5       	ldi	r24, 0x56	; 86
    20e6:	94 e0       	ldi	r25, 0x04	; 4
    20e8:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UnsignedInt_a_Checksum>
    20ec:	9c 01       	movw	r18, r24
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	82 0f       	add	r24, r18
    20f4:	93 1f       	adc	r25, r19
    20f6:	9c 83       	std	Y+4, r25	; 0x04
    20f8:	8b 83       	std	Y+3, r24	; 0x03
		Eeprom_a_UnsignedInt(&uPeriodoVedaCaudal_Eeprom, &uPeriodoVedaCaudal);
    20fa:	6d e1       	ldi	r22, 0x1D	; 29
    20fc:	74 e0       	ldi	r23, 0x04	; 4
    20fe:	80 e2       	ldi	r24, 0x20	; 32
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <Eeprom_a_UnsignedInt>
		uCRC += UnsignedInt_a_Checksum(&uPeriodoVedaCaudal);
    2106:	8d e1       	ldi	r24, 0x1D	; 29
    2108:	94 e0       	ldi	r25, 0x04	; 4
    210a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UnsignedInt_a_Checksum>
    210e:	9c 01       	movw	r18, r24
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	82 0f       	add	r24, r18
    2116:	93 1f       	adc	r25, r19
    2118:	9c 83       	std	Y+4, r25	; 0x04
    211a:	8b 83       	std	Y+3, r24	; 0x03
		Eeprom_a_UnsignedInt (&uChecksumPID_Eeprom, &uCRC_Eeprom);		/* levanto el checksum de la eeprom */
    211c:	ce 01       	movw	r24, r28
    211e:	05 96       	adiw	r24, 0x05	; 5
    2120:	bc 01       	movw	r22, r24
    2122:	82 e2       	ldi	r24, 0x22	; 34
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <Eeprom_a_UnsignedInt>

		// leo los valores de la copia
		Eeprom_a_Float(&flPIDkP_Eeprom_BK, &flPIDkP);
    212a:	60 e5       	ldi	r22, 0x50	; 80
    212c:	74 e0       	ldi	r23, 0x04	; 4
    212e:	84 e2       	ldi	r24, 0x24	; 36
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
		uCRC_BK = Float_a_Checksum(&flPIDkP);
    2136:	80 e5       	ldi	r24, 0x50	; 80
    2138:	94 e0       	ldi	r25, 0x04	; 4
    213a:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    213e:	98 87       	std	Y+8, r25	; 0x08
    2140:	8f 83       	std	Y+7, r24	; 0x07
		Eeprom_a_Float(&flPIDkI_Eeprom_BK, &flPIDkI);
    2142:	6c e4       	ldi	r22, 0x4C	; 76
    2144:	74 e0       	ldi	r23, 0x04	; 4
    2146:	88 e2       	ldi	r24, 0x28	; 40
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
		uCRC_BK += Float_a_Checksum(&flPIDkI);
    214e:	8c e4       	ldi	r24, 0x4C	; 76
    2150:	94 e0       	ldi	r25, 0x04	; 4
    2152:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    2156:	9c 01       	movw	r18, r24
    2158:	8f 81       	ldd	r24, Y+7	; 0x07
    215a:	98 85       	ldd	r25, Y+8	; 0x08
    215c:	82 0f       	add	r24, r18
    215e:	93 1f       	adc	r25, r19
    2160:	98 87       	std	Y+8, r25	; 0x08
    2162:	8f 83       	std	Y+7, r24	; 0x07
		Eeprom_a_Float(&flPIDkD_Eeprom_BK, &flPIDkD);
    2164:	64 e4       	ldi	r22, 0x44	; 68
    2166:	74 e0       	ldi	r23, 0x04	; 4
    2168:	8c e2       	ldi	r24, 0x2C	; 44
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
		uCRC_BK += Float_a_Checksum(&flPIDkD);
    2170:	84 e4       	ldi	r24, 0x44	; 68
    2172:	94 e0       	ldi	r25, 0x04	; 4
    2174:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    2178:	9c 01       	movw	r18, r24
    217a:	8f 81       	ldd	r24, Y+7	; 0x07
    217c:	98 85       	ldd	r25, Y+8	; 0x08
    217e:	82 0f       	add	r24, r18
    2180:	93 1f       	adc	r25, r19
    2182:	98 87       	std	Y+8, r25	; 0x08
    2184:	8f 83       	std	Y+7, r24	; 0x07
		Eeprom_a_Float(&flPIDintMax_Eeprom_BK, &flPIDintMax);
    2186:	69 e1       	ldi	r22, 0x19	; 25
    2188:	74 e0       	ldi	r23, 0x04	; 4
    218a:	80 e3       	ldi	r24, 0x30	; 48
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
		uCRC_BK += Float_a_Checksum(&flPIDintMax);
    2192:	89 e1       	ldi	r24, 0x19	; 25
    2194:	94 e0       	ldi	r25, 0x04	; 4
    2196:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    219a:	9c 01       	movw	r18, r24
    219c:	8f 81       	ldd	r24, Y+7	; 0x07
    219e:	98 85       	ldd	r25, Y+8	; 0x08
    21a0:	82 0f       	add	r24, r18
    21a2:	93 1f       	adc	r25, r19
    21a4:	98 87       	std	Y+8, r25	; 0x08
    21a6:	8f 83       	std	Y+7, r24	; 0x07
		Eeprom_a_Float(&flVariacionCaudalSetP_Eeprom_BK, &flVariacionCaudalSetP);
    21a8:	68 e5       	ldi	r22, 0x58	; 88
    21aa:	74 e0       	ldi	r23, 0x04	; 4
    21ac:	84 e3       	ldi	r24, 0x34	; 52
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
		uCRC_BK += Float_a_Checksum(&flVariacionCaudalSetP);
    21b4:	88 e5       	ldi	r24, 0x58	; 88
    21b6:	94 e0       	ldi	r25, 0x04	; 4
    21b8:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    21bc:	9c 01       	movw	r18, r24
    21be:	8f 81       	ldd	r24, Y+7	; 0x07
    21c0:	98 85       	ldd	r25, Y+8	; 0x08
    21c2:	82 0f       	add	r24, r18
    21c4:	93 1f       	adc	r25, r19
    21c6:	98 87       	std	Y+8, r25	; 0x08
    21c8:	8f 83       	std	Y+7, r24	; 0x07
		Eeprom_a_Float(&flCaudalEscalaKsPID_Eeprom_BK, &flCaudalEscalaKsPID);
    21ca:	6c e3       	ldi	r22, 0x3C	; 60
    21cc:	74 e0       	ldi	r23, 0x04	; 4
    21ce:	88 e3       	ldi	r24, 0x38	; 56
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
		uCRC_BK += Float_a_Checksum(&flCaudalEscalaKsPID);
    21d6:	8c e3       	ldi	r24, 0x3C	; 60
    21d8:	94 e0       	ldi	r25, 0x04	; 4
    21da:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    21de:	9c 01       	movw	r18, r24
    21e0:	8f 81       	ldd	r24, Y+7	; 0x07
    21e2:	98 85       	ldd	r25, Y+8	; 0x08
    21e4:	82 0f       	add	r24, r18
    21e6:	93 1f       	adc	r25, r19
    21e8:	98 87       	std	Y+8, r25	; 0x08
    21ea:	8f 83       	std	Y+7, r24	; 0x07
		Eeprom_a_Float(&flEscalaVariacionCaudal_Eeprom_BK, &flEscalaVariacionCaudal);
    21ec:	68 e4       	ldi	r22, 0x48	; 72
    21ee:	74 e0       	ldi	r23, 0x04	; 4
    21f0:	8c e3       	ldi	r24, 0x3C	; 60
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
		uCRC_BK += Float_a_Checksum(&flEscalaVariacionCaudal);
    21f8:	88 e4       	ldi	r24, 0x48	; 72
    21fa:	94 e0       	ldi	r25, 0x04	; 4
    21fc:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    2200:	9c 01       	movw	r18, r24
    2202:	8f 81       	ldd	r24, Y+7	; 0x07
    2204:	98 85       	ldd	r25, Y+8	; 0x08
    2206:	82 0f       	add	r24, r18
    2208:	93 1f       	adc	r25, r19
    220a:	98 87       	std	Y+8, r25	; 0x08
    220c:	8f 83       	std	Y+7, r24	; 0x07
		Eeprom_a_UnsignedInt(&uPeriodoPID_Eeprom_BK, &uPeriodoPID);
    220e:	63 e2       	ldi	r22, 0x23	; 35
    2210:	74 e0       	ldi	r23, 0x04	; 4
    2212:	80 e4       	ldi	r24, 0x40	; 64
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <Eeprom_a_UnsignedInt>
		uCRC_BK += UnsignedInt_a_Checksum(&uPeriodoPID);
    221a:	83 e2       	ldi	r24, 0x23	; 35
    221c:	94 e0       	ldi	r25, 0x04	; 4
    221e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UnsignedInt_a_Checksum>
    2222:	9c 01       	movw	r18, r24
    2224:	8f 81       	ldd	r24, Y+7	; 0x07
    2226:	98 85       	ldd	r25, Y+8	; 0x08
    2228:	82 0f       	add	r24, r18
    222a:	93 1f       	adc	r25, r19
    222c:	98 87       	std	Y+8, r25	; 0x08
    222e:	8f 83       	std	Y+7, r24	; 0x07
		Eeprom_a_UnsignedInt(&uPeriodoVedaPID_Eeprom_BK, &uPeriodoVedaPID);
    2230:	66 e5       	ldi	r22, 0x56	; 86
    2232:	74 e0       	ldi	r23, 0x04	; 4
    2234:	82 e4       	ldi	r24, 0x42	; 66
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <Eeprom_a_UnsignedInt>
		uCRC_BK += UnsignedInt_a_Checksum(&uPeriodoVedaPID);
    223c:	86 e5       	ldi	r24, 0x56	; 86
    223e:	94 e0       	ldi	r25, 0x04	; 4
    2240:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UnsignedInt_a_Checksum>
    2244:	9c 01       	movw	r18, r24
    2246:	8f 81       	ldd	r24, Y+7	; 0x07
    2248:	98 85       	ldd	r25, Y+8	; 0x08
    224a:	82 0f       	add	r24, r18
    224c:	93 1f       	adc	r25, r19
    224e:	98 87       	std	Y+8, r25	; 0x08
    2250:	8f 83       	std	Y+7, r24	; 0x07
		Eeprom_a_UnsignedInt(&uPeriodoVedaCaudal_Eeprom_BK, &uPeriodoVedaCaudal);
    2252:	6d e1       	ldi	r22, 0x1D	; 29
    2254:	74 e0       	ldi	r23, 0x04	; 4
    2256:	84 e4       	ldi	r24, 0x44	; 68
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <Eeprom_a_UnsignedInt>
		uCRC_BK += UnsignedInt_a_Checksum(&uPeriodoVedaCaudal);
    225e:	8d e1       	ldi	r24, 0x1D	; 29
    2260:	94 e0       	ldi	r25, 0x04	; 4
    2262:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UnsignedInt_a_Checksum>
    2266:	9c 01       	movw	r18, r24
    2268:	8f 81       	ldd	r24, Y+7	; 0x07
    226a:	98 85       	ldd	r25, Y+8	; 0x08
    226c:	82 0f       	add	r24, r18
    226e:	93 1f       	adc	r25, r19
    2270:	98 87       	std	Y+8, r25	; 0x08
    2272:	8f 83       	std	Y+7, r24	; 0x07
		Eeprom_a_UnsignedInt (&uChecksumPID_Eeprom_BK, &uCRC_Eeprom_BK);
    2274:	ce 01       	movw	r24, r28
    2276:	09 96       	adiw	r24, 0x09	; 9
    2278:	bc 01       	movw	r22, r24
    227a:	86 e4       	ldi	r24, 0x46	; 70
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <Eeprom_a_UnsignedInt>

		// si ambas dan bien
		if ((uCRC == uCRC_Eeprom) && (uCRC_BK == uCRC_Eeprom_BK)) {
    2282:	2b 81       	ldd	r18, Y+3	; 0x03
    2284:	3c 81       	ldd	r19, Y+4	; 0x04
    2286:	8d 81       	ldd	r24, Y+5	; 0x05
    2288:	9e 81       	ldd	r25, Y+6	; 0x06
    228a:	28 17       	cp	r18, r24
    228c:	39 07       	cpc	r19, r25
    228e:	09 f0       	breq	.+2      	; 0x2292 <Carga_Configuracion_Desde_Eeprom+0x336>
    2290:	4f c0       	rjmp	.+158    	; 0x2330 <Carga_Configuracion_Desde_Eeprom+0x3d4>
    2292:	2f 81       	ldd	r18, Y+7	; 0x07
    2294:	38 85       	ldd	r19, Y+8	; 0x08
    2296:	89 85       	ldd	r24, Y+9	; 0x09
    2298:	9a 85       	ldd	r25, Y+10	; 0x0a
    229a:	28 17       	cp	r18, r24
    229c:	39 07       	cpc	r19, r25
    229e:	09 f0       	breq	.+2      	; 0x22a2 <Carga_Configuracion_Desde_Eeprom+0x346>
    22a0:	47 c0       	rjmp	.+142    	; 0x2330 <Carga_Configuracion_Desde_Eeprom+0x3d4>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesOk_MSG);
    22a2:	84 e9       	ldi	r24, 0x94	; 148
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	89 2f       	mov	r24, r25
    22a8:	8f 93       	push	r24
    22aa:	84 e9       	ldi	r24, 0x94	; 148
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	8f 93       	push	r24
    22b0:	87 ea       	ldi	r24, 0xA7	; 167
    22b2:	91 e0       	ldi	r25, 0x01	; 1
    22b4:	89 2f       	mov	r24, r25
    22b6:	8f 93       	push	r24
    22b8:	87 ea       	ldi	r24, 0xA7	; 167
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	8f 93       	push	r24
    22be:	81 e4       	ldi	r24, 0x41	; 65
    22c0:	93 e0       	ldi	r25, 0x03	; 3
    22c2:	89 2f       	mov	r24, r25
    22c4:	8f 93       	push	r24
    22c6:	81 e4       	ldi	r24, 0x41	; 65
    22c8:	93 e0       	ldi	r25, 0x03	; 3
    22ca:	8f 93       	push	r24
    22cc:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    22dc:	68 ec       	ldi	r22, 0xC8	; 200
    22de:	70 e0       	ldi	r23, 0x00	; 0
    22e0:	81 e4       	ldi	r24, 0x41	; 65
    22e2:	93 e0       	ldi	r25, 0x03	; 3
    22e4:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpOK_MSG);
    22e8:	8e ed       	ldi	r24, 0xDE	; 222
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	89 2f       	mov	r24, r25
    22ee:	8f 93       	push	r24
    22f0:	8e ed       	ldi	r24, 0xDE	; 222
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	8f 93       	push	r24
    22f6:	87 ea       	ldi	r24, 0xA7	; 167
    22f8:	91 e0       	ldi	r25, 0x01	; 1
    22fa:	89 2f       	mov	r24, r25
    22fc:	8f 93       	push	r24
    22fe:	87 ea       	ldi	r24, 0xA7	; 167
    2300:	91 e0       	ldi	r25, 0x01	; 1
    2302:	8f 93       	push	r24
    2304:	81 e4       	ldi	r24, 0x41	; 65
    2306:	93 e0       	ldi	r25, 0x03	; 3
    2308:	89 2f       	mov	r24, r25
    230a:	8f 93       	push	r24
    230c:	81 e4       	ldi	r24, 0x41	; 65
    230e:	93 e0       	ldi	r25, 0x03	; 3
    2310:	8f 93       	push	r24
    2312:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    2322:	68 ec       	ldi	r22, 0xC8	; 200
    2324:	70 e0       	ldi	r23, 0x00	; 0
    2326:	81 e4       	ldi	r24, 0x41	; 65
    2328:	93 e0       	ldi	r25, 0x03	; 3
    232a:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>

			break;
    232e:	3d c2       	rjmp	.+1146   	; 0x27aa <Carga_Configuracion_Desde_Eeprom+0x84e>
		}
		// si la copia da mal vuelvo a leer el original porque habia dado bien
		else if ((uCRC == uCRC_Eeprom) && (uCRC_BK != uCRC_Eeprom_BK)) {
    2330:	2b 81       	ldd	r18, Y+3	; 0x03
    2332:	3c 81       	ldd	r19, Y+4	; 0x04
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	28 17       	cp	r18, r24
    233a:	39 07       	cpc	r19, r25
    233c:	09 f0       	breq	.+2      	; 0x2340 <Carga_Configuracion_Desde_Eeprom+0x3e4>
    233e:	47 c1       	rjmp	.+654    	; 0x25ce <Carga_Configuracion_Desde_Eeprom+0x672>
    2340:	2f 81       	ldd	r18, Y+7	; 0x07
    2342:	38 85       	ldd	r19, Y+8	; 0x08
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	9a 85       	ldd	r25, Y+10	; 0x0a
    2348:	28 17       	cp	r18, r24
    234a:	39 07       	cpc	r19, r25
    234c:	09 f4       	brne	.+2      	; 0x2350 <Carga_Configuracion_Desde_Eeprom+0x3f4>
    234e:	3f c1       	rjmp	.+638    	; 0x25ce <Carga_Configuracion_Desde_Eeprom+0x672>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesOk_MSG);
    2350:	84 e9       	ldi	r24, 0x94	; 148
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	89 2f       	mov	r24, r25
    2356:	8f 93       	push	r24
    2358:	84 e9       	ldi	r24, 0x94	; 148
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	8f 93       	push	r24
    235e:	87 ea       	ldi	r24, 0xA7	; 167
    2360:	91 e0       	ldi	r25, 0x01	; 1
    2362:	89 2f       	mov	r24, r25
    2364:	8f 93       	push	r24
    2366:	87 ea       	ldi	r24, 0xA7	; 167
    2368:	91 e0       	ldi	r25, 0x01	; 1
    236a:	8f 93       	push	r24
    236c:	81 e4       	ldi	r24, 0x41	; 65
    236e:	93 e0       	ldi	r25, 0x03	; 3
    2370:	89 2f       	mov	r24, r25
    2372:	8f 93       	push	r24
    2374:	81 e4       	ldi	r24, 0x41	; 65
    2376:	93 e0       	ldi	r25, 0x03	; 3
    2378:	8f 93       	push	r24
    237a:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    238a:	68 ec       	ldi	r22, 0xC8	; 200
    238c:	70 e0       	ldi	r23, 0x00	; 0
    238e:	81 e4       	ldi	r24, 0x41	; 65
    2390:	93 e0       	ldi	r25, 0x03	; 3
    2392:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpError_MSG);
    2396:	89 ea       	ldi	r24, 0xA9	; 169
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	89 2f       	mov	r24, r25
    239c:	8f 93       	push	r24
    239e:	89 ea       	ldi	r24, 0xA9	; 169
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	8f 93       	push	r24
    23a4:	87 ea       	ldi	r24, 0xA7	; 167
    23a6:	91 e0       	ldi	r25, 0x01	; 1
    23a8:	89 2f       	mov	r24, r25
    23aa:	8f 93       	push	r24
    23ac:	87 ea       	ldi	r24, 0xA7	; 167
    23ae:	91 e0       	ldi	r25, 0x01	; 1
    23b0:	8f 93       	push	r24
    23b2:	81 e4       	ldi	r24, 0x41	; 65
    23b4:	93 e0       	ldi	r25, 0x03	; 3
    23b6:	89 2f       	mov	r24, r25
    23b8:	8f 93       	push	r24
    23ba:	81 e4       	ldi	r24, 0x41	; 65
    23bc:	93 e0       	ldi	r25, 0x03	; 3
    23be:	8f 93       	push	r24
    23c0:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    23d0:	68 ec       	ldi	r22, 0xC8	; 200
    23d2:	70 e0       	ldi	r23, 0x00	; 0
    23d4:	81 e4       	ldi	r24, 0x41	; 65
    23d6:	93 e0       	ldi	r25, 0x03	; 3
    23d8:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>

			// leo los valores originales nuevamente
			Eeprom_a_Float(&flPIDkP_Eeprom, &flPIDkP);						/* leo los valores originales de la eeprom */
    23dc:	60 e5       	ldi	r22, 0x50	; 80
    23de:	74 e0       	ldi	r23, 0x04	; 4
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
			uCRC = Float_a_Checksum(&flPIDkP);								/* calculo el checksum de los valores levantados a la ram */
    23e8:	80 e5       	ldi	r24, 0x50	; 80
    23ea:	94 e0       	ldi	r25, 0x04	; 4
    23ec:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    23f0:	9c 83       	std	Y+4, r25	; 0x04
    23f2:	8b 83       	std	Y+3, r24	; 0x03
			Eeprom_a_Float(&flPIDkI_Eeprom, &flPIDkI);						/* leo los valores originales de la eeprom */
    23f4:	6c e4       	ldi	r22, 0x4C	; 76
    23f6:	74 e0       	ldi	r23, 0x04	; 4
    23f8:	84 e0       	ldi	r24, 0x04	; 4
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
			uCRC += Float_a_Checksum(&flPIDkI);								/* calculo el checksum de los valores levantados a la ram */
    2400:	8c e4       	ldi	r24, 0x4C	; 76
    2402:	94 e0       	ldi	r25, 0x04	; 4
    2404:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    2408:	9c 01       	movw	r18, r24
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	9c 81       	ldd	r25, Y+4	; 0x04
    240e:	82 0f       	add	r24, r18
    2410:	93 1f       	adc	r25, r19
    2412:	9c 83       	std	Y+4, r25	; 0x04
    2414:	8b 83       	std	Y+3, r24	; 0x03
			Eeprom_a_Float(&flPIDkD_Eeprom, &flPIDkD);						/* leo los valores originales de la eeprom */
    2416:	64 e4       	ldi	r22, 0x44	; 68
    2418:	74 e0       	ldi	r23, 0x04	; 4
    241a:	88 e0       	ldi	r24, 0x08	; 8
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
			uCRC += Float_a_Checksum(&flPIDkD);								/* calculo el checksum de los valores levantados a la ram */
    2422:	84 e4       	ldi	r24, 0x44	; 68
    2424:	94 e0       	ldi	r25, 0x04	; 4
    2426:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    242a:	9c 01       	movw	r18, r24
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	9c 81       	ldd	r25, Y+4	; 0x04
    2430:	82 0f       	add	r24, r18
    2432:	93 1f       	adc	r25, r19
    2434:	9c 83       	std	Y+4, r25	; 0x04
    2436:	8b 83       	std	Y+3, r24	; 0x03
			Eeprom_a_Float(&flPIDintMax_Eeprom, &flPIDintMax);				/* leo los valores originales de la eeprom */
    2438:	69 e1       	ldi	r22, 0x19	; 25
    243a:	74 e0       	ldi	r23, 0x04	; 4
    243c:	8c e0       	ldi	r24, 0x0C	; 12
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
			uCRC += Float_a_Checksum(&flPIDintMax);							/* calculo el checksum de los valores levantados a la ram */
    2444:	89 e1       	ldi	r24, 0x19	; 25
    2446:	94 e0       	ldi	r25, 0x04	; 4
    2448:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    244c:	9c 01       	movw	r18, r24
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	9c 81       	ldd	r25, Y+4	; 0x04
    2452:	82 0f       	add	r24, r18
    2454:	93 1f       	adc	r25, r19
    2456:	9c 83       	std	Y+4, r25	; 0x04
    2458:	8b 83       	std	Y+3, r24	; 0x03
			Eeprom_a_Float(&flVariacionCaudalSetP_Eeprom, &flVariacionCaudalSetP);
    245a:	68 e5       	ldi	r22, 0x58	; 88
    245c:	74 e0       	ldi	r23, 0x04	; 4
    245e:	80 e1       	ldi	r24, 0x10	; 16
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
			uCRC += Float_a_Checksum(&flVariacionCaudalSetP);
    2466:	88 e5       	ldi	r24, 0x58	; 88
    2468:	94 e0       	ldi	r25, 0x04	; 4
    246a:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    246e:	9c 01       	movw	r18, r24
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	9c 81       	ldd	r25, Y+4	; 0x04
    2474:	82 0f       	add	r24, r18
    2476:	93 1f       	adc	r25, r19
    2478:	9c 83       	std	Y+4, r25	; 0x04
    247a:	8b 83       	std	Y+3, r24	; 0x03
			Eeprom_a_Float(&flCaudalEscalaKsPID_Eeprom, &flCaudalEscalaKsPID);
    247c:	6c e3       	ldi	r22, 0x3C	; 60
    247e:	74 e0       	ldi	r23, 0x04	; 4
    2480:	84 e1       	ldi	r24, 0x14	; 20
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
			uCRC += Float_a_Checksum(&flCaudalEscalaKsPID);
    2488:	8c e3       	ldi	r24, 0x3C	; 60
    248a:	94 e0       	ldi	r25, 0x04	; 4
    248c:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    2490:	9c 01       	movw	r18, r24
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	9c 81       	ldd	r25, Y+4	; 0x04
    2496:	82 0f       	add	r24, r18
    2498:	93 1f       	adc	r25, r19
    249a:	9c 83       	std	Y+4, r25	; 0x04
    249c:	8b 83       	std	Y+3, r24	; 0x03
			Eeprom_a_Float(&flEscalaVariacionCaudal_Eeprom, &flEscalaVariacionCaudal);
    249e:	68 e4       	ldi	r22, 0x48	; 72
    24a0:	74 e0       	ldi	r23, 0x04	; 4
    24a2:	88 e1       	ldi	r24, 0x18	; 24
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Eeprom_a_Float>
			uCRC += Float_a_Checksum(&flEscalaVariacionCaudal);
    24aa:	88 e4       	ldi	r24, 0x48	; 72
    24ac:	94 e0       	ldi	r25, 0x04	; 4
    24ae:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    24b2:	9c 01       	movw	r18, r24
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	9c 81       	ldd	r25, Y+4	; 0x04
    24b8:	82 0f       	add	r24, r18
    24ba:	93 1f       	adc	r25, r19
    24bc:	9c 83       	std	Y+4, r25	; 0x04
    24be:	8b 83       	std	Y+3, r24	; 0x03
			Eeprom_a_UnsignedInt(&uPeriodoPID_Eeprom, &uPeriodoPID);
    24c0:	63 e2       	ldi	r22, 0x23	; 35
    24c2:	74 e0       	ldi	r23, 0x04	; 4
    24c4:	8c e1       	ldi	r24, 0x1C	; 28
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <Eeprom_a_UnsignedInt>
			uCRC += UnsignedInt_a_Checksum(&uPeriodoPID);
    24cc:	83 e2       	ldi	r24, 0x23	; 35
    24ce:	94 e0       	ldi	r25, 0x04	; 4
    24d0:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UnsignedInt_a_Checksum>
    24d4:	9c 01       	movw	r18, r24
    24d6:	8b 81       	ldd	r24, Y+3	; 0x03
    24d8:	9c 81       	ldd	r25, Y+4	; 0x04
    24da:	82 0f       	add	r24, r18
    24dc:	93 1f       	adc	r25, r19
    24de:	9c 83       	std	Y+4, r25	; 0x04
    24e0:	8b 83       	std	Y+3, r24	; 0x03
			Eeprom_a_UnsignedInt(&uPeriodoVedaPID_Eeprom, &uPeriodoVedaPID);
    24e2:	66 e5       	ldi	r22, 0x56	; 86
    24e4:	74 e0       	ldi	r23, 0x04	; 4
    24e6:	8e e1       	ldi	r24, 0x1E	; 30
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <Eeprom_a_UnsignedInt>
			uCRC += UnsignedInt_a_Checksum(&uPeriodoVedaPID);
    24ee:	86 e5       	ldi	r24, 0x56	; 86
    24f0:	94 e0       	ldi	r25, 0x04	; 4
    24f2:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UnsignedInt_a_Checksum>
    24f6:	9c 01       	movw	r18, r24
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	9c 81       	ldd	r25, Y+4	; 0x04
    24fc:	82 0f       	add	r24, r18
    24fe:	93 1f       	adc	r25, r19
    2500:	9c 83       	std	Y+4, r25	; 0x04
    2502:	8b 83       	std	Y+3, r24	; 0x03
			Eeprom_a_UnsignedInt(&uPeriodoVedaCaudal_Eeprom, &uPeriodoVedaCaudal);
    2504:	6d e1       	ldi	r22, 0x1D	; 29
    2506:	74 e0       	ldi	r23, 0x04	; 4
    2508:	80 e2       	ldi	r24, 0x20	; 32
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <Eeprom_a_UnsignedInt>
			uCRC += UnsignedInt_a_Checksum(&uPeriodoVedaCaudal);
    2510:	8d e1       	ldi	r24, 0x1D	; 29
    2512:	94 e0       	ldi	r25, 0x04	; 4
    2514:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UnsignedInt_a_Checksum>
    2518:	9c 01       	movw	r18, r24
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	9c 81       	ldd	r25, Y+4	; 0x04
    251e:	82 0f       	add	r24, r18
    2520:	93 1f       	adc	r25, r19
    2522:	9c 83       	std	Y+4, r25	; 0x04
    2524:	8b 83       	std	Y+3, r24	; 0x03
			Eeprom_a_UnsignedInt (&uChecksumPID_Eeprom, &uCRC_Eeprom);		/* levanto el checksum de la eeprom */
    2526:	ce 01       	movw	r24, r28
    2528:	05 96       	adiw	r24, 0x05	; 5
    252a:	bc 01       	movw	r22, r24
    252c:	82 e2       	ldi	r24, 0x22	; 34
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <Eeprom_a_UnsignedInt>

			// si lei bien los originales grabo la copia sobre el backup
			if (uCRC == uCRC_Eeprom) {
    2534:	2b 81       	ldd	r18, Y+3	; 0x03
    2536:	3c 81       	ldd	r19, Y+4	; 0x04
    2538:	8d 81       	ldd	r24, Y+5	; 0x05
    253a:	9e 81       	ldd	r25, Y+6	; 0x06
    253c:	28 17       	cp	r18, r24
    253e:	39 07       	cpc	r19, r25
    2540:	09 f0       	breq	.+2      	; 0x2544 <Carga_Configuracion_Desde_Eeprom+0x5e8>
    2542:	44 c0       	rjmp	.+136    	; 0x25cc <Carga_Configuracion_Desde_Eeprom+0x670>
				Float_a_Eeprom(&flPIDkP_Eeprom_BK, &flPIDkP);
    2544:	60 e5       	ldi	r22, 0x50	; 80
    2546:	74 e0       	ldi	r23, 0x04	; 4
    2548:	84 e2       	ldi	r24, 0x24	; 36
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flPIDkI_Eeprom_BK, &flPIDkI);
    2550:	6c e4       	ldi	r22, 0x4C	; 76
    2552:	74 e0       	ldi	r23, 0x04	; 4
    2554:	88 e2       	ldi	r24, 0x28	; 40
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flPIDkD_Eeprom_BK, &flPIDkD);
    255c:	64 e4       	ldi	r22, 0x44	; 68
    255e:	74 e0       	ldi	r23, 0x04	; 4
    2560:	8c e2       	ldi	r24, 0x2C	; 44
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flPIDintMax_Eeprom_BK, &flPIDintMax);
    2568:	69 e1       	ldi	r22, 0x19	; 25
    256a:	74 e0       	ldi	r23, 0x04	; 4
    256c:	80 e3       	ldi	r24, 0x30	; 48
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flVariacionCaudalSetP_Eeprom_BK, &flVariacionCaudalSetP);
    2574:	68 e5       	ldi	r22, 0x58	; 88
    2576:	74 e0       	ldi	r23, 0x04	; 4
    2578:	84 e3       	ldi	r24, 0x34	; 52
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flCaudalEscalaKsPID_Eeprom_BK, &flCaudalEscalaKsPID);
    2580:	6c e3       	ldi	r22, 0x3C	; 60
    2582:	74 e0       	ldi	r23, 0x04	; 4
    2584:	88 e3       	ldi	r24, 0x38	; 56
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flEscalaVariacionCaudal_Eeprom_BK, &flEscalaVariacionCaudal);
    258c:	68 e4       	ldi	r22, 0x48	; 72
    258e:	74 e0       	ldi	r23, 0x04	; 4
    2590:	8c e3       	ldi	r24, 0x3C	; 60
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				UnsignedInt_a_Eeprom(&uPeriodoPID_Eeprom_BK, &uPeriodoPID);
    2598:	63 e2       	ldi	r22, 0x23	; 35
    259a:	74 e0       	ldi	r23, 0x04	; 4
    259c:	80 e4       	ldi	r24, 0x40	; 64
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
				UnsignedInt_a_Eeprom(&uPeriodoVedaPID_Eeprom_BK, &uPeriodoVedaPID);
    25a4:	66 e5       	ldi	r22, 0x56	; 86
    25a6:	74 e0       	ldi	r23, 0x04	; 4
    25a8:	82 e4       	ldi	r24, 0x42	; 66
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
				UnsignedInt_a_Eeprom(&uPeriodoVedaCaudal_Eeprom_BK, &uPeriodoVedaCaudal);
    25b0:	6d e1       	ldi	r22, 0x1D	; 29
    25b2:	74 e0       	ldi	r23, 0x04	; 4
    25b4:	84 e4       	ldi	r24, 0x44	; 68
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
				UnsignedInt_a_Eeprom (&uChecksumPID_Eeprom_BK, &uCRC);
    25bc:	ce 01       	movw	r24, r28
    25be:	03 96       	adiw	r24, 0x03	; 3
    25c0:	bc 01       	movw	r22, r24
    25c2:	86 e4       	ldi	r24, 0x46	; 70
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>

				break;
    25ca:	ef c0       	rjmp	.+478    	; 0x27aa <Carga_Configuracion_Desde_Eeprom+0x84e>
			Eeprom_a_UnsignedInt(&uPeriodoVedaCaudal_Eeprom, &uPeriodoVedaCaudal);
			uCRC += UnsignedInt_a_Checksum(&uPeriodoVedaCaudal);
			Eeprom_a_UnsignedInt (&uChecksumPID_Eeprom, &uCRC_Eeprom);		/* levanto el checksum de la eeprom */

			// si lei bien los originales grabo la copia sobre el backup
			if (uCRC == uCRC_Eeprom) {
    25cc:	e9 c0       	rjmp	.+466    	; 0x27a0 <Carga_Configuracion_Desde_Eeprom+0x844>

				break;
			}
		}
		// si el original da mal y la copia bien
		else if ((uCRC != uCRC_Eeprom) && (uCRC_BK == uCRC_Eeprom_BK)) {
    25ce:	2b 81       	ldd	r18, Y+3	; 0x03
    25d0:	3c 81       	ldd	r19, Y+4	; 0x04
    25d2:	8d 81       	ldd	r24, Y+5	; 0x05
    25d4:	9e 81       	ldd	r25, Y+6	; 0x06
    25d6:	28 17       	cp	r18, r24
    25d8:	39 07       	cpc	r19, r25
    25da:	09 f4       	brne	.+2      	; 0x25de <Carga_Configuracion_Desde_Eeprom+0x682>
    25dc:	92 c0       	rjmp	.+292    	; 0x2702 <Carga_Configuracion_Desde_Eeprom+0x7a6>
    25de:	2f 81       	ldd	r18, Y+7	; 0x07
    25e0:	38 85       	ldd	r19, Y+8	; 0x08
    25e2:	89 85       	ldd	r24, Y+9	; 0x09
    25e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e6:	28 17       	cp	r18, r24
    25e8:	39 07       	cpc	r19, r25
    25ea:	09 f0       	breq	.+2      	; 0x25ee <Carga_Configuracion_Desde_Eeprom+0x692>
    25ec:	8a c0       	rjmp	.+276    	; 0x2702 <Carga_Configuracion_Desde_Eeprom+0x7a6>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesError_MSG);
    25ee:	83 ec       	ldi	r24, 0xC3	; 195
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	89 2f       	mov	r24, r25
    25f4:	8f 93       	push	r24
    25f6:	83 ec       	ldi	r24, 0xC3	; 195
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	8f 93       	push	r24
    25fc:	87 ea       	ldi	r24, 0xA7	; 167
    25fe:	91 e0       	ldi	r25, 0x01	; 1
    2600:	89 2f       	mov	r24, r25
    2602:	8f 93       	push	r24
    2604:	87 ea       	ldi	r24, 0xA7	; 167
    2606:	91 e0       	ldi	r25, 0x01	; 1
    2608:	8f 93       	push	r24
    260a:	81 e4       	ldi	r24, 0x41	; 65
    260c:	93 e0       	ldi	r25, 0x03	; 3
    260e:	89 2f       	mov	r24, r25
    2610:	8f 93       	push	r24
    2612:	81 e4       	ldi	r24, 0x41	; 65
    2614:	93 e0       	ldi	r25, 0x03	; 3
    2616:	8f 93       	push	r24
    2618:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    2628:	68 ec       	ldi	r22, 0xC8	; 200
    262a:	70 e0       	ldi	r23, 0x00	; 0
    262c:	81 e4       	ldi	r24, 0x41	; 65
    262e:	93 e0       	ldi	r25, 0x03	; 3
    2630:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpOK_MSG);
    2634:	8e ed       	ldi	r24, 0xDE	; 222
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	89 2f       	mov	r24, r25
    263a:	8f 93       	push	r24
    263c:	8e ed       	ldi	r24, 0xDE	; 222
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	8f 93       	push	r24
    2642:	87 ea       	ldi	r24, 0xA7	; 167
    2644:	91 e0       	ldi	r25, 0x01	; 1
    2646:	89 2f       	mov	r24, r25
    2648:	8f 93       	push	r24
    264a:	87 ea       	ldi	r24, 0xA7	; 167
    264c:	91 e0       	ldi	r25, 0x01	; 1
    264e:	8f 93       	push	r24
    2650:	81 e4       	ldi	r24, 0x41	; 65
    2652:	93 e0       	ldi	r25, 0x03	; 3
    2654:	89 2f       	mov	r24, r25
    2656:	8f 93       	push	r24
    2658:	81 e4       	ldi	r24, 0x41	; 65
    265a:	93 e0       	ldi	r25, 0x03	; 3
    265c:	8f 93       	push	r24
    265e:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    266e:	68 ec       	ldi	r22, 0xC8	; 200
    2670:	70 e0       	ldi	r23, 0x00	; 0
    2672:	81 e4       	ldi	r24, 0x41	; 65
    2674:	93 e0       	ldi	r25, 0x03	; 3
    2676:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>

			// grabo el backup sobre los originales
			Float_a_Eeprom(&flPIDkP_Eeprom, &flPIDkP);
    267a:	60 e5       	ldi	r22, 0x50	; 80
    267c:	74 e0       	ldi	r23, 0x04	; 4
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
			Float_a_Eeprom(&flPIDkI_Eeprom, &flPIDkI);
    2686:	6c e4       	ldi	r22, 0x4C	; 76
    2688:	74 e0       	ldi	r23, 0x04	; 4
    268a:	84 e0       	ldi	r24, 0x04	; 4
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
			Float_a_Eeprom(&flPIDkD_Eeprom, &flPIDkD);
    2692:	64 e4       	ldi	r22, 0x44	; 68
    2694:	74 e0       	ldi	r23, 0x04	; 4
    2696:	88 e0       	ldi	r24, 0x08	; 8
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
			Float_a_Eeprom(&flPIDintMax_Eeprom, &flPIDintMax);
    269e:	69 e1       	ldi	r22, 0x19	; 25
    26a0:	74 e0       	ldi	r23, 0x04	; 4
    26a2:	8c e0       	ldi	r24, 0x0C	; 12
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
			Float_a_Eeprom(&flVariacionCaudalSetP_Eeprom, &flVariacionCaudalSetP);
    26aa:	68 e5       	ldi	r22, 0x58	; 88
    26ac:	74 e0       	ldi	r23, 0x04	; 4
    26ae:	80 e1       	ldi	r24, 0x10	; 16
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
			Float_a_Eeprom(&flCaudalEscalaKsPID_Eeprom, &flCaudalEscalaKsPID);
    26b6:	6c e3       	ldi	r22, 0x3C	; 60
    26b8:	74 e0       	ldi	r23, 0x04	; 4
    26ba:	84 e1       	ldi	r24, 0x14	; 20
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
			Float_a_Eeprom(&flEscalaVariacionCaudal_Eeprom, &flEscalaVariacionCaudal);
    26c2:	68 e4       	ldi	r22, 0x48	; 72
    26c4:	74 e0       	ldi	r23, 0x04	; 4
    26c6:	88 e1       	ldi	r24, 0x18	; 24
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
			UnsignedInt_a_Eeprom(&uPeriodoPID_Eeprom, &uPeriodoPID);
    26ce:	63 e2       	ldi	r22, 0x23	; 35
    26d0:	74 e0       	ldi	r23, 0x04	; 4
    26d2:	8c e1       	ldi	r24, 0x1C	; 28
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
			UnsignedInt_a_Eeprom(&uPeriodoVedaPID_Eeprom, &uPeriodoVedaPID);
    26da:	66 e5       	ldi	r22, 0x56	; 86
    26dc:	74 e0       	ldi	r23, 0x04	; 4
    26de:	8e e1       	ldi	r24, 0x1E	; 30
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
			UnsignedInt_a_Eeprom(&uPeriodoVedaCaudal_Eeprom, &uPeriodoVedaCaudal);
    26e6:	6d e1       	ldi	r22, 0x1D	; 29
    26e8:	74 e0       	ldi	r23, 0x04	; 4
    26ea:	80 e2       	ldi	r24, 0x20	; 32
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
			UnsignedInt_a_Eeprom (&uChecksumPID_Eeprom, &uCRC_BK);
    26f2:	ce 01       	movw	r24, r28
    26f4:	07 96       	adiw	r24, 0x07	; 7
    26f6:	bc 01       	movw	r22, r24
    26f8:	82 e2       	ldi	r24, 0x22	; 34
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>

			break;
    2700:	54 c0       	rjmp	.+168    	; 0x27aa <Carga_Configuracion_Desde_Eeprom+0x84e>
		}
		// si ambas dan mal y agote los intentos
		else if (uContIntentosValidacionChecksum == CANT_INTENTOS_VALIDACION_CHECKSUM){
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	9a 81       	ldd	r25, Y+2	; 0x02
    2706:	0a 97       	sbiw	r24, 0x0a	; 10
    2708:	09 f0       	breq	.+2      	; 0x270c <Carga_Configuracion_Desde_Eeprom+0x7b0>
    270a:	4a c0       	rjmp	.+148    	; 0x27a0 <Carga_Configuracion_Desde_Eeprom+0x844>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesError_MSG);
    270c:	83 ec       	ldi	r24, 0xC3	; 195
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	89 2f       	mov	r24, r25
    2712:	8f 93       	push	r24
    2714:	83 ec       	ldi	r24, 0xC3	; 195
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	8f 93       	push	r24
    271a:	87 ea       	ldi	r24, 0xA7	; 167
    271c:	91 e0       	ldi	r25, 0x01	; 1
    271e:	89 2f       	mov	r24, r25
    2720:	8f 93       	push	r24
    2722:	87 ea       	ldi	r24, 0xA7	; 167
    2724:	91 e0       	ldi	r25, 0x01	; 1
    2726:	8f 93       	push	r24
    2728:	81 e4       	ldi	r24, 0x41	; 65
    272a:	93 e0       	ldi	r25, 0x03	; 3
    272c:	89 2f       	mov	r24, r25
    272e:	8f 93       	push	r24
    2730:	81 e4       	ldi	r24, 0x41	; 65
    2732:	93 e0       	ldi	r25, 0x03	; 3
    2734:	8f 93       	push	r24
    2736:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    2746:	68 ec       	ldi	r22, 0xC8	; 200
    2748:	70 e0       	ldi	r23, 0x00	; 0
    274a:	81 e4       	ldi	r24, 0x41	; 65
    274c:	93 e0       	ldi	r25, 0x03	; 3
    274e:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpError_MSG);
    2752:	89 ea       	ldi	r24, 0xA9	; 169
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	89 2f       	mov	r24, r25
    2758:	8f 93       	push	r24
    275a:	89 ea       	ldi	r24, 0xA9	; 169
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	8f 93       	push	r24
    2760:	87 ea       	ldi	r24, 0xA7	; 167
    2762:	91 e0       	ldi	r25, 0x01	; 1
    2764:	89 2f       	mov	r24, r25
    2766:	8f 93       	push	r24
    2768:	87 ea       	ldi	r24, 0xA7	; 167
    276a:	91 e0       	ldi	r25, 0x01	; 1
    276c:	8f 93       	push	r24
    276e:	81 e4       	ldi	r24, 0x41	; 65
    2770:	93 e0       	ldi	r25, 0x03	; 3
    2772:	89 2f       	mov	r24, r25
    2774:	8f 93       	push	r24
    2776:	81 e4       	ldi	r24, 0x41	; 65
    2778:	93 e0       	ldi	r25, 0x03	; 3
    277a:	8f 93       	push	r24
    277c:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    278c:	68 ec       	ldi	r22, 0xC8	; 200
    278e:	70 e0       	ldi	r23, 0x00	; 0
    2790:	81 e4       	ldi	r24, 0x41	; 65
    2792:	93 e0       	ldi	r25, 0x03	; 3
    2794:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>

			Carga_Configuracion_Fabrica_Eeprom (GRUPO_PID);
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 de 13 	call	0x27bc	; 0x27bc <Carga_Configuracion_Fabrica_Eeprom>
	unsigned int	uCRC_BK;							/* Checksum backup */
	unsigned int	uCRC_Eeprom_BK;						/* Checksum eeprom backup */

	/* GRUPO_ALARMAS -0- */
	unsigned int uContIntentosValidacionChecksum = 0;
	while (uContIntentosValidacionChecksum < CANT_INTENTOS_VALIDACION_CHECKSUM) {
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	9a 81       	ldd	r25, Y+2	; 0x02
    27a4:	0a 97       	sbiw	r24, 0x0a	; 10
    27a6:	08 f4       	brcc	.+2      	; 0x27aa <Carga_Configuracion_Desde_Eeprom+0x84e>
    27a8:	e6 cb       	rjmp	.-2100   	; 0x1f76 <Carga_Configuracion_Desde_Eeprom+0x1a>
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);

			Carga_Configuracion_Fabrica_Eeprom (GRUPO_PID);
		}
	}
}
    27aa:	2a 96       	adiw	r28, 0x0a	; 10
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	cd bf       	out	0x3d, r28	; 61
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	08 95       	ret

000027bc <Carga_Configuracion_Fabrica_Eeprom>:

/*****************************************************************************
* Funcion de carga de variables con valores de fabrica
*****************************************************************************/

void Carga_Configuracion_Fabrica_Eeprom (int grupo) {
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <Carga_Configuracion_Fabrica_Eeprom+0x6>
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	9a 83       	std	Y+2, r25	; 0x02
    27c8:	89 83       	std	Y+1, r24	; 0x01
	/////GRUPO ALARMAS/////
	if ((grupo == GRUPO_PID)||(grupo == GRUPO_TODOS)) {
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	9a 81       	ldd	r25, Y+2	; 0x02
    27ce:	89 2b       	or	r24, r25
    27d0:	29 f0       	breq	.+10     	; 0x27dc <Carga_Configuracion_Fabrica_Eeprom+0x20>
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	9a 81       	ldd	r25, Y+2	; 0x02
    27d6:	04 97       	sbiw	r24, 0x04	; 4
    27d8:	09 f0       	breq	.+2      	; 0x27dc <Carga_Configuracion_Fabrica_Eeprom+0x20>
    27da:	e1 c0       	rjmp	.+450    	; 0x299e <Carga_Configuracion_Fabrica_Eeprom+0x1e2>
		flPIDkP = DEFAULT_PID_KP;
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	a0 e8       	ldi	r26, 0x80	; 128
    27e2:	bf e3       	ldi	r27, 0x3F	; 63
    27e4:	80 93 50 04 	sts	0x0450, r24
    27e8:	90 93 51 04 	sts	0x0451, r25
    27ec:	a0 93 52 04 	sts	0x0452, r26
    27f0:	b0 93 53 04 	sts	0x0453, r27
		flPIDkI = DEFAULT_PID_KI;
    27f4:	8a e0       	ldi	r24, 0x0A	; 10
    27f6:	97 ed       	ldi	r25, 0xD7	; 215
    27f8:	a3 e2       	ldi	r26, 0x23	; 35
    27fa:	bc e3       	ldi	r27, 0x3C	; 60
    27fc:	80 93 4c 04 	sts	0x044C, r24
    2800:	90 93 4d 04 	sts	0x044D, r25
    2804:	a0 93 4e 04 	sts	0x044E, r26
    2808:	b0 93 4f 04 	sts	0x044F, r27
		flPIDkD = DEFAULT_PID_KD;
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	a8 e4       	ldi	r26, 0x48	; 72
    2812:	b2 e4       	ldi	r27, 0x42	; 66
    2814:	80 93 44 04 	sts	0x0444, r24
    2818:	90 93 45 04 	sts	0x0445, r25
    281c:	a0 93 46 04 	sts	0x0446, r26
    2820:	b0 93 47 04 	sts	0x0447, r27
		flPIDintMax = DEFAULT_MAX_PID_INTEG;
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	a0 ea       	ldi	r26, 0xA0	; 160
    282a:	b0 e4       	ldi	r27, 0x40	; 64
    282c:	80 93 19 04 	sts	0x0419, r24
    2830:	90 93 1a 04 	sts	0x041A, r25
    2834:	a0 93 1b 04 	sts	0x041B, r26
    2838:	b0 93 1c 04 	sts	0x041C, r27
		flVariacionCaudalSetP = DEFAULT_VARIACION_CAUDAL;
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	a8 ec       	ldi	r26, 0xC8	; 200
    2842:	b1 e4       	ldi	r27, 0x41	; 65
    2844:	80 93 58 04 	sts	0x0458, r24
    2848:	90 93 59 04 	sts	0x0459, r25
    284c:	a0 93 5a 04 	sts	0x045A, r26
    2850:	b0 93 5b 04 	sts	0x045B, r27
		flCaudalEscalaKsPID = DEFAULT_CAUDAL_ESCALA_KS_PID;
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	a0 ea       	ldi	r26, 0xA0	; 160
    285a:	b0 e4       	ldi	r27, 0x40	; 64
    285c:	80 93 3c 04 	sts	0x043C, r24
    2860:	90 93 3d 04 	sts	0x043D, r25
    2864:	a0 93 3e 04 	sts	0x043E, r26
    2868:	b0 93 3f 04 	sts	0x043F, r27
		flEscalaVariacionCaudal = DEFAULT_ESCALA_VARIACION_CAUDAL;
    286c:	8d ec       	ldi	r24, 0xCD	; 205
    286e:	9c ec       	ldi	r25, 0xCC	; 204
    2870:	ac e8       	ldi	r26, 0x8C	; 140
    2872:	bf e3       	ldi	r27, 0x3F	; 63
    2874:	80 93 48 04 	sts	0x0448, r24
    2878:	90 93 49 04 	sts	0x0449, r25
    287c:	a0 93 4a 04 	sts	0x044A, r26
    2880:	b0 93 4b 04 	sts	0x044B, r27
		uPeriodoPID = DEFAULT_PID_PERIODO;
    2884:	88 eb       	ldi	r24, 0xB8	; 184
    2886:	9b e0       	ldi	r25, 0x0B	; 11
    2888:	90 93 24 04 	sts	0x0424, r25
    288c:	80 93 23 04 	sts	0x0423, r24
		uPeriodoVedaPID = DEFAULT_PERIODO_VEDA_PID;
    2890:	80 ee       	ldi	r24, 0xE0	; 224
    2892:	9e e2       	ldi	r25, 0x2E	; 46
    2894:	90 93 57 04 	sts	0x0457, r25
    2898:	80 93 56 04 	sts	0x0456, r24
		uPeriodoVedaCaudal = DEFAULT_PERIODO_VEDA_CAUDAL;
    289c:	88 ee       	ldi	r24, 0xE8	; 232
    289e:	9d ef       	ldi	r25, 0xFD	; 253
    28a0:	90 93 1e 04 	sts	0x041E, r25
    28a4:	80 93 1d 04 	sts	0x041D, r24

		Float_a_Eeprom(&flPIDkP_Eeprom, &flPIDkP);
    28a8:	60 e5       	ldi	r22, 0x50	; 80
    28aa:	74 e0       	ldi	r23, 0x04	; 4
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
		Float_a_Eeprom(&flPIDkI_Eeprom, &flPIDkI);
    28b4:	6c e4       	ldi	r22, 0x4C	; 76
    28b6:	74 e0       	ldi	r23, 0x04	; 4
    28b8:	84 e0       	ldi	r24, 0x04	; 4
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
		Float_a_Eeprom(&flPIDkD_Eeprom, &flPIDkD);
    28c0:	64 e4       	ldi	r22, 0x44	; 68
    28c2:	74 e0       	ldi	r23, 0x04	; 4
    28c4:	88 e0       	ldi	r24, 0x08	; 8
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
		Float_a_Eeprom(&flPIDintMax_Eeprom, &flPIDintMax);
    28cc:	69 e1       	ldi	r22, 0x19	; 25
    28ce:	74 e0       	ldi	r23, 0x04	; 4
    28d0:	8c e0       	ldi	r24, 0x0C	; 12
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
		Float_a_Eeprom(&flVariacionCaudalSetP_Eeprom, &flVariacionCaudalSetP);
    28d8:	68 e5       	ldi	r22, 0x58	; 88
    28da:	74 e0       	ldi	r23, 0x04	; 4
    28dc:	80 e1       	ldi	r24, 0x10	; 16
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
		Float_a_Eeprom(&flCaudalEscalaKsPID_Eeprom, &flCaudalEscalaKsPID);
    28e4:	6c e3       	ldi	r22, 0x3C	; 60
    28e6:	74 e0       	ldi	r23, 0x04	; 4
    28e8:	84 e1       	ldi	r24, 0x14	; 20
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
		Float_a_Eeprom(&flEscalaVariacionCaudal_Eeprom, &flEscalaVariacionCaudal);
    28f0:	68 e4       	ldi	r22, 0x48	; 72
    28f2:	74 e0       	ldi	r23, 0x04	; 4
    28f4:	88 e1       	ldi	r24, 0x18	; 24
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
		UnsignedInt_a_Eeprom(&uPeriodoPID_Eeprom, &uPeriodoPID);
    28fc:	63 e2       	ldi	r22, 0x23	; 35
    28fe:	74 e0       	ldi	r23, 0x04	; 4
    2900:	8c e1       	ldi	r24, 0x1C	; 28
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom(&uPeriodoVedaPID_Eeprom, &uPeriodoVedaPID);
    2908:	66 e5       	ldi	r22, 0x56	; 86
    290a:	74 e0       	ldi	r23, 0x04	; 4
    290c:	8e e1       	ldi	r24, 0x1E	; 30
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom(&uPeriodoVedaCaudal_Eeprom, &uPeriodoVedaCaudal);
    2914:	6d e1       	ldi	r22, 0x1D	; 29
    2916:	74 e0       	ldi	r23, 0x04	; 4
    2918:	80 e2       	ldi	r24, 0x20	; 32
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>

		Float_a_Eeprom(&flPIDkP_Eeprom_BK, &flPIDkP);
    2920:	60 e5       	ldi	r22, 0x50	; 80
    2922:	74 e0       	ldi	r23, 0x04	; 4
    2924:	84 e2       	ldi	r24, 0x24	; 36
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
		Float_a_Eeprom(&flPIDkI_Eeprom_BK, &flPIDkI);
    292c:	6c e4       	ldi	r22, 0x4C	; 76
    292e:	74 e0       	ldi	r23, 0x04	; 4
    2930:	88 e2       	ldi	r24, 0x28	; 40
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
		Float_a_Eeprom(&flPIDkD_Eeprom_BK, &flPIDkD);
    2938:	64 e4       	ldi	r22, 0x44	; 68
    293a:	74 e0       	ldi	r23, 0x04	; 4
    293c:	8c e2       	ldi	r24, 0x2C	; 44
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
		Float_a_Eeprom(&flPIDintMax_Eeprom_BK, &flPIDintMax);
    2944:	69 e1       	ldi	r22, 0x19	; 25
    2946:	74 e0       	ldi	r23, 0x04	; 4
    2948:	80 e3       	ldi	r24, 0x30	; 48
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
		Float_a_Eeprom(&flVariacionCaudalSetP_Eeprom_BK, &flVariacionCaudalSetP);
    2950:	68 e5       	ldi	r22, 0x58	; 88
    2952:	74 e0       	ldi	r23, 0x04	; 4
    2954:	84 e3       	ldi	r24, 0x34	; 52
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
		Float_a_Eeprom(&flCaudalEscalaKsPID_Eeprom_BK, &flCaudalEscalaKsPID);
    295c:	6c e3       	ldi	r22, 0x3C	; 60
    295e:	74 e0       	ldi	r23, 0x04	; 4
    2960:	88 e3       	ldi	r24, 0x38	; 56
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
		Float_a_Eeprom(&flEscalaVariacionCaudal_Eeprom_BK, &flEscalaVariacionCaudal);
    2968:	68 e4       	ldi	r22, 0x48	; 72
    296a:	74 e0       	ldi	r23, 0x04	; 4
    296c:	8c e3       	ldi	r24, 0x3C	; 60
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
		UnsignedInt_a_Eeprom(&uPeriodoPID_Eeprom_BK, &uPeriodoPID);
    2974:	63 e2       	ldi	r22, 0x23	; 35
    2976:	74 e0       	ldi	r23, 0x04	; 4
    2978:	80 e4       	ldi	r24, 0x40	; 64
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom(&uPeriodoVedaPID_Eeprom_BK, &uPeriodoVedaPID);
    2980:	66 e5       	ldi	r22, 0x56	; 86
    2982:	74 e0       	ldi	r23, 0x04	; 4
    2984:	82 e4       	ldi	r24, 0x42	; 66
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom(&uPeriodoVedaCaudal_Eeprom_BK, &uPeriodoVedaCaudal);
    298c:	6d e1       	ldi	r22, 0x1D	; 29
    298e:	74 e0       	ldi	r23, 0x04	; 4
    2990:	84 e4       	ldi	r24, 0x44	; 68
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>

		Escribir_Checksum_Eeprom (GRUPO_PID);
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
	}
}
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	08 95       	ret

000029a8 <Escribir_Checksum_Eeprom>:

/*****************************************************************************
* Actualiza en checksum del original y de la copia de la eeprom
*****************************************************************************/

void Escribir_Checksum_Eeprom (char chGrupo) {
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <Escribir_Checksum_Eeprom+0x6>
    29ae:	1f 92       	push	r1
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int uChecksum;

//	sprintf (chBufferTx_USART0, "\n\r%S %d\n\r", (wchar_t*)numeroGrupo_MSG, chGrupo);
//	Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);

	if ((chGrupo == GRUPO_PID)||(chGrupo == GRUPO_TODOS)) { /* -0- */
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	88 23       	and	r24, r24
    29ba:	21 f0       	breq	.+8      	; 0x29c4 <Escribir_Checksum_Eeprom+0x1c>
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	84 30       	cpi	r24, 0x04	; 4
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <Escribir_Checksum_Eeprom+0x1c>
    29c2:	77 c0       	rjmp	.+238    	; 0x2ab2 <Escribir_Checksum_Eeprom+0x10a>
		uChecksum = Float_a_Checksum (&flPIDkP);
    29c4:	80 e5       	ldi	r24, 0x50	; 80
    29c6:	94 e0       	ldi	r25, 0x04	; 4
    29c8:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    29cc:	9a 83       	std	Y+2, r25	; 0x02
    29ce:	89 83       	std	Y+1, r24	; 0x01
		uChecksum += Float_a_Checksum(&flPIDkI);
    29d0:	8c e4       	ldi	r24, 0x4C	; 76
    29d2:	94 e0       	ldi	r25, 0x04	; 4
    29d4:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    29d8:	9c 01       	movw	r18, r24
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	9a 81       	ldd	r25, Y+2	; 0x02
    29de:	82 0f       	add	r24, r18
    29e0:	93 1f       	adc	r25, r19
    29e2:	9a 83       	std	Y+2, r25	; 0x02
    29e4:	89 83       	std	Y+1, r24	; 0x01
		uChecksum += Float_a_Checksum(&flPIDkD);
    29e6:	84 e4       	ldi	r24, 0x44	; 68
    29e8:	94 e0       	ldi	r25, 0x04	; 4
    29ea:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    29ee:	9c 01       	movw	r18, r24
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	9a 81       	ldd	r25, Y+2	; 0x02
    29f4:	82 0f       	add	r24, r18
    29f6:	93 1f       	adc	r25, r19
    29f8:	9a 83       	std	Y+2, r25	; 0x02
    29fa:	89 83       	std	Y+1, r24	; 0x01
		uChecksum += Float_a_Checksum(&flPIDintMax);
    29fc:	89 e1       	ldi	r24, 0x19	; 25
    29fe:	94 e0       	ldi	r25, 0x04	; 4
    2a00:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    2a04:	9c 01       	movw	r18, r24
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	82 0f       	add	r24, r18
    2a0c:	93 1f       	adc	r25, r19
    2a0e:	9a 83       	std	Y+2, r25	; 0x02
    2a10:	89 83       	std	Y+1, r24	; 0x01
		uChecksum += Float_a_Checksum(&flVariacionCaudalSetP);
    2a12:	88 e5       	ldi	r24, 0x58	; 88
    2a14:	94 e0       	ldi	r25, 0x04	; 4
    2a16:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    2a1a:	9c 01       	movw	r18, r24
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a20:	82 0f       	add	r24, r18
    2a22:	93 1f       	adc	r25, r19
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01
		uChecksum += Float_a_Checksum(&flEscalaVariacionCaudal);
    2a28:	88 e4       	ldi	r24, 0x48	; 72
    2a2a:	94 e0       	ldi	r25, 0x04	; 4
    2a2c:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    2a30:	9c 01       	movw	r18, r24
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	9a 81       	ldd	r25, Y+2	; 0x02
    2a36:	82 0f       	add	r24, r18
    2a38:	93 1f       	adc	r25, r19
    2a3a:	9a 83       	std	Y+2, r25	; 0x02
    2a3c:	89 83       	std	Y+1, r24	; 0x01
		uChecksum += Float_a_Checksum(&flCaudalEscalaKsPID);
    2a3e:	8c e3       	ldi	r24, 0x3C	; 60
    2a40:	94 e0       	ldi	r25, 0x04	; 4
    2a42:	0e 94 5f 15 	call	0x2abe	; 0x2abe <Float_a_Checksum>
    2a46:	9c 01       	movw	r18, r24
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4c:	82 0f       	add	r24, r18
    2a4e:	93 1f       	adc	r25, r19
    2a50:	9a 83       	std	Y+2, r25	; 0x02
    2a52:	89 83       	std	Y+1, r24	; 0x01
		uChecksum += UnsignedInt_a_Checksum(&uPeriodoPID);
    2a54:	83 e2       	ldi	r24, 0x23	; 35
    2a56:	94 e0       	ldi	r25, 0x04	; 4
    2a58:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UnsignedInt_a_Checksum>
    2a5c:	9c 01       	movw	r18, r24
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	82 0f       	add	r24, r18
    2a64:	93 1f       	adc	r25, r19
    2a66:	9a 83       	std	Y+2, r25	; 0x02
    2a68:	89 83       	std	Y+1, r24	; 0x01
		uChecksum += UnsignedInt_a_Checksum(&uPeriodoVedaPID);
    2a6a:	86 e5       	ldi	r24, 0x56	; 86
    2a6c:	94 e0       	ldi	r25, 0x04	; 4
    2a6e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UnsignedInt_a_Checksum>
    2a72:	9c 01       	movw	r18, r24
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	9a 81       	ldd	r25, Y+2	; 0x02
    2a78:	82 0f       	add	r24, r18
    2a7a:	93 1f       	adc	r25, r19
    2a7c:	9a 83       	std	Y+2, r25	; 0x02
    2a7e:	89 83       	std	Y+1, r24	; 0x01
		uChecksum += UnsignedInt_a_Checksum(&uPeriodoVedaCaudal);
    2a80:	8d e1       	ldi	r24, 0x1D	; 29
    2a82:	94 e0       	ldi	r25, 0x04	; 4
    2a84:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <UnsignedInt_a_Checksum>
    2a88:	9c 01       	movw	r18, r24
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8e:	82 0f       	add	r24, r18
    2a90:	93 1f       	adc	r25, r19
    2a92:	9a 83       	std	Y+2, r25	; 0x02
    2a94:	89 83       	std	Y+1, r24	; 0x01

		UnsignedInt_a_Eeprom (&uChecksumPID_Eeprom, &uChecksum);
    2a96:	ce 01       	movw	r24, r28
    2a98:	01 96       	adiw	r24, 0x01	; 1
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	82 e2       	ldi	r24, 0x22	; 34
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom (&uChecksumPID_Eeprom_BK, &uChecksum);
    2aa4:	ce 01       	movw	r24, r28
    2aa6:	01 96       	adiw	r24, 0x01	; 1
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	86 e4       	ldi	r24, 0x46	; 70
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
	}
}
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	df 91       	pop	r29
    2aba:	cf 91       	pop	r28
    2abc:	08 95       	ret

00002abe <Float_a_Checksum>:

/*****************************************************************************
* Calcula el checksum de un float
*****************************************************************************/

unsigned int Float_a_Checksum (float *flDatoPtr) {
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <Float_a_Checksum+0x6>
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <Float_a_Checksum+0x8>
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <Float_a_Checksum+0xa>
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	9e 83       	std	Y+6, r25	; 0x06
    2ace:	8d 83       	std	Y+5, r24	; 0x05
	wdt_reset();
    2ad0:	a8 95       	wdr

	long *lDatoPtr = (long *) flDatoPtr;
    2ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad6:	9a 83       	std	Y+2, r25	; 0x02
    2ad8:	89 83       	std	Y+1, r24	; 0x01
	unsigned int CRC;

	CRC = (unsigned int)((*lDatoPtr >> 24) & BYTE_MASK);
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ade:	fc 01       	movw	r30, r24
    2ae0:	80 81       	ld	r24, Z
    2ae2:	91 81       	ldd	r25, Z+1	; 0x01
    2ae4:	a2 81       	ldd	r26, Z+2	; 0x02
    2ae6:	b3 81       	ldd	r27, Z+3	; 0x03
    2ae8:	8b 2f       	mov	r24, r27
    2aea:	bb 27       	eor	r27, r27
    2aec:	87 fd       	sbrc	r24, 7
    2aee:	b0 95       	com	r27
    2af0:	9b 2f       	mov	r25, r27
    2af2:	ab 2f       	mov	r26, r27
    2af4:	99 27       	eor	r25, r25
    2af6:	9c 83       	std	Y+4, r25	; 0x04
    2af8:	8b 83       	std	Y+3, r24	; 0x03
	CRC += (unsigned int)((*lDatoPtr >> 16) & BYTE_MASK);
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	9a 81       	ldd	r25, Y+2	; 0x02
    2afe:	fc 01       	movw	r30, r24
    2b00:	80 81       	ld	r24, Z
    2b02:	91 81       	ldd	r25, Z+1	; 0x01
    2b04:	a2 81       	ldd	r26, Z+2	; 0x02
    2b06:	b3 81       	ldd	r27, Z+3	; 0x03
    2b08:	cd 01       	movw	r24, r26
    2b0a:	bb 27       	eor	r27, r27
    2b0c:	97 fd       	sbrc	r25, 7
    2b0e:	b0 95       	com	r27
    2b10:	ab 2f       	mov	r26, r27
    2b12:	99 27       	eor	r25, r25
    2b14:	2b 81       	ldd	r18, Y+3	; 0x03
    2b16:	3c 81       	ldd	r19, Y+4	; 0x04
    2b18:	82 0f       	add	r24, r18
    2b1a:	93 1f       	adc	r25, r19
    2b1c:	9c 83       	std	Y+4, r25	; 0x04
    2b1e:	8b 83       	std	Y+3, r24	; 0x03
	CRC += (unsigned int)((*lDatoPtr >> 8) & BYTE_MASK);
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
    2b22:	9a 81       	ldd	r25, Y+2	; 0x02
    2b24:	fc 01       	movw	r30, r24
    2b26:	80 81       	ld	r24, Z
    2b28:	91 81       	ldd	r25, Z+1	; 0x01
    2b2a:	a2 81       	ldd	r26, Z+2	; 0x02
    2b2c:	b3 81       	ldd	r27, Z+3	; 0x03
    2b2e:	89 2f       	mov	r24, r25
    2b30:	9a 2f       	mov	r25, r26
    2b32:	ab 2f       	mov	r26, r27
    2b34:	bb 27       	eor	r27, r27
    2b36:	a7 fd       	sbrc	r26, 7
    2b38:	ba 95       	dec	r27
    2b3a:	99 27       	eor	r25, r25
    2b3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b3e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b40:	82 0f       	add	r24, r18
    2b42:	93 1f       	adc	r25, r19
    2b44:	9c 83       	std	Y+4, r25	; 0x04
    2b46:	8b 83       	std	Y+3, r24	; 0x03
	CRC += (unsigned int)((*lDatoPtr) & BYTE_MASK);
    2b48:	89 81       	ldd	r24, Y+1	; 0x01
    2b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	80 81       	ld	r24, Z
    2b50:	91 81       	ldd	r25, Z+1	; 0x01
    2b52:	a2 81       	ldd	r26, Z+2	; 0x02
    2b54:	b3 81       	ldd	r27, Z+3	; 0x03
    2b56:	99 27       	eor	r25, r25
    2b58:	2b 81       	ldd	r18, Y+3	; 0x03
    2b5a:	3c 81       	ldd	r19, Y+4	; 0x04
    2b5c:	82 0f       	add	r24, r18
    2b5e:	93 1f       	adc	r25, r19
    2b60:	9c 83       	std	Y+4, r25	; 0x04
    2b62:	8b 83       	std	Y+3, r24	; 0x03

	return CRC;
    2b64:	8b 81       	ldd	r24, Y+3	; 0x03
    2b66:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2b68:	26 96       	adiw	r28, 0x06	; 6
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	08 95       	ret

00002b7a <UnsignedInt_a_Checksum>:

/*****************************************************************************
* Calcula el checksum de un unsigned int
*****************************************************************************/

unsigned int UnsignedInt_a_Checksum (unsigned int *uDatoPtr) {
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	00 d0       	rcall	.+0      	; 0x2b80 <UnsignedInt_a_Checksum+0x6>
    2b80:	00 d0       	rcall	.+0      	; 0x2b82 <UnsignedInt_a_Checksum+0x8>
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	9c 83       	std	Y+4, r25	; 0x04
    2b88:	8b 83       	std	Y+3, r24	; 0x03
	wdt_reset();
    2b8a:	a8 95       	wdr

	unsigned int CRC;

	CRC = (*uDatoPtr >> 8) & BYTE_MASK;
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b90:	fc 01       	movw	r30, r24
    2b92:	80 81       	ld	r24, Z
    2b94:	91 81       	ldd	r25, Z+1	; 0x01
    2b96:	89 2f       	mov	r24, r25
    2b98:	99 27       	eor	r25, r25
    2b9a:	9a 83       	std	Y+2, r25	; 0x02
    2b9c:	89 83       	std	Y+1, r24	; 0x01
	CRC += *uDatoPtr & BYTE_MASK;
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	80 81       	ld	r24, Z
    2ba6:	91 81       	ldd	r25, Z+1	; 0x01
    2ba8:	99 27       	eor	r25, r25
    2baa:	29 81       	ldd	r18, Y+1	; 0x01
    2bac:	3a 81       	ldd	r19, Y+2	; 0x02
    2bae:	82 0f       	add	r24, r18
    2bb0:	93 1f       	adc	r25, r19
    2bb2:	9a 83       	std	Y+2, r25	; 0x02
    2bb4:	89 83       	std	Y+1, r24	; 0x01

	return CRC;
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	08 95       	ret

00002bc8 <Char_a_Checksum>:

/*****************************************************************************
* Calcula el checksum de un char
*****************************************************************************/

unsigned int Char_a_Checksum (char *chDatoPtr) {
    2bc8:	cf 93       	push	r28
    2bca:	df 93       	push	r29
    2bcc:	00 d0       	rcall	.+0      	; 0x2bce <Char_a_Checksum+0x6>
    2bce:	00 d0       	rcall	.+0      	; 0x2bd0 <Char_a_Checksum+0x8>
    2bd0:	00 d0       	rcall	.+0      	; 0x2bd2 <Char_a_Checksum+0xa>
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	9e 83       	std	Y+6, r25	; 0x06
    2bd8:	8d 83       	std	Y+5, r24	; 0x05
	wdt_reset();
    2bda:	a8 95       	wdr

	unsigned int *uDatoPtr = (unsigned int *) chDatoPtr;
    2bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bde:	9e 81       	ldd	r25, Y+6	; 0x06
    2be0:	9a 83       	std	Y+2, r25	; 0x02
    2be2:	89 83       	std	Y+1, r24	; 0x01
	unsigned int CRC;

	CRC = *uDatoPtr & BYTE_MASK;
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	9a 81       	ldd	r25, Y+2	; 0x02
    2be8:	fc 01       	movw	r30, r24
    2bea:	80 81       	ld	r24, Z
    2bec:	91 81       	ldd	r25, Z+1	; 0x01
    2bee:	99 27       	eor	r25, r25
    2bf0:	9c 83       	std	Y+4, r25	; 0x04
    2bf2:	8b 83       	std	Y+3, r24	; 0x03

	return CRC;
    2bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf6:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2bf8:	26 96       	adiw	r28, 0x06	; 6
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	08 95       	ret

00002c0a <Float_a_Eeprom>:

/*****************************************************************************
* Funcion de escritura de un float a la eeprom
*****************************************************************************/

void Float_a_Eeprom (float *flEepromPtr, float *flDatoEscritoPtr) {
    2c0a:	cf 93       	push	r28
    2c0c:	df 93       	push	r29
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	2a 97       	sbiw	r28, 0x0a	; 10
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	de bf       	out	0x3e, r29	; 62
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	cd bf       	out	0x3d, r28	; 61
    2c1e:	98 87       	std	Y+8, r25	; 0x08
    2c20:	8f 83       	std	Y+7, r24	; 0x07
    2c22:	7a 87       	std	Y+10, r23	; 0x0a
    2c24:	69 87       	std	Y+9, r22	; 0x09
	int i = 0;
    2c26:	1a 82       	std	Y+2, r1	; 0x02
    2c28:	19 82       	std	Y+1, r1	; 0x01
	float flDatoLeido;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    2c2a:	4c c0       	rjmp	.+152    	; 0x2cc4 <Float_a_Eeprom+0xba>
		wdt_reset();
    2c2c:	a8 95       	wdr
		eeprom_busy_wait ();
    2c2e:	8f e3       	ldi	r24, 0x3F	; 63
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	fc 01       	movw	r30, r24
    2c34:	80 81       	ld	r24, Z
    2c36:	88 2f       	mov	r24, r24
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	82 70       	andi	r24, 0x02	; 2
    2c3c:	99 27       	eor	r25, r25
    2c3e:	89 2b       	or	r24, r25
    2c40:	b1 f7       	brne	.-20     	; 0x2c2e <Float_a_Eeprom+0x24>
		cli();
    2c42:	f8 94       	cli
		eeprom_write_float (flEepromPtr, *flDatoEscritoPtr);
    2c44:	89 85       	ldd	r24, Y+9	; 0x09
    2c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c48:	fc 01       	movw	r30, r24
    2c4a:	80 81       	ld	r24, Z
    2c4c:	91 81       	ldd	r25, Z+1	; 0x01
    2c4e:	a2 81       	ldd	r26, Z+2	; 0x02
    2c50:	b3 81       	ldd	r27, Z+3	; 0x03
    2c52:	2f 81       	ldd	r18, Y+7	; 0x07
    2c54:	38 85       	ldd	r19, Y+8	; 0x08
    2c56:	ac 01       	movw	r20, r24
    2c58:	bd 01       	movw	r22, r26
    2c5a:	c9 01       	movw	r24, r18
    2c5c:	0e 94 14 5e 	call	0xbc28	; 0xbc28 <eeprom_write_dword>
		sei();
    2c60:	78 94       	sei
		eeprom_busy_wait ();
    2c62:	8f e3       	ldi	r24, 0x3F	; 63
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	fc 01       	movw	r30, r24
    2c68:	80 81       	ld	r24, Z
    2c6a:	88 2f       	mov	r24, r24
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	82 70       	andi	r24, 0x02	; 2
    2c70:	99 27       	eor	r25, r25
    2c72:	89 2b       	or	r24, r25
    2c74:	b1 f7       	brne	.-20     	; 0x2c62 <Float_a_Eeprom+0x58>
		cli();
    2c76:	f8 94       	cli
		flDatoLeido = eeprom_read_float (flEepromPtr);
    2c78:	8f 81       	ldd	r24, Y+7	; 0x07
    2c7a:	98 85       	ldd	r25, Y+8	; 0x08
    2c7c:	0e 94 fa 5d 	call	0xbbf4	; 0xbbf4 <eeprom_read_dword>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	8b 83       	std	Y+3, r24	; 0x03
    2c86:	9c 83       	std	Y+4, r25	; 0x04
    2c88:	ad 83       	std	Y+5, r26	; 0x05
    2c8a:	be 83       	std	Y+6, r27	; 0x06
		sei();
    2c8c:	78 94       	sei
		(flDatoLeido == *flDatoEscritoPtr) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
    2c8e:	89 85       	ldd	r24, Y+9	; 0x09
    2c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c92:	fc 01       	movw	r30, r24
    2c94:	80 81       	ld	r24, Z
    2c96:	91 81       	ldd	r25, Z+1	; 0x01
    2c98:	a2 81       	ldd	r26, Z+2	; 0x02
    2c9a:	b3 81       	ldd	r27, Z+3	; 0x03
    2c9c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c9e:	3c 81       	ldd	r19, Y+4	; 0x04
    2ca0:	4d 81       	ldd	r20, Y+5	; 0x05
    2ca2:	5e 81       	ldd	r21, Y+6	; 0x06
    2ca4:	bc 01       	movw	r22, r24
    2ca6:	cd 01       	movw	r24, r26
    2ca8:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    2cac:	88 23       	and	r24, r24
    2cae:	29 f4       	brne	.+10     	; 0x2cba <Float_a_Eeprom+0xb0>
    2cb0:	85 e6       	ldi	r24, 0x65	; 101
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	9a 83       	std	Y+2, r25	; 0x02
    2cb6:	89 83       	std	Y+1, r24	; 0x01
    2cb8:	05 c0       	rjmp	.+10     	; 0x2cc4 <Float_a_Eeprom+0xba>
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	9a 83       	std	Y+2, r25	; 0x02
    2cc2:	89 83       	std	Y+1, r24	; 0x01

void Float_a_Eeprom (float *flEepromPtr, float *flDatoEscritoPtr) {
	int i = 0;
	float flDatoLeido;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc8:	84 36       	cpi	r24, 0x64	; 100
    2cca:	91 05       	cpc	r25, r1
    2ccc:	0c f4       	brge	.+2      	; 0x2cd0 <Float_a_Eeprom+0xc6>
    2cce:	ae cf       	rjmp	.-164    	; 0x2c2c <Float_a_Eeprom+0x22>
		flDatoLeido = eeprom_read_float (flEepromPtr);
		sei();
		(flDatoLeido == *flDatoEscritoPtr) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
	}

	EEAR = (uint16_t) &flDireccionVaciaEeprom;
    2cd0:	81 e4       	ldi	r24, 0x41	; 65
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	28 e4       	ldi	r18, 0x48	; 72
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	fc 01       	movw	r30, r24
    2cda:	31 83       	std	Z+1, r19	; 0x01
    2cdc:	20 83       	st	Z, r18
}
    2cde:	2a 96       	adiw	r28, 0x0a	; 10
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	f8 94       	cli
    2ce4:	de bf       	out	0x3e, r29	; 62
    2ce6:	0f be       	out	0x3f, r0	; 63
    2ce8:	cd bf       	out	0x3d, r28	; 61
    2cea:	df 91       	pop	r29
    2cec:	cf 91       	pop	r28
    2cee:	08 95       	ret

00002cf0 <Eeprom_a_Float>:

/*****************************************************************************
* Funcion de lectura de un float de la eeprom
*****************************************************************************/

void Eeprom_a_Float (float *flEepromPtr, float *flDatoLeidoPtr) {
    2cf0:	cf 93       	push	r28
    2cf2:	df 93       	push	r29
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
    2cf8:	2a 97       	sbiw	r28, 0x0a	; 10
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	f8 94       	cli
    2cfe:	de bf       	out	0x3e, r29	; 62
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	cd bf       	out	0x3d, r28	; 61
    2d04:	98 87       	std	Y+8, r25	; 0x08
    2d06:	8f 83       	std	Y+7, r24	; 0x07
    2d08:	7a 87       	std	Y+10, r23	; 0x0a
    2d0a:	69 87       	std	Y+9, r22	; 0x09
	int i = 0;
    2d0c:	1a 82       	std	Y+2, r1	; 0x02
    2d0e:	19 82       	std	Y+1, r1	; 0x01
	float flDatoLeido2;

	while (i < CANT_INTENTOS_LECTURA_EEPROM) {
    2d10:	4b c0       	rjmp	.+150    	; 0x2da8 <Eeprom_a_Float+0xb8>
		wdt_reset();
    2d12:	a8 95       	wdr
		eeprom_busy_wait ();
    2d14:	8f e3       	ldi	r24, 0x3F	; 63
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	fc 01       	movw	r30, r24
    2d1a:	80 81       	ld	r24, Z
    2d1c:	88 2f       	mov	r24, r24
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	82 70       	andi	r24, 0x02	; 2
    2d22:	99 27       	eor	r25, r25
    2d24:	89 2b       	or	r24, r25
    2d26:	b1 f7       	brne	.-20     	; 0x2d14 <Eeprom_a_Float+0x24>
		cli();
    2d28:	f8 94       	cli
		*flDatoLeidoPtr = eeprom_read_float (flEepromPtr);
    2d2a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d2c:	98 85       	ldd	r25, Y+8	; 0x08
    2d2e:	0e 94 fa 5d 	call	0xbbf4	; 0xbbf4 <eeprom_read_dword>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	29 85       	ldd	r18, Y+9	; 0x09
    2d38:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d3a:	f9 01       	movw	r30, r18
    2d3c:	80 83       	st	Z, r24
    2d3e:	91 83       	std	Z+1, r25	; 0x01
    2d40:	a2 83       	std	Z+2, r26	; 0x02
    2d42:	b3 83       	std	Z+3, r27	; 0x03
		sei();
    2d44:	78 94       	sei
		eeprom_busy_wait ();
    2d46:	8f e3       	ldi	r24, 0x3F	; 63
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	80 81       	ld	r24, Z
    2d4e:	88 2f       	mov	r24, r24
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	82 70       	andi	r24, 0x02	; 2
    2d54:	99 27       	eor	r25, r25
    2d56:	89 2b       	or	r24, r25
    2d58:	b1 f7       	brne	.-20     	; 0x2d46 <Eeprom_a_Float+0x56>
		cli();
    2d5a:	f8 94       	cli
		flDatoLeido2 = eeprom_read_float (flEepromPtr);
    2d5c:	8f 81       	ldd	r24, Y+7	; 0x07
    2d5e:	98 85       	ldd	r25, Y+8	; 0x08
    2d60:	0e 94 fa 5d 	call	0xbbf4	; 0xbbf4 <eeprom_read_dword>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	8b 83       	std	Y+3, r24	; 0x03
    2d6a:	9c 83       	std	Y+4, r25	; 0x04
    2d6c:	ad 83       	std	Y+5, r26	; 0x05
    2d6e:	be 83       	std	Y+6, r27	; 0x06
		sei();
    2d70:	78 94       	sei
		(*flDatoLeidoPtr == flDatoLeido2) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
    2d72:	89 85       	ldd	r24, Y+9	; 0x09
    2d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d76:	fc 01       	movw	r30, r24
    2d78:	80 81       	ld	r24, Z
    2d7a:	91 81       	ldd	r25, Z+1	; 0x01
    2d7c:	a2 81       	ldd	r26, Z+2	; 0x02
    2d7e:	b3 81       	ldd	r27, Z+3	; 0x03
    2d80:	2b 81       	ldd	r18, Y+3	; 0x03
    2d82:	3c 81       	ldd	r19, Y+4	; 0x04
    2d84:	4d 81       	ldd	r20, Y+5	; 0x05
    2d86:	5e 81       	ldd	r21, Y+6	; 0x06
    2d88:	bc 01       	movw	r22, r24
    2d8a:	cd 01       	movw	r24, r26
    2d8c:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    2d90:	88 23       	and	r24, r24
    2d92:	29 f4       	brne	.+10     	; 0x2d9e <Eeprom_a_Float+0xae>
    2d94:	85 e6       	ldi	r24, 0x65	; 101
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	9a 83       	std	Y+2, r25	; 0x02
    2d9a:	89 83       	std	Y+1, r24	; 0x01
    2d9c:	05 c0       	rjmp	.+10     	; 0x2da8 <Eeprom_a_Float+0xb8>
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	9a 81       	ldd	r25, Y+2	; 0x02
    2da2:	01 96       	adiw	r24, 0x01	; 1
    2da4:	9a 83       	std	Y+2, r25	; 0x02
    2da6:	89 83       	std	Y+1, r24	; 0x01

void Eeprom_a_Float (float *flEepromPtr, float *flDatoLeidoPtr) {
	int i = 0;
	float flDatoLeido2;

	while (i < CANT_INTENTOS_LECTURA_EEPROM) {
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	9a 81       	ldd	r25, Y+2	; 0x02
    2dac:	84 36       	cpi	r24, 0x64	; 100
    2dae:	91 05       	cpc	r25, r1
    2db0:	0c f4       	brge	.+2      	; 0x2db4 <Eeprom_a_Float+0xc4>
    2db2:	af cf       	rjmp	.-162    	; 0x2d12 <Eeprom_a_Float+0x22>
		flDatoLeido2 = eeprom_read_float (flEepromPtr);
		sei();
		(*flDatoLeidoPtr == flDatoLeido2) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
	}

	EEAR = (uint16_t) &flDireccionVaciaEeprom;
    2db4:	81 e4       	ldi	r24, 0x41	; 65
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	28 e4       	ldi	r18, 0x48	; 72
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	31 83       	std	Z+1, r19	; 0x01
    2dc0:	20 83       	st	Z, r18
}
    2dc2:	2a 96       	adiw	r28, 0x0a	; 10
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	de bf       	out	0x3e, r29	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	cd bf       	out	0x3d, r28	; 61
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	08 95       	ret

00002dd4 <UnsignedInt_a_Eeprom>:

/*****************************************************************************
* Funcion de escritura de un unsigned int a la eeprom
*****************************************************************************/

void UnsignedInt_a_Eeprom (unsigned int *uEepromPtr, unsigned int *uDatoEscritoPtr) {
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
    2ddc:	28 97       	sbiw	r28, 0x08	; 8
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	de bf       	out	0x3e, r29	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	cd bf       	out	0x3d, r28	; 61
    2de8:	9e 83       	std	Y+6, r25	; 0x06
    2dea:	8d 83       	std	Y+5, r24	; 0x05
    2dec:	78 87       	std	Y+8, r23	; 0x08
    2dee:	6f 83       	std	Y+7, r22	; 0x07
	int i = 0;
    2df0:	1a 82       	std	Y+2, r1	; 0x02
    2df2:	19 82       	std	Y+1, r1	; 0x01
	unsigned int uDatoLeido;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    2df4:	3d c0       	rjmp	.+122    	; 0x2e70 <UnsignedInt_a_Eeprom+0x9c>
		wdt_reset();
    2df6:	a8 95       	wdr
		eeprom_busy_wait ();
    2df8:	8f e3       	ldi	r24, 0x3F	; 63
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	80 81       	ld	r24, Z
    2e00:	88 2f       	mov	r24, r24
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	82 70       	andi	r24, 0x02	; 2
    2e06:	99 27       	eor	r25, r25
    2e08:	89 2b       	or	r24, r25
    2e0a:	b1 f7       	brne	.-20     	; 0x2df8 <UnsignedInt_a_Eeprom+0x24>
		cli();
    2e0c:	f8 94       	cli
		eeprom_write_word ((uint16_t *) uEepromPtr, *uDatoEscritoPtr);
    2e0e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e10:	98 85       	ldd	r25, Y+8	; 0x08
    2e12:	fc 01       	movw	r30, r24
    2e14:	20 81       	ld	r18, Z
    2e16:	31 81       	ldd	r19, Z+1	; 0x01
    2e18:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1c:	b9 01       	movw	r22, r18
    2e1e:	0e 94 1c 5e 	call	0xbc38	; 0xbc38 <eeprom_write_word>
		sei();
    2e22:	78 94       	sei
		eeprom_busy_wait ();
    2e24:	8f e3       	ldi	r24, 0x3F	; 63
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	fc 01       	movw	r30, r24
    2e2a:	80 81       	ld	r24, Z
    2e2c:	88 2f       	mov	r24, r24
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	82 70       	andi	r24, 0x02	; 2
    2e32:	99 27       	eor	r25, r25
    2e34:	89 2b       	or	r24, r25
    2e36:	b1 f7       	brne	.-20     	; 0x2e24 <UnsignedInt_a_Eeprom+0x50>
		cli();
    2e38:	f8 94       	cli
		uDatoLeido = eeprom_read_word ((uint16_t *) uEepromPtr);
    2e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3e:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <eeprom_read_word>
    2e42:	9c 83       	std	Y+4, r25	; 0x04
    2e44:	8b 83       	std	Y+3, r24	; 0x03
		sei();
    2e46:	78 94       	sei
		(uDatoLeido == *uDatoEscritoPtr) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
    2e48:	8f 81       	ldd	r24, Y+7	; 0x07
    2e4a:	98 85       	ldd	r25, Y+8	; 0x08
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	20 81       	ld	r18, Z
    2e50:	31 81       	ldd	r19, Z+1	; 0x01
    2e52:	8b 81       	ldd	r24, Y+3	; 0x03
    2e54:	9c 81       	ldd	r25, Y+4	; 0x04
    2e56:	28 17       	cp	r18, r24
    2e58:	39 07       	cpc	r19, r25
    2e5a:	29 f4       	brne	.+10     	; 0x2e66 <UnsignedInt_a_Eeprom+0x92>
    2e5c:	85 e6       	ldi	r24, 0x65	; 101
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	9a 83       	std	Y+2, r25	; 0x02
    2e62:	89 83       	std	Y+1, r24	; 0x01
    2e64:	05 c0       	rjmp	.+10     	; 0x2e70 <UnsignedInt_a_Eeprom+0x9c>
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6a:	01 96       	adiw	r24, 0x01	; 1
    2e6c:	9a 83       	std	Y+2, r25	; 0x02
    2e6e:	89 83       	std	Y+1, r24	; 0x01

void UnsignedInt_a_Eeprom (unsigned int *uEepromPtr, unsigned int *uDatoEscritoPtr) {
	int i = 0;
	unsigned int uDatoLeido;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	9a 81       	ldd	r25, Y+2	; 0x02
    2e74:	84 36       	cpi	r24, 0x64	; 100
    2e76:	91 05       	cpc	r25, r1
    2e78:	0c f4       	brge	.+2      	; 0x2e7c <UnsignedInt_a_Eeprom+0xa8>
    2e7a:	bd cf       	rjmp	.-134    	; 0x2df6 <UnsignedInt_a_Eeprom+0x22>
		uDatoLeido = eeprom_read_word ((uint16_t *) uEepromPtr);
		sei();
		(uDatoLeido == *uDatoEscritoPtr) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
	}

	EEAR = (uint16_t) &flDireccionVaciaEeprom;
    2e7c:	81 e4       	ldi	r24, 0x41	; 65
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	28 e4       	ldi	r18, 0x48	; 72
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	fc 01       	movw	r30, r24
    2e86:	31 83       	std	Z+1, r19	; 0x01
    2e88:	20 83       	st	Z, r18
}
    2e8a:	28 96       	adiw	r28, 0x08	; 8
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	de bf       	out	0x3e, r29	; 62
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	df 91       	pop	r29
    2e98:	cf 91       	pop	r28
    2e9a:	08 95       	ret

00002e9c <Eeprom_a_UnsignedInt>:

/*****************************************************************************
* Funcion de lectura de un unsigned int a la eeprom
*****************************************************************************/

void Eeprom_a_UnsignedInt (unsigned int *uEepromPtr, unsigned int *uDatoLeidoPtr) {
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
    2ea4:	28 97       	sbiw	r28, 0x08	; 8
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	f8 94       	cli
    2eaa:	de bf       	out	0x3e, r29	; 62
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	cd bf       	out	0x3d, r28	; 61
    2eb0:	9e 83       	std	Y+6, r25	; 0x06
    2eb2:	8d 83       	std	Y+5, r24	; 0x05
    2eb4:	78 87       	std	Y+8, r23	; 0x08
    2eb6:	6f 83       	std	Y+7, r22	; 0x07
	int i = 0;
    2eb8:	1a 82       	std	Y+2, r1	; 0x02
    2eba:	19 82       	std	Y+1, r1	; 0x01
	unsigned int uDatoLeido2;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    2ebc:	3d c0       	rjmp	.+122    	; 0x2f38 <Eeprom_a_UnsignedInt+0x9c>
		wdt_reset();
    2ebe:	a8 95       	wdr
		eeprom_busy_wait ();
    2ec0:	8f e3       	ldi	r24, 0x3F	; 63
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	80 81       	ld	r24, Z
    2ec8:	88 2f       	mov	r24, r24
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	82 70       	andi	r24, 0x02	; 2
    2ece:	99 27       	eor	r25, r25
    2ed0:	89 2b       	or	r24, r25
    2ed2:	b1 f7       	brne	.-20     	; 0x2ec0 <Eeprom_a_UnsignedInt+0x24>
		cli();
    2ed4:	f8 94       	cli
		*uDatoLeidoPtr = eeprom_read_word ((uint16_t *) uEepromPtr);
    2ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eda:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <eeprom_read_word>
    2ede:	9c 01       	movw	r18, r24
    2ee0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ee2:	98 85       	ldd	r25, Y+8	; 0x08
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	31 83       	std	Z+1, r19	; 0x01
    2ee8:	20 83       	st	Z, r18
		sei();
    2eea:	78 94       	sei
		eeprom_busy_wait ();
    2eec:	8f e3       	ldi	r24, 0x3F	; 63
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	80 81       	ld	r24, Z
    2ef4:	88 2f       	mov	r24, r24
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	82 70       	andi	r24, 0x02	; 2
    2efa:	99 27       	eor	r25, r25
    2efc:	89 2b       	or	r24, r25
    2efe:	b1 f7       	brne	.-20     	; 0x2eec <Eeprom_a_UnsignedInt+0x50>
		cli();
    2f00:	f8 94       	cli
		uDatoLeido2 = eeprom_read_word ((uint16_t *) uEepromPtr);
    2f02:	8d 81       	ldd	r24, Y+5	; 0x05
    2f04:	9e 81       	ldd	r25, Y+6	; 0x06
    2f06:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <eeprom_read_word>
    2f0a:	9c 83       	std	Y+4, r25	; 0x04
    2f0c:	8b 83       	std	Y+3, r24	; 0x03
		sei();
    2f0e:	78 94       	sei
		(*uDatoLeidoPtr == uDatoLeido2) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
    2f10:	8f 81       	ldd	r24, Y+7	; 0x07
    2f12:	98 85       	ldd	r25, Y+8	; 0x08
    2f14:	fc 01       	movw	r30, r24
    2f16:	20 81       	ld	r18, Z
    2f18:	31 81       	ldd	r19, Z+1	; 0x01
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1e:	28 17       	cp	r18, r24
    2f20:	39 07       	cpc	r19, r25
    2f22:	29 f4       	brne	.+10     	; 0x2f2e <Eeprom_a_UnsignedInt+0x92>
    2f24:	85 e6       	ldi	r24, 0x65	; 101
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	9a 83       	std	Y+2, r25	; 0x02
    2f2a:	89 83       	std	Y+1, r24	; 0x01
    2f2c:	05 c0       	rjmp	.+10     	; 0x2f38 <Eeprom_a_UnsignedInt+0x9c>
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
    2f30:	9a 81       	ldd	r25, Y+2	; 0x02
    2f32:	01 96       	adiw	r24, 0x01	; 1
    2f34:	9a 83       	std	Y+2, r25	; 0x02
    2f36:	89 83       	std	Y+1, r24	; 0x01

void Eeprom_a_UnsignedInt (unsigned int *uEepromPtr, unsigned int *uDatoLeidoPtr) {
	int i = 0;
	unsigned int uDatoLeido2;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    2f38:	89 81       	ldd	r24, Y+1	; 0x01
    2f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3c:	84 36       	cpi	r24, 0x64	; 100
    2f3e:	91 05       	cpc	r25, r1
    2f40:	0c f4       	brge	.+2      	; 0x2f44 <Eeprom_a_UnsignedInt+0xa8>
    2f42:	bd cf       	rjmp	.-134    	; 0x2ebe <Eeprom_a_UnsignedInt+0x22>
		uDatoLeido2 = eeprom_read_word ((uint16_t *) uEepromPtr);
		sei();
		(*uDatoLeidoPtr == uDatoLeido2) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
	}

	EEAR = (uint16_t) &flDireccionVaciaEeprom;
    2f44:	81 e4       	ldi	r24, 0x41	; 65
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	28 e4       	ldi	r18, 0x48	; 72
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	31 83       	std	Z+1, r19	; 0x01
    2f50:	20 83       	st	Z, r18
}
    2f52:	28 96       	adiw	r28, 0x08	; 8
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	f8 94       	cli
    2f58:	de bf       	out	0x3e, r29	; 62
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	cd bf       	out	0x3d, r28	; 61
    2f5e:	df 91       	pop	r29
    2f60:	cf 91       	pop	r28
    2f62:	08 95       	ret

00002f64 <Char_a_Eeprom>:

/*****************************************************************************
* Funcion de escritura de un char a la eeprom
*****************************************************************************/

void Char_a_Eeprom (char *chEepromPtr, char *chDatoEscritoPtr) {
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
    2f6c:	27 97       	sbiw	r28, 0x07	; 7
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	f8 94       	cli
    2f72:	de bf       	out	0x3e, r29	; 62
    2f74:	0f be       	out	0x3f, r0	; 63
    2f76:	cd bf       	out	0x3d, r28	; 61
    2f78:	9d 83       	std	Y+5, r25	; 0x05
    2f7a:	8c 83       	std	Y+4, r24	; 0x04
    2f7c:	7f 83       	std	Y+7, r23	; 0x07
    2f7e:	6e 83       	std	Y+6, r22	; 0x06
	int i = 0;
    2f80:	1a 82       	std	Y+2, r1	; 0x02
    2f82:	19 82       	std	Y+1, r1	; 0x01
	char chDatoLeido;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    2f84:	38 c0       	rjmp	.+112    	; 0x2ff6 <Char_a_Eeprom+0x92>
		wdt_reset();
    2f86:	a8 95       	wdr
		eeprom_busy_wait ();
    2f88:	8f e3       	ldi	r24, 0x3F	; 63
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	80 81       	ld	r24, Z
    2f90:	88 2f       	mov	r24, r24
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	82 70       	andi	r24, 0x02	; 2
    2f96:	99 27       	eor	r25, r25
    2f98:	89 2b       	or	r24, r25
    2f9a:	b1 f7       	brne	.-20     	; 0x2f88 <Char_a_Eeprom+0x24>
		cli();
    2f9c:	f8 94       	cli
		eeprom_write_byte ((uint8_t *) chEepromPtr, *chDatoEscritoPtr);
    2f9e:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	20 81       	ld	r18, Z
    2fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa8:	9d 81       	ldd	r25, Y+5	; 0x05
    2faa:	62 2f       	mov	r22, r18
    2fac:	0e 94 06 5e 	call	0xbc0c	; 0xbc0c <eeprom_write_byte>
		sei();
    2fb0:	78 94       	sei
		eeprom_busy_wait ();
    2fb2:	8f e3       	ldi	r24, 0x3F	; 63
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	80 81       	ld	r24, Z
    2fba:	88 2f       	mov	r24, r24
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	82 70       	andi	r24, 0x02	; 2
    2fc0:	99 27       	eor	r25, r25
    2fc2:	89 2b       	or	r24, r25
    2fc4:	b1 f7       	brne	.-20     	; 0x2fb2 <Char_a_Eeprom+0x4e>
		cli();
    2fc6:	f8 94       	cli
		chDatoLeido = eeprom_read_byte ((uint8_t *) chEepromPtr);
    2fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    2fca:	9d 81       	ldd	r25, Y+5	; 0x05
    2fcc:	0e 94 f2 5d 	call	0xbbe4	; 0xbbe4 <eeprom_read_byte>
    2fd0:	8b 83       	std	Y+3, r24	; 0x03
		sei();
    2fd2:	78 94       	sei
		(chDatoLeido == *chDatoEscritoPtr) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
    2fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fd6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fd8:	fc 01       	movw	r30, r24
    2fda:	90 81       	ld	r25, Z
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	98 17       	cp	r25, r24
    2fe0:	29 f4       	brne	.+10     	; 0x2fec <Char_a_Eeprom+0x88>
    2fe2:	85 e6       	ldi	r24, 0x65	; 101
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	9a 83       	std	Y+2, r25	; 0x02
    2fe8:	89 83       	std	Y+1, r24	; 0x01
    2fea:	05 c0       	rjmp	.+10     	; 0x2ff6 <Char_a_Eeprom+0x92>
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff0:	01 96       	adiw	r24, 0x01	; 1
    2ff2:	9a 83       	std	Y+2, r25	; 0x02
    2ff4:	89 83       	std	Y+1, r24	; 0x01

void Char_a_Eeprom (char *chEepromPtr, char *chDatoEscritoPtr) {
	int i = 0;
	char chDatoLeido;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffa:	84 36       	cpi	r24, 0x64	; 100
    2ffc:	91 05       	cpc	r25, r1
    2ffe:	0c f4       	brge	.+2      	; 0x3002 <Char_a_Eeprom+0x9e>
    3000:	c2 cf       	rjmp	.-124    	; 0x2f86 <Char_a_Eeprom+0x22>
		chDatoLeido = eeprom_read_byte ((uint8_t *) chEepromPtr);
		sei();
		(chDatoLeido == *chDatoEscritoPtr) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
	}

	EEAR = (uint16_t) &flDireccionVaciaEeprom;
    3002:	81 e4       	ldi	r24, 0x41	; 65
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	28 e4       	ldi	r18, 0x48	; 72
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	fc 01       	movw	r30, r24
    300c:	31 83       	std	Z+1, r19	; 0x01
    300e:	20 83       	st	Z, r18
}
    3010:	27 96       	adiw	r28, 0x07	; 7
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	f8 94       	cli
    3016:	de bf       	out	0x3e, r29	; 62
    3018:	0f be       	out	0x3f, r0	; 63
    301a:	cd bf       	out	0x3d, r28	; 61
    301c:	df 91       	pop	r29
    301e:	cf 91       	pop	r28
    3020:	08 95       	ret

00003022 <Eeprom_a_Char>:

/*****************************************************************************
* Funcion de lectura de un char de la eeprom
*****************************************************************************/

void Eeprom_a_Char (char *chEepromPtr, char *chDatoLeidoPtr) {
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
    302a:	27 97       	sbiw	r28, 0x07	; 7
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	de bf       	out	0x3e, r29	; 62
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	cd bf       	out	0x3d, r28	; 61
    3036:	9d 83       	std	Y+5, r25	; 0x05
    3038:	8c 83       	std	Y+4, r24	; 0x04
    303a:	7f 83       	std	Y+7, r23	; 0x07
    303c:	6e 83       	std	Y+6, r22	; 0x06
	int i = 0;
    303e:	1a 82       	std	Y+2, r1	; 0x02
    3040:	19 82       	std	Y+1, r1	; 0x01
	char chDatoLeido2;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    3042:	38 c0       	rjmp	.+112    	; 0x30b4 <Eeprom_a_Char+0x92>
		wdt_reset();
    3044:	a8 95       	wdr
		eeprom_busy_wait ();
    3046:	8f e3       	ldi	r24, 0x3F	; 63
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	fc 01       	movw	r30, r24
    304c:	80 81       	ld	r24, Z
    304e:	88 2f       	mov	r24, r24
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	82 70       	andi	r24, 0x02	; 2
    3054:	99 27       	eor	r25, r25
    3056:	89 2b       	or	r24, r25
    3058:	b1 f7       	brne	.-20     	; 0x3046 <Eeprom_a_Char+0x24>
		cli();
    305a:	f8 94       	cli
		*chDatoLeidoPtr = eeprom_read_byte ((uint8_t *) chEepromPtr);
    305c:	8c 81       	ldd	r24, Y+4	; 0x04
    305e:	9d 81       	ldd	r25, Y+5	; 0x05
    3060:	0e 94 f2 5d 	call	0xbbe4	; 0xbbe4 <eeprom_read_byte>
    3064:	28 2f       	mov	r18, r24
    3066:	8e 81       	ldd	r24, Y+6	; 0x06
    3068:	9f 81       	ldd	r25, Y+7	; 0x07
    306a:	fc 01       	movw	r30, r24
    306c:	20 83       	st	Z, r18
		sei();
    306e:	78 94       	sei
		eeprom_busy_wait ();
    3070:	8f e3       	ldi	r24, 0x3F	; 63
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	fc 01       	movw	r30, r24
    3076:	80 81       	ld	r24, Z
    3078:	88 2f       	mov	r24, r24
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	82 70       	andi	r24, 0x02	; 2
    307e:	99 27       	eor	r25, r25
    3080:	89 2b       	or	r24, r25
    3082:	b1 f7       	brne	.-20     	; 0x3070 <Eeprom_a_Char+0x4e>
		cli();
    3084:	f8 94       	cli
		chDatoLeido2 = eeprom_read_byte ((uint8_t *) chEepromPtr);
    3086:	8c 81       	ldd	r24, Y+4	; 0x04
    3088:	9d 81       	ldd	r25, Y+5	; 0x05
    308a:	0e 94 f2 5d 	call	0xbbe4	; 0xbbe4 <eeprom_read_byte>
    308e:	8b 83       	std	Y+3, r24	; 0x03
		sei();
    3090:	78 94       	sei
		(*chDatoLeidoPtr == chDatoLeido2) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
    3092:	8e 81       	ldd	r24, Y+6	; 0x06
    3094:	9f 81       	ldd	r25, Y+7	; 0x07
    3096:	fc 01       	movw	r30, r24
    3098:	90 81       	ld	r25, Z
    309a:	8b 81       	ldd	r24, Y+3	; 0x03
    309c:	98 17       	cp	r25, r24
    309e:	29 f4       	brne	.+10     	; 0x30aa <Eeprom_a_Char+0x88>
    30a0:	85 e6       	ldi	r24, 0x65	; 101
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	9a 83       	std	Y+2, r25	; 0x02
    30a6:	89 83       	std	Y+1, r24	; 0x01
    30a8:	05 c0       	rjmp	.+10     	; 0x30b4 <Eeprom_a_Char+0x92>
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	9a 81       	ldd	r25, Y+2	; 0x02
    30ae:	01 96       	adiw	r24, 0x01	; 1
    30b0:	9a 83       	std	Y+2, r25	; 0x02
    30b2:	89 83       	std	Y+1, r24	; 0x01

void Eeprom_a_Char (char *chEepromPtr, char *chDatoLeidoPtr) {
	int i = 0;
	char chDatoLeido2;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    30b4:	89 81       	ldd	r24, Y+1	; 0x01
    30b6:	9a 81       	ldd	r25, Y+2	; 0x02
    30b8:	84 36       	cpi	r24, 0x64	; 100
    30ba:	91 05       	cpc	r25, r1
    30bc:	0c f4       	brge	.+2      	; 0x30c0 <Eeprom_a_Char+0x9e>
    30be:	c2 cf       	rjmp	.-124    	; 0x3044 <Eeprom_a_Char+0x22>
		chDatoLeido2 = eeprom_read_byte ((uint8_t *) chEepromPtr);
		sei();
		(*chDatoLeidoPtr == chDatoLeido2) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
	}

	EEAR = (uint16_t) &flDireccionVaciaEeprom;
    30c0:	81 e4       	ldi	r24, 0x41	; 65
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	28 e4       	ldi	r18, 0x48	; 72
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	fc 01       	movw	r30, r24
    30ca:	31 83       	std	Z+1, r19	; 0x01
    30cc:	20 83       	st	Z, r18
}
    30ce:	27 96       	adiw	r28, 0x07	; 7
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	f8 94       	cli
    30d4:	de bf       	out	0x3e, r29	; 62
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	cd bf       	out	0x3d, r28	; 61
    30da:	df 91       	pop	r29
    30dc:	cf 91       	pop	r28
    30de:	08 95       	ret

000030e0 <Inicio_Puertos>:

/************************************************************************
* Inicio de los puertos
************************************************************************/

void Inicio_Puertos (void) {	/* Funcion de inicio de los puertos de entrada/salida */
    30e0:	cf 93       	push	r28
    30e2:	df 93       	push	r29
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62

	/* Puerto B */
	DIRECCION_PIN(DIR_CAUDALIMETRO_PORT, CAUDALIMETRO_PIN, ENTRADA);
    30e8:	84 e2       	ldi	r24, 0x24	; 36
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	24 e2       	ldi	r18, 0x24	; 36
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	f9 01       	movw	r30, r18
    30f2:	20 81       	ld	r18, Z
    30f4:	2e 7f       	andi	r18, 0xFE	; 254
    30f6:	fc 01       	movw	r30, r24
    30f8:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_TEMP_AGUA_PORT, TEMP_AGUA_PIN, SALIDA);
    30fa:	84 e2       	ldi	r24, 0x24	; 36
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	24 e2       	ldi	r18, 0x24	; 36
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	f9 01       	movw	r30, r18
    3104:	20 81       	ld	r18, Z
    3106:	24 60       	ori	r18, 0x04	; 4
    3108:	fc 01       	movw	r30, r24
    310a:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_LCD_E_PORT, LCD_E_PIN, SALIDA);
    310c:	84 e2       	ldi	r24, 0x24	; 36
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	24 e2       	ldi	r18, 0x24	; 36
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	f9 01       	movw	r30, r18
    3116:	20 81       	ld	r18, Z
    3118:	22 60       	ori	r18, 0x02	; 2
    311a:	fc 01       	movw	r30, r24
    311c:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_SPI_PORT, SCK_PIN, SALIDA);
    311e:	84 e2       	ldi	r24, 0x24	; 36
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	24 e2       	ldi	r18, 0x24	; 36
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	f9 01       	movw	r30, r18
    3128:	20 81       	ld	r18, Z
    312a:	20 62       	ori	r18, 0x20	; 32
    312c:	fc 01       	movw	r30, r24
    312e:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_SPI_PORT, MOSI_PIN, SALIDA);
    3130:	84 e2       	ldi	r24, 0x24	; 36
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	24 e2       	ldi	r18, 0x24	; 36
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	f9 01       	movw	r30, r18
    313a:	20 81       	ld	r18, Z
    313c:	28 60       	ori	r18, 0x08	; 8
    313e:	fc 01       	movw	r30, r24
    3140:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_SPI_PORT, MISO_PIN, ENTRADA);
    3142:	84 e2       	ldi	r24, 0x24	; 36
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	24 e2       	ldi	r18, 0x24	; 36
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	f9 01       	movw	r30, r18
    314c:	20 81       	ld	r18, Z
    314e:	2f 7e       	andi	r18, 0xEF	; 239
    3150:	fc 01       	movw	r30, r24
    3152:	20 83       	st	Z, r18

	/* Puerto C */
	DIRECCION_PIN(DIR_MOTOR_PP_PORT, MOTOR_PP_PIN_1, SALIDA);
    3154:	87 e2       	ldi	r24, 0x27	; 39
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	27 e2       	ldi	r18, 0x27	; 39
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	f9 01       	movw	r30, r18
    315e:	20 81       	ld	r18, Z
    3160:	21 60       	ori	r18, 0x01	; 1
    3162:	fc 01       	movw	r30, r24
    3164:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_MOTOR_PP_PORT, MOTOR_PP_PIN_2, SALIDA);
    3166:	87 e2       	ldi	r24, 0x27	; 39
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	27 e2       	ldi	r18, 0x27	; 39
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	f9 01       	movw	r30, r18
    3170:	20 81       	ld	r18, Z
    3172:	22 60       	ori	r18, 0x02	; 2
    3174:	fc 01       	movw	r30, r24
    3176:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_MOTOR_PP_PORT, MOTOR_PP_PIN_3, SALIDA);
    3178:	87 e2       	ldi	r24, 0x27	; 39
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	27 e2       	ldi	r18, 0x27	; 39
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	f9 01       	movw	r30, r18
    3182:	20 81       	ld	r18, Z
    3184:	24 60       	ori	r18, 0x04	; 4
    3186:	fc 01       	movw	r30, r24
    3188:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_MOTOR_PP_PORT, MOTOR_PP_PIN_4, SALIDA);
    318a:	87 e2       	ldi	r24, 0x27	; 39
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	27 e2       	ldi	r18, 0x27	; 39
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	f9 01       	movw	r30, r18
    3194:	20 81       	ld	r18, Z
    3196:	28 60       	ori	r18, 0x08	; 8
    3198:	fc 01       	movw	r30, r24
    319a:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_RELAY_GAS_PORT, RELAY_GAS_PIN, SALIDA);
    319c:	87 e2       	ldi	r24, 0x27	; 39
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	27 e2       	ldi	r18, 0x27	; 39
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	f9 01       	movw	r30, r18
    31a6:	20 81       	ld	r18, Z
    31a8:	20 61       	ori	r18, 0x10	; 16
    31aa:	fc 01       	movw	r30, r24
    31ac:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_RELAY_CARGA_PORT, RELAY_CARGA_PIN, SALIDA);
    31ae:	87 e2       	ldi	r24, 0x27	; 39
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	27 e2       	ldi	r18, 0x27	; 39
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	f9 01       	movw	r30, r18
    31b8:	20 81       	ld	r18, Z
    31ba:	20 62       	ori	r18, 0x20	; 32
    31bc:	fc 01       	movw	r30, r24
    31be:	20 83       	st	Z, r18
//	DIRECCION_PIN(DIR_TENSION_BAT_PORT, TENSION_BAT_PIN, ENTRADA);
//	DIRECCION_PIN(DIR_SET_TEMP_PORT, SET_TEMP_PIN, ENTRADA);

	/* Puerto D */
	DIRECCION_PIN(DIR_DISPLAY_PORT, DISPLAY_DB0, SALIDA);
    31c0:	8a e2       	ldi	r24, 0x2A	; 42
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	2a e2       	ldi	r18, 0x2A	; 42
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	f9 01       	movw	r30, r18
    31ca:	20 81       	ld	r18, Z
    31cc:	20 61       	ori	r18, 0x10	; 16
    31ce:	fc 01       	movw	r30, r24
    31d0:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_DISPLAY_PORT, DISPLAY_DB1, SALIDA);
    31d2:	8a e2       	ldi	r24, 0x2A	; 42
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	2a e2       	ldi	r18, 0x2A	; 42
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	f9 01       	movw	r30, r18
    31dc:	20 81       	ld	r18, Z
    31de:	20 62       	ori	r18, 0x20	; 32
    31e0:	fc 01       	movw	r30, r24
    31e2:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_DISPLAY_PORT, DISPLAY_DB2, SALIDA);
    31e4:	8a e2       	ldi	r24, 0x2A	; 42
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	2a e2       	ldi	r18, 0x2A	; 42
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	f9 01       	movw	r30, r18
    31ee:	20 81       	ld	r18, Z
    31f0:	20 64       	ori	r18, 0x40	; 64
    31f2:	fc 01       	movw	r30, r24
    31f4:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_DISPLAY_PORT, DISPLAY_DB3, SALIDA);
    31f6:	8a e2       	ldi	r24, 0x2A	; 42
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	2a e2       	ldi	r18, 0x2A	; 42
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	f9 01       	movw	r30, r18
    3200:	20 81       	ld	r18, Z
    3202:	20 68       	ori	r18, 0x80	; 128
    3204:	fc 01       	movw	r30, r24
    3206:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_DISPLAY_PORT, DISPLAY_RS, SALIDA);
    3208:	8a e2       	ldi	r24, 0x2A	; 42
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	2a e2       	ldi	r18, 0x2A	; 42
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	f9 01       	movw	r30, r18
    3212:	20 81       	ld	r18, Z
    3214:	28 60       	ori	r18, 0x08	; 8
    3216:	fc 01       	movw	r30, r24
    3218:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_DISPLAY_PORT, DISPLAY_RW, SALIDA);
    321a:	8a e2       	ldi	r24, 0x2A	; 42
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	2a e2       	ldi	r18, 0x2A	; 42
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	f9 01       	movw	r30, r18
    3224:	20 81       	ld	r18, Z
    3226:	24 60       	ori	r18, 0x04	; 4
    3228:	fc 01       	movw	r30, r24
    322a:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_SERIAL_PORT, SERIAL_RXD_PIN, ENTRADA);
    322c:	8a e2       	ldi	r24, 0x2A	; 42
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	2a e2       	ldi	r18, 0x2A	; 42
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	f9 01       	movw	r30, r18
    3236:	20 81       	ld	r18, Z
    3238:	2e 7f       	andi	r18, 0xFE	; 254
    323a:	fc 01       	movw	r30, r24
    323c:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_SERIAL_PORT, SERIAL_TXD_PIN, SALIDA);
    323e:	8a e2       	ldi	r24, 0x2A	; 42
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	2a e2       	ldi	r18, 0x2A	; 42
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	f9 01       	movw	r30, r18
    3248:	20 81       	ld	r18, Z
    324a:	22 60       	ori	r18, 0x02	; 2
    324c:	fc 01       	movw	r30, r24
    324e:	20 83       	st	Z, r18
}
    3250:	df 91       	pop	r29
    3252:	cf 91       	pop	r28
    3254:	08 95       	ret

00003256 <Inicio_Timer2>:
/************************************************************************
* Inicio Timer 2
************************************************************************/
/* Inicio el Timer 2 como marcador de inetrvalos de 1ms, modo 2 CTC, con prescaler 64 (CS22:0=100) y OCR2 = fclk/64000-1 = TIMER2_TOP */

void Inicio_Timer2 (void) {
    3256:	cf 93       	push	r28
    3258:	df 93       	push	r29
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
	TCCR2A = (ON<<WGM21)|(OFF<<WGM20)|(OFF<<COM2A1)|(OFF<<COM2A0)|(OFF<<COM2B1)|(OFF<<COM2B0);
    325e:	80 eb       	ldi	r24, 0xB0	; 176
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	22 e0       	ldi	r18, 0x02	; 2
    3264:	fc 01       	movw	r30, r24
    3266:	20 83       	st	Z, r18
	TCCR2B = (OFF<<FOC2A)|(OFF<<FOC2B)|(OFF<<WGM22)|(ON<<CS22)|(OFF<<CS21)|(OFF<<CS20);
    3268:	81 eb       	ldi	r24, 0xB1	; 177
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	24 e0       	ldi	r18, 0x04	; 4
    326e:	fc 01       	movw	r30, r24
    3270:	20 83       	st	Z, r18
	OCR2A = (F_CPU/64000)-1;
    3272:	83 eb       	ldi	r24, 0xB3	; 179
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	29 ef       	ldi	r18, 0xF9	; 249
    3278:	fc 01       	movw	r30, r24
    327a:	20 83       	st	Z, r18
	SET_BIT (TIMSK2, OCIE2A);		/* Habilito la interrupción para cuando OCR2 == TCNT2 */
    327c:	80 e7       	ldi	r24, 0x70	; 112
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	20 e7       	ldi	r18, 0x70	; 112
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	f9 01       	movw	r30, r18
    3286:	20 81       	ld	r18, Z
    3288:	22 60       	ori	r18, 0x02	; 2
    328a:	fc 01       	movw	r30, r24
    328c:	20 83       	st	Z, r18
}
    328e:	df 91       	pop	r29
    3290:	cf 91       	pop	r28
    3292:	08 95       	ret

00003294 <LCDByte>:
#endif

/***********************************************************
 * Escribe un byte al LCD
 ***********************************************************/
void LCDByte(uint8_t c,uint8_t isdata){
    3294:	0f 93       	push	r16
    3296:	1f 93       	push	r17
    3298:	cf 93       	push	r28
    329a:	df 93       	push	r29
    329c:	cd b7       	in	r28, 0x3d	; 61
    329e:	de b7       	in	r29, 0x3e	; 62
    32a0:	c5 5a       	subi	r28, 0xA5	; 165
    32a2:	d1 09       	sbc	r29, r1
    32a4:	0f b6       	in	r0, 0x3f	; 63
    32a6:	f8 94       	cli
    32a8:	de bf       	out	0x3e, r29	; 62
    32aa:	0f be       	out	0x3f, r0	; 63
    32ac:	cd bf       	out	0x3d, r28	; 61
    32ae:	9e 01       	movw	r18, r28
    32b0:	2c 55       	subi	r18, 0x5C	; 92
    32b2:	3f 4f       	sbci	r19, 0xFF	; 255
    32b4:	f9 01       	movw	r30, r18
    32b6:	80 83       	st	Z, r24
    32b8:	ce 01       	movw	r24, r28
    32ba:	8b 55       	subi	r24, 0x5B	; 91
    32bc:	9f 4f       	sbci	r25, 0xFF	; 255
    32be:	fc 01       	movw	r30, r24
    32c0:	60 83       	st	Z, r22
			c|=(1<<(11-i));
		}
	}
	#endif

	hn=c>>4;
    32c2:	ce 01       	movw	r24, r28
    32c4:	8c 55       	subi	r24, 0x5C	; 92
    32c6:	9f 4f       	sbci	r25, 0xFF	; 255
    32c8:	fc 01       	movw	r30, r24
    32ca:	80 81       	ld	r24, Z
    32cc:	82 95       	swap	r24
    32ce:	8f 70       	andi	r24, 0x0F	; 15
    32d0:	89 83       	std	Y+1, r24	; 0x01
	ln=(c & 0x0F);
    32d2:	ce 01       	movw	r24, r28
    32d4:	8c 55       	subi	r24, 0x5C	; 92
    32d6:	9f 4f       	sbci	r25, 0xFF	; 255
    32d8:	fc 01       	movw	r30, r24
    32da:	80 81       	ld	r24, Z
    32dc:	8f 70       	andi	r24, 0x0F	; 15
    32de:	8a 83       	std	Y+2, r24	; 0x02

	if(isdata==0){
    32e0:	ce 01       	movw	r24, r28
    32e2:	8b 55       	subi	r24, 0x5B	; 91
    32e4:	9f 4f       	sbci	r25, 0xFF	; 255
    32e6:	fc 01       	movw	r30, r24
    32e8:	80 81       	ld	r24, Z
    32ea:	88 23       	and	r24, r24
    32ec:	51 f4       	brne	.+20     	; 0x3302 <LCDByte+0x6e>
		CLEAR_RS();
    32ee:	8b e2       	ldi	r24, 0x2B	; 43
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	2b e2       	ldi	r18, 0x2B	; 43
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	f9 01       	movw	r30, r18
    32f8:	20 81       	ld	r18, Z
    32fa:	27 7f       	andi	r18, 0xF7	; 247
    32fc:	fc 01       	movw	r30, r24
    32fe:	20 83       	st	Z, r18
    3300:	09 c0       	rjmp	.+18     	; 0x3314 <LCDByte+0x80>
	}
	else{
		SET_RS();
    3302:	8b e2       	ldi	r24, 0x2B	; 43
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	2b e2       	ldi	r18, 0x2B	; 43
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	f9 01       	movw	r30, r18
    330c:	20 81       	ld	r18, Z
    330e:	28 60       	ori	r18, 0x08	; 8
    3310:	fc 01       	movw	r30, r24
    3312:	20 83       	st	Z, r18
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	a0 e0       	ldi	r26, 0x00	; 0
    331a:	bf e3       	ldi	r27, 0x3F	; 63
    331c:	8c 83       	std	Y+4, r24	; 0x04
    331e:	9d 83       	std	Y+5, r25	; 0x05
    3320:	ae 83       	std	Y+6, r26	; 0x06
    3322:	bf 83       	std	Y+7, r27	; 0x07
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    3324:	2b ea       	ldi	r18, 0xAB	; 171
    3326:	3a ea       	ldi	r19, 0xAA	; 170
    3328:	4a ea       	ldi	r20, 0xAA	; 170
    332a:	50 e4       	ldi	r21, 0x40	; 64
    332c:	6c 81       	ldd	r22, Y+4	; 0x04
    332e:	7d 81       	ldd	r23, Y+5	; 0x05
    3330:	8e 81       	ldd	r24, Y+6	; 0x06
    3332:	9f 81       	ldd	r25, Y+7	; 0x07
    3334:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    3338:	dc 01       	movw	r26, r24
    333a:	cb 01       	movw	r24, r22
    333c:	88 87       	std	Y+8, r24	; 0x08
    333e:	99 87       	std	Y+9, r25	; 0x09
    3340:	aa 87       	std	Y+10, r26	; 0x0a
    3342:	bb 87       	std	Y+11, r27	; 0x0b
	__tmp2 = ((F_CPU) / 4e6) * __us;
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e8       	ldi	r20, 0x80	; 128
    334a:	50 e4       	ldi	r21, 0x40	; 64
    334c:	6c 81       	ldd	r22, Y+4	; 0x04
    334e:	7d 81       	ldd	r23, Y+5	; 0x05
    3350:	8e 81       	ldd	r24, Y+6	; 0x06
    3352:	9f 81       	ldd	r25, Y+7	; 0x07
    3354:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	8c 87       	std	Y+12, r24	; 0x0c
    335e:	9d 87       	std	Y+13, r25	; 0x0d
    3360:	ae 87       	std	Y+14, r26	; 0x0e
    3362:	bf 87       	std	Y+15, r27	; 0x0f
	if (__tmp < 1.0)
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	40 e8       	ldi	r20, 0x80	; 128
    336a:	5f e3       	ldi	r21, 0x3F	; 63
    336c:	68 85       	ldd	r22, Y+8	; 0x08
    336e:	79 85       	ldd	r23, Y+9	; 0x09
    3370:	8a 85       	ldd	r24, Y+10	; 0x0a
    3372:	9b 85       	ldd	r25, Y+11	; 0x0b
    3374:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    3378:	88 23       	and	r24, r24
    337a:	1c f4       	brge	.+6      	; 0x3382 <LCDByte+0xee>
		__ticks = 1;
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	88 8b       	std	Y+16, r24	; 0x10
    3380:	b2 c0       	rjmp	.+356    	; 0x34e6 <LCDByte+0x252>
	else if (__tmp2 > 65535)
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	3f ef       	ldi	r19, 0xFF	; 255
    3386:	4f e7       	ldi	r20, 0x7F	; 127
    3388:	57 e4       	ldi	r21, 0x47	; 71
    338a:	6c 85       	ldd	r22, Y+12	; 0x0c
    338c:	7d 85       	ldd	r23, Y+13	; 0x0d
    338e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3390:	9f 85       	ldd	r25, Y+15	; 0x0f
    3392:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    3396:	18 16       	cp	r1, r24
    3398:	0c f0       	brlt	.+2      	; 0x339c <LCDByte+0x108>
    339a:	7b c0       	rjmp	.+246    	; 0x3492 <LCDByte+0x1fe>
	{
		_delay_ms(__us / 1000.0);
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	4a e7       	ldi	r20, 0x7A	; 122
    33a2:	54 e4       	ldi	r21, 0x44	; 68
    33a4:	6c 81       	ldd	r22, Y+4	; 0x04
    33a6:	7d 81       	ldd	r23, Y+5	; 0x05
    33a8:	8e 81       	ldd	r24, Y+6	; 0x06
    33aa:	9f 81       	ldd	r25, Y+7	; 0x07
    33ac:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	89 8b       	std	Y+17, r24	; 0x11
    33b6:	9a 8b       	std	Y+18, r25	; 0x12
    33b8:	ab 8b       	std	Y+19, r26	; 0x13
    33ba:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	4a e7       	ldi	r20, 0x7A	; 122
    33c2:	55 e4       	ldi	r21, 0x45	; 69
    33c4:	69 89       	ldd	r22, Y+17	; 0x11
    33c6:	7a 89       	ldd	r23, Y+18	; 0x12
    33c8:	8b 89       	ldd	r24, Y+19	; 0x13
    33ca:	9c 89       	ldd	r25, Y+20	; 0x14
    33cc:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	8d 8b       	std	Y+21, r24	; 0x15
    33d6:	9e 8b       	std	Y+22, r25	; 0x16
    33d8:	af 8b       	std	Y+23, r26	; 0x17
    33da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e8       	ldi	r20, 0x80	; 128
    33e2:	5f e3       	ldi	r21, 0x3F	; 63
    33e4:	6d 89       	ldd	r22, Y+21	; 0x15
    33e6:	7e 89       	ldd	r23, Y+22	; 0x16
    33e8:	8f 89       	ldd	r24, Y+23	; 0x17
    33ea:	98 8d       	ldd	r25, Y+24	; 0x18
    33ec:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    33f0:	88 23       	and	r24, r24
    33f2:	2c f4       	brge	.+10     	; 0x33fe <LCDByte+0x16a>
		__ticks = 1;
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	9a 8f       	std	Y+26, r25	; 0x1a
    33fa:	89 8f       	std	Y+25, r24	; 0x19
    33fc:	3f c0       	rjmp	.+126    	; 0x347c <LCDByte+0x1e8>
	else if (__tmp > 65535)
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	3f ef       	ldi	r19, 0xFF	; 255
    3402:	4f e7       	ldi	r20, 0x7F	; 127
    3404:	57 e4       	ldi	r21, 0x47	; 71
    3406:	6d 89       	ldd	r22, Y+21	; 0x15
    3408:	7e 89       	ldd	r23, Y+22	; 0x16
    340a:	8f 89       	ldd	r24, Y+23	; 0x17
    340c:	98 8d       	ldd	r25, Y+24	; 0x18
    340e:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    3412:	18 16       	cp	r1, r24
    3414:	4c f5       	brge	.+82     	; 0x3468 <LCDByte+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	40 e2       	ldi	r20, 0x20	; 32
    341c:	51 e4       	ldi	r21, 0x41	; 65
    341e:	69 89       	ldd	r22, Y+17	; 0x11
    3420:	7a 89       	ldd	r23, Y+18	; 0x12
    3422:	8b 89       	ldd	r24, Y+19	; 0x13
    3424:	9c 89       	ldd	r25, Y+20	; 0x14
    3426:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	bc 01       	movw	r22, r24
    3430:	cd 01       	movw	r24, r26
    3432:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	9a 8f       	std	Y+26, r25	; 0x1a
    343c:	89 8f       	std	Y+25, r24	; 0x19
    343e:	0f c0       	rjmp	.+30     	; 0x345e <LCDByte+0x1ca>
    3440:	80 e9       	ldi	r24, 0x90	; 144
    3442:	91 e0       	ldi	r25, 0x01	; 1
    3444:	9c 8f       	std	Y+28, r25	; 0x1c
    3446:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3448:	8b 8d       	ldd	r24, Y+27	; 0x1b
    344a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	f1 f7       	brne	.-4      	; 0x344c <LCDByte+0x1b8>
    3450:	9c 8f       	std	Y+28, r25	; 0x1c
    3452:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3454:	89 8d       	ldd	r24, Y+25	; 0x19
    3456:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	9a 8f       	std	Y+26, r25	; 0x1a
    345c:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345e:	89 8d       	ldd	r24, Y+25	; 0x19
    3460:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3462:	89 2b       	or	r24, r25
    3464:	69 f7       	brne	.-38     	; 0x3440 <LCDByte+0x1ac>
    3466:	3f c0       	rjmp	.+126    	; 0x34e6 <LCDByte+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3468:	6d 89       	ldd	r22, Y+21	; 0x15
    346a:	7e 89       	ldd	r23, Y+22	; 0x16
    346c:	8f 89       	ldd	r24, Y+23	; 0x17
    346e:	98 8d       	ldd	r25, Y+24	; 0x18
    3470:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	9a 8f       	std	Y+26, r25	; 0x1a
    347a:	89 8f       	std	Y+25, r24	; 0x19
    347c:	89 8d       	ldd	r24, Y+25	; 0x19
    347e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3480:	9e 8f       	std	Y+30, r25	; 0x1e
    3482:	8d 8f       	std	Y+29, r24	; 0x1d
    3484:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3486:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3488:	01 97       	sbiw	r24, 0x01	; 1
    348a:	f1 f7       	brne	.-4      	; 0x3488 <LCDByte+0x1f4>
    348c:	9e 8f       	std	Y+30, r25	; 0x1e
    348e:	8d 8f       	std	Y+29, r24	; 0x1d
    3490:	2a c0       	rjmp	.+84     	; 0x34e6 <LCDByte+0x252>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    3492:	20 e0       	ldi	r18, 0x00	; 0
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	4f e7       	ldi	r20, 0x7F	; 127
    3498:	53 e4       	ldi	r21, 0x43	; 67
    349a:	68 85       	ldd	r22, Y+8	; 0x08
    349c:	79 85       	ldd	r23, Y+9	; 0x09
    349e:	8a 85       	ldd	r24, Y+10	; 0x0a
    34a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    34a2:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    34a6:	18 16       	cp	r1, r24
    34a8:	ac f4       	brge	.+42     	; 0x34d4 <LCDByte+0x240>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    34aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    34ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    34ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    34b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    34b2:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    34b6:	dc 01       	movw	r26, r24
    34b8:	cb 01       	movw	r24, r22
    34ba:	98 a3       	std	Y+32, r25	; 0x20
    34bc:	8f 8f       	std	Y+31, r24	; 0x1f
    34be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34c0:	98 a1       	ldd	r25, Y+32	; 0x20
    34c2:	9a a3       	std	Y+34, r25	; 0x22
    34c4:	89 a3       	std	Y+33, r24	; 0x21
    34c6:	89 a1       	ldd	r24, Y+33	; 0x21
    34c8:	9a a1       	ldd	r25, Y+34	; 0x22
    34ca:	01 97       	sbiw	r24, 0x01	; 1
    34cc:	f1 f7       	brne	.-4      	; 0x34ca <LCDByte+0x236>
    34ce:	9a a3       	std	Y+34, r25	; 0x22
    34d0:	89 a3       	std	Y+33, r24	; 0x21
    34d2:	0f c0       	rjmp	.+30     	; 0x34f2 <LCDByte+0x25e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34d4:	68 85       	ldd	r22, Y+8	; 0x08
    34d6:	79 85       	ldd	r23, Y+9	; 0x09
    34d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    34da:	9b 85       	ldd	r25, Y+11	; 0x0b
    34dc:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	88 8b       	std	Y+16, r24	; 0x10
    34e6:	88 89       	ldd	r24, Y+16	; 0x10
    34e8:	8b a3       	std	Y+35, r24	; 0x23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34ea:	8b a1       	ldd	r24, Y+35	; 0x23
    34ec:	8a 95       	dec	r24
    34ee:	f1 f7       	brne	.-4      	; 0x34ec <LCDByte+0x258>
    34f0:	8b a3       	std	Y+35, r24	; 0x23
	}

	_delay_us(0.500);		//tAS

	SET_E();
    34f2:	85 e2       	ldi	r24, 0x25	; 37
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	25 e2       	ldi	r18, 0x25	; 37
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	f9 01       	movw	r30, r18
    34fc:	20 81       	ld	r18, Z
    34fe:	22 60       	ori	r18, 0x02	; 2
    3500:	fc 01       	movw	r30, r24
    3502:	20 83       	st	Z, r18

	//Send high nibble
	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
    3504:	8b e2       	ldi	r24, 0x2B	; 43
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	fc 01       	movw	r30, r24
    350a:	80 81       	ld	r24, Z
    350c:	28 2f       	mov	r18, r24
    350e:	2f 70       	andi	r18, 0x0F	; 15
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	88 2f       	mov	r24, r24
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	82 95       	swap	r24
    3518:	92 95       	swap	r25
    351a:	90 7f       	andi	r25, 0xF0	; 240
    351c:	98 27       	eor	r25, r24
    351e:	80 7f       	andi	r24, 0xF0	; 240
    3520:	98 27       	eor	r25, r24
    3522:	82 2b       	or	r24, r18
    3524:	8b 83       	std	Y+3, r24	; 0x03
	LCD_DATA_PORT=temp;
    3526:	8b e2       	ldi	r24, 0x2B	; 43
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	2b 81       	ldd	r18, Y+3	; 0x03
    352c:	fc 01       	movw	r30, r24
    352e:	20 83       	st	Z, r18
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	a0 e8       	ldi	r26, 0x80	; 128
    3536:	bf e3       	ldi	r27, 0x3F	; 63
    3538:	8c a3       	std	Y+36, r24	; 0x24
    353a:	9d a3       	std	Y+37, r25	; 0x25
    353c:	ae a3       	std	Y+38, r26	; 0x26
    353e:	bf a3       	std	Y+39, r27	; 0x27
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    3540:	2b ea       	ldi	r18, 0xAB	; 171
    3542:	3a ea       	ldi	r19, 0xAA	; 170
    3544:	4a ea       	ldi	r20, 0xAA	; 170
    3546:	50 e4       	ldi	r21, 0x40	; 64
    3548:	6c a1       	ldd	r22, Y+36	; 0x24
    354a:	7d a1       	ldd	r23, Y+37	; 0x25
    354c:	8e a1       	ldd	r24, Y+38	; 0x26
    354e:	9f a1       	ldd	r25, Y+39	; 0x27
    3550:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	88 a7       	std	Y+40, r24	; 0x28
    355a:	99 a7       	std	Y+41, r25	; 0x29
    355c:	aa a7       	std	Y+42, r26	; 0x2a
    355e:	bb a7       	std	Y+43, r27	; 0x2b
	__tmp2 = ((F_CPU) / 4e6) * __us;
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	40 e8       	ldi	r20, 0x80	; 128
    3566:	50 e4       	ldi	r21, 0x40	; 64
    3568:	6c a1       	ldd	r22, Y+36	; 0x24
    356a:	7d a1       	ldd	r23, Y+37	; 0x25
    356c:	8e a1       	ldd	r24, Y+38	; 0x26
    356e:	9f a1       	ldd	r25, Y+39	; 0x27
    3570:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	8c a7       	std	Y+44, r24	; 0x2c
    357a:	9d a7       	std	Y+45, r25	; 0x2d
    357c:	ae a7       	std	Y+46, r26	; 0x2e
    357e:	bf a7       	std	Y+47, r27	; 0x2f
	if (__tmp < 1.0)
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	40 e8       	ldi	r20, 0x80	; 128
    3586:	5f e3       	ldi	r21, 0x3F	; 63
    3588:	68 a5       	ldd	r22, Y+40	; 0x28
    358a:	79 a5       	ldd	r23, Y+41	; 0x29
    358c:	8a a5       	ldd	r24, Y+42	; 0x2a
    358e:	9b a5       	ldd	r25, Y+43	; 0x2b
    3590:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    3594:	88 23       	and	r24, r24
    3596:	1c f4       	brge	.+6      	; 0x359e <LCDByte+0x30a>
		__ticks = 1;
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	88 ab       	std	Y+48, r24	; 0x30
    359c:	c6 c0       	rjmp	.+396    	; 0x372a <LCDByte+0x496>
	else if (__tmp2 > 65535)
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	3f ef       	ldi	r19, 0xFF	; 255
    35a2:	4f e7       	ldi	r20, 0x7F	; 127
    35a4:	57 e4       	ldi	r21, 0x47	; 71
    35a6:	6c a5       	ldd	r22, Y+44	; 0x2c
    35a8:	7d a5       	ldd	r23, Y+45	; 0x2d
    35aa:	8e a5       	ldd	r24, Y+46	; 0x2e
    35ac:	9f a5       	ldd	r25, Y+47	; 0x2f
    35ae:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    35b2:	18 16       	cp	r1, r24
    35b4:	0c f0       	brlt	.+2      	; 0x35b8 <LCDByte+0x324>
    35b6:	7b c0       	rjmp	.+246    	; 0x36ae <LCDByte+0x41a>
	{
		_delay_ms(__us / 1000.0);
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	4a e7       	ldi	r20, 0x7A	; 122
    35be:	54 e4       	ldi	r21, 0x44	; 68
    35c0:	6c a1       	ldd	r22, Y+36	; 0x24
    35c2:	7d a1       	ldd	r23, Y+37	; 0x25
    35c4:	8e a1       	ldd	r24, Y+38	; 0x26
    35c6:	9f a1       	ldd	r25, Y+39	; 0x27
    35c8:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	89 ab       	std	Y+49, r24	; 0x31
    35d2:	9a ab       	std	Y+50, r25	; 0x32
    35d4:	ab ab       	std	Y+51, r26	; 0x33
    35d6:	bc ab       	std	Y+52, r27	; 0x34

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	4a e7       	ldi	r20, 0x7A	; 122
    35de:	55 e4       	ldi	r21, 0x45	; 69
    35e0:	69 a9       	ldd	r22, Y+49	; 0x31
    35e2:	7a a9       	ldd	r23, Y+50	; 0x32
    35e4:	8b a9       	ldd	r24, Y+51	; 0x33
    35e6:	9c a9       	ldd	r25, Y+52	; 0x34
    35e8:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	8d ab       	std	Y+53, r24	; 0x35
    35f2:	9e ab       	std	Y+54, r25	; 0x36
    35f4:	af ab       	std	Y+55, r26	; 0x37
    35f6:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e8       	ldi	r20, 0x80	; 128
    35fe:	5f e3       	ldi	r21, 0x3F	; 63
    3600:	6d a9       	ldd	r22, Y+53	; 0x35
    3602:	7e a9       	ldd	r23, Y+54	; 0x36
    3604:	8f a9       	ldd	r24, Y+55	; 0x37
    3606:	98 ad       	ldd	r25, Y+56	; 0x38
    3608:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    360c:	88 23       	and	r24, r24
    360e:	2c f4       	brge	.+10     	; 0x361a <LCDByte+0x386>
		__ticks = 1;
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	9a af       	std	Y+58, r25	; 0x3a
    3616:	89 af       	std	Y+57, r24	; 0x39
    3618:	3f c0       	rjmp	.+126    	; 0x3698 <LCDByte+0x404>
	else if (__tmp > 65535)
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	3f ef       	ldi	r19, 0xFF	; 255
    361e:	4f e7       	ldi	r20, 0x7F	; 127
    3620:	57 e4       	ldi	r21, 0x47	; 71
    3622:	6d a9       	ldd	r22, Y+53	; 0x35
    3624:	7e a9       	ldd	r23, Y+54	; 0x36
    3626:	8f a9       	ldd	r24, Y+55	; 0x37
    3628:	98 ad       	ldd	r25, Y+56	; 0x38
    362a:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    362e:	18 16       	cp	r1, r24
    3630:	4c f5       	brge	.+82     	; 0x3684 <LCDByte+0x3f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	40 e2       	ldi	r20, 0x20	; 32
    3638:	51 e4       	ldi	r21, 0x41	; 65
    363a:	69 a9       	ldd	r22, Y+49	; 0x31
    363c:	7a a9       	ldd	r23, Y+50	; 0x32
    363e:	8b a9       	ldd	r24, Y+51	; 0x33
    3640:	9c a9       	ldd	r25, Y+52	; 0x34
    3642:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	bc 01       	movw	r22, r24
    364c:	cd 01       	movw	r24, r26
    364e:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	9a af       	std	Y+58, r25	; 0x3a
    3658:	89 af       	std	Y+57, r24	; 0x39
    365a:	0f c0       	rjmp	.+30     	; 0x367a <LCDByte+0x3e6>
    365c:	80 e9       	ldi	r24, 0x90	; 144
    365e:	91 e0       	ldi	r25, 0x01	; 1
    3660:	9c af       	std	Y+60, r25	; 0x3c
    3662:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3664:	8b ad       	ldd	r24, Y+59	; 0x3b
    3666:	9c ad       	ldd	r25, Y+60	; 0x3c
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <LCDByte+0x3d4>
    366c:	9c af       	std	Y+60, r25	; 0x3c
    366e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3670:	89 ad       	ldd	r24, Y+57	; 0x39
    3672:	9a ad       	ldd	r25, Y+58	; 0x3a
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	9a af       	std	Y+58, r25	; 0x3a
    3678:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    367a:	89 ad       	ldd	r24, Y+57	; 0x39
    367c:	9a ad       	ldd	r25, Y+58	; 0x3a
    367e:	89 2b       	or	r24, r25
    3680:	69 f7       	brne	.-38     	; 0x365c <LCDByte+0x3c8>
    3682:	53 c0       	rjmp	.+166    	; 0x372a <LCDByte+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3684:	6d a9       	ldd	r22, Y+53	; 0x35
    3686:	7e a9       	ldd	r23, Y+54	; 0x36
    3688:	8f a9       	ldd	r24, Y+55	; 0x37
    368a:	98 ad       	ldd	r25, Y+56	; 0x38
    368c:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	9a af       	std	Y+58, r25	; 0x3a
    3696:	89 af       	std	Y+57, r24	; 0x39
    3698:	89 ad       	ldd	r24, Y+57	; 0x39
    369a:	9a ad       	ldd	r25, Y+58	; 0x3a
    369c:	9e af       	std	Y+62, r25	; 0x3e
    369e:	8d af       	std	Y+61, r24	; 0x3d
    36a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    36a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	f1 f7       	brne	.-4      	; 0x36a4 <LCDByte+0x410>
    36a8:	9e af       	std	Y+62, r25	; 0x3e
    36aa:	8d af       	std	Y+61, r24	; 0x3d
    36ac:	3e c0       	rjmp	.+124    	; 0x372a <LCDByte+0x496>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	4f e7       	ldi	r20, 0x7F	; 127
    36b4:	53 e4       	ldi	r21, 0x43	; 67
    36b6:	68 a5       	ldd	r22, Y+40	; 0x28
    36b8:	79 a5       	ldd	r23, Y+41	; 0x29
    36ba:	8a a5       	ldd	r24, Y+42	; 0x2a
    36bc:	9b a5       	ldd	r25, Y+43	; 0x2b
    36be:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    36c2:	18 16       	cp	r1, r24
    36c4:	4c f5       	brge	.+82     	; 0x3718 <LCDByte+0x484>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    36c6:	6c a5       	ldd	r22, Y+44	; 0x2c
    36c8:	7d a5       	ldd	r23, Y+45	; 0x2d
    36ca:	8e a5       	ldd	r24, Y+46	; 0x2e
    36cc:	9f a5       	ldd	r25, Y+47	; 0x2f
    36ce:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	9e 01       	movw	r18, r28
    36d8:	21 5c       	subi	r18, 0xC1	; 193
    36da:	3f 4f       	sbci	r19, 0xFF	; 255
    36dc:	f9 01       	movw	r30, r18
    36de:	91 83       	std	Z+1, r25	; 0x01
    36e0:	80 83       	st	Z, r24
    36e2:	ce 01       	movw	r24, r28
    36e4:	8f 5b       	subi	r24, 0xBF	; 191
    36e6:	9f 4f       	sbci	r25, 0xFF	; 255
    36e8:	9e 01       	movw	r18, r28
    36ea:	21 5c       	subi	r18, 0xC1	; 193
    36ec:	3f 4f       	sbci	r19, 0xFF	; 255
    36ee:	f9 01       	movw	r30, r18
    36f0:	20 81       	ld	r18, Z
    36f2:	31 81       	ldd	r19, Z+1	; 0x01
    36f4:	fc 01       	movw	r30, r24
    36f6:	31 83       	std	Z+1, r19	; 0x01
    36f8:	20 83       	st	Z, r18
    36fa:	ce 01       	movw	r24, r28
    36fc:	8f 5b       	subi	r24, 0xBF	; 191
    36fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3700:	fc 01       	movw	r30, r24
    3702:	80 81       	ld	r24, Z
    3704:	91 81       	ldd	r25, Z+1	; 0x01
    3706:	01 97       	sbiw	r24, 0x01	; 1
    3708:	f1 f7       	brne	.-4      	; 0x3706 <LCDByte+0x472>
    370a:	9e 01       	movw	r18, r28
    370c:	2f 5b       	subi	r18, 0xBF	; 191
    370e:	3f 4f       	sbci	r19, 0xFF	; 255
    3710:	f9 01       	movw	r30, r18
    3712:	91 83       	std	Z+1, r25	; 0x01
    3714:	80 83       	st	Z, r24
    3716:	1c c0       	rjmp	.+56     	; 0x3750 <LCDByte+0x4bc>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3718:	68 a5       	ldd	r22, Y+40	; 0x28
    371a:	79 a5       	ldd	r23, Y+41	; 0x29
    371c:	8a a5       	ldd	r24, Y+42	; 0x2a
    371e:	9b a5       	ldd	r25, Y+43	; 0x2b
    3720:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	88 ab       	std	Y+48, r24	; 0x30
    372a:	ce 01       	movw	r24, r28
    372c:	8d 5b       	subi	r24, 0xBD	; 189
    372e:	9f 4f       	sbci	r25, 0xFF	; 255
    3730:	28 a9       	ldd	r18, Y+48	; 0x30
    3732:	fc 01       	movw	r30, r24
    3734:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3736:	ce 01       	movw	r24, r28
    3738:	8d 5b       	subi	r24, 0xBD	; 189
    373a:	9f 4f       	sbci	r25, 0xFF	; 255
    373c:	fc 01       	movw	r30, r24
    373e:	80 81       	ld	r24, Z
    3740:	28 2f       	mov	r18, r24
    3742:	2a 95       	dec	r18
    3744:	f1 f7       	brne	.-4      	; 0x3742 <LCDByte+0x4ae>
    3746:	ce 01       	movw	r24, r28
    3748:	8d 5b       	subi	r24, 0xBD	; 189
    374a:	9f 4f       	sbci	r25, 0xFF	; 255
    374c:	fc 01       	movw	r30, r24
    374e:	20 83       	st	Z, r18

	_delay_us(1);			//tEH

	//Now data lines are stable pull E low for transmission
	CLEAR_E();
    3750:	85 e2       	ldi	r24, 0x25	; 37
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	25 e2       	ldi	r18, 0x25	; 37
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	f9 01       	movw	r30, r18
    375a:	20 81       	ld	r18, Z
    375c:	2d 7f       	andi	r18, 0xFD	; 253
    375e:	fc 01       	movw	r30, r24
    3760:	20 83       	st	Z, r18
    3762:	9e 01       	movw	r18, r28
    3764:	2c 5b       	subi	r18, 0xBC	; 188
    3766:	3f 4f       	sbci	r19, 0xFF	; 255
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	a0 e8       	ldi	r26, 0x80	; 128
    376e:	bf e3       	ldi	r27, 0x3F	; 63
    3770:	f9 01       	movw	r30, r18
    3772:	80 83       	st	Z, r24
    3774:	91 83       	std	Z+1, r25	; 0x01
    3776:	a2 83       	std	Z+2, r26	; 0x02
    3778:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    377a:	8e 01       	movw	r16, r28
    377c:	08 5b       	subi	r16, 0xB8	; 184
    377e:	1f 4f       	sbci	r17, 0xFF	; 255
    3780:	ce 01       	movw	r24, r28
    3782:	8c 5b       	subi	r24, 0xBC	; 188
    3784:	9f 4f       	sbci	r25, 0xFF	; 255
    3786:	2b ea       	ldi	r18, 0xAB	; 171
    3788:	3a ea       	ldi	r19, 0xAA	; 170
    378a:	4a ea       	ldi	r20, 0xAA	; 170
    378c:	50 e4       	ldi	r21, 0x40	; 64
    378e:	fc 01       	movw	r30, r24
    3790:	60 81       	ld	r22, Z
    3792:	71 81       	ldd	r23, Z+1	; 0x01
    3794:	82 81       	ldd	r24, Z+2	; 0x02
    3796:	93 81       	ldd	r25, Z+3	; 0x03
    3798:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	f8 01       	movw	r30, r16
    37a2:	80 83       	st	Z, r24
    37a4:	91 83       	std	Z+1, r25	; 0x01
    37a6:	a2 83       	std	Z+2, r26	; 0x02
    37a8:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    37aa:	8e 01       	movw	r16, r28
    37ac:	04 5b       	subi	r16, 0xB4	; 180
    37ae:	1f 4f       	sbci	r17, 0xFF	; 255
    37b0:	ce 01       	movw	r24, r28
    37b2:	8c 5b       	subi	r24, 0xBC	; 188
    37b4:	9f 4f       	sbci	r25, 0xFF	; 255
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	40 e8       	ldi	r20, 0x80	; 128
    37bc:	50 e4       	ldi	r21, 0x40	; 64
    37be:	fc 01       	movw	r30, r24
    37c0:	60 81       	ld	r22, Z
    37c2:	71 81       	ldd	r23, Z+1	; 0x01
    37c4:	82 81       	ldd	r24, Z+2	; 0x02
    37c6:	93 81       	ldd	r25, Z+3	; 0x03
    37c8:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	f8 01       	movw	r30, r16
    37d2:	80 83       	st	Z, r24
    37d4:	91 83       	std	Z+1, r25	; 0x01
    37d6:	a2 83       	std	Z+2, r26	; 0x02
    37d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37da:	ce 01       	movw	r24, r28
    37dc:	88 5b       	subi	r24, 0xB8	; 184
    37de:	9f 4f       	sbci	r25, 0xFF	; 255
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	40 e8       	ldi	r20, 0x80	; 128
    37e6:	5f e3       	ldi	r21, 0x3F	; 63
    37e8:	fc 01       	movw	r30, r24
    37ea:	60 81       	ld	r22, Z
    37ec:	71 81       	ldd	r23, Z+1	; 0x01
    37ee:	82 81       	ldd	r24, Z+2	; 0x02
    37f0:	93 81       	ldd	r25, Z+3	; 0x03
    37f2:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    37f6:	88 23       	and	r24, r24
    37f8:	3c f4       	brge	.+14     	; 0x3808 <LCDByte+0x574>
		__ticks = 1;
    37fa:	ce 01       	movw	r24, r28
    37fc:	80 5b       	subi	r24, 0xB0	; 176
    37fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3800:	21 e0       	ldi	r18, 0x01	; 1
    3802:	fc 01       	movw	r30, r24
    3804:	20 83       	st	Z, r18
    3806:	30 c1       	rjmp	.+608    	; 0x3a68 <LCDByte+0x7d4>
	else if (__tmp2 > 65535)
    3808:	ce 01       	movw	r24, r28
    380a:	84 5b       	subi	r24, 0xB4	; 180
    380c:	9f 4f       	sbci	r25, 0xFF	; 255
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	3f ef       	ldi	r19, 0xFF	; 255
    3812:	4f e7       	ldi	r20, 0x7F	; 127
    3814:	57 e4       	ldi	r21, 0x47	; 71
    3816:	fc 01       	movw	r30, r24
    3818:	60 81       	ld	r22, Z
    381a:	71 81       	ldd	r23, Z+1	; 0x01
    381c:	82 81       	ldd	r24, Z+2	; 0x02
    381e:	93 81       	ldd	r25, Z+3	; 0x03
    3820:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    3824:	18 16       	cp	r1, r24
    3826:	0c f0       	brlt	.+2      	; 0x382a <LCDByte+0x596>
    3828:	d1 c0       	rjmp	.+418    	; 0x39cc <LCDByte+0x738>
	{
		_delay_ms(__us / 1000.0);
    382a:	ce 01       	movw	r24, r28
    382c:	8c 5b       	subi	r24, 0xBC	; 188
    382e:	9f 4f       	sbci	r25, 0xFF	; 255
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	4a e7       	ldi	r20, 0x7A	; 122
    3836:	54 e4       	ldi	r21, 0x44	; 68
    3838:	fc 01       	movw	r30, r24
    383a:	60 81       	ld	r22, Z
    383c:	71 81       	ldd	r23, Z+1	; 0x01
    383e:	82 81       	ldd	r24, Z+2	; 0x02
    3840:	93 81       	ldd	r25, Z+3	; 0x03
    3842:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    3846:	dc 01       	movw	r26, r24
    3848:	cb 01       	movw	r24, r22
    384a:	9e 01       	movw	r18, r28
    384c:	2f 5a       	subi	r18, 0xAF	; 175
    384e:	3f 4f       	sbci	r19, 0xFF	; 255
    3850:	f9 01       	movw	r30, r18
    3852:	80 83       	st	Z, r24
    3854:	91 83       	std	Z+1, r25	; 0x01
    3856:	a2 83       	std	Z+2, r26	; 0x02
    3858:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    385a:	8e 01       	movw	r16, r28
    385c:	0b 5a       	subi	r16, 0xAB	; 171
    385e:	1f 4f       	sbci	r17, 0xFF	; 255
    3860:	ce 01       	movw	r24, r28
    3862:	8f 5a       	subi	r24, 0xAF	; 175
    3864:	9f 4f       	sbci	r25, 0xFF	; 255
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	4a e7       	ldi	r20, 0x7A	; 122
    386c:	55 e4       	ldi	r21, 0x45	; 69
    386e:	fc 01       	movw	r30, r24
    3870:	60 81       	ld	r22, Z
    3872:	71 81       	ldd	r23, Z+1	; 0x01
    3874:	82 81       	ldd	r24, Z+2	; 0x02
    3876:	93 81       	ldd	r25, Z+3	; 0x03
    3878:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	f8 01       	movw	r30, r16
    3882:	80 83       	st	Z, r24
    3884:	91 83       	std	Z+1, r25	; 0x01
    3886:	a2 83       	std	Z+2, r26	; 0x02
    3888:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    388a:	ce 01       	movw	r24, r28
    388c:	8b 5a       	subi	r24, 0xAB	; 171
    388e:	9f 4f       	sbci	r25, 0xFF	; 255
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	40 e8       	ldi	r20, 0x80	; 128
    3896:	5f e3       	ldi	r21, 0x3F	; 63
    3898:	fc 01       	movw	r30, r24
    389a:	60 81       	ld	r22, Z
    389c:	71 81       	ldd	r23, Z+1	; 0x01
    389e:	82 81       	ldd	r24, Z+2	; 0x02
    38a0:	93 81       	ldd	r25, Z+3	; 0x03
    38a2:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    38a6:	88 23       	and	r24, r24
    38a8:	4c f4       	brge	.+18     	; 0x38bc <LCDByte+0x628>
		__ticks = 1;
    38aa:	ce 01       	movw	r24, r28
    38ac:	87 5a       	subi	r24, 0xA7	; 167
    38ae:	9f 4f       	sbci	r25, 0xFF	; 255
    38b0:	21 e0       	ldi	r18, 0x01	; 1
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	fc 01       	movw	r30, r24
    38b6:	31 83       	std	Z+1, r19	; 0x01
    38b8:	20 83       	st	Z, r18
    38ba:	6d c0       	rjmp	.+218    	; 0x3996 <LCDByte+0x702>
	else if (__tmp > 65535)
    38bc:	ce 01       	movw	r24, r28
    38be:	8b 5a       	subi	r24, 0xAB	; 171
    38c0:	9f 4f       	sbci	r25, 0xFF	; 255
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	3f ef       	ldi	r19, 0xFF	; 255
    38c6:	4f e7       	ldi	r20, 0x7F	; 127
    38c8:	57 e4       	ldi	r21, 0x47	; 71
    38ca:	fc 01       	movw	r30, r24
    38cc:	60 81       	ld	r22, Z
    38ce:	71 81       	ldd	r23, Z+1	; 0x01
    38d0:	82 81       	ldd	r24, Z+2	; 0x02
    38d2:	93 81       	ldd	r25, Z+3	; 0x03
    38d4:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    38d8:	18 16       	cp	r1, r24
    38da:	0c f0       	brlt	.+2      	; 0x38de <LCDByte+0x64a>
    38dc:	4a c0       	rjmp	.+148    	; 0x3972 <LCDByte+0x6de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38de:	ce 01       	movw	r24, r28
    38e0:	8f 5a       	subi	r24, 0xAF	; 175
    38e2:	9f 4f       	sbci	r25, 0xFF	; 255
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	40 e2       	ldi	r20, 0x20	; 32
    38ea:	51 e4       	ldi	r21, 0x41	; 65
    38ec:	fc 01       	movw	r30, r24
    38ee:	60 81       	ld	r22, Z
    38f0:	71 81       	ldd	r23, Z+1	; 0x01
    38f2:	82 81       	ldd	r24, Z+2	; 0x02
    38f4:	93 81       	ldd	r25, Z+3	; 0x03
    38f6:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	8e 01       	movw	r16, r28
    3900:	07 5a       	subi	r16, 0xA7	; 167
    3902:	1f 4f       	sbci	r17, 0xFF	; 255
    3904:	bc 01       	movw	r22, r24
    3906:	cd 01       	movw	r24, r26
    3908:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	f8 01       	movw	r30, r16
    3912:	91 83       	std	Z+1, r25	; 0x01
    3914:	80 83       	st	Z, r24
    3916:	24 c0       	rjmp	.+72     	; 0x3960 <LCDByte+0x6cc>
    3918:	ce 01       	movw	r24, r28
    391a:	85 5a       	subi	r24, 0xA5	; 165
    391c:	9f 4f       	sbci	r25, 0xFF	; 255
    391e:	20 e9       	ldi	r18, 0x90	; 144
    3920:	31 e0       	ldi	r19, 0x01	; 1
    3922:	fc 01       	movw	r30, r24
    3924:	31 83       	std	Z+1, r19	; 0x01
    3926:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3928:	ce 01       	movw	r24, r28
    392a:	85 5a       	subi	r24, 0xA5	; 165
    392c:	9f 4f       	sbci	r25, 0xFF	; 255
    392e:	fc 01       	movw	r30, r24
    3930:	80 81       	ld	r24, Z
    3932:	91 81       	ldd	r25, Z+1	; 0x01
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	f1 f7       	brne	.-4      	; 0x3934 <LCDByte+0x6a0>
    3938:	9e 01       	movw	r18, r28
    393a:	25 5a       	subi	r18, 0xA5	; 165
    393c:	3f 4f       	sbci	r19, 0xFF	; 255
    393e:	f9 01       	movw	r30, r18
    3940:	91 83       	std	Z+1, r25	; 0x01
    3942:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3944:	ce 01       	movw	r24, r28
    3946:	87 5a       	subi	r24, 0xA7	; 167
    3948:	9f 4f       	sbci	r25, 0xFF	; 255
    394a:	9e 01       	movw	r18, r28
    394c:	27 5a       	subi	r18, 0xA7	; 167
    394e:	3f 4f       	sbci	r19, 0xFF	; 255
    3950:	f9 01       	movw	r30, r18
    3952:	20 81       	ld	r18, Z
    3954:	31 81       	ldd	r19, Z+1	; 0x01
    3956:	21 50       	subi	r18, 0x01	; 1
    3958:	31 09       	sbc	r19, r1
    395a:	fc 01       	movw	r30, r24
    395c:	31 83       	std	Z+1, r19	; 0x01
    395e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3960:	ce 01       	movw	r24, r28
    3962:	87 5a       	subi	r24, 0xA7	; 167
    3964:	9f 4f       	sbci	r25, 0xFF	; 255
    3966:	fc 01       	movw	r30, r24
    3968:	80 81       	ld	r24, Z
    396a:	91 81       	ldd	r25, Z+1	; 0x01
    396c:	89 2b       	or	r24, r25
    396e:	a1 f6       	brne	.-88     	; 0x3918 <LCDByte+0x684>
    3970:	7b c0       	rjmp	.+246    	; 0x3a68 <LCDByte+0x7d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3972:	8e 01       	movw	r16, r28
    3974:	07 5a       	subi	r16, 0xA7	; 167
    3976:	1f 4f       	sbci	r17, 0xFF	; 255
    3978:	ce 01       	movw	r24, r28
    397a:	8b 5a       	subi	r24, 0xAB	; 171
    397c:	9f 4f       	sbci	r25, 0xFF	; 255
    397e:	fc 01       	movw	r30, r24
    3980:	60 81       	ld	r22, Z
    3982:	71 81       	ldd	r23, Z+1	; 0x01
    3984:	82 81       	ldd	r24, Z+2	; 0x02
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    398c:	dc 01       	movw	r26, r24
    398e:	cb 01       	movw	r24, r22
    3990:	f8 01       	movw	r30, r16
    3992:	91 83       	std	Z+1, r25	; 0x01
    3994:	80 83       	st	Z, r24
    3996:	ce 01       	movw	r24, r28
    3998:	83 5a       	subi	r24, 0xA3	; 163
    399a:	9f 4f       	sbci	r25, 0xFF	; 255
    399c:	9e 01       	movw	r18, r28
    399e:	27 5a       	subi	r18, 0xA7	; 167
    39a0:	3f 4f       	sbci	r19, 0xFF	; 255
    39a2:	f9 01       	movw	r30, r18
    39a4:	20 81       	ld	r18, Z
    39a6:	31 81       	ldd	r19, Z+1	; 0x01
    39a8:	fc 01       	movw	r30, r24
    39aa:	31 83       	std	Z+1, r19	; 0x01
    39ac:	20 83       	st	Z, r18
    39ae:	ce 01       	movw	r24, r28
    39b0:	83 5a       	subi	r24, 0xA3	; 163
    39b2:	9f 4f       	sbci	r25, 0xFF	; 255
    39b4:	fc 01       	movw	r30, r24
    39b6:	80 81       	ld	r24, Z
    39b8:	91 81       	ldd	r25, Z+1	; 0x01
    39ba:	01 97       	sbiw	r24, 0x01	; 1
    39bc:	f1 f7       	brne	.-4      	; 0x39ba <LCDByte+0x726>
    39be:	9e 01       	movw	r18, r28
    39c0:	23 5a       	subi	r18, 0xA3	; 163
    39c2:	3f 4f       	sbci	r19, 0xFF	; 255
    39c4:	f9 01       	movw	r30, r18
    39c6:	91 83       	std	Z+1, r25	; 0x01
    39c8:	80 83       	st	Z, r24
    39ca:	4e c0       	rjmp	.+156    	; 0x3a68 <LCDByte+0x7d4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    39cc:	ce 01       	movw	r24, r28
    39ce:	88 5b       	subi	r24, 0xB8	; 184
    39d0:	9f 4f       	sbci	r25, 0xFF	; 255
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	4f e7       	ldi	r20, 0x7F	; 127
    39d8:	53 e4       	ldi	r21, 0x43	; 67
    39da:	fc 01       	movw	r30, r24
    39dc:	60 81       	ld	r22, Z
    39de:	71 81       	ldd	r23, Z+1	; 0x01
    39e0:	82 81       	ldd	r24, Z+2	; 0x02
    39e2:	93 81       	ldd	r25, Z+3	; 0x03
    39e4:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    39e8:	18 16       	cp	r1, r24
    39ea:	6c f5       	brge	.+90     	; 0x3a46 <LCDByte+0x7b2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    39ec:	8e 01       	movw	r16, r28
    39ee:	01 5a       	subi	r16, 0xA1	; 161
    39f0:	1f 4f       	sbci	r17, 0xFF	; 255
    39f2:	ce 01       	movw	r24, r28
    39f4:	84 5b       	subi	r24, 0xB4	; 180
    39f6:	9f 4f       	sbci	r25, 0xFF	; 255
    39f8:	fc 01       	movw	r30, r24
    39fa:	60 81       	ld	r22, Z
    39fc:	71 81       	ldd	r23, Z+1	; 0x01
    39fe:	82 81       	ldd	r24, Z+2	; 0x02
    3a00:	93 81       	ldd	r25, Z+3	; 0x03
    3a02:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    3a06:	dc 01       	movw	r26, r24
    3a08:	cb 01       	movw	r24, r22
    3a0a:	f8 01       	movw	r30, r16
    3a0c:	91 83       	std	Z+1, r25	; 0x01
    3a0e:	80 83       	st	Z, r24
    3a10:	ce 01       	movw	r24, r28
    3a12:	8f 59       	subi	r24, 0x9F	; 159
    3a14:	9f 4f       	sbci	r25, 0xFF	; 255
    3a16:	9e 01       	movw	r18, r28
    3a18:	21 5a       	subi	r18, 0xA1	; 161
    3a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a1c:	f9 01       	movw	r30, r18
    3a1e:	20 81       	ld	r18, Z
    3a20:	31 81       	ldd	r19, Z+1	; 0x01
    3a22:	fc 01       	movw	r30, r24
    3a24:	31 83       	std	Z+1, r19	; 0x01
    3a26:	20 83       	st	Z, r18
    3a28:	ce 01       	movw	r24, r28
    3a2a:	8f 59       	subi	r24, 0x9F	; 159
    3a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a2e:	fc 01       	movw	r30, r24
    3a30:	80 81       	ld	r24, Z
    3a32:	91 81       	ldd	r25, Z+1	; 0x01
    3a34:	01 97       	sbiw	r24, 0x01	; 1
    3a36:	f1 f7       	brne	.-4      	; 0x3a34 <LCDByte+0x7a0>
    3a38:	9e 01       	movw	r18, r28
    3a3a:	2f 59       	subi	r18, 0x9F	; 159
    3a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a3e:	f9 01       	movw	r30, r18
    3a40:	91 83       	std	Z+1, r25	; 0x01
    3a42:	80 83       	st	Z, r24
    3a44:	28 c0       	rjmp	.+80     	; 0x3a96 <LCDByte+0x802>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a46:	8e 01       	movw	r16, r28
    3a48:	00 5b       	subi	r16, 0xB0	; 176
    3a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a4c:	ce 01       	movw	r24, r28
    3a4e:	88 5b       	subi	r24, 0xB8	; 184
    3a50:	9f 4f       	sbci	r25, 0xFF	; 255
    3a52:	fc 01       	movw	r30, r24
    3a54:	60 81       	ld	r22, Z
    3a56:	71 81       	ldd	r23, Z+1	; 0x01
    3a58:	82 81       	ldd	r24, Z+2	; 0x02
    3a5a:	93 81       	ldd	r25, Z+3	; 0x03
    3a5c:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	f8 01       	movw	r30, r16
    3a66:	80 83       	st	Z, r24
    3a68:	ce 01       	movw	r24, r28
    3a6a:	8d 59       	subi	r24, 0x9D	; 157
    3a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a6e:	9e 01       	movw	r18, r28
    3a70:	20 5b       	subi	r18, 0xB0	; 176
    3a72:	3f 4f       	sbci	r19, 0xFF	; 255
    3a74:	f9 01       	movw	r30, r18
    3a76:	20 81       	ld	r18, Z
    3a78:	fc 01       	movw	r30, r24
    3a7a:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a7c:	ce 01       	movw	r24, r28
    3a7e:	8d 59       	subi	r24, 0x9D	; 157
    3a80:	9f 4f       	sbci	r25, 0xFF	; 255
    3a82:	fc 01       	movw	r30, r24
    3a84:	80 81       	ld	r24, Z
    3a86:	28 2f       	mov	r18, r24
    3a88:	2a 95       	dec	r18
    3a8a:	f1 f7       	brne	.-4      	; 0x3a88 <LCDByte+0x7f4>
    3a8c:	ce 01       	movw	r24, r28
    3a8e:	8d 59       	subi	r24, 0x9D	; 157
    3a90:	9f 4f       	sbci	r25, 0xFF	; 255
    3a92:	fc 01       	movw	r30, r24
    3a94:	20 83       	st	Z, r18

	_delay_us(1);

	//Send the lower nibble
	SET_E();
    3a96:	85 e2       	ldi	r24, 0x25	; 37
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	25 e2       	ldi	r18, 0x25	; 37
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	f9 01       	movw	r30, r18
    3aa0:	20 81       	ld	r18, Z
    3aa2:	22 60       	ori	r18, 0x02	; 2
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	20 83       	st	Z, r18

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
    3aa8:	8b e2       	ldi	r24, 0x2B	; 43
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	fc 01       	movw	r30, r24
    3aae:	80 81       	ld	r24, Z
    3ab0:	28 2f       	mov	r18, r24
    3ab2:	2f 70       	andi	r18, 0x0F	; 15
    3ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab6:	88 2f       	mov	r24, r24
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	82 95       	swap	r24
    3abc:	92 95       	swap	r25
    3abe:	90 7f       	andi	r25, 0xF0	; 240
    3ac0:	98 27       	eor	r25, r24
    3ac2:	80 7f       	andi	r24, 0xF0	; 240
    3ac4:	98 27       	eor	r25, r24
    3ac6:	82 2b       	or	r24, r18
    3ac8:	8b 83       	std	Y+3, r24	; 0x03

	LCD_DATA_PORT=temp;
    3aca:	8b e2       	ldi	r24, 0x2B	; 43
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	2b 81       	ldd	r18, Y+3	; 0x03
    3ad0:	fc 01       	movw	r30, r24
    3ad2:	20 83       	st	Z, r18
    3ad4:	9e 01       	movw	r18, r28
    3ad6:	2c 59       	subi	r18, 0x9C	; 156
    3ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    3ada:	80 e0       	ldi	r24, 0x00	; 0
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	a0 e8       	ldi	r26, 0x80	; 128
    3ae0:	bf e3       	ldi	r27, 0x3F	; 63
    3ae2:	f9 01       	movw	r30, r18
    3ae4:	80 83       	st	Z, r24
    3ae6:	91 83       	std	Z+1, r25	; 0x01
    3ae8:	a2 83       	std	Z+2, r26	; 0x02
    3aea:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    3aec:	8e 01       	movw	r16, r28
    3aee:	08 59       	subi	r16, 0x98	; 152
    3af0:	1f 4f       	sbci	r17, 0xFF	; 255
    3af2:	ce 01       	movw	r24, r28
    3af4:	8c 59       	subi	r24, 0x9C	; 156
    3af6:	9f 4f       	sbci	r25, 0xFF	; 255
    3af8:	2b ea       	ldi	r18, 0xAB	; 171
    3afa:	3a ea       	ldi	r19, 0xAA	; 170
    3afc:	4a ea       	ldi	r20, 0xAA	; 170
    3afe:	50 e4       	ldi	r21, 0x40	; 64
    3b00:	fc 01       	movw	r30, r24
    3b02:	60 81       	ld	r22, Z
    3b04:	71 81       	ldd	r23, Z+1	; 0x01
    3b06:	82 81       	ldd	r24, Z+2	; 0x02
    3b08:	93 81       	ldd	r25, Z+3	; 0x03
    3b0a:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	cb 01       	movw	r24, r22
    3b12:	f8 01       	movw	r30, r16
    3b14:	80 83       	st	Z, r24
    3b16:	91 83       	std	Z+1, r25	; 0x01
    3b18:	a2 83       	std	Z+2, r26	; 0x02
    3b1a:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    3b1c:	8e 01       	movw	r16, r28
    3b1e:	04 59       	subi	r16, 0x94	; 148
    3b20:	1f 4f       	sbci	r17, 0xFF	; 255
    3b22:	ce 01       	movw	r24, r28
    3b24:	8c 59       	subi	r24, 0x9C	; 156
    3b26:	9f 4f       	sbci	r25, 0xFF	; 255
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	40 e8       	ldi	r20, 0x80	; 128
    3b2e:	50 e4       	ldi	r21, 0x40	; 64
    3b30:	fc 01       	movw	r30, r24
    3b32:	60 81       	ld	r22, Z
    3b34:	71 81       	ldd	r23, Z+1	; 0x01
    3b36:	82 81       	ldd	r24, Z+2	; 0x02
    3b38:	93 81       	ldd	r25, Z+3	; 0x03
    3b3a:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	f8 01       	movw	r30, r16
    3b44:	80 83       	st	Z, r24
    3b46:	91 83       	std	Z+1, r25	; 0x01
    3b48:	a2 83       	std	Z+2, r26	; 0x02
    3b4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b4c:	ce 01       	movw	r24, r28
    3b4e:	88 59       	subi	r24, 0x98	; 152
    3b50:	9f 4f       	sbci	r25, 0xFF	; 255
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	40 e8       	ldi	r20, 0x80	; 128
    3b58:	5f e3       	ldi	r21, 0x3F	; 63
    3b5a:	fc 01       	movw	r30, r24
    3b5c:	60 81       	ld	r22, Z
    3b5e:	71 81       	ldd	r23, Z+1	; 0x01
    3b60:	82 81       	ldd	r24, Z+2	; 0x02
    3b62:	93 81       	ldd	r25, Z+3	; 0x03
    3b64:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    3b68:	88 23       	and	r24, r24
    3b6a:	3c f4       	brge	.+14     	; 0x3b7a <LCDByte+0x8e6>
		__ticks = 1;
    3b6c:	ce 01       	movw	r24, r28
    3b6e:	80 59       	subi	r24, 0x90	; 144
    3b70:	9f 4f       	sbci	r25, 0xFF	; 255
    3b72:	21 e0       	ldi	r18, 0x01	; 1
    3b74:	fc 01       	movw	r30, r24
    3b76:	20 83       	st	Z, r18
    3b78:	30 c1       	rjmp	.+608    	; 0x3dda <LCDByte+0xb46>
	else if (__tmp2 > 65535)
    3b7a:	ce 01       	movw	r24, r28
    3b7c:	84 59       	subi	r24, 0x94	; 148
    3b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	3f ef       	ldi	r19, 0xFF	; 255
    3b84:	4f e7       	ldi	r20, 0x7F	; 127
    3b86:	57 e4       	ldi	r21, 0x47	; 71
    3b88:	fc 01       	movw	r30, r24
    3b8a:	60 81       	ld	r22, Z
    3b8c:	71 81       	ldd	r23, Z+1	; 0x01
    3b8e:	82 81       	ldd	r24, Z+2	; 0x02
    3b90:	93 81       	ldd	r25, Z+3	; 0x03
    3b92:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    3b96:	18 16       	cp	r1, r24
    3b98:	0c f0       	brlt	.+2      	; 0x3b9c <LCDByte+0x908>
    3b9a:	d1 c0       	rjmp	.+418    	; 0x3d3e <LCDByte+0xaaa>
	{
		_delay_ms(__us / 1000.0);
    3b9c:	ce 01       	movw	r24, r28
    3b9e:	8c 59       	subi	r24, 0x9C	; 156
    3ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	4a e7       	ldi	r20, 0x7A	; 122
    3ba8:	54 e4       	ldi	r21, 0x44	; 68
    3baa:	fc 01       	movw	r30, r24
    3bac:	60 81       	ld	r22, Z
    3bae:	71 81       	ldd	r23, Z+1	; 0x01
    3bb0:	82 81       	ldd	r24, Z+2	; 0x02
    3bb2:	93 81       	ldd	r25, Z+3	; 0x03
    3bb4:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	9e 01       	movw	r18, r28
    3bbe:	2f 58       	subi	r18, 0x8F	; 143
    3bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc2:	f9 01       	movw	r30, r18
    3bc4:	80 83       	st	Z, r24
    3bc6:	91 83       	std	Z+1, r25	; 0x01
    3bc8:	a2 83       	std	Z+2, r26	; 0x02
    3bca:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3bcc:	8e 01       	movw	r16, r28
    3bce:	0b 58       	subi	r16, 0x8B	; 139
    3bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd2:	ce 01       	movw	r24, r28
    3bd4:	8f 58       	subi	r24, 0x8F	; 143
    3bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	4a e7       	ldi	r20, 0x7A	; 122
    3bde:	55 e4       	ldi	r21, 0x45	; 69
    3be0:	fc 01       	movw	r30, r24
    3be2:	60 81       	ld	r22, Z
    3be4:	71 81       	ldd	r23, Z+1	; 0x01
    3be6:	82 81       	ldd	r24, Z+2	; 0x02
    3be8:	93 81       	ldd	r25, Z+3	; 0x03
    3bea:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	f8 01       	movw	r30, r16
    3bf4:	80 83       	st	Z, r24
    3bf6:	91 83       	std	Z+1, r25	; 0x01
    3bf8:	a2 83       	std	Z+2, r26	; 0x02
    3bfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bfc:	ce 01       	movw	r24, r28
    3bfe:	8b 58       	subi	r24, 0x8B	; 139
    3c00:	9f 4f       	sbci	r25, 0xFF	; 255
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	40 e8       	ldi	r20, 0x80	; 128
    3c08:	5f e3       	ldi	r21, 0x3F	; 63
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	60 81       	ld	r22, Z
    3c0e:	71 81       	ldd	r23, Z+1	; 0x01
    3c10:	82 81       	ldd	r24, Z+2	; 0x02
    3c12:	93 81       	ldd	r25, Z+3	; 0x03
    3c14:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    3c18:	88 23       	and	r24, r24
    3c1a:	4c f4       	brge	.+18     	; 0x3c2e <LCDByte+0x99a>
		__ticks = 1;
    3c1c:	ce 01       	movw	r24, r28
    3c1e:	87 58       	subi	r24, 0x87	; 135
    3c20:	9f 4f       	sbci	r25, 0xFF	; 255
    3c22:	21 e0       	ldi	r18, 0x01	; 1
    3c24:	30 e0       	ldi	r19, 0x00	; 0
    3c26:	fc 01       	movw	r30, r24
    3c28:	31 83       	std	Z+1, r19	; 0x01
    3c2a:	20 83       	st	Z, r18
    3c2c:	6d c0       	rjmp	.+218    	; 0x3d08 <LCDByte+0xa74>
	else if (__tmp > 65535)
    3c2e:	ce 01       	movw	r24, r28
    3c30:	8b 58       	subi	r24, 0x8B	; 139
    3c32:	9f 4f       	sbci	r25, 0xFF	; 255
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	3f ef       	ldi	r19, 0xFF	; 255
    3c38:	4f e7       	ldi	r20, 0x7F	; 127
    3c3a:	57 e4       	ldi	r21, 0x47	; 71
    3c3c:	fc 01       	movw	r30, r24
    3c3e:	60 81       	ld	r22, Z
    3c40:	71 81       	ldd	r23, Z+1	; 0x01
    3c42:	82 81       	ldd	r24, Z+2	; 0x02
    3c44:	93 81       	ldd	r25, Z+3	; 0x03
    3c46:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    3c4a:	18 16       	cp	r1, r24
    3c4c:	0c f0       	brlt	.+2      	; 0x3c50 <LCDByte+0x9bc>
    3c4e:	4a c0       	rjmp	.+148    	; 0x3ce4 <LCDByte+0xa50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c50:	ce 01       	movw	r24, r28
    3c52:	8f 58       	subi	r24, 0x8F	; 143
    3c54:	9f 4f       	sbci	r25, 0xFF	; 255
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	40 e2       	ldi	r20, 0x20	; 32
    3c5c:	51 e4       	ldi	r21, 0x41	; 65
    3c5e:	fc 01       	movw	r30, r24
    3c60:	60 81       	ld	r22, Z
    3c62:	71 81       	ldd	r23, Z+1	; 0x01
    3c64:	82 81       	ldd	r24, Z+2	; 0x02
    3c66:	93 81       	ldd	r25, Z+3	; 0x03
    3c68:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	8e 01       	movw	r16, r28
    3c72:	07 58       	subi	r16, 0x87	; 135
    3c74:	1f 4f       	sbci	r17, 0xFF	; 255
    3c76:	bc 01       	movw	r22, r24
    3c78:	cd 01       	movw	r24, r26
    3c7a:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    3c7e:	dc 01       	movw	r26, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	f8 01       	movw	r30, r16
    3c84:	91 83       	std	Z+1, r25	; 0x01
    3c86:	80 83       	st	Z, r24
    3c88:	24 c0       	rjmp	.+72     	; 0x3cd2 <LCDByte+0xa3e>
    3c8a:	ce 01       	movw	r24, r28
    3c8c:	85 58       	subi	r24, 0x85	; 133
    3c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c90:	20 e9       	ldi	r18, 0x90	; 144
    3c92:	31 e0       	ldi	r19, 0x01	; 1
    3c94:	fc 01       	movw	r30, r24
    3c96:	31 83       	std	Z+1, r19	; 0x01
    3c98:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c9a:	ce 01       	movw	r24, r28
    3c9c:	85 58       	subi	r24, 0x85	; 133
    3c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca0:	fc 01       	movw	r30, r24
    3ca2:	80 81       	ld	r24, Z
    3ca4:	91 81       	ldd	r25, Z+1	; 0x01
    3ca6:	01 97       	sbiw	r24, 0x01	; 1
    3ca8:	f1 f7       	brne	.-4      	; 0x3ca6 <LCDByte+0xa12>
    3caa:	9e 01       	movw	r18, r28
    3cac:	25 58       	subi	r18, 0x85	; 133
    3cae:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb0:	f9 01       	movw	r30, r18
    3cb2:	91 83       	std	Z+1, r25	; 0x01
    3cb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb6:	ce 01       	movw	r24, r28
    3cb8:	87 58       	subi	r24, 0x87	; 135
    3cba:	9f 4f       	sbci	r25, 0xFF	; 255
    3cbc:	9e 01       	movw	r18, r28
    3cbe:	27 58       	subi	r18, 0x87	; 135
    3cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc2:	f9 01       	movw	r30, r18
    3cc4:	20 81       	ld	r18, Z
    3cc6:	31 81       	ldd	r19, Z+1	; 0x01
    3cc8:	21 50       	subi	r18, 0x01	; 1
    3cca:	31 09       	sbc	r19, r1
    3ccc:	fc 01       	movw	r30, r24
    3cce:	31 83       	std	Z+1, r19	; 0x01
    3cd0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd2:	ce 01       	movw	r24, r28
    3cd4:	87 58       	subi	r24, 0x87	; 135
    3cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd8:	fc 01       	movw	r30, r24
    3cda:	80 81       	ld	r24, Z
    3cdc:	91 81       	ldd	r25, Z+1	; 0x01
    3cde:	89 2b       	or	r24, r25
    3ce0:	a1 f6       	brne	.-88     	; 0x3c8a <LCDByte+0x9f6>
    3ce2:	7b c0       	rjmp	.+246    	; 0x3dda <LCDByte+0xb46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce4:	8e 01       	movw	r16, r28
    3ce6:	07 58       	subi	r16, 0x87	; 135
    3ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cea:	ce 01       	movw	r24, r28
    3cec:	8b 58       	subi	r24, 0x8B	; 139
    3cee:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	60 81       	ld	r22, Z
    3cf4:	71 81       	ldd	r23, Z+1	; 0x01
    3cf6:	82 81       	ldd	r24, Z+2	; 0x02
    3cf8:	93 81       	ldd	r25, Z+3	; 0x03
    3cfa:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	f8 01       	movw	r30, r16
    3d04:	91 83       	std	Z+1, r25	; 0x01
    3d06:	80 83       	st	Z, r24
    3d08:	ce 01       	movw	r24, r28
    3d0a:	83 58       	subi	r24, 0x83	; 131
    3d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d0e:	9e 01       	movw	r18, r28
    3d10:	27 58       	subi	r18, 0x87	; 135
    3d12:	3f 4f       	sbci	r19, 0xFF	; 255
    3d14:	f9 01       	movw	r30, r18
    3d16:	20 81       	ld	r18, Z
    3d18:	31 81       	ldd	r19, Z+1	; 0x01
    3d1a:	fc 01       	movw	r30, r24
    3d1c:	31 83       	std	Z+1, r19	; 0x01
    3d1e:	20 83       	st	Z, r18
    3d20:	ce 01       	movw	r24, r28
    3d22:	83 58       	subi	r24, 0x83	; 131
    3d24:	9f 4f       	sbci	r25, 0xFF	; 255
    3d26:	fc 01       	movw	r30, r24
    3d28:	80 81       	ld	r24, Z
    3d2a:	91 81       	ldd	r25, Z+1	; 0x01
    3d2c:	01 97       	sbiw	r24, 0x01	; 1
    3d2e:	f1 f7       	brne	.-4      	; 0x3d2c <LCDByte+0xa98>
    3d30:	9e 01       	movw	r18, r28
    3d32:	23 58       	subi	r18, 0x83	; 131
    3d34:	3f 4f       	sbci	r19, 0xFF	; 255
    3d36:	f9 01       	movw	r30, r18
    3d38:	91 83       	std	Z+1, r25	; 0x01
    3d3a:	80 83       	st	Z, r24
    3d3c:	4e c0       	rjmp	.+156    	; 0x3dda <LCDByte+0xb46>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    3d3e:	ce 01       	movw	r24, r28
    3d40:	88 59       	subi	r24, 0x98	; 152
    3d42:	9f 4f       	sbci	r25, 0xFF	; 255
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	4f e7       	ldi	r20, 0x7F	; 127
    3d4a:	53 e4       	ldi	r21, 0x43	; 67
    3d4c:	fc 01       	movw	r30, r24
    3d4e:	60 81       	ld	r22, Z
    3d50:	71 81       	ldd	r23, Z+1	; 0x01
    3d52:	82 81       	ldd	r24, Z+2	; 0x02
    3d54:	93 81       	ldd	r25, Z+3	; 0x03
    3d56:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    3d5a:	18 16       	cp	r1, r24
    3d5c:	6c f5       	brge	.+90     	; 0x3db8 <LCDByte+0xb24>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    3d5e:	8e 01       	movw	r16, r28
    3d60:	01 58       	subi	r16, 0x81	; 129
    3d62:	1f 4f       	sbci	r17, 0xFF	; 255
    3d64:	ce 01       	movw	r24, r28
    3d66:	84 59       	subi	r24, 0x94	; 148
    3d68:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6a:	fc 01       	movw	r30, r24
    3d6c:	60 81       	ld	r22, Z
    3d6e:	71 81       	ldd	r23, Z+1	; 0x01
    3d70:	82 81       	ldd	r24, Z+2	; 0x02
    3d72:	93 81       	ldd	r25, Z+3	; 0x03
    3d74:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    3d78:	dc 01       	movw	r26, r24
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	f8 01       	movw	r30, r16
    3d7e:	91 83       	std	Z+1, r25	; 0x01
    3d80:	80 83       	st	Z, r24
    3d82:	ce 01       	movw	r24, r28
    3d84:	8f 57       	subi	r24, 0x7F	; 127
    3d86:	9f 4f       	sbci	r25, 0xFF	; 255
    3d88:	9e 01       	movw	r18, r28
    3d8a:	21 58       	subi	r18, 0x81	; 129
    3d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8e:	f9 01       	movw	r30, r18
    3d90:	20 81       	ld	r18, Z
    3d92:	31 81       	ldd	r19, Z+1	; 0x01
    3d94:	fc 01       	movw	r30, r24
    3d96:	31 83       	std	Z+1, r19	; 0x01
    3d98:	20 83       	st	Z, r18
    3d9a:	ce 01       	movw	r24, r28
    3d9c:	8f 57       	subi	r24, 0x7F	; 127
    3d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3da0:	fc 01       	movw	r30, r24
    3da2:	80 81       	ld	r24, Z
    3da4:	91 81       	ldd	r25, Z+1	; 0x01
    3da6:	01 97       	sbiw	r24, 0x01	; 1
    3da8:	f1 f7       	brne	.-4      	; 0x3da6 <LCDByte+0xb12>
    3daa:	9e 01       	movw	r18, r28
    3dac:	2f 57       	subi	r18, 0x7F	; 127
    3dae:	3f 4f       	sbci	r19, 0xFF	; 255
    3db0:	f9 01       	movw	r30, r18
    3db2:	91 83       	std	Z+1, r25	; 0x01
    3db4:	80 83       	st	Z, r24
    3db6:	28 c0       	rjmp	.+80     	; 0x3e08 <LCDByte+0xb74>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3db8:	8e 01       	movw	r16, r28
    3dba:	00 59       	subi	r16, 0x90	; 144
    3dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dbe:	ce 01       	movw	r24, r28
    3dc0:	88 59       	subi	r24, 0x98	; 152
    3dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc4:	fc 01       	movw	r30, r24
    3dc6:	60 81       	ld	r22, Z
    3dc8:	71 81       	ldd	r23, Z+1	; 0x01
    3dca:	82 81       	ldd	r24, Z+2	; 0x02
    3dcc:	93 81       	ldd	r25, Z+3	; 0x03
    3dce:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	f8 01       	movw	r30, r16
    3dd8:	80 83       	st	Z, r24
    3dda:	ce 01       	movw	r24, r28
    3ddc:	8d 57       	subi	r24, 0x7D	; 125
    3dde:	9f 4f       	sbci	r25, 0xFF	; 255
    3de0:	9e 01       	movw	r18, r28
    3de2:	20 59       	subi	r18, 0x90	; 144
    3de4:	3f 4f       	sbci	r19, 0xFF	; 255
    3de6:	f9 01       	movw	r30, r18
    3de8:	20 81       	ld	r18, Z
    3dea:	fc 01       	movw	r30, r24
    3dec:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3dee:	ce 01       	movw	r24, r28
    3df0:	8d 57       	subi	r24, 0x7D	; 125
    3df2:	9f 4f       	sbci	r25, 0xFF	; 255
    3df4:	fc 01       	movw	r30, r24
    3df6:	80 81       	ld	r24, Z
    3df8:	28 2f       	mov	r18, r24
    3dfa:	2a 95       	dec	r18
    3dfc:	f1 f7       	brne	.-4      	; 0x3dfa <LCDByte+0xb66>
    3dfe:	ce 01       	movw	r24, r28
    3e00:	8d 57       	subi	r24, 0x7D	; 125
    3e02:	9f 4f       	sbci	r25, 0xFF	; 255
    3e04:	fc 01       	movw	r30, r24
    3e06:	20 83       	st	Z, r18

	_delay_us(1);			//tEH

	//SEND
	CLEAR_E();
    3e08:	85 e2       	ldi	r24, 0x25	; 37
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	25 e2       	ldi	r18, 0x25	; 37
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	f9 01       	movw	r30, r18
    3e12:	20 81       	ld	r18, Z
    3e14:	2d 7f       	andi	r18, 0xFD	; 253
    3e16:	fc 01       	movw	r30, r24
    3e18:	20 83       	st	Z, r18
    3e1a:	9e 01       	movw	r18, r28
    3e1c:	2c 57       	subi	r18, 0x7C	; 124
    3e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	a0 e8       	ldi	r26, 0x80	; 128
    3e26:	bf e3       	ldi	r27, 0x3F	; 63
    3e28:	f9 01       	movw	r30, r18
    3e2a:	80 83       	st	Z, r24
    3e2c:	91 83       	std	Z+1, r25	; 0x01
    3e2e:	a2 83       	std	Z+2, r26	; 0x02
    3e30:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    3e32:	8e 01       	movw	r16, r28
    3e34:	08 57       	subi	r16, 0x78	; 120
    3e36:	1f 4f       	sbci	r17, 0xFF	; 255
    3e38:	ce 01       	movw	r24, r28
    3e3a:	8c 57       	subi	r24, 0x7C	; 124
    3e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e3e:	2b ea       	ldi	r18, 0xAB	; 171
    3e40:	3a ea       	ldi	r19, 0xAA	; 170
    3e42:	4a ea       	ldi	r20, 0xAA	; 170
    3e44:	50 e4       	ldi	r21, 0x40	; 64
    3e46:	fc 01       	movw	r30, r24
    3e48:	60 81       	ld	r22, Z
    3e4a:	71 81       	ldd	r23, Z+1	; 0x01
    3e4c:	82 81       	ldd	r24, Z+2	; 0x02
    3e4e:	93 81       	ldd	r25, Z+3	; 0x03
    3e50:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	f8 01       	movw	r30, r16
    3e5a:	80 83       	st	Z, r24
    3e5c:	91 83       	std	Z+1, r25	; 0x01
    3e5e:	a2 83       	std	Z+2, r26	; 0x02
    3e60:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    3e62:	8e 01       	movw	r16, r28
    3e64:	04 57       	subi	r16, 0x74	; 116
    3e66:	1f 4f       	sbci	r17, 0xFF	; 255
    3e68:	ce 01       	movw	r24, r28
    3e6a:	8c 57       	subi	r24, 0x7C	; 124
    3e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	30 e0       	ldi	r19, 0x00	; 0
    3e72:	40 e8       	ldi	r20, 0x80	; 128
    3e74:	50 e4       	ldi	r21, 0x40	; 64
    3e76:	fc 01       	movw	r30, r24
    3e78:	60 81       	ld	r22, Z
    3e7a:	71 81       	ldd	r23, Z+1	; 0x01
    3e7c:	82 81       	ldd	r24, Z+2	; 0x02
    3e7e:	93 81       	ldd	r25, Z+3	; 0x03
    3e80:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    3e84:	dc 01       	movw	r26, r24
    3e86:	cb 01       	movw	r24, r22
    3e88:	f8 01       	movw	r30, r16
    3e8a:	80 83       	st	Z, r24
    3e8c:	91 83       	std	Z+1, r25	; 0x01
    3e8e:	a2 83       	std	Z+2, r26	; 0x02
    3e90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e92:	ce 01       	movw	r24, r28
    3e94:	88 57       	subi	r24, 0x78	; 120
    3e96:	9f 4f       	sbci	r25, 0xFF	; 255
    3e98:	20 e0       	ldi	r18, 0x00	; 0
    3e9a:	30 e0       	ldi	r19, 0x00	; 0
    3e9c:	40 e8       	ldi	r20, 0x80	; 128
    3e9e:	5f e3       	ldi	r21, 0x3F	; 63
    3ea0:	fc 01       	movw	r30, r24
    3ea2:	60 81       	ld	r22, Z
    3ea4:	71 81       	ldd	r23, Z+1	; 0x01
    3ea6:	82 81       	ldd	r24, Z+2	; 0x02
    3ea8:	93 81       	ldd	r25, Z+3	; 0x03
    3eaa:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    3eae:	88 23       	and	r24, r24
    3eb0:	3c f4       	brge	.+14     	; 0x3ec0 <LCDByte+0xc2c>
		__ticks = 1;
    3eb2:	ce 01       	movw	r24, r28
    3eb4:	80 57       	subi	r24, 0x70	; 112
    3eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    3eb8:	21 e0       	ldi	r18, 0x01	; 1
    3eba:	fc 01       	movw	r30, r24
    3ebc:	20 83       	st	Z, r18
    3ebe:	30 c1       	rjmp	.+608    	; 0x4120 <LCDByte+0xe8c>
	else if (__tmp2 > 65535)
    3ec0:	ce 01       	movw	r24, r28
    3ec2:	84 57       	subi	r24, 0x74	; 116
    3ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	3f ef       	ldi	r19, 0xFF	; 255
    3eca:	4f e7       	ldi	r20, 0x7F	; 127
    3ecc:	57 e4       	ldi	r21, 0x47	; 71
    3ece:	fc 01       	movw	r30, r24
    3ed0:	60 81       	ld	r22, Z
    3ed2:	71 81       	ldd	r23, Z+1	; 0x01
    3ed4:	82 81       	ldd	r24, Z+2	; 0x02
    3ed6:	93 81       	ldd	r25, Z+3	; 0x03
    3ed8:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    3edc:	18 16       	cp	r1, r24
    3ede:	0c f0       	brlt	.+2      	; 0x3ee2 <LCDByte+0xc4e>
    3ee0:	d1 c0       	rjmp	.+418    	; 0x4084 <LCDByte+0xdf0>
	{
		_delay_ms(__us / 1000.0);
    3ee2:	ce 01       	movw	r24, r28
    3ee4:	8c 57       	subi	r24, 0x7C	; 124
    3ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	4a e7       	ldi	r20, 0x7A	; 122
    3eee:	54 e4       	ldi	r21, 0x44	; 68
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	60 81       	ld	r22, Z
    3ef4:	71 81       	ldd	r23, Z+1	; 0x01
    3ef6:	82 81       	ldd	r24, Z+2	; 0x02
    3ef8:	93 81       	ldd	r25, Z+3	; 0x03
    3efa:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    3efe:	dc 01       	movw	r26, r24
    3f00:	cb 01       	movw	r24, r22
    3f02:	9e 01       	movw	r18, r28
    3f04:	2f 56       	subi	r18, 0x6F	; 111
    3f06:	3f 4f       	sbci	r19, 0xFF	; 255
    3f08:	f9 01       	movw	r30, r18
    3f0a:	80 83       	st	Z, r24
    3f0c:	91 83       	std	Z+1, r25	; 0x01
    3f0e:	a2 83       	std	Z+2, r26	; 0x02
    3f10:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3f12:	8e 01       	movw	r16, r28
    3f14:	0b 56       	subi	r16, 0x6B	; 107
    3f16:	1f 4f       	sbci	r17, 0xFF	; 255
    3f18:	ce 01       	movw	r24, r28
    3f1a:	8f 56       	subi	r24, 0x6F	; 111
    3f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	4a e7       	ldi	r20, 0x7A	; 122
    3f24:	55 e4       	ldi	r21, 0x45	; 69
    3f26:	fc 01       	movw	r30, r24
    3f28:	60 81       	ld	r22, Z
    3f2a:	71 81       	ldd	r23, Z+1	; 0x01
    3f2c:	82 81       	ldd	r24, Z+2	; 0x02
    3f2e:	93 81       	ldd	r25, Z+3	; 0x03
    3f30:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    3f34:	dc 01       	movw	r26, r24
    3f36:	cb 01       	movw	r24, r22
    3f38:	f8 01       	movw	r30, r16
    3f3a:	80 83       	st	Z, r24
    3f3c:	91 83       	std	Z+1, r25	; 0x01
    3f3e:	a2 83       	std	Z+2, r26	; 0x02
    3f40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f42:	ce 01       	movw	r24, r28
    3f44:	8b 56       	subi	r24, 0x6B	; 107
    3f46:	9f 4f       	sbci	r25, 0xFF	; 255
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	40 e8       	ldi	r20, 0x80	; 128
    3f4e:	5f e3       	ldi	r21, 0x3F	; 63
    3f50:	fc 01       	movw	r30, r24
    3f52:	60 81       	ld	r22, Z
    3f54:	71 81       	ldd	r23, Z+1	; 0x01
    3f56:	82 81       	ldd	r24, Z+2	; 0x02
    3f58:	93 81       	ldd	r25, Z+3	; 0x03
    3f5a:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    3f5e:	88 23       	and	r24, r24
    3f60:	4c f4       	brge	.+18     	; 0x3f74 <LCDByte+0xce0>
		__ticks = 1;
    3f62:	ce 01       	movw	r24, r28
    3f64:	87 56       	subi	r24, 0x67	; 103
    3f66:	9f 4f       	sbci	r25, 0xFF	; 255
    3f68:	21 e0       	ldi	r18, 0x01	; 1
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	31 83       	std	Z+1, r19	; 0x01
    3f70:	20 83       	st	Z, r18
    3f72:	6d c0       	rjmp	.+218    	; 0x404e <LCDByte+0xdba>
	else if (__tmp > 65535)
    3f74:	ce 01       	movw	r24, r28
    3f76:	8b 56       	subi	r24, 0x6B	; 107
    3f78:	9f 4f       	sbci	r25, 0xFF	; 255
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
    3f7c:	3f ef       	ldi	r19, 0xFF	; 255
    3f7e:	4f e7       	ldi	r20, 0x7F	; 127
    3f80:	57 e4       	ldi	r21, 0x47	; 71
    3f82:	fc 01       	movw	r30, r24
    3f84:	60 81       	ld	r22, Z
    3f86:	71 81       	ldd	r23, Z+1	; 0x01
    3f88:	82 81       	ldd	r24, Z+2	; 0x02
    3f8a:	93 81       	ldd	r25, Z+3	; 0x03
    3f8c:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    3f90:	18 16       	cp	r1, r24
    3f92:	0c f0       	brlt	.+2      	; 0x3f96 <LCDByte+0xd02>
    3f94:	4a c0       	rjmp	.+148    	; 0x402a <LCDByte+0xd96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f96:	ce 01       	movw	r24, r28
    3f98:	8f 56       	subi	r24, 0x6F	; 111
    3f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	40 e2       	ldi	r20, 0x20	; 32
    3fa2:	51 e4       	ldi	r21, 0x41	; 65
    3fa4:	fc 01       	movw	r30, r24
    3fa6:	60 81       	ld	r22, Z
    3fa8:	71 81       	ldd	r23, Z+1	; 0x01
    3faa:	82 81       	ldd	r24, Z+2	; 0x02
    3fac:	93 81       	ldd	r25, Z+3	; 0x03
    3fae:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	8e 01       	movw	r16, r28
    3fb8:	07 56       	subi	r16, 0x67	; 103
    3fba:	1f 4f       	sbci	r17, 0xFF	; 255
    3fbc:	bc 01       	movw	r22, r24
    3fbe:	cd 01       	movw	r24, r26
    3fc0:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	f8 01       	movw	r30, r16
    3fca:	91 83       	std	Z+1, r25	; 0x01
    3fcc:	80 83       	st	Z, r24
    3fce:	24 c0       	rjmp	.+72     	; 0x4018 <LCDByte+0xd84>
    3fd0:	ce 01       	movw	r24, r28
    3fd2:	85 56       	subi	r24, 0x65	; 101
    3fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd6:	20 e9       	ldi	r18, 0x90	; 144
    3fd8:	31 e0       	ldi	r19, 0x01	; 1
    3fda:	fc 01       	movw	r30, r24
    3fdc:	31 83       	std	Z+1, r19	; 0x01
    3fde:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3fe0:	ce 01       	movw	r24, r28
    3fe2:	85 56       	subi	r24, 0x65	; 101
    3fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fe6:	fc 01       	movw	r30, r24
    3fe8:	80 81       	ld	r24, Z
    3fea:	91 81       	ldd	r25, Z+1	; 0x01
    3fec:	01 97       	sbiw	r24, 0x01	; 1
    3fee:	f1 f7       	brne	.-4      	; 0x3fec <LCDByte+0xd58>
    3ff0:	9e 01       	movw	r18, r28
    3ff2:	25 56       	subi	r18, 0x65	; 101
    3ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ff6:	f9 01       	movw	r30, r18
    3ff8:	91 83       	std	Z+1, r25	; 0x01
    3ffa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ffc:	ce 01       	movw	r24, r28
    3ffe:	87 56       	subi	r24, 0x67	; 103
    4000:	9f 4f       	sbci	r25, 0xFF	; 255
    4002:	9e 01       	movw	r18, r28
    4004:	27 56       	subi	r18, 0x67	; 103
    4006:	3f 4f       	sbci	r19, 0xFF	; 255
    4008:	f9 01       	movw	r30, r18
    400a:	20 81       	ld	r18, Z
    400c:	31 81       	ldd	r19, Z+1	; 0x01
    400e:	21 50       	subi	r18, 0x01	; 1
    4010:	31 09       	sbc	r19, r1
    4012:	fc 01       	movw	r30, r24
    4014:	31 83       	std	Z+1, r19	; 0x01
    4016:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4018:	ce 01       	movw	r24, r28
    401a:	87 56       	subi	r24, 0x67	; 103
    401c:	9f 4f       	sbci	r25, 0xFF	; 255
    401e:	fc 01       	movw	r30, r24
    4020:	80 81       	ld	r24, Z
    4022:	91 81       	ldd	r25, Z+1	; 0x01
    4024:	89 2b       	or	r24, r25
    4026:	a1 f6       	brne	.-88     	; 0x3fd0 <LCDByte+0xd3c>
    4028:	7b c0       	rjmp	.+246    	; 0x4120 <LCDByte+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    402a:	8e 01       	movw	r16, r28
    402c:	07 56       	subi	r16, 0x67	; 103
    402e:	1f 4f       	sbci	r17, 0xFF	; 255
    4030:	ce 01       	movw	r24, r28
    4032:	8b 56       	subi	r24, 0x6B	; 107
    4034:	9f 4f       	sbci	r25, 0xFF	; 255
    4036:	fc 01       	movw	r30, r24
    4038:	60 81       	ld	r22, Z
    403a:	71 81       	ldd	r23, Z+1	; 0x01
    403c:	82 81       	ldd	r24, Z+2	; 0x02
    403e:	93 81       	ldd	r25, Z+3	; 0x03
    4040:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    4044:	dc 01       	movw	r26, r24
    4046:	cb 01       	movw	r24, r22
    4048:	f8 01       	movw	r30, r16
    404a:	91 83       	std	Z+1, r25	; 0x01
    404c:	80 83       	st	Z, r24
    404e:	ce 01       	movw	r24, r28
    4050:	83 56       	subi	r24, 0x63	; 99
    4052:	9f 4f       	sbci	r25, 0xFF	; 255
    4054:	9e 01       	movw	r18, r28
    4056:	27 56       	subi	r18, 0x67	; 103
    4058:	3f 4f       	sbci	r19, 0xFF	; 255
    405a:	f9 01       	movw	r30, r18
    405c:	20 81       	ld	r18, Z
    405e:	31 81       	ldd	r19, Z+1	; 0x01
    4060:	fc 01       	movw	r30, r24
    4062:	31 83       	std	Z+1, r19	; 0x01
    4064:	20 83       	st	Z, r18
    4066:	ce 01       	movw	r24, r28
    4068:	83 56       	subi	r24, 0x63	; 99
    406a:	9f 4f       	sbci	r25, 0xFF	; 255
    406c:	fc 01       	movw	r30, r24
    406e:	80 81       	ld	r24, Z
    4070:	91 81       	ldd	r25, Z+1	; 0x01
    4072:	01 97       	sbiw	r24, 0x01	; 1
    4074:	f1 f7       	brne	.-4      	; 0x4072 <LCDByte+0xdde>
    4076:	9e 01       	movw	r18, r28
    4078:	23 56       	subi	r18, 0x63	; 99
    407a:	3f 4f       	sbci	r19, 0xFF	; 255
    407c:	f9 01       	movw	r30, r18
    407e:	91 83       	std	Z+1, r25	; 0x01
    4080:	80 83       	st	Z, r24
    4082:	4e c0       	rjmp	.+156    	; 0x4120 <LCDByte+0xe8c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    4084:	ce 01       	movw	r24, r28
    4086:	88 57       	subi	r24, 0x78	; 120
    4088:	9f 4f       	sbci	r25, 0xFF	; 255
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	4f e7       	ldi	r20, 0x7F	; 127
    4090:	53 e4       	ldi	r21, 0x43	; 67
    4092:	fc 01       	movw	r30, r24
    4094:	60 81       	ld	r22, Z
    4096:	71 81       	ldd	r23, Z+1	; 0x01
    4098:	82 81       	ldd	r24, Z+2	; 0x02
    409a:	93 81       	ldd	r25, Z+3	; 0x03
    409c:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    40a0:	18 16       	cp	r1, r24
    40a2:	6c f5       	brge	.+90     	; 0x40fe <LCDByte+0xe6a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    40a4:	8e 01       	movw	r16, r28
    40a6:	01 56       	subi	r16, 0x61	; 97
    40a8:	1f 4f       	sbci	r17, 0xFF	; 255
    40aa:	ce 01       	movw	r24, r28
    40ac:	84 57       	subi	r24, 0x74	; 116
    40ae:	9f 4f       	sbci	r25, 0xFF	; 255
    40b0:	fc 01       	movw	r30, r24
    40b2:	60 81       	ld	r22, Z
    40b4:	71 81       	ldd	r23, Z+1	; 0x01
    40b6:	82 81       	ldd	r24, Z+2	; 0x02
    40b8:	93 81       	ldd	r25, Z+3	; 0x03
    40ba:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    40be:	dc 01       	movw	r26, r24
    40c0:	cb 01       	movw	r24, r22
    40c2:	f8 01       	movw	r30, r16
    40c4:	91 83       	std	Z+1, r25	; 0x01
    40c6:	80 83       	st	Z, r24
    40c8:	ce 01       	movw	r24, r28
    40ca:	8f 55       	subi	r24, 0x5F	; 95
    40cc:	9f 4f       	sbci	r25, 0xFF	; 255
    40ce:	9e 01       	movw	r18, r28
    40d0:	21 56       	subi	r18, 0x61	; 97
    40d2:	3f 4f       	sbci	r19, 0xFF	; 255
    40d4:	f9 01       	movw	r30, r18
    40d6:	20 81       	ld	r18, Z
    40d8:	31 81       	ldd	r19, Z+1	; 0x01
    40da:	fc 01       	movw	r30, r24
    40dc:	31 83       	std	Z+1, r19	; 0x01
    40de:	20 83       	st	Z, r18
    40e0:	ce 01       	movw	r24, r28
    40e2:	8f 55       	subi	r24, 0x5F	; 95
    40e4:	9f 4f       	sbci	r25, 0xFF	; 255
    40e6:	fc 01       	movw	r30, r24
    40e8:	80 81       	ld	r24, Z
    40ea:	91 81       	ldd	r25, Z+1	; 0x01
    40ec:	01 97       	sbiw	r24, 0x01	; 1
    40ee:	f1 f7       	brne	.-4      	; 0x40ec <LCDByte+0xe58>
    40f0:	9e 01       	movw	r18, r28
    40f2:	2f 55       	subi	r18, 0x5F	; 95
    40f4:	3f 4f       	sbci	r19, 0xFF	; 255
    40f6:	f9 01       	movw	r30, r18
    40f8:	91 83       	std	Z+1, r25	; 0x01
    40fa:	80 83       	st	Z, r24
    40fc:	28 c0       	rjmp	.+80     	; 0x414e <LCDByte+0xeba>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    40fe:	8e 01       	movw	r16, r28
    4100:	00 57       	subi	r16, 0x70	; 112
    4102:	1f 4f       	sbci	r17, 0xFF	; 255
    4104:	ce 01       	movw	r24, r28
    4106:	88 57       	subi	r24, 0x78	; 120
    4108:	9f 4f       	sbci	r25, 0xFF	; 255
    410a:	fc 01       	movw	r30, r24
    410c:	60 81       	ld	r22, Z
    410e:	71 81       	ldd	r23, Z+1	; 0x01
    4110:	82 81       	ldd	r24, Z+2	; 0x02
    4112:	93 81       	ldd	r25, Z+3	; 0x03
    4114:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    4118:	dc 01       	movw	r26, r24
    411a:	cb 01       	movw	r24, r22
    411c:	f8 01       	movw	r30, r16
    411e:	80 83       	st	Z, r24
    4120:	ce 01       	movw	r24, r28
    4122:	8d 55       	subi	r24, 0x5D	; 93
    4124:	9f 4f       	sbci	r25, 0xFF	; 255
    4126:	9e 01       	movw	r18, r28
    4128:	20 57       	subi	r18, 0x70	; 112
    412a:	3f 4f       	sbci	r19, 0xFF	; 255
    412c:	f9 01       	movw	r30, r18
    412e:	20 81       	ld	r18, Z
    4130:	fc 01       	movw	r30, r24
    4132:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4134:	ce 01       	movw	r24, r28
    4136:	8d 55       	subi	r24, 0x5D	; 93
    4138:	9f 4f       	sbci	r25, 0xFF	; 255
    413a:	fc 01       	movw	r30, r24
    413c:	80 81       	ld	r24, Z
    413e:	28 2f       	mov	r18, r24
    4140:	2a 95       	dec	r18
    4142:	f1 f7       	brne	.-4      	; 0x4140 <LCDByte+0xeac>
    4144:	ce 01       	movw	r24, r28
    4146:	8d 55       	subi	r24, 0x5D	; 93
    4148:	9f 4f       	sbci	r25, 0xFF	; 255
    414a:	fc 01       	movw	r30, r24
    414c:	20 83       	st	Z, r18

	_delay_us(1);			//tEL

	LCDBusyLoop();
    414e:	0e 94 b5 20 	call	0x416a	; 0x416a <LCDBusyLoop>
}
    4152:	cb 55       	subi	r28, 0x5B	; 91
    4154:	df 4f       	sbci	r29, 0xFF	; 255
    4156:	0f b6       	in	r0, 0x3f	; 63
    4158:	f8 94       	cli
    415a:	de bf       	out	0x3e, r29	; 62
    415c:	0f be       	out	0x3f, r0	; 63
    415e:	cd bf       	out	0x3d, r28	; 61
    4160:	df 91       	pop	r29
    4162:	cf 91       	pop	r28
    4164:	1f 91       	pop	r17
    4166:	0f 91       	pop	r16
    4168:	08 95       	ret

0000416a <LCDBusyLoop>:

/***********************************************************
 * Espera que el LCD este libre
 ***********************************************************/
void LCDBusyLoop(){
    416a:	0f 93       	push	r16
    416c:	1f 93       	push	r17
    416e:	cf 93       	push	r28
    4170:	df 93       	push	r29
    4172:	cd b7       	in	r28, 0x3d	; 61
    4174:	de b7       	in	r29, 0x3e	; 62
    4176:	c9 5e       	subi	r28, 0xE9	; 233
    4178:	d1 09       	sbc	r29, r1
    417a:	0f b6       	in	r0, 0x3f	; 63
    417c:	f8 94       	cli
    417e:	de bf       	out	0x3e, r29	; 62
    4180:	0f be       	out	0x3f, r0	; 63
    4182:	cd bf       	out	0x3d, r28	; 61
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;
    4184:	19 82       	std	Y+1, r1	; 0x01

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
    4186:	8a e2       	ldi	r24, 0x2A	; 42
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	2a e2       	ldi	r18, 0x2A	; 42
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	f9 01       	movw	r30, r18
    4190:	20 81       	ld	r18, Z
    4192:	2f 70       	andi	r18, 0x0F	; 15
    4194:	fc 01       	movw	r30, r24
    4196:	20 83       	st	Z, r18

	//change LCD mode
	SET_RW();		//Read mode
    4198:	8b e2       	ldi	r24, 0x2B	; 43
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	2b e2       	ldi	r18, 0x2B	; 43
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	f9 01       	movw	r30, r18
    41a2:	20 81       	ld	r18, Z
    41a4:	24 60       	ori	r18, 0x04	; 4
    41a6:	fc 01       	movw	r30, r24
    41a8:	20 83       	st	Z, r18
	CLEAR_RS();		//Read status
    41aa:	8b e2       	ldi	r24, 0x2B	; 43
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	2b e2       	ldi	r18, 0x2B	; 43
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	f9 01       	movw	r30, r18
    41b4:	20 81       	ld	r18, Z
    41b6:	27 7f       	andi	r18, 0xF7	; 247
    41b8:	fc 01       	movw	r30, r24
    41ba:	20 83       	st	Z, r18
    41bc:	80 e0       	ldi	r24, 0x00	; 0
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	a0 e0       	ldi	r26, 0x00	; 0
    41c2:	bf e3       	ldi	r27, 0x3F	; 63
    41c4:	8c 83       	std	Y+4, r24	; 0x04
    41c6:	9d 83       	std	Y+5, r25	; 0x05
    41c8:	ae 83       	std	Y+6, r26	; 0x06
    41ca:	bf 83       	std	Y+7, r27	; 0x07
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    41cc:	2b ea       	ldi	r18, 0xAB	; 171
    41ce:	3a ea       	ldi	r19, 0xAA	; 170
    41d0:	4a ea       	ldi	r20, 0xAA	; 170
    41d2:	50 e4       	ldi	r21, 0x40	; 64
    41d4:	6c 81       	ldd	r22, Y+4	; 0x04
    41d6:	7d 81       	ldd	r23, Y+5	; 0x05
    41d8:	8e 81       	ldd	r24, Y+6	; 0x06
    41da:	9f 81       	ldd	r25, Y+7	; 0x07
    41dc:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    41e0:	dc 01       	movw	r26, r24
    41e2:	cb 01       	movw	r24, r22
    41e4:	88 87       	std	Y+8, r24	; 0x08
    41e6:	99 87       	std	Y+9, r25	; 0x09
    41e8:	aa 87       	std	Y+10, r26	; 0x0a
    41ea:	bb 87       	std	Y+11, r27	; 0x0b
	__tmp2 = ((F_CPU) / 4e6) * __us;
    41ec:	20 e0       	ldi	r18, 0x00	; 0
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	40 e8       	ldi	r20, 0x80	; 128
    41f2:	50 e4       	ldi	r21, 0x40	; 64
    41f4:	6c 81       	ldd	r22, Y+4	; 0x04
    41f6:	7d 81       	ldd	r23, Y+5	; 0x05
    41f8:	8e 81       	ldd	r24, Y+6	; 0x06
    41fa:	9f 81       	ldd	r25, Y+7	; 0x07
    41fc:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    4200:	dc 01       	movw	r26, r24
    4202:	cb 01       	movw	r24, r22
    4204:	8c 87       	std	Y+12, r24	; 0x0c
    4206:	9d 87       	std	Y+13, r25	; 0x0d
    4208:	ae 87       	std	Y+14, r26	; 0x0e
    420a:	bf 87       	std	Y+15, r27	; 0x0f
	if (__tmp < 1.0)
    420c:	20 e0       	ldi	r18, 0x00	; 0
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	40 e8       	ldi	r20, 0x80	; 128
    4212:	5f e3       	ldi	r21, 0x3F	; 63
    4214:	68 85       	ldd	r22, Y+8	; 0x08
    4216:	79 85       	ldd	r23, Y+9	; 0x09
    4218:	8a 85       	ldd	r24, Y+10	; 0x0a
    421a:	9b 85       	ldd	r25, Y+11	; 0x0b
    421c:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    4220:	88 23       	and	r24, r24
    4222:	1c f4       	brge	.+6      	; 0x422a <LCDBusyLoop+0xc0>
		__ticks = 1;
    4224:	81 e0       	ldi	r24, 0x01	; 1
    4226:	88 8b       	std	Y+16, r24	; 0x10
    4228:	b2 c0       	rjmp	.+356    	; 0x438e <LCDBusyLoop+0x224>
	else if (__tmp2 > 65535)
    422a:	20 e0       	ldi	r18, 0x00	; 0
    422c:	3f ef       	ldi	r19, 0xFF	; 255
    422e:	4f e7       	ldi	r20, 0x7F	; 127
    4230:	57 e4       	ldi	r21, 0x47	; 71
    4232:	6c 85       	ldd	r22, Y+12	; 0x0c
    4234:	7d 85       	ldd	r23, Y+13	; 0x0d
    4236:	8e 85       	ldd	r24, Y+14	; 0x0e
    4238:	9f 85       	ldd	r25, Y+15	; 0x0f
    423a:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    423e:	18 16       	cp	r1, r24
    4240:	0c f0       	brlt	.+2      	; 0x4244 <LCDBusyLoop+0xda>
    4242:	7b c0       	rjmp	.+246    	; 0x433a <LCDBusyLoop+0x1d0>
	{
		_delay_ms(__us / 1000.0);
    4244:	20 e0       	ldi	r18, 0x00	; 0
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	4a e7       	ldi	r20, 0x7A	; 122
    424a:	54 e4       	ldi	r21, 0x44	; 68
    424c:	6c 81       	ldd	r22, Y+4	; 0x04
    424e:	7d 81       	ldd	r23, Y+5	; 0x05
    4250:	8e 81       	ldd	r24, Y+6	; 0x06
    4252:	9f 81       	ldd	r25, Y+7	; 0x07
    4254:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    4258:	dc 01       	movw	r26, r24
    425a:	cb 01       	movw	r24, r22
    425c:	89 8b       	std	Y+17, r24	; 0x11
    425e:	9a 8b       	std	Y+18, r25	; 0x12
    4260:	ab 8b       	std	Y+19, r26	; 0x13
    4262:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	4a e7       	ldi	r20, 0x7A	; 122
    426a:	55 e4       	ldi	r21, 0x45	; 69
    426c:	69 89       	ldd	r22, Y+17	; 0x11
    426e:	7a 89       	ldd	r23, Y+18	; 0x12
    4270:	8b 89       	ldd	r24, Y+19	; 0x13
    4272:	9c 89       	ldd	r25, Y+20	; 0x14
    4274:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    4278:	dc 01       	movw	r26, r24
    427a:	cb 01       	movw	r24, r22
    427c:	8d 8b       	std	Y+21, r24	; 0x15
    427e:	9e 8b       	std	Y+22, r25	; 0x16
    4280:	af 8b       	std	Y+23, r26	; 0x17
    4282:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4284:	20 e0       	ldi	r18, 0x00	; 0
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	40 e8       	ldi	r20, 0x80	; 128
    428a:	5f e3       	ldi	r21, 0x3F	; 63
    428c:	6d 89       	ldd	r22, Y+21	; 0x15
    428e:	7e 89       	ldd	r23, Y+22	; 0x16
    4290:	8f 89       	ldd	r24, Y+23	; 0x17
    4292:	98 8d       	ldd	r25, Y+24	; 0x18
    4294:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    4298:	88 23       	and	r24, r24
    429a:	2c f4       	brge	.+10     	; 0x42a6 <LCDBusyLoop+0x13c>
		__ticks = 1;
    429c:	81 e0       	ldi	r24, 0x01	; 1
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	9a 8f       	std	Y+26, r25	; 0x1a
    42a2:	89 8f       	std	Y+25, r24	; 0x19
    42a4:	3f c0       	rjmp	.+126    	; 0x4324 <LCDBusyLoop+0x1ba>
	else if (__tmp > 65535)
    42a6:	20 e0       	ldi	r18, 0x00	; 0
    42a8:	3f ef       	ldi	r19, 0xFF	; 255
    42aa:	4f e7       	ldi	r20, 0x7F	; 127
    42ac:	57 e4       	ldi	r21, 0x47	; 71
    42ae:	6d 89       	ldd	r22, Y+21	; 0x15
    42b0:	7e 89       	ldd	r23, Y+22	; 0x16
    42b2:	8f 89       	ldd	r24, Y+23	; 0x17
    42b4:	98 8d       	ldd	r25, Y+24	; 0x18
    42b6:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    42ba:	18 16       	cp	r1, r24
    42bc:	4c f5       	brge	.+82     	; 0x4310 <LCDBusyLoop+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42be:	20 e0       	ldi	r18, 0x00	; 0
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	40 e2       	ldi	r20, 0x20	; 32
    42c4:	51 e4       	ldi	r21, 0x41	; 65
    42c6:	69 89       	ldd	r22, Y+17	; 0x11
    42c8:	7a 89       	ldd	r23, Y+18	; 0x12
    42ca:	8b 89       	ldd	r24, Y+19	; 0x13
    42cc:	9c 89       	ldd	r25, Y+20	; 0x14
    42ce:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    42d2:	dc 01       	movw	r26, r24
    42d4:	cb 01       	movw	r24, r22
    42d6:	bc 01       	movw	r22, r24
    42d8:	cd 01       	movw	r24, r26
    42da:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    42de:	dc 01       	movw	r26, r24
    42e0:	cb 01       	movw	r24, r22
    42e2:	9a 8f       	std	Y+26, r25	; 0x1a
    42e4:	89 8f       	std	Y+25, r24	; 0x19
    42e6:	0f c0       	rjmp	.+30     	; 0x4306 <LCDBusyLoop+0x19c>
    42e8:	80 e9       	ldi	r24, 0x90	; 144
    42ea:	91 e0       	ldi	r25, 0x01	; 1
    42ec:	9c 8f       	std	Y+28, r25	; 0x1c
    42ee:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    42f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42f4:	01 97       	sbiw	r24, 0x01	; 1
    42f6:	f1 f7       	brne	.-4      	; 0x42f4 <LCDBusyLoop+0x18a>
    42f8:	9c 8f       	std	Y+28, r25	; 0x1c
    42fa:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42fc:	89 8d       	ldd	r24, Y+25	; 0x19
    42fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4300:	01 97       	sbiw	r24, 0x01	; 1
    4302:	9a 8f       	std	Y+26, r25	; 0x1a
    4304:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4306:	89 8d       	ldd	r24, Y+25	; 0x19
    4308:	9a 8d       	ldd	r25, Y+26	; 0x1a
    430a:	89 2b       	or	r24, r25
    430c:	69 f7       	brne	.-38     	; 0x42e8 <LCDBusyLoop+0x17e>
    430e:	3f c0       	rjmp	.+126    	; 0x438e <LCDBusyLoop+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4310:	6d 89       	ldd	r22, Y+21	; 0x15
    4312:	7e 89       	ldd	r23, Y+22	; 0x16
    4314:	8f 89       	ldd	r24, Y+23	; 0x17
    4316:	98 8d       	ldd	r25, Y+24	; 0x18
    4318:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    431c:	dc 01       	movw	r26, r24
    431e:	cb 01       	movw	r24, r22
    4320:	9a 8f       	std	Y+26, r25	; 0x1a
    4322:	89 8f       	std	Y+25, r24	; 0x19
    4324:	89 8d       	ldd	r24, Y+25	; 0x19
    4326:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4328:	9e 8f       	std	Y+30, r25	; 0x1e
    432a:	8d 8f       	std	Y+29, r24	; 0x1d
    432c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    432e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4330:	01 97       	sbiw	r24, 0x01	; 1
    4332:	f1 f7       	brne	.-4      	; 0x4330 <LCDBusyLoop+0x1c6>
    4334:	9e 8f       	std	Y+30, r25	; 0x1e
    4336:	8d 8f       	std	Y+29, r24	; 0x1d
    4338:	2a c0       	rjmp	.+84     	; 0x438e <LCDBusyLoop+0x224>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	4f e7       	ldi	r20, 0x7F	; 127
    4340:	53 e4       	ldi	r21, 0x43	; 67
    4342:	68 85       	ldd	r22, Y+8	; 0x08
    4344:	79 85       	ldd	r23, Y+9	; 0x09
    4346:	8a 85       	ldd	r24, Y+10	; 0x0a
    4348:	9b 85       	ldd	r25, Y+11	; 0x0b
    434a:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    434e:	18 16       	cp	r1, r24
    4350:	ac f4       	brge	.+42     	; 0x437c <LCDBusyLoop+0x212>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    4352:	6c 85       	ldd	r22, Y+12	; 0x0c
    4354:	7d 85       	ldd	r23, Y+13	; 0x0d
    4356:	8e 85       	ldd	r24, Y+14	; 0x0e
    4358:	9f 85       	ldd	r25, Y+15	; 0x0f
    435a:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    435e:	dc 01       	movw	r26, r24
    4360:	cb 01       	movw	r24, r22
    4362:	98 a3       	std	Y+32, r25	; 0x20
    4364:	8f 8f       	std	Y+31, r24	; 0x1f
    4366:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4368:	98 a1       	ldd	r25, Y+32	; 0x20
    436a:	9a a3       	std	Y+34, r25	; 0x22
    436c:	89 a3       	std	Y+33, r24	; 0x21
    436e:	89 a1       	ldd	r24, Y+33	; 0x21
    4370:	9a a1       	ldd	r25, Y+34	; 0x22
    4372:	01 97       	sbiw	r24, 0x01	; 1
    4374:	f1 f7       	brne	.-4      	; 0x4372 <LCDBusyLoop+0x208>
    4376:	9a a3       	std	Y+34, r25	; 0x22
    4378:	89 a3       	std	Y+33, r24	; 0x21
    437a:	0f c0       	rjmp	.+30     	; 0x439a <LCDBusyLoop+0x230>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    437c:	68 85       	ldd	r22, Y+8	; 0x08
    437e:	79 85       	ldd	r23, Y+9	; 0x09
    4380:	8a 85       	ldd	r24, Y+10	; 0x0a
    4382:	9b 85       	ldd	r25, Y+11	; 0x0b
    4384:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    4388:	dc 01       	movw	r26, r24
    438a:	cb 01       	movw	r24, r22
    438c:	88 8b       	std	Y+16, r24	; 0x10
    438e:	88 89       	ldd	r24, Y+16	; 0x10
    4390:	8b a3       	std	Y+35, r24	; 0x23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4392:	8b a1       	ldd	r24, Y+35	; 0x23
    4394:	8a 95       	dec	r24
    4396:	f1 f7       	brne	.-4      	; 0x4394 <LCDBusyLoop+0x22a>
    4398:	8b a3       	std	Y+35, r24	; 0x23
	_delay_us(0.5);		//tAS

	
	do{

		SET_E();
    439a:	85 e2       	ldi	r24, 0x25	; 37
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	25 e2       	ldi	r18, 0x25	; 37
    43a0:	30 e0       	ldi	r19, 0x00	; 0
    43a2:	f9 01       	movw	r30, r18
    43a4:	20 81       	ld	r18, Z
    43a6:	22 60       	ori	r18, 0x02	; 2
    43a8:	fc 01       	movw	r30, r24
    43aa:	20 83       	st	Z, r18
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	a0 e0       	ldi	r26, 0x00	; 0
    43b2:	bf e3       	ldi	r27, 0x3F	; 63
    43b4:	8c a3       	std	Y+36, r24	; 0x24
    43b6:	9d a3       	std	Y+37, r25	; 0x25
    43b8:	ae a3       	std	Y+38, r26	; 0x26
    43ba:	bf a3       	std	Y+39, r27	; 0x27
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    43bc:	2b ea       	ldi	r18, 0xAB	; 171
    43be:	3a ea       	ldi	r19, 0xAA	; 170
    43c0:	4a ea       	ldi	r20, 0xAA	; 170
    43c2:	50 e4       	ldi	r21, 0x40	; 64
    43c4:	6c a1       	ldd	r22, Y+36	; 0x24
    43c6:	7d a1       	ldd	r23, Y+37	; 0x25
    43c8:	8e a1       	ldd	r24, Y+38	; 0x26
    43ca:	9f a1       	ldd	r25, Y+39	; 0x27
    43cc:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    43d0:	dc 01       	movw	r26, r24
    43d2:	cb 01       	movw	r24, r22
    43d4:	88 a7       	std	Y+40, r24	; 0x28
    43d6:	99 a7       	std	Y+41, r25	; 0x29
    43d8:	aa a7       	std	Y+42, r26	; 0x2a
    43da:	bb a7       	std	Y+43, r27	; 0x2b
	__tmp2 = ((F_CPU) / 4e6) * __us;
    43dc:	20 e0       	ldi	r18, 0x00	; 0
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	40 e8       	ldi	r20, 0x80	; 128
    43e2:	50 e4       	ldi	r21, 0x40	; 64
    43e4:	6c a1       	ldd	r22, Y+36	; 0x24
    43e6:	7d a1       	ldd	r23, Y+37	; 0x25
    43e8:	8e a1       	ldd	r24, Y+38	; 0x26
    43ea:	9f a1       	ldd	r25, Y+39	; 0x27
    43ec:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    43f0:	dc 01       	movw	r26, r24
    43f2:	cb 01       	movw	r24, r22
    43f4:	8c a7       	std	Y+44, r24	; 0x2c
    43f6:	9d a7       	std	Y+45, r25	; 0x2d
    43f8:	ae a7       	std	Y+46, r26	; 0x2e
    43fa:	bf a7       	std	Y+47, r27	; 0x2f
	if (__tmp < 1.0)
    43fc:	20 e0       	ldi	r18, 0x00	; 0
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	40 e8       	ldi	r20, 0x80	; 128
    4402:	5f e3       	ldi	r21, 0x3F	; 63
    4404:	68 a5       	ldd	r22, Y+40	; 0x28
    4406:	79 a5       	ldd	r23, Y+41	; 0x29
    4408:	8a a5       	ldd	r24, Y+42	; 0x2a
    440a:	9b a5       	ldd	r25, Y+43	; 0x2b
    440c:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    4410:	88 23       	and	r24, r24
    4412:	1c f4       	brge	.+6      	; 0x441a <LCDBusyLoop+0x2b0>
		__ticks = 1;
    4414:	81 e0       	ldi	r24, 0x01	; 1
    4416:	88 ab       	std	Y+48, r24	; 0x30
    4418:	d2 c0       	rjmp	.+420    	; 0x45be <LCDBusyLoop+0x454>
	else if (__tmp2 > 65535)
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	3f ef       	ldi	r19, 0xFF	; 255
    441e:	4f e7       	ldi	r20, 0x7F	; 127
    4420:	57 e4       	ldi	r21, 0x47	; 71
    4422:	6c a5       	ldd	r22, Y+44	; 0x2c
    4424:	7d a5       	ldd	r23, Y+45	; 0x2d
    4426:	8e a5       	ldd	r24, Y+46	; 0x2e
    4428:	9f a5       	ldd	r25, Y+47	; 0x2f
    442a:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    442e:	18 16       	cp	r1, r24
    4430:	0c f0       	brlt	.+2      	; 0x4434 <LCDBusyLoop+0x2ca>
    4432:	87 c0       	rjmp	.+270    	; 0x4542 <LCDBusyLoop+0x3d8>
	{
		_delay_ms(__us / 1000.0);
    4434:	20 e0       	ldi	r18, 0x00	; 0
    4436:	30 e0       	ldi	r19, 0x00	; 0
    4438:	4a e7       	ldi	r20, 0x7A	; 122
    443a:	54 e4       	ldi	r21, 0x44	; 68
    443c:	6c a1       	ldd	r22, Y+36	; 0x24
    443e:	7d a1       	ldd	r23, Y+37	; 0x25
    4440:	8e a1       	ldd	r24, Y+38	; 0x26
    4442:	9f a1       	ldd	r25, Y+39	; 0x27
    4444:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    4448:	dc 01       	movw	r26, r24
    444a:	cb 01       	movw	r24, r22
    444c:	89 ab       	std	Y+49, r24	; 0x31
    444e:	9a ab       	std	Y+50, r25	; 0x32
    4450:	ab ab       	std	Y+51, r26	; 0x33
    4452:	bc ab       	std	Y+52, r27	; 0x34

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4454:	20 e0       	ldi	r18, 0x00	; 0
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	4a e7       	ldi	r20, 0x7A	; 122
    445a:	55 e4       	ldi	r21, 0x45	; 69
    445c:	69 a9       	ldd	r22, Y+49	; 0x31
    445e:	7a a9       	ldd	r23, Y+50	; 0x32
    4460:	8b a9       	ldd	r24, Y+51	; 0x33
    4462:	9c a9       	ldd	r25, Y+52	; 0x34
    4464:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    4468:	dc 01       	movw	r26, r24
    446a:	cb 01       	movw	r24, r22
    446c:	8d ab       	std	Y+53, r24	; 0x35
    446e:	9e ab       	std	Y+54, r25	; 0x36
    4470:	af ab       	std	Y+55, r26	; 0x37
    4472:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    4474:	20 e0       	ldi	r18, 0x00	; 0
    4476:	30 e0       	ldi	r19, 0x00	; 0
    4478:	40 e8       	ldi	r20, 0x80	; 128
    447a:	5f e3       	ldi	r21, 0x3F	; 63
    447c:	6d a9       	ldd	r22, Y+53	; 0x35
    447e:	7e a9       	ldd	r23, Y+54	; 0x36
    4480:	8f a9       	ldd	r24, Y+55	; 0x37
    4482:	98 ad       	ldd	r25, Y+56	; 0x38
    4484:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    4488:	88 23       	and	r24, r24
    448a:	2c f4       	brge	.+10     	; 0x4496 <LCDBusyLoop+0x32c>
		__ticks = 1;
    448c:	81 e0       	ldi	r24, 0x01	; 1
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	9a af       	std	Y+58, r25	; 0x3a
    4492:	89 af       	std	Y+57, r24	; 0x39
    4494:	45 c0       	rjmp	.+138    	; 0x4520 <LCDBusyLoop+0x3b6>
	else if (__tmp > 65535)
    4496:	20 e0       	ldi	r18, 0x00	; 0
    4498:	3f ef       	ldi	r19, 0xFF	; 255
    449a:	4f e7       	ldi	r20, 0x7F	; 127
    449c:	57 e4       	ldi	r21, 0x47	; 71
    449e:	6d a9       	ldd	r22, Y+53	; 0x35
    44a0:	7e a9       	ldd	r23, Y+54	; 0x36
    44a2:	8f a9       	ldd	r24, Y+55	; 0x37
    44a4:	98 ad       	ldd	r25, Y+56	; 0x38
    44a6:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    44aa:	18 16       	cp	r1, r24
    44ac:	7c f5       	brge	.+94     	; 0x450c <LCDBusyLoop+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ae:	20 e0       	ldi	r18, 0x00	; 0
    44b0:	30 e0       	ldi	r19, 0x00	; 0
    44b2:	40 e2       	ldi	r20, 0x20	; 32
    44b4:	51 e4       	ldi	r21, 0x41	; 65
    44b6:	69 a9       	ldd	r22, Y+49	; 0x31
    44b8:	7a a9       	ldd	r23, Y+50	; 0x32
    44ba:	8b a9       	ldd	r24, Y+51	; 0x33
    44bc:	9c a9       	ldd	r25, Y+52	; 0x34
    44be:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    44c2:	dc 01       	movw	r26, r24
    44c4:	cb 01       	movw	r24, r22
    44c6:	bc 01       	movw	r22, r24
    44c8:	cd 01       	movw	r24, r26
    44ca:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    44ce:	dc 01       	movw	r26, r24
    44d0:	cb 01       	movw	r24, r22
    44d2:	9a af       	std	Y+58, r25	; 0x3a
    44d4:	89 af       	std	Y+57, r24	; 0x39
    44d6:	0f c0       	rjmp	.+30     	; 0x44f6 <LCDBusyLoop+0x38c>
    44d8:	80 e9       	ldi	r24, 0x90	; 144
    44da:	91 e0       	ldi	r25, 0x01	; 1
    44dc:	9c af       	std	Y+60, r25	; 0x3c
    44de:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    44e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    44e2:	9c ad       	ldd	r25, Y+60	; 0x3c
    44e4:	01 97       	sbiw	r24, 0x01	; 1
    44e6:	f1 f7       	brne	.-4      	; 0x44e4 <LCDBusyLoop+0x37a>
    44e8:	9c af       	std	Y+60, r25	; 0x3c
    44ea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ec:	89 ad       	ldd	r24, Y+57	; 0x39
    44ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    44f0:	01 97       	sbiw	r24, 0x01	; 1
    44f2:	9a af       	std	Y+58, r25	; 0x3a
    44f4:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44f6:	89 ad       	ldd	r24, Y+57	; 0x39
    44f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    44fa:	89 2b       	or	r24, r25
    44fc:	69 f7       	brne	.-38     	; 0x44d8 <LCDBusyLoop+0x36e>
    44fe:	ce 01       	movw	r24, r28
    4500:	8c 5b       	subi	r24, 0xBC	; 188
    4502:	9f 4f       	sbci	r25, 0xFF	; 255
    4504:	fc 01       	movw	r30, r24
    4506:	80 81       	ld	r24, Z
    4508:	88 ab       	std	Y+48, r24	; 0x30
    450a:	59 c0       	rjmp	.+178    	; 0x45be <LCDBusyLoop+0x454>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    450c:	6d a9       	ldd	r22, Y+53	; 0x35
    450e:	7e a9       	ldd	r23, Y+54	; 0x36
    4510:	8f a9       	ldd	r24, Y+55	; 0x37
    4512:	98 ad       	ldd	r25, Y+56	; 0x38
    4514:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    4518:	dc 01       	movw	r26, r24
    451a:	cb 01       	movw	r24, r22
    451c:	9a af       	std	Y+58, r25	; 0x3a
    451e:	89 af       	std	Y+57, r24	; 0x39
    4520:	89 ad       	ldd	r24, Y+57	; 0x39
    4522:	9a ad       	ldd	r25, Y+58	; 0x3a
    4524:	9e af       	std	Y+62, r25	; 0x3e
    4526:	8d af       	std	Y+61, r24	; 0x3d
    4528:	8d ad       	ldd	r24, Y+61	; 0x3d
    452a:	9e ad       	ldd	r25, Y+62	; 0x3e
    452c:	01 97       	sbiw	r24, 0x01	; 1
    452e:	f1 f7       	brne	.-4      	; 0x452c <LCDBusyLoop+0x3c2>
    4530:	9e af       	std	Y+62, r25	; 0x3e
    4532:	8d af       	std	Y+61, r24	; 0x3d
    4534:	ce 01       	movw	r24, r28
    4536:	8c 5b       	subi	r24, 0xBC	; 188
    4538:	9f 4f       	sbci	r25, 0xFF	; 255
    453a:	fc 01       	movw	r30, r24
    453c:	80 81       	ld	r24, Z
    453e:	88 ab       	std	Y+48, r24	; 0x30
    4540:	3e c0       	rjmp	.+124    	; 0x45be <LCDBusyLoop+0x454>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    4542:	20 e0       	ldi	r18, 0x00	; 0
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	4f e7       	ldi	r20, 0x7F	; 127
    4548:	53 e4       	ldi	r21, 0x43	; 67
    454a:	68 a5       	ldd	r22, Y+40	; 0x28
    454c:	79 a5       	ldd	r23, Y+41	; 0x29
    454e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4550:	9b a5       	ldd	r25, Y+43	; 0x2b
    4552:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    4556:	18 16       	cp	r1, r24
    4558:	4c f5       	brge	.+82     	; 0x45ac <LCDBusyLoop+0x442>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    455a:	6c a5       	ldd	r22, Y+44	; 0x2c
    455c:	7d a5       	ldd	r23, Y+45	; 0x2d
    455e:	8e a5       	ldd	r24, Y+46	; 0x2e
    4560:	9f a5       	ldd	r25, Y+47	; 0x2f
    4562:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    4566:	dc 01       	movw	r26, r24
    4568:	cb 01       	movw	r24, r22
    456a:	9e 01       	movw	r18, r28
    456c:	21 5c       	subi	r18, 0xC1	; 193
    456e:	3f 4f       	sbci	r19, 0xFF	; 255
    4570:	f9 01       	movw	r30, r18
    4572:	91 83       	std	Z+1, r25	; 0x01
    4574:	80 83       	st	Z, r24
    4576:	ce 01       	movw	r24, r28
    4578:	8f 5b       	subi	r24, 0xBF	; 191
    457a:	9f 4f       	sbci	r25, 0xFF	; 255
    457c:	9e 01       	movw	r18, r28
    457e:	21 5c       	subi	r18, 0xC1	; 193
    4580:	3f 4f       	sbci	r19, 0xFF	; 255
    4582:	f9 01       	movw	r30, r18
    4584:	20 81       	ld	r18, Z
    4586:	31 81       	ldd	r19, Z+1	; 0x01
    4588:	fc 01       	movw	r30, r24
    458a:	31 83       	std	Z+1, r19	; 0x01
    458c:	20 83       	st	Z, r18
    458e:	ce 01       	movw	r24, r28
    4590:	8f 5b       	subi	r24, 0xBF	; 191
    4592:	9f 4f       	sbci	r25, 0xFF	; 255
    4594:	fc 01       	movw	r30, r24
    4596:	80 81       	ld	r24, Z
    4598:	91 81       	ldd	r25, Z+1	; 0x01
    459a:	01 97       	sbiw	r24, 0x01	; 1
    459c:	f1 f7       	brne	.-4      	; 0x459a <LCDBusyLoop+0x430>
    459e:	9e 01       	movw	r18, r28
    45a0:	2f 5b       	subi	r18, 0xBF	; 191
    45a2:	3f 4f       	sbci	r19, 0xFF	; 255
    45a4:	f9 01       	movw	r30, r18
    45a6:	91 83       	std	Z+1, r25	; 0x01
    45a8:	80 83       	st	Z, r24
    45aa:	1c c0       	rjmp	.+56     	; 0x45e4 <LCDBusyLoop+0x47a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    45ac:	68 a5       	ldd	r22, Y+40	; 0x28
    45ae:	79 a5       	ldd	r23, Y+41	; 0x29
    45b0:	8a a5       	ldd	r24, Y+42	; 0x2a
    45b2:	9b a5       	ldd	r25, Y+43	; 0x2b
    45b4:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    45b8:	dc 01       	movw	r26, r24
    45ba:	cb 01       	movw	r24, r22
    45bc:	88 ab       	std	Y+48, r24	; 0x30
    45be:	ce 01       	movw	r24, r28
    45c0:	8d 5b       	subi	r24, 0xBD	; 189
    45c2:	9f 4f       	sbci	r25, 0xFF	; 255
    45c4:	28 a9       	ldd	r18, Y+48	; 0x30
    45c6:	fc 01       	movw	r30, r24
    45c8:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    45ca:	ce 01       	movw	r24, r28
    45cc:	8d 5b       	subi	r24, 0xBD	; 189
    45ce:	9f 4f       	sbci	r25, 0xFF	; 255
    45d0:	fc 01       	movw	r30, r24
    45d2:	80 81       	ld	r24, Z
    45d4:	28 2f       	mov	r18, r24
    45d6:	2a 95       	dec	r18
    45d8:	f1 f7       	brne	.-4      	; 0x45d6 <LCDBusyLoop+0x46c>
    45da:	ce 01       	movw	r24, r28
    45dc:	8d 5b       	subi	r24, 0xBD	; 189
    45de:	9f 4f       	sbci	r25, 0xFF	; 255
    45e0:	fc 01       	movw	r30, r24
    45e2:	20 83       	st	Z, r18

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
    45e4:	89 e2       	ldi	r24, 0x29	; 41
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	fc 01       	movw	r30, r24
    45ea:	80 81       	ld	r24, Z
    45ec:	82 95       	swap	r24
    45ee:	8f 70       	andi	r24, 0x0F	; 15
    45f0:	89 83       	std	Y+1, r24	; 0x01
		status=status<<4;
    45f2:	89 81       	ldd	r24, Y+1	; 0x01
    45f4:	82 95       	swap	r24
    45f6:	80 7f       	andi	r24, 0xF0	; 240
    45f8:	89 83       	std	Y+1, r24	; 0x01
    45fa:	9e 01       	movw	r18, r28
    45fc:	2b 5b       	subi	r18, 0xBB	; 187
    45fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	a0 e0       	ldi	r26, 0x00	; 0
    4606:	bf e3       	ldi	r27, 0x3F	; 63
    4608:	f9 01       	movw	r30, r18
    460a:	80 83       	st	Z, r24
    460c:	91 83       	std	Z+1, r25	; 0x01
    460e:	a2 83       	std	Z+2, r26	; 0x02
    4610:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    4612:	8e 01       	movw	r16, r28
    4614:	07 5b       	subi	r16, 0xB7	; 183
    4616:	1f 4f       	sbci	r17, 0xFF	; 255
    4618:	ce 01       	movw	r24, r28
    461a:	8b 5b       	subi	r24, 0xBB	; 187
    461c:	9f 4f       	sbci	r25, 0xFF	; 255
    461e:	2b ea       	ldi	r18, 0xAB	; 171
    4620:	3a ea       	ldi	r19, 0xAA	; 170
    4622:	4a ea       	ldi	r20, 0xAA	; 170
    4624:	50 e4       	ldi	r21, 0x40	; 64
    4626:	fc 01       	movw	r30, r24
    4628:	60 81       	ld	r22, Z
    462a:	71 81       	ldd	r23, Z+1	; 0x01
    462c:	82 81       	ldd	r24, Z+2	; 0x02
    462e:	93 81       	ldd	r25, Z+3	; 0x03
    4630:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    4634:	dc 01       	movw	r26, r24
    4636:	cb 01       	movw	r24, r22
    4638:	f8 01       	movw	r30, r16
    463a:	80 83       	st	Z, r24
    463c:	91 83       	std	Z+1, r25	; 0x01
    463e:	a2 83       	std	Z+2, r26	; 0x02
    4640:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    4642:	8e 01       	movw	r16, r28
    4644:	03 5b       	subi	r16, 0xB3	; 179
    4646:	1f 4f       	sbci	r17, 0xFF	; 255
    4648:	ce 01       	movw	r24, r28
    464a:	8b 5b       	subi	r24, 0xBB	; 187
    464c:	9f 4f       	sbci	r25, 0xFF	; 255
    464e:	20 e0       	ldi	r18, 0x00	; 0
    4650:	30 e0       	ldi	r19, 0x00	; 0
    4652:	40 e8       	ldi	r20, 0x80	; 128
    4654:	50 e4       	ldi	r21, 0x40	; 64
    4656:	fc 01       	movw	r30, r24
    4658:	60 81       	ld	r22, Z
    465a:	71 81       	ldd	r23, Z+1	; 0x01
    465c:	82 81       	ldd	r24, Z+2	; 0x02
    465e:	93 81       	ldd	r25, Z+3	; 0x03
    4660:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    4664:	dc 01       	movw	r26, r24
    4666:	cb 01       	movw	r24, r22
    4668:	f8 01       	movw	r30, r16
    466a:	80 83       	st	Z, r24
    466c:	91 83       	std	Z+1, r25	; 0x01
    466e:	a2 83       	std	Z+2, r26	; 0x02
    4670:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4672:	ce 01       	movw	r24, r28
    4674:	87 5b       	subi	r24, 0xB7	; 183
    4676:	9f 4f       	sbci	r25, 0xFF	; 255
    4678:	20 e0       	ldi	r18, 0x00	; 0
    467a:	30 e0       	ldi	r19, 0x00	; 0
    467c:	40 e8       	ldi	r20, 0x80	; 128
    467e:	5f e3       	ldi	r21, 0x3F	; 63
    4680:	fc 01       	movw	r30, r24
    4682:	60 81       	ld	r22, Z
    4684:	71 81       	ldd	r23, Z+1	; 0x01
    4686:	82 81       	ldd	r24, Z+2	; 0x02
    4688:	93 81       	ldd	r25, Z+3	; 0x03
    468a:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    468e:	88 23       	and	r24, r24
    4690:	3c f4       	brge	.+14     	; 0x46a0 <LCDBusyLoop+0x536>
		__ticks = 1;
    4692:	ce 01       	movw	r24, r28
    4694:	8f 5a       	subi	r24, 0xAF	; 175
    4696:	9f 4f       	sbci	r25, 0xFF	; 255
    4698:	21 e0       	ldi	r18, 0x01	; 1
    469a:	fc 01       	movw	r30, r24
    469c:	20 83       	st	Z, r18
    469e:	44 c1       	rjmp	.+648    	; 0x4928 <LCDBusyLoop+0x7be>
	else if (__tmp2 > 65535)
    46a0:	ce 01       	movw	r24, r28
    46a2:	83 5b       	subi	r24, 0xB3	; 179
    46a4:	9f 4f       	sbci	r25, 0xFF	; 255
    46a6:	20 e0       	ldi	r18, 0x00	; 0
    46a8:	3f ef       	ldi	r19, 0xFF	; 255
    46aa:	4f e7       	ldi	r20, 0x7F	; 127
    46ac:	57 e4       	ldi	r21, 0x47	; 71
    46ae:	fc 01       	movw	r30, r24
    46b0:	60 81       	ld	r22, Z
    46b2:	71 81       	ldd	r23, Z+1	; 0x01
    46b4:	82 81       	ldd	r24, Z+2	; 0x02
    46b6:	93 81       	ldd	r25, Z+3	; 0x03
    46b8:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    46bc:	18 16       	cp	r1, r24
    46be:	0c f0       	brlt	.+2      	; 0x46c2 <LCDBusyLoop+0x558>
    46c0:	e5 c0       	rjmp	.+458    	; 0x488c <LCDBusyLoop+0x722>
	{
		_delay_ms(__us / 1000.0);
    46c2:	ce 01       	movw	r24, r28
    46c4:	8b 5b       	subi	r24, 0xBB	; 187
    46c6:	9f 4f       	sbci	r25, 0xFF	; 255
    46c8:	20 e0       	ldi	r18, 0x00	; 0
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	4a e7       	ldi	r20, 0x7A	; 122
    46ce:	54 e4       	ldi	r21, 0x44	; 68
    46d0:	fc 01       	movw	r30, r24
    46d2:	60 81       	ld	r22, Z
    46d4:	71 81       	ldd	r23, Z+1	; 0x01
    46d6:	82 81       	ldd	r24, Z+2	; 0x02
    46d8:	93 81       	ldd	r25, Z+3	; 0x03
    46da:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    46de:	dc 01       	movw	r26, r24
    46e0:	cb 01       	movw	r24, r22
    46e2:	9e 01       	movw	r18, r28
    46e4:	2e 5a       	subi	r18, 0xAE	; 174
    46e6:	3f 4f       	sbci	r19, 0xFF	; 255
    46e8:	f9 01       	movw	r30, r18
    46ea:	80 83       	st	Z, r24
    46ec:	91 83       	std	Z+1, r25	; 0x01
    46ee:	a2 83       	std	Z+2, r26	; 0x02
    46f0:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    46f2:	8e 01       	movw	r16, r28
    46f4:	0a 5a       	subi	r16, 0xAA	; 170
    46f6:	1f 4f       	sbci	r17, 0xFF	; 255
    46f8:	ce 01       	movw	r24, r28
    46fa:	8e 5a       	subi	r24, 0xAE	; 174
    46fc:	9f 4f       	sbci	r25, 0xFF	; 255
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	4a e7       	ldi	r20, 0x7A	; 122
    4704:	55 e4       	ldi	r21, 0x45	; 69
    4706:	fc 01       	movw	r30, r24
    4708:	60 81       	ld	r22, Z
    470a:	71 81       	ldd	r23, Z+1	; 0x01
    470c:	82 81       	ldd	r24, Z+2	; 0x02
    470e:	93 81       	ldd	r25, Z+3	; 0x03
    4710:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    4714:	dc 01       	movw	r26, r24
    4716:	cb 01       	movw	r24, r22
    4718:	f8 01       	movw	r30, r16
    471a:	80 83       	st	Z, r24
    471c:	91 83       	std	Z+1, r25	; 0x01
    471e:	a2 83       	std	Z+2, r26	; 0x02
    4720:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4722:	ce 01       	movw	r24, r28
    4724:	8a 5a       	subi	r24, 0xAA	; 170
    4726:	9f 4f       	sbci	r25, 0xFF	; 255
    4728:	20 e0       	ldi	r18, 0x00	; 0
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	40 e8       	ldi	r20, 0x80	; 128
    472e:	5f e3       	ldi	r21, 0x3F	; 63
    4730:	fc 01       	movw	r30, r24
    4732:	60 81       	ld	r22, Z
    4734:	71 81       	ldd	r23, Z+1	; 0x01
    4736:	82 81       	ldd	r24, Z+2	; 0x02
    4738:	93 81       	ldd	r25, Z+3	; 0x03
    473a:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    473e:	88 23       	and	r24, r24
    4740:	4c f4       	brge	.+18     	; 0x4754 <LCDBusyLoop+0x5ea>
		__ticks = 1;
    4742:	ce 01       	movw	r24, r28
    4744:	86 5a       	subi	r24, 0xA6	; 166
    4746:	9f 4f       	sbci	r25, 0xFF	; 255
    4748:	21 e0       	ldi	r18, 0x01	; 1
    474a:	30 e0       	ldi	r19, 0x00	; 0
    474c:	fc 01       	movw	r30, r24
    474e:	31 83       	std	Z+1, r19	; 0x01
    4750:	20 83       	st	Z, r18
    4752:	77 c0       	rjmp	.+238    	; 0x4842 <LCDBusyLoop+0x6d8>
	else if (__tmp > 65535)
    4754:	ce 01       	movw	r24, r28
    4756:	8a 5a       	subi	r24, 0xAA	; 170
    4758:	9f 4f       	sbci	r25, 0xFF	; 255
    475a:	20 e0       	ldi	r18, 0x00	; 0
    475c:	3f ef       	ldi	r19, 0xFF	; 255
    475e:	4f e7       	ldi	r20, 0x7F	; 127
    4760:	57 e4       	ldi	r21, 0x47	; 71
    4762:	fc 01       	movw	r30, r24
    4764:	60 81       	ld	r22, Z
    4766:	71 81       	ldd	r23, Z+1	; 0x01
    4768:	82 81       	ldd	r24, Z+2	; 0x02
    476a:	93 81       	ldd	r25, Z+3	; 0x03
    476c:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    4770:	18 16       	cp	r1, r24
    4772:	0c f0       	brlt	.+2      	; 0x4776 <LCDBusyLoop+0x60c>
    4774:	54 c0       	rjmp	.+168    	; 0x481e <LCDBusyLoop+0x6b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4776:	ce 01       	movw	r24, r28
    4778:	8e 5a       	subi	r24, 0xAE	; 174
    477a:	9f 4f       	sbci	r25, 0xFF	; 255
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	40 e2       	ldi	r20, 0x20	; 32
    4782:	51 e4       	ldi	r21, 0x41	; 65
    4784:	fc 01       	movw	r30, r24
    4786:	60 81       	ld	r22, Z
    4788:	71 81       	ldd	r23, Z+1	; 0x01
    478a:	82 81       	ldd	r24, Z+2	; 0x02
    478c:	93 81       	ldd	r25, Z+3	; 0x03
    478e:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    4792:	dc 01       	movw	r26, r24
    4794:	cb 01       	movw	r24, r22
    4796:	8e 01       	movw	r16, r28
    4798:	06 5a       	subi	r16, 0xA6	; 166
    479a:	1f 4f       	sbci	r17, 0xFF	; 255
    479c:	bc 01       	movw	r22, r24
    479e:	cd 01       	movw	r24, r26
    47a0:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    47a4:	dc 01       	movw	r26, r24
    47a6:	cb 01       	movw	r24, r22
    47a8:	f8 01       	movw	r30, r16
    47aa:	91 83       	std	Z+1, r25	; 0x01
    47ac:	80 83       	st	Z, r24
    47ae:	24 c0       	rjmp	.+72     	; 0x47f8 <LCDBusyLoop+0x68e>
    47b0:	ce 01       	movw	r24, r28
    47b2:	84 5a       	subi	r24, 0xA4	; 164
    47b4:	9f 4f       	sbci	r25, 0xFF	; 255
    47b6:	20 e9       	ldi	r18, 0x90	; 144
    47b8:	31 e0       	ldi	r19, 0x01	; 1
    47ba:	fc 01       	movw	r30, r24
    47bc:	31 83       	std	Z+1, r19	; 0x01
    47be:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    47c0:	ce 01       	movw	r24, r28
    47c2:	84 5a       	subi	r24, 0xA4	; 164
    47c4:	9f 4f       	sbci	r25, 0xFF	; 255
    47c6:	fc 01       	movw	r30, r24
    47c8:	80 81       	ld	r24, Z
    47ca:	91 81       	ldd	r25, Z+1	; 0x01
    47cc:	01 97       	sbiw	r24, 0x01	; 1
    47ce:	f1 f7       	brne	.-4      	; 0x47cc <LCDBusyLoop+0x662>
    47d0:	9e 01       	movw	r18, r28
    47d2:	24 5a       	subi	r18, 0xA4	; 164
    47d4:	3f 4f       	sbci	r19, 0xFF	; 255
    47d6:	f9 01       	movw	r30, r18
    47d8:	91 83       	std	Z+1, r25	; 0x01
    47da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47dc:	ce 01       	movw	r24, r28
    47de:	86 5a       	subi	r24, 0xA6	; 166
    47e0:	9f 4f       	sbci	r25, 0xFF	; 255
    47e2:	9e 01       	movw	r18, r28
    47e4:	26 5a       	subi	r18, 0xA6	; 166
    47e6:	3f 4f       	sbci	r19, 0xFF	; 255
    47e8:	f9 01       	movw	r30, r18
    47ea:	20 81       	ld	r18, Z
    47ec:	31 81       	ldd	r19, Z+1	; 0x01
    47ee:	21 50       	subi	r18, 0x01	; 1
    47f0:	31 09       	sbc	r19, r1
    47f2:	fc 01       	movw	r30, r24
    47f4:	31 83       	std	Z+1, r19	; 0x01
    47f6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47f8:	ce 01       	movw	r24, r28
    47fa:	86 5a       	subi	r24, 0xA6	; 166
    47fc:	9f 4f       	sbci	r25, 0xFF	; 255
    47fe:	fc 01       	movw	r30, r24
    4800:	80 81       	ld	r24, Z
    4802:	91 81       	ldd	r25, Z+1	; 0x01
    4804:	89 2b       	or	r24, r25
    4806:	a1 f6       	brne	.-88     	; 0x47b0 <LCDBusyLoop+0x646>
    4808:	ce 01       	movw	r24, r28
    480a:	8f 5a       	subi	r24, 0xAF	; 175
    480c:	9f 4f       	sbci	r25, 0xFF	; 255
    480e:	9e 01       	movw	r18, r28
    4810:	2b 59       	subi	r18, 0x9B	; 155
    4812:	3f 4f       	sbci	r19, 0xFF	; 255
    4814:	f9 01       	movw	r30, r18
    4816:	20 81       	ld	r18, Z
    4818:	fc 01       	movw	r30, r24
    481a:	20 83       	st	Z, r18
    481c:	85 c0       	rjmp	.+266    	; 0x4928 <LCDBusyLoop+0x7be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    481e:	8e 01       	movw	r16, r28
    4820:	06 5a       	subi	r16, 0xA6	; 166
    4822:	1f 4f       	sbci	r17, 0xFF	; 255
    4824:	ce 01       	movw	r24, r28
    4826:	8a 5a       	subi	r24, 0xAA	; 170
    4828:	9f 4f       	sbci	r25, 0xFF	; 255
    482a:	fc 01       	movw	r30, r24
    482c:	60 81       	ld	r22, Z
    482e:	71 81       	ldd	r23, Z+1	; 0x01
    4830:	82 81       	ldd	r24, Z+2	; 0x02
    4832:	93 81       	ldd	r25, Z+3	; 0x03
    4834:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    4838:	dc 01       	movw	r26, r24
    483a:	cb 01       	movw	r24, r22
    483c:	f8 01       	movw	r30, r16
    483e:	91 83       	std	Z+1, r25	; 0x01
    4840:	80 83       	st	Z, r24
    4842:	ce 01       	movw	r24, r28
    4844:	82 5a       	subi	r24, 0xA2	; 162
    4846:	9f 4f       	sbci	r25, 0xFF	; 255
    4848:	9e 01       	movw	r18, r28
    484a:	26 5a       	subi	r18, 0xA6	; 166
    484c:	3f 4f       	sbci	r19, 0xFF	; 255
    484e:	f9 01       	movw	r30, r18
    4850:	20 81       	ld	r18, Z
    4852:	31 81       	ldd	r19, Z+1	; 0x01
    4854:	fc 01       	movw	r30, r24
    4856:	31 83       	std	Z+1, r19	; 0x01
    4858:	20 83       	st	Z, r18
    485a:	ce 01       	movw	r24, r28
    485c:	82 5a       	subi	r24, 0xA2	; 162
    485e:	9f 4f       	sbci	r25, 0xFF	; 255
    4860:	fc 01       	movw	r30, r24
    4862:	80 81       	ld	r24, Z
    4864:	91 81       	ldd	r25, Z+1	; 0x01
    4866:	01 97       	sbiw	r24, 0x01	; 1
    4868:	f1 f7       	brne	.-4      	; 0x4866 <LCDBusyLoop+0x6fc>
    486a:	9e 01       	movw	r18, r28
    486c:	22 5a       	subi	r18, 0xA2	; 162
    486e:	3f 4f       	sbci	r19, 0xFF	; 255
    4870:	f9 01       	movw	r30, r18
    4872:	91 83       	std	Z+1, r25	; 0x01
    4874:	80 83       	st	Z, r24
    4876:	ce 01       	movw	r24, r28
    4878:	8f 5a       	subi	r24, 0xAF	; 175
    487a:	9f 4f       	sbci	r25, 0xFF	; 255
    487c:	9e 01       	movw	r18, r28
    487e:	2b 59       	subi	r18, 0x9B	; 155
    4880:	3f 4f       	sbci	r19, 0xFF	; 255
    4882:	f9 01       	movw	r30, r18
    4884:	20 81       	ld	r18, Z
    4886:	fc 01       	movw	r30, r24
    4888:	20 83       	st	Z, r18
    488a:	4e c0       	rjmp	.+156    	; 0x4928 <LCDBusyLoop+0x7be>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    488c:	ce 01       	movw	r24, r28
    488e:	87 5b       	subi	r24, 0xB7	; 183
    4890:	9f 4f       	sbci	r25, 0xFF	; 255
    4892:	20 e0       	ldi	r18, 0x00	; 0
    4894:	30 e0       	ldi	r19, 0x00	; 0
    4896:	4f e7       	ldi	r20, 0x7F	; 127
    4898:	53 e4       	ldi	r21, 0x43	; 67
    489a:	fc 01       	movw	r30, r24
    489c:	60 81       	ld	r22, Z
    489e:	71 81       	ldd	r23, Z+1	; 0x01
    48a0:	82 81       	ldd	r24, Z+2	; 0x02
    48a2:	93 81       	ldd	r25, Z+3	; 0x03
    48a4:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    48a8:	18 16       	cp	r1, r24
    48aa:	6c f5       	brge	.+90     	; 0x4906 <LCDBusyLoop+0x79c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    48ac:	8e 01       	movw	r16, r28
    48ae:	00 5a       	subi	r16, 0xA0	; 160
    48b0:	1f 4f       	sbci	r17, 0xFF	; 255
    48b2:	ce 01       	movw	r24, r28
    48b4:	83 5b       	subi	r24, 0xB3	; 179
    48b6:	9f 4f       	sbci	r25, 0xFF	; 255
    48b8:	fc 01       	movw	r30, r24
    48ba:	60 81       	ld	r22, Z
    48bc:	71 81       	ldd	r23, Z+1	; 0x01
    48be:	82 81       	ldd	r24, Z+2	; 0x02
    48c0:	93 81       	ldd	r25, Z+3	; 0x03
    48c2:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    48c6:	dc 01       	movw	r26, r24
    48c8:	cb 01       	movw	r24, r22
    48ca:	f8 01       	movw	r30, r16
    48cc:	91 83       	std	Z+1, r25	; 0x01
    48ce:	80 83       	st	Z, r24
    48d0:	ce 01       	movw	r24, r28
    48d2:	8e 59       	subi	r24, 0x9E	; 158
    48d4:	9f 4f       	sbci	r25, 0xFF	; 255
    48d6:	9e 01       	movw	r18, r28
    48d8:	20 5a       	subi	r18, 0xA0	; 160
    48da:	3f 4f       	sbci	r19, 0xFF	; 255
    48dc:	f9 01       	movw	r30, r18
    48de:	20 81       	ld	r18, Z
    48e0:	31 81       	ldd	r19, Z+1	; 0x01
    48e2:	fc 01       	movw	r30, r24
    48e4:	31 83       	std	Z+1, r19	; 0x01
    48e6:	20 83       	st	Z, r18
    48e8:	ce 01       	movw	r24, r28
    48ea:	8e 59       	subi	r24, 0x9E	; 158
    48ec:	9f 4f       	sbci	r25, 0xFF	; 255
    48ee:	fc 01       	movw	r30, r24
    48f0:	80 81       	ld	r24, Z
    48f2:	91 81       	ldd	r25, Z+1	; 0x01
    48f4:	01 97       	sbiw	r24, 0x01	; 1
    48f6:	f1 f7       	brne	.-4      	; 0x48f4 <LCDBusyLoop+0x78a>
    48f8:	9e 01       	movw	r18, r28
    48fa:	2e 59       	subi	r18, 0x9E	; 158
    48fc:	3f 4f       	sbci	r19, 0xFF	; 255
    48fe:	f9 01       	movw	r30, r18
    4900:	91 83       	std	Z+1, r25	; 0x01
    4902:	80 83       	st	Z, r24
    4904:	28 c0       	rjmp	.+80     	; 0x4956 <LCDBusyLoop+0x7ec>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4906:	8e 01       	movw	r16, r28
    4908:	0f 5a       	subi	r16, 0xAF	; 175
    490a:	1f 4f       	sbci	r17, 0xFF	; 255
    490c:	ce 01       	movw	r24, r28
    490e:	87 5b       	subi	r24, 0xB7	; 183
    4910:	9f 4f       	sbci	r25, 0xFF	; 255
    4912:	fc 01       	movw	r30, r24
    4914:	60 81       	ld	r22, Z
    4916:	71 81       	ldd	r23, Z+1	; 0x01
    4918:	82 81       	ldd	r24, Z+2	; 0x02
    491a:	93 81       	ldd	r25, Z+3	; 0x03
    491c:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    4920:	dc 01       	movw	r26, r24
    4922:	cb 01       	movw	r24, r22
    4924:	f8 01       	movw	r30, r16
    4926:	80 83       	st	Z, r24
    4928:	ce 01       	movw	r24, r28
    492a:	8c 59       	subi	r24, 0x9C	; 156
    492c:	9f 4f       	sbci	r25, 0xFF	; 255
    492e:	9e 01       	movw	r18, r28
    4930:	2f 5a       	subi	r18, 0xAF	; 175
    4932:	3f 4f       	sbci	r19, 0xFF	; 255
    4934:	f9 01       	movw	r30, r18
    4936:	20 81       	ld	r18, Z
    4938:	fc 01       	movw	r30, r24
    493a:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    493c:	ce 01       	movw	r24, r28
    493e:	8c 59       	subi	r24, 0x9C	; 156
    4940:	9f 4f       	sbci	r25, 0xFF	; 255
    4942:	fc 01       	movw	r30, r24
    4944:	80 81       	ld	r24, Z
    4946:	28 2f       	mov	r18, r24
    4948:	2a 95       	dec	r18
    494a:	f1 f7       	brne	.-4      	; 0x4948 <LCDBusyLoop+0x7de>
    494c:	ce 01       	movw	r24, r28
    494e:	8c 59       	subi	r24, 0x9C	; 156
    4950:	9f 4f       	sbci	r25, 0xFF	; 255
    4952:	fc 01       	movw	r30, r24
    4954:	20 83       	st	Z, r18

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
    4956:	85 e2       	ldi	r24, 0x25	; 37
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	25 e2       	ldi	r18, 0x25	; 37
    495c:	30 e0       	ldi	r19, 0x00	; 0
    495e:	f9 01       	movw	r30, r18
    4960:	20 81       	ld	r18, Z
    4962:	2d 7f       	andi	r18, 0xFD	; 253
    4964:	fc 01       	movw	r30, r24
    4966:	20 83       	st	Z, r18
    4968:	9e 01       	movw	r18, r28
    496a:	2a 59       	subi	r18, 0x9A	; 154
    496c:	3f 4f       	sbci	r19, 0xFF	; 255
    496e:	80 e0       	ldi	r24, 0x00	; 0
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	a0 e8       	ldi	r26, 0x80	; 128
    4974:	bf e3       	ldi	r27, 0x3F	; 63
    4976:	f9 01       	movw	r30, r18
    4978:	80 83       	st	Z, r24
    497a:	91 83       	std	Z+1, r25	; 0x01
    497c:	a2 83       	std	Z+2, r26	; 0x02
    497e:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    4980:	8e 01       	movw	r16, r28
    4982:	06 59       	subi	r16, 0x96	; 150
    4984:	1f 4f       	sbci	r17, 0xFF	; 255
    4986:	ce 01       	movw	r24, r28
    4988:	8a 59       	subi	r24, 0x9A	; 154
    498a:	9f 4f       	sbci	r25, 0xFF	; 255
    498c:	2b ea       	ldi	r18, 0xAB	; 171
    498e:	3a ea       	ldi	r19, 0xAA	; 170
    4990:	4a ea       	ldi	r20, 0xAA	; 170
    4992:	50 e4       	ldi	r21, 0x40	; 64
    4994:	fc 01       	movw	r30, r24
    4996:	60 81       	ld	r22, Z
    4998:	71 81       	ldd	r23, Z+1	; 0x01
    499a:	82 81       	ldd	r24, Z+2	; 0x02
    499c:	93 81       	ldd	r25, Z+3	; 0x03
    499e:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    49a2:	dc 01       	movw	r26, r24
    49a4:	cb 01       	movw	r24, r22
    49a6:	f8 01       	movw	r30, r16
    49a8:	80 83       	st	Z, r24
    49aa:	91 83       	std	Z+1, r25	; 0x01
    49ac:	a2 83       	std	Z+2, r26	; 0x02
    49ae:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    49b0:	8e 01       	movw	r16, r28
    49b2:	02 59       	subi	r16, 0x92	; 146
    49b4:	1f 4f       	sbci	r17, 0xFF	; 255
    49b6:	ce 01       	movw	r24, r28
    49b8:	8a 59       	subi	r24, 0x9A	; 154
    49ba:	9f 4f       	sbci	r25, 0xFF	; 255
    49bc:	20 e0       	ldi	r18, 0x00	; 0
    49be:	30 e0       	ldi	r19, 0x00	; 0
    49c0:	40 e8       	ldi	r20, 0x80	; 128
    49c2:	50 e4       	ldi	r21, 0x40	; 64
    49c4:	fc 01       	movw	r30, r24
    49c6:	60 81       	ld	r22, Z
    49c8:	71 81       	ldd	r23, Z+1	; 0x01
    49ca:	82 81       	ldd	r24, Z+2	; 0x02
    49cc:	93 81       	ldd	r25, Z+3	; 0x03
    49ce:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    49d2:	dc 01       	movw	r26, r24
    49d4:	cb 01       	movw	r24, r22
    49d6:	f8 01       	movw	r30, r16
    49d8:	80 83       	st	Z, r24
    49da:	91 83       	std	Z+1, r25	; 0x01
    49dc:	a2 83       	std	Z+2, r26	; 0x02
    49de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49e0:	ce 01       	movw	r24, r28
    49e2:	86 59       	subi	r24, 0x96	; 150
    49e4:	9f 4f       	sbci	r25, 0xFF	; 255
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	40 e8       	ldi	r20, 0x80	; 128
    49ec:	5f e3       	ldi	r21, 0x3F	; 63
    49ee:	fc 01       	movw	r30, r24
    49f0:	60 81       	ld	r22, Z
    49f2:	71 81       	ldd	r23, Z+1	; 0x01
    49f4:	82 81       	ldd	r24, Z+2	; 0x02
    49f6:	93 81       	ldd	r25, Z+3	; 0x03
    49f8:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    49fc:	88 23       	and	r24, r24
    49fe:	3c f4       	brge	.+14     	; 0x4a0e <LCDBusyLoop+0x8a4>
		__ticks = 1;
    4a00:	ce 01       	movw	r24, r28
    4a02:	8e 58       	subi	r24, 0x8E	; 142
    4a04:	9f 4f       	sbci	r25, 0xFF	; 255
    4a06:	21 e0       	ldi	r18, 0x01	; 1
    4a08:	fc 01       	movw	r30, r24
    4a0a:	20 83       	st	Z, r18
    4a0c:	44 c1       	rjmp	.+648    	; 0x4c96 <LCDBusyLoop+0xb2c>
	else if (__tmp2 > 65535)
    4a0e:	ce 01       	movw	r24, r28
    4a10:	82 59       	subi	r24, 0x92	; 146
    4a12:	9f 4f       	sbci	r25, 0xFF	; 255
    4a14:	20 e0       	ldi	r18, 0x00	; 0
    4a16:	3f ef       	ldi	r19, 0xFF	; 255
    4a18:	4f e7       	ldi	r20, 0x7F	; 127
    4a1a:	57 e4       	ldi	r21, 0x47	; 71
    4a1c:	fc 01       	movw	r30, r24
    4a1e:	60 81       	ld	r22, Z
    4a20:	71 81       	ldd	r23, Z+1	; 0x01
    4a22:	82 81       	ldd	r24, Z+2	; 0x02
    4a24:	93 81       	ldd	r25, Z+3	; 0x03
    4a26:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    4a2a:	18 16       	cp	r1, r24
    4a2c:	0c f0       	brlt	.+2      	; 0x4a30 <LCDBusyLoop+0x8c6>
    4a2e:	e5 c0       	rjmp	.+458    	; 0x4bfa <LCDBusyLoop+0xa90>
	{
		_delay_ms(__us / 1000.0);
    4a30:	ce 01       	movw	r24, r28
    4a32:	8a 59       	subi	r24, 0x9A	; 154
    4a34:	9f 4f       	sbci	r25, 0xFF	; 255
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	4a e7       	ldi	r20, 0x7A	; 122
    4a3c:	54 e4       	ldi	r21, 0x44	; 68
    4a3e:	fc 01       	movw	r30, r24
    4a40:	60 81       	ld	r22, Z
    4a42:	71 81       	ldd	r23, Z+1	; 0x01
    4a44:	82 81       	ldd	r24, Z+2	; 0x02
    4a46:	93 81       	ldd	r25, Z+3	; 0x03
    4a48:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    4a4c:	dc 01       	movw	r26, r24
    4a4e:	cb 01       	movw	r24, r22
    4a50:	9e 01       	movw	r18, r28
    4a52:	2d 58       	subi	r18, 0x8D	; 141
    4a54:	3f 4f       	sbci	r19, 0xFF	; 255
    4a56:	f9 01       	movw	r30, r18
    4a58:	80 83       	st	Z, r24
    4a5a:	91 83       	std	Z+1, r25	; 0x01
    4a5c:	a2 83       	std	Z+2, r26	; 0x02
    4a5e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4a60:	8e 01       	movw	r16, r28
    4a62:	09 58       	subi	r16, 0x89	; 137
    4a64:	1f 4f       	sbci	r17, 0xFF	; 255
    4a66:	ce 01       	movw	r24, r28
    4a68:	8d 58       	subi	r24, 0x8D	; 141
    4a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a6c:	20 e0       	ldi	r18, 0x00	; 0
    4a6e:	30 e0       	ldi	r19, 0x00	; 0
    4a70:	4a e7       	ldi	r20, 0x7A	; 122
    4a72:	55 e4       	ldi	r21, 0x45	; 69
    4a74:	fc 01       	movw	r30, r24
    4a76:	60 81       	ld	r22, Z
    4a78:	71 81       	ldd	r23, Z+1	; 0x01
    4a7a:	82 81       	ldd	r24, Z+2	; 0x02
    4a7c:	93 81       	ldd	r25, Z+3	; 0x03
    4a7e:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    4a82:	dc 01       	movw	r26, r24
    4a84:	cb 01       	movw	r24, r22
    4a86:	f8 01       	movw	r30, r16
    4a88:	80 83       	st	Z, r24
    4a8a:	91 83       	std	Z+1, r25	; 0x01
    4a8c:	a2 83       	std	Z+2, r26	; 0x02
    4a8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a90:	ce 01       	movw	r24, r28
    4a92:	89 58       	subi	r24, 0x89	; 137
    4a94:	9f 4f       	sbci	r25, 0xFF	; 255
    4a96:	20 e0       	ldi	r18, 0x00	; 0
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	40 e8       	ldi	r20, 0x80	; 128
    4a9c:	5f e3       	ldi	r21, 0x3F	; 63
    4a9e:	fc 01       	movw	r30, r24
    4aa0:	60 81       	ld	r22, Z
    4aa2:	71 81       	ldd	r23, Z+1	; 0x01
    4aa4:	82 81       	ldd	r24, Z+2	; 0x02
    4aa6:	93 81       	ldd	r25, Z+3	; 0x03
    4aa8:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    4aac:	88 23       	and	r24, r24
    4aae:	4c f4       	brge	.+18     	; 0x4ac2 <LCDBusyLoop+0x958>
		__ticks = 1;
    4ab0:	ce 01       	movw	r24, r28
    4ab2:	85 58       	subi	r24, 0x85	; 133
    4ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ab6:	21 e0       	ldi	r18, 0x01	; 1
    4ab8:	30 e0       	ldi	r19, 0x00	; 0
    4aba:	fc 01       	movw	r30, r24
    4abc:	31 83       	std	Z+1, r19	; 0x01
    4abe:	20 83       	st	Z, r18
    4ac0:	77 c0       	rjmp	.+238    	; 0x4bb0 <LCDBusyLoop+0xa46>
	else if (__tmp > 65535)
    4ac2:	ce 01       	movw	r24, r28
    4ac4:	89 58       	subi	r24, 0x89	; 137
    4ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ac8:	20 e0       	ldi	r18, 0x00	; 0
    4aca:	3f ef       	ldi	r19, 0xFF	; 255
    4acc:	4f e7       	ldi	r20, 0x7F	; 127
    4ace:	57 e4       	ldi	r21, 0x47	; 71
    4ad0:	fc 01       	movw	r30, r24
    4ad2:	60 81       	ld	r22, Z
    4ad4:	71 81       	ldd	r23, Z+1	; 0x01
    4ad6:	82 81       	ldd	r24, Z+2	; 0x02
    4ad8:	93 81       	ldd	r25, Z+3	; 0x03
    4ada:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    4ade:	18 16       	cp	r1, r24
    4ae0:	0c f0       	brlt	.+2      	; 0x4ae4 <LCDBusyLoop+0x97a>
    4ae2:	54 c0       	rjmp	.+168    	; 0x4b8c <LCDBusyLoop+0xa22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ae4:	ce 01       	movw	r24, r28
    4ae6:	8d 58       	subi	r24, 0x8D	; 141
    4ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    4aea:	20 e0       	ldi	r18, 0x00	; 0
    4aec:	30 e0       	ldi	r19, 0x00	; 0
    4aee:	40 e2       	ldi	r20, 0x20	; 32
    4af0:	51 e4       	ldi	r21, 0x41	; 65
    4af2:	fc 01       	movw	r30, r24
    4af4:	60 81       	ld	r22, Z
    4af6:	71 81       	ldd	r23, Z+1	; 0x01
    4af8:	82 81       	ldd	r24, Z+2	; 0x02
    4afa:	93 81       	ldd	r25, Z+3	; 0x03
    4afc:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    4b00:	dc 01       	movw	r26, r24
    4b02:	cb 01       	movw	r24, r22
    4b04:	8e 01       	movw	r16, r28
    4b06:	05 58       	subi	r16, 0x85	; 133
    4b08:	1f 4f       	sbci	r17, 0xFF	; 255
    4b0a:	bc 01       	movw	r22, r24
    4b0c:	cd 01       	movw	r24, r26
    4b0e:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    4b12:	dc 01       	movw	r26, r24
    4b14:	cb 01       	movw	r24, r22
    4b16:	f8 01       	movw	r30, r16
    4b18:	91 83       	std	Z+1, r25	; 0x01
    4b1a:	80 83       	st	Z, r24
    4b1c:	24 c0       	rjmp	.+72     	; 0x4b66 <LCDBusyLoop+0x9fc>
    4b1e:	ce 01       	movw	r24, r28
    4b20:	83 58       	subi	r24, 0x83	; 131
    4b22:	9f 4f       	sbci	r25, 0xFF	; 255
    4b24:	20 e9       	ldi	r18, 0x90	; 144
    4b26:	31 e0       	ldi	r19, 0x01	; 1
    4b28:	fc 01       	movw	r30, r24
    4b2a:	31 83       	std	Z+1, r19	; 0x01
    4b2c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4b2e:	ce 01       	movw	r24, r28
    4b30:	83 58       	subi	r24, 0x83	; 131
    4b32:	9f 4f       	sbci	r25, 0xFF	; 255
    4b34:	fc 01       	movw	r30, r24
    4b36:	80 81       	ld	r24, Z
    4b38:	91 81       	ldd	r25, Z+1	; 0x01
    4b3a:	01 97       	sbiw	r24, 0x01	; 1
    4b3c:	f1 f7       	brne	.-4      	; 0x4b3a <LCDBusyLoop+0x9d0>
    4b3e:	9e 01       	movw	r18, r28
    4b40:	23 58       	subi	r18, 0x83	; 131
    4b42:	3f 4f       	sbci	r19, 0xFF	; 255
    4b44:	f9 01       	movw	r30, r18
    4b46:	91 83       	std	Z+1, r25	; 0x01
    4b48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b4a:	ce 01       	movw	r24, r28
    4b4c:	85 58       	subi	r24, 0x85	; 133
    4b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    4b50:	9e 01       	movw	r18, r28
    4b52:	25 58       	subi	r18, 0x85	; 133
    4b54:	3f 4f       	sbci	r19, 0xFF	; 255
    4b56:	f9 01       	movw	r30, r18
    4b58:	20 81       	ld	r18, Z
    4b5a:	31 81       	ldd	r19, Z+1	; 0x01
    4b5c:	21 50       	subi	r18, 0x01	; 1
    4b5e:	31 09       	sbc	r19, r1
    4b60:	fc 01       	movw	r30, r24
    4b62:	31 83       	std	Z+1, r19	; 0x01
    4b64:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b66:	ce 01       	movw	r24, r28
    4b68:	85 58       	subi	r24, 0x85	; 133
    4b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b6c:	fc 01       	movw	r30, r24
    4b6e:	80 81       	ld	r24, Z
    4b70:	91 81       	ldd	r25, Z+1	; 0x01
    4b72:	89 2b       	or	r24, r25
    4b74:	a1 f6       	brne	.-88     	; 0x4b1e <LCDBusyLoop+0x9b4>
    4b76:	ce 01       	movw	r24, r28
    4b78:	8e 58       	subi	r24, 0x8E	; 142
    4b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b7c:	9e 01       	movw	r18, r28
    4b7e:	2a 57       	subi	r18, 0x7A	; 122
    4b80:	3f 4f       	sbci	r19, 0xFF	; 255
    4b82:	f9 01       	movw	r30, r18
    4b84:	20 81       	ld	r18, Z
    4b86:	fc 01       	movw	r30, r24
    4b88:	20 83       	st	Z, r18
    4b8a:	85 c0       	rjmp	.+266    	; 0x4c96 <LCDBusyLoop+0xb2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b8c:	8e 01       	movw	r16, r28
    4b8e:	05 58       	subi	r16, 0x85	; 133
    4b90:	1f 4f       	sbci	r17, 0xFF	; 255
    4b92:	ce 01       	movw	r24, r28
    4b94:	89 58       	subi	r24, 0x89	; 137
    4b96:	9f 4f       	sbci	r25, 0xFF	; 255
    4b98:	fc 01       	movw	r30, r24
    4b9a:	60 81       	ld	r22, Z
    4b9c:	71 81       	ldd	r23, Z+1	; 0x01
    4b9e:	82 81       	ldd	r24, Z+2	; 0x02
    4ba0:	93 81       	ldd	r25, Z+3	; 0x03
    4ba2:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    4ba6:	dc 01       	movw	r26, r24
    4ba8:	cb 01       	movw	r24, r22
    4baa:	f8 01       	movw	r30, r16
    4bac:	91 83       	std	Z+1, r25	; 0x01
    4bae:	80 83       	st	Z, r24
    4bb0:	ce 01       	movw	r24, r28
    4bb2:	81 58       	subi	r24, 0x81	; 129
    4bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    4bb6:	9e 01       	movw	r18, r28
    4bb8:	25 58       	subi	r18, 0x85	; 133
    4bba:	3f 4f       	sbci	r19, 0xFF	; 255
    4bbc:	f9 01       	movw	r30, r18
    4bbe:	20 81       	ld	r18, Z
    4bc0:	31 81       	ldd	r19, Z+1	; 0x01
    4bc2:	fc 01       	movw	r30, r24
    4bc4:	31 83       	std	Z+1, r19	; 0x01
    4bc6:	20 83       	st	Z, r18
    4bc8:	ce 01       	movw	r24, r28
    4bca:	81 58       	subi	r24, 0x81	; 129
    4bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    4bce:	fc 01       	movw	r30, r24
    4bd0:	80 81       	ld	r24, Z
    4bd2:	91 81       	ldd	r25, Z+1	; 0x01
    4bd4:	01 97       	sbiw	r24, 0x01	; 1
    4bd6:	f1 f7       	brne	.-4      	; 0x4bd4 <LCDBusyLoop+0xa6a>
    4bd8:	9e 01       	movw	r18, r28
    4bda:	21 58       	subi	r18, 0x81	; 129
    4bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    4bde:	f9 01       	movw	r30, r18
    4be0:	91 83       	std	Z+1, r25	; 0x01
    4be2:	80 83       	st	Z, r24
    4be4:	ce 01       	movw	r24, r28
    4be6:	8e 58       	subi	r24, 0x8E	; 142
    4be8:	9f 4f       	sbci	r25, 0xFF	; 255
    4bea:	9e 01       	movw	r18, r28
    4bec:	2a 57       	subi	r18, 0x7A	; 122
    4bee:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf0:	f9 01       	movw	r30, r18
    4bf2:	20 81       	ld	r18, Z
    4bf4:	fc 01       	movw	r30, r24
    4bf6:	20 83       	st	Z, r18
    4bf8:	4e c0       	rjmp	.+156    	; 0x4c96 <LCDBusyLoop+0xb2c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    4bfa:	ce 01       	movw	r24, r28
    4bfc:	86 59       	subi	r24, 0x96	; 150
    4bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    4c00:	20 e0       	ldi	r18, 0x00	; 0
    4c02:	30 e0       	ldi	r19, 0x00	; 0
    4c04:	4f e7       	ldi	r20, 0x7F	; 127
    4c06:	53 e4       	ldi	r21, 0x43	; 67
    4c08:	fc 01       	movw	r30, r24
    4c0a:	60 81       	ld	r22, Z
    4c0c:	71 81       	ldd	r23, Z+1	; 0x01
    4c0e:	82 81       	ldd	r24, Z+2	; 0x02
    4c10:	93 81       	ldd	r25, Z+3	; 0x03
    4c12:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    4c16:	18 16       	cp	r1, r24
    4c18:	6c f5       	brge	.+90     	; 0x4c74 <LCDBusyLoop+0xb0a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    4c1a:	8e 01       	movw	r16, r28
    4c1c:	0f 57       	subi	r16, 0x7F	; 127
    4c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c20:	ce 01       	movw	r24, r28
    4c22:	82 59       	subi	r24, 0x92	; 146
    4c24:	9f 4f       	sbci	r25, 0xFF	; 255
    4c26:	fc 01       	movw	r30, r24
    4c28:	60 81       	ld	r22, Z
    4c2a:	71 81       	ldd	r23, Z+1	; 0x01
    4c2c:	82 81       	ldd	r24, Z+2	; 0x02
    4c2e:	93 81       	ldd	r25, Z+3	; 0x03
    4c30:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    4c34:	dc 01       	movw	r26, r24
    4c36:	cb 01       	movw	r24, r22
    4c38:	f8 01       	movw	r30, r16
    4c3a:	91 83       	std	Z+1, r25	; 0x01
    4c3c:	80 83       	st	Z, r24
    4c3e:	ce 01       	movw	r24, r28
    4c40:	8d 57       	subi	r24, 0x7D	; 125
    4c42:	9f 4f       	sbci	r25, 0xFF	; 255
    4c44:	9e 01       	movw	r18, r28
    4c46:	2f 57       	subi	r18, 0x7F	; 127
    4c48:	3f 4f       	sbci	r19, 0xFF	; 255
    4c4a:	f9 01       	movw	r30, r18
    4c4c:	20 81       	ld	r18, Z
    4c4e:	31 81       	ldd	r19, Z+1	; 0x01
    4c50:	fc 01       	movw	r30, r24
    4c52:	31 83       	std	Z+1, r19	; 0x01
    4c54:	20 83       	st	Z, r18
    4c56:	ce 01       	movw	r24, r28
    4c58:	8d 57       	subi	r24, 0x7D	; 125
    4c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	80 81       	ld	r24, Z
    4c60:	91 81       	ldd	r25, Z+1	; 0x01
    4c62:	01 97       	sbiw	r24, 0x01	; 1
    4c64:	f1 f7       	brne	.-4      	; 0x4c62 <LCDBusyLoop+0xaf8>
    4c66:	9e 01       	movw	r18, r28
    4c68:	2d 57       	subi	r18, 0x7D	; 125
    4c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c6c:	f9 01       	movw	r30, r18
    4c6e:	91 83       	std	Z+1, r25	; 0x01
    4c70:	80 83       	st	Z, r24
    4c72:	28 c0       	rjmp	.+80     	; 0x4cc4 <LCDBusyLoop+0xb5a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4c74:	8e 01       	movw	r16, r28
    4c76:	0e 58       	subi	r16, 0x8E	; 142
    4c78:	1f 4f       	sbci	r17, 0xFF	; 255
    4c7a:	ce 01       	movw	r24, r28
    4c7c:	86 59       	subi	r24, 0x96	; 150
    4c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    4c80:	fc 01       	movw	r30, r24
    4c82:	60 81       	ld	r22, Z
    4c84:	71 81       	ldd	r23, Z+1	; 0x01
    4c86:	82 81       	ldd	r24, Z+2	; 0x02
    4c88:	93 81       	ldd	r25, Z+3	; 0x03
    4c8a:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    4c8e:	dc 01       	movw	r26, r24
    4c90:	cb 01       	movw	r24, r22
    4c92:	f8 01       	movw	r30, r16
    4c94:	80 83       	st	Z, r24
    4c96:	ce 01       	movw	r24, r28
    4c98:	8b 57       	subi	r24, 0x7B	; 123
    4c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c9c:	9e 01       	movw	r18, r28
    4c9e:	2e 58       	subi	r18, 0x8E	; 142
    4ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ca2:	f9 01       	movw	r30, r18
    4ca4:	20 81       	ld	r18, Z
    4ca6:	fc 01       	movw	r30, r24
    4ca8:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4caa:	ce 01       	movw	r24, r28
    4cac:	8b 57       	subi	r24, 0x7B	; 123
    4cae:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb0:	fc 01       	movw	r30, r24
    4cb2:	80 81       	ld	r24, Z
    4cb4:	28 2f       	mov	r18, r24
    4cb6:	2a 95       	dec	r18
    4cb8:	f1 f7       	brne	.-4      	; 0x4cb6 <LCDBusyLoop+0xb4c>
    4cba:	ce 01       	movw	r24, r28
    4cbc:	8b 57       	subi	r24, 0x7B	; 123
    4cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    4cc0:	fc 01       	movw	r30, r24
    4cc2:	20 83       	st	Z, r18
		_delay_us(1);	//tEL

		SET_E();
    4cc4:	85 e2       	ldi	r24, 0x25	; 37
    4cc6:	90 e0       	ldi	r25, 0x00	; 0
    4cc8:	25 e2       	ldi	r18, 0x25	; 37
    4cca:	30 e0       	ldi	r19, 0x00	; 0
    4ccc:	f9 01       	movw	r30, r18
    4cce:	20 81       	ld	r18, Z
    4cd0:	22 60       	ori	r18, 0x02	; 2
    4cd2:	fc 01       	movw	r30, r24
    4cd4:	20 83       	st	Z, r18
    4cd6:	9e 01       	movw	r18, r28
    4cd8:	29 57       	subi	r18, 0x79	; 121
    4cda:	3f 4f       	sbci	r19, 0xFF	; 255
    4cdc:	80 e0       	ldi	r24, 0x00	; 0
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	a0 e0       	ldi	r26, 0x00	; 0
    4ce2:	bf e3       	ldi	r27, 0x3F	; 63
    4ce4:	f9 01       	movw	r30, r18
    4ce6:	80 83       	st	Z, r24
    4ce8:	91 83       	std	Z+1, r25	; 0x01
    4cea:	a2 83       	std	Z+2, r26	; 0x02
    4cec:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    4cee:	8e 01       	movw	r16, r28
    4cf0:	05 57       	subi	r16, 0x75	; 117
    4cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    4cf4:	ce 01       	movw	r24, r28
    4cf6:	89 57       	subi	r24, 0x79	; 121
    4cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    4cfa:	2b ea       	ldi	r18, 0xAB	; 171
    4cfc:	3a ea       	ldi	r19, 0xAA	; 170
    4cfe:	4a ea       	ldi	r20, 0xAA	; 170
    4d00:	50 e4       	ldi	r21, 0x40	; 64
    4d02:	fc 01       	movw	r30, r24
    4d04:	60 81       	ld	r22, Z
    4d06:	71 81       	ldd	r23, Z+1	; 0x01
    4d08:	82 81       	ldd	r24, Z+2	; 0x02
    4d0a:	93 81       	ldd	r25, Z+3	; 0x03
    4d0c:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    4d10:	dc 01       	movw	r26, r24
    4d12:	cb 01       	movw	r24, r22
    4d14:	f8 01       	movw	r30, r16
    4d16:	80 83       	st	Z, r24
    4d18:	91 83       	std	Z+1, r25	; 0x01
    4d1a:	a2 83       	std	Z+2, r26	; 0x02
    4d1c:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    4d1e:	8e 01       	movw	r16, r28
    4d20:	01 57       	subi	r16, 0x71	; 113
    4d22:	1f 4f       	sbci	r17, 0xFF	; 255
    4d24:	ce 01       	movw	r24, r28
    4d26:	89 57       	subi	r24, 0x79	; 121
    4d28:	9f 4f       	sbci	r25, 0xFF	; 255
    4d2a:	20 e0       	ldi	r18, 0x00	; 0
    4d2c:	30 e0       	ldi	r19, 0x00	; 0
    4d2e:	40 e8       	ldi	r20, 0x80	; 128
    4d30:	50 e4       	ldi	r21, 0x40	; 64
    4d32:	fc 01       	movw	r30, r24
    4d34:	60 81       	ld	r22, Z
    4d36:	71 81       	ldd	r23, Z+1	; 0x01
    4d38:	82 81       	ldd	r24, Z+2	; 0x02
    4d3a:	93 81       	ldd	r25, Z+3	; 0x03
    4d3c:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    4d40:	dc 01       	movw	r26, r24
    4d42:	cb 01       	movw	r24, r22
    4d44:	f8 01       	movw	r30, r16
    4d46:	80 83       	st	Z, r24
    4d48:	91 83       	std	Z+1, r25	; 0x01
    4d4a:	a2 83       	std	Z+2, r26	; 0x02
    4d4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d4e:	ce 01       	movw	r24, r28
    4d50:	85 57       	subi	r24, 0x75	; 117
    4d52:	9f 4f       	sbci	r25, 0xFF	; 255
    4d54:	20 e0       	ldi	r18, 0x00	; 0
    4d56:	30 e0       	ldi	r19, 0x00	; 0
    4d58:	40 e8       	ldi	r20, 0x80	; 128
    4d5a:	5f e3       	ldi	r21, 0x3F	; 63
    4d5c:	fc 01       	movw	r30, r24
    4d5e:	60 81       	ld	r22, Z
    4d60:	71 81       	ldd	r23, Z+1	; 0x01
    4d62:	82 81       	ldd	r24, Z+2	; 0x02
    4d64:	93 81       	ldd	r25, Z+3	; 0x03
    4d66:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    4d6a:	88 23       	and	r24, r24
    4d6c:	3c f4       	brge	.+14     	; 0x4d7c <LCDBusyLoop+0xc12>
		__ticks = 1;
    4d6e:	ce 01       	movw	r24, r28
    4d70:	8d 56       	subi	r24, 0x6D	; 109
    4d72:	9f 4f       	sbci	r25, 0xFF	; 255
    4d74:	21 e0       	ldi	r18, 0x01	; 1
    4d76:	fc 01       	movw	r30, r24
    4d78:	20 83       	st	Z, r18
    4d7a:	44 c1       	rjmp	.+648    	; 0x5004 <LCDBusyLoop+0xe9a>
	else if (__tmp2 > 65535)
    4d7c:	ce 01       	movw	r24, r28
    4d7e:	81 57       	subi	r24, 0x71	; 113
    4d80:	9f 4f       	sbci	r25, 0xFF	; 255
    4d82:	20 e0       	ldi	r18, 0x00	; 0
    4d84:	3f ef       	ldi	r19, 0xFF	; 255
    4d86:	4f e7       	ldi	r20, 0x7F	; 127
    4d88:	57 e4       	ldi	r21, 0x47	; 71
    4d8a:	fc 01       	movw	r30, r24
    4d8c:	60 81       	ld	r22, Z
    4d8e:	71 81       	ldd	r23, Z+1	; 0x01
    4d90:	82 81       	ldd	r24, Z+2	; 0x02
    4d92:	93 81       	ldd	r25, Z+3	; 0x03
    4d94:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    4d98:	18 16       	cp	r1, r24
    4d9a:	0c f0       	brlt	.+2      	; 0x4d9e <LCDBusyLoop+0xc34>
    4d9c:	e5 c0       	rjmp	.+458    	; 0x4f68 <LCDBusyLoop+0xdfe>
	{
		_delay_ms(__us / 1000.0);
    4d9e:	ce 01       	movw	r24, r28
    4da0:	89 57       	subi	r24, 0x79	; 121
    4da2:	9f 4f       	sbci	r25, 0xFF	; 255
    4da4:	20 e0       	ldi	r18, 0x00	; 0
    4da6:	30 e0       	ldi	r19, 0x00	; 0
    4da8:	4a e7       	ldi	r20, 0x7A	; 122
    4daa:	54 e4       	ldi	r21, 0x44	; 68
    4dac:	fc 01       	movw	r30, r24
    4dae:	60 81       	ld	r22, Z
    4db0:	71 81       	ldd	r23, Z+1	; 0x01
    4db2:	82 81       	ldd	r24, Z+2	; 0x02
    4db4:	93 81       	ldd	r25, Z+3	; 0x03
    4db6:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    4dba:	dc 01       	movw	r26, r24
    4dbc:	cb 01       	movw	r24, r22
    4dbe:	9e 01       	movw	r18, r28
    4dc0:	2c 56       	subi	r18, 0x6C	; 108
    4dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    4dc4:	f9 01       	movw	r30, r18
    4dc6:	80 83       	st	Z, r24
    4dc8:	91 83       	std	Z+1, r25	; 0x01
    4dca:	a2 83       	std	Z+2, r26	; 0x02
    4dcc:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4dce:	8e 01       	movw	r16, r28
    4dd0:	08 56       	subi	r16, 0x68	; 104
    4dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    4dd4:	ce 01       	movw	r24, r28
    4dd6:	8c 56       	subi	r24, 0x6C	; 108
    4dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    4dda:	20 e0       	ldi	r18, 0x00	; 0
    4ddc:	30 e0       	ldi	r19, 0x00	; 0
    4dde:	4a e7       	ldi	r20, 0x7A	; 122
    4de0:	55 e4       	ldi	r21, 0x45	; 69
    4de2:	fc 01       	movw	r30, r24
    4de4:	60 81       	ld	r22, Z
    4de6:	71 81       	ldd	r23, Z+1	; 0x01
    4de8:	82 81       	ldd	r24, Z+2	; 0x02
    4dea:	93 81       	ldd	r25, Z+3	; 0x03
    4dec:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    4df0:	dc 01       	movw	r26, r24
    4df2:	cb 01       	movw	r24, r22
    4df4:	f8 01       	movw	r30, r16
    4df6:	80 83       	st	Z, r24
    4df8:	91 83       	std	Z+1, r25	; 0x01
    4dfa:	a2 83       	std	Z+2, r26	; 0x02
    4dfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4dfe:	ce 01       	movw	r24, r28
    4e00:	88 56       	subi	r24, 0x68	; 104
    4e02:	9f 4f       	sbci	r25, 0xFF	; 255
    4e04:	20 e0       	ldi	r18, 0x00	; 0
    4e06:	30 e0       	ldi	r19, 0x00	; 0
    4e08:	40 e8       	ldi	r20, 0x80	; 128
    4e0a:	5f e3       	ldi	r21, 0x3F	; 63
    4e0c:	fc 01       	movw	r30, r24
    4e0e:	60 81       	ld	r22, Z
    4e10:	71 81       	ldd	r23, Z+1	; 0x01
    4e12:	82 81       	ldd	r24, Z+2	; 0x02
    4e14:	93 81       	ldd	r25, Z+3	; 0x03
    4e16:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    4e1a:	88 23       	and	r24, r24
    4e1c:	4c f4       	brge	.+18     	; 0x4e30 <LCDBusyLoop+0xcc6>
		__ticks = 1;
    4e1e:	ce 01       	movw	r24, r28
    4e20:	84 56       	subi	r24, 0x64	; 100
    4e22:	9f 4f       	sbci	r25, 0xFF	; 255
    4e24:	21 e0       	ldi	r18, 0x01	; 1
    4e26:	30 e0       	ldi	r19, 0x00	; 0
    4e28:	fc 01       	movw	r30, r24
    4e2a:	31 83       	std	Z+1, r19	; 0x01
    4e2c:	20 83       	st	Z, r18
    4e2e:	77 c0       	rjmp	.+238    	; 0x4f1e <LCDBusyLoop+0xdb4>
	else if (__tmp > 65535)
    4e30:	ce 01       	movw	r24, r28
    4e32:	88 56       	subi	r24, 0x68	; 104
    4e34:	9f 4f       	sbci	r25, 0xFF	; 255
    4e36:	20 e0       	ldi	r18, 0x00	; 0
    4e38:	3f ef       	ldi	r19, 0xFF	; 255
    4e3a:	4f e7       	ldi	r20, 0x7F	; 127
    4e3c:	57 e4       	ldi	r21, 0x47	; 71
    4e3e:	fc 01       	movw	r30, r24
    4e40:	60 81       	ld	r22, Z
    4e42:	71 81       	ldd	r23, Z+1	; 0x01
    4e44:	82 81       	ldd	r24, Z+2	; 0x02
    4e46:	93 81       	ldd	r25, Z+3	; 0x03
    4e48:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    4e4c:	18 16       	cp	r1, r24
    4e4e:	0c f0       	brlt	.+2      	; 0x4e52 <LCDBusyLoop+0xce8>
    4e50:	54 c0       	rjmp	.+168    	; 0x4efa <LCDBusyLoop+0xd90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e52:	ce 01       	movw	r24, r28
    4e54:	8c 56       	subi	r24, 0x6C	; 108
    4e56:	9f 4f       	sbci	r25, 0xFF	; 255
    4e58:	20 e0       	ldi	r18, 0x00	; 0
    4e5a:	30 e0       	ldi	r19, 0x00	; 0
    4e5c:	40 e2       	ldi	r20, 0x20	; 32
    4e5e:	51 e4       	ldi	r21, 0x41	; 65
    4e60:	fc 01       	movw	r30, r24
    4e62:	60 81       	ld	r22, Z
    4e64:	71 81       	ldd	r23, Z+1	; 0x01
    4e66:	82 81       	ldd	r24, Z+2	; 0x02
    4e68:	93 81       	ldd	r25, Z+3	; 0x03
    4e6a:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    4e6e:	dc 01       	movw	r26, r24
    4e70:	cb 01       	movw	r24, r22
    4e72:	8e 01       	movw	r16, r28
    4e74:	04 56       	subi	r16, 0x64	; 100
    4e76:	1f 4f       	sbci	r17, 0xFF	; 255
    4e78:	bc 01       	movw	r22, r24
    4e7a:	cd 01       	movw	r24, r26
    4e7c:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    4e80:	dc 01       	movw	r26, r24
    4e82:	cb 01       	movw	r24, r22
    4e84:	f8 01       	movw	r30, r16
    4e86:	91 83       	std	Z+1, r25	; 0x01
    4e88:	80 83       	st	Z, r24
    4e8a:	24 c0       	rjmp	.+72     	; 0x4ed4 <LCDBusyLoop+0xd6a>
    4e8c:	ce 01       	movw	r24, r28
    4e8e:	82 56       	subi	r24, 0x62	; 98
    4e90:	9f 4f       	sbci	r25, 0xFF	; 255
    4e92:	20 e9       	ldi	r18, 0x90	; 144
    4e94:	31 e0       	ldi	r19, 0x01	; 1
    4e96:	fc 01       	movw	r30, r24
    4e98:	31 83       	std	Z+1, r19	; 0x01
    4e9a:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4e9c:	ce 01       	movw	r24, r28
    4e9e:	82 56       	subi	r24, 0x62	; 98
    4ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ea2:	fc 01       	movw	r30, r24
    4ea4:	80 81       	ld	r24, Z
    4ea6:	91 81       	ldd	r25, Z+1	; 0x01
    4ea8:	01 97       	sbiw	r24, 0x01	; 1
    4eaa:	f1 f7       	brne	.-4      	; 0x4ea8 <LCDBusyLoop+0xd3e>
    4eac:	9e 01       	movw	r18, r28
    4eae:	22 56       	subi	r18, 0x62	; 98
    4eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    4eb2:	f9 01       	movw	r30, r18
    4eb4:	91 83       	std	Z+1, r25	; 0x01
    4eb6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eb8:	ce 01       	movw	r24, r28
    4eba:	84 56       	subi	r24, 0x64	; 100
    4ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    4ebe:	9e 01       	movw	r18, r28
    4ec0:	24 56       	subi	r18, 0x64	; 100
    4ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ec4:	f9 01       	movw	r30, r18
    4ec6:	20 81       	ld	r18, Z
    4ec8:	31 81       	ldd	r19, Z+1	; 0x01
    4eca:	21 50       	subi	r18, 0x01	; 1
    4ecc:	31 09       	sbc	r19, r1
    4ece:	fc 01       	movw	r30, r24
    4ed0:	31 83       	std	Z+1, r19	; 0x01
    4ed2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ed4:	ce 01       	movw	r24, r28
    4ed6:	84 56       	subi	r24, 0x64	; 100
    4ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    4eda:	fc 01       	movw	r30, r24
    4edc:	80 81       	ld	r24, Z
    4ede:	91 81       	ldd	r25, Z+1	; 0x01
    4ee0:	89 2b       	or	r24, r25
    4ee2:	a1 f6       	brne	.-88     	; 0x4e8c <LCDBusyLoop+0xd22>
    4ee4:	ce 01       	movw	r24, r28
    4ee6:	8d 56       	subi	r24, 0x6D	; 109
    4ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    4eea:	9e 01       	movw	r18, r28
    4eec:	29 55       	subi	r18, 0x59	; 89
    4eee:	3f 4f       	sbci	r19, 0xFF	; 255
    4ef0:	f9 01       	movw	r30, r18
    4ef2:	20 81       	ld	r18, Z
    4ef4:	fc 01       	movw	r30, r24
    4ef6:	20 83       	st	Z, r18
    4ef8:	85 c0       	rjmp	.+266    	; 0x5004 <LCDBusyLoop+0xe9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4efa:	8e 01       	movw	r16, r28
    4efc:	04 56       	subi	r16, 0x64	; 100
    4efe:	1f 4f       	sbci	r17, 0xFF	; 255
    4f00:	ce 01       	movw	r24, r28
    4f02:	88 56       	subi	r24, 0x68	; 104
    4f04:	9f 4f       	sbci	r25, 0xFF	; 255
    4f06:	fc 01       	movw	r30, r24
    4f08:	60 81       	ld	r22, Z
    4f0a:	71 81       	ldd	r23, Z+1	; 0x01
    4f0c:	82 81       	ldd	r24, Z+2	; 0x02
    4f0e:	93 81       	ldd	r25, Z+3	; 0x03
    4f10:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    4f14:	dc 01       	movw	r26, r24
    4f16:	cb 01       	movw	r24, r22
    4f18:	f8 01       	movw	r30, r16
    4f1a:	91 83       	std	Z+1, r25	; 0x01
    4f1c:	80 83       	st	Z, r24
    4f1e:	ce 01       	movw	r24, r28
    4f20:	80 56       	subi	r24, 0x60	; 96
    4f22:	9f 4f       	sbci	r25, 0xFF	; 255
    4f24:	9e 01       	movw	r18, r28
    4f26:	24 56       	subi	r18, 0x64	; 100
    4f28:	3f 4f       	sbci	r19, 0xFF	; 255
    4f2a:	f9 01       	movw	r30, r18
    4f2c:	20 81       	ld	r18, Z
    4f2e:	31 81       	ldd	r19, Z+1	; 0x01
    4f30:	fc 01       	movw	r30, r24
    4f32:	31 83       	std	Z+1, r19	; 0x01
    4f34:	20 83       	st	Z, r18
    4f36:	ce 01       	movw	r24, r28
    4f38:	80 56       	subi	r24, 0x60	; 96
    4f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f3c:	fc 01       	movw	r30, r24
    4f3e:	80 81       	ld	r24, Z
    4f40:	91 81       	ldd	r25, Z+1	; 0x01
    4f42:	01 97       	sbiw	r24, 0x01	; 1
    4f44:	f1 f7       	brne	.-4      	; 0x4f42 <LCDBusyLoop+0xdd8>
    4f46:	9e 01       	movw	r18, r28
    4f48:	20 56       	subi	r18, 0x60	; 96
    4f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f4c:	f9 01       	movw	r30, r18
    4f4e:	91 83       	std	Z+1, r25	; 0x01
    4f50:	80 83       	st	Z, r24
    4f52:	ce 01       	movw	r24, r28
    4f54:	8d 56       	subi	r24, 0x6D	; 109
    4f56:	9f 4f       	sbci	r25, 0xFF	; 255
    4f58:	9e 01       	movw	r18, r28
    4f5a:	29 55       	subi	r18, 0x59	; 89
    4f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f5e:	f9 01       	movw	r30, r18
    4f60:	20 81       	ld	r18, Z
    4f62:	fc 01       	movw	r30, r24
    4f64:	20 83       	st	Z, r18
    4f66:	4e c0       	rjmp	.+156    	; 0x5004 <LCDBusyLoop+0xe9a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    4f68:	ce 01       	movw	r24, r28
    4f6a:	85 57       	subi	r24, 0x75	; 117
    4f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f6e:	20 e0       	ldi	r18, 0x00	; 0
    4f70:	30 e0       	ldi	r19, 0x00	; 0
    4f72:	4f e7       	ldi	r20, 0x7F	; 127
    4f74:	53 e4       	ldi	r21, 0x43	; 67
    4f76:	fc 01       	movw	r30, r24
    4f78:	60 81       	ld	r22, Z
    4f7a:	71 81       	ldd	r23, Z+1	; 0x01
    4f7c:	82 81       	ldd	r24, Z+2	; 0x02
    4f7e:	93 81       	ldd	r25, Z+3	; 0x03
    4f80:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    4f84:	18 16       	cp	r1, r24
    4f86:	6c f5       	brge	.+90     	; 0x4fe2 <LCDBusyLoop+0xe78>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    4f88:	8e 01       	movw	r16, r28
    4f8a:	0e 55       	subi	r16, 0x5E	; 94
    4f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f8e:	ce 01       	movw	r24, r28
    4f90:	81 57       	subi	r24, 0x71	; 113
    4f92:	9f 4f       	sbci	r25, 0xFF	; 255
    4f94:	fc 01       	movw	r30, r24
    4f96:	60 81       	ld	r22, Z
    4f98:	71 81       	ldd	r23, Z+1	; 0x01
    4f9a:	82 81       	ldd	r24, Z+2	; 0x02
    4f9c:	93 81       	ldd	r25, Z+3	; 0x03
    4f9e:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    4fa2:	dc 01       	movw	r26, r24
    4fa4:	cb 01       	movw	r24, r22
    4fa6:	f8 01       	movw	r30, r16
    4fa8:	91 83       	std	Z+1, r25	; 0x01
    4faa:	80 83       	st	Z, r24
    4fac:	ce 01       	movw	r24, r28
    4fae:	8c 55       	subi	r24, 0x5C	; 92
    4fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    4fb2:	9e 01       	movw	r18, r28
    4fb4:	2e 55       	subi	r18, 0x5E	; 94
    4fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    4fb8:	f9 01       	movw	r30, r18
    4fba:	20 81       	ld	r18, Z
    4fbc:	31 81       	ldd	r19, Z+1	; 0x01
    4fbe:	fc 01       	movw	r30, r24
    4fc0:	31 83       	std	Z+1, r19	; 0x01
    4fc2:	20 83       	st	Z, r18
    4fc4:	ce 01       	movw	r24, r28
    4fc6:	8c 55       	subi	r24, 0x5C	; 92
    4fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    4fca:	fc 01       	movw	r30, r24
    4fcc:	80 81       	ld	r24, Z
    4fce:	91 81       	ldd	r25, Z+1	; 0x01
    4fd0:	01 97       	sbiw	r24, 0x01	; 1
    4fd2:	f1 f7       	brne	.-4      	; 0x4fd0 <LCDBusyLoop+0xe66>
    4fd4:	9e 01       	movw	r18, r28
    4fd6:	2c 55       	subi	r18, 0x5C	; 92
    4fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    4fda:	f9 01       	movw	r30, r18
    4fdc:	91 83       	std	Z+1, r25	; 0x01
    4fde:	80 83       	st	Z, r24
    4fe0:	28 c0       	rjmp	.+80     	; 0x5032 <LCDBusyLoop+0xec8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4fe2:	8e 01       	movw	r16, r28
    4fe4:	0d 56       	subi	r16, 0x6D	; 109
    4fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    4fe8:	ce 01       	movw	r24, r28
    4fea:	85 57       	subi	r24, 0x75	; 117
    4fec:	9f 4f       	sbci	r25, 0xFF	; 255
    4fee:	fc 01       	movw	r30, r24
    4ff0:	60 81       	ld	r22, Z
    4ff2:	71 81       	ldd	r23, Z+1	; 0x01
    4ff4:	82 81       	ldd	r24, Z+2	; 0x02
    4ff6:	93 81       	ldd	r25, Z+3	; 0x03
    4ff8:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    4ffc:	dc 01       	movw	r26, r24
    4ffe:	cb 01       	movw	r24, r22
    5000:	f8 01       	movw	r30, r16
    5002:	80 83       	st	Z, r24
    5004:	ce 01       	movw	r24, r28
    5006:	8a 55       	subi	r24, 0x5A	; 90
    5008:	9f 4f       	sbci	r25, 0xFF	; 255
    500a:	9e 01       	movw	r18, r28
    500c:	2d 56       	subi	r18, 0x6D	; 109
    500e:	3f 4f       	sbci	r19, 0xFF	; 255
    5010:	f9 01       	movw	r30, r18
    5012:	20 81       	ld	r18, Z
    5014:	fc 01       	movw	r30, r24
    5016:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5018:	ce 01       	movw	r24, r28
    501a:	8a 55       	subi	r24, 0x5A	; 90
    501c:	9f 4f       	sbci	r25, 0xFF	; 255
    501e:	fc 01       	movw	r30, r24
    5020:	80 81       	ld	r24, Z
    5022:	28 2f       	mov	r18, r24
    5024:	2a 95       	dec	r18
    5026:	f1 f7       	brne	.-4      	; 0x5024 <LCDBusyLoop+0xeba>
    5028:	ce 01       	movw	r24, r28
    502a:	8a 55       	subi	r24, 0x5A	; 90
    502c:	9f 4f       	sbci	r25, 0xFF	; 255
    502e:	fc 01       	movw	r30, r24
    5030:	20 83       	st	Z, r18
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
    5032:	89 e2       	ldi	r24, 0x29	; 41
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	fc 01       	movw	r30, r24
    5038:	80 81       	ld	r24, Z
    503a:	82 95       	swap	r24
    503c:	8f 70       	andi	r24, 0x0F	; 15
    503e:	8a 83       	std	Y+2, r24	; 0x02
		temp&=0x0F;
    5040:	8a 81       	ldd	r24, Y+2	; 0x02
    5042:	8f 70       	andi	r24, 0x0F	; 15
    5044:	8a 83       	std	Y+2, r24	; 0x02

		status=status|temp;
    5046:	99 81       	ldd	r25, Y+1	; 0x01
    5048:	8a 81       	ldd	r24, Y+2	; 0x02
    504a:	89 2b       	or	r24, r25
    504c:	89 83       	std	Y+1, r24	; 0x01
				status|=(1<<(11-i));
			}
		}
		#endif

		busy=status & 0b10000000;
    504e:	89 81       	ldd	r24, Y+1	; 0x01
    5050:	80 78       	andi	r24, 0x80	; 128
    5052:	8b 83       	std	Y+3, r24	; 0x03
    5054:	9e 01       	movw	r18, r28
    5056:	28 55       	subi	r18, 0x58	; 88
    5058:	3f 4f       	sbci	r19, 0xFF	; 255
    505a:	80 e0       	ldi	r24, 0x00	; 0
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	a0 e0       	ldi	r26, 0x00	; 0
    5060:	bf e3       	ldi	r27, 0x3F	; 63
    5062:	f9 01       	movw	r30, r18
    5064:	80 83       	st	Z, r24
    5066:	91 83       	std	Z+1, r25	; 0x01
    5068:	a2 83       	std	Z+2, r26	; 0x02
    506a:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    506c:	8e 01       	movw	r16, r28
    506e:	04 55       	subi	r16, 0x54	; 84
    5070:	1f 4f       	sbci	r17, 0xFF	; 255
    5072:	ce 01       	movw	r24, r28
    5074:	88 55       	subi	r24, 0x58	; 88
    5076:	9f 4f       	sbci	r25, 0xFF	; 255
    5078:	2b ea       	ldi	r18, 0xAB	; 171
    507a:	3a ea       	ldi	r19, 0xAA	; 170
    507c:	4a ea       	ldi	r20, 0xAA	; 170
    507e:	50 e4       	ldi	r21, 0x40	; 64
    5080:	fc 01       	movw	r30, r24
    5082:	60 81       	ld	r22, Z
    5084:	71 81       	ldd	r23, Z+1	; 0x01
    5086:	82 81       	ldd	r24, Z+2	; 0x02
    5088:	93 81       	ldd	r25, Z+3	; 0x03
    508a:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    508e:	dc 01       	movw	r26, r24
    5090:	cb 01       	movw	r24, r22
    5092:	f8 01       	movw	r30, r16
    5094:	80 83       	st	Z, r24
    5096:	91 83       	std	Z+1, r25	; 0x01
    5098:	a2 83       	std	Z+2, r26	; 0x02
    509a:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    509c:	8e 01       	movw	r16, r28
    509e:	00 55       	subi	r16, 0x50	; 80
    50a0:	1f 4f       	sbci	r17, 0xFF	; 255
    50a2:	ce 01       	movw	r24, r28
    50a4:	88 55       	subi	r24, 0x58	; 88
    50a6:	9f 4f       	sbci	r25, 0xFF	; 255
    50a8:	20 e0       	ldi	r18, 0x00	; 0
    50aa:	30 e0       	ldi	r19, 0x00	; 0
    50ac:	40 e8       	ldi	r20, 0x80	; 128
    50ae:	50 e4       	ldi	r21, 0x40	; 64
    50b0:	fc 01       	movw	r30, r24
    50b2:	60 81       	ld	r22, Z
    50b4:	71 81       	ldd	r23, Z+1	; 0x01
    50b6:	82 81       	ldd	r24, Z+2	; 0x02
    50b8:	93 81       	ldd	r25, Z+3	; 0x03
    50ba:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    50be:	dc 01       	movw	r26, r24
    50c0:	cb 01       	movw	r24, r22
    50c2:	f8 01       	movw	r30, r16
    50c4:	80 83       	st	Z, r24
    50c6:	91 83       	std	Z+1, r25	; 0x01
    50c8:	a2 83       	std	Z+2, r26	; 0x02
    50ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50cc:	ce 01       	movw	r24, r28
    50ce:	84 55       	subi	r24, 0x54	; 84
    50d0:	9f 4f       	sbci	r25, 0xFF	; 255
    50d2:	20 e0       	ldi	r18, 0x00	; 0
    50d4:	30 e0       	ldi	r19, 0x00	; 0
    50d6:	40 e8       	ldi	r20, 0x80	; 128
    50d8:	5f e3       	ldi	r21, 0x3F	; 63
    50da:	fc 01       	movw	r30, r24
    50dc:	60 81       	ld	r22, Z
    50de:	71 81       	ldd	r23, Z+1	; 0x01
    50e0:	82 81       	ldd	r24, Z+2	; 0x02
    50e2:	93 81       	ldd	r25, Z+3	; 0x03
    50e4:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    50e8:	88 23       	and	r24, r24
    50ea:	3c f4       	brge	.+14     	; 0x50fa <LCDBusyLoop+0xf90>
		__ticks = 1;
    50ec:	ce 01       	movw	r24, r28
    50ee:	8c 54       	subi	r24, 0x4C	; 76
    50f0:	9f 4f       	sbci	r25, 0xFF	; 255
    50f2:	21 e0       	ldi	r18, 0x01	; 1
    50f4:	fc 01       	movw	r30, r24
    50f6:	20 83       	st	Z, r18
    50f8:	44 c1       	rjmp	.+648    	; 0x5382 <LCDBusyLoop+0x1218>
	else if (__tmp2 > 65535)
    50fa:	ce 01       	movw	r24, r28
    50fc:	80 55       	subi	r24, 0x50	; 80
    50fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5100:	20 e0       	ldi	r18, 0x00	; 0
    5102:	3f ef       	ldi	r19, 0xFF	; 255
    5104:	4f e7       	ldi	r20, 0x7F	; 127
    5106:	57 e4       	ldi	r21, 0x47	; 71
    5108:	fc 01       	movw	r30, r24
    510a:	60 81       	ld	r22, Z
    510c:	71 81       	ldd	r23, Z+1	; 0x01
    510e:	82 81       	ldd	r24, Z+2	; 0x02
    5110:	93 81       	ldd	r25, Z+3	; 0x03
    5112:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    5116:	18 16       	cp	r1, r24
    5118:	0c f0       	brlt	.+2      	; 0x511c <LCDBusyLoop+0xfb2>
    511a:	e5 c0       	rjmp	.+458    	; 0x52e6 <LCDBusyLoop+0x117c>
	{
		_delay_ms(__us / 1000.0);
    511c:	ce 01       	movw	r24, r28
    511e:	88 55       	subi	r24, 0x58	; 88
    5120:	9f 4f       	sbci	r25, 0xFF	; 255
    5122:	20 e0       	ldi	r18, 0x00	; 0
    5124:	30 e0       	ldi	r19, 0x00	; 0
    5126:	4a e7       	ldi	r20, 0x7A	; 122
    5128:	54 e4       	ldi	r21, 0x44	; 68
    512a:	fc 01       	movw	r30, r24
    512c:	60 81       	ld	r22, Z
    512e:	71 81       	ldd	r23, Z+1	; 0x01
    5130:	82 81       	ldd	r24, Z+2	; 0x02
    5132:	93 81       	ldd	r25, Z+3	; 0x03
    5134:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    5138:	dc 01       	movw	r26, r24
    513a:	cb 01       	movw	r24, r22
    513c:	9e 01       	movw	r18, r28
    513e:	2b 54       	subi	r18, 0x4B	; 75
    5140:	3f 4f       	sbci	r19, 0xFF	; 255
    5142:	f9 01       	movw	r30, r18
    5144:	80 83       	st	Z, r24
    5146:	91 83       	std	Z+1, r25	; 0x01
    5148:	a2 83       	std	Z+2, r26	; 0x02
    514a:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    514c:	8e 01       	movw	r16, r28
    514e:	07 54       	subi	r16, 0x47	; 71
    5150:	1f 4f       	sbci	r17, 0xFF	; 255
    5152:	ce 01       	movw	r24, r28
    5154:	8b 54       	subi	r24, 0x4B	; 75
    5156:	9f 4f       	sbci	r25, 0xFF	; 255
    5158:	20 e0       	ldi	r18, 0x00	; 0
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	4a e7       	ldi	r20, 0x7A	; 122
    515e:	55 e4       	ldi	r21, 0x45	; 69
    5160:	fc 01       	movw	r30, r24
    5162:	60 81       	ld	r22, Z
    5164:	71 81       	ldd	r23, Z+1	; 0x01
    5166:	82 81       	ldd	r24, Z+2	; 0x02
    5168:	93 81       	ldd	r25, Z+3	; 0x03
    516a:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    516e:	dc 01       	movw	r26, r24
    5170:	cb 01       	movw	r24, r22
    5172:	f8 01       	movw	r30, r16
    5174:	80 83       	st	Z, r24
    5176:	91 83       	std	Z+1, r25	; 0x01
    5178:	a2 83       	std	Z+2, r26	; 0x02
    517a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    517c:	ce 01       	movw	r24, r28
    517e:	87 54       	subi	r24, 0x47	; 71
    5180:	9f 4f       	sbci	r25, 0xFF	; 255
    5182:	20 e0       	ldi	r18, 0x00	; 0
    5184:	30 e0       	ldi	r19, 0x00	; 0
    5186:	40 e8       	ldi	r20, 0x80	; 128
    5188:	5f e3       	ldi	r21, 0x3F	; 63
    518a:	fc 01       	movw	r30, r24
    518c:	60 81       	ld	r22, Z
    518e:	71 81       	ldd	r23, Z+1	; 0x01
    5190:	82 81       	ldd	r24, Z+2	; 0x02
    5192:	93 81       	ldd	r25, Z+3	; 0x03
    5194:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    5198:	88 23       	and	r24, r24
    519a:	4c f4       	brge	.+18     	; 0x51ae <LCDBusyLoop+0x1044>
		__ticks = 1;
    519c:	ce 01       	movw	r24, r28
    519e:	83 54       	subi	r24, 0x43	; 67
    51a0:	9f 4f       	sbci	r25, 0xFF	; 255
    51a2:	21 e0       	ldi	r18, 0x01	; 1
    51a4:	30 e0       	ldi	r19, 0x00	; 0
    51a6:	fc 01       	movw	r30, r24
    51a8:	31 83       	std	Z+1, r19	; 0x01
    51aa:	20 83       	st	Z, r18
    51ac:	77 c0       	rjmp	.+238    	; 0x529c <LCDBusyLoop+0x1132>
	else if (__tmp > 65535)
    51ae:	ce 01       	movw	r24, r28
    51b0:	87 54       	subi	r24, 0x47	; 71
    51b2:	9f 4f       	sbci	r25, 0xFF	; 255
    51b4:	20 e0       	ldi	r18, 0x00	; 0
    51b6:	3f ef       	ldi	r19, 0xFF	; 255
    51b8:	4f e7       	ldi	r20, 0x7F	; 127
    51ba:	57 e4       	ldi	r21, 0x47	; 71
    51bc:	fc 01       	movw	r30, r24
    51be:	60 81       	ld	r22, Z
    51c0:	71 81       	ldd	r23, Z+1	; 0x01
    51c2:	82 81       	ldd	r24, Z+2	; 0x02
    51c4:	93 81       	ldd	r25, Z+3	; 0x03
    51c6:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    51ca:	18 16       	cp	r1, r24
    51cc:	0c f0       	brlt	.+2      	; 0x51d0 <LCDBusyLoop+0x1066>
    51ce:	54 c0       	rjmp	.+168    	; 0x5278 <LCDBusyLoop+0x110e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51d0:	ce 01       	movw	r24, r28
    51d2:	8b 54       	subi	r24, 0x4B	; 75
    51d4:	9f 4f       	sbci	r25, 0xFF	; 255
    51d6:	20 e0       	ldi	r18, 0x00	; 0
    51d8:	30 e0       	ldi	r19, 0x00	; 0
    51da:	40 e2       	ldi	r20, 0x20	; 32
    51dc:	51 e4       	ldi	r21, 0x41	; 65
    51de:	fc 01       	movw	r30, r24
    51e0:	60 81       	ld	r22, Z
    51e2:	71 81       	ldd	r23, Z+1	; 0x01
    51e4:	82 81       	ldd	r24, Z+2	; 0x02
    51e6:	93 81       	ldd	r25, Z+3	; 0x03
    51e8:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    51ec:	dc 01       	movw	r26, r24
    51ee:	cb 01       	movw	r24, r22
    51f0:	8e 01       	movw	r16, r28
    51f2:	03 54       	subi	r16, 0x43	; 67
    51f4:	1f 4f       	sbci	r17, 0xFF	; 255
    51f6:	bc 01       	movw	r22, r24
    51f8:	cd 01       	movw	r24, r26
    51fa:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    51fe:	dc 01       	movw	r26, r24
    5200:	cb 01       	movw	r24, r22
    5202:	f8 01       	movw	r30, r16
    5204:	91 83       	std	Z+1, r25	; 0x01
    5206:	80 83       	st	Z, r24
    5208:	24 c0       	rjmp	.+72     	; 0x5252 <LCDBusyLoop+0x10e8>
    520a:	ce 01       	movw	r24, r28
    520c:	81 54       	subi	r24, 0x41	; 65
    520e:	9f 4f       	sbci	r25, 0xFF	; 255
    5210:	20 e9       	ldi	r18, 0x90	; 144
    5212:	31 e0       	ldi	r19, 0x01	; 1
    5214:	fc 01       	movw	r30, r24
    5216:	31 83       	std	Z+1, r19	; 0x01
    5218:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    521a:	ce 01       	movw	r24, r28
    521c:	81 54       	subi	r24, 0x41	; 65
    521e:	9f 4f       	sbci	r25, 0xFF	; 255
    5220:	fc 01       	movw	r30, r24
    5222:	80 81       	ld	r24, Z
    5224:	91 81       	ldd	r25, Z+1	; 0x01
    5226:	01 97       	sbiw	r24, 0x01	; 1
    5228:	f1 f7       	brne	.-4      	; 0x5226 <LCDBusyLoop+0x10bc>
    522a:	9e 01       	movw	r18, r28
    522c:	21 54       	subi	r18, 0x41	; 65
    522e:	3f 4f       	sbci	r19, 0xFF	; 255
    5230:	f9 01       	movw	r30, r18
    5232:	91 83       	std	Z+1, r25	; 0x01
    5234:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5236:	ce 01       	movw	r24, r28
    5238:	83 54       	subi	r24, 0x43	; 67
    523a:	9f 4f       	sbci	r25, 0xFF	; 255
    523c:	9e 01       	movw	r18, r28
    523e:	23 54       	subi	r18, 0x43	; 67
    5240:	3f 4f       	sbci	r19, 0xFF	; 255
    5242:	f9 01       	movw	r30, r18
    5244:	20 81       	ld	r18, Z
    5246:	31 81       	ldd	r19, Z+1	; 0x01
    5248:	21 50       	subi	r18, 0x01	; 1
    524a:	31 09       	sbc	r19, r1
    524c:	fc 01       	movw	r30, r24
    524e:	31 83       	std	Z+1, r19	; 0x01
    5250:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5252:	ce 01       	movw	r24, r28
    5254:	83 54       	subi	r24, 0x43	; 67
    5256:	9f 4f       	sbci	r25, 0xFF	; 255
    5258:	fc 01       	movw	r30, r24
    525a:	80 81       	ld	r24, Z
    525c:	91 81       	ldd	r25, Z+1	; 0x01
    525e:	89 2b       	or	r24, r25
    5260:	a1 f6       	brne	.-88     	; 0x520a <LCDBusyLoop+0x10a0>
    5262:	ce 01       	movw	r24, r28
    5264:	8c 54       	subi	r24, 0x4C	; 76
    5266:	9f 4f       	sbci	r25, 0xFF	; 255
    5268:	9e 01       	movw	r18, r28
    526a:	28 53       	subi	r18, 0x38	; 56
    526c:	3f 4f       	sbci	r19, 0xFF	; 255
    526e:	f9 01       	movw	r30, r18
    5270:	20 81       	ld	r18, Z
    5272:	fc 01       	movw	r30, r24
    5274:	20 83       	st	Z, r18
    5276:	85 c0       	rjmp	.+266    	; 0x5382 <LCDBusyLoop+0x1218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5278:	8e 01       	movw	r16, r28
    527a:	03 54       	subi	r16, 0x43	; 67
    527c:	1f 4f       	sbci	r17, 0xFF	; 255
    527e:	ce 01       	movw	r24, r28
    5280:	87 54       	subi	r24, 0x47	; 71
    5282:	9f 4f       	sbci	r25, 0xFF	; 255
    5284:	fc 01       	movw	r30, r24
    5286:	60 81       	ld	r22, Z
    5288:	71 81       	ldd	r23, Z+1	; 0x01
    528a:	82 81       	ldd	r24, Z+2	; 0x02
    528c:	93 81       	ldd	r25, Z+3	; 0x03
    528e:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    5292:	dc 01       	movw	r26, r24
    5294:	cb 01       	movw	r24, r22
    5296:	f8 01       	movw	r30, r16
    5298:	91 83       	std	Z+1, r25	; 0x01
    529a:	80 83       	st	Z, r24
    529c:	ce 01       	movw	r24, r28
    529e:	8f 53       	subi	r24, 0x3F	; 63
    52a0:	9f 4f       	sbci	r25, 0xFF	; 255
    52a2:	9e 01       	movw	r18, r28
    52a4:	23 54       	subi	r18, 0x43	; 67
    52a6:	3f 4f       	sbci	r19, 0xFF	; 255
    52a8:	f9 01       	movw	r30, r18
    52aa:	20 81       	ld	r18, Z
    52ac:	31 81       	ldd	r19, Z+1	; 0x01
    52ae:	fc 01       	movw	r30, r24
    52b0:	31 83       	std	Z+1, r19	; 0x01
    52b2:	20 83       	st	Z, r18
    52b4:	ce 01       	movw	r24, r28
    52b6:	8f 53       	subi	r24, 0x3F	; 63
    52b8:	9f 4f       	sbci	r25, 0xFF	; 255
    52ba:	fc 01       	movw	r30, r24
    52bc:	80 81       	ld	r24, Z
    52be:	91 81       	ldd	r25, Z+1	; 0x01
    52c0:	01 97       	sbiw	r24, 0x01	; 1
    52c2:	f1 f7       	brne	.-4      	; 0x52c0 <LCDBusyLoop+0x1156>
    52c4:	9e 01       	movw	r18, r28
    52c6:	2f 53       	subi	r18, 0x3F	; 63
    52c8:	3f 4f       	sbci	r19, 0xFF	; 255
    52ca:	f9 01       	movw	r30, r18
    52cc:	91 83       	std	Z+1, r25	; 0x01
    52ce:	80 83       	st	Z, r24
    52d0:	ce 01       	movw	r24, r28
    52d2:	8c 54       	subi	r24, 0x4C	; 76
    52d4:	9f 4f       	sbci	r25, 0xFF	; 255
    52d6:	9e 01       	movw	r18, r28
    52d8:	28 53       	subi	r18, 0x38	; 56
    52da:	3f 4f       	sbci	r19, 0xFF	; 255
    52dc:	f9 01       	movw	r30, r18
    52de:	20 81       	ld	r18, Z
    52e0:	fc 01       	movw	r30, r24
    52e2:	20 83       	st	Z, r18
    52e4:	4e c0       	rjmp	.+156    	; 0x5382 <LCDBusyLoop+0x1218>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    52e6:	ce 01       	movw	r24, r28
    52e8:	84 55       	subi	r24, 0x54	; 84
    52ea:	9f 4f       	sbci	r25, 0xFF	; 255
    52ec:	20 e0       	ldi	r18, 0x00	; 0
    52ee:	30 e0       	ldi	r19, 0x00	; 0
    52f0:	4f e7       	ldi	r20, 0x7F	; 127
    52f2:	53 e4       	ldi	r21, 0x43	; 67
    52f4:	fc 01       	movw	r30, r24
    52f6:	60 81       	ld	r22, Z
    52f8:	71 81       	ldd	r23, Z+1	; 0x01
    52fa:	82 81       	ldd	r24, Z+2	; 0x02
    52fc:	93 81       	ldd	r25, Z+3	; 0x03
    52fe:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    5302:	18 16       	cp	r1, r24
    5304:	6c f5       	brge	.+90     	; 0x5360 <LCDBusyLoop+0x11f6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    5306:	8e 01       	movw	r16, r28
    5308:	0d 53       	subi	r16, 0x3D	; 61
    530a:	1f 4f       	sbci	r17, 0xFF	; 255
    530c:	ce 01       	movw	r24, r28
    530e:	80 55       	subi	r24, 0x50	; 80
    5310:	9f 4f       	sbci	r25, 0xFF	; 255
    5312:	fc 01       	movw	r30, r24
    5314:	60 81       	ld	r22, Z
    5316:	71 81       	ldd	r23, Z+1	; 0x01
    5318:	82 81       	ldd	r24, Z+2	; 0x02
    531a:	93 81       	ldd	r25, Z+3	; 0x03
    531c:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    5320:	dc 01       	movw	r26, r24
    5322:	cb 01       	movw	r24, r22
    5324:	f8 01       	movw	r30, r16
    5326:	91 83       	std	Z+1, r25	; 0x01
    5328:	80 83       	st	Z, r24
    532a:	ce 01       	movw	r24, r28
    532c:	8b 53       	subi	r24, 0x3B	; 59
    532e:	9f 4f       	sbci	r25, 0xFF	; 255
    5330:	9e 01       	movw	r18, r28
    5332:	2d 53       	subi	r18, 0x3D	; 61
    5334:	3f 4f       	sbci	r19, 0xFF	; 255
    5336:	f9 01       	movw	r30, r18
    5338:	20 81       	ld	r18, Z
    533a:	31 81       	ldd	r19, Z+1	; 0x01
    533c:	fc 01       	movw	r30, r24
    533e:	31 83       	std	Z+1, r19	; 0x01
    5340:	20 83       	st	Z, r18
    5342:	ce 01       	movw	r24, r28
    5344:	8b 53       	subi	r24, 0x3B	; 59
    5346:	9f 4f       	sbci	r25, 0xFF	; 255
    5348:	fc 01       	movw	r30, r24
    534a:	80 81       	ld	r24, Z
    534c:	91 81       	ldd	r25, Z+1	; 0x01
    534e:	01 97       	sbiw	r24, 0x01	; 1
    5350:	f1 f7       	brne	.-4      	; 0x534e <LCDBusyLoop+0x11e4>
    5352:	9e 01       	movw	r18, r28
    5354:	2b 53       	subi	r18, 0x3B	; 59
    5356:	3f 4f       	sbci	r19, 0xFF	; 255
    5358:	f9 01       	movw	r30, r18
    535a:	91 83       	std	Z+1, r25	; 0x01
    535c:	80 83       	st	Z, r24
    535e:	28 c0       	rjmp	.+80     	; 0x53b0 <LCDBusyLoop+0x1246>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5360:	8e 01       	movw	r16, r28
    5362:	0c 54       	subi	r16, 0x4C	; 76
    5364:	1f 4f       	sbci	r17, 0xFF	; 255
    5366:	ce 01       	movw	r24, r28
    5368:	84 55       	subi	r24, 0x54	; 84
    536a:	9f 4f       	sbci	r25, 0xFF	; 255
    536c:	fc 01       	movw	r30, r24
    536e:	60 81       	ld	r22, Z
    5370:	71 81       	ldd	r23, Z+1	; 0x01
    5372:	82 81       	ldd	r24, Z+2	; 0x02
    5374:	93 81       	ldd	r25, Z+3	; 0x03
    5376:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    537a:	dc 01       	movw	r26, r24
    537c:	cb 01       	movw	r24, r22
    537e:	f8 01       	movw	r30, r16
    5380:	80 83       	st	Z, r24
    5382:	ce 01       	movw	r24, r28
    5384:	89 53       	subi	r24, 0x39	; 57
    5386:	9f 4f       	sbci	r25, 0xFF	; 255
    5388:	9e 01       	movw	r18, r28
    538a:	2c 54       	subi	r18, 0x4C	; 76
    538c:	3f 4f       	sbci	r19, 0xFF	; 255
    538e:	f9 01       	movw	r30, r18
    5390:	20 81       	ld	r18, Z
    5392:	fc 01       	movw	r30, r24
    5394:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5396:	ce 01       	movw	r24, r28
    5398:	89 53       	subi	r24, 0x39	; 57
    539a:	9f 4f       	sbci	r25, 0xFF	; 255
    539c:	fc 01       	movw	r30, r24
    539e:	80 81       	ld	r24, Z
    53a0:	28 2f       	mov	r18, r24
    53a2:	2a 95       	dec	r18
    53a4:	f1 f7       	brne	.-4      	; 0x53a2 <LCDBusyLoop+0x1238>
    53a6:	ce 01       	movw	r24, r28
    53a8:	89 53       	subi	r24, 0x39	; 57
    53aa:	9f 4f       	sbci	r25, 0xFF	; 255
    53ac:	fc 01       	movw	r30, r24
    53ae:	20 83       	st	Z, r18

		_delay_us(0.5);
		CLEAR_E();
    53b0:	85 e2       	ldi	r24, 0x25	; 37
    53b2:	90 e0       	ldi	r25, 0x00	; 0
    53b4:	25 e2       	ldi	r18, 0x25	; 37
    53b6:	30 e0       	ldi	r19, 0x00	; 0
    53b8:	f9 01       	movw	r30, r18
    53ba:	20 81       	ld	r18, Z
    53bc:	2d 7f       	andi	r18, 0xFD	; 253
    53be:	fc 01       	movw	r30, r24
    53c0:	20 83       	st	Z, r18
    53c2:	9e 01       	movw	r18, r28
    53c4:	27 53       	subi	r18, 0x37	; 55
    53c6:	3f 4f       	sbci	r19, 0xFF	; 255
    53c8:	80 e0       	ldi	r24, 0x00	; 0
    53ca:	90 e0       	ldi	r25, 0x00	; 0
    53cc:	a0 e8       	ldi	r26, 0x80	; 128
    53ce:	bf e3       	ldi	r27, 0x3F	; 63
    53d0:	f9 01       	movw	r30, r18
    53d2:	80 83       	st	Z, r24
    53d4:	91 83       	std	Z+1, r25	; 0x01
    53d6:	a2 83       	std	Z+2, r26	; 0x02
    53d8:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    53da:	8e 01       	movw	r16, r28
    53dc:	03 53       	subi	r16, 0x33	; 51
    53de:	1f 4f       	sbci	r17, 0xFF	; 255
    53e0:	ce 01       	movw	r24, r28
    53e2:	87 53       	subi	r24, 0x37	; 55
    53e4:	9f 4f       	sbci	r25, 0xFF	; 255
    53e6:	2b ea       	ldi	r18, 0xAB	; 171
    53e8:	3a ea       	ldi	r19, 0xAA	; 170
    53ea:	4a ea       	ldi	r20, 0xAA	; 170
    53ec:	50 e4       	ldi	r21, 0x40	; 64
    53ee:	fc 01       	movw	r30, r24
    53f0:	60 81       	ld	r22, Z
    53f2:	71 81       	ldd	r23, Z+1	; 0x01
    53f4:	82 81       	ldd	r24, Z+2	; 0x02
    53f6:	93 81       	ldd	r25, Z+3	; 0x03
    53f8:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    53fc:	dc 01       	movw	r26, r24
    53fe:	cb 01       	movw	r24, r22
    5400:	f8 01       	movw	r30, r16
    5402:	80 83       	st	Z, r24
    5404:	91 83       	std	Z+1, r25	; 0x01
    5406:	a2 83       	std	Z+2, r26	; 0x02
    5408:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    540a:	8e 01       	movw	r16, r28
    540c:	0f 52       	subi	r16, 0x2F	; 47
    540e:	1f 4f       	sbci	r17, 0xFF	; 255
    5410:	ce 01       	movw	r24, r28
    5412:	87 53       	subi	r24, 0x37	; 55
    5414:	9f 4f       	sbci	r25, 0xFF	; 255
    5416:	20 e0       	ldi	r18, 0x00	; 0
    5418:	30 e0       	ldi	r19, 0x00	; 0
    541a:	40 e8       	ldi	r20, 0x80	; 128
    541c:	50 e4       	ldi	r21, 0x40	; 64
    541e:	fc 01       	movw	r30, r24
    5420:	60 81       	ld	r22, Z
    5422:	71 81       	ldd	r23, Z+1	; 0x01
    5424:	82 81       	ldd	r24, Z+2	; 0x02
    5426:	93 81       	ldd	r25, Z+3	; 0x03
    5428:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    542c:	dc 01       	movw	r26, r24
    542e:	cb 01       	movw	r24, r22
    5430:	f8 01       	movw	r30, r16
    5432:	80 83       	st	Z, r24
    5434:	91 83       	std	Z+1, r25	; 0x01
    5436:	a2 83       	std	Z+2, r26	; 0x02
    5438:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    543a:	ce 01       	movw	r24, r28
    543c:	83 53       	subi	r24, 0x33	; 51
    543e:	9f 4f       	sbci	r25, 0xFF	; 255
    5440:	20 e0       	ldi	r18, 0x00	; 0
    5442:	30 e0       	ldi	r19, 0x00	; 0
    5444:	40 e8       	ldi	r20, 0x80	; 128
    5446:	5f e3       	ldi	r21, 0x3F	; 63
    5448:	fc 01       	movw	r30, r24
    544a:	60 81       	ld	r22, Z
    544c:	71 81       	ldd	r23, Z+1	; 0x01
    544e:	82 81       	ldd	r24, Z+2	; 0x02
    5450:	93 81       	ldd	r25, Z+3	; 0x03
    5452:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    5456:	88 23       	and	r24, r24
    5458:	3c f4       	brge	.+14     	; 0x5468 <LCDBusyLoop+0x12fe>
		__ticks = 1;
    545a:	ce 01       	movw	r24, r28
    545c:	8b 52       	subi	r24, 0x2B	; 43
    545e:	9f 4f       	sbci	r25, 0xFF	; 255
    5460:	21 e0       	ldi	r18, 0x01	; 1
    5462:	fc 01       	movw	r30, r24
    5464:	20 83       	st	Z, r18
    5466:	44 c1       	rjmp	.+648    	; 0x56f0 <LCDBusyLoop+0x1586>
	else if (__tmp2 > 65535)
    5468:	ce 01       	movw	r24, r28
    546a:	8f 52       	subi	r24, 0x2F	; 47
    546c:	9f 4f       	sbci	r25, 0xFF	; 255
    546e:	20 e0       	ldi	r18, 0x00	; 0
    5470:	3f ef       	ldi	r19, 0xFF	; 255
    5472:	4f e7       	ldi	r20, 0x7F	; 127
    5474:	57 e4       	ldi	r21, 0x47	; 71
    5476:	fc 01       	movw	r30, r24
    5478:	60 81       	ld	r22, Z
    547a:	71 81       	ldd	r23, Z+1	; 0x01
    547c:	82 81       	ldd	r24, Z+2	; 0x02
    547e:	93 81       	ldd	r25, Z+3	; 0x03
    5480:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    5484:	18 16       	cp	r1, r24
    5486:	0c f0       	brlt	.+2      	; 0x548a <LCDBusyLoop+0x1320>
    5488:	e5 c0       	rjmp	.+458    	; 0x5654 <LCDBusyLoop+0x14ea>
	{
		_delay_ms(__us / 1000.0);
    548a:	ce 01       	movw	r24, r28
    548c:	87 53       	subi	r24, 0x37	; 55
    548e:	9f 4f       	sbci	r25, 0xFF	; 255
    5490:	20 e0       	ldi	r18, 0x00	; 0
    5492:	30 e0       	ldi	r19, 0x00	; 0
    5494:	4a e7       	ldi	r20, 0x7A	; 122
    5496:	54 e4       	ldi	r21, 0x44	; 68
    5498:	fc 01       	movw	r30, r24
    549a:	60 81       	ld	r22, Z
    549c:	71 81       	ldd	r23, Z+1	; 0x01
    549e:	82 81       	ldd	r24, Z+2	; 0x02
    54a0:	93 81       	ldd	r25, Z+3	; 0x03
    54a2:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    54a6:	dc 01       	movw	r26, r24
    54a8:	cb 01       	movw	r24, r22
    54aa:	9e 01       	movw	r18, r28
    54ac:	2a 52       	subi	r18, 0x2A	; 42
    54ae:	3f 4f       	sbci	r19, 0xFF	; 255
    54b0:	f9 01       	movw	r30, r18
    54b2:	80 83       	st	Z, r24
    54b4:	91 83       	std	Z+1, r25	; 0x01
    54b6:	a2 83       	std	Z+2, r26	; 0x02
    54b8:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    54ba:	8e 01       	movw	r16, r28
    54bc:	06 52       	subi	r16, 0x26	; 38
    54be:	1f 4f       	sbci	r17, 0xFF	; 255
    54c0:	ce 01       	movw	r24, r28
    54c2:	8a 52       	subi	r24, 0x2A	; 42
    54c4:	9f 4f       	sbci	r25, 0xFF	; 255
    54c6:	20 e0       	ldi	r18, 0x00	; 0
    54c8:	30 e0       	ldi	r19, 0x00	; 0
    54ca:	4a e7       	ldi	r20, 0x7A	; 122
    54cc:	55 e4       	ldi	r21, 0x45	; 69
    54ce:	fc 01       	movw	r30, r24
    54d0:	60 81       	ld	r22, Z
    54d2:	71 81       	ldd	r23, Z+1	; 0x01
    54d4:	82 81       	ldd	r24, Z+2	; 0x02
    54d6:	93 81       	ldd	r25, Z+3	; 0x03
    54d8:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    54dc:	dc 01       	movw	r26, r24
    54de:	cb 01       	movw	r24, r22
    54e0:	f8 01       	movw	r30, r16
    54e2:	80 83       	st	Z, r24
    54e4:	91 83       	std	Z+1, r25	; 0x01
    54e6:	a2 83       	std	Z+2, r26	; 0x02
    54e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    54ea:	ce 01       	movw	r24, r28
    54ec:	86 52       	subi	r24, 0x26	; 38
    54ee:	9f 4f       	sbci	r25, 0xFF	; 255
    54f0:	20 e0       	ldi	r18, 0x00	; 0
    54f2:	30 e0       	ldi	r19, 0x00	; 0
    54f4:	40 e8       	ldi	r20, 0x80	; 128
    54f6:	5f e3       	ldi	r21, 0x3F	; 63
    54f8:	fc 01       	movw	r30, r24
    54fa:	60 81       	ld	r22, Z
    54fc:	71 81       	ldd	r23, Z+1	; 0x01
    54fe:	82 81       	ldd	r24, Z+2	; 0x02
    5500:	93 81       	ldd	r25, Z+3	; 0x03
    5502:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    5506:	88 23       	and	r24, r24
    5508:	4c f4       	brge	.+18     	; 0x551c <LCDBusyLoop+0x13b2>
		__ticks = 1;
    550a:	ce 01       	movw	r24, r28
    550c:	82 52       	subi	r24, 0x22	; 34
    550e:	9f 4f       	sbci	r25, 0xFF	; 255
    5510:	21 e0       	ldi	r18, 0x01	; 1
    5512:	30 e0       	ldi	r19, 0x00	; 0
    5514:	fc 01       	movw	r30, r24
    5516:	31 83       	std	Z+1, r19	; 0x01
    5518:	20 83       	st	Z, r18
    551a:	77 c0       	rjmp	.+238    	; 0x560a <LCDBusyLoop+0x14a0>
	else if (__tmp > 65535)
    551c:	ce 01       	movw	r24, r28
    551e:	86 52       	subi	r24, 0x26	; 38
    5520:	9f 4f       	sbci	r25, 0xFF	; 255
    5522:	20 e0       	ldi	r18, 0x00	; 0
    5524:	3f ef       	ldi	r19, 0xFF	; 255
    5526:	4f e7       	ldi	r20, 0x7F	; 127
    5528:	57 e4       	ldi	r21, 0x47	; 71
    552a:	fc 01       	movw	r30, r24
    552c:	60 81       	ld	r22, Z
    552e:	71 81       	ldd	r23, Z+1	; 0x01
    5530:	82 81       	ldd	r24, Z+2	; 0x02
    5532:	93 81       	ldd	r25, Z+3	; 0x03
    5534:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    5538:	18 16       	cp	r1, r24
    553a:	0c f0       	brlt	.+2      	; 0x553e <LCDBusyLoop+0x13d4>
    553c:	54 c0       	rjmp	.+168    	; 0x55e6 <LCDBusyLoop+0x147c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    553e:	ce 01       	movw	r24, r28
    5540:	8a 52       	subi	r24, 0x2A	; 42
    5542:	9f 4f       	sbci	r25, 0xFF	; 255
    5544:	20 e0       	ldi	r18, 0x00	; 0
    5546:	30 e0       	ldi	r19, 0x00	; 0
    5548:	40 e2       	ldi	r20, 0x20	; 32
    554a:	51 e4       	ldi	r21, 0x41	; 65
    554c:	fc 01       	movw	r30, r24
    554e:	60 81       	ld	r22, Z
    5550:	71 81       	ldd	r23, Z+1	; 0x01
    5552:	82 81       	ldd	r24, Z+2	; 0x02
    5554:	93 81       	ldd	r25, Z+3	; 0x03
    5556:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    555a:	dc 01       	movw	r26, r24
    555c:	cb 01       	movw	r24, r22
    555e:	8e 01       	movw	r16, r28
    5560:	02 52       	subi	r16, 0x22	; 34
    5562:	1f 4f       	sbci	r17, 0xFF	; 255
    5564:	bc 01       	movw	r22, r24
    5566:	cd 01       	movw	r24, r26
    5568:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    556c:	dc 01       	movw	r26, r24
    556e:	cb 01       	movw	r24, r22
    5570:	f8 01       	movw	r30, r16
    5572:	91 83       	std	Z+1, r25	; 0x01
    5574:	80 83       	st	Z, r24
    5576:	24 c0       	rjmp	.+72     	; 0x55c0 <LCDBusyLoop+0x1456>
    5578:	ce 01       	movw	r24, r28
    557a:	80 52       	subi	r24, 0x20	; 32
    557c:	9f 4f       	sbci	r25, 0xFF	; 255
    557e:	20 e9       	ldi	r18, 0x90	; 144
    5580:	31 e0       	ldi	r19, 0x01	; 1
    5582:	fc 01       	movw	r30, r24
    5584:	31 83       	std	Z+1, r19	; 0x01
    5586:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5588:	ce 01       	movw	r24, r28
    558a:	80 52       	subi	r24, 0x20	; 32
    558c:	9f 4f       	sbci	r25, 0xFF	; 255
    558e:	fc 01       	movw	r30, r24
    5590:	80 81       	ld	r24, Z
    5592:	91 81       	ldd	r25, Z+1	; 0x01
    5594:	01 97       	sbiw	r24, 0x01	; 1
    5596:	f1 f7       	brne	.-4      	; 0x5594 <LCDBusyLoop+0x142a>
    5598:	9e 01       	movw	r18, r28
    559a:	20 52       	subi	r18, 0x20	; 32
    559c:	3f 4f       	sbci	r19, 0xFF	; 255
    559e:	f9 01       	movw	r30, r18
    55a0:	91 83       	std	Z+1, r25	; 0x01
    55a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55a4:	ce 01       	movw	r24, r28
    55a6:	82 52       	subi	r24, 0x22	; 34
    55a8:	9f 4f       	sbci	r25, 0xFF	; 255
    55aa:	9e 01       	movw	r18, r28
    55ac:	22 52       	subi	r18, 0x22	; 34
    55ae:	3f 4f       	sbci	r19, 0xFF	; 255
    55b0:	f9 01       	movw	r30, r18
    55b2:	20 81       	ld	r18, Z
    55b4:	31 81       	ldd	r19, Z+1	; 0x01
    55b6:	21 50       	subi	r18, 0x01	; 1
    55b8:	31 09       	sbc	r19, r1
    55ba:	fc 01       	movw	r30, r24
    55bc:	31 83       	std	Z+1, r19	; 0x01
    55be:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55c0:	ce 01       	movw	r24, r28
    55c2:	82 52       	subi	r24, 0x22	; 34
    55c4:	9f 4f       	sbci	r25, 0xFF	; 255
    55c6:	fc 01       	movw	r30, r24
    55c8:	80 81       	ld	r24, Z
    55ca:	91 81       	ldd	r25, Z+1	; 0x01
    55cc:	89 2b       	or	r24, r25
    55ce:	a1 f6       	brne	.-88     	; 0x5578 <LCDBusyLoop+0x140e>
    55d0:	ce 01       	movw	r24, r28
    55d2:	8b 52       	subi	r24, 0x2B	; 43
    55d4:	9f 4f       	sbci	r25, 0xFF	; 255
    55d6:	9e 01       	movw	r18, r28
    55d8:	27 51       	subi	r18, 0x17	; 23
    55da:	3f 4f       	sbci	r19, 0xFF	; 255
    55dc:	f9 01       	movw	r30, r18
    55de:	20 81       	ld	r18, Z
    55e0:	fc 01       	movw	r30, r24
    55e2:	20 83       	st	Z, r18
    55e4:	85 c0       	rjmp	.+266    	; 0x56f0 <LCDBusyLoop+0x1586>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55e6:	8e 01       	movw	r16, r28
    55e8:	02 52       	subi	r16, 0x22	; 34
    55ea:	1f 4f       	sbci	r17, 0xFF	; 255
    55ec:	ce 01       	movw	r24, r28
    55ee:	86 52       	subi	r24, 0x26	; 38
    55f0:	9f 4f       	sbci	r25, 0xFF	; 255
    55f2:	fc 01       	movw	r30, r24
    55f4:	60 81       	ld	r22, Z
    55f6:	71 81       	ldd	r23, Z+1	; 0x01
    55f8:	82 81       	ldd	r24, Z+2	; 0x02
    55fa:	93 81       	ldd	r25, Z+3	; 0x03
    55fc:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    5600:	dc 01       	movw	r26, r24
    5602:	cb 01       	movw	r24, r22
    5604:	f8 01       	movw	r30, r16
    5606:	91 83       	std	Z+1, r25	; 0x01
    5608:	80 83       	st	Z, r24
    560a:	ce 01       	movw	r24, r28
    560c:	8e 51       	subi	r24, 0x1E	; 30
    560e:	9f 4f       	sbci	r25, 0xFF	; 255
    5610:	9e 01       	movw	r18, r28
    5612:	22 52       	subi	r18, 0x22	; 34
    5614:	3f 4f       	sbci	r19, 0xFF	; 255
    5616:	f9 01       	movw	r30, r18
    5618:	20 81       	ld	r18, Z
    561a:	31 81       	ldd	r19, Z+1	; 0x01
    561c:	fc 01       	movw	r30, r24
    561e:	31 83       	std	Z+1, r19	; 0x01
    5620:	20 83       	st	Z, r18
    5622:	ce 01       	movw	r24, r28
    5624:	8e 51       	subi	r24, 0x1E	; 30
    5626:	9f 4f       	sbci	r25, 0xFF	; 255
    5628:	fc 01       	movw	r30, r24
    562a:	80 81       	ld	r24, Z
    562c:	91 81       	ldd	r25, Z+1	; 0x01
    562e:	01 97       	sbiw	r24, 0x01	; 1
    5630:	f1 f7       	brne	.-4      	; 0x562e <LCDBusyLoop+0x14c4>
    5632:	9e 01       	movw	r18, r28
    5634:	2e 51       	subi	r18, 0x1E	; 30
    5636:	3f 4f       	sbci	r19, 0xFF	; 255
    5638:	f9 01       	movw	r30, r18
    563a:	91 83       	std	Z+1, r25	; 0x01
    563c:	80 83       	st	Z, r24
    563e:	ce 01       	movw	r24, r28
    5640:	8b 52       	subi	r24, 0x2B	; 43
    5642:	9f 4f       	sbci	r25, 0xFF	; 255
    5644:	9e 01       	movw	r18, r28
    5646:	27 51       	subi	r18, 0x17	; 23
    5648:	3f 4f       	sbci	r19, 0xFF	; 255
    564a:	f9 01       	movw	r30, r18
    564c:	20 81       	ld	r18, Z
    564e:	fc 01       	movw	r30, r24
    5650:	20 83       	st	Z, r18
    5652:	4e c0       	rjmp	.+156    	; 0x56f0 <LCDBusyLoop+0x1586>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    5654:	ce 01       	movw	r24, r28
    5656:	83 53       	subi	r24, 0x33	; 51
    5658:	9f 4f       	sbci	r25, 0xFF	; 255
    565a:	20 e0       	ldi	r18, 0x00	; 0
    565c:	30 e0       	ldi	r19, 0x00	; 0
    565e:	4f e7       	ldi	r20, 0x7F	; 127
    5660:	53 e4       	ldi	r21, 0x43	; 67
    5662:	fc 01       	movw	r30, r24
    5664:	60 81       	ld	r22, Z
    5666:	71 81       	ldd	r23, Z+1	; 0x01
    5668:	82 81       	ldd	r24, Z+2	; 0x02
    566a:	93 81       	ldd	r25, Z+3	; 0x03
    566c:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    5670:	18 16       	cp	r1, r24
    5672:	6c f5       	brge	.+90     	; 0x56ce <LCDBusyLoop+0x1564>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    5674:	8e 01       	movw	r16, r28
    5676:	0c 51       	subi	r16, 0x1C	; 28
    5678:	1f 4f       	sbci	r17, 0xFF	; 255
    567a:	ce 01       	movw	r24, r28
    567c:	8f 52       	subi	r24, 0x2F	; 47
    567e:	9f 4f       	sbci	r25, 0xFF	; 255
    5680:	fc 01       	movw	r30, r24
    5682:	60 81       	ld	r22, Z
    5684:	71 81       	ldd	r23, Z+1	; 0x01
    5686:	82 81       	ldd	r24, Z+2	; 0x02
    5688:	93 81       	ldd	r25, Z+3	; 0x03
    568a:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    568e:	dc 01       	movw	r26, r24
    5690:	cb 01       	movw	r24, r22
    5692:	f8 01       	movw	r30, r16
    5694:	91 83       	std	Z+1, r25	; 0x01
    5696:	80 83       	st	Z, r24
    5698:	ce 01       	movw	r24, r28
    569a:	8a 51       	subi	r24, 0x1A	; 26
    569c:	9f 4f       	sbci	r25, 0xFF	; 255
    569e:	9e 01       	movw	r18, r28
    56a0:	2c 51       	subi	r18, 0x1C	; 28
    56a2:	3f 4f       	sbci	r19, 0xFF	; 255
    56a4:	f9 01       	movw	r30, r18
    56a6:	20 81       	ld	r18, Z
    56a8:	31 81       	ldd	r19, Z+1	; 0x01
    56aa:	fc 01       	movw	r30, r24
    56ac:	31 83       	std	Z+1, r19	; 0x01
    56ae:	20 83       	st	Z, r18
    56b0:	ce 01       	movw	r24, r28
    56b2:	8a 51       	subi	r24, 0x1A	; 26
    56b4:	9f 4f       	sbci	r25, 0xFF	; 255
    56b6:	fc 01       	movw	r30, r24
    56b8:	80 81       	ld	r24, Z
    56ba:	91 81       	ldd	r25, Z+1	; 0x01
    56bc:	01 97       	sbiw	r24, 0x01	; 1
    56be:	f1 f7       	brne	.-4      	; 0x56bc <LCDBusyLoop+0x1552>
    56c0:	9e 01       	movw	r18, r28
    56c2:	2a 51       	subi	r18, 0x1A	; 26
    56c4:	3f 4f       	sbci	r19, 0xFF	; 255
    56c6:	f9 01       	movw	r30, r18
    56c8:	91 83       	std	Z+1, r25	; 0x01
    56ca:	80 83       	st	Z, r24
    56cc:	28 c0       	rjmp	.+80     	; 0x571e <LCDBusyLoop+0x15b4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    56ce:	8e 01       	movw	r16, r28
    56d0:	0b 52       	subi	r16, 0x2B	; 43
    56d2:	1f 4f       	sbci	r17, 0xFF	; 255
    56d4:	ce 01       	movw	r24, r28
    56d6:	83 53       	subi	r24, 0x33	; 51
    56d8:	9f 4f       	sbci	r25, 0xFF	; 255
    56da:	fc 01       	movw	r30, r24
    56dc:	60 81       	ld	r22, Z
    56de:	71 81       	ldd	r23, Z+1	; 0x01
    56e0:	82 81       	ldd	r24, Z+2	; 0x02
    56e2:	93 81       	ldd	r25, Z+3	; 0x03
    56e4:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    56e8:	dc 01       	movw	r26, r24
    56ea:	cb 01       	movw	r24, r22
    56ec:	f8 01       	movw	r30, r16
    56ee:	80 83       	st	Z, r24
    56f0:	ce 01       	movw	r24, r28
    56f2:	88 51       	subi	r24, 0x18	; 24
    56f4:	9f 4f       	sbci	r25, 0xFF	; 255
    56f6:	9e 01       	movw	r18, r28
    56f8:	2b 52       	subi	r18, 0x2B	; 43
    56fa:	3f 4f       	sbci	r19, 0xFF	; 255
    56fc:	f9 01       	movw	r30, r18
    56fe:	20 81       	ld	r18, Z
    5700:	fc 01       	movw	r30, r24
    5702:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5704:	ce 01       	movw	r24, r28
    5706:	88 51       	subi	r24, 0x18	; 24
    5708:	9f 4f       	sbci	r25, 0xFF	; 255
    570a:	fc 01       	movw	r30, r24
    570c:	80 81       	ld	r24, Z
    570e:	28 2f       	mov	r18, r24
    5710:	2a 95       	dec	r18
    5712:	f1 f7       	brne	.-4      	; 0x5710 <LCDBusyLoop+0x15a6>
    5714:	ce 01       	movw	r24, r28
    5716:	88 51       	subi	r24, 0x18	; 24
    5718:	9f 4f       	sbci	r25, 0xFF	; 255
    571a:	fc 01       	movw	r30, r24
    571c:	20 83       	st	Z, r18
		_delay_us(1);	//tEL
	}
	while(busy);
    571e:	8b 81       	ldd	r24, Y+3	; 0x03
    5720:	88 23       	and	r24, r24
    5722:	11 f0       	breq	.+4      	; 0x5728 <LCDBusyLoop+0x15be>
    5724:	0c 94 cd 21 	jmp	0x439a	; 0x439a <LCDBusyLoop+0x230>

	CLEAR_RW();		//write mode
    5728:	8b e2       	ldi	r24, 0x2B	; 43
    572a:	90 e0       	ldi	r25, 0x00	; 0
    572c:	2b e2       	ldi	r18, 0x2B	; 43
    572e:	30 e0       	ldi	r19, 0x00	; 0
    5730:	f9 01       	movw	r30, r18
    5732:	20 81       	ld	r18, Z
    5734:	2b 7f       	andi	r18, 0xFB	; 251
    5736:	fc 01       	movw	r30, r24
    5738:	20 83       	st	Z, r18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    573a:	8a e2       	ldi	r24, 0x2A	; 42
    573c:	90 e0       	ldi	r25, 0x00	; 0
    573e:	2a e2       	ldi	r18, 0x2A	; 42
    5740:	30 e0       	ldi	r19, 0x00	; 0
    5742:	f9 01       	movw	r30, r18
    5744:	20 81       	ld	r18, Z
    5746:	20 6f       	ori	r18, 0xF0	; 240
    5748:	fc 01       	movw	r30, r24
    574a:	20 83       	st	Z, r18

}
    574c:	c7 51       	subi	r28, 0x17	; 23
    574e:	df 4f       	sbci	r29, 0xFF	; 255
    5750:	0f b6       	in	r0, 0x3f	; 63
    5752:	f8 94       	cli
    5754:	de bf       	out	0x3e, r29	; 62
    5756:	0f be       	out	0x3f, r0	; 63
    5758:	cd bf       	out	0x3d, r28	; 61
    575a:	df 91       	pop	r29
    575c:	cf 91       	pop	r28
    575e:	1f 91       	pop	r17
    5760:	0f 91       	pop	r16
    5762:	08 95       	ret

00005764 <LCDInit>:

/***********************************************************
 * Inicia el LCD
 ***********************************************************/
void LCDInit(uint8_t style){
    5764:	0f 93       	push	r16
    5766:	1f 93       	push	r17
    5768:	cf 93       	push	r28
    576a:	df 93       	push	r29
    576c:	cd b7       	in	r28, 0x3d	; 61
    576e:	de b7       	in	r29, 0x3e	; 62
    5770:	c1 57       	subi	r28, 0x71	; 113
    5772:	d1 09       	sbc	r29, r1
    5774:	0f b6       	in	r0, 0x3f	; 63
    5776:	f8 94       	cli
    5778:	de bf       	out	0x3e, r29	; 62
    577a:	0f be       	out	0x3f, r0	; 63
    577c:	cd bf       	out	0x3d, r28	; 61
    577e:	9e 01       	movw	r18, r28
    5780:	2f 58       	subi	r18, 0x8F	; 143
    5782:	3f 4f       	sbci	r19, 0xFF	; 255
    5784:	f9 01       	movw	r30, r18
    5786:	80 83       	st	Z, r24
    5788:	80 e0       	ldi	r24, 0x00	; 0
    578a:	90 e0       	ldi	r25, 0x00	; 0
    578c:	a0 ef       	ldi	r26, 0xF0	; 240
    578e:	b1 e4       	ldi	r27, 0x41	; 65
    5790:	8b 83       	std	Y+3, r24	; 0x03
    5792:	9c 83       	std	Y+4, r25	; 0x04
    5794:	ad 83       	std	Y+5, r26	; 0x05
    5796:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5798:	20 e0       	ldi	r18, 0x00	; 0
    579a:	30 e0       	ldi	r19, 0x00	; 0
    579c:	4a e7       	ldi	r20, 0x7A	; 122
    579e:	55 e4       	ldi	r21, 0x45	; 69
    57a0:	6b 81       	ldd	r22, Y+3	; 0x03
    57a2:	7c 81       	ldd	r23, Y+4	; 0x04
    57a4:	8d 81       	ldd	r24, Y+5	; 0x05
    57a6:	9e 81       	ldd	r25, Y+6	; 0x06
    57a8:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    57ac:	dc 01       	movw	r26, r24
    57ae:	cb 01       	movw	r24, r22
    57b0:	8f 83       	std	Y+7, r24	; 0x07
    57b2:	98 87       	std	Y+8, r25	; 0x08
    57b4:	a9 87       	std	Y+9, r26	; 0x09
    57b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    57b8:	20 e0       	ldi	r18, 0x00	; 0
    57ba:	30 e0       	ldi	r19, 0x00	; 0
    57bc:	40 e8       	ldi	r20, 0x80	; 128
    57be:	5f e3       	ldi	r21, 0x3F	; 63
    57c0:	6f 81       	ldd	r22, Y+7	; 0x07
    57c2:	78 85       	ldd	r23, Y+8	; 0x08
    57c4:	89 85       	ldd	r24, Y+9	; 0x09
    57c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    57c8:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    57cc:	88 23       	and	r24, r24
    57ce:	2c f4       	brge	.+10     	; 0x57da <LCDInit+0x76>
		__ticks = 1;
    57d0:	81 e0       	ldi	r24, 0x01	; 1
    57d2:	90 e0       	ldi	r25, 0x00	; 0
    57d4:	9c 87       	std	Y+12, r25	; 0x0c
    57d6:	8b 87       	std	Y+11, r24	; 0x0b
    57d8:	3f c0       	rjmp	.+126    	; 0x5858 <LCDInit+0xf4>
	else if (__tmp > 65535)
    57da:	20 e0       	ldi	r18, 0x00	; 0
    57dc:	3f ef       	ldi	r19, 0xFF	; 255
    57de:	4f e7       	ldi	r20, 0x7F	; 127
    57e0:	57 e4       	ldi	r21, 0x47	; 71
    57e2:	6f 81       	ldd	r22, Y+7	; 0x07
    57e4:	78 85       	ldd	r23, Y+8	; 0x08
    57e6:	89 85       	ldd	r24, Y+9	; 0x09
    57e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    57ea:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    57ee:	18 16       	cp	r1, r24
    57f0:	4c f5       	brge	.+82     	; 0x5844 <LCDInit+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57f2:	20 e0       	ldi	r18, 0x00	; 0
    57f4:	30 e0       	ldi	r19, 0x00	; 0
    57f6:	40 e2       	ldi	r20, 0x20	; 32
    57f8:	51 e4       	ldi	r21, 0x41	; 65
    57fa:	6b 81       	ldd	r22, Y+3	; 0x03
    57fc:	7c 81       	ldd	r23, Y+4	; 0x04
    57fe:	8d 81       	ldd	r24, Y+5	; 0x05
    5800:	9e 81       	ldd	r25, Y+6	; 0x06
    5802:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    5806:	dc 01       	movw	r26, r24
    5808:	cb 01       	movw	r24, r22
    580a:	bc 01       	movw	r22, r24
    580c:	cd 01       	movw	r24, r26
    580e:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    5812:	dc 01       	movw	r26, r24
    5814:	cb 01       	movw	r24, r22
    5816:	9c 87       	std	Y+12, r25	; 0x0c
    5818:	8b 87       	std	Y+11, r24	; 0x0b
    581a:	0f c0       	rjmp	.+30     	; 0x583a <LCDInit+0xd6>
    581c:	80 e9       	ldi	r24, 0x90	; 144
    581e:	91 e0       	ldi	r25, 0x01	; 1
    5820:	9e 87       	std	Y+14, r25	; 0x0e
    5822:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5824:	8d 85       	ldd	r24, Y+13	; 0x0d
    5826:	9e 85       	ldd	r25, Y+14	; 0x0e
    5828:	01 97       	sbiw	r24, 0x01	; 1
    582a:	f1 f7       	brne	.-4      	; 0x5828 <LCDInit+0xc4>
    582c:	9e 87       	std	Y+14, r25	; 0x0e
    582e:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5830:	8b 85       	ldd	r24, Y+11	; 0x0b
    5832:	9c 85       	ldd	r25, Y+12	; 0x0c
    5834:	01 97       	sbiw	r24, 0x01	; 1
    5836:	9c 87       	std	Y+12, r25	; 0x0c
    5838:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    583a:	8b 85       	ldd	r24, Y+11	; 0x0b
    583c:	9c 85       	ldd	r25, Y+12	; 0x0c
    583e:	89 2b       	or	r24, r25
    5840:	69 f7       	brne	.-38     	; 0x581c <LCDInit+0xb8>
    5842:	14 c0       	rjmp	.+40     	; 0x586c <LCDInit+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5844:	6f 81       	ldd	r22, Y+7	; 0x07
    5846:	78 85       	ldd	r23, Y+8	; 0x08
    5848:	89 85       	ldd	r24, Y+9	; 0x09
    584a:	9a 85       	ldd	r25, Y+10	; 0x0a
    584c:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    5850:	dc 01       	movw	r26, r24
    5852:	cb 01       	movw	r24, r22
    5854:	9c 87       	std	Y+12, r25	; 0x0c
    5856:	8b 87       	std	Y+11, r24	; 0x0b
    5858:	8b 85       	ldd	r24, Y+11	; 0x0b
    585a:	9c 85       	ldd	r25, Y+12	; 0x0c
    585c:	98 8b       	std	Y+16, r25	; 0x10
    585e:	8f 87       	std	Y+15, r24	; 0x0f
    5860:	8f 85       	ldd	r24, Y+15	; 0x0f
    5862:	98 89       	ldd	r25, Y+16	; 0x10
    5864:	01 97       	sbiw	r24, 0x01	; 1
    5866:	f1 f7       	brne	.-4      	; 0x5864 <LCDInit+0x100>
    5868:	98 8b       	std	Y+16, r25	; 0x10
    586a:	8f 87       	std	Y+15, r24	; 0x0f
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    586c:	8a e2       	ldi	r24, 0x2A	; 42
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	2a e2       	ldi	r18, 0x2A	; 42
    5872:	30 e0       	ldi	r19, 0x00	; 0
    5874:	f9 01       	movw	r30, r18
    5876:	20 81       	ld	r18, Z
    5878:	20 6f       	ori	r18, 0xF0	; 240
    587a:	fc 01       	movw	r30, r24
    587c:	20 83       	st	Z, r18
	LCD_E_DDR|=(1<<LCD_E_POS);
    587e:	84 e2       	ldi	r24, 0x24	; 36
    5880:	90 e0       	ldi	r25, 0x00	; 0
    5882:	24 e2       	ldi	r18, 0x24	; 36
    5884:	30 e0       	ldi	r19, 0x00	; 0
    5886:	f9 01       	movw	r30, r18
    5888:	20 81       	ld	r18, Z
    588a:	22 60       	ori	r18, 0x02	; 2
    588c:	fc 01       	movw	r30, r24
    588e:	20 83       	st	Z, r18
	LCD_RS_DDR|=(1<<LCD_RS_POS);
    5890:	8a e2       	ldi	r24, 0x2A	; 42
    5892:	90 e0       	ldi	r25, 0x00	; 0
    5894:	2a e2       	ldi	r18, 0x2A	; 42
    5896:	30 e0       	ldi	r19, 0x00	; 0
    5898:	f9 01       	movw	r30, r18
    589a:	20 81       	ld	r18, Z
    589c:	28 60       	ori	r18, 0x08	; 8
    589e:	fc 01       	movw	r30, r24
    58a0:	20 83       	st	Z, r18
	LCD_RW_DDR|=(1<<LCD_RW_POS);
    58a2:	8a e2       	ldi	r24, 0x2A	; 42
    58a4:	90 e0       	ldi	r25, 0x00	; 0
    58a6:	2a e2       	ldi	r18, 0x2A	; 42
    58a8:	30 e0       	ldi	r19, 0x00	; 0
    58aa:	f9 01       	movw	r30, r18
    58ac:	20 81       	ld	r18, Z
    58ae:	24 60       	ori	r18, 0x04	; 4
    58b0:	fc 01       	movw	r30, r24
    58b2:	20 83       	st	Z, r18

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
    58b4:	8b e2       	ldi	r24, 0x2B	; 43
    58b6:	90 e0       	ldi	r25, 0x00	; 0
    58b8:	2b e2       	ldi	r18, 0x2B	; 43
    58ba:	30 e0       	ldi	r19, 0x00	; 0
    58bc:	f9 01       	movw	r30, r18
    58be:	20 81       	ld	r18, Z
    58c0:	2f 70       	andi	r18, 0x0F	; 15
    58c2:	fc 01       	movw	r30, r24
    58c4:	20 83       	st	Z, r18
	CLEAR_E();
    58c6:	85 e2       	ldi	r24, 0x25	; 37
    58c8:	90 e0       	ldi	r25, 0x00	; 0
    58ca:	25 e2       	ldi	r18, 0x25	; 37
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	f9 01       	movw	r30, r18
    58d0:	20 81       	ld	r18, Z
    58d2:	2d 7f       	andi	r18, 0xFD	; 253
    58d4:	fc 01       	movw	r30, r24
    58d6:	20 83       	st	Z, r18
	CLEAR_RW();
    58d8:	8b e2       	ldi	r24, 0x2B	; 43
    58da:	90 e0       	ldi	r25, 0x00	; 0
    58dc:	2b e2       	ldi	r18, 0x2B	; 43
    58de:	30 e0       	ldi	r19, 0x00	; 0
    58e0:	f9 01       	movw	r30, r18
    58e2:	20 81       	ld	r18, Z
    58e4:	2b 7f       	andi	r18, 0xFB	; 251
    58e6:	fc 01       	movw	r30, r24
    58e8:	20 83       	st	Z, r18
	CLEAR_RS();
    58ea:	8b e2       	ldi	r24, 0x2B	; 43
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	2b e2       	ldi	r18, 0x2B	; 43
    58f0:	30 e0       	ldi	r19, 0x00	; 0
    58f2:	f9 01       	movw	r30, r18
    58f4:	20 81       	ld	r18, Z
    58f6:	27 7f       	andi	r18, 0xF7	; 247
    58f8:	fc 01       	movw	r30, r24
    58fa:	20 83       	st	Z, r18
    58fc:	8a e9       	ldi	r24, 0x9A	; 154
    58fe:	99 e9       	ldi	r25, 0x99	; 153
    5900:	a9 e9       	ldi	r26, 0x99	; 153
    5902:	be e3       	ldi	r27, 0x3E	; 62
    5904:	89 8b       	std	Y+17, r24	; 0x11
    5906:	9a 8b       	std	Y+18, r25	; 0x12
    5908:	ab 8b       	std	Y+19, r26	; 0x13
    590a:	bc 8b       	std	Y+20, r27	; 0x14
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    590c:	2b ea       	ldi	r18, 0xAB	; 171
    590e:	3a ea       	ldi	r19, 0xAA	; 170
    5910:	4a ea       	ldi	r20, 0xAA	; 170
    5912:	50 e4       	ldi	r21, 0x40	; 64
    5914:	69 89       	ldd	r22, Y+17	; 0x11
    5916:	7a 89       	ldd	r23, Y+18	; 0x12
    5918:	8b 89       	ldd	r24, Y+19	; 0x13
    591a:	9c 89       	ldd	r25, Y+20	; 0x14
    591c:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    5920:	dc 01       	movw	r26, r24
    5922:	cb 01       	movw	r24, r22
    5924:	8d 8b       	std	Y+21, r24	; 0x15
    5926:	9e 8b       	std	Y+22, r25	; 0x16
    5928:	af 8b       	std	Y+23, r26	; 0x17
    592a:	b8 8f       	std	Y+24, r27	; 0x18
	__tmp2 = ((F_CPU) / 4e6) * __us;
    592c:	20 e0       	ldi	r18, 0x00	; 0
    592e:	30 e0       	ldi	r19, 0x00	; 0
    5930:	40 e8       	ldi	r20, 0x80	; 128
    5932:	50 e4       	ldi	r21, 0x40	; 64
    5934:	69 89       	ldd	r22, Y+17	; 0x11
    5936:	7a 89       	ldd	r23, Y+18	; 0x12
    5938:	8b 89       	ldd	r24, Y+19	; 0x13
    593a:	9c 89       	ldd	r25, Y+20	; 0x14
    593c:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    5940:	dc 01       	movw	r26, r24
    5942:	cb 01       	movw	r24, r22
    5944:	89 8f       	std	Y+25, r24	; 0x19
    5946:	9a 8f       	std	Y+26, r25	; 0x1a
    5948:	ab 8f       	std	Y+27, r26	; 0x1b
    594a:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
    594c:	20 e0       	ldi	r18, 0x00	; 0
    594e:	30 e0       	ldi	r19, 0x00	; 0
    5950:	40 e8       	ldi	r20, 0x80	; 128
    5952:	5f e3       	ldi	r21, 0x3F	; 63
    5954:	6d 89       	ldd	r22, Y+21	; 0x15
    5956:	7e 89       	ldd	r23, Y+22	; 0x16
    5958:	8f 89       	ldd	r24, Y+23	; 0x17
    595a:	98 8d       	ldd	r25, Y+24	; 0x18
    595c:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    5960:	88 23       	and	r24, r24
    5962:	1c f4       	brge	.+6      	; 0x596a <LCDInit+0x206>
		__ticks = 1;
    5964:	81 e0       	ldi	r24, 0x01	; 1
    5966:	8d 8f       	std	Y+29, r24	; 0x1d
    5968:	b2 c0       	rjmp	.+356    	; 0x5ace <LCDInit+0x36a>
	else if (__tmp2 > 65535)
    596a:	20 e0       	ldi	r18, 0x00	; 0
    596c:	3f ef       	ldi	r19, 0xFF	; 255
    596e:	4f e7       	ldi	r20, 0x7F	; 127
    5970:	57 e4       	ldi	r21, 0x47	; 71
    5972:	69 8d       	ldd	r22, Y+25	; 0x19
    5974:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5976:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5978:	9c 8d       	ldd	r25, Y+28	; 0x1c
    597a:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    597e:	18 16       	cp	r1, r24
    5980:	0c f0       	brlt	.+2      	; 0x5984 <LCDInit+0x220>
    5982:	7b c0       	rjmp	.+246    	; 0x5a7a <LCDInit+0x316>
	{
		_delay_ms(__us / 1000.0);
    5984:	20 e0       	ldi	r18, 0x00	; 0
    5986:	30 e0       	ldi	r19, 0x00	; 0
    5988:	4a e7       	ldi	r20, 0x7A	; 122
    598a:	54 e4       	ldi	r21, 0x44	; 68
    598c:	69 89       	ldd	r22, Y+17	; 0x11
    598e:	7a 89       	ldd	r23, Y+18	; 0x12
    5990:	8b 89       	ldd	r24, Y+19	; 0x13
    5992:	9c 89       	ldd	r25, Y+20	; 0x14
    5994:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    5998:	dc 01       	movw	r26, r24
    599a:	cb 01       	movw	r24, r22
    599c:	8e 8f       	std	Y+30, r24	; 0x1e
    599e:	9f 8f       	std	Y+31, r25	; 0x1f
    59a0:	a8 a3       	std	Y+32, r26	; 0x20
    59a2:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    59a4:	20 e0       	ldi	r18, 0x00	; 0
    59a6:	30 e0       	ldi	r19, 0x00	; 0
    59a8:	4a e7       	ldi	r20, 0x7A	; 122
    59aa:	55 e4       	ldi	r21, 0x45	; 69
    59ac:	6e 8d       	ldd	r22, Y+30	; 0x1e
    59ae:	7f 8d       	ldd	r23, Y+31	; 0x1f
    59b0:	88 a1       	ldd	r24, Y+32	; 0x20
    59b2:	99 a1       	ldd	r25, Y+33	; 0x21
    59b4:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    59b8:	dc 01       	movw	r26, r24
    59ba:	cb 01       	movw	r24, r22
    59bc:	8a a3       	std	Y+34, r24	; 0x22
    59be:	9b a3       	std	Y+35, r25	; 0x23
    59c0:	ac a3       	std	Y+36, r26	; 0x24
    59c2:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
    59c4:	20 e0       	ldi	r18, 0x00	; 0
    59c6:	30 e0       	ldi	r19, 0x00	; 0
    59c8:	40 e8       	ldi	r20, 0x80	; 128
    59ca:	5f e3       	ldi	r21, 0x3F	; 63
    59cc:	6a a1       	ldd	r22, Y+34	; 0x22
    59ce:	7b a1       	ldd	r23, Y+35	; 0x23
    59d0:	8c a1       	ldd	r24, Y+36	; 0x24
    59d2:	9d a1       	ldd	r25, Y+37	; 0x25
    59d4:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    59d8:	88 23       	and	r24, r24
    59da:	2c f4       	brge	.+10     	; 0x59e6 <LCDInit+0x282>
		__ticks = 1;
    59dc:	81 e0       	ldi	r24, 0x01	; 1
    59de:	90 e0       	ldi	r25, 0x00	; 0
    59e0:	9f a3       	std	Y+39, r25	; 0x27
    59e2:	8e a3       	std	Y+38, r24	; 0x26
    59e4:	3f c0       	rjmp	.+126    	; 0x5a64 <LCDInit+0x300>
	else if (__tmp > 65535)
    59e6:	20 e0       	ldi	r18, 0x00	; 0
    59e8:	3f ef       	ldi	r19, 0xFF	; 255
    59ea:	4f e7       	ldi	r20, 0x7F	; 127
    59ec:	57 e4       	ldi	r21, 0x47	; 71
    59ee:	6a a1       	ldd	r22, Y+34	; 0x22
    59f0:	7b a1       	ldd	r23, Y+35	; 0x23
    59f2:	8c a1       	ldd	r24, Y+36	; 0x24
    59f4:	9d a1       	ldd	r25, Y+37	; 0x25
    59f6:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    59fa:	18 16       	cp	r1, r24
    59fc:	4c f5       	brge	.+82     	; 0x5a50 <LCDInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59fe:	20 e0       	ldi	r18, 0x00	; 0
    5a00:	30 e0       	ldi	r19, 0x00	; 0
    5a02:	40 e2       	ldi	r20, 0x20	; 32
    5a04:	51 e4       	ldi	r21, 0x41	; 65
    5a06:	6e 8d       	ldd	r22, Y+30	; 0x1e
    5a08:	7f 8d       	ldd	r23, Y+31	; 0x1f
    5a0a:	88 a1       	ldd	r24, Y+32	; 0x20
    5a0c:	99 a1       	ldd	r25, Y+33	; 0x21
    5a0e:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    5a12:	dc 01       	movw	r26, r24
    5a14:	cb 01       	movw	r24, r22
    5a16:	bc 01       	movw	r22, r24
    5a18:	cd 01       	movw	r24, r26
    5a1a:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    5a1e:	dc 01       	movw	r26, r24
    5a20:	cb 01       	movw	r24, r22
    5a22:	9f a3       	std	Y+39, r25	; 0x27
    5a24:	8e a3       	std	Y+38, r24	; 0x26
    5a26:	0f c0       	rjmp	.+30     	; 0x5a46 <LCDInit+0x2e2>
    5a28:	80 e9       	ldi	r24, 0x90	; 144
    5a2a:	91 e0       	ldi	r25, 0x01	; 1
    5a2c:	99 a7       	std	Y+41, r25	; 0x29
    5a2e:	88 a7       	std	Y+40, r24	; 0x28
    5a30:	88 a5       	ldd	r24, Y+40	; 0x28
    5a32:	99 a5       	ldd	r25, Y+41	; 0x29
    5a34:	01 97       	sbiw	r24, 0x01	; 1
    5a36:	f1 f7       	brne	.-4      	; 0x5a34 <LCDInit+0x2d0>
    5a38:	99 a7       	std	Y+41, r25	; 0x29
    5a3a:	88 a7       	std	Y+40, r24	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a3c:	8e a1       	ldd	r24, Y+38	; 0x26
    5a3e:	9f a1       	ldd	r25, Y+39	; 0x27
    5a40:	01 97       	sbiw	r24, 0x01	; 1
    5a42:	9f a3       	std	Y+39, r25	; 0x27
    5a44:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a46:	8e a1       	ldd	r24, Y+38	; 0x26
    5a48:	9f a1       	ldd	r25, Y+39	; 0x27
    5a4a:	89 2b       	or	r24, r25
    5a4c:	69 f7       	brne	.-38     	; 0x5a28 <LCDInit+0x2c4>
    5a4e:	3f c0       	rjmp	.+126    	; 0x5ace <LCDInit+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a50:	6a a1       	ldd	r22, Y+34	; 0x22
    5a52:	7b a1       	ldd	r23, Y+35	; 0x23
    5a54:	8c a1       	ldd	r24, Y+36	; 0x24
    5a56:	9d a1       	ldd	r25, Y+37	; 0x25
    5a58:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    5a5c:	dc 01       	movw	r26, r24
    5a5e:	cb 01       	movw	r24, r22
    5a60:	9f a3       	std	Y+39, r25	; 0x27
    5a62:	8e a3       	std	Y+38, r24	; 0x26
    5a64:	8e a1       	ldd	r24, Y+38	; 0x26
    5a66:	9f a1       	ldd	r25, Y+39	; 0x27
    5a68:	9b a7       	std	Y+43, r25	; 0x2b
    5a6a:	8a a7       	std	Y+42, r24	; 0x2a
    5a6c:	8a a5       	ldd	r24, Y+42	; 0x2a
    5a6e:	9b a5       	ldd	r25, Y+43	; 0x2b
    5a70:	01 97       	sbiw	r24, 0x01	; 1
    5a72:	f1 f7       	brne	.-4      	; 0x5a70 <LCDInit+0x30c>
    5a74:	9b a7       	std	Y+43, r25	; 0x2b
    5a76:	8a a7       	std	Y+42, r24	; 0x2a
    5a78:	2a c0       	rjmp	.+84     	; 0x5ace <LCDInit+0x36a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    5a7a:	20 e0       	ldi	r18, 0x00	; 0
    5a7c:	30 e0       	ldi	r19, 0x00	; 0
    5a7e:	4f e7       	ldi	r20, 0x7F	; 127
    5a80:	53 e4       	ldi	r21, 0x43	; 67
    5a82:	6d 89       	ldd	r22, Y+21	; 0x15
    5a84:	7e 89       	ldd	r23, Y+22	; 0x16
    5a86:	8f 89       	ldd	r24, Y+23	; 0x17
    5a88:	98 8d       	ldd	r25, Y+24	; 0x18
    5a8a:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    5a8e:	18 16       	cp	r1, r24
    5a90:	ac f4       	brge	.+42     	; 0x5abc <LCDInit+0x358>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    5a92:	69 8d       	ldd	r22, Y+25	; 0x19
    5a94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a9a:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    5a9e:	dc 01       	movw	r26, r24
    5aa0:	cb 01       	movw	r24, r22
    5aa2:	9d a7       	std	Y+45, r25	; 0x2d
    5aa4:	8c a7       	std	Y+44, r24	; 0x2c
    5aa6:	8c a5       	ldd	r24, Y+44	; 0x2c
    5aa8:	9d a5       	ldd	r25, Y+45	; 0x2d
    5aaa:	9f a7       	std	Y+47, r25	; 0x2f
    5aac:	8e a7       	std	Y+46, r24	; 0x2e
    5aae:	8e a5       	ldd	r24, Y+46	; 0x2e
    5ab0:	9f a5       	ldd	r25, Y+47	; 0x2f
    5ab2:	01 97       	sbiw	r24, 0x01	; 1
    5ab4:	f1 f7       	brne	.-4      	; 0x5ab2 <LCDInit+0x34e>
    5ab6:	9f a7       	std	Y+47, r25	; 0x2f
    5ab8:	8e a7       	std	Y+46, r24	; 0x2e
    5aba:	0f c0       	rjmp	.+30     	; 0x5ada <LCDInit+0x376>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5abc:	6d 89       	ldd	r22, Y+21	; 0x15
    5abe:	7e 89       	ldd	r23, Y+22	; 0x16
    5ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    5ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    5ac4:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    5ac8:	dc 01       	movw	r26, r24
    5aca:	cb 01       	movw	r24, r22
    5acc:	8d 8f       	std	Y+29, r24	; 0x1d
    5ace:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ad0:	88 ab       	std	Y+48, r24	; 0x30
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5ad2:	88 a9       	ldd	r24, Y+48	; 0x30
    5ad4:	8a 95       	dec	r24
    5ad6:	f1 f7       	brne	.-4      	; 0x5ad4 <LCDInit+0x370>
    5ad8:	88 ab       	std	Y+48, r24	; 0x30

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	char chData = 0b00000010;
    5ada:	82 e0       	ldi	r24, 0x02	; 2
    5adc:	8a 83       	std	Y+2, r24	; 0x02
			chData|=(1<<(11-i));
		}
	}
	#endif

	SET_E();
    5ade:	85 e2       	ldi	r24, 0x25	; 37
    5ae0:	90 e0       	ldi	r25, 0x00	; 0
    5ae2:	25 e2       	ldi	r18, 0x25	; 37
    5ae4:	30 e0       	ldi	r19, 0x00	; 0
    5ae6:	f9 01       	movw	r30, r18
    5ae8:	20 81       	ld	r18, Z
    5aea:	22 60       	ori	r18, 0x02	; 2
    5aec:	fc 01       	movw	r30, r24
    5aee:	20 83       	st	Z, r18
	LCD_DATA_PORT|=((chData)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
    5af0:	8b e2       	ldi	r24, 0x2B	; 43
    5af2:	90 e0       	ldi	r25, 0x00	; 0
    5af4:	2b e2       	ldi	r18, 0x2B	; 43
    5af6:	30 e0       	ldi	r19, 0x00	; 0
    5af8:	f9 01       	movw	r30, r18
    5afa:	20 81       	ld	r18, Z
    5afc:	42 2f       	mov	r20, r18
    5afe:	2a 81       	ldd	r18, Y+2	; 0x02
    5b00:	22 2f       	mov	r18, r18
    5b02:	30 e0       	ldi	r19, 0x00	; 0
    5b04:	22 95       	swap	r18
    5b06:	32 95       	swap	r19
    5b08:	30 7f       	andi	r19, 0xF0	; 240
    5b0a:	32 27       	eor	r19, r18
    5b0c:	20 7f       	andi	r18, 0xF0	; 240
    5b0e:	32 27       	eor	r19, r18
    5b10:	24 2b       	or	r18, r20
    5b12:	fc 01       	movw	r30, r24
    5b14:	20 83       	st	Z, r18
    5b16:	80 e0       	ldi	r24, 0x00	; 0
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	a0 e8       	ldi	r26, 0x80	; 128
    5b1c:	bf e3       	ldi	r27, 0x3F	; 63
    5b1e:	89 ab       	std	Y+49, r24	; 0x31
    5b20:	9a ab       	std	Y+50, r25	; 0x32
    5b22:	ab ab       	std	Y+51, r26	; 0x33
    5b24:	bc ab       	std	Y+52, r27	; 0x34
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    5b26:	2b ea       	ldi	r18, 0xAB	; 171
    5b28:	3a ea       	ldi	r19, 0xAA	; 170
    5b2a:	4a ea       	ldi	r20, 0xAA	; 170
    5b2c:	50 e4       	ldi	r21, 0x40	; 64
    5b2e:	69 a9       	ldd	r22, Y+49	; 0x31
    5b30:	7a a9       	ldd	r23, Y+50	; 0x32
    5b32:	8b a9       	ldd	r24, Y+51	; 0x33
    5b34:	9c a9       	ldd	r25, Y+52	; 0x34
    5b36:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    5b3a:	dc 01       	movw	r26, r24
    5b3c:	cb 01       	movw	r24, r22
    5b3e:	8d ab       	std	Y+53, r24	; 0x35
    5b40:	9e ab       	std	Y+54, r25	; 0x36
    5b42:	af ab       	std	Y+55, r26	; 0x37
    5b44:	b8 af       	std	Y+56, r27	; 0x38
	__tmp2 = ((F_CPU) / 4e6) * __us;
    5b46:	20 e0       	ldi	r18, 0x00	; 0
    5b48:	30 e0       	ldi	r19, 0x00	; 0
    5b4a:	40 e8       	ldi	r20, 0x80	; 128
    5b4c:	50 e4       	ldi	r21, 0x40	; 64
    5b4e:	69 a9       	ldd	r22, Y+49	; 0x31
    5b50:	7a a9       	ldd	r23, Y+50	; 0x32
    5b52:	8b a9       	ldd	r24, Y+51	; 0x33
    5b54:	9c a9       	ldd	r25, Y+52	; 0x34
    5b56:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    5b5a:	dc 01       	movw	r26, r24
    5b5c:	cb 01       	movw	r24, r22
    5b5e:	89 af       	std	Y+57, r24	; 0x39
    5b60:	9a af       	std	Y+58, r25	; 0x3a
    5b62:	ab af       	std	Y+59, r26	; 0x3b
    5b64:	bc af       	std	Y+60, r27	; 0x3c
	if (__tmp < 1.0)
    5b66:	20 e0       	ldi	r18, 0x00	; 0
    5b68:	30 e0       	ldi	r19, 0x00	; 0
    5b6a:	40 e8       	ldi	r20, 0x80	; 128
    5b6c:	5f e3       	ldi	r21, 0x3F	; 63
    5b6e:	6d a9       	ldd	r22, Y+53	; 0x35
    5b70:	7e a9       	ldd	r23, Y+54	; 0x36
    5b72:	8f a9       	ldd	r24, Y+55	; 0x37
    5b74:	98 ad       	ldd	r25, Y+56	; 0x38
    5b76:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    5b7a:	88 23       	and	r24, r24
    5b7c:	1c f4       	brge	.+6      	; 0x5b84 <LCDInit+0x420>
		__ticks = 1;
    5b7e:	81 e0       	ldi	r24, 0x01	; 1
    5b80:	8d af       	std	Y+61, r24	; 0x3d
    5b82:	16 c1       	rjmp	.+556    	; 0x5db0 <LCDInit+0x64c>
	else if (__tmp2 > 65535)
    5b84:	20 e0       	ldi	r18, 0x00	; 0
    5b86:	3f ef       	ldi	r19, 0xFF	; 255
    5b88:	4f e7       	ldi	r20, 0x7F	; 127
    5b8a:	57 e4       	ldi	r21, 0x47	; 71
    5b8c:	69 ad       	ldd	r22, Y+57	; 0x39
    5b8e:	7a ad       	ldd	r23, Y+58	; 0x3a
    5b90:	8b ad       	ldd	r24, Y+59	; 0x3b
    5b92:	9c ad       	ldd	r25, Y+60	; 0x3c
    5b94:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    5b98:	18 16       	cp	r1, r24
    5b9a:	0c f0       	brlt	.+2      	; 0x5b9e <LCDInit+0x43a>
    5b9c:	cb c0       	rjmp	.+406    	; 0x5d34 <LCDInit+0x5d0>
	{
		_delay_ms(__us / 1000.0);
    5b9e:	20 e0       	ldi	r18, 0x00	; 0
    5ba0:	30 e0       	ldi	r19, 0x00	; 0
    5ba2:	4a e7       	ldi	r20, 0x7A	; 122
    5ba4:	54 e4       	ldi	r21, 0x44	; 68
    5ba6:	69 a9       	ldd	r22, Y+49	; 0x31
    5ba8:	7a a9       	ldd	r23, Y+50	; 0x32
    5baa:	8b a9       	ldd	r24, Y+51	; 0x33
    5bac:	9c a9       	ldd	r25, Y+52	; 0x34
    5bae:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    5bb2:	dc 01       	movw	r26, r24
    5bb4:	cb 01       	movw	r24, r22
    5bb6:	9e 01       	movw	r18, r28
    5bb8:	22 5c       	subi	r18, 0xC2	; 194
    5bba:	3f 4f       	sbci	r19, 0xFF	; 255
    5bbc:	f9 01       	movw	r30, r18
    5bbe:	80 83       	st	Z, r24
    5bc0:	91 83       	std	Z+1, r25	; 0x01
    5bc2:	a2 83       	std	Z+2, r26	; 0x02
    5bc4:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5bc6:	8e 01       	movw	r16, r28
    5bc8:	0e 5b       	subi	r16, 0xBE	; 190
    5bca:	1f 4f       	sbci	r17, 0xFF	; 255
    5bcc:	ce 01       	movw	r24, r28
    5bce:	ce 96       	adiw	r24, 0x3e	; 62
    5bd0:	20 e0       	ldi	r18, 0x00	; 0
    5bd2:	30 e0       	ldi	r19, 0x00	; 0
    5bd4:	4a e7       	ldi	r20, 0x7A	; 122
    5bd6:	55 e4       	ldi	r21, 0x45	; 69
    5bd8:	fc 01       	movw	r30, r24
    5bda:	60 81       	ld	r22, Z
    5bdc:	71 81       	ldd	r23, Z+1	; 0x01
    5bde:	82 81       	ldd	r24, Z+2	; 0x02
    5be0:	93 81       	ldd	r25, Z+3	; 0x03
    5be2:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    5be6:	dc 01       	movw	r26, r24
    5be8:	cb 01       	movw	r24, r22
    5bea:	f8 01       	movw	r30, r16
    5bec:	80 83       	st	Z, r24
    5bee:	91 83       	std	Z+1, r25	; 0x01
    5bf0:	a2 83       	std	Z+2, r26	; 0x02
    5bf2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5bf4:	ce 01       	movw	r24, r28
    5bf6:	8e 5b       	subi	r24, 0xBE	; 190
    5bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    5bfa:	20 e0       	ldi	r18, 0x00	; 0
    5bfc:	30 e0       	ldi	r19, 0x00	; 0
    5bfe:	40 e8       	ldi	r20, 0x80	; 128
    5c00:	5f e3       	ldi	r21, 0x3F	; 63
    5c02:	fc 01       	movw	r30, r24
    5c04:	60 81       	ld	r22, Z
    5c06:	71 81       	ldd	r23, Z+1	; 0x01
    5c08:	82 81       	ldd	r24, Z+2	; 0x02
    5c0a:	93 81       	ldd	r25, Z+3	; 0x03
    5c0c:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    5c10:	88 23       	and	r24, r24
    5c12:	4c f4       	brge	.+18     	; 0x5c26 <LCDInit+0x4c2>
		__ticks = 1;
    5c14:	ce 01       	movw	r24, r28
    5c16:	8a 5b       	subi	r24, 0xBA	; 186
    5c18:	9f 4f       	sbci	r25, 0xFF	; 255
    5c1a:	21 e0       	ldi	r18, 0x01	; 1
    5c1c:	30 e0       	ldi	r19, 0x00	; 0
    5c1e:	fc 01       	movw	r30, r24
    5c20:	31 83       	std	Z+1, r19	; 0x01
    5c22:	20 83       	st	Z, r18
    5c24:	6c c0       	rjmp	.+216    	; 0x5cfe <LCDInit+0x59a>
	else if (__tmp > 65535)
    5c26:	ce 01       	movw	r24, r28
    5c28:	8e 5b       	subi	r24, 0xBE	; 190
    5c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c2c:	20 e0       	ldi	r18, 0x00	; 0
    5c2e:	3f ef       	ldi	r19, 0xFF	; 255
    5c30:	4f e7       	ldi	r20, 0x7F	; 127
    5c32:	57 e4       	ldi	r21, 0x47	; 71
    5c34:	fc 01       	movw	r30, r24
    5c36:	60 81       	ld	r22, Z
    5c38:	71 81       	ldd	r23, Z+1	; 0x01
    5c3a:	82 81       	ldd	r24, Z+2	; 0x02
    5c3c:	93 81       	ldd	r25, Z+3	; 0x03
    5c3e:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    5c42:	18 16       	cp	r1, r24
    5c44:	0c f0       	brlt	.+2      	; 0x5c48 <LCDInit+0x4e4>
    5c46:	49 c0       	rjmp	.+146    	; 0x5cda <LCDInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c48:	ce 01       	movw	r24, r28
    5c4a:	ce 96       	adiw	r24, 0x3e	; 62
    5c4c:	20 e0       	ldi	r18, 0x00	; 0
    5c4e:	30 e0       	ldi	r19, 0x00	; 0
    5c50:	40 e2       	ldi	r20, 0x20	; 32
    5c52:	51 e4       	ldi	r21, 0x41	; 65
    5c54:	fc 01       	movw	r30, r24
    5c56:	60 81       	ld	r22, Z
    5c58:	71 81       	ldd	r23, Z+1	; 0x01
    5c5a:	82 81       	ldd	r24, Z+2	; 0x02
    5c5c:	93 81       	ldd	r25, Z+3	; 0x03
    5c5e:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    5c62:	dc 01       	movw	r26, r24
    5c64:	cb 01       	movw	r24, r22
    5c66:	8e 01       	movw	r16, r28
    5c68:	0a 5b       	subi	r16, 0xBA	; 186
    5c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    5c6c:	bc 01       	movw	r22, r24
    5c6e:	cd 01       	movw	r24, r26
    5c70:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    5c74:	dc 01       	movw	r26, r24
    5c76:	cb 01       	movw	r24, r22
    5c78:	f8 01       	movw	r30, r16
    5c7a:	91 83       	std	Z+1, r25	; 0x01
    5c7c:	80 83       	st	Z, r24
    5c7e:	24 c0       	rjmp	.+72     	; 0x5cc8 <LCDInit+0x564>
    5c80:	ce 01       	movw	r24, r28
    5c82:	88 5b       	subi	r24, 0xB8	; 184
    5c84:	9f 4f       	sbci	r25, 0xFF	; 255
    5c86:	20 e9       	ldi	r18, 0x90	; 144
    5c88:	31 e0       	ldi	r19, 0x01	; 1
    5c8a:	fc 01       	movw	r30, r24
    5c8c:	31 83       	std	Z+1, r19	; 0x01
    5c8e:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5c90:	ce 01       	movw	r24, r28
    5c92:	88 5b       	subi	r24, 0xB8	; 184
    5c94:	9f 4f       	sbci	r25, 0xFF	; 255
    5c96:	fc 01       	movw	r30, r24
    5c98:	80 81       	ld	r24, Z
    5c9a:	91 81       	ldd	r25, Z+1	; 0x01
    5c9c:	01 97       	sbiw	r24, 0x01	; 1
    5c9e:	f1 f7       	brne	.-4      	; 0x5c9c <LCDInit+0x538>
    5ca0:	9e 01       	movw	r18, r28
    5ca2:	28 5b       	subi	r18, 0xB8	; 184
    5ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ca6:	f9 01       	movw	r30, r18
    5ca8:	91 83       	std	Z+1, r25	; 0x01
    5caa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cac:	ce 01       	movw	r24, r28
    5cae:	8a 5b       	subi	r24, 0xBA	; 186
    5cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    5cb2:	9e 01       	movw	r18, r28
    5cb4:	2a 5b       	subi	r18, 0xBA	; 186
    5cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    5cb8:	f9 01       	movw	r30, r18
    5cba:	20 81       	ld	r18, Z
    5cbc:	31 81       	ldd	r19, Z+1	; 0x01
    5cbe:	21 50       	subi	r18, 0x01	; 1
    5cc0:	31 09       	sbc	r19, r1
    5cc2:	fc 01       	movw	r30, r24
    5cc4:	31 83       	std	Z+1, r19	; 0x01
    5cc6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cc8:	ce 01       	movw	r24, r28
    5cca:	8a 5b       	subi	r24, 0xBA	; 186
    5ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    5cce:	fc 01       	movw	r30, r24
    5cd0:	80 81       	ld	r24, Z
    5cd2:	91 81       	ldd	r25, Z+1	; 0x01
    5cd4:	89 2b       	or	r24, r25
    5cd6:	a1 f6       	brne	.-88     	; 0x5c80 <LCDInit+0x51c>
    5cd8:	6b c0       	rjmp	.+214    	; 0x5db0 <LCDInit+0x64c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cda:	8e 01       	movw	r16, r28
    5cdc:	0a 5b       	subi	r16, 0xBA	; 186
    5cde:	1f 4f       	sbci	r17, 0xFF	; 255
    5ce0:	ce 01       	movw	r24, r28
    5ce2:	8e 5b       	subi	r24, 0xBE	; 190
    5ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce6:	fc 01       	movw	r30, r24
    5ce8:	60 81       	ld	r22, Z
    5cea:	71 81       	ldd	r23, Z+1	; 0x01
    5cec:	82 81       	ldd	r24, Z+2	; 0x02
    5cee:	93 81       	ldd	r25, Z+3	; 0x03
    5cf0:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    5cf4:	dc 01       	movw	r26, r24
    5cf6:	cb 01       	movw	r24, r22
    5cf8:	f8 01       	movw	r30, r16
    5cfa:	91 83       	std	Z+1, r25	; 0x01
    5cfc:	80 83       	st	Z, r24
    5cfe:	ce 01       	movw	r24, r28
    5d00:	86 5b       	subi	r24, 0xB6	; 182
    5d02:	9f 4f       	sbci	r25, 0xFF	; 255
    5d04:	9e 01       	movw	r18, r28
    5d06:	2a 5b       	subi	r18, 0xBA	; 186
    5d08:	3f 4f       	sbci	r19, 0xFF	; 255
    5d0a:	f9 01       	movw	r30, r18
    5d0c:	20 81       	ld	r18, Z
    5d0e:	31 81       	ldd	r19, Z+1	; 0x01
    5d10:	fc 01       	movw	r30, r24
    5d12:	31 83       	std	Z+1, r19	; 0x01
    5d14:	20 83       	st	Z, r18
    5d16:	ce 01       	movw	r24, r28
    5d18:	86 5b       	subi	r24, 0xB6	; 182
    5d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d1c:	fc 01       	movw	r30, r24
    5d1e:	80 81       	ld	r24, Z
    5d20:	91 81       	ldd	r25, Z+1	; 0x01
    5d22:	01 97       	sbiw	r24, 0x01	; 1
    5d24:	f1 f7       	brne	.-4      	; 0x5d22 <LCDInit+0x5be>
    5d26:	9e 01       	movw	r18, r28
    5d28:	26 5b       	subi	r18, 0xB6	; 182
    5d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    5d2c:	f9 01       	movw	r30, r18
    5d2e:	91 83       	std	Z+1, r25	; 0x01
    5d30:	80 83       	st	Z, r24
    5d32:	3e c0       	rjmp	.+124    	; 0x5db0 <LCDInit+0x64c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    5d34:	20 e0       	ldi	r18, 0x00	; 0
    5d36:	30 e0       	ldi	r19, 0x00	; 0
    5d38:	4f e7       	ldi	r20, 0x7F	; 127
    5d3a:	53 e4       	ldi	r21, 0x43	; 67
    5d3c:	6d a9       	ldd	r22, Y+53	; 0x35
    5d3e:	7e a9       	ldd	r23, Y+54	; 0x36
    5d40:	8f a9       	ldd	r24, Y+55	; 0x37
    5d42:	98 ad       	ldd	r25, Y+56	; 0x38
    5d44:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    5d48:	18 16       	cp	r1, r24
    5d4a:	4c f5       	brge	.+82     	; 0x5d9e <LCDInit+0x63a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    5d4c:	8e 01       	movw	r16, r28
    5d4e:	04 5b       	subi	r16, 0xB4	; 180
    5d50:	1f 4f       	sbci	r17, 0xFF	; 255
    5d52:	69 ad       	ldd	r22, Y+57	; 0x39
    5d54:	7a ad       	ldd	r23, Y+58	; 0x3a
    5d56:	8b ad       	ldd	r24, Y+59	; 0x3b
    5d58:	9c ad       	ldd	r25, Y+60	; 0x3c
    5d5a:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    5d5e:	dc 01       	movw	r26, r24
    5d60:	cb 01       	movw	r24, r22
    5d62:	f8 01       	movw	r30, r16
    5d64:	91 83       	std	Z+1, r25	; 0x01
    5d66:	80 83       	st	Z, r24
    5d68:	ce 01       	movw	r24, r28
    5d6a:	82 5b       	subi	r24, 0xB2	; 178
    5d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d6e:	9e 01       	movw	r18, r28
    5d70:	24 5b       	subi	r18, 0xB4	; 180
    5d72:	3f 4f       	sbci	r19, 0xFF	; 255
    5d74:	f9 01       	movw	r30, r18
    5d76:	20 81       	ld	r18, Z
    5d78:	31 81       	ldd	r19, Z+1	; 0x01
    5d7a:	fc 01       	movw	r30, r24
    5d7c:	31 83       	std	Z+1, r19	; 0x01
    5d7e:	20 83       	st	Z, r18
    5d80:	ce 01       	movw	r24, r28
    5d82:	82 5b       	subi	r24, 0xB2	; 178
    5d84:	9f 4f       	sbci	r25, 0xFF	; 255
    5d86:	fc 01       	movw	r30, r24
    5d88:	80 81       	ld	r24, Z
    5d8a:	91 81       	ldd	r25, Z+1	; 0x01
    5d8c:	01 97       	sbiw	r24, 0x01	; 1
    5d8e:	f1 f7       	brne	.-4      	; 0x5d8c <LCDInit+0x628>
    5d90:	9e 01       	movw	r18, r28
    5d92:	22 5b       	subi	r18, 0xB2	; 178
    5d94:	3f 4f       	sbci	r19, 0xFF	; 255
    5d96:	f9 01       	movw	r30, r18
    5d98:	91 83       	std	Z+1, r25	; 0x01
    5d9a:	80 83       	st	Z, r24
    5d9c:	1c c0       	rjmp	.+56     	; 0x5dd6 <LCDInit+0x672>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5d9e:	6d a9       	ldd	r22, Y+53	; 0x35
    5da0:	7e a9       	ldd	r23, Y+54	; 0x36
    5da2:	8f a9       	ldd	r24, Y+55	; 0x37
    5da4:	98 ad       	ldd	r25, Y+56	; 0x38
    5da6:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    5daa:	dc 01       	movw	r26, r24
    5dac:	cb 01       	movw	r24, r22
    5dae:	8d af       	std	Y+61, r24	; 0x3d
    5db0:	ce 01       	movw	r24, r28
    5db2:	80 5b       	subi	r24, 0xB0	; 176
    5db4:	9f 4f       	sbci	r25, 0xFF	; 255
    5db6:	2d ad       	ldd	r18, Y+61	; 0x3d
    5db8:	fc 01       	movw	r30, r24
    5dba:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5dbc:	ce 01       	movw	r24, r28
    5dbe:	80 5b       	subi	r24, 0xB0	; 176
    5dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    5dc2:	fc 01       	movw	r30, r24
    5dc4:	80 81       	ld	r24, Z
    5dc6:	28 2f       	mov	r18, r24
    5dc8:	2a 95       	dec	r18
    5dca:	f1 f7       	brne	.-4      	; 0x5dc8 <LCDInit+0x664>
    5dcc:	ce 01       	movw	r24, r28
    5dce:	80 5b       	subi	r24, 0xB0	; 176
    5dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    5dd2:	fc 01       	movw	r30, r24
    5dd4:	20 83       	st	Z, r18
	_delay_us(1);
	CLEAR_E();
    5dd6:	85 e2       	ldi	r24, 0x25	; 37
    5dd8:	90 e0       	ldi	r25, 0x00	; 0
    5dda:	25 e2       	ldi	r18, 0x25	; 37
    5ddc:	30 e0       	ldi	r19, 0x00	; 0
    5dde:	f9 01       	movw	r30, r18
    5de0:	20 81       	ld	r18, Z
    5de2:	2d 7f       	andi	r18, 0xFD	; 253
    5de4:	fc 01       	movw	r30, r24
    5de6:	20 83       	st	Z, r18
    5de8:	9e 01       	movw	r18, r28
    5dea:	2f 5a       	subi	r18, 0xAF	; 175
    5dec:	3f 4f       	sbci	r19, 0xFF	; 255
    5dee:	80 e0       	ldi	r24, 0x00	; 0
    5df0:	90 e0       	ldi	r25, 0x00	; 0
    5df2:	a0 e8       	ldi	r26, 0x80	; 128
    5df4:	bf e3       	ldi	r27, 0x3F	; 63
    5df6:	f9 01       	movw	r30, r18
    5df8:	80 83       	st	Z, r24
    5dfa:	91 83       	std	Z+1, r25	; 0x01
    5dfc:	a2 83       	std	Z+2, r26	; 0x02
    5dfe:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    5e00:	8e 01       	movw	r16, r28
    5e02:	0b 5a       	subi	r16, 0xAB	; 171
    5e04:	1f 4f       	sbci	r17, 0xFF	; 255
    5e06:	ce 01       	movw	r24, r28
    5e08:	8f 5a       	subi	r24, 0xAF	; 175
    5e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    5e0c:	2b ea       	ldi	r18, 0xAB	; 171
    5e0e:	3a ea       	ldi	r19, 0xAA	; 170
    5e10:	4a ea       	ldi	r20, 0xAA	; 170
    5e12:	50 e4       	ldi	r21, 0x40	; 64
    5e14:	fc 01       	movw	r30, r24
    5e16:	60 81       	ld	r22, Z
    5e18:	71 81       	ldd	r23, Z+1	; 0x01
    5e1a:	82 81       	ldd	r24, Z+2	; 0x02
    5e1c:	93 81       	ldd	r25, Z+3	; 0x03
    5e1e:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    5e22:	dc 01       	movw	r26, r24
    5e24:	cb 01       	movw	r24, r22
    5e26:	f8 01       	movw	r30, r16
    5e28:	80 83       	st	Z, r24
    5e2a:	91 83       	std	Z+1, r25	; 0x01
    5e2c:	a2 83       	std	Z+2, r26	; 0x02
    5e2e:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    5e30:	8e 01       	movw	r16, r28
    5e32:	07 5a       	subi	r16, 0xA7	; 167
    5e34:	1f 4f       	sbci	r17, 0xFF	; 255
    5e36:	ce 01       	movw	r24, r28
    5e38:	8f 5a       	subi	r24, 0xAF	; 175
    5e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    5e3c:	20 e0       	ldi	r18, 0x00	; 0
    5e3e:	30 e0       	ldi	r19, 0x00	; 0
    5e40:	40 e8       	ldi	r20, 0x80	; 128
    5e42:	50 e4       	ldi	r21, 0x40	; 64
    5e44:	fc 01       	movw	r30, r24
    5e46:	60 81       	ld	r22, Z
    5e48:	71 81       	ldd	r23, Z+1	; 0x01
    5e4a:	82 81       	ldd	r24, Z+2	; 0x02
    5e4c:	93 81       	ldd	r25, Z+3	; 0x03
    5e4e:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    5e52:	dc 01       	movw	r26, r24
    5e54:	cb 01       	movw	r24, r22
    5e56:	f8 01       	movw	r30, r16
    5e58:	80 83       	st	Z, r24
    5e5a:	91 83       	std	Z+1, r25	; 0x01
    5e5c:	a2 83       	std	Z+2, r26	; 0x02
    5e5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5e60:	ce 01       	movw	r24, r28
    5e62:	8b 5a       	subi	r24, 0xAB	; 171
    5e64:	9f 4f       	sbci	r25, 0xFF	; 255
    5e66:	20 e0       	ldi	r18, 0x00	; 0
    5e68:	30 e0       	ldi	r19, 0x00	; 0
    5e6a:	40 e8       	ldi	r20, 0x80	; 128
    5e6c:	5f e3       	ldi	r21, 0x3F	; 63
    5e6e:	fc 01       	movw	r30, r24
    5e70:	60 81       	ld	r22, Z
    5e72:	71 81       	ldd	r23, Z+1	; 0x01
    5e74:	82 81       	ldd	r24, Z+2	; 0x02
    5e76:	93 81       	ldd	r25, Z+3	; 0x03
    5e78:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    5e7c:	88 23       	and	r24, r24
    5e7e:	3c f4       	brge	.+14     	; 0x5e8e <LCDInit+0x72a>
		__ticks = 1;
    5e80:	ce 01       	movw	r24, r28
    5e82:	83 5a       	subi	r24, 0xA3	; 163
    5e84:	9f 4f       	sbci	r25, 0xFF	; 255
    5e86:	21 e0       	ldi	r18, 0x01	; 1
    5e88:	fc 01       	movw	r30, r24
    5e8a:	20 83       	st	Z, r18
    5e8c:	30 c1       	rjmp	.+608    	; 0x60ee <LCDInit+0x98a>
	else if (__tmp2 > 65535)
    5e8e:	ce 01       	movw	r24, r28
    5e90:	87 5a       	subi	r24, 0xA7	; 167
    5e92:	9f 4f       	sbci	r25, 0xFF	; 255
    5e94:	20 e0       	ldi	r18, 0x00	; 0
    5e96:	3f ef       	ldi	r19, 0xFF	; 255
    5e98:	4f e7       	ldi	r20, 0x7F	; 127
    5e9a:	57 e4       	ldi	r21, 0x47	; 71
    5e9c:	fc 01       	movw	r30, r24
    5e9e:	60 81       	ld	r22, Z
    5ea0:	71 81       	ldd	r23, Z+1	; 0x01
    5ea2:	82 81       	ldd	r24, Z+2	; 0x02
    5ea4:	93 81       	ldd	r25, Z+3	; 0x03
    5ea6:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    5eaa:	18 16       	cp	r1, r24
    5eac:	0c f0       	brlt	.+2      	; 0x5eb0 <LCDInit+0x74c>
    5eae:	d1 c0       	rjmp	.+418    	; 0x6052 <LCDInit+0x8ee>
	{
		_delay_ms(__us / 1000.0);
    5eb0:	ce 01       	movw	r24, r28
    5eb2:	8f 5a       	subi	r24, 0xAF	; 175
    5eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    5eb6:	20 e0       	ldi	r18, 0x00	; 0
    5eb8:	30 e0       	ldi	r19, 0x00	; 0
    5eba:	4a e7       	ldi	r20, 0x7A	; 122
    5ebc:	54 e4       	ldi	r21, 0x44	; 68
    5ebe:	fc 01       	movw	r30, r24
    5ec0:	60 81       	ld	r22, Z
    5ec2:	71 81       	ldd	r23, Z+1	; 0x01
    5ec4:	82 81       	ldd	r24, Z+2	; 0x02
    5ec6:	93 81       	ldd	r25, Z+3	; 0x03
    5ec8:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    5ecc:	dc 01       	movw	r26, r24
    5ece:	cb 01       	movw	r24, r22
    5ed0:	9e 01       	movw	r18, r28
    5ed2:	22 5a       	subi	r18, 0xA2	; 162
    5ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ed6:	f9 01       	movw	r30, r18
    5ed8:	80 83       	st	Z, r24
    5eda:	91 83       	std	Z+1, r25	; 0x01
    5edc:	a2 83       	std	Z+2, r26	; 0x02
    5ede:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5ee0:	8e 01       	movw	r16, r28
    5ee2:	0e 59       	subi	r16, 0x9E	; 158
    5ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ee6:	ce 01       	movw	r24, r28
    5ee8:	82 5a       	subi	r24, 0xA2	; 162
    5eea:	9f 4f       	sbci	r25, 0xFF	; 255
    5eec:	20 e0       	ldi	r18, 0x00	; 0
    5eee:	30 e0       	ldi	r19, 0x00	; 0
    5ef0:	4a e7       	ldi	r20, 0x7A	; 122
    5ef2:	55 e4       	ldi	r21, 0x45	; 69
    5ef4:	fc 01       	movw	r30, r24
    5ef6:	60 81       	ld	r22, Z
    5ef8:	71 81       	ldd	r23, Z+1	; 0x01
    5efa:	82 81       	ldd	r24, Z+2	; 0x02
    5efc:	93 81       	ldd	r25, Z+3	; 0x03
    5efe:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    5f02:	dc 01       	movw	r26, r24
    5f04:	cb 01       	movw	r24, r22
    5f06:	f8 01       	movw	r30, r16
    5f08:	80 83       	st	Z, r24
    5f0a:	91 83       	std	Z+1, r25	; 0x01
    5f0c:	a2 83       	std	Z+2, r26	; 0x02
    5f0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5f10:	ce 01       	movw	r24, r28
    5f12:	8e 59       	subi	r24, 0x9E	; 158
    5f14:	9f 4f       	sbci	r25, 0xFF	; 255
    5f16:	20 e0       	ldi	r18, 0x00	; 0
    5f18:	30 e0       	ldi	r19, 0x00	; 0
    5f1a:	40 e8       	ldi	r20, 0x80	; 128
    5f1c:	5f e3       	ldi	r21, 0x3F	; 63
    5f1e:	fc 01       	movw	r30, r24
    5f20:	60 81       	ld	r22, Z
    5f22:	71 81       	ldd	r23, Z+1	; 0x01
    5f24:	82 81       	ldd	r24, Z+2	; 0x02
    5f26:	93 81       	ldd	r25, Z+3	; 0x03
    5f28:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    5f2c:	88 23       	and	r24, r24
    5f2e:	4c f4       	brge	.+18     	; 0x5f42 <LCDInit+0x7de>
		__ticks = 1;
    5f30:	ce 01       	movw	r24, r28
    5f32:	8a 59       	subi	r24, 0x9A	; 154
    5f34:	9f 4f       	sbci	r25, 0xFF	; 255
    5f36:	21 e0       	ldi	r18, 0x01	; 1
    5f38:	30 e0       	ldi	r19, 0x00	; 0
    5f3a:	fc 01       	movw	r30, r24
    5f3c:	31 83       	std	Z+1, r19	; 0x01
    5f3e:	20 83       	st	Z, r18
    5f40:	6d c0       	rjmp	.+218    	; 0x601c <LCDInit+0x8b8>
	else if (__tmp > 65535)
    5f42:	ce 01       	movw	r24, r28
    5f44:	8e 59       	subi	r24, 0x9E	; 158
    5f46:	9f 4f       	sbci	r25, 0xFF	; 255
    5f48:	20 e0       	ldi	r18, 0x00	; 0
    5f4a:	3f ef       	ldi	r19, 0xFF	; 255
    5f4c:	4f e7       	ldi	r20, 0x7F	; 127
    5f4e:	57 e4       	ldi	r21, 0x47	; 71
    5f50:	fc 01       	movw	r30, r24
    5f52:	60 81       	ld	r22, Z
    5f54:	71 81       	ldd	r23, Z+1	; 0x01
    5f56:	82 81       	ldd	r24, Z+2	; 0x02
    5f58:	93 81       	ldd	r25, Z+3	; 0x03
    5f5a:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    5f5e:	18 16       	cp	r1, r24
    5f60:	0c f0       	brlt	.+2      	; 0x5f64 <LCDInit+0x800>
    5f62:	4a c0       	rjmp	.+148    	; 0x5ff8 <LCDInit+0x894>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f64:	ce 01       	movw	r24, r28
    5f66:	82 5a       	subi	r24, 0xA2	; 162
    5f68:	9f 4f       	sbci	r25, 0xFF	; 255
    5f6a:	20 e0       	ldi	r18, 0x00	; 0
    5f6c:	30 e0       	ldi	r19, 0x00	; 0
    5f6e:	40 e2       	ldi	r20, 0x20	; 32
    5f70:	51 e4       	ldi	r21, 0x41	; 65
    5f72:	fc 01       	movw	r30, r24
    5f74:	60 81       	ld	r22, Z
    5f76:	71 81       	ldd	r23, Z+1	; 0x01
    5f78:	82 81       	ldd	r24, Z+2	; 0x02
    5f7a:	93 81       	ldd	r25, Z+3	; 0x03
    5f7c:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    5f80:	dc 01       	movw	r26, r24
    5f82:	cb 01       	movw	r24, r22
    5f84:	8e 01       	movw	r16, r28
    5f86:	0a 59       	subi	r16, 0x9A	; 154
    5f88:	1f 4f       	sbci	r17, 0xFF	; 255
    5f8a:	bc 01       	movw	r22, r24
    5f8c:	cd 01       	movw	r24, r26
    5f8e:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    5f92:	dc 01       	movw	r26, r24
    5f94:	cb 01       	movw	r24, r22
    5f96:	f8 01       	movw	r30, r16
    5f98:	91 83       	std	Z+1, r25	; 0x01
    5f9a:	80 83       	st	Z, r24
    5f9c:	24 c0       	rjmp	.+72     	; 0x5fe6 <LCDInit+0x882>
    5f9e:	ce 01       	movw	r24, r28
    5fa0:	88 59       	subi	r24, 0x98	; 152
    5fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    5fa4:	20 e9       	ldi	r18, 0x90	; 144
    5fa6:	31 e0       	ldi	r19, 0x01	; 1
    5fa8:	fc 01       	movw	r30, r24
    5faa:	31 83       	std	Z+1, r19	; 0x01
    5fac:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5fae:	ce 01       	movw	r24, r28
    5fb0:	88 59       	subi	r24, 0x98	; 152
    5fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    5fb4:	fc 01       	movw	r30, r24
    5fb6:	80 81       	ld	r24, Z
    5fb8:	91 81       	ldd	r25, Z+1	; 0x01
    5fba:	01 97       	sbiw	r24, 0x01	; 1
    5fbc:	f1 f7       	brne	.-4      	; 0x5fba <LCDInit+0x856>
    5fbe:	9e 01       	movw	r18, r28
    5fc0:	28 59       	subi	r18, 0x98	; 152
    5fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    5fc4:	f9 01       	movw	r30, r18
    5fc6:	91 83       	std	Z+1, r25	; 0x01
    5fc8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fca:	ce 01       	movw	r24, r28
    5fcc:	8a 59       	subi	r24, 0x9A	; 154
    5fce:	9f 4f       	sbci	r25, 0xFF	; 255
    5fd0:	9e 01       	movw	r18, r28
    5fd2:	2a 59       	subi	r18, 0x9A	; 154
    5fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    5fd6:	f9 01       	movw	r30, r18
    5fd8:	20 81       	ld	r18, Z
    5fda:	31 81       	ldd	r19, Z+1	; 0x01
    5fdc:	21 50       	subi	r18, 0x01	; 1
    5fde:	31 09       	sbc	r19, r1
    5fe0:	fc 01       	movw	r30, r24
    5fe2:	31 83       	std	Z+1, r19	; 0x01
    5fe4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fe6:	ce 01       	movw	r24, r28
    5fe8:	8a 59       	subi	r24, 0x9A	; 154
    5fea:	9f 4f       	sbci	r25, 0xFF	; 255
    5fec:	fc 01       	movw	r30, r24
    5fee:	80 81       	ld	r24, Z
    5ff0:	91 81       	ldd	r25, Z+1	; 0x01
    5ff2:	89 2b       	or	r24, r25
    5ff4:	a1 f6       	brne	.-88     	; 0x5f9e <LCDInit+0x83a>
    5ff6:	7b c0       	rjmp	.+246    	; 0x60ee <LCDInit+0x98a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ff8:	8e 01       	movw	r16, r28
    5ffa:	0a 59       	subi	r16, 0x9A	; 154
    5ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    5ffe:	ce 01       	movw	r24, r28
    6000:	8e 59       	subi	r24, 0x9E	; 158
    6002:	9f 4f       	sbci	r25, 0xFF	; 255
    6004:	fc 01       	movw	r30, r24
    6006:	60 81       	ld	r22, Z
    6008:	71 81       	ldd	r23, Z+1	; 0x01
    600a:	82 81       	ldd	r24, Z+2	; 0x02
    600c:	93 81       	ldd	r25, Z+3	; 0x03
    600e:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    6012:	dc 01       	movw	r26, r24
    6014:	cb 01       	movw	r24, r22
    6016:	f8 01       	movw	r30, r16
    6018:	91 83       	std	Z+1, r25	; 0x01
    601a:	80 83       	st	Z, r24
    601c:	ce 01       	movw	r24, r28
    601e:	86 59       	subi	r24, 0x96	; 150
    6020:	9f 4f       	sbci	r25, 0xFF	; 255
    6022:	9e 01       	movw	r18, r28
    6024:	2a 59       	subi	r18, 0x9A	; 154
    6026:	3f 4f       	sbci	r19, 0xFF	; 255
    6028:	f9 01       	movw	r30, r18
    602a:	20 81       	ld	r18, Z
    602c:	31 81       	ldd	r19, Z+1	; 0x01
    602e:	fc 01       	movw	r30, r24
    6030:	31 83       	std	Z+1, r19	; 0x01
    6032:	20 83       	st	Z, r18
    6034:	ce 01       	movw	r24, r28
    6036:	86 59       	subi	r24, 0x96	; 150
    6038:	9f 4f       	sbci	r25, 0xFF	; 255
    603a:	fc 01       	movw	r30, r24
    603c:	80 81       	ld	r24, Z
    603e:	91 81       	ldd	r25, Z+1	; 0x01
    6040:	01 97       	sbiw	r24, 0x01	; 1
    6042:	f1 f7       	brne	.-4      	; 0x6040 <LCDInit+0x8dc>
    6044:	9e 01       	movw	r18, r28
    6046:	26 59       	subi	r18, 0x96	; 150
    6048:	3f 4f       	sbci	r19, 0xFF	; 255
    604a:	f9 01       	movw	r30, r18
    604c:	91 83       	std	Z+1, r25	; 0x01
    604e:	80 83       	st	Z, r24
    6050:	4e c0       	rjmp	.+156    	; 0x60ee <LCDInit+0x98a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    6052:	ce 01       	movw	r24, r28
    6054:	8b 5a       	subi	r24, 0xAB	; 171
    6056:	9f 4f       	sbci	r25, 0xFF	; 255
    6058:	20 e0       	ldi	r18, 0x00	; 0
    605a:	30 e0       	ldi	r19, 0x00	; 0
    605c:	4f e7       	ldi	r20, 0x7F	; 127
    605e:	53 e4       	ldi	r21, 0x43	; 67
    6060:	fc 01       	movw	r30, r24
    6062:	60 81       	ld	r22, Z
    6064:	71 81       	ldd	r23, Z+1	; 0x01
    6066:	82 81       	ldd	r24, Z+2	; 0x02
    6068:	93 81       	ldd	r25, Z+3	; 0x03
    606a:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    606e:	18 16       	cp	r1, r24
    6070:	6c f5       	brge	.+90     	; 0x60cc <LCDInit+0x968>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    6072:	8e 01       	movw	r16, r28
    6074:	04 59       	subi	r16, 0x94	; 148
    6076:	1f 4f       	sbci	r17, 0xFF	; 255
    6078:	ce 01       	movw	r24, r28
    607a:	87 5a       	subi	r24, 0xA7	; 167
    607c:	9f 4f       	sbci	r25, 0xFF	; 255
    607e:	fc 01       	movw	r30, r24
    6080:	60 81       	ld	r22, Z
    6082:	71 81       	ldd	r23, Z+1	; 0x01
    6084:	82 81       	ldd	r24, Z+2	; 0x02
    6086:	93 81       	ldd	r25, Z+3	; 0x03
    6088:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    608c:	dc 01       	movw	r26, r24
    608e:	cb 01       	movw	r24, r22
    6090:	f8 01       	movw	r30, r16
    6092:	91 83       	std	Z+1, r25	; 0x01
    6094:	80 83       	st	Z, r24
    6096:	ce 01       	movw	r24, r28
    6098:	82 59       	subi	r24, 0x92	; 146
    609a:	9f 4f       	sbci	r25, 0xFF	; 255
    609c:	9e 01       	movw	r18, r28
    609e:	24 59       	subi	r18, 0x94	; 148
    60a0:	3f 4f       	sbci	r19, 0xFF	; 255
    60a2:	f9 01       	movw	r30, r18
    60a4:	20 81       	ld	r18, Z
    60a6:	31 81       	ldd	r19, Z+1	; 0x01
    60a8:	fc 01       	movw	r30, r24
    60aa:	31 83       	std	Z+1, r19	; 0x01
    60ac:	20 83       	st	Z, r18
    60ae:	ce 01       	movw	r24, r28
    60b0:	82 59       	subi	r24, 0x92	; 146
    60b2:	9f 4f       	sbci	r25, 0xFF	; 255
    60b4:	fc 01       	movw	r30, r24
    60b6:	80 81       	ld	r24, Z
    60b8:	91 81       	ldd	r25, Z+1	; 0x01
    60ba:	01 97       	sbiw	r24, 0x01	; 1
    60bc:	f1 f7       	brne	.-4      	; 0x60ba <LCDInit+0x956>
    60be:	9e 01       	movw	r18, r28
    60c0:	22 59       	subi	r18, 0x92	; 146
    60c2:	3f 4f       	sbci	r19, 0xFF	; 255
    60c4:	f9 01       	movw	r30, r18
    60c6:	91 83       	std	Z+1, r25	; 0x01
    60c8:	80 83       	st	Z, r24
    60ca:	28 c0       	rjmp	.+80     	; 0x611c <LCDInit+0x9b8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    60cc:	8e 01       	movw	r16, r28
    60ce:	03 5a       	subi	r16, 0xA3	; 163
    60d0:	1f 4f       	sbci	r17, 0xFF	; 255
    60d2:	ce 01       	movw	r24, r28
    60d4:	8b 5a       	subi	r24, 0xAB	; 171
    60d6:	9f 4f       	sbci	r25, 0xFF	; 255
    60d8:	fc 01       	movw	r30, r24
    60da:	60 81       	ld	r22, Z
    60dc:	71 81       	ldd	r23, Z+1	; 0x01
    60de:	82 81       	ldd	r24, Z+2	; 0x02
    60e0:	93 81       	ldd	r25, Z+3	; 0x03
    60e2:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    60e6:	dc 01       	movw	r26, r24
    60e8:	cb 01       	movw	r24, r22
    60ea:	f8 01       	movw	r30, r16
    60ec:	80 83       	st	Z, r24
    60ee:	ce 01       	movw	r24, r28
    60f0:	80 59       	subi	r24, 0x90	; 144
    60f2:	9f 4f       	sbci	r25, 0xFF	; 255
    60f4:	9e 01       	movw	r18, r28
    60f6:	23 5a       	subi	r18, 0xA3	; 163
    60f8:	3f 4f       	sbci	r19, 0xFF	; 255
    60fa:	f9 01       	movw	r30, r18
    60fc:	20 81       	ld	r18, Z
    60fe:	fc 01       	movw	r30, r24
    6100:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6102:	ce 01       	movw	r24, r28
    6104:	80 59       	subi	r24, 0x90	; 144
    6106:	9f 4f       	sbci	r25, 0xFF	; 255
    6108:	fc 01       	movw	r30, r24
    610a:	80 81       	ld	r24, Z
    610c:	28 2f       	mov	r18, r24
    610e:	2a 95       	dec	r18
    6110:	f1 f7       	brne	.-4      	; 0x610e <LCDInit+0x9aa>
    6112:	ce 01       	movw	r24, r28
    6114:	80 59       	subi	r24, 0x90	; 144
    6116:	9f 4f       	sbci	r25, 0xFF	; 255
    6118:	fc 01       	movw	r30, r24
    611a:	20 83       	st	Z, r18
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
    611c:	0e 94 b5 20 	call	0x416a	; 0x416a <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
    6120:	ce 01       	movw	r24, r28
    6122:	8f 58       	subi	r24, 0x8F	; 143
    6124:	9f 4f       	sbci	r25, 0xFF	; 255
    6126:	fc 01       	movw	r30, r24
    6128:	80 81       	ld	r24, Z
    612a:	8c 60       	ori	r24, 0x0C	; 12
    612c:	60 e0       	ldi	r22, 0x00	; 0
    612e:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
    6132:	60 e0       	ldi	r22, 0x00	; 0
    6134:	88 e2       	ldi	r24, 0x28	; 40
    6136:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
    613a:	60 e0       	ldi	r22, 0x00	; 0
    613c:	80 e4       	ldi	r24, 0x40	; 64
    613e:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++){
    6142:	19 82       	std	Y+1, r1	; 0x01
    6144:	0d c0       	rjmp	.+26     	; 0x6160 <LCDInit+0x9fc>
		LCDData(__cgram[__i]);
    6146:	89 81       	ldd	r24, Y+1	; 0x01
    6148:	88 2f       	mov	r24, r24
    614a:	90 e0       	ldi	r25, 0x00	; 0
    614c:	80 50       	subi	r24, 0x00	; 0
    614e:	9f 4f       	sbci	r25, 0xFF	; 255
    6150:	fc 01       	movw	r30, r24
    6152:	80 81       	ld	r24, Z
    6154:	61 e0       	ldi	r22, 0x01	; 1
    6156:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++){
    615a:	89 81       	ldd	r24, Y+1	; 0x01
    615c:	8f 5f       	subi	r24, 0xFF	; 255
    615e:	89 83       	std	Y+1, r24	; 0x01
    6160:	89 81       	ldd	r24, Y+1	; 0x01
    6162:	80 34       	cpi	r24, 0x40	; 64
    6164:	80 f3       	brcs	.-32     	; 0x6146 <LCDInit+0x9e2>
		LCDData(__cgram[__i]);
	}
	
	LCDGotoXY(0,0);
    6166:	60 e0       	ldi	r22, 0x00	; 0
    6168:	80 e0       	ldi	r24, 0x00	; 0
    616a:	0e 94 0a 32 	call	0x6414	; 0x6414 <LCDGotoXY>
}
    616e:	cf 58       	subi	r28, 0x8F	; 143
    6170:	df 4f       	sbci	r29, 0xFF	; 255
    6172:	0f b6       	in	r0, 0x3f	; 63
    6174:	f8 94       	cli
    6176:	de bf       	out	0x3e, r29	; 62
    6178:	0f be       	out	0x3f, r0	; 63
    617a:	cd bf       	out	0x3d, r28	; 61
    617c:	df 91       	pop	r29
    617e:	cf 91       	pop	r28
    6180:	1f 91       	pop	r17
    6182:	0f 91       	pop	r16
    6184:	08 95       	ret

00006186 <LCDWriteString>:

/***********************************************************
 * Escribe un string en el LCD
 ***********************************************************/
void LCDWriteString(const char *msg){
    6186:	cf 93       	push	r28
    6188:	df 93       	push	r29
    618a:	00 d0       	rcall	.+0      	; 0x618c <LCDWriteString+0x6>
    618c:	1f 92       	push	r1
    618e:	cd b7       	in	r28, 0x3d	; 61
    6190:	de b7       	in	r29, 0x3e	; 62
    6192:	9b 83       	std	Y+3, r25	; 0x03
    6194:	8a 83       	std	Y+2, r24	; 0x02
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
	while(*msg!='\0'){
    6196:	34 c0       	rjmp	.+104    	; 0x6200 <LCDWriteString+0x7a>
		//Custom Char Support
		if(*msg=='%'){
    6198:	8a 81       	ldd	r24, Y+2	; 0x02
    619a:	9b 81       	ldd	r25, Y+3	; 0x03
    619c:	fc 01       	movw	r30, r24
    619e:	80 81       	ld	r24, Z
    61a0:	85 32       	cpi	r24, 0x25	; 37
    61a2:	11 f5       	brne	.+68     	; 0x61e8 <LCDWriteString+0x62>
			msg++;
    61a4:	8a 81       	ldd	r24, Y+2	; 0x02
    61a6:	9b 81       	ldd	r25, Y+3	; 0x03
    61a8:	01 96       	adiw	r24, 0x01	; 1
    61aa:	9b 83       	std	Y+3, r25	; 0x03
    61ac:	8a 83       	std	Y+2, r24	; 0x02
			int8_t cc=*msg-'0';
    61ae:	8a 81       	ldd	r24, Y+2	; 0x02
    61b0:	9b 81       	ldd	r25, Y+3	; 0x03
    61b2:	fc 01       	movw	r30, r24
    61b4:	80 81       	ld	r24, Z
    61b6:	80 53       	subi	r24, 0x30	; 48
    61b8:	89 83       	std	Y+1, r24	; 0x01

			if(cc>=0 && cc<=7){
    61ba:	89 81       	ldd	r24, Y+1	; 0x01
    61bc:	88 23       	and	r24, r24
    61be:	44 f0       	brlt	.+16     	; 0x61d0 <LCDWriteString+0x4a>
    61c0:	89 81       	ldd	r24, Y+1	; 0x01
    61c2:	88 30       	cpi	r24, 0x08	; 8
    61c4:	2c f4       	brge	.+10     	; 0x61d0 <LCDWriteString+0x4a>
				LCDData(cc);
    61c6:	89 81       	ldd	r24, Y+1	; 0x01
    61c8:	61 e0       	ldi	r22, 0x01	; 1
    61ca:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>
    61ce:	13 c0       	rjmp	.+38     	; 0x61f6 <LCDWriteString+0x70>
			}
			else{
				LCDData('%');
    61d0:	61 e0       	ldi	r22, 0x01	; 1
    61d2:	85 e2       	ldi	r24, 0x25	; 37
    61d4:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>
				LCDData(*msg);
    61d8:	8a 81       	ldd	r24, Y+2	; 0x02
    61da:	9b 81       	ldd	r25, Y+3	; 0x03
    61dc:	fc 01       	movw	r30, r24
    61de:	80 81       	ld	r24, Z
    61e0:	61 e0       	ldi	r22, 0x01	; 1
    61e2:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>
    61e6:	07 c0       	rjmp	.+14     	; 0x61f6 <LCDWriteString+0x70>
			}
		}
		else{
			LCDData(*msg);
    61e8:	8a 81       	ldd	r24, Y+2	; 0x02
    61ea:	9b 81       	ldd	r25, Y+3	; 0x03
    61ec:	fc 01       	movw	r30, r24
    61ee:	80 81       	ld	r24, Z
    61f0:	61 e0       	ldi	r22, 0x01	; 1
    61f2:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>
		}
		msg++;
    61f6:	8a 81       	ldd	r24, Y+2	; 0x02
    61f8:	9b 81       	ldd	r25, Y+3	; 0x03
    61fa:	01 96       	adiw	r24, 0x01	; 1
    61fc:	9b 83       	std	Y+3, r25	; 0x03
    61fe:	8a 83       	std	Y+2, r24	; 0x02
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
	while(*msg!='\0'){
    6200:	8a 81       	ldd	r24, Y+2	; 0x02
    6202:	9b 81       	ldd	r25, Y+3	; 0x03
    6204:	fc 01       	movw	r30, r24
    6206:	80 81       	ld	r24, Z
    6208:	88 23       	and	r24, r24
    620a:	31 f6       	brne	.-116    	; 0x6198 <LCDWriteString+0x12>
		else{
			LCDData(*msg);
		}
		msg++;
	}
}
    620c:	0f 90       	pop	r0
    620e:	0f 90       	pop	r0
    6210:	0f 90       	pop	r0
    6212:	df 91       	pop	r29
    6214:	cf 91       	pop	r28
    6216:	08 95       	ret

00006218 <LCDWriteLine>:

/***********************************************************
 * Escribe una linea en el LCD
 ***********************************************************/
void LCDWriteLine(uint8_t line, const char *msg){
    6218:	cf 93       	push	r28
    621a:	df 93       	push	r29
    621c:	00 d0       	rcall	.+0      	; 0x621e <LCDWriteLine+0x6>
    621e:	00 d0       	rcall	.+0      	; 0x6220 <LCDWriteLine+0x8>
    6220:	00 d0       	rcall	.+0      	; 0x6222 <LCDWriteLine+0xa>
    6222:	cd b7       	in	r28, 0x3d	; 61
    6224:	de b7       	in	r29, 0x3e	; 62
    6226:	8c 83       	std	Y+4, r24	; 0x04
    6228:	7e 83       	std	Y+6, r23	; 0x06
    622a:	6d 83       	std	Y+5, r22	; 0x05

	In the same way you can insert any syblom numbered 0-7


	*****************************************************************/
	LCDGotoXY(0,line);
    622c:	6c 81       	ldd	r22, Y+4	; 0x04
    622e:	80 e0       	ldi	r24, 0x00	; 0
    6230:	0e 94 0a 32 	call	0x6414	; 0x6414 <LCDGotoXY>

	int i=0;
    6234:	1a 82       	std	Y+2, r1	; 0x02
    6236:	19 82       	std	Y+1, r1	; 0x01
	while((*msg!='\0') && (i<LCD_VISIBLE_LINE_WITH)){
    6238:	3e c0       	rjmp	.+124    	; 0x62b6 <LCDWriteLine+0x9e>
		//Custom Char Support
		if(*msg=='%'){
    623a:	8d 81       	ldd	r24, Y+5	; 0x05
    623c:	9e 81       	ldd	r25, Y+6	; 0x06
    623e:	fc 01       	movw	r30, r24
    6240:	80 81       	ld	r24, Z
    6242:	85 32       	cpi	r24, 0x25	; 37
    6244:	39 f5       	brne	.+78     	; 0x6294 <LCDWriteLine+0x7c>
			msg++;
    6246:	8d 81       	ldd	r24, Y+5	; 0x05
    6248:	9e 81       	ldd	r25, Y+6	; 0x06
    624a:	01 96       	adiw	r24, 0x01	; 1
    624c:	9e 83       	std	Y+6, r25	; 0x06
    624e:	8d 83       	std	Y+5, r24	; 0x05
			int8_t cc=*msg-'0';
    6250:	8d 81       	ldd	r24, Y+5	; 0x05
    6252:	9e 81       	ldd	r25, Y+6	; 0x06
    6254:	fc 01       	movw	r30, r24
    6256:	80 81       	ld	r24, Z
    6258:	80 53       	subi	r24, 0x30	; 48
    625a:	8b 83       	std	Y+3, r24	; 0x03

			if(cc>=0 && cc<=7){
    625c:	8b 81       	ldd	r24, Y+3	; 0x03
    625e:	88 23       	and	r24, r24
    6260:	44 f0       	brlt	.+16     	; 0x6272 <LCDWriteLine+0x5a>
    6262:	8b 81       	ldd	r24, Y+3	; 0x03
    6264:	88 30       	cpi	r24, 0x08	; 8
    6266:	2c f4       	brge	.+10     	; 0x6272 <LCDWriteLine+0x5a>
				LCDData(cc);
    6268:	8b 81       	ldd	r24, Y+3	; 0x03
    626a:	61 e0       	ldi	r22, 0x01	; 1
    626c:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>
    6270:	18 c0       	rjmp	.+48     	; 0x62a2 <LCDWriteLine+0x8a>
			}
			else{
				LCDData('%');
    6272:	61 e0       	ldi	r22, 0x01	; 1
    6274:	85 e2       	ldi	r24, 0x25	; 37
    6276:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>
				LCDData(*msg);
    627a:	8d 81       	ldd	r24, Y+5	; 0x05
    627c:	9e 81       	ldd	r25, Y+6	; 0x06
    627e:	fc 01       	movw	r30, r24
    6280:	80 81       	ld	r24, Z
    6282:	61 e0       	ldi	r22, 0x01	; 1
    6284:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>
				i++;
    6288:	89 81       	ldd	r24, Y+1	; 0x01
    628a:	9a 81       	ldd	r25, Y+2	; 0x02
    628c:	01 96       	adiw	r24, 0x01	; 1
    628e:	9a 83       	std	Y+2, r25	; 0x02
    6290:	89 83       	std	Y+1, r24	; 0x01
    6292:	07 c0       	rjmp	.+14     	; 0x62a2 <LCDWriteLine+0x8a>
			}
		}
		else{
			LCDData(*msg);
    6294:	8d 81       	ldd	r24, Y+5	; 0x05
    6296:	9e 81       	ldd	r25, Y+6	; 0x06
    6298:	fc 01       	movw	r30, r24
    629a:	80 81       	ld	r24, Z
    629c:	61 e0       	ldi	r22, 0x01	; 1
    629e:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>
		}
		msg++;
    62a2:	8d 81       	ldd	r24, Y+5	; 0x05
    62a4:	9e 81       	ldd	r25, Y+6	; 0x06
    62a6:	01 96       	adiw	r24, 0x01	; 1
    62a8:	9e 83       	std	Y+6, r25	; 0x06
    62aa:	8d 83       	std	Y+5, r24	; 0x05
		i++;
    62ac:	89 81       	ldd	r24, Y+1	; 0x01
    62ae:	9a 81       	ldd	r25, Y+2	; 0x02
    62b0:	01 96       	adiw	r24, 0x01	; 1
    62b2:	9a 83       	std	Y+2, r25	; 0x02
    62b4:	89 83       	std	Y+1, r24	; 0x01

	*****************************************************************/
	LCDGotoXY(0,line);

	int i=0;
	while((*msg!='\0') && (i<LCD_VISIBLE_LINE_WITH)){
    62b6:	8d 81       	ldd	r24, Y+5	; 0x05
    62b8:	9e 81       	ldd	r25, Y+6	; 0x06
    62ba:	fc 01       	movw	r30, r24
    62bc:	80 81       	ld	r24, Z
    62be:	88 23       	and	r24, r24
    62c0:	29 f0       	breq	.+10     	; 0x62cc <LCDWriteLine+0xb4>
    62c2:	89 81       	ldd	r24, Y+1	; 0x01
    62c4:	9a 81       	ldd	r25, Y+2	; 0x02
    62c6:	40 97       	sbiw	r24, 0x10	; 16
    62c8:	0c f4       	brge	.+2      	; 0x62cc <LCDWriteLine+0xb4>
    62ca:	b7 cf       	rjmp	.-146    	; 0x623a <LCDWriteLine+0x22>
			LCDData(*msg);
		}
		msg++;
		i++;
	}
	while (i<LCD_VISIBLE_LINE_WITH){
    62cc:	09 c0       	rjmp	.+18     	; 0x62e0 <LCDWriteLine+0xc8>
		LCDData(' ');
    62ce:	61 e0       	ldi	r22, 0x01	; 1
    62d0:	80 e2       	ldi	r24, 0x20	; 32
    62d2:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>
		i++;
    62d6:	89 81       	ldd	r24, Y+1	; 0x01
    62d8:	9a 81       	ldd	r25, Y+2	; 0x02
    62da:	01 96       	adiw	r24, 0x01	; 1
    62dc:	9a 83       	std	Y+2, r25	; 0x02
    62de:	89 83       	std	Y+1, r24	; 0x01
			LCDData(*msg);
		}
		msg++;
		i++;
	}
	while (i<LCD_VISIBLE_LINE_WITH){
    62e0:	89 81       	ldd	r24, Y+1	; 0x01
    62e2:	9a 81       	ldd	r25, Y+2	; 0x02
    62e4:	40 97       	sbiw	r24, 0x10	; 16
    62e6:	9c f3       	brlt	.-26     	; 0x62ce <LCDWriteLine+0xb6>
		LCDData(' ');
		i++;
	}
}
    62e8:	26 96       	adiw	r28, 0x06	; 6
    62ea:	0f b6       	in	r0, 0x3f	; 63
    62ec:	f8 94       	cli
    62ee:	de bf       	out	0x3e, r29	; 62
    62f0:	0f be       	out	0x3f, r0	; 63
    62f2:	cd bf       	out	0x3d, r28	; 61
    62f4:	df 91       	pop	r29
    62f6:	cf 91       	pop	r28
    62f8:	08 95       	ret

000062fa <LCDWriteInt>:

/***********************************************************
 * Escribe un integer al LCD
 ***********************************************************/
void LCDWriteInt(int val,unsigned int field_length){
    62fa:	cf 93       	push	r28
    62fc:	df 93       	push	r29
    62fe:	cd b7       	in	r28, 0x3d	; 61
    6300:	de b7       	in	r29, 0x3e	; 62
    6302:	61 97       	sbiw	r28, 0x11	; 17
    6304:	0f b6       	in	r0, 0x3f	; 63
    6306:	f8 94       	cli
    6308:	de bf       	out	0x3e, r29	; 62
    630a:	0f be       	out	0x3f, r0	; 63
    630c:	cd bf       	out	0x3d, r28	; 61
    630e:	9b 87       	std	Y+11, r25	; 0x0b
    6310:	8a 87       	std	Y+10, r24	; 0x0a
    6312:	7d 87       	std	Y+13, r23	; 0x0d
    6314:	6c 87       	std	Y+12, r22	; 0x0c
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
    6316:	25 e0       	ldi	r18, 0x05	; 5
    6318:	ce 01       	movw	r24, r28
    631a:	05 96       	adiw	r24, 0x05	; 5
    631c:	fc 01       	movw	r30, r24
    631e:	32 2f       	mov	r19, r18
    6320:	11 92       	st	Z+, r1
    6322:	3a 95       	dec	r19
    6324:	e9 f7       	brne	.-6      	; 0x6320 <LCDWriteInt+0x26>
	int i=4,j=0;
    6326:	84 e0       	ldi	r24, 0x04	; 4
    6328:	90 e0       	ldi	r25, 0x00	; 0
    632a:	9a 83       	std	Y+2, r25	; 0x02
    632c:	89 83       	std	Y+1, r24	; 0x01
    632e:	1c 82       	std	Y+4, r1	; 0x04
    6330:	1b 82       	std	Y+3, r1	; 0x03

	while(val){
    6332:	20 c0       	rjmp	.+64     	; 0x6374 <LCDWriteInt+0x7a>
		str[i]=val%10;
    6334:	8a 85       	ldd	r24, Y+10	; 0x0a
    6336:	9b 85       	ldd	r25, Y+11	; 0x0b
    6338:	2a e0       	ldi	r18, 0x0A	; 10
    633a:	30 e0       	ldi	r19, 0x00	; 0
    633c:	b9 01       	movw	r22, r18
    633e:	0e 94 39 56 	call	0xac72	; 0xac72 <__divmodhi4>
    6342:	48 2f       	mov	r20, r24
    6344:	9e 01       	movw	r18, r28
    6346:	2b 5f       	subi	r18, 0xFB	; 251
    6348:	3f 4f       	sbci	r19, 0xFF	; 255
    634a:	89 81       	ldd	r24, Y+1	; 0x01
    634c:	9a 81       	ldd	r25, Y+2	; 0x02
    634e:	82 0f       	add	r24, r18
    6350:	93 1f       	adc	r25, r19
    6352:	fc 01       	movw	r30, r24
    6354:	40 83       	st	Z, r20
		val=val/10;
    6356:	8a 85       	ldd	r24, Y+10	; 0x0a
    6358:	9b 85       	ldd	r25, Y+11	; 0x0b
    635a:	2a e0       	ldi	r18, 0x0A	; 10
    635c:	30 e0       	ldi	r19, 0x00	; 0
    635e:	b9 01       	movw	r22, r18
    6360:	0e 94 39 56 	call	0xac72	; 0xac72 <__divmodhi4>
    6364:	cb 01       	movw	r24, r22
    6366:	9b 87       	std	Y+11, r25	; 0x0b
    6368:	8a 87       	std	Y+10, r24	; 0x0a
		i--;
    636a:	89 81       	ldd	r24, Y+1	; 0x01
    636c:	9a 81       	ldd	r25, Y+2	; 0x02
    636e:	01 97       	sbiw	r24, 0x01	; 1
    6370:	9a 83       	std	Y+2, r25	; 0x02
    6372:	89 83       	std	Y+1, r24	; 0x01
	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;

	while(val){
    6374:	8a 85       	ldd	r24, Y+10	; 0x0a
    6376:	9b 85       	ldd	r25, Y+11	; 0x0b
    6378:	89 2b       	or	r24, r25
    637a:	e1 f6       	brne	.-72     	; 0x6334 <LCDWriteInt+0x3a>
		str[i]=val%10;
		val=val/10;
		i--;
	}

	if(field_length==-1){
    637c:	8c 85       	ldd	r24, Y+12	; 0x0c
    637e:	9d 85       	ldd	r25, Y+13	; 0x0d
    6380:	01 96       	adiw	r24, 0x01	; 1
    6382:	91 f4       	brne	.+36     	; 0x63a8 <LCDWriteInt+0xae>
		while(str[j]==0){
    6384:	05 c0       	rjmp	.+10     	; 0x6390 <LCDWriteInt+0x96>
			j++;
    6386:	8b 81       	ldd	r24, Y+3	; 0x03
    6388:	9c 81       	ldd	r25, Y+4	; 0x04
    638a:	01 96       	adiw	r24, 0x01	; 1
    638c:	9c 83       	std	Y+4, r25	; 0x04
    638e:	8b 83       	std	Y+3, r24	; 0x03
		val=val/10;
		i--;
	}

	if(field_length==-1){
		while(str[j]==0){
    6390:	9e 01       	movw	r18, r28
    6392:	2b 5f       	subi	r18, 0xFB	; 251
    6394:	3f 4f       	sbci	r19, 0xFF	; 255
    6396:	8b 81       	ldd	r24, Y+3	; 0x03
    6398:	9c 81       	ldd	r25, Y+4	; 0x04
    639a:	82 0f       	add	r24, r18
    639c:	93 1f       	adc	r25, r19
    639e:	fc 01       	movw	r30, r24
    63a0:	80 81       	ld	r24, Z
    63a2:	88 23       	and	r24, r24
    63a4:	81 f3       	breq	.-32     	; 0x6386 <LCDWriteInt+0x8c>
    63a6:	0a c0       	rjmp	.+20     	; 0x63bc <LCDWriteInt+0xc2>
			j++;
		}
	}
	else{
		j=5-field_length;
    63a8:	25 e0       	ldi	r18, 0x05	; 5
    63aa:	30 e0       	ldi	r19, 0x00	; 0
    63ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    63ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    63b0:	a9 01       	movw	r20, r18
    63b2:	48 1b       	sub	r20, r24
    63b4:	59 0b       	sbc	r21, r25
    63b6:	ca 01       	movw	r24, r20
    63b8:	9c 83       	std	Y+4, r25	; 0x04
    63ba:	8b 83       	std	Y+3, r24	; 0x03
	}

	if(val<0){
    63bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    63be:	9b 85       	ldd	r25, Y+11	; 0x0b
    63c0:	99 23       	and	r25, r25
    63c2:	24 f4       	brge	.+8      	; 0x63cc <LCDWriteInt+0xd2>
		LCDData('-');
    63c4:	61 e0       	ldi	r22, 0x01	; 1
    63c6:	8d e2       	ldi	r24, 0x2D	; 45
    63c8:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>
	}

	for(i=j;i<5;i++){
    63cc:	8b 81       	ldd	r24, Y+3	; 0x03
    63ce:	9c 81       	ldd	r25, Y+4	; 0x04
    63d0:	9a 83       	std	Y+2, r25	; 0x02
    63d2:	89 83       	std	Y+1, r24	; 0x01
    63d4:	12 c0       	rjmp	.+36     	; 0x63fa <LCDWriteInt+0x100>
		LCDData(48+str[i]);
    63d6:	9e 01       	movw	r18, r28
    63d8:	2b 5f       	subi	r18, 0xFB	; 251
    63da:	3f 4f       	sbci	r19, 0xFF	; 255
    63dc:	89 81       	ldd	r24, Y+1	; 0x01
    63de:	9a 81       	ldd	r25, Y+2	; 0x02
    63e0:	82 0f       	add	r24, r18
    63e2:	93 1f       	adc	r25, r19
    63e4:	fc 01       	movw	r30, r24
    63e6:	80 81       	ld	r24, Z
    63e8:	80 5d       	subi	r24, 0xD0	; 208
    63ea:	61 e0       	ldi	r22, 0x01	; 1
    63ec:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>

	if(val<0){
		LCDData('-');
	}

	for(i=j;i<5;i++){
    63f0:	89 81       	ldd	r24, Y+1	; 0x01
    63f2:	9a 81       	ldd	r25, Y+2	; 0x02
    63f4:	01 96       	adiw	r24, 0x01	; 1
    63f6:	9a 83       	std	Y+2, r25	; 0x02
    63f8:	89 83       	std	Y+1, r24	; 0x01
    63fa:	89 81       	ldd	r24, Y+1	; 0x01
    63fc:	9a 81       	ldd	r25, Y+2	; 0x02
    63fe:	05 97       	sbiw	r24, 0x05	; 5
    6400:	54 f3       	brlt	.-44     	; 0x63d6 <LCDWriteInt+0xdc>
		LCDData(48+str[i]);
	}
}
    6402:	61 96       	adiw	r28, 0x11	; 17
    6404:	0f b6       	in	r0, 0x3f	; 63
    6406:	f8 94       	cli
    6408:	de bf       	out	0x3e, r29	; 62
    640a:	0f be       	out	0x3f, r0	; 63
    640c:	cd bf       	out	0x3d, r28	; 61
    640e:	df 91       	pop	r29
    6410:	cf 91       	pop	r28
    6412:	08 95       	ret

00006414 <LCDGotoXY>:

/***********************************************************
 * Mueve el cursor a la posicion (x,y) en el LCD
 ***********************************************************/
void LCDGotoXY(uint8_t x,uint8_t y){
    6414:	cf 93       	push	r28
    6416:	df 93       	push	r29
    6418:	00 d0       	rcall	.+0      	; 0x641a <LCDGotoXY+0x6>
    641a:	cd b7       	in	r28, 0x3d	; 61
    641c:	de b7       	in	r29, 0x3e	; 62
    641e:	89 83       	std	Y+1, r24	; 0x01
    6420:	6a 83       	std	Y+2, r22	; 0x02
	if(x>=20){
    6422:	89 81       	ldd	r24, Y+1	; 0x01
    6424:	84 31       	cpi	r24, 0x14	; 20
    6426:	08 f0       	brcs	.+2      	; 0x642a <LCDGotoXY+0x16>
		return;
    6428:	23 c0       	rjmp	.+70     	; 0x6470 <LCDGotoXY+0x5c>
	}

	#ifdef LCD_TYPE_204
	switch(y){
    642a:	8a 81       	ldd	r24, Y+2	; 0x02
    642c:	88 2f       	mov	r24, r24
    642e:	90 e0       	ldi	r25, 0x00	; 0
    6430:	81 30       	cpi	r24, 0x01	; 1
    6432:	91 05       	cpc	r25, r1
    6434:	49 f0       	breq	.+18     	; 0x6448 <LCDGotoXY+0x34>
    6436:	82 30       	cpi	r24, 0x02	; 2
    6438:	91 05       	cpc	r25, r1
    643a:	94 f0       	brlt	.+36     	; 0x6460 <LCDGotoXY+0x4c>
    643c:	82 30       	cpi	r24, 0x02	; 2
    643e:	91 05       	cpc	r25, r1
    6440:	39 f0       	breq	.+14     	; 0x6450 <LCDGotoXY+0x3c>
    6442:	03 97       	sbiw	r24, 0x03	; 3
    6444:	49 f0       	breq	.+18     	; 0x6458 <LCDGotoXY+0x44>
    6446:	0d c0       	rjmp	.+26     	; 0x6462 <LCDGotoXY+0x4e>
		case 0:
			break;
		case 1:
			x|=0b01000000;
    6448:	89 81       	ldd	r24, Y+1	; 0x01
    644a:	80 64       	ori	r24, 0x40	; 64
    644c:	89 83       	std	Y+1, r24	; 0x01
			break;
    644e:	09 c0       	rjmp	.+18     	; 0x6462 <LCDGotoXY+0x4e>
		case 2:
			x+=0x14;
    6450:	89 81       	ldd	r24, Y+1	; 0x01
    6452:	8c 5e       	subi	r24, 0xEC	; 236
    6454:	89 83       	std	Y+1, r24	; 0x01
			break;
    6456:	05 c0       	rjmp	.+10     	; 0x6462 <LCDGotoXY+0x4e>
		case 3:
			x+=0x54;
    6458:	89 81       	ldd	r24, Y+1	; 0x01
    645a:	8c 5a       	subi	r24, 0xAC	; 172
    645c:	89 83       	std	Y+1, r24	; 0x01
			break;
    645e:	01 c0       	rjmp	.+2      	; 0x6462 <LCDGotoXY+0x4e>
	}

	#ifdef LCD_TYPE_204
	switch(y){
		case 0:
			break;
    6460:	00 00       	nop
			x+=0x50;
			break;
	}
	#endif

	x|=0b10000000;
    6462:	89 81       	ldd	r24, Y+1	; 0x01
    6464:	80 68       	ori	r24, 0x80	; 128
    6466:	89 83       	std	Y+1, r24	; 0x01
  	LCDCmd(x);
    6468:	60 e0       	ldi	r22, 0x00	; 0
    646a:	89 81       	ldd	r24, Y+1	; 0x01
    646c:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>
}
    6470:	0f 90       	pop	r0
    6472:	0f 90       	pop	r0
    6474:	df 91       	pop	r29
    6476:	cf 91       	pop	r28
    6478:	08 95       	ret

0000647a <main>:
 *	donde se ejecutan las mismas. \n
 *	Además se inician diferentes perisféricos del uc que no se encuentran en \n
 *	diferentes máquinas de estado.
 */

int main (void) {
    647a:	0f 93       	push	r16
    647c:	1f 93       	push	r17
    647e:	cf 93       	push	r28
    6480:	df 93       	push	r29
    6482:	00 d0       	rcall	.+0      	; 0x6484 <main+0xa>
    6484:	cd b7       	in	r28, 0x3d	; 61
    6486:	de b7       	in	r29, 0x3e	; 62
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    6488:	0f b6       	in	r0, 0x3f	; 63
    648a:	f8 94       	cli
    648c:	a8 95       	wdr
    648e:	80 91 60 00 	lds	r24, 0x0060
    6492:	88 61       	ori	r24, 0x18	; 24
    6494:	80 93 60 00 	sts	0x0060, r24
    6498:	10 92 60 00 	sts	0x0060, r1
    649c:	0f be       	out	0x3f, r0	; 63
	wdt_disable();				/* por las dudas deshabilito el watchdog timer para el inicio de todo el programa */
	cli();						/* Deshabilito las interrupciones globales */
    649e:	f8 94       	cli

	Inicio_Puertos();			/* inicio los puertos */
    64a0:	0e 94 70 18 	call	0x30e0	; 0x30e0 <Inicio_Puertos>
	Inicio_Timer2();
    64a4:	0e 94 2b 19 	call	0x3256	; 0x3256 <Inicio_Timer2>
	Inicio_valor_ADC();
    64a8:	0e 94 03 03 	call	0x606	; 0x606 <Inicio_valor_ADC>
#ifdef COMPILE_WITH_MAX6675
	Spi_Max6675_Inicio();
    64ac:	0e 94 8e 37 	call	0x6f1c	; 0x6f1c <Spi_Max6675_Inicio>
#endif
	Configuracion_Timer_Medicion_Caudales();
    64b0:	0e 94 be 07 	call	0xf7c	; 0xf7c <Configuracion_Timer_Medicion_Caudales>
	Inicio_USART_0();
    64b4:	0e 94 ce 04 	call	0x99c	; 0x99c <Inicio_USART_0>
	Inicio_Control_Temp();
    64b8:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Inicio_Control_Temp>
	Carga_Configuracion_Desde_Eeprom();
    64bc:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <Carga_Configuracion_Desde_Eeprom>
	Inicio_Terminal();
    64c0:	0e 94 13 53 	call	0xa626	; 0xa626 <Inicio_Terminal>

	LCDInit(LS_NONE);
    64c4:	80 e0       	ldi	r24, 0x00	; 0
    64c6:	0e 94 b2 2b 	call	0x5764	; 0x5764 <LCDInit>
	LCDClear();
    64ca:	60 e0       	ldi	r22, 0x00	; 0
    64cc:	81 e0       	ldi	r24, 0x01	; 1
    64ce:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCDByte>
	sprintf(chBuffer, "-Pedro-Juan-Ana-");
    64d2:	81 e1       	ldi	r24, 0x11	; 17
    64d4:	ec ea       	ldi	r30, 0xAC	; 172
    64d6:	f1 e0       	ldi	r31, 0x01	; 1
    64d8:	ae e5       	ldi	r26, 0x5E	; 94
    64da:	b4 e0       	ldi	r27, 0x04	; 4
    64dc:	01 90       	ld	r0, Z+
    64de:	0d 92       	st	X+, r0
    64e0:	8a 95       	dec	r24
    64e2:	e1 f7       	brne	.-8      	; 0x64dc <main+0x62>
	LCDWriteLine(0,chBuffer);
    64e4:	6e e5       	ldi	r22, 0x5E	; 94
    64e6:	74 e0       	ldi	r23, 0x04	; 4
    64e8:	80 e0       	ldi	r24, 0x00	; 0
    64ea:	0e 94 0c 31 	call	0x6218	; 0x6218 <LCDWriteLine>
	sprintf(chBuffer, "Iniciando...");
    64ee:	8d e0       	ldi	r24, 0x0D	; 13
    64f0:	ed eb       	ldi	r30, 0xBD	; 189
    64f2:	f1 e0       	ldi	r31, 0x01	; 1
    64f4:	ae e5       	ldi	r26, 0x5E	; 94
    64f6:	b4 e0       	ldi	r27, 0x04	; 4
    64f8:	01 90       	ld	r0, Z+
    64fa:	0d 92       	st	X+, r0
    64fc:	8a 95       	dec	r24
    64fe:	e1 f7       	brne	.-8      	; 0x64f8 <main+0x7e>
	LCDWriteLine(1,chBuffer);
    6500:	6e e5       	ldi	r22, 0x5E	; 94
    6502:	74 e0       	ldi	r23, 0x04	; 4
    6504:	81 e0       	ldi	r24, 0x01	; 1
    6506:	0e 94 0c 31 	call	0x6218	; 0x6218 <LCDWriteLine>

	Inicio_Motor_PP();
    650a:	0e 94 ee 39 	call	0x73dc	; 0x73dc <Inicio_Motor_PP>

	// inicio de variables
	uContActualizarDisplay = 0;
    650e:	10 92 5d 04 	sts	0x045D, r1
    6512:	10 92 5c 04 	sts	0x045C, r1
	chLlamaDetectada = NO;
    6516:	10 92 7c 04 	sts	0x047C, r1
	uContLlamaDetectada = 0;
    651a:	10 92 7e 04 	sts	0x047E, r1
    651e:	10 92 7d 04 	sts	0x047D, r1
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    6522:	86 e0       	ldi	r24, 0x06	; 6
    6524:	90 e0       	ldi	r25, 0x00	; 0
    6526:	88 70       	andi	r24, 0x08	; 8
    6528:	99 27       	eor	r25, r25
    652a:	89 2b       	or	r24, r25
    652c:	11 f0       	breq	.+4      	; 0x6532 <main+0xb8>
    652e:	88 e2       	ldi	r24, 0x28	; 40
    6530:	01 c0       	rjmp	.+2      	; 0x6534 <main+0xba>
    6532:	88 e0       	ldi	r24, 0x08	; 8
    6534:	96 e0       	ldi	r25, 0x06	; 6
    6536:	97 70       	andi	r25, 0x07	; 7
    6538:	89 2b       	or	r24, r25
    653a:	98 2f       	mov	r25, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    653c:	88 e1       	ldi	r24, 0x18	; 24
    653e:	0f b6       	in	r0, 0x3f	; 63
    6540:	f8 94       	cli
    6542:	a8 95       	wdr
    6544:	80 93 60 00 	sts	0x0060, r24
    6548:	0f be       	out	0x3f, r0	; 63
    654a:	90 93 60 00 	sts	0x0060, r25

	wdt_enable(WDTO_1S);		/* prendo el watchdog timer */
	sei();						/* habilito las interrupciones globales */
    654e:	78 94       	sei

	while (1) {
		// ejecuto máquinas de estado
		valor_ADC();
    6550:	0e 94 aa 01 	call	0x354	; 0x354 <valor_ADC>
#ifdef COMPILE_WITH_DS18B20
		ds18b20_gettemp();
#endif
#ifdef COMPILE_WITH_MAX6675
		Max6675_Get_Temp();
    6554:	0e 94 b5 36 	call	0x6d6a	; 0x6d6a <Max6675_Get_Temp>
#endif
		Medicion_Caudales();
    6558:	0e 94 bb 06 	call	0xd76	; 0xd76 <Medicion_Caudales>
		Recepcion_USART_0();
    655c:	0e 94 26 03 	call	0x64c	; 0x64c <Recepcion_USART_0>
		Rotar_Motor_PP();
    6560:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <Rotar_Motor_PP>
		Terminal();
    6564:	0e 94 e9 45 	call	0x8bd2	; 0x8bd2 <Terminal>
		Control_Temp();
    6568:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <Control_Temp>

		// actualizo en display
		if (uContActualizarDisplay == 0){
    656c:	80 91 5c 04 	lds	r24, 0x045C
    6570:	90 91 5d 04 	lds	r25, 0x045D
    6574:	89 2b       	or	r24, r25
    6576:	09 f0       	breq	.+2      	; 0x657a <main+0x100>
    6578:	84 c2       	rjmp	.+1288   	; 0x6a82 <main+0x608>
			//	Tmp: 32.1/41.3°C
			//  Tmp: 32.1°C 41°C
			//	30.2l/m  [12.2V]

			// primer linea
			int i = sprintf(chBuffer, "Tmp: ");
    657a:	86 e0       	ldi	r24, 0x06	; 6
    657c:	ea ec       	ldi	r30, 0xCA	; 202
    657e:	f1 e0       	ldi	r31, 0x01	; 1
    6580:	ae e5       	ldi	r26, 0x5E	; 94
    6582:	b4 e0       	ldi	r27, 0x04	; 4
    6584:	01 90       	ld	r0, Z+
    6586:	0d 92       	st	X+, r0
    6588:	8a 95       	dec	r24
    658a:	e1 f7       	brne	.-8      	; 0x6584 <main+0x10a>
    658c:	85 e0       	ldi	r24, 0x05	; 5
    658e:	90 e0       	ldi	r25, 0x00	; 0
    6590:	9a 83       	std	Y+2, r25	; 0x02
    6592:	89 83       	std	Y+1, r24	; 0x01
			if (flTempMedida < 0.0){
    6594:	80 91 7f 04 	lds	r24, 0x047F
    6598:	90 91 80 04 	lds	r25, 0x0480
    659c:	a0 91 81 04 	lds	r26, 0x0481
    65a0:	b0 91 82 04 	lds	r27, 0x0482
    65a4:	20 e0       	ldi	r18, 0x00	; 0
    65a6:	30 e0       	ldi	r19, 0x00	; 0
    65a8:	a9 01       	movw	r20, r18
    65aa:	bc 01       	movw	r22, r24
    65ac:	cd 01       	movw	r24, r26
    65ae:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    65b2:	88 23       	and	r24, r24
    65b4:	6c f4       	brge	.+26     	; 0x65d0 <main+0x156>
				sprintf(chBuffer+i, "-UL-");
    65b6:	89 81       	ldd	r24, Y+1	; 0x01
    65b8:	9a 81       	ldd	r25, Y+2	; 0x02
    65ba:	82 5a       	subi	r24, 0xA2	; 162
    65bc:	9b 4f       	sbci	r25, 0xFB	; 251
    65be:	25 e0       	ldi	r18, 0x05	; 5
    65c0:	e0 ed       	ldi	r30, 0xD0	; 208
    65c2:	f1 e0       	ldi	r31, 0x01	; 1
    65c4:	dc 01       	movw	r26, r24
    65c6:	01 90       	ld	r0, Z+
    65c8:	0d 92       	st	X+, r0
    65ca:	2a 95       	dec	r18
    65cc:	e1 f7       	brne	.-8      	; 0x65c6 <main+0x14c>
    65ce:	5a c0       	rjmp	.+180    	; 0x6684 <main+0x20a>
			}
			else if (flTempMedida < 10.0){
    65d0:	80 91 7f 04 	lds	r24, 0x047F
    65d4:	90 91 80 04 	lds	r25, 0x0480
    65d8:	a0 91 81 04 	lds	r26, 0x0481
    65dc:	b0 91 82 04 	lds	r27, 0x0482
    65e0:	20 e0       	ldi	r18, 0x00	; 0
    65e2:	30 e0       	ldi	r19, 0x00	; 0
    65e4:	40 e2       	ldi	r20, 0x20	; 32
    65e6:	51 e4       	ldi	r21, 0x41	; 65
    65e8:	bc 01       	movw	r22, r24
    65ea:	cd 01       	movw	r24, r26
    65ec:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    65f0:	88 23       	and	r24, r24
    65f2:	ac f4       	brge	.+42     	; 0x661e <main+0x1a4>
				dtostrf(flTempMedida, 4, 2, chBuffer+i);
    65f4:	89 81       	ldd	r24, Y+1	; 0x01
    65f6:	9a 81       	ldd	r25, Y+2	; 0x02
    65f8:	9c 01       	movw	r18, r24
    65fa:	22 5a       	subi	r18, 0xA2	; 162
    65fc:	3b 4f       	sbci	r19, 0xFB	; 251
    65fe:	80 91 7f 04 	lds	r24, 0x047F
    6602:	90 91 80 04 	lds	r25, 0x0480
    6606:	a0 91 81 04 	lds	r26, 0x0481
    660a:	b0 91 82 04 	lds	r27, 0x0482
    660e:	89 01       	movw	r16, r18
    6610:	22 e0       	ldi	r18, 0x02	; 2
    6612:	44 e0       	ldi	r20, 0x04	; 4
    6614:	bc 01       	movw	r22, r24
    6616:	cd 01       	movw	r24, r26
    6618:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
    661c:	33 c0       	rjmp	.+102    	; 0x6684 <main+0x20a>
			}
			else if (flTempMedida < 100.0){
    661e:	80 91 7f 04 	lds	r24, 0x047F
    6622:	90 91 80 04 	lds	r25, 0x0480
    6626:	a0 91 81 04 	lds	r26, 0x0481
    662a:	b0 91 82 04 	lds	r27, 0x0482
    662e:	20 e0       	ldi	r18, 0x00	; 0
    6630:	30 e0       	ldi	r19, 0x00	; 0
    6632:	48 ec       	ldi	r20, 0xC8	; 200
    6634:	52 e4       	ldi	r21, 0x42	; 66
    6636:	bc 01       	movw	r22, r24
    6638:	cd 01       	movw	r24, r26
    663a:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    663e:	88 23       	and	r24, r24
    6640:	ac f4       	brge	.+42     	; 0x666c <main+0x1f2>
				dtostrf(flTempMedida, 4, 1, chBuffer+i);
    6642:	89 81       	ldd	r24, Y+1	; 0x01
    6644:	9a 81       	ldd	r25, Y+2	; 0x02
    6646:	9c 01       	movw	r18, r24
    6648:	22 5a       	subi	r18, 0xA2	; 162
    664a:	3b 4f       	sbci	r19, 0xFB	; 251
    664c:	80 91 7f 04 	lds	r24, 0x047F
    6650:	90 91 80 04 	lds	r25, 0x0480
    6654:	a0 91 81 04 	lds	r26, 0x0481
    6658:	b0 91 82 04 	lds	r27, 0x0482
    665c:	89 01       	movw	r16, r18
    665e:	21 e0       	ldi	r18, 0x01	; 1
    6660:	44 e0       	ldi	r20, 0x04	; 4
    6662:	bc 01       	movw	r22, r24
    6664:	cd 01       	movw	r24, r26
    6666:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
    666a:	0c c0       	rjmp	.+24     	; 0x6684 <main+0x20a>
			}
			else {
				sprintf(chBuffer+i, "-OL-");
    666c:	89 81       	ldd	r24, Y+1	; 0x01
    666e:	9a 81       	ldd	r25, Y+2	; 0x02
    6670:	82 5a       	subi	r24, 0xA2	; 162
    6672:	9b 4f       	sbci	r25, 0xFB	; 251
    6674:	25 e0       	ldi	r18, 0x05	; 5
    6676:	e5 ed       	ldi	r30, 0xD5	; 213
    6678:	f1 e0       	ldi	r31, 0x01	; 1
    667a:	dc 01       	movw	r26, r24
    667c:	01 90       	ld	r0, Z+
    667e:	0d 92       	st	X+, r0
    6680:	2a 95       	dec	r18
    6682:	e1 f7       	brne	.-8      	; 0x667c <main+0x202>
			}
			i += 4;
    6684:	89 81       	ldd	r24, Y+1	; 0x01
    6686:	9a 81       	ldd	r25, Y+2	; 0x02
    6688:	04 96       	adiw	r24, 0x04	; 4
    668a:	9a 83       	std	Y+2, r25	; 0x02
    668c:	89 83       	std	Y+1, r24	; 0x01
			if (flTempSetP < 0.0){
    668e:	80 91 69 02 	lds	r24, 0x0269
    6692:	90 91 6a 02 	lds	r25, 0x026A
    6696:	a0 91 6b 02 	lds	r26, 0x026B
    669a:	b0 91 6c 02 	lds	r27, 0x026C
    669e:	20 e0       	ldi	r18, 0x00	; 0
    66a0:	30 e0       	ldi	r19, 0x00	; 0
    66a2:	a9 01       	movw	r20, r18
    66a4:	bc 01       	movw	r22, r24
    66a6:	cd 01       	movw	r24, r26
    66a8:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    66ac:	88 23       	and	r24, r24
    66ae:	ac f4       	brge	.+42     	; 0x66da <main+0x260>
				sprintf(chBuffer+i, "%%0C UL%%0C");
    66b0:	89 81       	ldd	r24, Y+1	; 0x01
    66b2:	9a 81       	ldd	r25, Y+2	; 0x02
    66b4:	82 5a       	subi	r24, 0xA2	; 162
    66b6:	9b 4f       	sbci	r25, 0xFB	; 251
    66b8:	2a ed       	ldi	r18, 0xDA	; 218
    66ba:	31 e0       	ldi	r19, 0x01	; 1
    66bc:	23 2f       	mov	r18, r19
    66be:	2f 93       	push	r18
    66c0:	2a ed       	ldi	r18, 0xDA	; 218
    66c2:	31 e0       	ldi	r19, 0x01	; 1
    66c4:	2f 93       	push	r18
    66c6:	29 2f       	mov	r18, r25
    66c8:	2f 93       	push	r18
    66ca:	8f 93       	push	r24
    66cc:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    66d0:	0f 90       	pop	r0
    66d2:	0f 90       	pop	r0
    66d4:	0f 90       	pop	r0
    66d6:	0f 90       	pop	r0
    66d8:	70 c0       	rjmp	.+224    	; 0x67ba <main+0x340>
			}
			else if (flTempSetP < 100.0){
    66da:	80 91 69 02 	lds	r24, 0x0269
    66de:	90 91 6a 02 	lds	r25, 0x026A
    66e2:	a0 91 6b 02 	lds	r26, 0x026B
    66e6:	b0 91 6c 02 	lds	r27, 0x026C
    66ea:	20 e0       	ldi	r18, 0x00	; 0
    66ec:	30 e0       	ldi	r19, 0x00	; 0
    66ee:	48 ec       	ldi	r20, 0xC8	; 200
    66f0:	52 e4       	ldi	r21, 0x42	; 66
    66f2:	bc 01       	movw	r22, r24
    66f4:	cd 01       	movw	r24, r26
    66f6:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    66fa:	88 23       	and	r24, r24
    66fc:	0c f0       	brlt	.+2      	; 0x6700 <main+0x286>
    66fe:	49 c0       	rjmp	.+146    	; 0x6792 <main+0x318>
				i += sprintf(chBuffer+i, "%%0C ");
    6700:	89 81       	ldd	r24, Y+1	; 0x01
    6702:	9a 81       	ldd	r25, Y+2	; 0x02
    6704:	82 5a       	subi	r24, 0xA2	; 162
    6706:	9b 4f       	sbci	r25, 0xFB	; 251
    6708:	26 ee       	ldi	r18, 0xE6	; 230
    670a:	31 e0       	ldi	r19, 0x01	; 1
    670c:	23 2f       	mov	r18, r19
    670e:	2f 93       	push	r18
    6710:	26 ee       	ldi	r18, 0xE6	; 230
    6712:	31 e0       	ldi	r19, 0x01	; 1
    6714:	2f 93       	push	r18
    6716:	29 2f       	mov	r18, r25
    6718:	2f 93       	push	r18
    671a:	8f 93       	push	r24
    671c:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    6720:	0f 90       	pop	r0
    6722:	0f 90       	pop	r0
    6724:	0f 90       	pop	r0
    6726:	0f 90       	pop	r0
    6728:	9c 01       	movw	r18, r24
    672a:	89 81       	ldd	r24, Y+1	; 0x01
    672c:	9a 81       	ldd	r25, Y+2	; 0x02
    672e:	82 0f       	add	r24, r18
    6730:	93 1f       	adc	r25, r19
    6732:	9a 83       	std	Y+2, r25	; 0x02
    6734:	89 83       	std	Y+1, r24	; 0x01
				dtostrf(flTempSetP, 2, 0, chBuffer+i);
    6736:	89 81       	ldd	r24, Y+1	; 0x01
    6738:	9a 81       	ldd	r25, Y+2	; 0x02
    673a:	9c 01       	movw	r18, r24
    673c:	22 5a       	subi	r18, 0xA2	; 162
    673e:	3b 4f       	sbci	r19, 0xFB	; 251
    6740:	80 91 69 02 	lds	r24, 0x0269
    6744:	90 91 6a 02 	lds	r25, 0x026A
    6748:	a0 91 6b 02 	lds	r26, 0x026B
    674c:	b0 91 6c 02 	lds	r27, 0x026C
    6750:	89 01       	movw	r16, r18
    6752:	20 e0       	ldi	r18, 0x00	; 0
    6754:	42 e0       	ldi	r20, 0x02	; 2
    6756:	bc 01       	movw	r22, r24
    6758:	cd 01       	movw	r24, r26
    675a:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
				i += 2;
    675e:	89 81       	ldd	r24, Y+1	; 0x01
    6760:	9a 81       	ldd	r25, Y+2	; 0x02
    6762:	02 96       	adiw	r24, 0x02	; 2
    6764:	9a 83       	std	Y+2, r25	; 0x02
    6766:	89 83       	std	Y+1, r24	; 0x01
				sprintf(chBuffer+i, "%%0C");
    6768:	89 81       	ldd	r24, Y+1	; 0x01
    676a:	9a 81       	ldd	r25, Y+2	; 0x02
    676c:	82 5a       	subi	r24, 0xA2	; 162
    676e:	9b 4f       	sbci	r25, 0xFB	; 251
    6770:	2c ee       	ldi	r18, 0xEC	; 236
    6772:	31 e0       	ldi	r19, 0x01	; 1
    6774:	23 2f       	mov	r18, r19
    6776:	2f 93       	push	r18
    6778:	2c ee       	ldi	r18, 0xEC	; 236
    677a:	31 e0       	ldi	r19, 0x01	; 1
    677c:	2f 93       	push	r18
    677e:	29 2f       	mov	r18, r25
    6780:	2f 93       	push	r18
    6782:	8f 93       	push	r24
    6784:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    6788:	0f 90       	pop	r0
    678a:	0f 90       	pop	r0
    678c:	0f 90       	pop	r0
    678e:	0f 90       	pop	r0
    6790:	14 c0       	rjmp	.+40     	; 0x67ba <main+0x340>
			}
			else {
				sprintf(chBuffer+i, "%%0C OL%%0C");
    6792:	89 81       	ldd	r24, Y+1	; 0x01
    6794:	9a 81       	ldd	r25, Y+2	; 0x02
    6796:	82 5a       	subi	r24, 0xA2	; 162
    6798:	9b 4f       	sbci	r25, 0xFB	; 251
    679a:	21 ef       	ldi	r18, 0xF1	; 241
    679c:	31 e0       	ldi	r19, 0x01	; 1
    679e:	23 2f       	mov	r18, r19
    67a0:	2f 93       	push	r18
    67a2:	21 ef       	ldi	r18, 0xF1	; 241
    67a4:	31 e0       	ldi	r19, 0x01	; 1
    67a6:	2f 93       	push	r18
    67a8:	29 2f       	mov	r18, r25
    67aa:	2f 93       	push	r18
    67ac:	8f 93       	push	r24
    67ae:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    67b2:	0f 90       	pop	r0
    67b4:	0f 90       	pop	r0
    67b6:	0f 90       	pop	r0
    67b8:	0f 90       	pop	r0
			}
			LCDWriteLine(0,chBuffer);
    67ba:	6e e5       	ldi	r22, 0x5E	; 94
    67bc:	74 e0       	ldi	r23, 0x04	; 4
    67be:	80 e0       	ldi	r24, 0x00	; 0
    67c0:	0e 94 0c 31 	call	0x6218	; 0x6218 <LCDWriteLine>

			// segunda linea
			if (flCaudalMedido < 0.0){
    67c4:	80 91 0d 04 	lds	r24, 0x040D
    67c8:	90 91 0e 04 	lds	r25, 0x040E
    67cc:	a0 91 0f 04 	lds	r26, 0x040F
    67d0:	b0 91 10 04 	lds	r27, 0x0410
    67d4:	20 e0       	ldi	r18, 0x00	; 0
    67d6:	30 e0       	ldi	r19, 0x00	; 0
    67d8:	a9 01       	movw	r20, r18
    67da:	bc 01       	movw	r22, r24
    67dc:	cd 01       	movw	r24, r26
    67de:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    67e2:	88 23       	and	r24, r24
    67e4:	54 f4       	brge	.+20     	; 0x67fa <main+0x380>
				sprintf(chBuffer, "-UL-");
    67e6:	85 e0       	ldi	r24, 0x05	; 5
    67e8:	e0 ed       	ldi	r30, 0xD0	; 208
    67ea:	f1 e0       	ldi	r31, 0x01	; 1
    67ec:	ae e5       	ldi	r26, 0x5E	; 94
    67ee:	b4 e0       	ldi	r27, 0x04	; 4
    67f0:	01 90       	ld	r0, Z+
    67f2:	0d 92       	st	X+, r0
    67f4:	8a 95       	dec	r24
    67f6:	e1 f7       	brne	.-8      	; 0x67f0 <main+0x376>
    67f8:	4f c0       	rjmp	.+158    	; 0x6898 <main+0x41e>
			}
			else if (flCaudalMedido < 10.0){
    67fa:	80 91 0d 04 	lds	r24, 0x040D
    67fe:	90 91 0e 04 	lds	r25, 0x040E
    6802:	a0 91 0f 04 	lds	r26, 0x040F
    6806:	b0 91 10 04 	lds	r27, 0x0410
    680a:	20 e0       	ldi	r18, 0x00	; 0
    680c:	30 e0       	ldi	r19, 0x00	; 0
    680e:	40 e2       	ldi	r20, 0x20	; 32
    6810:	51 e4       	ldi	r21, 0x41	; 65
    6812:	bc 01       	movw	r22, r24
    6814:	cd 01       	movw	r24, r26
    6816:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    681a:	88 23       	and	r24, r24
    681c:	8c f4       	brge	.+34     	; 0x6840 <main+0x3c6>
				dtostrf(flCaudalMedido, 4, 2, chBuffer);
    681e:	80 91 0d 04 	lds	r24, 0x040D
    6822:	90 91 0e 04 	lds	r25, 0x040E
    6826:	a0 91 0f 04 	lds	r26, 0x040F
    682a:	b0 91 10 04 	lds	r27, 0x0410
    682e:	0e e5       	ldi	r16, 0x5E	; 94
    6830:	14 e0       	ldi	r17, 0x04	; 4
    6832:	22 e0       	ldi	r18, 0x02	; 2
    6834:	44 e0       	ldi	r20, 0x04	; 4
    6836:	bc 01       	movw	r22, r24
    6838:	cd 01       	movw	r24, r26
    683a:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
    683e:	2c c0       	rjmp	.+88     	; 0x6898 <main+0x41e>
			}
			else if (flCaudalMedido < 100.0){
    6840:	80 91 0d 04 	lds	r24, 0x040D
    6844:	90 91 0e 04 	lds	r25, 0x040E
    6848:	a0 91 0f 04 	lds	r26, 0x040F
    684c:	b0 91 10 04 	lds	r27, 0x0410
    6850:	20 e0       	ldi	r18, 0x00	; 0
    6852:	30 e0       	ldi	r19, 0x00	; 0
    6854:	48 ec       	ldi	r20, 0xC8	; 200
    6856:	52 e4       	ldi	r21, 0x42	; 66
    6858:	bc 01       	movw	r22, r24
    685a:	cd 01       	movw	r24, r26
    685c:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    6860:	88 23       	and	r24, r24
    6862:	8c f4       	brge	.+34     	; 0x6886 <main+0x40c>
				dtostrf(flCaudalMedido, 4, 1, chBuffer);
    6864:	80 91 0d 04 	lds	r24, 0x040D
    6868:	90 91 0e 04 	lds	r25, 0x040E
    686c:	a0 91 0f 04 	lds	r26, 0x040F
    6870:	b0 91 10 04 	lds	r27, 0x0410
    6874:	0e e5       	ldi	r16, 0x5E	; 94
    6876:	14 e0       	ldi	r17, 0x04	; 4
    6878:	21 e0       	ldi	r18, 0x01	; 1
    687a:	44 e0       	ldi	r20, 0x04	; 4
    687c:	bc 01       	movw	r22, r24
    687e:	cd 01       	movw	r24, r26
    6880:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
    6884:	09 c0       	rjmp	.+18     	; 0x6898 <main+0x41e>
			}
			else {
				sprintf(chBuffer, "-OL-");
    6886:	85 e0       	ldi	r24, 0x05	; 5
    6888:	e5 ed       	ldi	r30, 0xD5	; 213
    688a:	f1 e0       	ldi	r31, 0x01	; 1
    688c:	ae e5       	ldi	r26, 0x5E	; 94
    688e:	b4 e0       	ldi	r27, 0x04	; 4
    6890:	01 90       	ld	r0, Z+
    6892:	0d 92       	st	X+, r0
    6894:	8a 95       	dec	r24
    6896:	e1 f7       	brne	.-8      	; 0x6890 <main+0x416>
			}
			i = 4;
    6898:	84 e0       	ldi	r24, 0x04	; 4
    689a:	90 e0       	ldi	r25, 0x00	; 0
    689c:	9a 83       	std	Y+2, r25	; 0x02
    689e:	89 83       	std	Y+1, r24	; 0x01
			if (RELAY_CARGA_PIN_PORT & (SET<<RELAY_CARGA_PIN)){	// activa
    68a0:	86 e2       	ldi	r24, 0x26	; 38
    68a2:	90 e0       	ldi	r25, 0x00	; 0
    68a4:	fc 01       	movw	r30, r24
    68a6:	80 81       	ld	r24, Z
    68a8:	88 2f       	mov	r24, r24
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	80 72       	andi	r24, 0x20	; 32
    68ae:	99 27       	eor	r25, r25
    68b0:	89 2b       	or	r24, r25
    68b2:	e1 f0       	breq	.+56     	; 0x68ec <main+0x472>
				i += sprintf(chBuffer+i, "l/m %%3");
    68b4:	89 81       	ldd	r24, Y+1	; 0x01
    68b6:	9a 81       	ldd	r25, Y+2	; 0x02
    68b8:	82 5a       	subi	r24, 0xA2	; 162
    68ba:	9b 4f       	sbci	r25, 0xFB	; 251
    68bc:	2d ef       	ldi	r18, 0xFD	; 253
    68be:	31 e0       	ldi	r19, 0x01	; 1
    68c0:	23 2f       	mov	r18, r19
    68c2:	2f 93       	push	r18
    68c4:	2d ef       	ldi	r18, 0xFD	; 253
    68c6:	31 e0       	ldi	r19, 0x01	; 1
    68c8:	2f 93       	push	r18
    68ca:	29 2f       	mov	r18, r25
    68cc:	2f 93       	push	r18
    68ce:	8f 93       	push	r24
    68d0:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    68d4:	0f 90       	pop	r0
    68d6:	0f 90       	pop	r0
    68d8:	0f 90       	pop	r0
    68da:	0f 90       	pop	r0
    68dc:	9c 01       	movw	r18, r24
    68de:	89 81       	ldd	r24, Y+1	; 0x01
    68e0:	9a 81       	ldd	r25, Y+2	; 0x02
    68e2:	82 0f       	add	r24, r18
    68e4:	93 1f       	adc	r25, r19
    68e6:	9a 83       	std	Y+2, r25	; 0x02
    68e8:	89 83       	std	Y+1, r24	; 0x01
    68ea:	14 c0       	rjmp	.+40     	; 0x6914 <main+0x49a>
			}
			else{
				i += sprintf(chBuffer+i, "l/m  ");
    68ec:	89 81       	ldd	r24, Y+1	; 0x01
    68ee:	9a 81       	ldd	r25, Y+2	; 0x02
    68f0:	82 5a       	subi	r24, 0xA2	; 162
    68f2:	9b 4f       	sbci	r25, 0xFB	; 251
    68f4:	26 e0       	ldi	r18, 0x06	; 6
    68f6:	e5 e0       	ldi	r30, 0x05	; 5
    68f8:	f2 e0       	ldi	r31, 0x02	; 2
    68fa:	dc 01       	movw	r26, r24
    68fc:	01 90       	ld	r0, Z+
    68fe:	0d 92       	st	X+, r0
    6900:	2a 95       	dec	r18
    6902:	e1 f7       	brne	.-8      	; 0x68fc <main+0x482>
    6904:	85 e0       	ldi	r24, 0x05	; 5
    6906:	90 e0       	ldi	r25, 0x00	; 0
    6908:	29 81       	ldd	r18, Y+1	; 0x01
    690a:	3a 81       	ldd	r19, Y+2	; 0x02
    690c:	82 0f       	add	r24, r18
    690e:	93 1f       	adc	r25, r19
    6910:	9a 83       	std	Y+2, r25	; 0x02
    6912:	89 83       	std	Y+1, r24	; 0x01
			}
			i += sprintf(chBuffer+i, "%%1");
    6914:	89 81       	ldd	r24, Y+1	; 0x01
    6916:	9a 81       	ldd	r25, Y+2	; 0x02
    6918:	82 5a       	subi	r24, 0xA2	; 162
    691a:	9b 4f       	sbci	r25, 0xFB	; 251
    691c:	2b e0       	ldi	r18, 0x0B	; 11
    691e:	32 e0       	ldi	r19, 0x02	; 2
    6920:	23 2f       	mov	r18, r19
    6922:	2f 93       	push	r18
    6924:	2b e0       	ldi	r18, 0x0B	; 11
    6926:	32 e0       	ldi	r19, 0x02	; 2
    6928:	2f 93       	push	r18
    692a:	29 2f       	mov	r18, r25
    692c:	2f 93       	push	r18
    692e:	8f 93       	push	r24
    6930:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    6934:	0f 90       	pop	r0
    6936:	0f 90       	pop	r0
    6938:	0f 90       	pop	r0
    693a:	0f 90       	pop	r0
    693c:	9c 01       	movw	r18, r24
    693e:	89 81       	ldd	r24, Y+1	; 0x01
    6940:	9a 81       	ldd	r25, Y+2	; 0x02
    6942:	82 0f       	add	r24, r18
    6944:	93 1f       	adc	r25, r19
    6946:	9a 83       	std	Y+2, r25	; 0x02
    6948:	89 83       	std	Y+1, r24	; 0x01
			if (flTensionBateria < 0.0){
    694a:	80 91 64 02 	lds	r24, 0x0264
    694e:	90 91 65 02 	lds	r25, 0x0265
    6952:	a0 91 66 02 	lds	r26, 0x0266
    6956:	b0 91 67 02 	lds	r27, 0x0267
    695a:	20 e0       	ldi	r18, 0x00	; 0
    695c:	30 e0       	ldi	r19, 0x00	; 0
    695e:	a9 01       	movw	r20, r18
    6960:	bc 01       	movw	r22, r24
    6962:	cd 01       	movw	r24, r26
    6964:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    6968:	88 23       	and	r24, r24
    696a:	6c f4       	brge	.+26     	; 0x6986 <main+0x50c>
				sprintf(chBuffer+i, "-UL-");
    696c:	89 81       	ldd	r24, Y+1	; 0x01
    696e:	9a 81       	ldd	r25, Y+2	; 0x02
    6970:	82 5a       	subi	r24, 0xA2	; 162
    6972:	9b 4f       	sbci	r25, 0xFB	; 251
    6974:	25 e0       	ldi	r18, 0x05	; 5
    6976:	e0 ed       	ldi	r30, 0xD0	; 208
    6978:	f1 e0       	ldi	r31, 0x01	; 1
    697a:	dc 01       	movw	r26, r24
    697c:	01 90       	ld	r0, Z+
    697e:	0d 92       	st	X+, r0
    6980:	2a 95       	dec	r18
    6982:	e1 f7       	brne	.-8      	; 0x697c <main+0x502>
    6984:	5a c0       	rjmp	.+180    	; 0x6a3a <main+0x5c0>
			}
			else if (flTensionBateria < 10.0){
    6986:	80 91 64 02 	lds	r24, 0x0264
    698a:	90 91 65 02 	lds	r25, 0x0265
    698e:	a0 91 66 02 	lds	r26, 0x0266
    6992:	b0 91 67 02 	lds	r27, 0x0267
    6996:	20 e0       	ldi	r18, 0x00	; 0
    6998:	30 e0       	ldi	r19, 0x00	; 0
    699a:	40 e2       	ldi	r20, 0x20	; 32
    699c:	51 e4       	ldi	r21, 0x41	; 65
    699e:	bc 01       	movw	r22, r24
    69a0:	cd 01       	movw	r24, r26
    69a2:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    69a6:	88 23       	and	r24, r24
    69a8:	ac f4       	brge	.+42     	; 0x69d4 <main+0x55a>
				dtostrf(flTensionBateria, 4, 2, chBuffer+i);
    69aa:	89 81       	ldd	r24, Y+1	; 0x01
    69ac:	9a 81       	ldd	r25, Y+2	; 0x02
    69ae:	9c 01       	movw	r18, r24
    69b0:	22 5a       	subi	r18, 0xA2	; 162
    69b2:	3b 4f       	sbci	r19, 0xFB	; 251
    69b4:	80 91 64 02 	lds	r24, 0x0264
    69b8:	90 91 65 02 	lds	r25, 0x0265
    69bc:	a0 91 66 02 	lds	r26, 0x0266
    69c0:	b0 91 67 02 	lds	r27, 0x0267
    69c4:	89 01       	movw	r16, r18
    69c6:	22 e0       	ldi	r18, 0x02	; 2
    69c8:	44 e0       	ldi	r20, 0x04	; 4
    69ca:	bc 01       	movw	r22, r24
    69cc:	cd 01       	movw	r24, r26
    69ce:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
    69d2:	33 c0       	rjmp	.+102    	; 0x6a3a <main+0x5c0>
			}
			else if (flTensionBateria < 100.0){
    69d4:	80 91 64 02 	lds	r24, 0x0264
    69d8:	90 91 65 02 	lds	r25, 0x0265
    69dc:	a0 91 66 02 	lds	r26, 0x0266
    69e0:	b0 91 67 02 	lds	r27, 0x0267
    69e4:	20 e0       	ldi	r18, 0x00	; 0
    69e6:	30 e0       	ldi	r19, 0x00	; 0
    69e8:	48 ec       	ldi	r20, 0xC8	; 200
    69ea:	52 e4       	ldi	r21, 0x42	; 66
    69ec:	bc 01       	movw	r22, r24
    69ee:	cd 01       	movw	r24, r26
    69f0:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    69f4:	88 23       	and	r24, r24
    69f6:	ac f4       	brge	.+42     	; 0x6a22 <main+0x5a8>
				dtostrf(flTensionBateria, 4, 1, chBuffer+i);
    69f8:	89 81       	ldd	r24, Y+1	; 0x01
    69fa:	9a 81       	ldd	r25, Y+2	; 0x02
    69fc:	9c 01       	movw	r18, r24
    69fe:	22 5a       	subi	r18, 0xA2	; 162
    6a00:	3b 4f       	sbci	r19, 0xFB	; 251
    6a02:	80 91 64 02 	lds	r24, 0x0264
    6a06:	90 91 65 02 	lds	r25, 0x0265
    6a0a:	a0 91 66 02 	lds	r26, 0x0266
    6a0e:	b0 91 67 02 	lds	r27, 0x0267
    6a12:	89 01       	movw	r16, r18
    6a14:	21 e0       	ldi	r18, 0x01	; 1
    6a16:	44 e0       	ldi	r20, 0x04	; 4
    6a18:	bc 01       	movw	r22, r24
    6a1a:	cd 01       	movw	r24, r26
    6a1c:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
    6a20:	0c c0       	rjmp	.+24     	; 0x6a3a <main+0x5c0>
			}
			else {
				sprintf(chBuffer+i, "-OL-");
    6a22:	89 81       	ldd	r24, Y+1	; 0x01
    6a24:	9a 81       	ldd	r25, Y+2	; 0x02
    6a26:	82 5a       	subi	r24, 0xA2	; 162
    6a28:	9b 4f       	sbci	r25, 0xFB	; 251
    6a2a:	25 e0       	ldi	r18, 0x05	; 5
    6a2c:	e5 ed       	ldi	r30, 0xD5	; 213
    6a2e:	f1 e0       	ldi	r31, 0x01	; 1
    6a30:	dc 01       	movw	r26, r24
    6a32:	01 90       	ld	r0, Z+
    6a34:	0d 92       	st	X+, r0
    6a36:	2a 95       	dec	r18
    6a38:	e1 f7       	brne	.-8      	; 0x6a32 <main+0x5b8>
			}
			i += 4;
    6a3a:	89 81       	ldd	r24, Y+1	; 0x01
    6a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    6a3e:	04 96       	adiw	r24, 0x04	; 4
    6a40:	9a 83       	std	Y+2, r25	; 0x02
    6a42:	89 83       	std	Y+1, r24	; 0x01
			sprintf(chBuffer+i, "V%%2");
    6a44:	89 81       	ldd	r24, Y+1	; 0x01
    6a46:	9a 81       	ldd	r25, Y+2	; 0x02
    6a48:	82 5a       	subi	r24, 0xA2	; 162
    6a4a:	9b 4f       	sbci	r25, 0xFB	; 251
    6a4c:	2f e0       	ldi	r18, 0x0F	; 15
    6a4e:	32 e0       	ldi	r19, 0x02	; 2
    6a50:	23 2f       	mov	r18, r19
    6a52:	2f 93       	push	r18
    6a54:	2f e0       	ldi	r18, 0x0F	; 15
    6a56:	32 e0       	ldi	r19, 0x02	; 2
    6a58:	2f 93       	push	r18
    6a5a:	29 2f       	mov	r18, r25
    6a5c:	2f 93       	push	r18
    6a5e:	8f 93       	push	r24
    6a60:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    6a64:	0f 90       	pop	r0
    6a66:	0f 90       	pop	r0
    6a68:	0f 90       	pop	r0
    6a6a:	0f 90       	pop	r0
			LCDWriteLine(1,chBuffer);
    6a6c:	6e e5       	ldi	r22, 0x5E	; 94
    6a6e:	74 e0       	ldi	r23, 0x04	; 4
    6a70:	81 e0       	ldi	r24, 0x01	; 1
    6a72:	0e 94 0c 31 	call	0x6218	; 0x6218 <LCDWriteLine>

			uContActualizarDisplay = 100;
    6a76:	84 e6       	ldi	r24, 0x64	; 100
    6a78:	90 e0       	ldi	r25, 0x00	; 0
    6a7a:	90 93 5d 04 	sts	0x045D, r25
    6a7e:	80 93 5c 04 	sts	0x045C, r24
		}

		// reseteo el WDT
		wdt_reset();
    6a82:	a8 95       	wdr
	}
    6a84:	65 cd       	rjmp	.-1334   	; 0x6550 <main+0xd6>

00006a86 <__vector_7>:
 *
 *	Este timer genera una interrupción, en el se incrementanlos \n
 *	contadores de cada máquina de estados.
 */

ISR (TIMER2_COMPA_vect) {
    6a86:	1f 92       	push	r1
    6a88:	0f 92       	push	r0
    6a8a:	00 90 5f 00 	lds	r0, 0x005F
    6a8e:	0f 92       	push	r0
    6a90:	11 24       	eor	r1, r1
    6a92:	8f 93       	push	r24
    6a94:	9f 93       	push	r25
    6a96:	cf 93       	push	r28
    6a98:	df 93       	push	r29
    6a9a:	cd b7       	in	r28, 0x3d	; 61
    6a9c:	de b7       	in	r29, 0x3e	; 62
	/*------------------------------------------------------------------------------------*
	 * control
	 *------------------------------------------------------------------------------------*/
	if (uContPeriodoPID != 0){
    6a9e:	80 91 17 04 	lds	r24, 0x0417
    6aa2:	90 91 18 04 	lds	r25, 0x0418
    6aa6:	89 2b       	or	r24, r25
    6aa8:	49 f0       	breq	.+18     	; 0x6abc <__vector_7+0x36>
		uContPeriodoPID--;
    6aaa:	80 91 17 04 	lds	r24, 0x0417
    6aae:	90 91 18 04 	lds	r25, 0x0418
    6ab2:	01 97       	sbiw	r24, 0x01	; 1
    6ab4:	90 93 18 04 	sts	0x0418, r25
    6ab8:	80 93 17 04 	sts	0x0417, r24
	}

	if (uContPeriodoVedaPID != 0){
    6abc:	80 91 3a 04 	lds	r24, 0x043A
    6ac0:	90 91 3b 04 	lds	r25, 0x043B
    6ac4:	89 2b       	or	r24, r25
    6ac6:	49 f0       	breq	.+18     	; 0x6ada <__vector_7+0x54>
		uContPeriodoVedaPID--;
    6ac8:	80 91 3a 04 	lds	r24, 0x043A
    6acc:	90 91 3b 04 	lds	r25, 0x043B
    6ad0:	01 97       	sbiw	r24, 0x01	; 1
    6ad2:	90 93 3b 04 	sts	0x043B, r25
    6ad6:	80 93 3a 04 	sts	0x043A, r24
	}

	if (uContPeriodoVedaCaudal != 0){
    6ada:	80 91 54 04 	lds	r24, 0x0454
    6ade:	90 91 55 04 	lds	r25, 0x0455
    6ae2:	89 2b       	or	r24, r25
    6ae4:	49 f0       	breq	.+18     	; 0x6af8 <__vector_7+0x72>
		uContPeriodoVedaCaudal--;
    6ae6:	80 91 54 04 	lds	r24, 0x0454
    6aea:	90 91 55 04 	lds	r25, 0x0455
    6aee:	01 97       	sbiw	r24, 0x01	; 1
    6af0:	90 93 55 04 	sts	0x0455, r25
    6af4:	80 93 54 04 	sts	0x0454, r24
	}

	/*------------------------------------------------------------------------------------*
	 * motor PP
	 *------------------------------------------------------------------------------------*/
	if (uContMotorPP != 0){
    6af8:	80 91 8f 04 	lds	r24, 0x048F
    6afc:	90 91 90 04 	lds	r25, 0x0490
    6b00:	89 2b       	or	r24, r25
    6b02:	49 f0       	breq	.+18     	; 0x6b16 <__vector_7+0x90>
		uContMotorPP--;
    6b04:	80 91 8f 04 	lds	r24, 0x048F
    6b08:	90 91 90 04 	lds	r25, 0x0490
    6b0c:	01 97       	sbiw	r24, 0x01	; 1
    6b0e:	90 93 90 04 	sts	0x0490, r25
    6b12:	80 93 8f 04 	sts	0x048F, r24

	/*------------------------------------------------------------------------------------*
	 * max6675
	 *------------------------------------------------------------------------------------*/
#ifdef COMPILE_WITH_MAX6675
	if (uContMax6675 != 0)
    6b16:	80 91 85 04 	lds	r24, 0x0485
    6b1a:	90 91 86 04 	lds	r25, 0x0486
    6b1e:	89 2b       	or	r24, r25
    6b20:	49 f0       	breq	.+18     	; 0x6b34 <__vector_7+0xae>
		uContMax6675--;
    6b22:	80 91 85 04 	lds	r24, 0x0485
    6b26:	90 91 86 04 	lds	r25, 0x0486
    6b2a:	01 97       	sbiw	r24, 0x01	; 1
    6b2c:	90 93 86 04 	sts	0x0486, r25
    6b30:	80 93 85 04 	sts	0x0485, r24
#endif

	/*------------------------------------------------------------------------------------*
	 * display
	 *------------------------------------------------------------------------------------*/
	if (uContActualizarDisplay != 0)
    6b34:	80 91 5c 04 	lds	r24, 0x045C
    6b38:	90 91 5d 04 	lds	r25, 0x045D
    6b3c:	89 2b       	or	r24, r25
    6b3e:	49 f0       	breq	.+18     	; 0x6b52 <__vector_7+0xcc>
		uContActualizarDisplay--;
    6b40:	80 91 5c 04 	lds	r24, 0x045C
    6b44:	90 91 5d 04 	lds	r25, 0x045D
    6b48:	01 97       	sbiw	r24, 0x01	; 1
    6b4a:	90 93 5d 04 	sts	0x045D, r25
    6b4e:	80 93 5c 04 	sts	0x045C, r24

	/*------------------------------------------------------------------------------------*
	 * Contadores de operacion de caudales
	 *------------------------------------------------------------------------------------*/
	if (uContStandbyCaudal != 0)
    6b52:	80 91 0b 04 	lds	r24, 0x040B
    6b56:	90 91 0c 04 	lds	r25, 0x040C
    6b5a:	89 2b       	or	r24, r25
    6b5c:	49 f0       	breq	.+18     	; 0x6b70 <__vector_7+0xea>
		uContStandbyCaudal--;
    6b5e:	80 91 0b 04 	lds	r24, 0x040B
    6b62:	90 91 0c 04 	lds	r25, 0x040C
    6b66:	01 97       	sbiw	r24, 0x01	; 1
    6b68:	90 93 0c 04 	sts	0x040C, r25
    6b6c:	80 93 0b 04 	sts	0x040B, r24

	/*------------------------------------------------------------------------------------*
	 * Contadores de las máquinas de estado de USART
	 *------------------------------------------------------------------------------------*/
	/* decremento del contador de tiempo para time out de espera de USART0 */
	if (uContTimeoutEsperaUSART0 != 0)
    6b70:	80 91 6e 02 	lds	r24, 0x026E
    6b74:	90 91 6f 02 	lds	r25, 0x026F
    6b78:	89 2b       	or	r24, r25
    6b7a:	49 f0       	breq	.+18     	; 0x6b8e <__vector_7+0x108>
		uContTimeoutEsperaUSART0 --;
    6b7c:	80 91 6e 02 	lds	r24, 0x026E
    6b80:	90 91 6f 02 	lds	r25, 0x026F
    6b84:	01 97       	sbiw	r24, 0x01	; 1
    6b86:	90 93 6f 02 	sts	0x026F, r25
    6b8a:	80 93 6e 02 	sts	0x026E, r24

	/* decremento del contador de tiempo para time out de electura del buffer de recepcion */
	if (uContTimeoutLecturaRxUSART0 != 0)
    6b8e:	80 91 3a 03 	lds	r24, 0x033A
    6b92:	90 91 3b 03 	lds	r25, 0x033B
    6b96:	89 2b       	or	r24, r25
    6b98:	49 f0       	breq	.+18     	; 0x6bac <__vector_7+0x126>
		uContTimeoutLecturaRxUSART0 --;
    6b9a:	80 91 3a 03 	lds	r24, 0x033A
    6b9e:	90 91 3b 03 	lds	r25, 0x033B
    6ba2:	01 97       	sbiw	r24, 0x01	; 1
    6ba4:	90 93 3b 03 	sts	0x033B, r25
    6ba8:	80 93 3a 03 	sts	0x033A, r24

	/* decremento del contador de tiempo para timeout de recepcion para cerrar el buffer */
	if (uContTimeoutRxUSART0 != 0)
    6bac:	80 91 3c 03 	lds	r24, 0x033C
    6bb0:	90 91 3d 03 	lds	r25, 0x033D
    6bb4:	89 2b       	or	r24, r25
    6bb6:	49 f0       	breq	.+18     	; 0x6bca <__vector_7+0x144>
		uContTimeoutRxUSART0 --;
    6bb8:	80 91 3c 03 	lds	r24, 0x033C
    6bbc:	90 91 3d 03 	lds	r25, 0x033D
    6bc0:	01 97       	sbiw	r24, 0x01	; 1
    6bc2:	90 93 3d 03 	sts	0x033D, r25
    6bc6:	80 93 3c 03 	sts	0x033C, r24

//	/* decremento del contador de tiempo para time out de envio del buffer de transmision */
//	if (uContTimeoutTxUSART0 != 0)
//		uContTimeoutTxUSART0 --;
}
    6bca:	df 91       	pop	r29
    6bcc:	cf 91       	pop	r28
    6bce:	9f 91       	pop	r25
    6bd0:	8f 91       	pop	r24
    6bd2:	0f 90       	pop	r0
    6bd4:	00 92 5f 00 	sts	0x005F, r0
    6bd8:	0f 90       	pop	r0
    6bda:	1f 90       	pop	r1
    6bdc:	18 95       	reti

00006bde <__vector_10>:
* Interrupcion timer 1 captura (para medición de periodo)
*****************************************************************************/
/** \brief	Interrupción generada por la captura de un evento en el timer 1.
 */

ISR (TIMER1_CAPT_vect) {
    6bde:	1f 92       	push	r1
    6be0:	0f 92       	push	r0
    6be2:	00 90 5f 00 	lds	r0, 0x005F
    6be6:	0f 92       	push	r0
    6be8:	11 24       	eor	r1, r1
    6bea:	2f 93       	push	r18
    6bec:	3f 93       	push	r19
    6bee:	8f 93       	push	r24
    6bf0:	9f 93       	push	r25
    6bf2:	ef 93       	push	r30
    6bf4:	ff 93       	push	r31
    6bf6:	cf 93       	push	r28
    6bf8:	df 93       	push	r29
    6bfa:	cd b7       	in	r28, 0x3d	; 61
    6bfc:	de b7       	in	r29, 0x3e	; 62
	if (uchEtapaMedicionCaudal == ETAPA_MEDICION_CAPTURA_1){
    6bfe:	80 91 0a 04 	lds	r24, 0x040A
    6c02:	81 30       	cpi	r24, 0x01	; 1
    6c04:	69 f4       	brne	.+26     	; 0x6c20 <__vector_10+0x42>
		uPrimerCaptura = ICR1;
    6c06:	86 e8       	ldi	r24, 0x86	; 134
    6c08:	90 e0       	ldi	r25, 0x00	; 0
    6c0a:	fc 01       	movw	r30, r24
    6c0c:	80 81       	ld	r24, Z
    6c0e:	91 81       	ldd	r25, Z+1	; 0x01
    6c10:	90 93 12 04 	sts	0x0412, r25
    6c14:	80 93 11 04 	sts	0x0411, r24
		uchEtapaMedicionCaudal = ETAPA_MEDICION_CAPTURA_2;
    6c18:	82 e0       	ldi	r24, 0x02	; 2
    6c1a:	80 93 0a 04 	sts	0x040A, r24
    6c1e:	49 c0       	rjmp	.+146    	; 0x6cb2 <__vector_10+0xd4>
	}
	else if (uchEtapaMedicionCaudal == ETAPA_MEDICION_CAPTURA_2){
    6c20:	80 91 0a 04 	lds	r24, 0x040A
    6c24:	82 30       	cpi	r24, 0x02	; 2
    6c26:	41 f5       	brne	.+80     	; 0x6c78 <__vector_10+0x9a>
		TCCR1B &= ~((ON<<CS11)|(ON<<CS10));	/* paro el timer */
    6c28:	81 e8       	ldi	r24, 0x81	; 129
    6c2a:	90 e0       	ldi	r25, 0x00	; 0
    6c2c:	21 e8       	ldi	r18, 0x81	; 129
    6c2e:	30 e0       	ldi	r19, 0x00	; 0
    6c30:	f9 01       	movw	r30, r18
    6c32:	20 81       	ld	r18, Z
    6c34:	2c 7f       	andi	r18, 0xFC	; 252
    6c36:	fc 01       	movw	r30, r24
    6c38:	20 83       	st	Z, r18
		CLEAR_BIT (TIMSK1, ICIE1);			/* deshabilito la interrupción por captura */
    6c3a:	8f e6       	ldi	r24, 0x6F	; 111
    6c3c:	90 e0       	ldi	r25, 0x00	; 0
    6c3e:	2f e6       	ldi	r18, 0x6F	; 111
    6c40:	30 e0       	ldi	r19, 0x00	; 0
    6c42:	f9 01       	movw	r30, r18
    6c44:	20 81       	ld	r18, Z
    6c46:	2f 7d       	andi	r18, 0xDF	; 223
    6c48:	fc 01       	movw	r30, r24
    6c4a:	20 83       	st	Z, r18
		CLEAR_BIT (TIMSK1, TOIE1);			/* deshabilito la interrupción por overflow */
    6c4c:	8f e6       	ldi	r24, 0x6F	; 111
    6c4e:	90 e0       	ldi	r25, 0x00	; 0
    6c50:	2f e6       	ldi	r18, 0x6F	; 111
    6c52:	30 e0       	ldi	r19, 0x00	; 0
    6c54:	f9 01       	movw	r30, r18
    6c56:	20 81       	ld	r18, Z
    6c58:	2e 7f       	andi	r18, 0xFE	; 254
    6c5a:	fc 01       	movw	r30, r24
    6c5c:	20 83       	st	Z, r18
		uSegundaCaptura = ICR1;
    6c5e:	86 e8       	ldi	r24, 0x86	; 134
    6c60:	90 e0       	ldi	r25, 0x00	; 0
    6c62:	fc 01       	movw	r30, r24
    6c64:	80 81       	ld	r24, Z
    6c66:	91 81       	ldd	r25, Z+1	; 0x01
    6c68:	90 93 14 04 	sts	0x0414, r25
    6c6c:	80 93 13 04 	sts	0x0413, r24
		uchEtapaMedicionCaudal = ETAPA_MEDICION_CALCULO;
    6c70:	83 e0       	ldi	r24, 0x03	; 3
    6c72:	80 93 0a 04 	sts	0x040A, r24
    6c76:	1d c0       	rjmp	.+58     	; 0x6cb2 <__vector_10+0xd4>
	}
	else {
		TCCR1B &= ~((ON<<CS11)|(ON<<CS10));	/* paro el timer */
    6c78:	81 e8       	ldi	r24, 0x81	; 129
    6c7a:	90 e0       	ldi	r25, 0x00	; 0
    6c7c:	21 e8       	ldi	r18, 0x81	; 129
    6c7e:	30 e0       	ldi	r19, 0x00	; 0
    6c80:	f9 01       	movw	r30, r18
    6c82:	20 81       	ld	r18, Z
    6c84:	2c 7f       	andi	r18, 0xFC	; 252
    6c86:	fc 01       	movw	r30, r24
    6c88:	20 83       	st	Z, r18
		CLEAR_BIT (TIMSK1, ICIE1);			/* deshabilito la interrupción por captura */
    6c8a:	8f e6       	ldi	r24, 0x6F	; 111
    6c8c:	90 e0       	ldi	r25, 0x00	; 0
    6c8e:	2f e6       	ldi	r18, 0x6F	; 111
    6c90:	30 e0       	ldi	r19, 0x00	; 0
    6c92:	f9 01       	movw	r30, r18
    6c94:	20 81       	ld	r18, Z
    6c96:	2f 7d       	andi	r18, 0xDF	; 223
    6c98:	fc 01       	movw	r30, r24
    6c9a:	20 83       	st	Z, r18
		CLEAR_BIT (TIMSK1, TOIE1);			/* deshabilito la interrupción por overflow */
    6c9c:	8f e6       	ldi	r24, 0x6F	; 111
    6c9e:	90 e0       	ldi	r25, 0x00	; 0
    6ca0:	2f e6       	ldi	r18, 0x6F	; 111
    6ca2:	30 e0       	ldi	r19, 0x00	; 0
    6ca4:	f9 01       	movw	r30, r18
    6ca6:	20 81       	ld	r18, Z
    6ca8:	2e 7f       	andi	r18, 0xFE	; 254
    6caa:	fc 01       	movw	r30, r24
    6cac:	20 83       	st	Z, r18
		uchEtapaMedicionCaudal = ETAPA_MEDICION_STANDBY;
    6cae:	10 92 0a 04 	sts	0x040A, r1
	}
}
    6cb2:	df 91       	pop	r29
    6cb4:	cf 91       	pop	r28
    6cb6:	ff 91       	pop	r31
    6cb8:	ef 91       	pop	r30
    6cba:	9f 91       	pop	r25
    6cbc:	8f 91       	pop	r24
    6cbe:	3f 91       	pop	r19
    6cc0:	2f 91       	pop	r18
    6cc2:	0f 90       	pop	r0
    6cc4:	00 92 5f 00 	sts	0x005F, r0
    6cc8:	0f 90       	pop	r0
    6cca:	1f 90       	pop	r1
    6ccc:	18 95       	reti

00006cce <__vector_13>:
* Interrupcion timer 1 overflow (para medición de periodo)
*****************************************************************************/
/** \brief	Interrupción externa proveniente del overflow del timer 1 al medir eventos.
 */

ISR (TIMER1_OVF_vect) {
    6cce:	1f 92       	push	r1
    6cd0:	0f 92       	push	r0
    6cd2:	00 90 5f 00 	lds	r0, 0x005F
    6cd6:	0f 92       	push	r0
    6cd8:	11 24       	eor	r1, r1
    6cda:	2f 93       	push	r18
    6cdc:	3f 93       	push	r19
    6cde:	8f 93       	push	r24
    6ce0:	9f 93       	push	r25
    6ce2:	ef 93       	push	r30
    6ce4:	ff 93       	push	r31
    6ce6:	cf 93       	push	r28
    6ce8:	df 93       	push	r29
    6cea:	cd b7       	in	r28, 0x3d	; 61
    6cec:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~((ON<<CS11)|(ON<<CS10));	/* paro el timer */
    6cee:	81 e8       	ldi	r24, 0x81	; 129
    6cf0:	90 e0       	ldi	r25, 0x00	; 0
    6cf2:	21 e8       	ldi	r18, 0x81	; 129
    6cf4:	30 e0       	ldi	r19, 0x00	; 0
    6cf6:	f9 01       	movw	r30, r18
    6cf8:	20 81       	ld	r18, Z
    6cfa:	2c 7f       	andi	r18, 0xFC	; 252
    6cfc:	fc 01       	movw	r30, r24
    6cfe:	20 83       	st	Z, r18
	CLEAR_BIT (TIMSK1, ICIE1);			/* deshabilito la interrupción por captura */
    6d00:	8f e6       	ldi	r24, 0x6F	; 111
    6d02:	90 e0       	ldi	r25, 0x00	; 0
    6d04:	2f e6       	ldi	r18, 0x6F	; 111
    6d06:	30 e0       	ldi	r19, 0x00	; 0
    6d08:	f9 01       	movw	r30, r18
    6d0a:	20 81       	ld	r18, Z
    6d0c:	2f 7d       	andi	r18, 0xDF	; 223
    6d0e:	fc 01       	movw	r30, r24
    6d10:	20 83       	st	Z, r18
	CLEAR_BIT (TIMSK1, TOIE1);			/* deshabilito la interrupción por overflow */
    6d12:	8f e6       	ldi	r24, 0x6F	; 111
    6d14:	90 e0       	ldi	r25, 0x00	; 0
    6d16:	2f e6       	ldi	r18, 0x6F	; 111
    6d18:	30 e0       	ldi	r19, 0x00	; 0
    6d1a:	f9 01       	movw	r30, r18
    6d1c:	20 81       	ld	r18, Z
    6d1e:	2e 7f       	andi	r18, 0xFE	; 254
    6d20:	fc 01       	movw	r30, r24
    6d22:	20 83       	st	Z, r18
	uchEtapaMedicionCaudal = ETAPA_MEDICION_OVERFLOW;
    6d24:	84 e0       	ldi	r24, 0x04	; 4
    6d26:	80 93 0a 04 	sts	0x040A, r24
}
    6d2a:	df 91       	pop	r29
    6d2c:	cf 91       	pop	r28
    6d2e:	ff 91       	pop	r31
    6d30:	ef 91       	pop	r30
    6d32:	9f 91       	pop	r25
    6d34:	8f 91       	pop	r24
    6d36:	3f 91       	pop	r19
    6d38:	2f 91       	pop	r18
    6d3a:	0f 90       	pop	r0
    6d3c:	00 92 5f 00 	sts	0x005F, r0
    6d40:	0f 90       	pop	r0
    6d42:	1f 90       	pop	r1
    6d44:	18 95       	reti

00006d46 <__vector_default>:
 *	En caso de alguna falla en el codigo y se activa una interrupción no deseada, o sea \n
 *	que no tiene su vector con su rutina asociada, cae en este vector por defecto que no \n
 *	hace nada.
 */

ISR (__vector_default) {
    6d46:	1f 92       	push	r1
    6d48:	0f 92       	push	r0
    6d4a:	00 90 5f 00 	lds	r0, 0x005F
    6d4e:	0f 92       	push	r0
    6d50:	11 24       	eor	r1, r1
    6d52:	cf 93       	push	r28
    6d54:	df 93       	push	r29
    6d56:	cd b7       	in	r28, 0x3d	; 61
    6d58:	de b7       	in	r29, 0x3e	; 62
}
    6d5a:	df 91       	pop	r29
    6d5c:	cf 91       	pop	r28
    6d5e:	0f 90       	pop	r0
    6d60:	00 92 5f 00 	sts	0x005F, r0
    6d64:	0f 90       	pop	r0
    6d66:	1f 90       	pop	r1
    6d68:	18 95       	reti

00006d6a <Max6675_Get_Temp>:
volatile unsigned int	uContMax6675;

/*****************************************************************************
* Maquina de estados
*****************************************************************************/
void Max6675_Get_Temp (void) {
    6d6a:	cf 93       	push	r28
    6d6c:	df 93       	push	r29
    6d6e:	00 d0       	rcall	.+0      	; 0x6d70 <Max6675_Get_Temp+0x6>
    6d70:	00 d0       	rcall	.+0      	; 0x6d72 <Max6675_Get_Temp+0x8>
    6d72:	cd b7       	in	r28, 0x3d	; 61
    6d74:	de b7       	in	r29, 0x3e	; 62
	switch (uchEstadoSensorTemp) {
    6d76:	80 91 89 04 	lds	r24, 0x0489
    6d7a:	88 2f       	mov	r24, r24
    6d7c:	90 e0       	ldi	r25, 0x00	; 0
    6d7e:	00 97       	sbiw	r24, 0x00	; 0
    6d80:	19 f0       	breq	.+6      	; 0x6d88 <Max6675_Get_Temp+0x1e>
    6d82:	01 97       	sbiw	r24, 0x01	; 1
    6d84:	81 f1       	breq	.+96     	; 0x6de6 <Max6675_Get_Temp+0x7c>
    6d86:	c0 c0       	rjmp	.+384    	; 0x6f08 <Max6675_Get_Temp+0x19e>
		case MAX6675_TX_RX:
			if(uContMax6675==0){
    6d88:	80 91 85 04 	lds	r24, 0x0485
    6d8c:	90 91 86 04 	lds	r25, 0x0486
    6d90:	89 2b       	or	r24, r25
    6d92:	41 f5       	brne	.+80     	; 0x6de4 <Max6675_Get_Temp+0x7a>
				// habilito el cs
				CLEAR_BIT(TEMP_AGUA_PORT,TEMP_AGUA_PIN);
    6d94:	85 e2       	ldi	r24, 0x25	; 37
    6d96:	90 e0       	ldi	r25, 0x00	; 0
    6d98:	25 e2       	ldi	r18, 0x25	; 37
    6d9a:	30 e0       	ldi	r19, 0x00	; 0
    6d9c:	f9 01       	movw	r30, r18
    6d9e:	20 81       	ld	r18, Z
    6da0:	2b 7f       	andi	r18, 0xFB	; 251
    6da2:	fc 01       	movw	r30, r24
    6da4:	20 83       	st	Z, r18

				auxHighBite = Spi_Max6675_TxRx(0x00);
    6da6:	80 e0       	ldi	r24, 0x00	; 0
    6da8:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <Spi_Max6675_TxRx>
    6dac:	88 2f       	mov	r24, r24
    6dae:	90 e0       	ldi	r25, 0x00	; 0
    6db0:	90 93 88 04 	sts	0x0488, r25
    6db4:	80 93 87 04 	sts	0x0487, r24
				auxLowBite = Spi_Max6675_TxRx(0x00);
    6db8:	80 e0       	ldi	r24, 0x00	; 0
    6dba:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <Spi_Max6675_TxRx>
    6dbe:	88 2f       	mov	r24, r24
    6dc0:	90 e0       	ldi	r25, 0x00	; 0
    6dc2:	90 93 84 04 	sts	0x0484, r25
    6dc6:	80 93 83 04 	sts	0x0483, r24

				// deshabilito el cs para que realize una nueva conversion
				SET_BIT(TEMP_AGUA_PORT,TEMP_AGUA_PIN);
    6dca:	85 e2       	ldi	r24, 0x25	; 37
    6dcc:	90 e0       	ldi	r25, 0x00	; 0
    6dce:	25 e2       	ldi	r18, 0x25	; 37
    6dd0:	30 e0       	ldi	r19, 0x00	; 0
    6dd2:	f9 01       	movw	r30, r18
    6dd4:	20 81       	ld	r18, Z
    6dd6:	24 60       	ori	r18, 0x04	; 4
    6dd8:	fc 01       	movw	r30, r24
    6dda:	20 83       	st	Z, r18

				uchEstadoSensorTemp=MAX6675_CALC_TEMP;
    6ddc:	81 e0       	ldi	r24, 0x01	; 1
    6dde:	80 93 89 04 	sts	0x0489, r24
			}
			break;
    6de2:	95 c0       	rjmp	.+298    	; 0x6f0e <Max6675_Get_Temp+0x1a4>
    6de4:	94 c0       	rjmp	.+296    	; 0x6f0e <Max6675_Get_Temp+0x1a4>

		case MAX6675_CALC_TEMP:
			auxHighBite = (auxHighBite << 5);
    6de6:	80 91 87 04 	lds	r24, 0x0487
    6dea:	90 91 88 04 	lds	r25, 0x0488
    6dee:	88 0f       	add	r24, r24
    6df0:	99 1f       	adc	r25, r25
    6df2:	82 95       	swap	r24
    6df4:	92 95       	swap	r25
    6df6:	90 7f       	andi	r25, 0xF0	; 240
    6df8:	98 27       	eor	r25, r24
    6dfa:	80 7f       	andi	r24, 0xF0	; 240
    6dfc:	98 27       	eor	r25, r24
    6dfe:	90 93 88 04 	sts	0x0488, r25
    6e02:	80 93 87 04 	sts	0x0487, r24
			auxHighBite &= (auxLowBite >> 3);
    6e06:	80 91 83 04 	lds	r24, 0x0483
    6e0a:	90 91 84 04 	lds	r25, 0x0484
    6e0e:	9c 01       	movw	r18, r24
    6e10:	35 95       	asr	r19
    6e12:	27 95       	ror	r18
    6e14:	35 95       	asr	r19
    6e16:	27 95       	ror	r18
    6e18:	35 95       	asr	r19
    6e1a:	27 95       	ror	r18
    6e1c:	80 91 87 04 	lds	r24, 0x0487
    6e20:	90 91 88 04 	lds	r25, 0x0488
    6e24:	82 23       	and	r24, r18
    6e26:	93 23       	and	r25, r19
    6e28:	90 93 88 04 	sts	0x0488, r25
    6e2c:	80 93 87 04 	sts	0x0487, r24
			float flTemp = (float)auxHighBite * 0.25;
    6e30:	80 91 87 04 	lds	r24, 0x0487
    6e34:	90 91 88 04 	lds	r25, 0x0488
    6e38:	09 2e       	mov	r0, r25
    6e3a:	00 0c       	add	r0, r0
    6e3c:	aa 0b       	sbc	r26, r26
    6e3e:	bb 0b       	sbc	r27, r27
    6e40:	bc 01       	movw	r22, r24
    6e42:	cd 01       	movw	r24, r26
    6e44:	0e 94 83 57 	call	0xaf06	; 0xaf06 <__floatsisf>
    6e48:	dc 01       	movw	r26, r24
    6e4a:	cb 01       	movw	r24, r22
    6e4c:	20 e0       	ldi	r18, 0x00	; 0
    6e4e:	30 e0       	ldi	r19, 0x00	; 0
    6e50:	40 e8       	ldi	r20, 0x80	; 128
    6e52:	5e e3       	ldi	r21, 0x3E	; 62
    6e54:	bc 01       	movw	r22, r24
    6e56:	cd 01       	movw	r24, r26
    6e58:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    6e5c:	dc 01       	movw	r26, r24
    6e5e:	cb 01       	movw	r24, r22
    6e60:	89 83       	std	Y+1, r24	; 0x01
    6e62:	9a 83       	std	Y+2, r25	; 0x02
    6e64:	ab 83       	std	Y+3, r26	; 0x03
    6e66:	bc 83       	std	Y+4, r27	; 0x04

			if (abs(flTemp/flTempMedida-1.0)<MAX_VAR_TEMP_NORMAL){
    6e68:	80 91 7f 04 	lds	r24, 0x047F
    6e6c:	90 91 80 04 	lds	r25, 0x0480
    6e70:	a0 91 81 04 	lds	r26, 0x0481
    6e74:	b0 91 82 04 	lds	r27, 0x0482
    6e78:	9c 01       	movw	r18, r24
    6e7a:	ad 01       	movw	r20, r26
    6e7c:	69 81       	ldd	r22, Y+1	; 0x01
    6e7e:	7a 81       	ldd	r23, Y+2	; 0x02
    6e80:	8b 81       	ldd	r24, Y+3	; 0x03
    6e82:	9c 81       	ldd	r25, Y+4	; 0x04
    6e84:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    6e88:	dc 01       	movw	r26, r24
    6e8a:	cb 01       	movw	r24, r22
    6e8c:	20 e0       	ldi	r18, 0x00	; 0
    6e8e:	30 e0       	ldi	r19, 0x00	; 0
    6e90:	40 e8       	ldi	r20, 0x80	; 128
    6e92:	5f e3       	ldi	r21, 0x3F	; 63
    6e94:	bc 01       	movw	r22, r24
    6e96:	cd 01       	movw	r24, r26
    6e98:	0e 94 67 56 	call	0xacce	; 0xacce <__subsf3>
    6e9c:	dc 01       	movw	r26, r24
    6e9e:	cb 01       	movw	r24, r22
    6ea0:	bc 01       	movw	r22, r24
    6ea2:	cd 01       	movw	r24, r26
    6ea4:	0e 94 4b 57 	call	0xae96	; 0xae96 <__fixsfsi>
    6ea8:	dc 01       	movw	r26, r24
    6eaa:	cb 01       	movw	r24, r22
    6eac:	99 23       	and	r25, r25
    6eae:	1c f4       	brge	.+6      	; 0x6eb6 <Max6675_Get_Temp+0x14c>
    6eb0:	91 95       	neg	r25
    6eb2:	81 95       	neg	r24
    6eb4:	91 09       	sbc	r25, r1
    6eb6:	09 2e       	mov	r0, r25
    6eb8:	00 0c       	add	r0, r0
    6eba:	aa 0b       	sbc	r26, r26
    6ebc:	bb 0b       	sbc	r27, r27
    6ebe:	bc 01       	movw	r22, r24
    6ec0:	cd 01       	movw	r24, r26
    6ec2:	0e 94 83 57 	call	0xaf06	; 0xaf06 <__floatsisf>
    6ec6:	dc 01       	movw	r26, r24
    6ec8:	cb 01       	movw	r24, r22
    6eca:	20 e0       	ldi	r18, 0x00	; 0
    6ecc:	30 e0       	ldi	r19, 0x00	; 0
    6ece:	40 e0       	ldi	r20, 0x00	; 0
    6ed0:	5f e3       	ldi	r21, 0x3F	; 63
    6ed2:	bc 01       	movw	r22, r24
    6ed4:	cd 01       	movw	r24, r26
    6ed6:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    6eda:	88 23       	and	r24, r24
    6edc:	64 f4       	brge	.+24     	; 0x6ef6 <Max6675_Get_Temp+0x18c>
				flTempMedida=flTemp;
    6ede:	89 81       	ldd	r24, Y+1	; 0x01
    6ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    6ee2:	ab 81       	ldd	r26, Y+3	; 0x03
    6ee4:	bc 81       	ldd	r27, Y+4	; 0x04
    6ee6:	80 93 7f 04 	sts	0x047F, r24
    6eea:	90 93 80 04 	sts	0x0480, r25
    6eee:	a0 93 81 04 	sts	0x0481, r26
    6ef2:	b0 93 82 04 	sts	0x0482, r27
			}

			uContMax6675 = PERIODO_MEDICION_MAX6675;
    6ef6:	8a ef       	ldi	r24, 0xFA	; 250
    6ef8:	90 e0       	ldi	r25, 0x00	; 0
    6efa:	90 93 86 04 	sts	0x0486, r25
    6efe:	80 93 85 04 	sts	0x0485, r24
			uchEstadoSensorTemp = MAX6675_TX_RX;
    6f02:	10 92 89 04 	sts	0x0489, r1
			break;
    6f06:	03 c0       	rjmp	.+6      	; 0x6f0e <Max6675_Get_Temp+0x1a4>

		default:
			Spi_Max6675_Inicio();
    6f08:	0e 94 8e 37 	call	0x6f1c	; 0x6f1c <Spi_Max6675_Inicio>
			break;
    6f0c:	00 00       	nop
	}
}
    6f0e:	0f 90       	pop	r0
    6f10:	0f 90       	pop	r0
    6f12:	0f 90       	pop	r0
    6f14:	0f 90       	pop	r0
    6f16:	df 91       	pop	r29
    6f18:	cf 91       	pop	r28
    6f1a:	08 95       	ret

00006f1c <Spi_Max6675_Inicio>:

/*****************************************************************************
* spi_max6675_init
*****************************************************************************/
void Spi_Max6675_Inicio(void) {
    6f1c:	cf 93       	push	r28
    6f1e:	df 93       	push	r29
    6f20:	cd b7       	in	r28, 0x3d	; 61
    6f22:	de b7       	in	r29, 0x3e	; 62
	// aseguro que no este dehabilitado por ahorro de consumo
	CLEAR_BIT(PRR,PRSPI);
    6f24:	84 e6       	ldi	r24, 0x64	; 100
    6f26:	90 e0       	ldi	r25, 0x00	; 0
    6f28:	24 e6       	ldi	r18, 0x64	; 100
    6f2a:	30 e0       	ldi	r19, 0x00	; 0
    6f2c:	f9 01       	movw	r30, r18
    6f2e:	20 81       	ld	r18, Z
    6f30:	2b 7f       	andi	r18, 0xFB	; 251
    6f32:	fc 01       	movw	r30, r24
    6f34:	20 83       	st	Z, r18
	// Enable SPI, Master, set clock rate fck/128
	SPCR = (OFF<<SPIE)|(ON<<SPE)|(OFF<<DORD)|(ON<<MSTR)|(OFF<<CPOL)|(ON<<CPHA)|(ON<<SPR1)|(ON<<SPR0);
    6f36:	8c e4       	ldi	r24, 0x4C	; 76
    6f38:	90 e0       	ldi	r25, 0x00	; 0
    6f3a:	27 e5       	ldi	r18, 0x57	; 87
    6f3c:	fc 01       	movw	r30, r24
    6f3e:	20 83       	st	Z, r18
	// subo el cs para que realize una conversion
	SET_BIT(TEMP_AGUA_PORT,TEMP_AGUA_PIN);
    6f40:	85 e2       	ldi	r24, 0x25	; 37
    6f42:	90 e0       	ldi	r25, 0x00	; 0
    6f44:	25 e2       	ldi	r18, 0x25	; 37
    6f46:	30 e0       	ldi	r19, 0x00	; 0
    6f48:	f9 01       	movw	r30, r18
    6f4a:	20 81       	ld	r18, Z
    6f4c:	24 60       	ori	r18, 0x04	; 4
    6f4e:	fc 01       	movw	r30, r24
    6f50:	20 83       	st	Z, r18

	uContMax6675=PERIODO_MEDICION_MAX6675;
    6f52:	8a ef       	ldi	r24, 0xFA	; 250
    6f54:	90 e0       	ldi	r25, 0x00	; 0
    6f56:	90 93 86 04 	sts	0x0486, r25
    6f5a:	80 93 85 04 	sts	0x0485, r24
	uchEstadoSensorTemp = MAX6675_TX_RX;
    6f5e:	10 92 89 04 	sts	0x0489, r1
}
    6f62:	df 91       	pop	r29
    6f64:	cf 91       	pop	r28
    6f66:	08 95       	ret

00006f68 <Spi_Max6675_TxRx>:

/*****************************************************************************
* spi_max6675_TxRx
*****************************************************************************/
char Spi_Max6675_TxRx(char dataTx) {
    6f68:	cf 93       	push	r28
    6f6a:	df 93       	push	r29
    6f6c:	00 d0       	rcall	.+0      	; 0x6f6e <Spi_Max6675_TxRx+0x6>
    6f6e:	cd b7       	in	r28, 0x3d	; 61
    6f70:	de b7       	in	r29, 0x3e	; 62
    6f72:	8a 83       	std	Y+2, r24	; 0x02
	// leo el flag SPIF para que se limpie
	char dummy = SPSR;
    6f74:	8d e4       	ldi	r24, 0x4D	; 77
    6f76:	90 e0       	ldi	r25, 0x00	; 0
    6f78:	fc 01       	movw	r30, r24
    6f7a:	80 81       	ld	r24, Z
    6f7c:	89 83       	std	Y+1, r24	; 0x01
	// Start transmission
	SPDR = dataTx;
    6f7e:	8e e4       	ldi	r24, 0x4E	; 78
    6f80:	90 e0       	ldi	r25, 0x00	; 0
    6f82:	2a 81       	ldd	r18, Y+2	; 0x02
    6f84:	fc 01       	movw	r30, r24
    6f86:	20 83       	st	Z, r18
	// Wait for transmission complete
	while(!(SPSR & (ON<<SPIF)));
    6f88:	00 00       	nop
    6f8a:	8d e4       	ldi	r24, 0x4D	; 77
    6f8c:	90 e0       	ldi	r25, 0x00	; 0
    6f8e:	fc 01       	movw	r30, r24
    6f90:	80 81       	ld	r24, Z
    6f92:	88 23       	and	r24, r24
    6f94:	d4 f7       	brge	.-12     	; 0x6f8a <Spi_Max6675_TxRx+0x22>
	// devuelvo el valor recivido
	return SPDR;
    6f96:	8e e4       	ldi	r24, 0x4E	; 78
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	fc 01       	movw	r30, r24
    6f9c:	80 81       	ld	r24, Z
}
    6f9e:	0f 90       	pop	r0
    6fa0:	0f 90       	pop	r0
    6fa2:	df 91       	pop	r29
    6fa4:	cf 91       	pop	r28
    6fa6:	08 95       	ret

00006fa8 <Rotar_Motor_PP>:
*****************************************************************************/

/*****************************************************************************
* Maquina de estados
*****************************************************************************/
void Rotar_Motor_PP (void) {
    6fa8:	cf 93       	push	r28
    6faa:	df 93       	push	r29
    6fac:	cd b7       	in	r28, 0x3d	; 61
    6fae:	de b7       	in	r29, 0x3e	; 62
	switch (uchEstadoMotorPP) {
    6fb0:	80 91 91 04 	lds	r24, 0x0491
    6fb4:	88 2f       	mov	r24, r24
    6fb6:	90 e0       	ldi	r25, 0x00	; 0
    6fb8:	81 30       	cpi	r24, 0x01	; 1
    6fba:	91 05       	cpc	r25, r1
    6fbc:	21 f0       	breq	.+8      	; 0x6fc6 <Rotar_Motor_PP+0x1e>
    6fbe:	02 97       	sbiw	r24, 0x02	; 2
    6fc0:	09 f4       	brne	.+2      	; 0x6fc4 <Rotar_Motor_PP+0x1c>
    6fc2:	4f c1       	rjmp	.+670    	; 0x7262 <Rotar_Motor_PP+0x2ba>
    6fc4:	05 c2       	rjmp	.+1034   	; 0x73d0 <Rotar_Motor_PP+0x428>
		case MOTOR_PP_STANDBY:
			if (uContMotorPP == 0){
    6fc6:	80 91 8f 04 	lds	r24, 0x048F
    6fca:	90 91 90 04 	lds	r25, 0x0490
    6fce:	89 2b       	or	r24, r25
    6fd0:	09 f0       	breq	.+2      	; 0x6fd4 <Rotar_Motor_PP+0x2c>
    6fd2:	46 c1       	rjmp	.+652    	; 0x7260 <Rotar_Motor_PP+0x2b8>
				if ((stepToRotate > 0) && (relativePositionBySteps < MAX_MOTOR_PP_ACUMULADOS)){
    6fd4:	80 91 92 04 	lds	r24, 0x0492
    6fd8:	90 91 93 04 	lds	r25, 0x0493
    6fdc:	18 16       	cp	r1, r24
    6fde:	19 06       	cpc	r1, r25
    6fe0:	0c f0       	brlt	.+2      	; 0x6fe4 <Rotar_Motor_PP+0x3c>
    6fe2:	78 c0       	rjmp	.+240    	; 0x70d4 <Rotar_Motor_PP+0x12c>
    6fe4:	80 91 8c 04 	lds	r24, 0x048C
    6fe8:	90 91 8d 04 	lds	r25, 0x048D
    6fec:	88 3c       	cpi	r24, 0xC8	; 200
    6fee:	91 05       	cpc	r25, r1
    6ff0:	0c f0       	brlt	.+2      	; 0x6ff4 <Rotar_Motor_PP+0x4c>
    6ff2:	70 c0       	rjmp	.+224    	; 0x70d4 <Rotar_Motor_PP+0x12c>
					switch (stateMotorPP) { //1->3->2->4->1
    6ff4:	80 91 8a 04 	lds	r24, 0x048A
    6ff8:	90 91 8b 04 	lds	r25, 0x048B
    6ffc:	82 30       	cpi	r24, 0x02	; 2
    6ffe:	91 05       	cpc	r25, r1
    7000:	19 f1       	breq	.+70     	; 0x7048 <Rotar_Motor_PP+0xa0>
    7002:	83 30       	cpi	r24, 0x03	; 3
    7004:	91 05       	cpc	r25, r1
    7006:	1c f4       	brge	.+6      	; 0x700e <Rotar_Motor_PP+0x66>
    7008:	01 97       	sbiw	r24, 0x01	; 1
    700a:	41 f0       	breq	.+16     	; 0x701c <Rotar_Motor_PP+0x74>
    700c:	5f c0       	rjmp	.+190    	; 0x70cc <Rotar_Motor_PP+0x124>
    700e:	83 30       	cpi	r24, 0x03	; 3
    7010:	91 05       	cpc	r25, r1
    7012:	81 f1       	breq	.+96     	; 0x7074 <Rotar_Motor_PP+0xcc>
    7014:	04 97       	sbiw	r24, 0x04	; 4
    7016:	09 f4       	brne	.+2      	; 0x701a <Rotar_Motor_PP+0x72>
    7018:	43 c0       	rjmp	.+134    	; 0x70a0 <Rotar_Motor_PP+0xf8>
    701a:	58 c0       	rjmp	.+176    	; 0x70cc <Rotar_Motor_PP+0x124>
						case STATE_MOTOR_1:
							relativePositionBySteps++;
    701c:	80 91 8c 04 	lds	r24, 0x048C
    7020:	90 91 8d 04 	lds	r25, 0x048D
    7024:	01 96       	adiw	r24, 0x01	; 1
    7026:	90 93 8d 04 	sts	0x048D, r25
    702a:	80 93 8c 04 	sts	0x048C, r24
							stepToRotate--;
    702e:	80 91 92 04 	lds	r24, 0x0492
    7032:	90 91 93 04 	lds	r25, 0x0493
    7036:	01 97       	sbiw	r24, 0x01	; 1
    7038:	90 93 93 04 	sts	0x0493, r25
    703c:	80 93 92 04 	sts	0x0492, r24
							uchEstadoRotar = MOTOR_PP_ROTAR_STEP_3;
    7040:	86 e3       	ldi	r24, 0x36	; 54
    7042:	80 93 8e 04 	sts	0x048E, r24
							break;
    7046:	42 c0       	rjmp	.+132    	; 0x70cc <Rotar_Motor_PP+0x124>

						case STATE_MOTOR_2:
							relativePositionBySteps++;
    7048:	80 91 8c 04 	lds	r24, 0x048C
    704c:	90 91 8d 04 	lds	r25, 0x048D
    7050:	01 96       	adiw	r24, 0x01	; 1
    7052:	90 93 8d 04 	sts	0x048D, r25
    7056:	80 93 8c 04 	sts	0x048C, r24
							stepToRotate--;
    705a:	80 91 92 04 	lds	r24, 0x0492
    705e:	90 91 93 04 	lds	r25, 0x0493
    7062:	01 97       	sbiw	r24, 0x01	; 1
    7064:	90 93 93 04 	sts	0x0493, r25
    7068:	80 93 92 04 	sts	0x0492, r24
							uchEstadoRotar = MOTOR_PP_ROTAR_STEP_4;
    706c:	88 e3       	ldi	r24, 0x38	; 56
    706e:	80 93 8e 04 	sts	0x048E, r24
							break;
    7072:	2c c0       	rjmp	.+88     	; 0x70cc <Rotar_Motor_PP+0x124>

						case STATE_MOTOR_3:
							relativePositionBySteps++;
    7074:	80 91 8c 04 	lds	r24, 0x048C
    7078:	90 91 8d 04 	lds	r25, 0x048D
    707c:	01 96       	adiw	r24, 0x01	; 1
    707e:	90 93 8d 04 	sts	0x048D, r25
    7082:	80 93 8c 04 	sts	0x048C, r24
							stepToRotate--;
    7086:	80 91 92 04 	lds	r24, 0x0492
    708a:	90 91 93 04 	lds	r25, 0x0493
    708e:	01 97       	sbiw	r24, 0x01	; 1
    7090:	90 93 93 04 	sts	0x0493, r25
    7094:	80 93 92 04 	sts	0x0492, r24
							uchEstadoRotar = MOTOR_PP_ROTAR_STEP_2;
    7098:	84 e3       	ldi	r24, 0x34	; 52
    709a:	80 93 8e 04 	sts	0x048E, r24
							break;
    709e:	16 c0       	rjmp	.+44     	; 0x70cc <Rotar_Motor_PP+0x124>

						case STATE_MOTOR_4:
							relativePositionBySteps++;
    70a0:	80 91 8c 04 	lds	r24, 0x048C
    70a4:	90 91 8d 04 	lds	r25, 0x048D
    70a8:	01 96       	adiw	r24, 0x01	; 1
    70aa:	90 93 8d 04 	sts	0x048D, r25
    70ae:	80 93 8c 04 	sts	0x048C, r24
							stepToRotate--;
    70b2:	80 91 92 04 	lds	r24, 0x0492
    70b6:	90 91 93 04 	lds	r25, 0x0493
    70ba:	01 97       	sbiw	r24, 0x01	; 1
    70bc:	90 93 93 04 	sts	0x0493, r25
    70c0:	80 93 92 04 	sts	0x0492, r24
							uchEstadoRotar = MOTOR_PP_ROTAR_STEP_1;
    70c4:	82 e3       	ldi	r24, 0x32	; 50
    70c6:	80 93 8e 04 	sts	0x048E, r24
							break;
    70ca:	00 00       	nop
					}
					uchEstadoMotorPP = MOTOR_PP_ROTAR;
    70cc:	82 e0       	ldi	r24, 0x02	; 2
    70ce:	80 93 91 04 	sts	0x0491, r24
    70d2:	c6 c0       	rjmp	.+396    	; 0x7260 <Rotar_Motor_PP+0x2b8>
				}
				else if ((stepToRotate < 0) && (relativePositionBySteps > MIN_MOTOR_PP_ACUMULADOS)){
    70d4:	80 91 92 04 	lds	r24, 0x0492
    70d8:	90 91 93 04 	lds	r25, 0x0493
    70dc:	99 23       	and	r25, r25
    70de:	0c f0       	brlt	.+2      	; 0x70e2 <Rotar_Motor_PP+0x13a>
    70e0:	77 c0       	rjmp	.+238    	; 0x71d0 <Rotar_Motor_PP+0x228>
    70e2:	80 91 8c 04 	lds	r24, 0x048C
    70e6:	90 91 8d 04 	lds	r25, 0x048D
    70ea:	41 97       	sbiw	r24, 0x11	; 17
    70ec:	0c f4       	brge	.+2      	; 0x70f0 <Rotar_Motor_PP+0x148>
    70ee:	70 c0       	rjmp	.+224    	; 0x71d0 <Rotar_Motor_PP+0x228>
					switch (stateMotorPP) { //1->4->2->3->1
    70f0:	80 91 8a 04 	lds	r24, 0x048A
    70f4:	90 91 8b 04 	lds	r25, 0x048B
    70f8:	82 30       	cpi	r24, 0x02	; 2
    70fa:	91 05       	cpc	r25, r1
    70fc:	19 f1       	breq	.+70     	; 0x7144 <Rotar_Motor_PP+0x19c>
    70fe:	83 30       	cpi	r24, 0x03	; 3
    7100:	91 05       	cpc	r25, r1
    7102:	1c f4       	brge	.+6      	; 0x710a <Rotar_Motor_PP+0x162>
    7104:	01 97       	sbiw	r24, 0x01	; 1
    7106:	41 f0       	breq	.+16     	; 0x7118 <Rotar_Motor_PP+0x170>
    7108:	5f c0       	rjmp	.+190    	; 0x71c8 <Rotar_Motor_PP+0x220>
    710a:	83 30       	cpi	r24, 0x03	; 3
    710c:	91 05       	cpc	r25, r1
    710e:	81 f1       	breq	.+96     	; 0x7170 <Rotar_Motor_PP+0x1c8>
    7110:	04 97       	sbiw	r24, 0x04	; 4
    7112:	09 f4       	brne	.+2      	; 0x7116 <Rotar_Motor_PP+0x16e>
    7114:	43 c0       	rjmp	.+134    	; 0x719c <Rotar_Motor_PP+0x1f4>
    7116:	58 c0       	rjmp	.+176    	; 0x71c8 <Rotar_Motor_PP+0x220>
						case STATE_MOTOR_1:
							relativePositionBySteps--;
    7118:	80 91 8c 04 	lds	r24, 0x048C
    711c:	90 91 8d 04 	lds	r25, 0x048D
    7120:	01 97       	sbiw	r24, 0x01	; 1
    7122:	90 93 8d 04 	sts	0x048D, r25
    7126:	80 93 8c 04 	sts	0x048C, r24
							stepToRotate++;
    712a:	80 91 92 04 	lds	r24, 0x0492
    712e:	90 91 93 04 	lds	r25, 0x0493
    7132:	01 96       	adiw	r24, 0x01	; 1
    7134:	90 93 93 04 	sts	0x0493, r25
    7138:	80 93 92 04 	sts	0x0492, r24
							uchEstadoRotar = MOTOR_PP_ROTAR_STEP_4;
    713c:	88 e3       	ldi	r24, 0x38	; 56
    713e:	80 93 8e 04 	sts	0x048E, r24
							break;
    7142:	42 c0       	rjmp	.+132    	; 0x71c8 <Rotar_Motor_PP+0x220>

						case STATE_MOTOR_2:
							relativePositionBySteps--;
    7144:	80 91 8c 04 	lds	r24, 0x048C
    7148:	90 91 8d 04 	lds	r25, 0x048D
    714c:	01 97       	sbiw	r24, 0x01	; 1
    714e:	90 93 8d 04 	sts	0x048D, r25
    7152:	80 93 8c 04 	sts	0x048C, r24
							stepToRotate++;
    7156:	80 91 92 04 	lds	r24, 0x0492
    715a:	90 91 93 04 	lds	r25, 0x0493
    715e:	01 96       	adiw	r24, 0x01	; 1
    7160:	90 93 93 04 	sts	0x0493, r25
    7164:	80 93 92 04 	sts	0x0492, r24
							uchEstadoRotar = MOTOR_PP_ROTAR_STEP_3;
    7168:	86 e3       	ldi	r24, 0x36	; 54
    716a:	80 93 8e 04 	sts	0x048E, r24
							break;
    716e:	2c c0       	rjmp	.+88     	; 0x71c8 <Rotar_Motor_PP+0x220>

						case STATE_MOTOR_3:
							relativePositionBySteps--;
    7170:	80 91 8c 04 	lds	r24, 0x048C
    7174:	90 91 8d 04 	lds	r25, 0x048D
    7178:	01 97       	sbiw	r24, 0x01	; 1
    717a:	90 93 8d 04 	sts	0x048D, r25
    717e:	80 93 8c 04 	sts	0x048C, r24
							stepToRotate++;
    7182:	80 91 92 04 	lds	r24, 0x0492
    7186:	90 91 93 04 	lds	r25, 0x0493
    718a:	01 96       	adiw	r24, 0x01	; 1
    718c:	90 93 93 04 	sts	0x0493, r25
    7190:	80 93 92 04 	sts	0x0492, r24
							uchEstadoRotar = MOTOR_PP_ROTAR_STEP_1;
    7194:	82 e3       	ldi	r24, 0x32	; 50
    7196:	80 93 8e 04 	sts	0x048E, r24
							break;
    719a:	16 c0       	rjmp	.+44     	; 0x71c8 <Rotar_Motor_PP+0x220>

						case STATE_MOTOR_4:
							relativePositionBySteps--;
    719c:	80 91 8c 04 	lds	r24, 0x048C
    71a0:	90 91 8d 04 	lds	r25, 0x048D
    71a4:	01 97       	sbiw	r24, 0x01	; 1
    71a6:	90 93 8d 04 	sts	0x048D, r25
    71aa:	80 93 8c 04 	sts	0x048C, r24
							stepToRotate++;
    71ae:	80 91 92 04 	lds	r24, 0x0492
    71b2:	90 91 93 04 	lds	r25, 0x0493
    71b6:	01 96       	adiw	r24, 0x01	; 1
    71b8:	90 93 93 04 	sts	0x0493, r25
    71bc:	80 93 92 04 	sts	0x0492, r24
							uchEstadoRotar = MOTOR_PP_ROTAR_STEP_2;
    71c0:	84 e3       	ldi	r24, 0x34	; 52
    71c2:	80 93 8e 04 	sts	0x048E, r24
							break;
    71c6:	00 00       	nop
					}
					uchEstadoMotorPP = MOTOR_PP_ROTAR;
    71c8:	82 e0       	ldi	r24, 0x02	; 2
    71ca:	80 93 91 04 	sts	0x0491, r24
    71ce:	48 c0       	rjmp	.+144    	; 0x7260 <Rotar_Motor_PP+0x2b8>
				}
				else{
					CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_1);
    71d0:	88 e2       	ldi	r24, 0x28	; 40
    71d2:	90 e0       	ldi	r25, 0x00	; 0
    71d4:	28 e2       	ldi	r18, 0x28	; 40
    71d6:	30 e0       	ldi	r19, 0x00	; 0
    71d8:	f9 01       	movw	r30, r18
    71da:	20 81       	ld	r18, Z
    71dc:	2e 7f       	andi	r18, 0xFE	; 254
    71de:	fc 01       	movw	r30, r24
    71e0:	20 83       	st	Z, r18
					CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_2);
    71e2:	88 e2       	ldi	r24, 0x28	; 40
    71e4:	90 e0       	ldi	r25, 0x00	; 0
    71e6:	28 e2       	ldi	r18, 0x28	; 40
    71e8:	30 e0       	ldi	r19, 0x00	; 0
    71ea:	f9 01       	movw	r30, r18
    71ec:	20 81       	ld	r18, Z
    71ee:	2d 7f       	andi	r18, 0xFD	; 253
    71f0:	fc 01       	movw	r30, r24
    71f2:	20 83       	st	Z, r18
					CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_3);
    71f4:	88 e2       	ldi	r24, 0x28	; 40
    71f6:	90 e0       	ldi	r25, 0x00	; 0
    71f8:	28 e2       	ldi	r18, 0x28	; 40
    71fa:	30 e0       	ldi	r19, 0x00	; 0
    71fc:	f9 01       	movw	r30, r18
    71fe:	20 81       	ld	r18, Z
    7200:	2b 7f       	andi	r18, 0xFB	; 251
    7202:	fc 01       	movw	r30, r24
    7204:	20 83       	st	Z, r18
					CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_4);
    7206:	88 e2       	ldi	r24, 0x28	; 40
    7208:	90 e0       	ldi	r25, 0x00	; 0
    720a:	28 e2       	ldi	r18, 0x28	; 40
    720c:	30 e0       	ldi	r19, 0x00	; 0
    720e:	f9 01       	movw	r30, r18
    7210:	20 81       	ld	r18, Z
    7212:	27 7f       	andi	r18, 0xF7	; 247
    7214:	fc 01       	movw	r30, r24
    7216:	20 83       	st	Z, r18
					if ((stepToRotate > 0) && (relativePositionBySteps == MAX_MOTOR_PP_ACUMULADOS)){
    7218:	80 91 92 04 	lds	r24, 0x0492
    721c:	90 91 93 04 	lds	r25, 0x0493
    7220:	18 16       	cp	r1, r24
    7222:	19 06       	cpc	r1, r25
    7224:	64 f4       	brge	.+24     	; 0x723e <Rotar_Motor_PP+0x296>
    7226:	80 91 8c 04 	lds	r24, 0x048C
    722a:	90 91 8d 04 	lds	r25, 0x048D
    722e:	88 3c       	cpi	r24, 0xC8	; 200
    7230:	91 05       	cpc	r25, r1
    7232:	29 f4       	brne	.+10     	; 0x723e <Rotar_Motor_PP+0x296>
						stepToRotate=0;
    7234:	10 92 93 04 	sts	0x0493, r1
    7238:	10 92 92 04 	sts	0x0492, r1
    723c:	11 c0       	rjmp	.+34     	; 0x7260 <Rotar_Motor_PP+0x2b8>
					}
					else if ((stepToRotate < 0) && (relativePositionBySteps == MIN_MOTOR_PP_ACUMULADOS)){
    723e:	80 91 92 04 	lds	r24, 0x0492
    7242:	90 91 93 04 	lds	r25, 0x0493
    7246:	99 23       	and	r25, r25
    7248:	5c f4       	brge	.+22     	; 0x7260 <Rotar_Motor_PP+0x2b8>
    724a:	80 91 8c 04 	lds	r24, 0x048C
    724e:	90 91 8d 04 	lds	r25, 0x048D
    7252:	40 97       	sbiw	r24, 0x10	; 16
    7254:	29 f4       	brne	.+10     	; 0x7260 <Rotar_Motor_PP+0x2b8>
						stepToRotate=0;
    7256:	10 92 93 04 	sts	0x0493, r1
    725a:	10 92 92 04 	sts	0x0492, r1
					}
				}
			}
			break;
    725e:	bb c0       	rjmp	.+374    	; 0x73d6 <Rotar_Motor_PP+0x42e>
    7260:	ba c0       	rjmp	.+372    	; 0x73d6 <Rotar_Motor_PP+0x42e>


		case MOTOR_PP_ROTAR:
			switch (uchEstadoRotar) {
    7262:	80 91 8e 04 	lds	r24, 0x048E
    7266:	88 2f       	mov	r24, r24
    7268:	90 e0       	ldi	r25, 0x00	; 0
    726a:	09 2e       	mov	r0, r25
    726c:	00 0c       	add	r0, r0
    726e:	aa 0b       	sbc	r26, r26
    7270:	bb 0b       	sbc	r27, r27
    7272:	42 e3       	ldi	r20, 0x32	; 50
    7274:	50 e0       	ldi	r21, 0x00	; 0
    7276:	27 e0       	ldi	r18, 0x07	; 7
    7278:	30 e0       	ldi	r19, 0x00	; 0
    727a:	84 1b       	sub	r24, r20
    727c:	95 0b       	sbc	r25, r21
    727e:	28 17       	cp	r18, r24
    7280:	39 07       	cpc	r19, r25
    7282:	08 f4       	brcc	.+2      	; 0x7286 <Rotar_Motor_PP+0x2de>
    7284:	91 c0       	rjmp	.+290    	; 0x73a8 <Rotar_Motor_PP+0x400>
    7286:	8c 5c       	subi	r24, 0xCC	; 204
    7288:	9f 4f       	sbci	r25, 0xFF	; 255
    728a:	fc 01       	movw	r30, r24
    728c:	0c 94 4d 56 	jmp	0xac9a	; 0xac9a <__tablejump2__>
				case MOTOR_PP_ROTAR_STEP_1:
					SET_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_1);
    7290:	88 e2       	ldi	r24, 0x28	; 40
    7292:	90 e0       	ldi	r25, 0x00	; 0
    7294:	28 e2       	ldi	r18, 0x28	; 40
    7296:	30 e0       	ldi	r19, 0x00	; 0
    7298:	f9 01       	movw	r30, r18
    729a:	20 81       	ld	r18, Z
    729c:	21 60       	ori	r18, 0x01	; 1
    729e:	fc 01       	movw	r30, r24
    72a0:	20 83       	st	Z, r18
					stateMotorPP = STATE_MOTOR_STOP;
    72a2:	86 ef       	ldi	r24, 0xF6	; 246
    72a4:	9f ef       	ldi	r25, 0xFF	; 255
    72a6:	90 93 8b 04 	sts	0x048B, r25
    72aa:	80 93 8a 04 	sts	0x048A, r24
					uchEstadoRotar = MOTOR_PP_ROTAR_STEP_12;
    72ae:	83 e3       	ldi	r24, 0x33	; 51
    72b0:	80 93 8e 04 	sts	0x048E, r24
					break;
    72b4:	83 c0       	rjmp	.+262    	; 0x73bc <Rotar_Motor_PP+0x414>

				case MOTOR_PP_ROTAR_STEP_12:
					CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_1);
    72b6:	88 e2       	ldi	r24, 0x28	; 40
    72b8:	90 e0       	ldi	r25, 0x00	; 0
    72ba:	28 e2       	ldi	r18, 0x28	; 40
    72bc:	30 e0       	ldi	r19, 0x00	; 0
    72be:	f9 01       	movw	r30, r18
    72c0:	20 81       	ld	r18, Z
    72c2:	2e 7f       	andi	r18, 0xFE	; 254
    72c4:	fc 01       	movw	r30, r24
    72c6:	20 83       	st	Z, r18
					stateMotorPP = STATE_MOTOR_1;
    72c8:	81 e0       	ldi	r24, 0x01	; 1
    72ca:	90 e0       	ldi	r25, 0x00	; 0
    72cc:	90 93 8b 04 	sts	0x048B, r25
    72d0:	80 93 8a 04 	sts	0x048A, r24
					break;
    72d4:	73 c0       	rjmp	.+230    	; 0x73bc <Rotar_Motor_PP+0x414>

				case MOTOR_PP_ROTAR_STEP_2:
					SET_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_2);
    72d6:	88 e2       	ldi	r24, 0x28	; 40
    72d8:	90 e0       	ldi	r25, 0x00	; 0
    72da:	28 e2       	ldi	r18, 0x28	; 40
    72dc:	30 e0       	ldi	r19, 0x00	; 0
    72de:	f9 01       	movw	r30, r18
    72e0:	20 81       	ld	r18, Z
    72e2:	22 60       	ori	r18, 0x02	; 2
    72e4:	fc 01       	movw	r30, r24
    72e6:	20 83       	st	Z, r18
					stateMotorPP = STATE_MOTOR_STOP;
    72e8:	86 ef       	ldi	r24, 0xF6	; 246
    72ea:	9f ef       	ldi	r25, 0xFF	; 255
    72ec:	90 93 8b 04 	sts	0x048B, r25
    72f0:	80 93 8a 04 	sts	0x048A, r24
					uchEstadoRotar = MOTOR_PP_ROTAR_STEP_23;
    72f4:	85 e3       	ldi	r24, 0x35	; 53
    72f6:	80 93 8e 04 	sts	0x048E, r24
					break;
    72fa:	60 c0       	rjmp	.+192    	; 0x73bc <Rotar_Motor_PP+0x414>

				case MOTOR_PP_ROTAR_STEP_23:
					CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_2);
    72fc:	88 e2       	ldi	r24, 0x28	; 40
    72fe:	90 e0       	ldi	r25, 0x00	; 0
    7300:	28 e2       	ldi	r18, 0x28	; 40
    7302:	30 e0       	ldi	r19, 0x00	; 0
    7304:	f9 01       	movw	r30, r18
    7306:	20 81       	ld	r18, Z
    7308:	2d 7f       	andi	r18, 0xFD	; 253
    730a:	fc 01       	movw	r30, r24
    730c:	20 83       	st	Z, r18
					stateMotorPP = STATE_MOTOR_2;
    730e:	82 e0       	ldi	r24, 0x02	; 2
    7310:	90 e0       	ldi	r25, 0x00	; 0
    7312:	90 93 8b 04 	sts	0x048B, r25
    7316:	80 93 8a 04 	sts	0x048A, r24
					break;
    731a:	50 c0       	rjmp	.+160    	; 0x73bc <Rotar_Motor_PP+0x414>

				case MOTOR_PP_ROTAR_STEP_3:
					SET_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_3);
    731c:	88 e2       	ldi	r24, 0x28	; 40
    731e:	90 e0       	ldi	r25, 0x00	; 0
    7320:	28 e2       	ldi	r18, 0x28	; 40
    7322:	30 e0       	ldi	r19, 0x00	; 0
    7324:	f9 01       	movw	r30, r18
    7326:	20 81       	ld	r18, Z
    7328:	24 60       	ori	r18, 0x04	; 4
    732a:	fc 01       	movw	r30, r24
    732c:	20 83       	st	Z, r18
					stateMotorPP = STATE_MOTOR_STOP;
    732e:	86 ef       	ldi	r24, 0xF6	; 246
    7330:	9f ef       	ldi	r25, 0xFF	; 255
    7332:	90 93 8b 04 	sts	0x048B, r25
    7336:	80 93 8a 04 	sts	0x048A, r24
					uchEstadoRotar = MOTOR_PP_ROTAR_STEP_34;
    733a:	87 e3       	ldi	r24, 0x37	; 55
    733c:	80 93 8e 04 	sts	0x048E, r24
					break;
    7340:	3d c0       	rjmp	.+122    	; 0x73bc <Rotar_Motor_PP+0x414>

				case MOTOR_PP_ROTAR_STEP_34:
					CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_3);
    7342:	88 e2       	ldi	r24, 0x28	; 40
    7344:	90 e0       	ldi	r25, 0x00	; 0
    7346:	28 e2       	ldi	r18, 0x28	; 40
    7348:	30 e0       	ldi	r19, 0x00	; 0
    734a:	f9 01       	movw	r30, r18
    734c:	20 81       	ld	r18, Z
    734e:	2b 7f       	andi	r18, 0xFB	; 251
    7350:	fc 01       	movw	r30, r24
    7352:	20 83       	st	Z, r18
					stateMotorPP = STATE_MOTOR_3;
    7354:	83 e0       	ldi	r24, 0x03	; 3
    7356:	90 e0       	ldi	r25, 0x00	; 0
    7358:	90 93 8b 04 	sts	0x048B, r25
    735c:	80 93 8a 04 	sts	0x048A, r24
					break;
    7360:	2d c0       	rjmp	.+90     	; 0x73bc <Rotar_Motor_PP+0x414>

				case MOTOR_PP_ROTAR_STEP_4:
					SET_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_4);
    7362:	88 e2       	ldi	r24, 0x28	; 40
    7364:	90 e0       	ldi	r25, 0x00	; 0
    7366:	28 e2       	ldi	r18, 0x28	; 40
    7368:	30 e0       	ldi	r19, 0x00	; 0
    736a:	f9 01       	movw	r30, r18
    736c:	20 81       	ld	r18, Z
    736e:	28 60       	ori	r18, 0x08	; 8
    7370:	fc 01       	movw	r30, r24
    7372:	20 83       	st	Z, r18
					stateMotorPP = STATE_MOTOR_STOP;
    7374:	86 ef       	ldi	r24, 0xF6	; 246
    7376:	9f ef       	ldi	r25, 0xFF	; 255
    7378:	90 93 8b 04 	sts	0x048B, r25
    737c:	80 93 8a 04 	sts	0x048A, r24
					uchEstadoRotar = MOTOR_PP_ROTAR_STEP_41;
    7380:	89 e3       	ldi	r24, 0x39	; 57
    7382:	80 93 8e 04 	sts	0x048E, r24
					break;
    7386:	1a c0       	rjmp	.+52     	; 0x73bc <Rotar_Motor_PP+0x414>

				case MOTOR_PP_ROTAR_STEP_41:
					CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_4);
    7388:	88 e2       	ldi	r24, 0x28	; 40
    738a:	90 e0       	ldi	r25, 0x00	; 0
    738c:	28 e2       	ldi	r18, 0x28	; 40
    738e:	30 e0       	ldi	r19, 0x00	; 0
    7390:	f9 01       	movw	r30, r18
    7392:	20 81       	ld	r18, Z
    7394:	27 7f       	andi	r18, 0xF7	; 247
    7396:	fc 01       	movw	r30, r24
    7398:	20 83       	st	Z, r18
					stateMotorPP = STATE_MOTOR_4;
    739a:	84 e0       	ldi	r24, 0x04	; 4
    739c:	90 e0       	ldi	r25, 0x00	; 0
    739e:	90 93 8b 04 	sts	0x048B, r25
    73a2:	80 93 8a 04 	sts	0x048A, r24
					break;
    73a6:	0a c0       	rjmp	.+20     	; 0x73bc <Rotar_Motor_PP+0x414>

				default:
					stateMotorPP = STATE_MOTOR_1;
    73a8:	81 e0       	ldi	r24, 0x01	; 1
    73aa:	90 e0       	ldi	r25, 0x00	; 0
    73ac:	90 93 8b 04 	sts	0x048B, r25
    73b0:	80 93 8a 04 	sts	0x048A, r24
					uchEstadoRotar = MOTOR_PP_ROTAR_STEP_1;
    73b4:	82 e3       	ldi	r24, 0x32	; 50
    73b6:	80 93 8e 04 	sts	0x048E, r24
					break;
    73ba:	00 00       	nop
			}
			uContMotorPP = TIEMPO_ENTRE_STEP;
    73bc:	85 e0       	ldi	r24, 0x05	; 5
    73be:	90 e0       	ldi	r25, 0x00	; 0
    73c0:	90 93 90 04 	sts	0x0490, r25
    73c4:	80 93 8f 04 	sts	0x048F, r24
			uchEstadoMotorPP = MOTOR_PP_STANDBY;
    73c8:	81 e0       	ldi	r24, 0x01	; 1
    73ca:	80 93 91 04 	sts	0x0491, r24
			break;
    73ce:	03 c0       	rjmp	.+6      	; 0x73d6 <Rotar_Motor_PP+0x42e>

		default:
			Inicio_Motor_PP();
    73d0:	0e 94 ee 39 	call	0x73dc	; 0x73dc <Inicio_Motor_PP>
			break;
    73d4:	00 00       	nop
	}
}
    73d6:	df 91       	pop	r29
    73d8:	cf 91       	pop	r28
    73da:	08 95       	ret

000073dc <Inicio_Motor_PP>:

/*****************************************************************************
* inicio motor PP
*****************************************************************************/
void Inicio_Motor_PP (void) {
    73dc:	0f 93       	push	r16
    73de:	1f 93       	push	r17
    73e0:	cf 93       	push	r28
    73e2:	df 93       	push	r29
    73e4:	cd b7       	in	r28, 0x3d	; 61
    73e6:	de b7       	in	r29, 0x3e	; 62
    73e8:	c0 5e       	subi	r28, 0xE0	; 224
    73ea:	d1 09       	sbc	r29, r1
    73ec:	0f b6       	in	r0, 0x3f	; 63
    73ee:	f8 94       	cli
    73f0:	de bf       	out	0x3e, r29	; 62
    73f2:	0f be       	out	0x3f, r0	; 63
    73f4:	cd bf       	out	0x3d, r28	; 61
	CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_1);
    73f6:	88 e2       	ldi	r24, 0x28	; 40
    73f8:	90 e0       	ldi	r25, 0x00	; 0
    73fa:	28 e2       	ldi	r18, 0x28	; 40
    73fc:	30 e0       	ldi	r19, 0x00	; 0
    73fe:	f9 01       	movw	r30, r18
    7400:	20 81       	ld	r18, Z
    7402:	2e 7f       	andi	r18, 0xFE	; 254
    7404:	fc 01       	movw	r30, r24
    7406:	20 83       	st	Z, r18
	CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_2);
    7408:	88 e2       	ldi	r24, 0x28	; 40
    740a:	90 e0       	ldi	r25, 0x00	; 0
    740c:	28 e2       	ldi	r18, 0x28	; 40
    740e:	30 e0       	ldi	r19, 0x00	; 0
    7410:	f9 01       	movw	r30, r18
    7412:	20 81       	ld	r18, Z
    7414:	2d 7f       	andi	r18, 0xFD	; 253
    7416:	fc 01       	movw	r30, r24
    7418:	20 83       	st	Z, r18
	CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_3);
    741a:	88 e2       	ldi	r24, 0x28	; 40
    741c:	90 e0       	ldi	r25, 0x00	; 0
    741e:	28 e2       	ldi	r18, 0x28	; 40
    7420:	30 e0       	ldi	r19, 0x00	; 0
    7422:	f9 01       	movw	r30, r18
    7424:	20 81       	ld	r18, Z
    7426:	2b 7f       	andi	r18, 0xFB	; 251
    7428:	fc 01       	movw	r30, r24
    742a:	20 83       	st	Z, r18
	CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_4);
    742c:	88 e2       	ldi	r24, 0x28	; 40
    742e:	90 e0       	ldi	r25, 0x00	; 0
    7430:	28 e2       	ldi	r18, 0x28	; 40
    7432:	30 e0       	ldi	r19, 0x00	; 0
    7434:	f9 01       	movw	r30, r18
    7436:	20 81       	ld	r18, Z
    7438:	27 7f       	andi	r18, 0xF7	; 247
    743a:	fc 01       	movw	r30, r24
    743c:	20 83       	st	Z, r18

	// cierro completo
	stepToRotate = -STEP_FULL_CERRADO_INICIO;
    743e:	84 ed       	ldi	r24, 0xD4	; 212
    7440:	9e ef       	ldi	r25, 0xFE	; 254
    7442:	90 93 93 04 	sts	0x0493, r25
    7446:	80 93 92 04 	sts	0x0492, r24
	while (stepToRotate < 0){//1->4->2->3->1
    744a:	1a c5       	rjmp	.+2612   	; 0x7e80 <Inicio_Motor_PP+0xaa4>
		SET_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_4);
    744c:	88 e2       	ldi	r24, 0x28	; 40
    744e:	90 e0       	ldi	r25, 0x00	; 0
    7450:	28 e2       	ldi	r18, 0x28	; 40
    7452:	30 e0       	ldi	r19, 0x00	; 0
    7454:	f9 01       	movw	r30, r18
    7456:	20 81       	ld	r18, Z
    7458:	28 60       	ori	r18, 0x08	; 8
    745a:	fc 01       	movw	r30, r24
    745c:	20 83       	st	Z, r18
    745e:	80 e0       	ldi	r24, 0x00	; 0
    7460:	90 e0       	ldi	r25, 0x00	; 0
    7462:	a0 ea       	ldi	r26, 0xA0	; 160
    7464:	b0 e4       	ldi	r27, 0x40	; 64
    7466:	89 83       	std	Y+1, r24	; 0x01
    7468:	9a 83       	std	Y+2, r25	; 0x02
    746a:	ab 83       	std	Y+3, r26	; 0x03
    746c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    746e:	20 e0       	ldi	r18, 0x00	; 0
    7470:	30 e0       	ldi	r19, 0x00	; 0
    7472:	4a e7       	ldi	r20, 0x7A	; 122
    7474:	55 e4       	ldi	r21, 0x45	; 69
    7476:	69 81       	ldd	r22, Y+1	; 0x01
    7478:	7a 81       	ldd	r23, Y+2	; 0x02
    747a:	8b 81       	ldd	r24, Y+3	; 0x03
    747c:	9c 81       	ldd	r25, Y+4	; 0x04
    747e:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    7482:	dc 01       	movw	r26, r24
    7484:	cb 01       	movw	r24, r22
    7486:	8d 83       	std	Y+5, r24	; 0x05
    7488:	9e 83       	std	Y+6, r25	; 0x06
    748a:	af 83       	std	Y+7, r26	; 0x07
    748c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    748e:	20 e0       	ldi	r18, 0x00	; 0
    7490:	30 e0       	ldi	r19, 0x00	; 0
    7492:	40 e8       	ldi	r20, 0x80	; 128
    7494:	5f e3       	ldi	r21, 0x3F	; 63
    7496:	6d 81       	ldd	r22, Y+5	; 0x05
    7498:	7e 81       	ldd	r23, Y+6	; 0x06
    749a:	8f 81       	ldd	r24, Y+7	; 0x07
    749c:	98 85       	ldd	r25, Y+8	; 0x08
    749e:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    74a2:	88 23       	and	r24, r24
    74a4:	2c f4       	brge	.+10     	; 0x74b0 <Inicio_Motor_PP+0xd4>
		__ticks = 1;
    74a6:	81 e0       	ldi	r24, 0x01	; 1
    74a8:	90 e0       	ldi	r25, 0x00	; 0
    74aa:	9a 87       	std	Y+10, r25	; 0x0a
    74ac:	89 87       	std	Y+9, r24	; 0x09
    74ae:	3f c0       	rjmp	.+126    	; 0x752e <Inicio_Motor_PP+0x152>
	else if (__tmp > 65535)
    74b0:	20 e0       	ldi	r18, 0x00	; 0
    74b2:	3f ef       	ldi	r19, 0xFF	; 255
    74b4:	4f e7       	ldi	r20, 0x7F	; 127
    74b6:	57 e4       	ldi	r21, 0x47	; 71
    74b8:	6d 81       	ldd	r22, Y+5	; 0x05
    74ba:	7e 81       	ldd	r23, Y+6	; 0x06
    74bc:	8f 81       	ldd	r24, Y+7	; 0x07
    74be:	98 85       	ldd	r25, Y+8	; 0x08
    74c0:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    74c4:	18 16       	cp	r1, r24
    74c6:	4c f5       	brge	.+82     	; 0x751a <Inicio_Motor_PP+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    74c8:	20 e0       	ldi	r18, 0x00	; 0
    74ca:	30 e0       	ldi	r19, 0x00	; 0
    74cc:	40 e2       	ldi	r20, 0x20	; 32
    74ce:	51 e4       	ldi	r21, 0x41	; 65
    74d0:	69 81       	ldd	r22, Y+1	; 0x01
    74d2:	7a 81       	ldd	r23, Y+2	; 0x02
    74d4:	8b 81       	ldd	r24, Y+3	; 0x03
    74d6:	9c 81       	ldd	r25, Y+4	; 0x04
    74d8:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    74dc:	dc 01       	movw	r26, r24
    74de:	cb 01       	movw	r24, r22
    74e0:	bc 01       	movw	r22, r24
    74e2:	cd 01       	movw	r24, r26
    74e4:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    74e8:	dc 01       	movw	r26, r24
    74ea:	cb 01       	movw	r24, r22
    74ec:	9a 87       	std	Y+10, r25	; 0x0a
    74ee:	89 87       	std	Y+9, r24	; 0x09
    74f0:	0f c0       	rjmp	.+30     	; 0x7510 <Inicio_Motor_PP+0x134>
    74f2:	80 e9       	ldi	r24, 0x90	; 144
    74f4:	91 e0       	ldi	r25, 0x01	; 1
    74f6:	9c 87       	std	Y+12, r25	; 0x0c
    74f8:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    74fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    74fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    74fe:	01 97       	sbiw	r24, 0x01	; 1
    7500:	f1 f7       	brne	.-4      	; 0x74fe <Inicio_Motor_PP+0x122>
    7502:	9c 87       	std	Y+12, r25	; 0x0c
    7504:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7506:	89 85       	ldd	r24, Y+9	; 0x09
    7508:	9a 85       	ldd	r25, Y+10	; 0x0a
    750a:	01 97       	sbiw	r24, 0x01	; 1
    750c:	9a 87       	std	Y+10, r25	; 0x0a
    750e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7510:	89 85       	ldd	r24, Y+9	; 0x09
    7512:	9a 85       	ldd	r25, Y+10	; 0x0a
    7514:	89 2b       	or	r24, r25
    7516:	69 f7       	brne	.-38     	; 0x74f2 <Inicio_Motor_PP+0x116>
    7518:	14 c0       	rjmp	.+40     	; 0x7542 <Inicio_Motor_PP+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    751a:	6d 81       	ldd	r22, Y+5	; 0x05
    751c:	7e 81       	ldd	r23, Y+6	; 0x06
    751e:	8f 81       	ldd	r24, Y+7	; 0x07
    7520:	98 85       	ldd	r25, Y+8	; 0x08
    7522:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    7526:	dc 01       	movw	r26, r24
    7528:	cb 01       	movw	r24, r22
    752a:	9a 87       	std	Y+10, r25	; 0x0a
    752c:	89 87       	std	Y+9, r24	; 0x09
    752e:	89 85       	ldd	r24, Y+9	; 0x09
    7530:	9a 85       	ldd	r25, Y+10	; 0x0a
    7532:	9e 87       	std	Y+14, r25	; 0x0e
    7534:	8d 87       	std	Y+13, r24	; 0x0d
    7536:	8d 85       	ldd	r24, Y+13	; 0x0d
    7538:	9e 85       	ldd	r25, Y+14	; 0x0e
    753a:	01 97       	sbiw	r24, 0x01	; 1
    753c:	f1 f7       	brne	.-4      	; 0x753a <Inicio_Motor_PP+0x15e>
    753e:	9e 87       	std	Y+14, r25	; 0x0e
    7540:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(TIEMPO_ENTRE_STEP);
		CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_4);
    7542:	88 e2       	ldi	r24, 0x28	; 40
    7544:	90 e0       	ldi	r25, 0x00	; 0
    7546:	28 e2       	ldi	r18, 0x28	; 40
    7548:	30 e0       	ldi	r19, 0x00	; 0
    754a:	f9 01       	movw	r30, r18
    754c:	20 81       	ld	r18, Z
    754e:	27 7f       	andi	r18, 0xF7	; 247
    7550:	fc 01       	movw	r30, r24
    7552:	20 83       	st	Z, r18
    7554:	80 e0       	ldi	r24, 0x00	; 0
    7556:	90 e0       	ldi	r25, 0x00	; 0
    7558:	a0 ea       	ldi	r26, 0xA0	; 160
    755a:	b0 e4       	ldi	r27, 0x40	; 64
    755c:	8f 87       	std	Y+15, r24	; 0x0f
    755e:	98 8b       	std	Y+16, r25	; 0x10
    7560:	a9 8b       	std	Y+17, r26	; 0x11
    7562:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    7564:	20 e0       	ldi	r18, 0x00	; 0
    7566:	30 e0       	ldi	r19, 0x00	; 0
    7568:	4a e7       	ldi	r20, 0x7A	; 122
    756a:	55 e4       	ldi	r21, 0x45	; 69
    756c:	6f 85       	ldd	r22, Y+15	; 0x0f
    756e:	78 89       	ldd	r23, Y+16	; 0x10
    7570:	89 89       	ldd	r24, Y+17	; 0x11
    7572:	9a 89       	ldd	r25, Y+18	; 0x12
    7574:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    7578:	dc 01       	movw	r26, r24
    757a:	cb 01       	movw	r24, r22
    757c:	8b 8b       	std	Y+19, r24	; 0x13
    757e:	9c 8b       	std	Y+20, r25	; 0x14
    7580:	ad 8b       	std	Y+21, r26	; 0x15
    7582:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    7584:	20 e0       	ldi	r18, 0x00	; 0
    7586:	30 e0       	ldi	r19, 0x00	; 0
    7588:	40 e8       	ldi	r20, 0x80	; 128
    758a:	5f e3       	ldi	r21, 0x3F	; 63
    758c:	6b 89       	ldd	r22, Y+19	; 0x13
    758e:	7c 89       	ldd	r23, Y+20	; 0x14
    7590:	8d 89       	ldd	r24, Y+21	; 0x15
    7592:	9e 89       	ldd	r25, Y+22	; 0x16
    7594:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    7598:	88 23       	and	r24, r24
    759a:	2c f4       	brge	.+10     	; 0x75a6 <Inicio_Motor_PP+0x1ca>
		__ticks = 1;
    759c:	81 e0       	ldi	r24, 0x01	; 1
    759e:	90 e0       	ldi	r25, 0x00	; 0
    75a0:	98 8f       	std	Y+24, r25	; 0x18
    75a2:	8f 8b       	std	Y+23, r24	; 0x17
    75a4:	3f c0       	rjmp	.+126    	; 0x7624 <Inicio_Motor_PP+0x248>
	else if (__tmp > 65535)
    75a6:	20 e0       	ldi	r18, 0x00	; 0
    75a8:	3f ef       	ldi	r19, 0xFF	; 255
    75aa:	4f e7       	ldi	r20, 0x7F	; 127
    75ac:	57 e4       	ldi	r21, 0x47	; 71
    75ae:	6b 89       	ldd	r22, Y+19	; 0x13
    75b0:	7c 89       	ldd	r23, Y+20	; 0x14
    75b2:	8d 89       	ldd	r24, Y+21	; 0x15
    75b4:	9e 89       	ldd	r25, Y+22	; 0x16
    75b6:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    75ba:	18 16       	cp	r1, r24
    75bc:	4c f5       	brge	.+82     	; 0x7610 <Inicio_Motor_PP+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    75be:	20 e0       	ldi	r18, 0x00	; 0
    75c0:	30 e0       	ldi	r19, 0x00	; 0
    75c2:	40 e2       	ldi	r20, 0x20	; 32
    75c4:	51 e4       	ldi	r21, 0x41	; 65
    75c6:	6f 85       	ldd	r22, Y+15	; 0x0f
    75c8:	78 89       	ldd	r23, Y+16	; 0x10
    75ca:	89 89       	ldd	r24, Y+17	; 0x11
    75cc:	9a 89       	ldd	r25, Y+18	; 0x12
    75ce:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    75d2:	dc 01       	movw	r26, r24
    75d4:	cb 01       	movw	r24, r22
    75d6:	bc 01       	movw	r22, r24
    75d8:	cd 01       	movw	r24, r26
    75da:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    75de:	dc 01       	movw	r26, r24
    75e0:	cb 01       	movw	r24, r22
    75e2:	98 8f       	std	Y+24, r25	; 0x18
    75e4:	8f 8b       	std	Y+23, r24	; 0x17
    75e6:	0f c0       	rjmp	.+30     	; 0x7606 <Inicio_Motor_PP+0x22a>
    75e8:	80 e9       	ldi	r24, 0x90	; 144
    75ea:	91 e0       	ldi	r25, 0x01	; 1
    75ec:	9a 8f       	std	Y+26, r25	; 0x1a
    75ee:	89 8f       	std	Y+25, r24	; 0x19
    75f0:	89 8d       	ldd	r24, Y+25	; 0x19
    75f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    75f4:	01 97       	sbiw	r24, 0x01	; 1
    75f6:	f1 f7       	brne	.-4      	; 0x75f4 <Inicio_Motor_PP+0x218>
    75f8:	9a 8f       	std	Y+26, r25	; 0x1a
    75fa:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    75fc:	8f 89       	ldd	r24, Y+23	; 0x17
    75fe:	98 8d       	ldd	r25, Y+24	; 0x18
    7600:	01 97       	sbiw	r24, 0x01	; 1
    7602:	98 8f       	std	Y+24, r25	; 0x18
    7604:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7606:	8f 89       	ldd	r24, Y+23	; 0x17
    7608:	98 8d       	ldd	r25, Y+24	; 0x18
    760a:	89 2b       	or	r24, r25
    760c:	69 f7       	brne	.-38     	; 0x75e8 <Inicio_Motor_PP+0x20c>
    760e:	14 c0       	rjmp	.+40     	; 0x7638 <Inicio_Motor_PP+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7610:	6b 89       	ldd	r22, Y+19	; 0x13
    7612:	7c 89       	ldd	r23, Y+20	; 0x14
    7614:	8d 89       	ldd	r24, Y+21	; 0x15
    7616:	9e 89       	ldd	r25, Y+22	; 0x16
    7618:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    761c:	dc 01       	movw	r26, r24
    761e:	cb 01       	movw	r24, r22
    7620:	98 8f       	std	Y+24, r25	; 0x18
    7622:	8f 8b       	std	Y+23, r24	; 0x17
    7624:	8f 89       	ldd	r24, Y+23	; 0x17
    7626:	98 8d       	ldd	r25, Y+24	; 0x18
    7628:	9c 8f       	std	Y+28, r25	; 0x1c
    762a:	8b 8f       	std	Y+27, r24	; 0x1b
    762c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    762e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7630:	01 97       	sbiw	r24, 0x01	; 1
    7632:	f1 f7       	brne	.-4      	; 0x7630 <Inicio_Motor_PP+0x254>
    7634:	9c 8f       	std	Y+28, r25	; 0x1c
    7636:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(TIEMPO_ENTRE_STEP);
		SET_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_2);
    7638:	88 e2       	ldi	r24, 0x28	; 40
    763a:	90 e0       	ldi	r25, 0x00	; 0
    763c:	28 e2       	ldi	r18, 0x28	; 40
    763e:	30 e0       	ldi	r19, 0x00	; 0
    7640:	f9 01       	movw	r30, r18
    7642:	20 81       	ld	r18, Z
    7644:	22 60       	ori	r18, 0x02	; 2
    7646:	fc 01       	movw	r30, r24
    7648:	20 83       	st	Z, r18
    764a:	80 e0       	ldi	r24, 0x00	; 0
    764c:	90 e0       	ldi	r25, 0x00	; 0
    764e:	a0 ea       	ldi	r26, 0xA0	; 160
    7650:	b0 e4       	ldi	r27, 0x40	; 64
    7652:	8d 8f       	std	Y+29, r24	; 0x1d
    7654:	9e 8f       	std	Y+30, r25	; 0x1e
    7656:	af 8f       	std	Y+31, r26	; 0x1f
    7658:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    765a:	20 e0       	ldi	r18, 0x00	; 0
    765c:	30 e0       	ldi	r19, 0x00	; 0
    765e:	4a e7       	ldi	r20, 0x7A	; 122
    7660:	55 e4       	ldi	r21, 0x45	; 69
    7662:	6d 8d       	ldd	r22, Y+29	; 0x1d
    7664:	7e 8d       	ldd	r23, Y+30	; 0x1e
    7666:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7668:	98 a1       	ldd	r25, Y+32	; 0x20
    766a:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    766e:	dc 01       	movw	r26, r24
    7670:	cb 01       	movw	r24, r22
    7672:	89 a3       	std	Y+33, r24	; 0x21
    7674:	9a a3       	std	Y+34, r25	; 0x22
    7676:	ab a3       	std	Y+35, r26	; 0x23
    7678:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    767a:	20 e0       	ldi	r18, 0x00	; 0
    767c:	30 e0       	ldi	r19, 0x00	; 0
    767e:	40 e8       	ldi	r20, 0x80	; 128
    7680:	5f e3       	ldi	r21, 0x3F	; 63
    7682:	69 a1       	ldd	r22, Y+33	; 0x21
    7684:	7a a1       	ldd	r23, Y+34	; 0x22
    7686:	8b a1       	ldd	r24, Y+35	; 0x23
    7688:	9c a1       	ldd	r25, Y+36	; 0x24
    768a:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    768e:	88 23       	and	r24, r24
    7690:	2c f4       	brge	.+10     	; 0x769c <Inicio_Motor_PP+0x2c0>
		__ticks = 1;
    7692:	81 e0       	ldi	r24, 0x01	; 1
    7694:	90 e0       	ldi	r25, 0x00	; 0
    7696:	9e a3       	std	Y+38, r25	; 0x26
    7698:	8d a3       	std	Y+37, r24	; 0x25
    769a:	3f c0       	rjmp	.+126    	; 0x771a <Inicio_Motor_PP+0x33e>
	else if (__tmp > 65535)
    769c:	20 e0       	ldi	r18, 0x00	; 0
    769e:	3f ef       	ldi	r19, 0xFF	; 255
    76a0:	4f e7       	ldi	r20, 0x7F	; 127
    76a2:	57 e4       	ldi	r21, 0x47	; 71
    76a4:	69 a1       	ldd	r22, Y+33	; 0x21
    76a6:	7a a1       	ldd	r23, Y+34	; 0x22
    76a8:	8b a1       	ldd	r24, Y+35	; 0x23
    76aa:	9c a1       	ldd	r25, Y+36	; 0x24
    76ac:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    76b0:	18 16       	cp	r1, r24
    76b2:	4c f5       	brge	.+82     	; 0x7706 <Inicio_Motor_PP+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    76b4:	20 e0       	ldi	r18, 0x00	; 0
    76b6:	30 e0       	ldi	r19, 0x00	; 0
    76b8:	40 e2       	ldi	r20, 0x20	; 32
    76ba:	51 e4       	ldi	r21, 0x41	; 65
    76bc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    76be:	7e 8d       	ldd	r23, Y+30	; 0x1e
    76c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    76c2:	98 a1       	ldd	r25, Y+32	; 0x20
    76c4:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    76c8:	dc 01       	movw	r26, r24
    76ca:	cb 01       	movw	r24, r22
    76cc:	bc 01       	movw	r22, r24
    76ce:	cd 01       	movw	r24, r26
    76d0:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    76d4:	dc 01       	movw	r26, r24
    76d6:	cb 01       	movw	r24, r22
    76d8:	9e a3       	std	Y+38, r25	; 0x26
    76da:	8d a3       	std	Y+37, r24	; 0x25
    76dc:	0f c0       	rjmp	.+30     	; 0x76fc <Inicio_Motor_PP+0x320>
    76de:	80 e9       	ldi	r24, 0x90	; 144
    76e0:	91 e0       	ldi	r25, 0x01	; 1
    76e2:	98 a7       	std	Y+40, r25	; 0x28
    76e4:	8f a3       	std	Y+39, r24	; 0x27
    76e6:	8f a1       	ldd	r24, Y+39	; 0x27
    76e8:	98 a5       	ldd	r25, Y+40	; 0x28
    76ea:	01 97       	sbiw	r24, 0x01	; 1
    76ec:	f1 f7       	brne	.-4      	; 0x76ea <Inicio_Motor_PP+0x30e>
    76ee:	98 a7       	std	Y+40, r25	; 0x28
    76f0:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76f2:	8d a1       	ldd	r24, Y+37	; 0x25
    76f4:	9e a1       	ldd	r25, Y+38	; 0x26
    76f6:	01 97       	sbiw	r24, 0x01	; 1
    76f8:	9e a3       	std	Y+38, r25	; 0x26
    76fa:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76fc:	8d a1       	ldd	r24, Y+37	; 0x25
    76fe:	9e a1       	ldd	r25, Y+38	; 0x26
    7700:	89 2b       	or	r24, r25
    7702:	69 f7       	brne	.-38     	; 0x76de <Inicio_Motor_PP+0x302>
    7704:	14 c0       	rjmp	.+40     	; 0x772e <Inicio_Motor_PP+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7706:	69 a1       	ldd	r22, Y+33	; 0x21
    7708:	7a a1       	ldd	r23, Y+34	; 0x22
    770a:	8b a1       	ldd	r24, Y+35	; 0x23
    770c:	9c a1       	ldd	r25, Y+36	; 0x24
    770e:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    7712:	dc 01       	movw	r26, r24
    7714:	cb 01       	movw	r24, r22
    7716:	9e a3       	std	Y+38, r25	; 0x26
    7718:	8d a3       	std	Y+37, r24	; 0x25
    771a:	8d a1       	ldd	r24, Y+37	; 0x25
    771c:	9e a1       	ldd	r25, Y+38	; 0x26
    771e:	9a a7       	std	Y+42, r25	; 0x2a
    7720:	89 a7       	std	Y+41, r24	; 0x29
    7722:	89 a5       	ldd	r24, Y+41	; 0x29
    7724:	9a a5       	ldd	r25, Y+42	; 0x2a
    7726:	01 97       	sbiw	r24, 0x01	; 1
    7728:	f1 f7       	brne	.-4      	; 0x7726 <Inicio_Motor_PP+0x34a>
    772a:	9a a7       	std	Y+42, r25	; 0x2a
    772c:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(TIEMPO_ENTRE_STEP);
		CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_2);
    772e:	88 e2       	ldi	r24, 0x28	; 40
    7730:	90 e0       	ldi	r25, 0x00	; 0
    7732:	28 e2       	ldi	r18, 0x28	; 40
    7734:	30 e0       	ldi	r19, 0x00	; 0
    7736:	f9 01       	movw	r30, r18
    7738:	20 81       	ld	r18, Z
    773a:	2d 7f       	andi	r18, 0xFD	; 253
    773c:	fc 01       	movw	r30, r24
    773e:	20 83       	st	Z, r18
    7740:	80 e0       	ldi	r24, 0x00	; 0
    7742:	90 e0       	ldi	r25, 0x00	; 0
    7744:	a0 ea       	ldi	r26, 0xA0	; 160
    7746:	b0 e4       	ldi	r27, 0x40	; 64
    7748:	8b a7       	std	Y+43, r24	; 0x2b
    774a:	9c a7       	std	Y+44, r25	; 0x2c
    774c:	ad a7       	std	Y+45, r26	; 0x2d
    774e:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    7750:	20 e0       	ldi	r18, 0x00	; 0
    7752:	30 e0       	ldi	r19, 0x00	; 0
    7754:	4a e7       	ldi	r20, 0x7A	; 122
    7756:	55 e4       	ldi	r21, 0x45	; 69
    7758:	6b a5       	ldd	r22, Y+43	; 0x2b
    775a:	7c a5       	ldd	r23, Y+44	; 0x2c
    775c:	8d a5       	ldd	r24, Y+45	; 0x2d
    775e:	9e a5       	ldd	r25, Y+46	; 0x2e
    7760:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    7764:	dc 01       	movw	r26, r24
    7766:	cb 01       	movw	r24, r22
    7768:	8f a7       	std	Y+47, r24	; 0x2f
    776a:	98 ab       	std	Y+48, r25	; 0x30
    776c:	a9 ab       	std	Y+49, r26	; 0x31
    776e:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    7770:	20 e0       	ldi	r18, 0x00	; 0
    7772:	30 e0       	ldi	r19, 0x00	; 0
    7774:	40 e8       	ldi	r20, 0x80	; 128
    7776:	5f e3       	ldi	r21, 0x3F	; 63
    7778:	6f a5       	ldd	r22, Y+47	; 0x2f
    777a:	78 a9       	ldd	r23, Y+48	; 0x30
    777c:	89 a9       	ldd	r24, Y+49	; 0x31
    777e:	9a a9       	ldd	r25, Y+50	; 0x32
    7780:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    7784:	88 23       	and	r24, r24
    7786:	2c f4       	brge	.+10     	; 0x7792 <Inicio_Motor_PP+0x3b6>
		__ticks = 1;
    7788:	81 e0       	ldi	r24, 0x01	; 1
    778a:	90 e0       	ldi	r25, 0x00	; 0
    778c:	9c ab       	std	Y+52, r25	; 0x34
    778e:	8b ab       	std	Y+51, r24	; 0x33
    7790:	3f c0       	rjmp	.+126    	; 0x7810 <Inicio_Motor_PP+0x434>
	else if (__tmp > 65535)
    7792:	20 e0       	ldi	r18, 0x00	; 0
    7794:	3f ef       	ldi	r19, 0xFF	; 255
    7796:	4f e7       	ldi	r20, 0x7F	; 127
    7798:	57 e4       	ldi	r21, 0x47	; 71
    779a:	6f a5       	ldd	r22, Y+47	; 0x2f
    779c:	78 a9       	ldd	r23, Y+48	; 0x30
    779e:	89 a9       	ldd	r24, Y+49	; 0x31
    77a0:	9a a9       	ldd	r25, Y+50	; 0x32
    77a2:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    77a6:	18 16       	cp	r1, r24
    77a8:	4c f5       	brge	.+82     	; 0x77fc <Inicio_Motor_PP+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    77aa:	20 e0       	ldi	r18, 0x00	; 0
    77ac:	30 e0       	ldi	r19, 0x00	; 0
    77ae:	40 e2       	ldi	r20, 0x20	; 32
    77b0:	51 e4       	ldi	r21, 0x41	; 65
    77b2:	6b a5       	ldd	r22, Y+43	; 0x2b
    77b4:	7c a5       	ldd	r23, Y+44	; 0x2c
    77b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    77b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    77ba:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    77be:	dc 01       	movw	r26, r24
    77c0:	cb 01       	movw	r24, r22
    77c2:	bc 01       	movw	r22, r24
    77c4:	cd 01       	movw	r24, r26
    77c6:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    77ca:	dc 01       	movw	r26, r24
    77cc:	cb 01       	movw	r24, r22
    77ce:	9c ab       	std	Y+52, r25	; 0x34
    77d0:	8b ab       	std	Y+51, r24	; 0x33
    77d2:	0f c0       	rjmp	.+30     	; 0x77f2 <Inicio_Motor_PP+0x416>
    77d4:	80 e9       	ldi	r24, 0x90	; 144
    77d6:	91 e0       	ldi	r25, 0x01	; 1
    77d8:	9e ab       	std	Y+54, r25	; 0x36
    77da:	8d ab       	std	Y+53, r24	; 0x35
    77dc:	8d a9       	ldd	r24, Y+53	; 0x35
    77de:	9e a9       	ldd	r25, Y+54	; 0x36
    77e0:	01 97       	sbiw	r24, 0x01	; 1
    77e2:	f1 f7       	brne	.-4      	; 0x77e0 <Inicio_Motor_PP+0x404>
    77e4:	9e ab       	std	Y+54, r25	; 0x36
    77e6:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    77e8:	8b a9       	ldd	r24, Y+51	; 0x33
    77ea:	9c a9       	ldd	r25, Y+52	; 0x34
    77ec:	01 97       	sbiw	r24, 0x01	; 1
    77ee:	9c ab       	std	Y+52, r25	; 0x34
    77f0:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    77f2:	8b a9       	ldd	r24, Y+51	; 0x33
    77f4:	9c a9       	ldd	r25, Y+52	; 0x34
    77f6:	89 2b       	or	r24, r25
    77f8:	69 f7       	brne	.-38     	; 0x77d4 <Inicio_Motor_PP+0x3f8>
    77fa:	14 c0       	rjmp	.+40     	; 0x7824 <Inicio_Motor_PP+0x448>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    77fc:	6f a5       	ldd	r22, Y+47	; 0x2f
    77fe:	78 a9       	ldd	r23, Y+48	; 0x30
    7800:	89 a9       	ldd	r24, Y+49	; 0x31
    7802:	9a a9       	ldd	r25, Y+50	; 0x32
    7804:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    7808:	dc 01       	movw	r26, r24
    780a:	cb 01       	movw	r24, r22
    780c:	9c ab       	std	Y+52, r25	; 0x34
    780e:	8b ab       	std	Y+51, r24	; 0x33
    7810:	8b a9       	ldd	r24, Y+51	; 0x33
    7812:	9c a9       	ldd	r25, Y+52	; 0x34
    7814:	98 af       	std	Y+56, r25	; 0x38
    7816:	8f ab       	std	Y+55, r24	; 0x37
    7818:	8f a9       	ldd	r24, Y+55	; 0x37
    781a:	98 ad       	ldd	r25, Y+56	; 0x38
    781c:	01 97       	sbiw	r24, 0x01	; 1
    781e:	f1 f7       	brne	.-4      	; 0x781c <Inicio_Motor_PP+0x440>
    7820:	98 af       	std	Y+56, r25	; 0x38
    7822:	8f ab       	std	Y+55, r24	; 0x37
		_delay_ms(TIEMPO_ENTRE_STEP);
		SET_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_3);
    7824:	88 e2       	ldi	r24, 0x28	; 40
    7826:	90 e0       	ldi	r25, 0x00	; 0
    7828:	28 e2       	ldi	r18, 0x28	; 40
    782a:	30 e0       	ldi	r19, 0x00	; 0
    782c:	f9 01       	movw	r30, r18
    782e:	20 81       	ld	r18, Z
    7830:	24 60       	ori	r18, 0x04	; 4
    7832:	fc 01       	movw	r30, r24
    7834:	20 83       	st	Z, r18
    7836:	80 e0       	ldi	r24, 0x00	; 0
    7838:	90 e0       	ldi	r25, 0x00	; 0
    783a:	a0 ea       	ldi	r26, 0xA0	; 160
    783c:	b0 e4       	ldi	r27, 0x40	; 64
    783e:	89 af       	std	Y+57, r24	; 0x39
    7840:	9a af       	std	Y+58, r25	; 0x3a
    7842:	ab af       	std	Y+59, r26	; 0x3b
    7844:	bc af       	std	Y+60, r27	; 0x3c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    7846:	20 e0       	ldi	r18, 0x00	; 0
    7848:	30 e0       	ldi	r19, 0x00	; 0
    784a:	4a e7       	ldi	r20, 0x7A	; 122
    784c:	55 e4       	ldi	r21, 0x45	; 69
    784e:	69 ad       	ldd	r22, Y+57	; 0x39
    7850:	7a ad       	ldd	r23, Y+58	; 0x3a
    7852:	8b ad       	ldd	r24, Y+59	; 0x3b
    7854:	9c ad       	ldd	r25, Y+60	; 0x3c
    7856:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    785a:	dc 01       	movw	r26, r24
    785c:	cb 01       	movw	r24, r22
    785e:	9e 01       	movw	r18, r28
    7860:	23 5c       	subi	r18, 0xC3	; 195
    7862:	3f 4f       	sbci	r19, 0xFF	; 255
    7864:	f9 01       	movw	r30, r18
    7866:	80 83       	st	Z, r24
    7868:	91 83       	std	Z+1, r25	; 0x01
    786a:	a2 83       	std	Z+2, r26	; 0x02
    786c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    786e:	20 e0       	ldi	r18, 0x00	; 0
    7870:	30 e0       	ldi	r19, 0x00	; 0
    7872:	40 e8       	ldi	r20, 0x80	; 128
    7874:	5f e3       	ldi	r21, 0x3F	; 63
    7876:	ce 01       	movw	r24, r28
    7878:	cd 96       	adiw	r24, 0x3d	; 61
    787a:	fc 01       	movw	r30, r24
    787c:	60 81       	ld	r22, Z
    787e:	71 81       	ldd	r23, Z+1	; 0x01
    7880:	82 81       	ldd	r24, Z+2	; 0x02
    7882:	93 81       	ldd	r25, Z+3	; 0x03
    7884:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    7888:	88 23       	and	r24, r24
    788a:	4c f4       	brge	.+18     	; 0x789e <Inicio_Motor_PP+0x4c2>
		__ticks = 1;
    788c:	ce 01       	movw	r24, r28
    788e:	8f 5b       	subi	r24, 0xBF	; 191
    7890:	9f 4f       	sbci	r25, 0xFF	; 255
    7892:	21 e0       	ldi	r18, 0x01	; 1
    7894:	30 e0       	ldi	r19, 0x00	; 0
    7896:	fc 01       	movw	r30, r24
    7898:	31 83       	std	Z+1, r19	; 0x01
    789a:	20 83       	st	Z, r18
    789c:	67 c0       	rjmp	.+206    	; 0x796c <Inicio_Motor_PP+0x590>
	else if (__tmp > 65535)
    789e:	20 e0       	ldi	r18, 0x00	; 0
    78a0:	3f ef       	ldi	r19, 0xFF	; 255
    78a2:	4f e7       	ldi	r20, 0x7F	; 127
    78a4:	57 e4       	ldi	r21, 0x47	; 71
    78a6:	ce 01       	movw	r24, r28
    78a8:	cd 96       	adiw	r24, 0x3d	; 61
    78aa:	fc 01       	movw	r30, r24
    78ac:	60 81       	ld	r22, Z
    78ae:	71 81       	ldd	r23, Z+1	; 0x01
    78b0:	82 81       	ldd	r24, Z+2	; 0x02
    78b2:	93 81       	ldd	r25, Z+3	; 0x03
    78b4:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    78b8:	18 16       	cp	r1, r24
    78ba:	0c f0       	brlt	.+2      	; 0x78be <Inicio_Motor_PP+0x4e2>
    78bc:	46 c0       	rjmp	.+140    	; 0x794a <Inicio_Motor_PP+0x56e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    78be:	20 e0       	ldi	r18, 0x00	; 0
    78c0:	30 e0       	ldi	r19, 0x00	; 0
    78c2:	40 e2       	ldi	r20, 0x20	; 32
    78c4:	51 e4       	ldi	r21, 0x41	; 65
    78c6:	69 ad       	ldd	r22, Y+57	; 0x39
    78c8:	7a ad       	ldd	r23, Y+58	; 0x3a
    78ca:	8b ad       	ldd	r24, Y+59	; 0x3b
    78cc:	9c ad       	ldd	r25, Y+60	; 0x3c
    78ce:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    78d2:	dc 01       	movw	r26, r24
    78d4:	cb 01       	movw	r24, r22
    78d6:	8e 01       	movw	r16, r28
    78d8:	0f 5b       	subi	r16, 0xBF	; 191
    78da:	1f 4f       	sbci	r17, 0xFF	; 255
    78dc:	bc 01       	movw	r22, r24
    78de:	cd 01       	movw	r24, r26
    78e0:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    78e4:	dc 01       	movw	r26, r24
    78e6:	cb 01       	movw	r24, r22
    78e8:	f8 01       	movw	r30, r16
    78ea:	91 83       	std	Z+1, r25	; 0x01
    78ec:	80 83       	st	Z, r24
    78ee:	24 c0       	rjmp	.+72     	; 0x7938 <Inicio_Motor_PP+0x55c>
    78f0:	ce 01       	movw	r24, r28
    78f2:	8d 5b       	subi	r24, 0xBD	; 189
    78f4:	9f 4f       	sbci	r25, 0xFF	; 255
    78f6:	20 e9       	ldi	r18, 0x90	; 144
    78f8:	31 e0       	ldi	r19, 0x01	; 1
    78fa:	fc 01       	movw	r30, r24
    78fc:	31 83       	std	Z+1, r19	; 0x01
    78fe:	20 83       	st	Z, r18
    7900:	ce 01       	movw	r24, r28
    7902:	8d 5b       	subi	r24, 0xBD	; 189
    7904:	9f 4f       	sbci	r25, 0xFF	; 255
    7906:	fc 01       	movw	r30, r24
    7908:	80 81       	ld	r24, Z
    790a:	91 81       	ldd	r25, Z+1	; 0x01
    790c:	01 97       	sbiw	r24, 0x01	; 1
    790e:	f1 f7       	brne	.-4      	; 0x790c <Inicio_Motor_PP+0x530>
    7910:	9e 01       	movw	r18, r28
    7912:	2d 5b       	subi	r18, 0xBD	; 189
    7914:	3f 4f       	sbci	r19, 0xFF	; 255
    7916:	f9 01       	movw	r30, r18
    7918:	91 83       	std	Z+1, r25	; 0x01
    791a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    791c:	ce 01       	movw	r24, r28
    791e:	8f 5b       	subi	r24, 0xBF	; 191
    7920:	9f 4f       	sbci	r25, 0xFF	; 255
    7922:	9e 01       	movw	r18, r28
    7924:	2f 5b       	subi	r18, 0xBF	; 191
    7926:	3f 4f       	sbci	r19, 0xFF	; 255
    7928:	f9 01       	movw	r30, r18
    792a:	20 81       	ld	r18, Z
    792c:	31 81       	ldd	r19, Z+1	; 0x01
    792e:	21 50       	subi	r18, 0x01	; 1
    7930:	31 09       	sbc	r19, r1
    7932:	fc 01       	movw	r30, r24
    7934:	31 83       	std	Z+1, r19	; 0x01
    7936:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7938:	ce 01       	movw	r24, r28
    793a:	8f 5b       	subi	r24, 0xBF	; 191
    793c:	9f 4f       	sbci	r25, 0xFF	; 255
    793e:	fc 01       	movw	r30, r24
    7940:	80 81       	ld	r24, Z
    7942:	91 81       	ldd	r25, Z+1	; 0x01
    7944:	89 2b       	or	r24, r25
    7946:	a1 f6       	brne	.-88     	; 0x78f0 <Inicio_Motor_PP+0x514>
    7948:	2b c0       	rjmp	.+86     	; 0x79a0 <Inicio_Motor_PP+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    794a:	8e 01       	movw	r16, r28
    794c:	0f 5b       	subi	r16, 0xBF	; 191
    794e:	1f 4f       	sbci	r17, 0xFF	; 255
    7950:	ce 01       	movw	r24, r28
    7952:	cd 96       	adiw	r24, 0x3d	; 61
    7954:	fc 01       	movw	r30, r24
    7956:	60 81       	ld	r22, Z
    7958:	71 81       	ldd	r23, Z+1	; 0x01
    795a:	82 81       	ldd	r24, Z+2	; 0x02
    795c:	93 81       	ldd	r25, Z+3	; 0x03
    795e:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    7962:	dc 01       	movw	r26, r24
    7964:	cb 01       	movw	r24, r22
    7966:	f8 01       	movw	r30, r16
    7968:	91 83       	std	Z+1, r25	; 0x01
    796a:	80 83       	st	Z, r24
    796c:	ce 01       	movw	r24, r28
    796e:	8b 5b       	subi	r24, 0xBB	; 187
    7970:	9f 4f       	sbci	r25, 0xFF	; 255
    7972:	9e 01       	movw	r18, r28
    7974:	2f 5b       	subi	r18, 0xBF	; 191
    7976:	3f 4f       	sbci	r19, 0xFF	; 255
    7978:	f9 01       	movw	r30, r18
    797a:	20 81       	ld	r18, Z
    797c:	31 81       	ldd	r19, Z+1	; 0x01
    797e:	fc 01       	movw	r30, r24
    7980:	31 83       	std	Z+1, r19	; 0x01
    7982:	20 83       	st	Z, r18
    7984:	ce 01       	movw	r24, r28
    7986:	8b 5b       	subi	r24, 0xBB	; 187
    7988:	9f 4f       	sbci	r25, 0xFF	; 255
    798a:	fc 01       	movw	r30, r24
    798c:	80 81       	ld	r24, Z
    798e:	91 81       	ldd	r25, Z+1	; 0x01
    7990:	01 97       	sbiw	r24, 0x01	; 1
    7992:	f1 f7       	brne	.-4      	; 0x7990 <Inicio_Motor_PP+0x5b4>
    7994:	9e 01       	movw	r18, r28
    7996:	2b 5b       	subi	r18, 0xBB	; 187
    7998:	3f 4f       	sbci	r19, 0xFF	; 255
    799a:	f9 01       	movw	r30, r18
    799c:	91 83       	std	Z+1, r25	; 0x01
    799e:	80 83       	st	Z, r24
		_delay_ms(TIEMPO_ENTRE_STEP);
		CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_3);
    79a0:	88 e2       	ldi	r24, 0x28	; 40
    79a2:	90 e0       	ldi	r25, 0x00	; 0
    79a4:	28 e2       	ldi	r18, 0x28	; 40
    79a6:	30 e0       	ldi	r19, 0x00	; 0
    79a8:	f9 01       	movw	r30, r18
    79aa:	20 81       	ld	r18, Z
    79ac:	2b 7f       	andi	r18, 0xFB	; 251
    79ae:	fc 01       	movw	r30, r24
    79b0:	20 83       	st	Z, r18
    79b2:	9e 01       	movw	r18, r28
    79b4:	29 5b       	subi	r18, 0xB9	; 185
    79b6:	3f 4f       	sbci	r19, 0xFF	; 255
    79b8:	80 e0       	ldi	r24, 0x00	; 0
    79ba:	90 e0       	ldi	r25, 0x00	; 0
    79bc:	a0 ea       	ldi	r26, 0xA0	; 160
    79be:	b0 e4       	ldi	r27, 0x40	; 64
    79c0:	f9 01       	movw	r30, r18
    79c2:	80 83       	st	Z, r24
    79c4:	91 83       	std	Z+1, r25	; 0x01
    79c6:	a2 83       	std	Z+2, r26	; 0x02
    79c8:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    79ca:	8e 01       	movw	r16, r28
    79cc:	05 5b       	subi	r16, 0xB5	; 181
    79ce:	1f 4f       	sbci	r17, 0xFF	; 255
    79d0:	ce 01       	movw	r24, r28
    79d2:	89 5b       	subi	r24, 0xB9	; 185
    79d4:	9f 4f       	sbci	r25, 0xFF	; 255
    79d6:	20 e0       	ldi	r18, 0x00	; 0
    79d8:	30 e0       	ldi	r19, 0x00	; 0
    79da:	4a e7       	ldi	r20, 0x7A	; 122
    79dc:	55 e4       	ldi	r21, 0x45	; 69
    79de:	fc 01       	movw	r30, r24
    79e0:	60 81       	ld	r22, Z
    79e2:	71 81       	ldd	r23, Z+1	; 0x01
    79e4:	82 81       	ldd	r24, Z+2	; 0x02
    79e6:	93 81       	ldd	r25, Z+3	; 0x03
    79e8:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    79ec:	dc 01       	movw	r26, r24
    79ee:	cb 01       	movw	r24, r22
    79f0:	f8 01       	movw	r30, r16
    79f2:	80 83       	st	Z, r24
    79f4:	91 83       	std	Z+1, r25	; 0x01
    79f6:	a2 83       	std	Z+2, r26	; 0x02
    79f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    79fa:	ce 01       	movw	r24, r28
    79fc:	85 5b       	subi	r24, 0xB5	; 181
    79fe:	9f 4f       	sbci	r25, 0xFF	; 255
    7a00:	20 e0       	ldi	r18, 0x00	; 0
    7a02:	30 e0       	ldi	r19, 0x00	; 0
    7a04:	40 e8       	ldi	r20, 0x80	; 128
    7a06:	5f e3       	ldi	r21, 0x3F	; 63
    7a08:	fc 01       	movw	r30, r24
    7a0a:	60 81       	ld	r22, Z
    7a0c:	71 81       	ldd	r23, Z+1	; 0x01
    7a0e:	82 81       	ldd	r24, Z+2	; 0x02
    7a10:	93 81       	ldd	r25, Z+3	; 0x03
    7a12:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    7a16:	88 23       	and	r24, r24
    7a18:	4c f4       	brge	.+18     	; 0x7a2c <Inicio_Motor_PP+0x650>
		__ticks = 1;
    7a1a:	ce 01       	movw	r24, r28
    7a1c:	81 5b       	subi	r24, 0xB1	; 177
    7a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    7a20:	21 e0       	ldi	r18, 0x01	; 1
    7a22:	30 e0       	ldi	r19, 0x00	; 0
    7a24:	fc 01       	movw	r30, r24
    7a26:	31 83       	std	Z+1, r19	; 0x01
    7a28:	20 83       	st	Z, r18
    7a2a:	6d c0       	rjmp	.+218    	; 0x7b06 <Inicio_Motor_PP+0x72a>
	else if (__tmp > 65535)
    7a2c:	ce 01       	movw	r24, r28
    7a2e:	85 5b       	subi	r24, 0xB5	; 181
    7a30:	9f 4f       	sbci	r25, 0xFF	; 255
    7a32:	20 e0       	ldi	r18, 0x00	; 0
    7a34:	3f ef       	ldi	r19, 0xFF	; 255
    7a36:	4f e7       	ldi	r20, 0x7F	; 127
    7a38:	57 e4       	ldi	r21, 0x47	; 71
    7a3a:	fc 01       	movw	r30, r24
    7a3c:	60 81       	ld	r22, Z
    7a3e:	71 81       	ldd	r23, Z+1	; 0x01
    7a40:	82 81       	ldd	r24, Z+2	; 0x02
    7a42:	93 81       	ldd	r25, Z+3	; 0x03
    7a44:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    7a48:	18 16       	cp	r1, r24
    7a4a:	0c f0       	brlt	.+2      	; 0x7a4e <Inicio_Motor_PP+0x672>
    7a4c:	4a c0       	rjmp	.+148    	; 0x7ae2 <Inicio_Motor_PP+0x706>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7a4e:	ce 01       	movw	r24, r28
    7a50:	89 5b       	subi	r24, 0xB9	; 185
    7a52:	9f 4f       	sbci	r25, 0xFF	; 255
    7a54:	20 e0       	ldi	r18, 0x00	; 0
    7a56:	30 e0       	ldi	r19, 0x00	; 0
    7a58:	40 e2       	ldi	r20, 0x20	; 32
    7a5a:	51 e4       	ldi	r21, 0x41	; 65
    7a5c:	fc 01       	movw	r30, r24
    7a5e:	60 81       	ld	r22, Z
    7a60:	71 81       	ldd	r23, Z+1	; 0x01
    7a62:	82 81       	ldd	r24, Z+2	; 0x02
    7a64:	93 81       	ldd	r25, Z+3	; 0x03
    7a66:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    7a6a:	dc 01       	movw	r26, r24
    7a6c:	cb 01       	movw	r24, r22
    7a6e:	8e 01       	movw	r16, r28
    7a70:	01 5b       	subi	r16, 0xB1	; 177
    7a72:	1f 4f       	sbci	r17, 0xFF	; 255
    7a74:	bc 01       	movw	r22, r24
    7a76:	cd 01       	movw	r24, r26
    7a78:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    7a7c:	dc 01       	movw	r26, r24
    7a7e:	cb 01       	movw	r24, r22
    7a80:	f8 01       	movw	r30, r16
    7a82:	91 83       	std	Z+1, r25	; 0x01
    7a84:	80 83       	st	Z, r24
    7a86:	24 c0       	rjmp	.+72     	; 0x7ad0 <Inicio_Motor_PP+0x6f4>
    7a88:	ce 01       	movw	r24, r28
    7a8a:	8f 5a       	subi	r24, 0xAF	; 175
    7a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    7a8e:	20 e9       	ldi	r18, 0x90	; 144
    7a90:	31 e0       	ldi	r19, 0x01	; 1
    7a92:	fc 01       	movw	r30, r24
    7a94:	31 83       	std	Z+1, r19	; 0x01
    7a96:	20 83       	st	Z, r18
    7a98:	ce 01       	movw	r24, r28
    7a9a:	8f 5a       	subi	r24, 0xAF	; 175
    7a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    7a9e:	fc 01       	movw	r30, r24
    7aa0:	80 81       	ld	r24, Z
    7aa2:	91 81       	ldd	r25, Z+1	; 0x01
    7aa4:	01 97       	sbiw	r24, 0x01	; 1
    7aa6:	f1 f7       	brne	.-4      	; 0x7aa4 <Inicio_Motor_PP+0x6c8>
    7aa8:	9e 01       	movw	r18, r28
    7aaa:	2f 5a       	subi	r18, 0xAF	; 175
    7aac:	3f 4f       	sbci	r19, 0xFF	; 255
    7aae:	f9 01       	movw	r30, r18
    7ab0:	91 83       	std	Z+1, r25	; 0x01
    7ab2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7ab4:	ce 01       	movw	r24, r28
    7ab6:	81 5b       	subi	r24, 0xB1	; 177
    7ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    7aba:	9e 01       	movw	r18, r28
    7abc:	21 5b       	subi	r18, 0xB1	; 177
    7abe:	3f 4f       	sbci	r19, 0xFF	; 255
    7ac0:	f9 01       	movw	r30, r18
    7ac2:	20 81       	ld	r18, Z
    7ac4:	31 81       	ldd	r19, Z+1	; 0x01
    7ac6:	21 50       	subi	r18, 0x01	; 1
    7ac8:	31 09       	sbc	r19, r1
    7aca:	fc 01       	movw	r30, r24
    7acc:	31 83       	std	Z+1, r19	; 0x01
    7ace:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7ad0:	ce 01       	movw	r24, r28
    7ad2:	81 5b       	subi	r24, 0xB1	; 177
    7ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ad6:	fc 01       	movw	r30, r24
    7ad8:	80 81       	ld	r24, Z
    7ada:	91 81       	ldd	r25, Z+1	; 0x01
    7adc:	89 2b       	or	r24, r25
    7ade:	a1 f6       	brne	.-88     	; 0x7a88 <Inicio_Motor_PP+0x6ac>
    7ae0:	2c c0       	rjmp	.+88     	; 0x7b3a <Inicio_Motor_PP+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7ae2:	8e 01       	movw	r16, r28
    7ae4:	01 5b       	subi	r16, 0xB1	; 177
    7ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    7ae8:	ce 01       	movw	r24, r28
    7aea:	85 5b       	subi	r24, 0xB5	; 181
    7aec:	9f 4f       	sbci	r25, 0xFF	; 255
    7aee:	fc 01       	movw	r30, r24
    7af0:	60 81       	ld	r22, Z
    7af2:	71 81       	ldd	r23, Z+1	; 0x01
    7af4:	82 81       	ldd	r24, Z+2	; 0x02
    7af6:	93 81       	ldd	r25, Z+3	; 0x03
    7af8:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    7afc:	dc 01       	movw	r26, r24
    7afe:	cb 01       	movw	r24, r22
    7b00:	f8 01       	movw	r30, r16
    7b02:	91 83       	std	Z+1, r25	; 0x01
    7b04:	80 83       	st	Z, r24
    7b06:	ce 01       	movw	r24, r28
    7b08:	8d 5a       	subi	r24, 0xAD	; 173
    7b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    7b0c:	9e 01       	movw	r18, r28
    7b0e:	21 5b       	subi	r18, 0xB1	; 177
    7b10:	3f 4f       	sbci	r19, 0xFF	; 255
    7b12:	f9 01       	movw	r30, r18
    7b14:	20 81       	ld	r18, Z
    7b16:	31 81       	ldd	r19, Z+1	; 0x01
    7b18:	fc 01       	movw	r30, r24
    7b1a:	31 83       	std	Z+1, r19	; 0x01
    7b1c:	20 83       	st	Z, r18
    7b1e:	ce 01       	movw	r24, r28
    7b20:	8d 5a       	subi	r24, 0xAD	; 173
    7b22:	9f 4f       	sbci	r25, 0xFF	; 255
    7b24:	fc 01       	movw	r30, r24
    7b26:	80 81       	ld	r24, Z
    7b28:	91 81       	ldd	r25, Z+1	; 0x01
    7b2a:	01 97       	sbiw	r24, 0x01	; 1
    7b2c:	f1 f7       	brne	.-4      	; 0x7b2a <Inicio_Motor_PP+0x74e>
    7b2e:	9e 01       	movw	r18, r28
    7b30:	2d 5a       	subi	r18, 0xAD	; 173
    7b32:	3f 4f       	sbci	r19, 0xFF	; 255
    7b34:	f9 01       	movw	r30, r18
    7b36:	91 83       	std	Z+1, r25	; 0x01
    7b38:	80 83       	st	Z, r24
		_delay_ms(TIEMPO_ENTRE_STEP);
		SET_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_1);
    7b3a:	88 e2       	ldi	r24, 0x28	; 40
    7b3c:	90 e0       	ldi	r25, 0x00	; 0
    7b3e:	28 e2       	ldi	r18, 0x28	; 40
    7b40:	30 e0       	ldi	r19, 0x00	; 0
    7b42:	f9 01       	movw	r30, r18
    7b44:	20 81       	ld	r18, Z
    7b46:	21 60       	ori	r18, 0x01	; 1
    7b48:	fc 01       	movw	r30, r24
    7b4a:	20 83       	st	Z, r18
    7b4c:	9e 01       	movw	r18, r28
    7b4e:	2b 5a       	subi	r18, 0xAB	; 171
    7b50:	3f 4f       	sbci	r19, 0xFF	; 255
    7b52:	80 e0       	ldi	r24, 0x00	; 0
    7b54:	90 e0       	ldi	r25, 0x00	; 0
    7b56:	a0 ea       	ldi	r26, 0xA0	; 160
    7b58:	b0 e4       	ldi	r27, 0x40	; 64
    7b5a:	f9 01       	movw	r30, r18
    7b5c:	80 83       	st	Z, r24
    7b5e:	91 83       	std	Z+1, r25	; 0x01
    7b60:	a2 83       	std	Z+2, r26	; 0x02
    7b62:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    7b64:	8e 01       	movw	r16, r28
    7b66:	07 5a       	subi	r16, 0xA7	; 167
    7b68:	1f 4f       	sbci	r17, 0xFF	; 255
    7b6a:	ce 01       	movw	r24, r28
    7b6c:	8b 5a       	subi	r24, 0xAB	; 171
    7b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    7b70:	20 e0       	ldi	r18, 0x00	; 0
    7b72:	30 e0       	ldi	r19, 0x00	; 0
    7b74:	4a e7       	ldi	r20, 0x7A	; 122
    7b76:	55 e4       	ldi	r21, 0x45	; 69
    7b78:	fc 01       	movw	r30, r24
    7b7a:	60 81       	ld	r22, Z
    7b7c:	71 81       	ldd	r23, Z+1	; 0x01
    7b7e:	82 81       	ldd	r24, Z+2	; 0x02
    7b80:	93 81       	ldd	r25, Z+3	; 0x03
    7b82:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    7b86:	dc 01       	movw	r26, r24
    7b88:	cb 01       	movw	r24, r22
    7b8a:	f8 01       	movw	r30, r16
    7b8c:	80 83       	st	Z, r24
    7b8e:	91 83       	std	Z+1, r25	; 0x01
    7b90:	a2 83       	std	Z+2, r26	; 0x02
    7b92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7b94:	ce 01       	movw	r24, r28
    7b96:	87 5a       	subi	r24, 0xA7	; 167
    7b98:	9f 4f       	sbci	r25, 0xFF	; 255
    7b9a:	20 e0       	ldi	r18, 0x00	; 0
    7b9c:	30 e0       	ldi	r19, 0x00	; 0
    7b9e:	40 e8       	ldi	r20, 0x80	; 128
    7ba0:	5f e3       	ldi	r21, 0x3F	; 63
    7ba2:	fc 01       	movw	r30, r24
    7ba4:	60 81       	ld	r22, Z
    7ba6:	71 81       	ldd	r23, Z+1	; 0x01
    7ba8:	82 81       	ldd	r24, Z+2	; 0x02
    7baa:	93 81       	ldd	r25, Z+3	; 0x03
    7bac:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    7bb0:	88 23       	and	r24, r24
    7bb2:	4c f4       	brge	.+18     	; 0x7bc6 <Inicio_Motor_PP+0x7ea>
		__ticks = 1;
    7bb4:	ce 01       	movw	r24, r28
    7bb6:	83 5a       	subi	r24, 0xA3	; 163
    7bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    7bba:	21 e0       	ldi	r18, 0x01	; 1
    7bbc:	30 e0       	ldi	r19, 0x00	; 0
    7bbe:	fc 01       	movw	r30, r24
    7bc0:	31 83       	std	Z+1, r19	; 0x01
    7bc2:	20 83       	st	Z, r18
    7bc4:	6d c0       	rjmp	.+218    	; 0x7ca0 <Inicio_Motor_PP+0x8c4>
	else if (__tmp > 65535)
    7bc6:	ce 01       	movw	r24, r28
    7bc8:	87 5a       	subi	r24, 0xA7	; 167
    7bca:	9f 4f       	sbci	r25, 0xFF	; 255
    7bcc:	20 e0       	ldi	r18, 0x00	; 0
    7bce:	3f ef       	ldi	r19, 0xFF	; 255
    7bd0:	4f e7       	ldi	r20, 0x7F	; 127
    7bd2:	57 e4       	ldi	r21, 0x47	; 71
    7bd4:	fc 01       	movw	r30, r24
    7bd6:	60 81       	ld	r22, Z
    7bd8:	71 81       	ldd	r23, Z+1	; 0x01
    7bda:	82 81       	ldd	r24, Z+2	; 0x02
    7bdc:	93 81       	ldd	r25, Z+3	; 0x03
    7bde:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    7be2:	18 16       	cp	r1, r24
    7be4:	0c f0       	brlt	.+2      	; 0x7be8 <Inicio_Motor_PP+0x80c>
    7be6:	4a c0       	rjmp	.+148    	; 0x7c7c <Inicio_Motor_PP+0x8a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7be8:	ce 01       	movw	r24, r28
    7bea:	8b 5a       	subi	r24, 0xAB	; 171
    7bec:	9f 4f       	sbci	r25, 0xFF	; 255
    7bee:	20 e0       	ldi	r18, 0x00	; 0
    7bf0:	30 e0       	ldi	r19, 0x00	; 0
    7bf2:	40 e2       	ldi	r20, 0x20	; 32
    7bf4:	51 e4       	ldi	r21, 0x41	; 65
    7bf6:	fc 01       	movw	r30, r24
    7bf8:	60 81       	ld	r22, Z
    7bfa:	71 81       	ldd	r23, Z+1	; 0x01
    7bfc:	82 81       	ldd	r24, Z+2	; 0x02
    7bfe:	93 81       	ldd	r25, Z+3	; 0x03
    7c00:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    7c04:	dc 01       	movw	r26, r24
    7c06:	cb 01       	movw	r24, r22
    7c08:	8e 01       	movw	r16, r28
    7c0a:	03 5a       	subi	r16, 0xA3	; 163
    7c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    7c0e:	bc 01       	movw	r22, r24
    7c10:	cd 01       	movw	r24, r26
    7c12:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    7c16:	dc 01       	movw	r26, r24
    7c18:	cb 01       	movw	r24, r22
    7c1a:	f8 01       	movw	r30, r16
    7c1c:	91 83       	std	Z+1, r25	; 0x01
    7c1e:	80 83       	st	Z, r24
    7c20:	24 c0       	rjmp	.+72     	; 0x7c6a <Inicio_Motor_PP+0x88e>
    7c22:	ce 01       	movw	r24, r28
    7c24:	81 5a       	subi	r24, 0xA1	; 161
    7c26:	9f 4f       	sbci	r25, 0xFF	; 255
    7c28:	20 e9       	ldi	r18, 0x90	; 144
    7c2a:	31 e0       	ldi	r19, 0x01	; 1
    7c2c:	fc 01       	movw	r30, r24
    7c2e:	31 83       	std	Z+1, r19	; 0x01
    7c30:	20 83       	st	Z, r18
    7c32:	ce 01       	movw	r24, r28
    7c34:	81 5a       	subi	r24, 0xA1	; 161
    7c36:	9f 4f       	sbci	r25, 0xFF	; 255
    7c38:	fc 01       	movw	r30, r24
    7c3a:	80 81       	ld	r24, Z
    7c3c:	91 81       	ldd	r25, Z+1	; 0x01
    7c3e:	01 97       	sbiw	r24, 0x01	; 1
    7c40:	f1 f7       	brne	.-4      	; 0x7c3e <Inicio_Motor_PP+0x862>
    7c42:	9e 01       	movw	r18, r28
    7c44:	21 5a       	subi	r18, 0xA1	; 161
    7c46:	3f 4f       	sbci	r19, 0xFF	; 255
    7c48:	f9 01       	movw	r30, r18
    7c4a:	91 83       	std	Z+1, r25	; 0x01
    7c4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7c4e:	ce 01       	movw	r24, r28
    7c50:	83 5a       	subi	r24, 0xA3	; 163
    7c52:	9f 4f       	sbci	r25, 0xFF	; 255
    7c54:	9e 01       	movw	r18, r28
    7c56:	23 5a       	subi	r18, 0xA3	; 163
    7c58:	3f 4f       	sbci	r19, 0xFF	; 255
    7c5a:	f9 01       	movw	r30, r18
    7c5c:	20 81       	ld	r18, Z
    7c5e:	31 81       	ldd	r19, Z+1	; 0x01
    7c60:	21 50       	subi	r18, 0x01	; 1
    7c62:	31 09       	sbc	r19, r1
    7c64:	fc 01       	movw	r30, r24
    7c66:	31 83       	std	Z+1, r19	; 0x01
    7c68:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7c6a:	ce 01       	movw	r24, r28
    7c6c:	83 5a       	subi	r24, 0xA3	; 163
    7c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    7c70:	fc 01       	movw	r30, r24
    7c72:	80 81       	ld	r24, Z
    7c74:	91 81       	ldd	r25, Z+1	; 0x01
    7c76:	89 2b       	or	r24, r25
    7c78:	a1 f6       	brne	.-88     	; 0x7c22 <Inicio_Motor_PP+0x846>
    7c7a:	2c c0       	rjmp	.+88     	; 0x7cd4 <Inicio_Motor_PP+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7c7c:	8e 01       	movw	r16, r28
    7c7e:	03 5a       	subi	r16, 0xA3	; 163
    7c80:	1f 4f       	sbci	r17, 0xFF	; 255
    7c82:	ce 01       	movw	r24, r28
    7c84:	87 5a       	subi	r24, 0xA7	; 167
    7c86:	9f 4f       	sbci	r25, 0xFF	; 255
    7c88:	fc 01       	movw	r30, r24
    7c8a:	60 81       	ld	r22, Z
    7c8c:	71 81       	ldd	r23, Z+1	; 0x01
    7c8e:	82 81       	ldd	r24, Z+2	; 0x02
    7c90:	93 81       	ldd	r25, Z+3	; 0x03
    7c92:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    7c96:	dc 01       	movw	r26, r24
    7c98:	cb 01       	movw	r24, r22
    7c9a:	f8 01       	movw	r30, r16
    7c9c:	91 83       	std	Z+1, r25	; 0x01
    7c9e:	80 83       	st	Z, r24
    7ca0:	ce 01       	movw	r24, r28
    7ca2:	8f 59       	subi	r24, 0x9F	; 159
    7ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ca6:	9e 01       	movw	r18, r28
    7ca8:	23 5a       	subi	r18, 0xA3	; 163
    7caa:	3f 4f       	sbci	r19, 0xFF	; 255
    7cac:	f9 01       	movw	r30, r18
    7cae:	20 81       	ld	r18, Z
    7cb0:	31 81       	ldd	r19, Z+1	; 0x01
    7cb2:	fc 01       	movw	r30, r24
    7cb4:	31 83       	std	Z+1, r19	; 0x01
    7cb6:	20 83       	st	Z, r18
    7cb8:	ce 01       	movw	r24, r28
    7cba:	8f 59       	subi	r24, 0x9F	; 159
    7cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    7cbe:	fc 01       	movw	r30, r24
    7cc0:	80 81       	ld	r24, Z
    7cc2:	91 81       	ldd	r25, Z+1	; 0x01
    7cc4:	01 97       	sbiw	r24, 0x01	; 1
    7cc6:	f1 f7       	brne	.-4      	; 0x7cc4 <Inicio_Motor_PP+0x8e8>
    7cc8:	9e 01       	movw	r18, r28
    7cca:	2f 59       	subi	r18, 0x9F	; 159
    7ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    7cce:	f9 01       	movw	r30, r18
    7cd0:	91 83       	std	Z+1, r25	; 0x01
    7cd2:	80 83       	st	Z, r24
		_delay_ms(TIEMPO_ENTRE_STEP);
		CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_1);
    7cd4:	88 e2       	ldi	r24, 0x28	; 40
    7cd6:	90 e0       	ldi	r25, 0x00	; 0
    7cd8:	28 e2       	ldi	r18, 0x28	; 40
    7cda:	30 e0       	ldi	r19, 0x00	; 0
    7cdc:	f9 01       	movw	r30, r18
    7cde:	20 81       	ld	r18, Z
    7ce0:	2e 7f       	andi	r18, 0xFE	; 254
    7ce2:	fc 01       	movw	r30, r24
    7ce4:	20 83       	st	Z, r18
    7ce6:	9e 01       	movw	r18, r28
    7ce8:	2d 59       	subi	r18, 0x9D	; 157
    7cea:	3f 4f       	sbci	r19, 0xFF	; 255
    7cec:	80 e0       	ldi	r24, 0x00	; 0
    7cee:	90 e0       	ldi	r25, 0x00	; 0
    7cf0:	a0 ea       	ldi	r26, 0xA0	; 160
    7cf2:	b0 e4       	ldi	r27, 0x40	; 64
    7cf4:	f9 01       	movw	r30, r18
    7cf6:	80 83       	st	Z, r24
    7cf8:	91 83       	std	Z+1, r25	; 0x01
    7cfa:	a2 83       	std	Z+2, r26	; 0x02
    7cfc:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    7cfe:	8e 01       	movw	r16, r28
    7d00:	09 59       	subi	r16, 0x99	; 153
    7d02:	1f 4f       	sbci	r17, 0xFF	; 255
    7d04:	ce 01       	movw	r24, r28
    7d06:	8d 59       	subi	r24, 0x9D	; 157
    7d08:	9f 4f       	sbci	r25, 0xFF	; 255
    7d0a:	20 e0       	ldi	r18, 0x00	; 0
    7d0c:	30 e0       	ldi	r19, 0x00	; 0
    7d0e:	4a e7       	ldi	r20, 0x7A	; 122
    7d10:	55 e4       	ldi	r21, 0x45	; 69
    7d12:	fc 01       	movw	r30, r24
    7d14:	60 81       	ld	r22, Z
    7d16:	71 81       	ldd	r23, Z+1	; 0x01
    7d18:	82 81       	ldd	r24, Z+2	; 0x02
    7d1a:	93 81       	ldd	r25, Z+3	; 0x03
    7d1c:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    7d20:	dc 01       	movw	r26, r24
    7d22:	cb 01       	movw	r24, r22
    7d24:	f8 01       	movw	r30, r16
    7d26:	80 83       	st	Z, r24
    7d28:	91 83       	std	Z+1, r25	; 0x01
    7d2a:	a2 83       	std	Z+2, r26	; 0x02
    7d2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7d2e:	ce 01       	movw	r24, r28
    7d30:	89 59       	subi	r24, 0x99	; 153
    7d32:	9f 4f       	sbci	r25, 0xFF	; 255
    7d34:	20 e0       	ldi	r18, 0x00	; 0
    7d36:	30 e0       	ldi	r19, 0x00	; 0
    7d38:	40 e8       	ldi	r20, 0x80	; 128
    7d3a:	5f e3       	ldi	r21, 0x3F	; 63
    7d3c:	fc 01       	movw	r30, r24
    7d3e:	60 81       	ld	r22, Z
    7d40:	71 81       	ldd	r23, Z+1	; 0x01
    7d42:	82 81       	ldd	r24, Z+2	; 0x02
    7d44:	93 81       	ldd	r25, Z+3	; 0x03
    7d46:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    7d4a:	88 23       	and	r24, r24
    7d4c:	4c f4       	brge	.+18     	; 0x7d60 <Inicio_Motor_PP+0x984>
		__ticks = 1;
    7d4e:	ce 01       	movw	r24, r28
    7d50:	85 59       	subi	r24, 0x95	; 149
    7d52:	9f 4f       	sbci	r25, 0xFF	; 255
    7d54:	21 e0       	ldi	r18, 0x01	; 1
    7d56:	30 e0       	ldi	r19, 0x00	; 0
    7d58:	fc 01       	movw	r30, r24
    7d5a:	31 83       	std	Z+1, r19	; 0x01
    7d5c:	20 83       	st	Z, r18
    7d5e:	6d c0       	rjmp	.+218    	; 0x7e3a <Inicio_Motor_PP+0xa5e>
	else if (__tmp > 65535)
    7d60:	ce 01       	movw	r24, r28
    7d62:	89 59       	subi	r24, 0x99	; 153
    7d64:	9f 4f       	sbci	r25, 0xFF	; 255
    7d66:	20 e0       	ldi	r18, 0x00	; 0
    7d68:	3f ef       	ldi	r19, 0xFF	; 255
    7d6a:	4f e7       	ldi	r20, 0x7F	; 127
    7d6c:	57 e4       	ldi	r21, 0x47	; 71
    7d6e:	fc 01       	movw	r30, r24
    7d70:	60 81       	ld	r22, Z
    7d72:	71 81       	ldd	r23, Z+1	; 0x01
    7d74:	82 81       	ldd	r24, Z+2	; 0x02
    7d76:	93 81       	ldd	r25, Z+3	; 0x03
    7d78:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    7d7c:	18 16       	cp	r1, r24
    7d7e:	0c f0       	brlt	.+2      	; 0x7d82 <Inicio_Motor_PP+0x9a6>
    7d80:	4a c0       	rjmp	.+148    	; 0x7e16 <Inicio_Motor_PP+0xa3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7d82:	ce 01       	movw	r24, r28
    7d84:	8d 59       	subi	r24, 0x9D	; 157
    7d86:	9f 4f       	sbci	r25, 0xFF	; 255
    7d88:	20 e0       	ldi	r18, 0x00	; 0
    7d8a:	30 e0       	ldi	r19, 0x00	; 0
    7d8c:	40 e2       	ldi	r20, 0x20	; 32
    7d8e:	51 e4       	ldi	r21, 0x41	; 65
    7d90:	fc 01       	movw	r30, r24
    7d92:	60 81       	ld	r22, Z
    7d94:	71 81       	ldd	r23, Z+1	; 0x01
    7d96:	82 81       	ldd	r24, Z+2	; 0x02
    7d98:	93 81       	ldd	r25, Z+3	; 0x03
    7d9a:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    7d9e:	dc 01       	movw	r26, r24
    7da0:	cb 01       	movw	r24, r22
    7da2:	8e 01       	movw	r16, r28
    7da4:	05 59       	subi	r16, 0x95	; 149
    7da6:	1f 4f       	sbci	r17, 0xFF	; 255
    7da8:	bc 01       	movw	r22, r24
    7daa:	cd 01       	movw	r24, r26
    7dac:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    7db0:	dc 01       	movw	r26, r24
    7db2:	cb 01       	movw	r24, r22
    7db4:	f8 01       	movw	r30, r16
    7db6:	91 83       	std	Z+1, r25	; 0x01
    7db8:	80 83       	st	Z, r24
    7dba:	24 c0       	rjmp	.+72     	; 0x7e04 <Inicio_Motor_PP+0xa28>
    7dbc:	ce 01       	movw	r24, r28
    7dbe:	83 59       	subi	r24, 0x93	; 147
    7dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    7dc2:	20 e9       	ldi	r18, 0x90	; 144
    7dc4:	31 e0       	ldi	r19, 0x01	; 1
    7dc6:	fc 01       	movw	r30, r24
    7dc8:	31 83       	std	Z+1, r19	; 0x01
    7dca:	20 83       	st	Z, r18
    7dcc:	ce 01       	movw	r24, r28
    7dce:	83 59       	subi	r24, 0x93	; 147
    7dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    7dd2:	fc 01       	movw	r30, r24
    7dd4:	80 81       	ld	r24, Z
    7dd6:	91 81       	ldd	r25, Z+1	; 0x01
    7dd8:	01 97       	sbiw	r24, 0x01	; 1
    7dda:	f1 f7       	brne	.-4      	; 0x7dd8 <Inicio_Motor_PP+0x9fc>
    7ddc:	9e 01       	movw	r18, r28
    7dde:	23 59       	subi	r18, 0x93	; 147
    7de0:	3f 4f       	sbci	r19, 0xFF	; 255
    7de2:	f9 01       	movw	r30, r18
    7de4:	91 83       	std	Z+1, r25	; 0x01
    7de6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7de8:	ce 01       	movw	r24, r28
    7dea:	85 59       	subi	r24, 0x95	; 149
    7dec:	9f 4f       	sbci	r25, 0xFF	; 255
    7dee:	9e 01       	movw	r18, r28
    7df0:	25 59       	subi	r18, 0x95	; 149
    7df2:	3f 4f       	sbci	r19, 0xFF	; 255
    7df4:	f9 01       	movw	r30, r18
    7df6:	20 81       	ld	r18, Z
    7df8:	31 81       	ldd	r19, Z+1	; 0x01
    7dfa:	21 50       	subi	r18, 0x01	; 1
    7dfc:	31 09       	sbc	r19, r1
    7dfe:	fc 01       	movw	r30, r24
    7e00:	31 83       	std	Z+1, r19	; 0x01
    7e02:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7e04:	ce 01       	movw	r24, r28
    7e06:	85 59       	subi	r24, 0x95	; 149
    7e08:	9f 4f       	sbci	r25, 0xFF	; 255
    7e0a:	fc 01       	movw	r30, r24
    7e0c:	80 81       	ld	r24, Z
    7e0e:	91 81       	ldd	r25, Z+1	; 0x01
    7e10:	89 2b       	or	r24, r25
    7e12:	a1 f6       	brne	.-88     	; 0x7dbc <Inicio_Motor_PP+0x9e0>
    7e14:	2c c0       	rjmp	.+88     	; 0x7e6e <Inicio_Motor_PP+0xa92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7e16:	8e 01       	movw	r16, r28
    7e18:	05 59       	subi	r16, 0x95	; 149
    7e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    7e1c:	ce 01       	movw	r24, r28
    7e1e:	89 59       	subi	r24, 0x99	; 153
    7e20:	9f 4f       	sbci	r25, 0xFF	; 255
    7e22:	fc 01       	movw	r30, r24
    7e24:	60 81       	ld	r22, Z
    7e26:	71 81       	ldd	r23, Z+1	; 0x01
    7e28:	82 81       	ldd	r24, Z+2	; 0x02
    7e2a:	93 81       	ldd	r25, Z+3	; 0x03
    7e2c:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    7e30:	dc 01       	movw	r26, r24
    7e32:	cb 01       	movw	r24, r22
    7e34:	f8 01       	movw	r30, r16
    7e36:	91 83       	std	Z+1, r25	; 0x01
    7e38:	80 83       	st	Z, r24
    7e3a:	ce 01       	movw	r24, r28
    7e3c:	81 59       	subi	r24, 0x91	; 145
    7e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    7e40:	9e 01       	movw	r18, r28
    7e42:	25 59       	subi	r18, 0x95	; 149
    7e44:	3f 4f       	sbci	r19, 0xFF	; 255
    7e46:	f9 01       	movw	r30, r18
    7e48:	20 81       	ld	r18, Z
    7e4a:	31 81       	ldd	r19, Z+1	; 0x01
    7e4c:	fc 01       	movw	r30, r24
    7e4e:	31 83       	std	Z+1, r19	; 0x01
    7e50:	20 83       	st	Z, r18
    7e52:	ce 01       	movw	r24, r28
    7e54:	81 59       	subi	r24, 0x91	; 145
    7e56:	9f 4f       	sbci	r25, 0xFF	; 255
    7e58:	fc 01       	movw	r30, r24
    7e5a:	80 81       	ld	r24, Z
    7e5c:	91 81       	ldd	r25, Z+1	; 0x01
    7e5e:	01 97       	sbiw	r24, 0x01	; 1
    7e60:	f1 f7       	brne	.-4      	; 0x7e5e <Inicio_Motor_PP+0xa82>
    7e62:	9e 01       	movw	r18, r28
    7e64:	21 59       	subi	r18, 0x91	; 145
    7e66:	3f 4f       	sbci	r19, 0xFF	; 255
    7e68:	f9 01       	movw	r30, r18
    7e6a:	91 83       	std	Z+1, r25	; 0x01
    7e6c:	80 83       	st	Z, r24
		_delay_ms(TIEMPO_ENTRE_STEP);

		stepToRotate += 4;
    7e6e:	80 91 92 04 	lds	r24, 0x0492
    7e72:	90 91 93 04 	lds	r25, 0x0493
    7e76:	04 96       	adiw	r24, 0x04	; 4
    7e78:	90 93 93 04 	sts	0x0493, r25
    7e7c:	80 93 92 04 	sts	0x0492, r24
	CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_3);
	CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_4);

	// cierro completo
	stepToRotate = -STEP_FULL_CERRADO_INICIO;
	while (stepToRotate < 0){//1->4->2->3->1
    7e80:	80 91 92 04 	lds	r24, 0x0492
    7e84:	90 91 93 04 	lds	r25, 0x0493
    7e88:	99 23       	and	r25, r25
    7e8a:	0c f4       	brge	.+2      	; 0x7e8e <Inicio_Motor_PP+0xab2>
    7e8c:	df ca       	rjmp	.-2626   	; 0x744c <Inicio_Motor_PP+0x70>

		stepToRotate += 4;
	}

	// abro al minimo
	stepToRotate = MIN_MOTOR_PP_ACUMULADOS;
    7e8e:	80 e1       	ldi	r24, 0x10	; 16
    7e90:	90 e0       	ldi	r25, 0x00	; 0
    7e92:	90 93 93 04 	sts	0x0493, r25
    7e96:	80 93 92 04 	sts	0x0492, r24
	while (stepToRotate > 0){//1->3->2->4->1
    7e9a:	71 c6       	rjmp	.+3298   	; 0x8b7e <Inicio_Motor_PP+0x17a2>
		SET_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_1);
    7e9c:	88 e2       	ldi	r24, 0x28	; 40
    7e9e:	90 e0       	ldi	r25, 0x00	; 0
    7ea0:	28 e2       	ldi	r18, 0x28	; 40
    7ea2:	30 e0       	ldi	r19, 0x00	; 0
    7ea4:	f9 01       	movw	r30, r18
    7ea6:	20 81       	ld	r18, Z
    7ea8:	21 60       	ori	r18, 0x01	; 1
    7eaa:	fc 01       	movw	r30, r24
    7eac:	20 83       	st	Z, r18
    7eae:	9e 01       	movw	r18, r28
    7eb0:	2f 58       	subi	r18, 0x8F	; 143
    7eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    7eb4:	80 e0       	ldi	r24, 0x00	; 0
    7eb6:	90 e0       	ldi	r25, 0x00	; 0
    7eb8:	a0 ea       	ldi	r26, 0xA0	; 160
    7eba:	b0 e4       	ldi	r27, 0x40	; 64
    7ebc:	f9 01       	movw	r30, r18
    7ebe:	80 83       	st	Z, r24
    7ec0:	91 83       	std	Z+1, r25	; 0x01
    7ec2:	a2 83       	std	Z+2, r26	; 0x02
    7ec4:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    7ec6:	8e 01       	movw	r16, r28
    7ec8:	0b 58       	subi	r16, 0x8B	; 139
    7eca:	1f 4f       	sbci	r17, 0xFF	; 255
    7ecc:	ce 01       	movw	r24, r28
    7ece:	8f 58       	subi	r24, 0x8F	; 143
    7ed0:	9f 4f       	sbci	r25, 0xFF	; 255
    7ed2:	20 e0       	ldi	r18, 0x00	; 0
    7ed4:	30 e0       	ldi	r19, 0x00	; 0
    7ed6:	4a e7       	ldi	r20, 0x7A	; 122
    7ed8:	55 e4       	ldi	r21, 0x45	; 69
    7eda:	fc 01       	movw	r30, r24
    7edc:	60 81       	ld	r22, Z
    7ede:	71 81       	ldd	r23, Z+1	; 0x01
    7ee0:	82 81       	ldd	r24, Z+2	; 0x02
    7ee2:	93 81       	ldd	r25, Z+3	; 0x03
    7ee4:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    7ee8:	dc 01       	movw	r26, r24
    7eea:	cb 01       	movw	r24, r22
    7eec:	f8 01       	movw	r30, r16
    7eee:	80 83       	st	Z, r24
    7ef0:	91 83       	std	Z+1, r25	; 0x01
    7ef2:	a2 83       	std	Z+2, r26	; 0x02
    7ef4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7ef6:	ce 01       	movw	r24, r28
    7ef8:	8b 58       	subi	r24, 0x8B	; 139
    7efa:	9f 4f       	sbci	r25, 0xFF	; 255
    7efc:	20 e0       	ldi	r18, 0x00	; 0
    7efe:	30 e0       	ldi	r19, 0x00	; 0
    7f00:	40 e8       	ldi	r20, 0x80	; 128
    7f02:	5f e3       	ldi	r21, 0x3F	; 63
    7f04:	fc 01       	movw	r30, r24
    7f06:	60 81       	ld	r22, Z
    7f08:	71 81       	ldd	r23, Z+1	; 0x01
    7f0a:	82 81       	ldd	r24, Z+2	; 0x02
    7f0c:	93 81       	ldd	r25, Z+3	; 0x03
    7f0e:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    7f12:	88 23       	and	r24, r24
    7f14:	4c f4       	brge	.+18     	; 0x7f28 <Inicio_Motor_PP+0xb4c>
		__ticks = 1;
    7f16:	ce 01       	movw	r24, r28
    7f18:	87 58       	subi	r24, 0x87	; 135
    7f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    7f1c:	21 e0       	ldi	r18, 0x01	; 1
    7f1e:	30 e0       	ldi	r19, 0x00	; 0
    7f20:	fc 01       	movw	r30, r24
    7f22:	31 83       	std	Z+1, r19	; 0x01
    7f24:	20 83       	st	Z, r18
    7f26:	6d c0       	rjmp	.+218    	; 0x8002 <Inicio_Motor_PP+0xc26>
	else if (__tmp > 65535)
    7f28:	ce 01       	movw	r24, r28
    7f2a:	8b 58       	subi	r24, 0x8B	; 139
    7f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    7f2e:	20 e0       	ldi	r18, 0x00	; 0
    7f30:	3f ef       	ldi	r19, 0xFF	; 255
    7f32:	4f e7       	ldi	r20, 0x7F	; 127
    7f34:	57 e4       	ldi	r21, 0x47	; 71
    7f36:	fc 01       	movw	r30, r24
    7f38:	60 81       	ld	r22, Z
    7f3a:	71 81       	ldd	r23, Z+1	; 0x01
    7f3c:	82 81       	ldd	r24, Z+2	; 0x02
    7f3e:	93 81       	ldd	r25, Z+3	; 0x03
    7f40:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    7f44:	18 16       	cp	r1, r24
    7f46:	0c f0       	brlt	.+2      	; 0x7f4a <Inicio_Motor_PP+0xb6e>
    7f48:	4a c0       	rjmp	.+148    	; 0x7fde <Inicio_Motor_PP+0xc02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7f4a:	ce 01       	movw	r24, r28
    7f4c:	8f 58       	subi	r24, 0x8F	; 143
    7f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    7f50:	20 e0       	ldi	r18, 0x00	; 0
    7f52:	30 e0       	ldi	r19, 0x00	; 0
    7f54:	40 e2       	ldi	r20, 0x20	; 32
    7f56:	51 e4       	ldi	r21, 0x41	; 65
    7f58:	fc 01       	movw	r30, r24
    7f5a:	60 81       	ld	r22, Z
    7f5c:	71 81       	ldd	r23, Z+1	; 0x01
    7f5e:	82 81       	ldd	r24, Z+2	; 0x02
    7f60:	93 81       	ldd	r25, Z+3	; 0x03
    7f62:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    7f66:	dc 01       	movw	r26, r24
    7f68:	cb 01       	movw	r24, r22
    7f6a:	8e 01       	movw	r16, r28
    7f6c:	07 58       	subi	r16, 0x87	; 135
    7f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    7f70:	bc 01       	movw	r22, r24
    7f72:	cd 01       	movw	r24, r26
    7f74:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    7f78:	dc 01       	movw	r26, r24
    7f7a:	cb 01       	movw	r24, r22
    7f7c:	f8 01       	movw	r30, r16
    7f7e:	91 83       	std	Z+1, r25	; 0x01
    7f80:	80 83       	st	Z, r24
    7f82:	24 c0       	rjmp	.+72     	; 0x7fcc <Inicio_Motor_PP+0xbf0>
    7f84:	ce 01       	movw	r24, r28
    7f86:	85 58       	subi	r24, 0x85	; 133
    7f88:	9f 4f       	sbci	r25, 0xFF	; 255
    7f8a:	20 e9       	ldi	r18, 0x90	; 144
    7f8c:	31 e0       	ldi	r19, 0x01	; 1
    7f8e:	fc 01       	movw	r30, r24
    7f90:	31 83       	std	Z+1, r19	; 0x01
    7f92:	20 83       	st	Z, r18
    7f94:	ce 01       	movw	r24, r28
    7f96:	85 58       	subi	r24, 0x85	; 133
    7f98:	9f 4f       	sbci	r25, 0xFF	; 255
    7f9a:	fc 01       	movw	r30, r24
    7f9c:	80 81       	ld	r24, Z
    7f9e:	91 81       	ldd	r25, Z+1	; 0x01
    7fa0:	01 97       	sbiw	r24, 0x01	; 1
    7fa2:	f1 f7       	brne	.-4      	; 0x7fa0 <Inicio_Motor_PP+0xbc4>
    7fa4:	9e 01       	movw	r18, r28
    7fa6:	25 58       	subi	r18, 0x85	; 133
    7fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    7faa:	f9 01       	movw	r30, r18
    7fac:	91 83       	std	Z+1, r25	; 0x01
    7fae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7fb0:	ce 01       	movw	r24, r28
    7fb2:	87 58       	subi	r24, 0x87	; 135
    7fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    7fb6:	9e 01       	movw	r18, r28
    7fb8:	27 58       	subi	r18, 0x87	; 135
    7fba:	3f 4f       	sbci	r19, 0xFF	; 255
    7fbc:	f9 01       	movw	r30, r18
    7fbe:	20 81       	ld	r18, Z
    7fc0:	31 81       	ldd	r19, Z+1	; 0x01
    7fc2:	21 50       	subi	r18, 0x01	; 1
    7fc4:	31 09       	sbc	r19, r1
    7fc6:	fc 01       	movw	r30, r24
    7fc8:	31 83       	std	Z+1, r19	; 0x01
    7fca:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7fcc:	ce 01       	movw	r24, r28
    7fce:	87 58       	subi	r24, 0x87	; 135
    7fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    7fd2:	fc 01       	movw	r30, r24
    7fd4:	80 81       	ld	r24, Z
    7fd6:	91 81       	ldd	r25, Z+1	; 0x01
    7fd8:	89 2b       	or	r24, r25
    7fda:	a1 f6       	brne	.-88     	; 0x7f84 <Inicio_Motor_PP+0xba8>
    7fdc:	2c c0       	rjmp	.+88     	; 0x8036 <Inicio_Motor_PP+0xc5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7fde:	8e 01       	movw	r16, r28
    7fe0:	07 58       	subi	r16, 0x87	; 135
    7fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    7fe4:	ce 01       	movw	r24, r28
    7fe6:	8b 58       	subi	r24, 0x8B	; 139
    7fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    7fea:	fc 01       	movw	r30, r24
    7fec:	60 81       	ld	r22, Z
    7fee:	71 81       	ldd	r23, Z+1	; 0x01
    7ff0:	82 81       	ldd	r24, Z+2	; 0x02
    7ff2:	93 81       	ldd	r25, Z+3	; 0x03
    7ff4:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    7ff8:	dc 01       	movw	r26, r24
    7ffa:	cb 01       	movw	r24, r22
    7ffc:	f8 01       	movw	r30, r16
    7ffe:	91 83       	std	Z+1, r25	; 0x01
    8000:	80 83       	st	Z, r24
    8002:	ce 01       	movw	r24, r28
    8004:	83 58       	subi	r24, 0x83	; 131
    8006:	9f 4f       	sbci	r25, 0xFF	; 255
    8008:	9e 01       	movw	r18, r28
    800a:	27 58       	subi	r18, 0x87	; 135
    800c:	3f 4f       	sbci	r19, 0xFF	; 255
    800e:	f9 01       	movw	r30, r18
    8010:	20 81       	ld	r18, Z
    8012:	31 81       	ldd	r19, Z+1	; 0x01
    8014:	fc 01       	movw	r30, r24
    8016:	31 83       	std	Z+1, r19	; 0x01
    8018:	20 83       	st	Z, r18
    801a:	ce 01       	movw	r24, r28
    801c:	83 58       	subi	r24, 0x83	; 131
    801e:	9f 4f       	sbci	r25, 0xFF	; 255
    8020:	fc 01       	movw	r30, r24
    8022:	80 81       	ld	r24, Z
    8024:	91 81       	ldd	r25, Z+1	; 0x01
    8026:	01 97       	sbiw	r24, 0x01	; 1
    8028:	f1 f7       	brne	.-4      	; 0x8026 <Inicio_Motor_PP+0xc4a>
    802a:	9e 01       	movw	r18, r28
    802c:	23 58       	subi	r18, 0x83	; 131
    802e:	3f 4f       	sbci	r19, 0xFF	; 255
    8030:	f9 01       	movw	r30, r18
    8032:	91 83       	std	Z+1, r25	; 0x01
    8034:	80 83       	st	Z, r24
		_delay_ms(TIEMPO_ENTRE_STEP);
		CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_1);
    8036:	88 e2       	ldi	r24, 0x28	; 40
    8038:	90 e0       	ldi	r25, 0x00	; 0
    803a:	28 e2       	ldi	r18, 0x28	; 40
    803c:	30 e0       	ldi	r19, 0x00	; 0
    803e:	f9 01       	movw	r30, r18
    8040:	20 81       	ld	r18, Z
    8042:	2e 7f       	andi	r18, 0xFE	; 254
    8044:	fc 01       	movw	r30, r24
    8046:	20 83       	st	Z, r18
    8048:	9e 01       	movw	r18, r28
    804a:	21 58       	subi	r18, 0x81	; 129
    804c:	3f 4f       	sbci	r19, 0xFF	; 255
    804e:	80 e0       	ldi	r24, 0x00	; 0
    8050:	90 e0       	ldi	r25, 0x00	; 0
    8052:	a0 ea       	ldi	r26, 0xA0	; 160
    8054:	b0 e4       	ldi	r27, 0x40	; 64
    8056:	f9 01       	movw	r30, r18
    8058:	80 83       	st	Z, r24
    805a:	91 83       	std	Z+1, r25	; 0x01
    805c:	a2 83       	std	Z+2, r26	; 0x02
    805e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    8060:	8e 01       	movw	r16, r28
    8062:	0d 57       	subi	r16, 0x7D	; 125
    8064:	1f 4f       	sbci	r17, 0xFF	; 255
    8066:	ce 01       	movw	r24, r28
    8068:	81 58       	subi	r24, 0x81	; 129
    806a:	9f 4f       	sbci	r25, 0xFF	; 255
    806c:	20 e0       	ldi	r18, 0x00	; 0
    806e:	30 e0       	ldi	r19, 0x00	; 0
    8070:	4a e7       	ldi	r20, 0x7A	; 122
    8072:	55 e4       	ldi	r21, 0x45	; 69
    8074:	fc 01       	movw	r30, r24
    8076:	60 81       	ld	r22, Z
    8078:	71 81       	ldd	r23, Z+1	; 0x01
    807a:	82 81       	ldd	r24, Z+2	; 0x02
    807c:	93 81       	ldd	r25, Z+3	; 0x03
    807e:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    8082:	dc 01       	movw	r26, r24
    8084:	cb 01       	movw	r24, r22
    8086:	f8 01       	movw	r30, r16
    8088:	80 83       	st	Z, r24
    808a:	91 83       	std	Z+1, r25	; 0x01
    808c:	a2 83       	std	Z+2, r26	; 0x02
    808e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8090:	ce 01       	movw	r24, r28
    8092:	8d 57       	subi	r24, 0x7D	; 125
    8094:	9f 4f       	sbci	r25, 0xFF	; 255
    8096:	20 e0       	ldi	r18, 0x00	; 0
    8098:	30 e0       	ldi	r19, 0x00	; 0
    809a:	40 e8       	ldi	r20, 0x80	; 128
    809c:	5f e3       	ldi	r21, 0x3F	; 63
    809e:	fc 01       	movw	r30, r24
    80a0:	60 81       	ld	r22, Z
    80a2:	71 81       	ldd	r23, Z+1	; 0x01
    80a4:	82 81       	ldd	r24, Z+2	; 0x02
    80a6:	93 81       	ldd	r25, Z+3	; 0x03
    80a8:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    80ac:	88 23       	and	r24, r24
    80ae:	4c f4       	brge	.+18     	; 0x80c2 <Inicio_Motor_PP+0xce6>
		__ticks = 1;
    80b0:	ce 01       	movw	r24, r28
    80b2:	89 57       	subi	r24, 0x79	; 121
    80b4:	9f 4f       	sbci	r25, 0xFF	; 255
    80b6:	21 e0       	ldi	r18, 0x01	; 1
    80b8:	30 e0       	ldi	r19, 0x00	; 0
    80ba:	fc 01       	movw	r30, r24
    80bc:	31 83       	std	Z+1, r19	; 0x01
    80be:	20 83       	st	Z, r18
    80c0:	6d c0       	rjmp	.+218    	; 0x819c <Inicio_Motor_PP+0xdc0>
	else if (__tmp > 65535)
    80c2:	ce 01       	movw	r24, r28
    80c4:	8d 57       	subi	r24, 0x7D	; 125
    80c6:	9f 4f       	sbci	r25, 0xFF	; 255
    80c8:	20 e0       	ldi	r18, 0x00	; 0
    80ca:	3f ef       	ldi	r19, 0xFF	; 255
    80cc:	4f e7       	ldi	r20, 0x7F	; 127
    80ce:	57 e4       	ldi	r21, 0x47	; 71
    80d0:	fc 01       	movw	r30, r24
    80d2:	60 81       	ld	r22, Z
    80d4:	71 81       	ldd	r23, Z+1	; 0x01
    80d6:	82 81       	ldd	r24, Z+2	; 0x02
    80d8:	93 81       	ldd	r25, Z+3	; 0x03
    80da:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    80de:	18 16       	cp	r1, r24
    80e0:	0c f0       	brlt	.+2      	; 0x80e4 <Inicio_Motor_PP+0xd08>
    80e2:	4a c0       	rjmp	.+148    	; 0x8178 <Inicio_Motor_PP+0xd9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    80e4:	ce 01       	movw	r24, r28
    80e6:	81 58       	subi	r24, 0x81	; 129
    80e8:	9f 4f       	sbci	r25, 0xFF	; 255
    80ea:	20 e0       	ldi	r18, 0x00	; 0
    80ec:	30 e0       	ldi	r19, 0x00	; 0
    80ee:	40 e2       	ldi	r20, 0x20	; 32
    80f0:	51 e4       	ldi	r21, 0x41	; 65
    80f2:	fc 01       	movw	r30, r24
    80f4:	60 81       	ld	r22, Z
    80f6:	71 81       	ldd	r23, Z+1	; 0x01
    80f8:	82 81       	ldd	r24, Z+2	; 0x02
    80fa:	93 81       	ldd	r25, Z+3	; 0x03
    80fc:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    8100:	dc 01       	movw	r26, r24
    8102:	cb 01       	movw	r24, r22
    8104:	8e 01       	movw	r16, r28
    8106:	09 57       	subi	r16, 0x79	; 121
    8108:	1f 4f       	sbci	r17, 0xFF	; 255
    810a:	bc 01       	movw	r22, r24
    810c:	cd 01       	movw	r24, r26
    810e:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    8112:	dc 01       	movw	r26, r24
    8114:	cb 01       	movw	r24, r22
    8116:	f8 01       	movw	r30, r16
    8118:	91 83       	std	Z+1, r25	; 0x01
    811a:	80 83       	st	Z, r24
    811c:	24 c0       	rjmp	.+72     	; 0x8166 <Inicio_Motor_PP+0xd8a>
    811e:	ce 01       	movw	r24, r28
    8120:	87 57       	subi	r24, 0x77	; 119
    8122:	9f 4f       	sbci	r25, 0xFF	; 255
    8124:	20 e9       	ldi	r18, 0x90	; 144
    8126:	31 e0       	ldi	r19, 0x01	; 1
    8128:	fc 01       	movw	r30, r24
    812a:	31 83       	std	Z+1, r19	; 0x01
    812c:	20 83       	st	Z, r18
    812e:	ce 01       	movw	r24, r28
    8130:	87 57       	subi	r24, 0x77	; 119
    8132:	9f 4f       	sbci	r25, 0xFF	; 255
    8134:	fc 01       	movw	r30, r24
    8136:	80 81       	ld	r24, Z
    8138:	91 81       	ldd	r25, Z+1	; 0x01
    813a:	01 97       	sbiw	r24, 0x01	; 1
    813c:	f1 f7       	brne	.-4      	; 0x813a <Inicio_Motor_PP+0xd5e>
    813e:	9e 01       	movw	r18, r28
    8140:	27 57       	subi	r18, 0x77	; 119
    8142:	3f 4f       	sbci	r19, 0xFF	; 255
    8144:	f9 01       	movw	r30, r18
    8146:	91 83       	std	Z+1, r25	; 0x01
    8148:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    814a:	ce 01       	movw	r24, r28
    814c:	89 57       	subi	r24, 0x79	; 121
    814e:	9f 4f       	sbci	r25, 0xFF	; 255
    8150:	9e 01       	movw	r18, r28
    8152:	29 57       	subi	r18, 0x79	; 121
    8154:	3f 4f       	sbci	r19, 0xFF	; 255
    8156:	f9 01       	movw	r30, r18
    8158:	20 81       	ld	r18, Z
    815a:	31 81       	ldd	r19, Z+1	; 0x01
    815c:	21 50       	subi	r18, 0x01	; 1
    815e:	31 09       	sbc	r19, r1
    8160:	fc 01       	movw	r30, r24
    8162:	31 83       	std	Z+1, r19	; 0x01
    8164:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8166:	ce 01       	movw	r24, r28
    8168:	89 57       	subi	r24, 0x79	; 121
    816a:	9f 4f       	sbci	r25, 0xFF	; 255
    816c:	fc 01       	movw	r30, r24
    816e:	80 81       	ld	r24, Z
    8170:	91 81       	ldd	r25, Z+1	; 0x01
    8172:	89 2b       	or	r24, r25
    8174:	a1 f6       	brne	.-88     	; 0x811e <Inicio_Motor_PP+0xd42>
    8176:	2c c0       	rjmp	.+88     	; 0x81d0 <Inicio_Motor_PP+0xdf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8178:	8e 01       	movw	r16, r28
    817a:	09 57       	subi	r16, 0x79	; 121
    817c:	1f 4f       	sbci	r17, 0xFF	; 255
    817e:	ce 01       	movw	r24, r28
    8180:	8d 57       	subi	r24, 0x7D	; 125
    8182:	9f 4f       	sbci	r25, 0xFF	; 255
    8184:	fc 01       	movw	r30, r24
    8186:	60 81       	ld	r22, Z
    8188:	71 81       	ldd	r23, Z+1	; 0x01
    818a:	82 81       	ldd	r24, Z+2	; 0x02
    818c:	93 81       	ldd	r25, Z+3	; 0x03
    818e:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    8192:	dc 01       	movw	r26, r24
    8194:	cb 01       	movw	r24, r22
    8196:	f8 01       	movw	r30, r16
    8198:	91 83       	std	Z+1, r25	; 0x01
    819a:	80 83       	st	Z, r24
    819c:	ce 01       	movw	r24, r28
    819e:	85 57       	subi	r24, 0x75	; 117
    81a0:	9f 4f       	sbci	r25, 0xFF	; 255
    81a2:	9e 01       	movw	r18, r28
    81a4:	29 57       	subi	r18, 0x79	; 121
    81a6:	3f 4f       	sbci	r19, 0xFF	; 255
    81a8:	f9 01       	movw	r30, r18
    81aa:	20 81       	ld	r18, Z
    81ac:	31 81       	ldd	r19, Z+1	; 0x01
    81ae:	fc 01       	movw	r30, r24
    81b0:	31 83       	std	Z+1, r19	; 0x01
    81b2:	20 83       	st	Z, r18
    81b4:	ce 01       	movw	r24, r28
    81b6:	85 57       	subi	r24, 0x75	; 117
    81b8:	9f 4f       	sbci	r25, 0xFF	; 255
    81ba:	fc 01       	movw	r30, r24
    81bc:	80 81       	ld	r24, Z
    81be:	91 81       	ldd	r25, Z+1	; 0x01
    81c0:	01 97       	sbiw	r24, 0x01	; 1
    81c2:	f1 f7       	brne	.-4      	; 0x81c0 <Inicio_Motor_PP+0xde4>
    81c4:	9e 01       	movw	r18, r28
    81c6:	25 57       	subi	r18, 0x75	; 117
    81c8:	3f 4f       	sbci	r19, 0xFF	; 255
    81ca:	f9 01       	movw	r30, r18
    81cc:	91 83       	std	Z+1, r25	; 0x01
    81ce:	80 83       	st	Z, r24
		_delay_ms(TIEMPO_ENTRE_STEP);
		SET_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_3);
    81d0:	88 e2       	ldi	r24, 0x28	; 40
    81d2:	90 e0       	ldi	r25, 0x00	; 0
    81d4:	28 e2       	ldi	r18, 0x28	; 40
    81d6:	30 e0       	ldi	r19, 0x00	; 0
    81d8:	f9 01       	movw	r30, r18
    81da:	20 81       	ld	r18, Z
    81dc:	24 60       	ori	r18, 0x04	; 4
    81de:	fc 01       	movw	r30, r24
    81e0:	20 83       	st	Z, r18
    81e2:	9e 01       	movw	r18, r28
    81e4:	23 57       	subi	r18, 0x73	; 115
    81e6:	3f 4f       	sbci	r19, 0xFF	; 255
    81e8:	80 e0       	ldi	r24, 0x00	; 0
    81ea:	90 e0       	ldi	r25, 0x00	; 0
    81ec:	a0 ea       	ldi	r26, 0xA0	; 160
    81ee:	b0 e4       	ldi	r27, 0x40	; 64
    81f0:	f9 01       	movw	r30, r18
    81f2:	80 83       	st	Z, r24
    81f4:	91 83       	std	Z+1, r25	; 0x01
    81f6:	a2 83       	std	Z+2, r26	; 0x02
    81f8:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    81fa:	8e 01       	movw	r16, r28
    81fc:	0f 56       	subi	r16, 0x6F	; 111
    81fe:	1f 4f       	sbci	r17, 0xFF	; 255
    8200:	ce 01       	movw	r24, r28
    8202:	83 57       	subi	r24, 0x73	; 115
    8204:	9f 4f       	sbci	r25, 0xFF	; 255
    8206:	20 e0       	ldi	r18, 0x00	; 0
    8208:	30 e0       	ldi	r19, 0x00	; 0
    820a:	4a e7       	ldi	r20, 0x7A	; 122
    820c:	55 e4       	ldi	r21, 0x45	; 69
    820e:	fc 01       	movw	r30, r24
    8210:	60 81       	ld	r22, Z
    8212:	71 81       	ldd	r23, Z+1	; 0x01
    8214:	82 81       	ldd	r24, Z+2	; 0x02
    8216:	93 81       	ldd	r25, Z+3	; 0x03
    8218:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    821c:	dc 01       	movw	r26, r24
    821e:	cb 01       	movw	r24, r22
    8220:	f8 01       	movw	r30, r16
    8222:	80 83       	st	Z, r24
    8224:	91 83       	std	Z+1, r25	; 0x01
    8226:	a2 83       	std	Z+2, r26	; 0x02
    8228:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    822a:	ce 01       	movw	r24, r28
    822c:	8f 56       	subi	r24, 0x6F	; 111
    822e:	9f 4f       	sbci	r25, 0xFF	; 255
    8230:	20 e0       	ldi	r18, 0x00	; 0
    8232:	30 e0       	ldi	r19, 0x00	; 0
    8234:	40 e8       	ldi	r20, 0x80	; 128
    8236:	5f e3       	ldi	r21, 0x3F	; 63
    8238:	fc 01       	movw	r30, r24
    823a:	60 81       	ld	r22, Z
    823c:	71 81       	ldd	r23, Z+1	; 0x01
    823e:	82 81       	ldd	r24, Z+2	; 0x02
    8240:	93 81       	ldd	r25, Z+3	; 0x03
    8242:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    8246:	88 23       	and	r24, r24
    8248:	4c f4       	brge	.+18     	; 0x825c <Inicio_Motor_PP+0xe80>
		__ticks = 1;
    824a:	ce 01       	movw	r24, r28
    824c:	8b 56       	subi	r24, 0x6B	; 107
    824e:	9f 4f       	sbci	r25, 0xFF	; 255
    8250:	21 e0       	ldi	r18, 0x01	; 1
    8252:	30 e0       	ldi	r19, 0x00	; 0
    8254:	fc 01       	movw	r30, r24
    8256:	31 83       	std	Z+1, r19	; 0x01
    8258:	20 83       	st	Z, r18
    825a:	6d c0       	rjmp	.+218    	; 0x8336 <Inicio_Motor_PP+0xf5a>
	else if (__tmp > 65535)
    825c:	ce 01       	movw	r24, r28
    825e:	8f 56       	subi	r24, 0x6F	; 111
    8260:	9f 4f       	sbci	r25, 0xFF	; 255
    8262:	20 e0       	ldi	r18, 0x00	; 0
    8264:	3f ef       	ldi	r19, 0xFF	; 255
    8266:	4f e7       	ldi	r20, 0x7F	; 127
    8268:	57 e4       	ldi	r21, 0x47	; 71
    826a:	fc 01       	movw	r30, r24
    826c:	60 81       	ld	r22, Z
    826e:	71 81       	ldd	r23, Z+1	; 0x01
    8270:	82 81       	ldd	r24, Z+2	; 0x02
    8272:	93 81       	ldd	r25, Z+3	; 0x03
    8274:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    8278:	18 16       	cp	r1, r24
    827a:	0c f0       	brlt	.+2      	; 0x827e <Inicio_Motor_PP+0xea2>
    827c:	4a c0       	rjmp	.+148    	; 0x8312 <Inicio_Motor_PP+0xf36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    827e:	ce 01       	movw	r24, r28
    8280:	83 57       	subi	r24, 0x73	; 115
    8282:	9f 4f       	sbci	r25, 0xFF	; 255
    8284:	20 e0       	ldi	r18, 0x00	; 0
    8286:	30 e0       	ldi	r19, 0x00	; 0
    8288:	40 e2       	ldi	r20, 0x20	; 32
    828a:	51 e4       	ldi	r21, 0x41	; 65
    828c:	fc 01       	movw	r30, r24
    828e:	60 81       	ld	r22, Z
    8290:	71 81       	ldd	r23, Z+1	; 0x01
    8292:	82 81       	ldd	r24, Z+2	; 0x02
    8294:	93 81       	ldd	r25, Z+3	; 0x03
    8296:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    829a:	dc 01       	movw	r26, r24
    829c:	cb 01       	movw	r24, r22
    829e:	8e 01       	movw	r16, r28
    82a0:	0b 56       	subi	r16, 0x6B	; 107
    82a2:	1f 4f       	sbci	r17, 0xFF	; 255
    82a4:	bc 01       	movw	r22, r24
    82a6:	cd 01       	movw	r24, r26
    82a8:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    82ac:	dc 01       	movw	r26, r24
    82ae:	cb 01       	movw	r24, r22
    82b0:	f8 01       	movw	r30, r16
    82b2:	91 83       	std	Z+1, r25	; 0x01
    82b4:	80 83       	st	Z, r24
    82b6:	24 c0       	rjmp	.+72     	; 0x8300 <Inicio_Motor_PP+0xf24>
    82b8:	ce 01       	movw	r24, r28
    82ba:	89 56       	subi	r24, 0x69	; 105
    82bc:	9f 4f       	sbci	r25, 0xFF	; 255
    82be:	20 e9       	ldi	r18, 0x90	; 144
    82c0:	31 e0       	ldi	r19, 0x01	; 1
    82c2:	fc 01       	movw	r30, r24
    82c4:	31 83       	std	Z+1, r19	; 0x01
    82c6:	20 83       	st	Z, r18
    82c8:	ce 01       	movw	r24, r28
    82ca:	89 56       	subi	r24, 0x69	; 105
    82cc:	9f 4f       	sbci	r25, 0xFF	; 255
    82ce:	fc 01       	movw	r30, r24
    82d0:	80 81       	ld	r24, Z
    82d2:	91 81       	ldd	r25, Z+1	; 0x01
    82d4:	01 97       	sbiw	r24, 0x01	; 1
    82d6:	f1 f7       	brne	.-4      	; 0x82d4 <Inicio_Motor_PP+0xef8>
    82d8:	9e 01       	movw	r18, r28
    82da:	29 56       	subi	r18, 0x69	; 105
    82dc:	3f 4f       	sbci	r19, 0xFF	; 255
    82de:	f9 01       	movw	r30, r18
    82e0:	91 83       	std	Z+1, r25	; 0x01
    82e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    82e4:	ce 01       	movw	r24, r28
    82e6:	8b 56       	subi	r24, 0x6B	; 107
    82e8:	9f 4f       	sbci	r25, 0xFF	; 255
    82ea:	9e 01       	movw	r18, r28
    82ec:	2b 56       	subi	r18, 0x6B	; 107
    82ee:	3f 4f       	sbci	r19, 0xFF	; 255
    82f0:	f9 01       	movw	r30, r18
    82f2:	20 81       	ld	r18, Z
    82f4:	31 81       	ldd	r19, Z+1	; 0x01
    82f6:	21 50       	subi	r18, 0x01	; 1
    82f8:	31 09       	sbc	r19, r1
    82fa:	fc 01       	movw	r30, r24
    82fc:	31 83       	std	Z+1, r19	; 0x01
    82fe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8300:	ce 01       	movw	r24, r28
    8302:	8b 56       	subi	r24, 0x6B	; 107
    8304:	9f 4f       	sbci	r25, 0xFF	; 255
    8306:	fc 01       	movw	r30, r24
    8308:	80 81       	ld	r24, Z
    830a:	91 81       	ldd	r25, Z+1	; 0x01
    830c:	89 2b       	or	r24, r25
    830e:	a1 f6       	brne	.-88     	; 0x82b8 <Inicio_Motor_PP+0xedc>
    8310:	2c c0       	rjmp	.+88     	; 0x836a <Inicio_Motor_PP+0xf8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8312:	8e 01       	movw	r16, r28
    8314:	0b 56       	subi	r16, 0x6B	; 107
    8316:	1f 4f       	sbci	r17, 0xFF	; 255
    8318:	ce 01       	movw	r24, r28
    831a:	8f 56       	subi	r24, 0x6F	; 111
    831c:	9f 4f       	sbci	r25, 0xFF	; 255
    831e:	fc 01       	movw	r30, r24
    8320:	60 81       	ld	r22, Z
    8322:	71 81       	ldd	r23, Z+1	; 0x01
    8324:	82 81       	ldd	r24, Z+2	; 0x02
    8326:	93 81       	ldd	r25, Z+3	; 0x03
    8328:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    832c:	dc 01       	movw	r26, r24
    832e:	cb 01       	movw	r24, r22
    8330:	f8 01       	movw	r30, r16
    8332:	91 83       	std	Z+1, r25	; 0x01
    8334:	80 83       	st	Z, r24
    8336:	ce 01       	movw	r24, r28
    8338:	87 56       	subi	r24, 0x67	; 103
    833a:	9f 4f       	sbci	r25, 0xFF	; 255
    833c:	9e 01       	movw	r18, r28
    833e:	2b 56       	subi	r18, 0x6B	; 107
    8340:	3f 4f       	sbci	r19, 0xFF	; 255
    8342:	f9 01       	movw	r30, r18
    8344:	20 81       	ld	r18, Z
    8346:	31 81       	ldd	r19, Z+1	; 0x01
    8348:	fc 01       	movw	r30, r24
    834a:	31 83       	std	Z+1, r19	; 0x01
    834c:	20 83       	st	Z, r18
    834e:	ce 01       	movw	r24, r28
    8350:	87 56       	subi	r24, 0x67	; 103
    8352:	9f 4f       	sbci	r25, 0xFF	; 255
    8354:	fc 01       	movw	r30, r24
    8356:	80 81       	ld	r24, Z
    8358:	91 81       	ldd	r25, Z+1	; 0x01
    835a:	01 97       	sbiw	r24, 0x01	; 1
    835c:	f1 f7       	brne	.-4      	; 0x835a <Inicio_Motor_PP+0xf7e>
    835e:	9e 01       	movw	r18, r28
    8360:	27 56       	subi	r18, 0x67	; 103
    8362:	3f 4f       	sbci	r19, 0xFF	; 255
    8364:	f9 01       	movw	r30, r18
    8366:	91 83       	std	Z+1, r25	; 0x01
    8368:	80 83       	st	Z, r24
		_delay_ms(TIEMPO_ENTRE_STEP);
		CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_3);
    836a:	88 e2       	ldi	r24, 0x28	; 40
    836c:	90 e0       	ldi	r25, 0x00	; 0
    836e:	28 e2       	ldi	r18, 0x28	; 40
    8370:	30 e0       	ldi	r19, 0x00	; 0
    8372:	f9 01       	movw	r30, r18
    8374:	20 81       	ld	r18, Z
    8376:	2b 7f       	andi	r18, 0xFB	; 251
    8378:	fc 01       	movw	r30, r24
    837a:	20 83       	st	Z, r18
    837c:	9e 01       	movw	r18, r28
    837e:	25 56       	subi	r18, 0x65	; 101
    8380:	3f 4f       	sbci	r19, 0xFF	; 255
    8382:	80 e0       	ldi	r24, 0x00	; 0
    8384:	90 e0       	ldi	r25, 0x00	; 0
    8386:	a0 ea       	ldi	r26, 0xA0	; 160
    8388:	b0 e4       	ldi	r27, 0x40	; 64
    838a:	f9 01       	movw	r30, r18
    838c:	80 83       	st	Z, r24
    838e:	91 83       	std	Z+1, r25	; 0x01
    8390:	a2 83       	std	Z+2, r26	; 0x02
    8392:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    8394:	8e 01       	movw	r16, r28
    8396:	01 56       	subi	r16, 0x61	; 97
    8398:	1f 4f       	sbci	r17, 0xFF	; 255
    839a:	ce 01       	movw	r24, r28
    839c:	85 56       	subi	r24, 0x65	; 101
    839e:	9f 4f       	sbci	r25, 0xFF	; 255
    83a0:	20 e0       	ldi	r18, 0x00	; 0
    83a2:	30 e0       	ldi	r19, 0x00	; 0
    83a4:	4a e7       	ldi	r20, 0x7A	; 122
    83a6:	55 e4       	ldi	r21, 0x45	; 69
    83a8:	fc 01       	movw	r30, r24
    83aa:	60 81       	ld	r22, Z
    83ac:	71 81       	ldd	r23, Z+1	; 0x01
    83ae:	82 81       	ldd	r24, Z+2	; 0x02
    83b0:	93 81       	ldd	r25, Z+3	; 0x03
    83b2:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    83b6:	dc 01       	movw	r26, r24
    83b8:	cb 01       	movw	r24, r22
    83ba:	f8 01       	movw	r30, r16
    83bc:	80 83       	st	Z, r24
    83be:	91 83       	std	Z+1, r25	; 0x01
    83c0:	a2 83       	std	Z+2, r26	; 0x02
    83c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    83c4:	ce 01       	movw	r24, r28
    83c6:	81 56       	subi	r24, 0x61	; 97
    83c8:	9f 4f       	sbci	r25, 0xFF	; 255
    83ca:	20 e0       	ldi	r18, 0x00	; 0
    83cc:	30 e0       	ldi	r19, 0x00	; 0
    83ce:	40 e8       	ldi	r20, 0x80	; 128
    83d0:	5f e3       	ldi	r21, 0x3F	; 63
    83d2:	fc 01       	movw	r30, r24
    83d4:	60 81       	ld	r22, Z
    83d6:	71 81       	ldd	r23, Z+1	; 0x01
    83d8:	82 81       	ldd	r24, Z+2	; 0x02
    83da:	93 81       	ldd	r25, Z+3	; 0x03
    83dc:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    83e0:	88 23       	and	r24, r24
    83e2:	4c f4       	brge	.+18     	; 0x83f6 <Inicio_Motor_PP+0x101a>
		__ticks = 1;
    83e4:	ce 01       	movw	r24, r28
    83e6:	8d 55       	subi	r24, 0x5D	; 93
    83e8:	9f 4f       	sbci	r25, 0xFF	; 255
    83ea:	21 e0       	ldi	r18, 0x01	; 1
    83ec:	30 e0       	ldi	r19, 0x00	; 0
    83ee:	fc 01       	movw	r30, r24
    83f0:	31 83       	std	Z+1, r19	; 0x01
    83f2:	20 83       	st	Z, r18
    83f4:	6d c0       	rjmp	.+218    	; 0x84d0 <Inicio_Motor_PP+0x10f4>
	else if (__tmp > 65535)
    83f6:	ce 01       	movw	r24, r28
    83f8:	81 56       	subi	r24, 0x61	; 97
    83fa:	9f 4f       	sbci	r25, 0xFF	; 255
    83fc:	20 e0       	ldi	r18, 0x00	; 0
    83fe:	3f ef       	ldi	r19, 0xFF	; 255
    8400:	4f e7       	ldi	r20, 0x7F	; 127
    8402:	57 e4       	ldi	r21, 0x47	; 71
    8404:	fc 01       	movw	r30, r24
    8406:	60 81       	ld	r22, Z
    8408:	71 81       	ldd	r23, Z+1	; 0x01
    840a:	82 81       	ldd	r24, Z+2	; 0x02
    840c:	93 81       	ldd	r25, Z+3	; 0x03
    840e:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    8412:	18 16       	cp	r1, r24
    8414:	0c f0       	brlt	.+2      	; 0x8418 <Inicio_Motor_PP+0x103c>
    8416:	4a c0       	rjmp	.+148    	; 0x84ac <Inicio_Motor_PP+0x10d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8418:	ce 01       	movw	r24, r28
    841a:	85 56       	subi	r24, 0x65	; 101
    841c:	9f 4f       	sbci	r25, 0xFF	; 255
    841e:	20 e0       	ldi	r18, 0x00	; 0
    8420:	30 e0       	ldi	r19, 0x00	; 0
    8422:	40 e2       	ldi	r20, 0x20	; 32
    8424:	51 e4       	ldi	r21, 0x41	; 65
    8426:	fc 01       	movw	r30, r24
    8428:	60 81       	ld	r22, Z
    842a:	71 81       	ldd	r23, Z+1	; 0x01
    842c:	82 81       	ldd	r24, Z+2	; 0x02
    842e:	93 81       	ldd	r25, Z+3	; 0x03
    8430:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    8434:	dc 01       	movw	r26, r24
    8436:	cb 01       	movw	r24, r22
    8438:	8e 01       	movw	r16, r28
    843a:	0d 55       	subi	r16, 0x5D	; 93
    843c:	1f 4f       	sbci	r17, 0xFF	; 255
    843e:	bc 01       	movw	r22, r24
    8440:	cd 01       	movw	r24, r26
    8442:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    8446:	dc 01       	movw	r26, r24
    8448:	cb 01       	movw	r24, r22
    844a:	f8 01       	movw	r30, r16
    844c:	91 83       	std	Z+1, r25	; 0x01
    844e:	80 83       	st	Z, r24
    8450:	24 c0       	rjmp	.+72     	; 0x849a <Inicio_Motor_PP+0x10be>
    8452:	ce 01       	movw	r24, r28
    8454:	8b 55       	subi	r24, 0x5B	; 91
    8456:	9f 4f       	sbci	r25, 0xFF	; 255
    8458:	20 e9       	ldi	r18, 0x90	; 144
    845a:	31 e0       	ldi	r19, 0x01	; 1
    845c:	fc 01       	movw	r30, r24
    845e:	31 83       	std	Z+1, r19	; 0x01
    8460:	20 83       	st	Z, r18
    8462:	ce 01       	movw	r24, r28
    8464:	8b 55       	subi	r24, 0x5B	; 91
    8466:	9f 4f       	sbci	r25, 0xFF	; 255
    8468:	fc 01       	movw	r30, r24
    846a:	80 81       	ld	r24, Z
    846c:	91 81       	ldd	r25, Z+1	; 0x01
    846e:	01 97       	sbiw	r24, 0x01	; 1
    8470:	f1 f7       	brne	.-4      	; 0x846e <Inicio_Motor_PP+0x1092>
    8472:	9e 01       	movw	r18, r28
    8474:	2b 55       	subi	r18, 0x5B	; 91
    8476:	3f 4f       	sbci	r19, 0xFF	; 255
    8478:	f9 01       	movw	r30, r18
    847a:	91 83       	std	Z+1, r25	; 0x01
    847c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    847e:	ce 01       	movw	r24, r28
    8480:	8d 55       	subi	r24, 0x5D	; 93
    8482:	9f 4f       	sbci	r25, 0xFF	; 255
    8484:	9e 01       	movw	r18, r28
    8486:	2d 55       	subi	r18, 0x5D	; 93
    8488:	3f 4f       	sbci	r19, 0xFF	; 255
    848a:	f9 01       	movw	r30, r18
    848c:	20 81       	ld	r18, Z
    848e:	31 81       	ldd	r19, Z+1	; 0x01
    8490:	21 50       	subi	r18, 0x01	; 1
    8492:	31 09       	sbc	r19, r1
    8494:	fc 01       	movw	r30, r24
    8496:	31 83       	std	Z+1, r19	; 0x01
    8498:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    849a:	ce 01       	movw	r24, r28
    849c:	8d 55       	subi	r24, 0x5D	; 93
    849e:	9f 4f       	sbci	r25, 0xFF	; 255
    84a0:	fc 01       	movw	r30, r24
    84a2:	80 81       	ld	r24, Z
    84a4:	91 81       	ldd	r25, Z+1	; 0x01
    84a6:	89 2b       	or	r24, r25
    84a8:	a1 f6       	brne	.-88     	; 0x8452 <Inicio_Motor_PP+0x1076>
    84aa:	2c c0       	rjmp	.+88     	; 0x8504 <Inicio_Motor_PP+0x1128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    84ac:	8e 01       	movw	r16, r28
    84ae:	0d 55       	subi	r16, 0x5D	; 93
    84b0:	1f 4f       	sbci	r17, 0xFF	; 255
    84b2:	ce 01       	movw	r24, r28
    84b4:	81 56       	subi	r24, 0x61	; 97
    84b6:	9f 4f       	sbci	r25, 0xFF	; 255
    84b8:	fc 01       	movw	r30, r24
    84ba:	60 81       	ld	r22, Z
    84bc:	71 81       	ldd	r23, Z+1	; 0x01
    84be:	82 81       	ldd	r24, Z+2	; 0x02
    84c0:	93 81       	ldd	r25, Z+3	; 0x03
    84c2:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    84c6:	dc 01       	movw	r26, r24
    84c8:	cb 01       	movw	r24, r22
    84ca:	f8 01       	movw	r30, r16
    84cc:	91 83       	std	Z+1, r25	; 0x01
    84ce:	80 83       	st	Z, r24
    84d0:	ce 01       	movw	r24, r28
    84d2:	89 55       	subi	r24, 0x59	; 89
    84d4:	9f 4f       	sbci	r25, 0xFF	; 255
    84d6:	9e 01       	movw	r18, r28
    84d8:	2d 55       	subi	r18, 0x5D	; 93
    84da:	3f 4f       	sbci	r19, 0xFF	; 255
    84dc:	f9 01       	movw	r30, r18
    84de:	20 81       	ld	r18, Z
    84e0:	31 81       	ldd	r19, Z+1	; 0x01
    84e2:	fc 01       	movw	r30, r24
    84e4:	31 83       	std	Z+1, r19	; 0x01
    84e6:	20 83       	st	Z, r18
    84e8:	ce 01       	movw	r24, r28
    84ea:	89 55       	subi	r24, 0x59	; 89
    84ec:	9f 4f       	sbci	r25, 0xFF	; 255
    84ee:	fc 01       	movw	r30, r24
    84f0:	80 81       	ld	r24, Z
    84f2:	91 81       	ldd	r25, Z+1	; 0x01
    84f4:	01 97       	sbiw	r24, 0x01	; 1
    84f6:	f1 f7       	brne	.-4      	; 0x84f4 <Inicio_Motor_PP+0x1118>
    84f8:	9e 01       	movw	r18, r28
    84fa:	29 55       	subi	r18, 0x59	; 89
    84fc:	3f 4f       	sbci	r19, 0xFF	; 255
    84fe:	f9 01       	movw	r30, r18
    8500:	91 83       	std	Z+1, r25	; 0x01
    8502:	80 83       	st	Z, r24
		_delay_ms(TIEMPO_ENTRE_STEP);
		SET_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_2);
    8504:	88 e2       	ldi	r24, 0x28	; 40
    8506:	90 e0       	ldi	r25, 0x00	; 0
    8508:	28 e2       	ldi	r18, 0x28	; 40
    850a:	30 e0       	ldi	r19, 0x00	; 0
    850c:	f9 01       	movw	r30, r18
    850e:	20 81       	ld	r18, Z
    8510:	22 60       	ori	r18, 0x02	; 2
    8512:	fc 01       	movw	r30, r24
    8514:	20 83       	st	Z, r18
    8516:	9e 01       	movw	r18, r28
    8518:	27 55       	subi	r18, 0x57	; 87
    851a:	3f 4f       	sbci	r19, 0xFF	; 255
    851c:	80 e0       	ldi	r24, 0x00	; 0
    851e:	90 e0       	ldi	r25, 0x00	; 0
    8520:	a0 ea       	ldi	r26, 0xA0	; 160
    8522:	b0 e4       	ldi	r27, 0x40	; 64
    8524:	f9 01       	movw	r30, r18
    8526:	80 83       	st	Z, r24
    8528:	91 83       	std	Z+1, r25	; 0x01
    852a:	a2 83       	std	Z+2, r26	; 0x02
    852c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    852e:	8e 01       	movw	r16, r28
    8530:	03 55       	subi	r16, 0x53	; 83
    8532:	1f 4f       	sbci	r17, 0xFF	; 255
    8534:	ce 01       	movw	r24, r28
    8536:	87 55       	subi	r24, 0x57	; 87
    8538:	9f 4f       	sbci	r25, 0xFF	; 255
    853a:	20 e0       	ldi	r18, 0x00	; 0
    853c:	30 e0       	ldi	r19, 0x00	; 0
    853e:	4a e7       	ldi	r20, 0x7A	; 122
    8540:	55 e4       	ldi	r21, 0x45	; 69
    8542:	fc 01       	movw	r30, r24
    8544:	60 81       	ld	r22, Z
    8546:	71 81       	ldd	r23, Z+1	; 0x01
    8548:	82 81       	ldd	r24, Z+2	; 0x02
    854a:	93 81       	ldd	r25, Z+3	; 0x03
    854c:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    8550:	dc 01       	movw	r26, r24
    8552:	cb 01       	movw	r24, r22
    8554:	f8 01       	movw	r30, r16
    8556:	80 83       	st	Z, r24
    8558:	91 83       	std	Z+1, r25	; 0x01
    855a:	a2 83       	std	Z+2, r26	; 0x02
    855c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    855e:	ce 01       	movw	r24, r28
    8560:	83 55       	subi	r24, 0x53	; 83
    8562:	9f 4f       	sbci	r25, 0xFF	; 255
    8564:	20 e0       	ldi	r18, 0x00	; 0
    8566:	30 e0       	ldi	r19, 0x00	; 0
    8568:	40 e8       	ldi	r20, 0x80	; 128
    856a:	5f e3       	ldi	r21, 0x3F	; 63
    856c:	fc 01       	movw	r30, r24
    856e:	60 81       	ld	r22, Z
    8570:	71 81       	ldd	r23, Z+1	; 0x01
    8572:	82 81       	ldd	r24, Z+2	; 0x02
    8574:	93 81       	ldd	r25, Z+3	; 0x03
    8576:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    857a:	88 23       	and	r24, r24
    857c:	4c f4       	brge	.+18     	; 0x8590 <Inicio_Motor_PP+0x11b4>
		__ticks = 1;
    857e:	ce 01       	movw	r24, r28
    8580:	8f 54       	subi	r24, 0x4F	; 79
    8582:	9f 4f       	sbci	r25, 0xFF	; 255
    8584:	21 e0       	ldi	r18, 0x01	; 1
    8586:	30 e0       	ldi	r19, 0x00	; 0
    8588:	fc 01       	movw	r30, r24
    858a:	31 83       	std	Z+1, r19	; 0x01
    858c:	20 83       	st	Z, r18
    858e:	6d c0       	rjmp	.+218    	; 0x866a <Inicio_Motor_PP+0x128e>
	else if (__tmp > 65535)
    8590:	ce 01       	movw	r24, r28
    8592:	83 55       	subi	r24, 0x53	; 83
    8594:	9f 4f       	sbci	r25, 0xFF	; 255
    8596:	20 e0       	ldi	r18, 0x00	; 0
    8598:	3f ef       	ldi	r19, 0xFF	; 255
    859a:	4f e7       	ldi	r20, 0x7F	; 127
    859c:	57 e4       	ldi	r21, 0x47	; 71
    859e:	fc 01       	movw	r30, r24
    85a0:	60 81       	ld	r22, Z
    85a2:	71 81       	ldd	r23, Z+1	; 0x01
    85a4:	82 81       	ldd	r24, Z+2	; 0x02
    85a6:	93 81       	ldd	r25, Z+3	; 0x03
    85a8:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    85ac:	18 16       	cp	r1, r24
    85ae:	0c f0       	brlt	.+2      	; 0x85b2 <Inicio_Motor_PP+0x11d6>
    85b0:	4a c0       	rjmp	.+148    	; 0x8646 <Inicio_Motor_PP+0x126a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    85b2:	ce 01       	movw	r24, r28
    85b4:	87 55       	subi	r24, 0x57	; 87
    85b6:	9f 4f       	sbci	r25, 0xFF	; 255
    85b8:	20 e0       	ldi	r18, 0x00	; 0
    85ba:	30 e0       	ldi	r19, 0x00	; 0
    85bc:	40 e2       	ldi	r20, 0x20	; 32
    85be:	51 e4       	ldi	r21, 0x41	; 65
    85c0:	fc 01       	movw	r30, r24
    85c2:	60 81       	ld	r22, Z
    85c4:	71 81       	ldd	r23, Z+1	; 0x01
    85c6:	82 81       	ldd	r24, Z+2	; 0x02
    85c8:	93 81       	ldd	r25, Z+3	; 0x03
    85ca:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    85ce:	dc 01       	movw	r26, r24
    85d0:	cb 01       	movw	r24, r22
    85d2:	8e 01       	movw	r16, r28
    85d4:	0f 54       	subi	r16, 0x4F	; 79
    85d6:	1f 4f       	sbci	r17, 0xFF	; 255
    85d8:	bc 01       	movw	r22, r24
    85da:	cd 01       	movw	r24, r26
    85dc:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    85e0:	dc 01       	movw	r26, r24
    85e2:	cb 01       	movw	r24, r22
    85e4:	f8 01       	movw	r30, r16
    85e6:	91 83       	std	Z+1, r25	; 0x01
    85e8:	80 83       	st	Z, r24
    85ea:	24 c0       	rjmp	.+72     	; 0x8634 <Inicio_Motor_PP+0x1258>
    85ec:	ce 01       	movw	r24, r28
    85ee:	8d 54       	subi	r24, 0x4D	; 77
    85f0:	9f 4f       	sbci	r25, 0xFF	; 255
    85f2:	20 e9       	ldi	r18, 0x90	; 144
    85f4:	31 e0       	ldi	r19, 0x01	; 1
    85f6:	fc 01       	movw	r30, r24
    85f8:	31 83       	std	Z+1, r19	; 0x01
    85fa:	20 83       	st	Z, r18
    85fc:	ce 01       	movw	r24, r28
    85fe:	8d 54       	subi	r24, 0x4D	; 77
    8600:	9f 4f       	sbci	r25, 0xFF	; 255
    8602:	fc 01       	movw	r30, r24
    8604:	80 81       	ld	r24, Z
    8606:	91 81       	ldd	r25, Z+1	; 0x01
    8608:	01 97       	sbiw	r24, 0x01	; 1
    860a:	f1 f7       	brne	.-4      	; 0x8608 <Inicio_Motor_PP+0x122c>
    860c:	9e 01       	movw	r18, r28
    860e:	2d 54       	subi	r18, 0x4D	; 77
    8610:	3f 4f       	sbci	r19, 0xFF	; 255
    8612:	f9 01       	movw	r30, r18
    8614:	91 83       	std	Z+1, r25	; 0x01
    8616:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8618:	ce 01       	movw	r24, r28
    861a:	8f 54       	subi	r24, 0x4F	; 79
    861c:	9f 4f       	sbci	r25, 0xFF	; 255
    861e:	9e 01       	movw	r18, r28
    8620:	2f 54       	subi	r18, 0x4F	; 79
    8622:	3f 4f       	sbci	r19, 0xFF	; 255
    8624:	f9 01       	movw	r30, r18
    8626:	20 81       	ld	r18, Z
    8628:	31 81       	ldd	r19, Z+1	; 0x01
    862a:	21 50       	subi	r18, 0x01	; 1
    862c:	31 09       	sbc	r19, r1
    862e:	fc 01       	movw	r30, r24
    8630:	31 83       	std	Z+1, r19	; 0x01
    8632:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8634:	ce 01       	movw	r24, r28
    8636:	8f 54       	subi	r24, 0x4F	; 79
    8638:	9f 4f       	sbci	r25, 0xFF	; 255
    863a:	fc 01       	movw	r30, r24
    863c:	80 81       	ld	r24, Z
    863e:	91 81       	ldd	r25, Z+1	; 0x01
    8640:	89 2b       	or	r24, r25
    8642:	a1 f6       	brne	.-88     	; 0x85ec <Inicio_Motor_PP+0x1210>
    8644:	2c c0       	rjmp	.+88     	; 0x869e <Inicio_Motor_PP+0x12c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8646:	8e 01       	movw	r16, r28
    8648:	0f 54       	subi	r16, 0x4F	; 79
    864a:	1f 4f       	sbci	r17, 0xFF	; 255
    864c:	ce 01       	movw	r24, r28
    864e:	83 55       	subi	r24, 0x53	; 83
    8650:	9f 4f       	sbci	r25, 0xFF	; 255
    8652:	fc 01       	movw	r30, r24
    8654:	60 81       	ld	r22, Z
    8656:	71 81       	ldd	r23, Z+1	; 0x01
    8658:	82 81       	ldd	r24, Z+2	; 0x02
    865a:	93 81       	ldd	r25, Z+3	; 0x03
    865c:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    8660:	dc 01       	movw	r26, r24
    8662:	cb 01       	movw	r24, r22
    8664:	f8 01       	movw	r30, r16
    8666:	91 83       	std	Z+1, r25	; 0x01
    8668:	80 83       	st	Z, r24
    866a:	ce 01       	movw	r24, r28
    866c:	8b 54       	subi	r24, 0x4B	; 75
    866e:	9f 4f       	sbci	r25, 0xFF	; 255
    8670:	9e 01       	movw	r18, r28
    8672:	2f 54       	subi	r18, 0x4F	; 79
    8674:	3f 4f       	sbci	r19, 0xFF	; 255
    8676:	f9 01       	movw	r30, r18
    8678:	20 81       	ld	r18, Z
    867a:	31 81       	ldd	r19, Z+1	; 0x01
    867c:	fc 01       	movw	r30, r24
    867e:	31 83       	std	Z+1, r19	; 0x01
    8680:	20 83       	st	Z, r18
    8682:	ce 01       	movw	r24, r28
    8684:	8b 54       	subi	r24, 0x4B	; 75
    8686:	9f 4f       	sbci	r25, 0xFF	; 255
    8688:	fc 01       	movw	r30, r24
    868a:	80 81       	ld	r24, Z
    868c:	91 81       	ldd	r25, Z+1	; 0x01
    868e:	01 97       	sbiw	r24, 0x01	; 1
    8690:	f1 f7       	brne	.-4      	; 0x868e <Inicio_Motor_PP+0x12b2>
    8692:	9e 01       	movw	r18, r28
    8694:	2b 54       	subi	r18, 0x4B	; 75
    8696:	3f 4f       	sbci	r19, 0xFF	; 255
    8698:	f9 01       	movw	r30, r18
    869a:	91 83       	std	Z+1, r25	; 0x01
    869c:	80 83       	st	Z, r24
		_delay_ms(TIEMPO_ENTRE_STEP);
		CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_2);
    869e:	88 e2       	ldi	r24, 0x28	; 40
    86a0:	90 e0       	ldi	r25, 0x00	; 0
    86a2:	28 e2       	ldi	r18, 0x28	; 40
    86a4:	30 e0       	ldi	r19, 0x00	; 0
    86a6:	f9 01       	movw	r30, r18
    86a8:	20 81       	ld	r18, Z
    86aa:	2d 7f       	andi	r18, 0xFD	; 253
    86ac:	fc 01       	movw	r30, r24
    86ae:	20 83       	st	Z, r18
    86b0:	9e 01       	movw	r18, r28
    86b2:	29 54       	subi	r18, 0x49	; 73
    86b4:	3f 4f       	sbci	r19, 0xFF	; 255
    86b6:	80 e0       	ldi	r24, 0x00	; 0
    86b8:	90 e0       	ldi	r25, 0x00	; 0
    86ba:	a0 ea       	ldi	r26, 0xA0	; 160
    86bc:	b0 e4       	ldi	r27, 0x40	; 64
    86be:	f9 01       	movw	r30, r18
    86c0:	80 83       	st	Z, r24
    86c2:	91 83       	std	Z+1, r25	; 0x01
    86c4:	a2 83       	std	Z+2, r26	; 0x02
    86c6:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    86c8:	8e 01       	movw	r16, r28
    86ca:	05 54       	subi	r16, 0x45	; 69
    86cc:	1f 4f       	sbci	r17, 0xFF	; 255
    86ce:	ce 01       	movw	r24, r28
    86d0:	89 54       	subi	r24, 0x49	; 73
    86d2:	9f 4f       	sbci	r25, 0xFF	; 255
    86d4:	20 e0       	ldi	r18, 0x00	; 0
    86d6:	30 e0       	ldi	r19, 0x00	; 0
    86d8:	4a e7       	ldi	r20, 0x7A	; 122
    86da:	55 e4       	ldi	r21, 0x45	; 69
    86dc:	fc 01       	movw	r30, r24
    86de:	60 81       	ld	r22, Z
    86e0:	71 81       	ldd	r23, Z+1	; 0x01
    86e2:	82 81       	ldd	r24, Z+2	; 0x02
    86e4:	93 81       	ldd	r25, Z+3	; 0x03
    86e6:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    86ea:	dc 01       	movw	r26, r24
    86ec:	cb 01       	movw	r24, r22
    86ee:	f8 01       	movw	r30, r16
    86f0:	80 83       	st	Z, r24
    86f2:	91 83       	std	Z+1, r25	; 0x01
    86f4:	a2 83       	std	Z+2, r26	; 0x02
    86f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    86f8:	ce 01       	movw	r24, r28
    86fa:	85 54       	subi	r24, 0x45	; 69
    86fc:	9f 4f       	sbci	r25, 0xFF	; 255
    86fe:	20 e0       	ldi	r18, 0x00	; 0
    8700:	30 e0       	ldi	r19, 0x00	; 0
    8702:	40 e8       	ldi	r20, 0x80	; 128
    8704:	5f e3       	ldi	r21, 0x3F	; 63
    8706:	fc 01       	movw	r30, r24
    8708:	60 81       	ld	r22, Z
    870a:	71 81       	ldd	r23, Z+1	; 0x01
    870c:	82 81       	ldd	r24, Z+2	; 0x02
    870e:	93 81       	ldd	r25, Z+3	; 0x03
    8710:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    8714:	88 23       	and	r24, r24
    8716:	4c f4       	brge	.+18     	; 0x872a <Inicio_Motor_PP+0x134e>
		__ticks = 1;
    8718:	ce 01       	movw	r24, r28
    871a:	81 54       	subi	r24, 0x41	; 65
    871c:	9f 4f       	sbci	r25, 0xFF	; 255
    871e:	21 e0       	ldi	r18, 0x01	; 1
    8720:	30 e0       	ldi	r19, 0x00	; 0
    8722:	fc 01       	movw	r30, r24
    8724:	31 83       	std	Z+1, r19	; 0x01
    8726:	20 83       	st	Z, r18
    8728:	6d c0       	rjmp	.+218    	; 0x8804 <Inicio_Motor_PP+0x1428>
	else if (__tmp > 65535)
    872a:	ce 01       	movw	r24, r28
    872c:	85 54       	subi	r24, 0x45	; 69
    872e:	9f 4f       	sbci	r25, 0xFF	; 255
    8730:	20 e0       	ldi	r18, 0x00	; 0
    8732:	3f ef       	ldi	r19, 0xFF	; 255
    8734:	4f e7       	ldi	r20, 0x7F	; 127
    8736:	57 e4       	ldi	r21, 0x47	; 71
    8738:	fc 01       	movw	r30, r24
    873a:	60 81       	ld	r22, Z
    873c:	71 81       	ldd	r23, Z+1	; 0x01
    873e:	82 81       	ldd	r24, Z+2	; 0x02
    8740:	93 81       	ldd	r25, Z+3	; 0x03
    8742:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    8746:	18 16       	cp	r1, r24
    8748:	0c f0       	brlt	.+2      	; 0x874c <Inicio_Motor_PP+0x1370>
    874a:	4a c0       	rjmp	.+148    	; 0x87e0 <Inicio_Motor_PP+0x1404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    874c:	ce 01       	movw	r24, r28
    874e:	89 54       	subi	r24, 0x49	; 73
    8750:	9f 4f       	sbci	r25, 0xFF	; 255
    8752:	20 e0       	ldi	r18, 0x00	; 0
    8754:	30 e0       	ldi	r19, 0x00	; 0
    8756:	40 e2       	ldi	r20, 0x20	; 32
    8758:	51 e4       	ldi	r21, 0x41	; 65
    875a:	fc 01       	movw	r30, r24
    875c:	60 81       	ld	r22, Z
    875e:	71 81       	ldd	r23, Z+1	; 0x01
    8760:	82 81       	ldd	r24, Z+2	; 0x02
    8762:	93 81       	ldd	r25, Z+3	; 0x03
    8764:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    8768:	dc 01       	movw	r26, r24
    876a:	cb 01       	movw	r24, r22
    876c:	8e 01       	movw	r16, r28
    876e:	01 54       	subi	r16, 0x41	; 65
    8770:	1f 4f       	sbci	r17, 0xFF	; 255
    8772:	bc 01       	movw	r22, r24
    8774:	cd 01       	movw	r24, r26
    8776:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    877a:	dc 01       	movw	r26, r24
    877c:	cb 01       	movw	r24, r22
    877e:	f8 01       	movw	r30, r16
    8780:	91 83       	std	Z+1, r25	; 0x01
    8782:	80 83       	st	Z, r24
    8784:	24 c0       	rjmp	.+72     	; 0x87ce <Inicio_Motor_PP+0x13f2>
    8786:	ce 01       	movw	r24, r28
    8788:	8f 53       	subi	r24, 0x3F	; 63
    878a:	9f 4f       	sbci	r25, 0xFF	; 255
    878c:	20 e9       	ldi	r18, 0x90	; 144
    878e:	31 e0       	ldi	r19, 0x01	; 1
    8790:	fc 01       	movw	r30, r24
    8792:	31 83       	std	Z+1, r19	; 0x01
    8794:	20 83       	st	Z, r18
    8796:	ce 01       	movw	r24, r28
    8798:	8f 53       	subi	r24, 0x3F	; 63
    879a:	9f 4f       	sbci	r25, 0xFF	; 255
    879c:	fc 01       	movw	r30, r24
    879e:	80 81       	ld	r24, Z
    87a0:	91 81       	ldd	r25, Z+1	; 0x01
    87a2:	01 97       	sbiw	r24, 0x01	; 1
    87a4:	f1 f7       	brne	.-4      	; 0x87a2 <Inicio_Motor_PP+0x13c6>
    87a6:	9e 01       	movw	r18, r28
    87a8:	2f 53       	subi	r18, 0x3F	; 63
    87aa:	3f 4f       	sbci	r19, 0xFF	; 255
    87ac:	f9 01       	movw	r30, r18
    87ae:	91 83       	std	Z+1, r25	; 0x01
    87b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    87b2:	ce 01       	movw	r24, r28
    87b4:	81 54       	subi	r24, 0x41	; 65
    87b6:	9f 4f       	sbci	r25, 0xFF	; 255
    87b8:	9e 01       	movw	r18, r28
    87ba:	21 54       	subi	r18, 0x41	; 65
    87bc:	3f 4f       	sbci	r19, 0xFF	; 255
    87be:	f9 01       	movw	r30, r18
    87c0:	20 81       	ld	r18, Z
    87c2:	31 81       	ldd	r19, Z+1	; 0x01
    87c4:	21 50       	subi	r18, 0x01	; 1
    87c6:	31 09       	sbc	r19, r1
    87c8:	fc 01       	movw	r30, r24
    87ca:	31 83       	std	Z+1, r19	; 0x01
    87cc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    87ce:	ce 01       	movw	r24, r28
    87d0:	81 54       	subi	r24, 0x41	; 65
    87d2:	9f 4f       	sbci	r25, 0xFF	; 255
    87d4:	fc 01       	movw	r30, r24
    87d6:	80 81       	ld	r24, Z
    87d8:	91 81       	ldd	r25, Z+1	; 0x01
    87da:	89 2b       	or	r24, r25
    87dc:	a1 f6       	brne	.-88     	; 0x8786 <Inicio_Motor_PP+0x13aa>
    87de:	2c c0       	rjmp	.+88     	; 0x8838 <Inicio_Motor_PP+0x145c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    87e0:	8e 01       	movw	r16, r28
    87e2:	01 54       	subi	r16, 0x41	; 65
    87e4:	1f 4f       	sbci	r17, 0xFF	; 255
    87e6:	ce 01       	movw	r24, r28
    87e8:	85 54       	subi	r24, 0x45	; 69
    87ea:	9f 4f       	sbci	r25, 0xFF	; 255
    87ec:	fc 01       	movw	r30, r24
    87ee:	60 81       	ld	r22, Z
    87f0:	71 81       	ldd	r23, Z+1	; 0x01
    87f2:	82 81       	ldd	r24, Z+2	; 0x02
    87f4:	93 81       	ldd	r25, Z+3	; 0x03
    87f6:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    87fa:	dc 01       	movw	r26, r24
    87fc:	cb 01       	movw	r24, r22
    87fe:	f8 01       	movw	r30, r16
    8800:	91 83       	std	Z+1, r25	; 0x01
    8802:	80 83       	st	Z, r24
    8804:	ce 01       	movw	r24, r28
    8806:	8d 53       	subi	r24, 0x3D	; 61
    8808:	9f 4f       	sbci	r25, 0xFF	; 255
    880a:	9e 01       	movw	r18, r28
    880c:	21 54       	subi	r18, 0x41	; 65
    880e:	3f 4f       	sbci	r19, 0xFF	; 255
    8810:	f9 01       	movw	r30, r18
    8812:	20 81       	ld	r18, Z
    8814:	31 81       	ldd	r19, Z+1	; 0x01
    8816:	fc 01       	movw	r30, r24
    8818:	31 83       	std	Z+1, r19	; 0x01
    881a:	20 83       	st	Z, r18
    881c:	ce 01       	movw	r24, r28
    881e:	8d 53       	subi	r24, 0x3D	; 61
    8820:	9f 4f       	sbci	r25, 0xFF	; 255
    8822:	fc 01       	movw	r30, r24
    8824:	80 81       	ld	r24, Z
    8826:	91 81       	ldd	r25, Z+1	; 0x01
    8828:	01 97       	sbiw	r24, 0x01	; 1
    882a:	f1 f7       	brne	.-4      	; 0x8828 <Inicio_Motor_PP+0x144c>
    882c:	9e 01       	movw	r18, r28
    882e:	2d 53       	subi	r18, 0x3D	; 61
    8830:	3f 4f       	sbci	r19, 0xFF	; 255
    8832:	f9 01       	movw	r30, r18
    8834:	91 83       	std	Z+1, r25	; 0x01
    8836:	80 83       	st	Z, r24
		_delay_ms(TIEMPO_ENTRE_STEP);
		SET_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_4);
    8838:	88 e2       	ldi	r24, 0x28	; 40
    883a:	90 e0       	ldi	r25, 0x00	; 0
    883c:	28 e2       	ldi	r18, 0x28	; 40
    883e:	30 e0       	ldi	r19, 0x00	; 0
    8840:	f9 01       	movw	r30, r18
    8842:	20 81       	ld	r18, Z
    8844:	28 60       	ori	r18, 0x08	; 8
    8846:	fc 01       	movw	r30, r24
    8848:	20 83       	st	Z, r18
    884a:	9e 01       	movw	r18, r28
    884c:	2b 53       	subi	r18, 0x3B	; 59
    884e:	3f 4f       	sbci	r19, 0xFF	; 255
    8850:	80 e0       	ldi	r24, 0x00	; 0
    8852:	90 e0       	ldi	r25, 0x00	; 0
    8854:	a0 ea       	ldi	r26, 0xA0	; 160
    8856:	b0 e4       	ldi	r27, 0x40	; 64
    8858:	f9 01       	movw	r30, r18
    885a:	80 83       	st	Z, r24
    885c:	91 83       	std	Z+1, r25	; 0x01
    885e:	a2 83       	std	Z+2, r26	; 0x02
    8860:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    8862:	8e 01       	movw	r16, r28
    8864:	07 53       	subi	r16, 0x37	; 55
    8866:	1f 4f       	sbci	r17, 0xFF	; 255
    8868:	ce 01       	movw	r24, r28
    886a:	8b 53       	subi	r24, 0x3B	; 59
    886c:	9f 4f       	sbci	r25, 0xFF	; 255
    886e:	20 e0       	ldi	r18, 0x00	; 0
    8870:	30 e0       	ldi	r19, 0x00	; 0
    8872:	4a e7       	ldi	r20, 0x7A	; 122
    8874:	55 e4       	ldi	r21, 0x45	; 69
    8876:	fc 01       	movw	r30, r24
    8878:	60 81       	ld	r22, Z
    887a:	71 81       	ldd	r23, Z+1	; 0x01
    887c:	82 81       	ldd	r24, Z+2	; 0x02
    887e:	93 81       	ldd	r25, Z+3	; 0x03
    8880:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    8884:	dc 01       	movw	r26, r24
    8886:	cb 01       	movw	r24, r22
    8888:	f8 01       	movw	r30, r16
    888a:	80 83       	st	Z, r24
    888c:	91 83       	std	Z+1, r25	; 0x01
    888e:	a2 83       	std	Z+2, r26	; 0x02
    8890:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8892:	ce 01       	movw	r24, r28
    8894:	87 53       	subi	r24, 0x37	; 55
    8896:	9f 4f       	sbci	r25, 0xFF	; 255
    8898:	20 e0       	ldi	r18, 0x00	; 0
    889a:	30 e0       	ldi	r19, 0x00	; 0
    889c:	40 e8       	ldi	r20, 0x80	; 128
    889e:	5f e3       	ldi	r21, 0x3F	; 63
    88a0:	fc 01       	movw	r30, r24
    88a2:	60 81       	ld	r22, Z
    88a4:	71 81       	ldd	r23, Z+1	; 0x01
    88a6:	82 81       	ldd	r24, Z+2	; 0x02
    88a8:	93 81       	ldd	r25, Z+3	; 0x03
    88aa:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    88ae:	88 23       	and	r24, r24
    88b0:	4c f4       	brge	.+18     	; 0x88c4 <Inicio_Motor_PP+0x14e8>
		__ticks = 1;
    88b2:	ce 01       	movw	r24, r28
    88b4:	83 53       	subi	r24, 0x33	; 51
    88b6:	9f 4f       	sbci	r25, 0xFF	; 255
    88b8:	21 e0       	ldi	r18, 0x01	; 1
    88ba:	30 e0       	ldi	r19, 0x00	; 0
    88bc:	fc 01       	movw	r30, r24
    88be:	31 83       	std	Z+1, r19	; 0x01
    88c0:	20 83       	st	Z, r18
    88c2:	6d c0       	rjmp	.+218    	; 0x899e <Inicio_Motor_PP+0x15c2>
	else if (__tmp > 65535)
    88c4:	ce 01       	movw	r24, r28
    88c6:	87 53       	subi	r24, 0x37	; 55
    88c8:	9f 4f       	sbci	r25, 0xFF	; 255
    88ca:	20 e0       	ldi	r18, 0x00	; 0
    88cc:	3f ef       	ldi	r19, 0xFF	; 255
    88ce:	4f e7       	ldi	r20, 0x7F	; 127
    88d0:	57 e4       	ldi	r21, 0x47	; 71
    88d2:	fc 01       	movw	r30, r24
    88d4:	60 81       	ld	r22, Z
    88d6:	71 81       	ldd	r23, Z+1	; 0x01
    88d8:	82 81       	ldd	r24, Z+2	; 0x02
    88da:	93 81       	ldd	r25, Z+3	; 0x03
    88dc:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    88e0:	18 16       	cp	r1, r24
    88e2:	0c f0       	brlt	.+2      	; 0x88e6 <Inicio_Motor_PP+0x150a>
    88e4:	4a c0       	rjmp	.+148    	; 0x897a <Inicio_Motor_PP+0x159e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    88e6:	ce 01       	movw	r24, r28
    88e8:	8b 53       	subi	r24, 0x3B	; 59
    88ea:	9f 4f       	sbci	r25, 0xFF	; 255
    88ec:	20 e0       	ldi	r18, 0x00	; 0
    88ee:	30 e0       	ldi	r19, 0x00	; 0
    88f0:	40 e2       	ldi	r20, 0x20	; 32
    88f2:	51 e4       	ldi	r21, 0x41	; 65
    88f4:	fc 01       	movw	r30, r24
    88f6:	60 81       	ld	r22, Z
    88f8:	71 81       	ldd	r23, Z+1	; 0x01
    88fa:	82 81       	ldd	r24, Z+2	; 0x02
    88fc:	93 81       	ldd	r25, Z+3	; 0x03
    88fe:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    8902:	dc 01       	movw	r26, r24
    8904:	cb 01       	movw	r24, r22
    8906:	8e 01       	movw	r16, r28
    8908:	03 53       	subi	r16, 0x33	; 51
    890a:	1f 4f       	sbci	r17, 0xFF	; 255
    890c:	bc 01       	movw	r22, r24
    890e:	cd 01       	movw	r24, r26
    8910:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    8914:	dc 01       	movw	r26, r24
    8916:	cb 01       	movw	r24, r22
    8918:	f8 01       	movw	r30, r16
    891a:	91 83       	std	Z+1, r25	; 0x01
    891c:	80 83       	st	Z, r24
    891e:	24 c0       	rjmp	.+72     	; 0x8968 <Inicio_Motor_PP+0x158c>
    8920:	ce 01       	movw	r24, r28
    8922:	81 53       	subi	r24, 0x31	; 49
    8924:	9f 4f       	sbci	r25, 0xFF	; 255
    8926:	20 e9       	ldi	r18, 0x90	; 144
    8928:	31 e0       	ldi	r19, 0x01	; 1
    892a:	fc 01       	movw	r30, r24
    892c:	31 83       	std	Z+1, r19	; 0x01
    892e:	20 83       	st	Z, r18
    8930:	ce 01       	movw	r24, r28
    8932:	81 53       	subi	r24, 0x31	; 49
    8934:	9f 4f       	sbci	r25, 0xFF	; 255
    8936:	fc 01       	movw	r30, r24
    8938:	80 81       	ld	r24, Z
    893a:	91 81       	ldd	r25, Z+1	; 0x01
    893c:	01 97       	sbiw	r24, 0x01	; 1
    893e:	f1 f7       	brne	.-4      	; 0x893c <Inicio_Motor_PP+0x1560>
    8940:	9e 01       	movw	r18, r28
    8942:	21 53       	subi	r18, 0x31	; 49
    8944:	3f 4f       	sbci	r19, 0xFF	; 255
    8946:	f9 01       	movw	r30, r18
    8948:	91 83       	std	Z+1, r25	; 0x01
    894a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    894c:	ce 01       	movw	r24, r28
    894e:	83 53       	subi	r24, 0x33	; 51
    8950:	9f 4f       	sbci	r25, 0xFF	; 255
    8952:	9e 01       	movw	r18, r28
    8954:	23 53       	subi	r18, 0x33	; 51
    8956:	3f 4f       	sbci	r19, 0xFF	; 255
    8958:	f9 01       	movw	r30, r18
    895a:	20 81       	ld	r18, Z
    895c:	31 81       	ldd	r19, Z+1	; 0x01
    895e:	21 50       	subi	r18, 0x01	; 1
    8960:	31 09       	sbc	r19, r1
    8962:	fc 01       	movw	r30, r24
    8964:	31 83       	std	Z+1, r19	; 0x01
    8966:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8968:	ce 01       	movw	r24, r28
    896a:	83 53       	subi	r24, 0x33	; 51
    896c:	9f 4f       	sbci	r25, 0xFF	; 255
    896e:	fc 01       	movw	r30, r24
    8970:	80 81       	ld	r24, Z
    8972:	91 81       	ldd	r25, Z+1	; 0x01
    8974:	89 2b       	or	r24, r25
    8976:	a1 f6       	brne	.-88     	; 0x8920 <Inicio_Motor_PP+0x1544>
    8978:	2c c0       	rjmp	.+88     	; 0x89d2 <Inicio_Motor_PP+0x15f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    897a:	8e 01       	movw	r16, r28
    897c:	03 53       	subi	r16, 0x33	; 51
    897e:	1f 4f       	sbci	r17, 0xFF	; 255
    8980:	ce 01       	movw	r24, r28
    8982:	87 53       	subi	r24, 0x37	; 55
    8984:	9f 4f       	sbci	r25, 0xFF	; 255
    8986:	fc 01       	movw	r30, r24
    8988:	60 81       	ld	r22, Z
    898a:	71 81       	ldd	r23, Z+1	; 0x01
    898c:	82 81       	ldd	r24, Z+2	; 0x02
    898e:	93 81       	ldd	r25, Z+3	; 0x03
    8990:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    8994:	dc 01       	movw	r26, r24
    8996:	cb 01       	movw	r24, r22
    8998:	f8 01       	movw	r30, r16
    899a:	91 83       	std	Z+1, r25	; 0x01
    899c:	80 83       	st	Z, r24
    899e:	ce 01       	movw	r24, r28
    89a0:	8f 52       	subi	r24, 0x2F	; 47
    89a2:	9f 4f       	sbci	r25, 0xFF	; 255
    89a4:	9e 01       	movw	r18, r28
    89a6:	23 53       	subi	r18, 0x33	; 51
    89a8:	3f 4f       	sbci	r19, 0xFF	; 255
    89aa:	f9 01       	movw	r30, r18
    89ac:	20 81       	ld	r18, Z
    89ae:	31 81       	ldd	r19, Z+1	; 0x01
    89b0:	fc 01       	movw	r30, r24
    89b2:	31 83       	std	Z+1, r19	; 0x01
    89b4:	20 83       	st	Z, r18
    89b6:	ce 01       	movw	r24, r28
    89b8:	8f 52       	subi	r24, 0x2F	; 47
    89ba:	9f 4f       	sbci	r25, 0xFF	; 255
    89bc:	fc 01       	movw	r30, r24
    89be:	80 81       	ld	r24, Z
    89c0:	91 81       	ldd	r25, Z+1	; 0x01
    89c2:	01 97       	sbiw	r24, 0x01	; 1
    89c4:	f1 f7       	brne	.-4      	; 0x89c2 <Inicio_Motor_PP+0x15e6>
    89c6:	9e 01       	movw	r18, r28
    89c8:	2f 52       	subi	r18, 0x2F	; 47
    89ca:	3f 4f       	sbci	r19, 0xFF	; 255
    89cc:	f9 01       	movw	r30, r18
    89ce:	91 83       	std	Z+1, r25	; 0x01
    89d0:	80 83       	st	Z, r24
		_delay_ms(TIEMPO_ENTRE_STEP);
		CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_4);
    89d2:	88 e2       	ldi	r24, 0x28	; 40
    89d4:	90 e0       	ldi	r25, 0x00	; 0
    89d6:	28 e2       	ldi	r18, 0x28	; 40
    89d8:	30 e0       	ldi	r19, 0x00	; 0
    89da:	f9 01       	movw	r30, r18
    89dc:	20 81       	ld	r18, Z
    89de:	27 7f       	andi	r18, 0xF7	; 247
    89e0:	fc 01       	movw	r30, r24
    89e2:	20 83       	st	Z, r18
    89e4:	9e 01       	movw	r18, r28
    89e6:	2d 52       	subi	r18, 0x2D	; 45
    89e8:	3f 4f       	sbci	r19, 0xFF	; 255
    89ea:	80 e0       	ldi	r24, 0x00	; 0
    89ec:	90 e0       	ldi	r25, 0x00	; 0
    89ee:	a0 ea       	ldi	r26, 0xA0	; 160
    89f0:	b0 e4       	ldi	r27, 0x40	; 64
    89f2:	f9 01       	movw	r30, r18
    89f4:	80 83       	st	Z, r24
    89f6:	91 83       	std	Z+1, r25	; 0x01
    89f8:	a2 83       	std	Z+2, r26	; 0x02
    89fa:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    89fc:	8e 01       	movw	r16, r28
    89fe:	09 52       	subi	r16, 0x29	; 41
    8a00:	1f 4f       	sbci	r17, 0xFF	; 255
    8a02:	ce 01       	movw	r24, r28
    8a04:	8d 52       	subi	r24, 0x2D	; 45
    8a06:	9f 4f       	sbci	r25, 0xFF	; 255
    8a08:	20 e0       	ldi	r18, 0x00	; 0
    8a0a:	30 e0       	ldi	r19, 0x00	; 0
    8a0c:	4a e7       	ldi	r20, 0x7A	; 122
    8a0e:	55 e4       	ldi	r21, 0x45	; 69
    8a10:	fc 01       	movw	r30, r24
    8a12:	60 81       	ld	r22, Z
    8a14:	71 81       	ldd	r23, Z+1	; 0x01
    8a16:	82 81       	ldd	r24, Z+2	; 0x02
    8a18:	93 81       	ldd	r25, Z+3	; 0x03
    8a1a:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    8a1e:	dc 01       	movw	r26, r24
    8a20:	cb 01       	movw	r24, r22
    8a22:	f8 01       	movw	r30, r16
    8a24:	80 83       	st	Z, r24
    8a26:	91 83       	std	Z+1, r25	; 0x01
    8a28:	a2 83       	std	Z+2, r26	; 0x02
    8a2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8a2c:	ce 01       	movw	r24, r28
    8a2e:	89 52       	subi	r24, 0x29	; 41
    8a30:	9f 4f       	sbci	r25, 0xFF	; 255
    8a32:	20 e0       	ldi	r18, 0x00	; 0
    8a34:	30 e0       	ldi	r19, 0x00	; 0
    8a36:	40 e8       	ldi	r20, 0x80	; 128
    8a38:	5f e3       	ldi	r21, 0x3F	; 63
    8a3a:	fc 01       	movw	r30, r24
    8a3c:	60 81       	ld	r22, Z
    8a3e:	71 81       	ldd	r23, Z+1	; 0x01
    8a40:	82 81       	ldd	r24, Z+2	; 0x02
    8a42:	93 81       	ldd	r25, Z+3	; 0x03
    8a44:	0e 94 d4 56 	call	0xada8	; 0xada8 <__cmpsf2>
    8a48:	88 23       	and	r24, r24
    8a4a:	4c f4       	brge	.+18     	; 0x8a5e <Inicio_Motor_PP+0x1682>
		__ticks = 1;
    8a4c:	ce 01       	movw	r24, r28
    8a4e:	85 52       	subi	r24, 0x25	; 37
    8a50:	9f 4f       	sbci	r25, 0xFF	; 255
    8a52:	21 e0       	ldi	r18, 0x01	; 1
    8a54:	30 e0       	ldi	r19, 0x00	; 0
    8a56:	fc 01       	movw	r30, r24
    8a58:	31 83       	std	Z+1, r19	; 0x01
    8a5a:	20 83       	st	Z, r18
    8a5c:	6d c0       	rjmp	.+218    	; 0x8b38 <Inicio_Motor_PP+0x175c>
	else if (__tmp > 65535)
    8a5e:	ce 01       	movw	r24, r28
    8a60:	89 52       	subi	r24, 0x29	; 41
    8a62:	9f 4f       	sbci	r25, 0xFF	; 255
    8a64:	20 e0       	ldi	r18, 0x00	; 0
    8a66:	3f ef       	ldi	r19, 0xFF	; 255
    8a68:	4f e7       	ldi	r20, 0x7F	; 127
    8a6a:	57 e4       	ldi	r21, 0x47	; 71
    8a6c:	fc 01       	movw	r30, r24
    8a6e:	60 81       	ld	r22, Z
    8a70:	71 81       	ldd	r23, Z+1	; 0x01
    8a72:	82 81       	ldd	r24, Z+2	; 0x02
    8a74:	93 81       	ldd	r25, Z+3	; 0x03
    8a76:	0e 94 33 58 	call	0xb066	; 0xb066 <__gesf2>
    8a7a:	18 16       	cp	r1, r24
    8a7c:	0c f0       	brlt	.+2      	; 0x8a80 <Inicio_Motor_PP+0x16a4>
    8a7e:	4a c0       	rjmp	.+148    	; 0x8b14 <Inicio_Motor_PP+0x1738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8a80:	ce 01       	movw	r24, r28
    8a82:	8d 52       	subi	r24, 0x2D	; 45
    8a84:	9f 4f       	sbci	r25, 0xFF	; 255
    8a86:	20 e0       	ldi	r18, 0x00	; 0
    8a88:	30 e0       	ldi	r19, 0x00	; 0
    8a8a:	40 e2       	ldi	r20, 0x20	; 32
    8a8c:	51 e4       	ldi	r21, 0x41	; 65
    8a8e:	fc 01       	movw	r30, r24
    8a90:	60 81       	ld	r22, Z
    8a92:	71 81       	ldd	r23, Z+1	; 0x01
    8a94:	82 81       	ldd	r24, Z+2	; 0x02
    8a96:	93 81       	ldd	r25, Z+3	; 0x03
    8a98:	0e 94 38 58 	call	0xb070	; 0xb070 <__mulsf3>
    8a9c:	dc 01       	movw	r26, r24
    8a9e:	cb 01       	movw	r24, r22
    8aa0:	8e 01       	movw	r16, r28
    8aa2:	05 52       	subi	r16, 0x25	; 37
    8aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    8aa6:	bc 01       	movw	r22, r24
    8aa8:	cd 01       	movw	r24, r26
    8aaa:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    8aae:	dc 01       	movw	r26, r24
    8ab0:	cb 01       	movw	r24, r22
    8ab2:	f8 01       	movw	r30, r16
    8ab4:	91 83       	std	Z+1, r25	; 0x01
    8ab6:	80 83       	st	Z, r24
    8ab8:	24 c0       	rjmp	.+72     	; 0x8b02 <Inicio_Motor_PP+0x1726>
    8aba:	ce 01       	movw	r24, r28
    8abc:	83 52       	subi	r24, 0x23	; 35
    8abe:	9f 4f       	sbci	r25, 0xFF	; 255
    8ac0:	20 e9       	ldi	r18, 0x90	; 144
    8ac2:	31 e0       	ldi	r19, 0x01	; 1
    8ac4:	fc 01       	movw	r30, r24
    8ac6:	31 83       	std	Z+1, r19	; 0x01
    8ac8:	20 83       	st	Z, r18
    8aca:	ce 01       	movw	r24, r28
    8acc:	83 52       	subi	r24, 0x23	; 35
    8ace:	9f 4f       	sbci	r25, 0xFF	; 255
    8ad0:	fc 01       	movw	r30, r24
    8ad2:	80 81       	ld	r24, Z
    8ad4:	91 81       	ldd	r25, Z+1	; 0x01
    8ad6:	01 97       	sbiw	r24, 0x01	; 1
    8ad8:	f1 f7       	brne	.-4      	; 0x8ad6 <Inicio_Motor_PP+0x16fa>
    8ada:	9e 01       	movw	r18, r28
    8adc:	23 52       	subi	r18, 0x23	; 35
    8ade:	3f 4f       	sbci	r19, 0xFF	; 255
    8ae0:	f9 01       	movw	r30, r18
    8ae2:	91 83       	std	Z+1, r25	; 0x01
    8ae4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8ae6:	ce 01       	movw	r24, r28
    8ae8:	85 52       	subi	r24, 0x25	; 37
    8aea:	9f 4f       	sbci	r25, 0xFF	; 255
    8aec:	9e 01       	movw	r18, r28
    8aee:	25 52       	subi	r18, 0x25	; 37
    8af0:	3f 4f       	sbci	r19, 0xFF	; 255
    8af2:	f9 01       	movw	r30, r18
    8af4:	20 81       	ld	r18, Z
    8af6:	31 81       	ldd	r19, Z+1	; 0x01
    8af8:	21 50       	subi	r18, 0x01	; 1
    8afa:	31 09       	sbc	r19, r1
    8afc:	fc 01       	movw	r30, r24
    8afe:	31 83       	std	Z+1, r19	; 0x01
    8b00:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8b02:	ce 01       	movw	r24, r28
    8b04:	85 52       	subi	r24, 0x25	; 37
    8b06:	9f 4f       	sbci	r25, 0xFF	; 255
    8b08:	fc 01       	movw	r30, r24
    8b0a:	80 81       	ld	r24, Z
    8b0c:	91 81       	ldd	r25, Z+1	; 0x01
    8b0e:	89 2b       	or	r24, r25
    8b10:	a1 f6       	brne	.-88     	; 0x8aba <Inicio_Motor_PP+0x16de>
    8b12:	2c c0       	rjmp	.+88     	; 0x8b6c <Inicio_Motor_PP+0x1790>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8b14:	8e 01       	movw	r16, r28
    8b16:	05 52       	subi	r16, 0x25	; 37
    8b18:	1f 4f       	sbci	r17, 0xFF	; 255
    8b1a:	ce 01       	movw	r24, r28
    8b1c:	89 52       	subi	r24, 0x29	; 41
    8b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    8b20:	fc 01       	movw	r30, r24
    8b22:	60 81       	ld	r22, Z
    8b24:	71 81       	ldd	r23, Z+1	; 0x01
    8b26:	82 81       	ldd	r24, Z+2	; 0x02
    8b28:	93 81       	ldd	r25, Z+3	; 0x03
    8b2a:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    8b2e:	dc 01       	movw	r26, r24
    8b30:	cb 01       	movw	r24, r22
    8b32:	f8 01       	movw	r30, r16
    8b34:	91 83       	std	Z+1, r25	; 0x01
    8b36:	80 83       	st	Z, r24
    8b38:	ce 01       	movw	r24, r28
    8b3a:	81 52       	subi	r24, 0x21	; 33
    8b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    8b3e:	9e 01       	movw	r18, r28
    8b40:	25 52       	subi	r18, 0x25	; 37
    8b42:	3f 4f       	sbci	r19, 0xFF	; 255
    8b44:	f9 01       	movw	r30, r18
    8b46:	20 81       	ld	r18, Z
    8b48:	31 81       	ldd	r19, Z+1	; 0x01
    8b4a:	fc 01       	movw	r30, r24
    8b4c:	31 83       	std	Z+1, r19	; 0x01
    8b4e:	20 83       	st	Z, r18
    8b50:	ce 01       	movw	r24, r28
    8b52:	81 52       	subi	r24, 0x21	; 33
    8b54:	9f 4f       	sbci	r25, 0xFF	; 255
    8b56:	fc 01       	movw	r30, r24
    8b58:	80 81       	ld	r24, Z
    8b5a:	91 81       	ldd	r25, Z+1	; 0x01
    8b5c:	01 97       	sbiw	r24, 0x01	; 1
    8b5e:	f1 f7       	brne	.-4      	; 0x8b5c <Inicio_Motor_PP+0x1780>
    8b60:	9e 01       	movw	r18, r28
    8b62:	21 52       	subi	r18, 0x21	; 33
    8b64:	3f 4f       	sbci	r19, 0xFF	; 255
    8b66:	f9 01       	movw	r30, r18
    8b68:	91 83       	std	Z+1, r25	; 0x01
    8b6a:	80 83       	st	Z, r24
		_delay_ms(TIEMPO_ENTRE_STEP);
		stepToRotate -= 4;
    8b6c:	80 91 92 04 	lds	r24, 0x0492
    8b70:	90 91 93 04 	lds	r25, 0x0493
    8b74:	04 97       	sbiw	r24, 0x04	; 4
    8b76:	90 93 93 04 	sts	0x0493, r25
    8b7a:	80 93 92 04 	sts	0x0492, r24
		stepToRotate += 4;
	}

	// abro al minimo
	stepToRotate = MIN_MOTOR_PP_ACUMULADOS;
	while (stepToRotate > 0){//1->3->2->4->1
    8b7e:	80 91 92 04 	lds	r24, 0x0492
    8b82:	90 91 93 04 	lds	r25, 0x0493
    8b86:	18 16       	cp	r1, r24
    8b88:	19 06       	cpc	r1, r25
    8b8a:	0c f4       	brge	.+2      	; 0x8b8e <Inicio_Motor_PP+0x17b2>
    8b8c:	87 c9       	rjmp	.-3314   	; 0x7e9c <Inicio_Motor_PP+0xac0>
		CLEAR_BIT(MOTOR_PP_PORT, MOTOR_PP_PIN_4);
		_delay_ms(TIEMPO_ENTRE_STEP);
		stepToRotate -= 4;
	}

	stepToRotate = 0;
    8b8e:	10 92 93 04 	sts	0x0493, r1
    8b92:	10 92 92 04 	sts	0x0492, r1
	relativePositionBySteps = MIN_MOTOR_PP_ACUMULADOS;
    8b96:	80 e1       	ldi	r24, 0x10	; 16
    8b98:	90 e0       	ldi	r25, 0x00	; 0
    8b9a:	90 93 8d 04 	sts	0x048D, r25
    8b9e:	80 93 8c 04 	sts	0x048C, r24
	stateMotorPP = STATE_MOTOR_4;
    8ba2:	84 e0       	ldi	r24, 0x04	; 4
    8ba4:	90 e0       	ldi	r25, 0x00	; 0
    8ba6:	90 93 8b 04 	sts	0x048B, r25
    8baa:	80 93 8a 04 	sts	0x048A, r24
	uchEstadoRotar = MOTOR_PP_ROTAR_STEP_4;
    8bae:	88 e3       	ldi	r24, 0x38	; 56
    8bb0:	80 93 8e 04 	sts	0x048E, r24
	uchEstadoMotorPP = MOTOR_PP_STANDBY;
    8bb4:	81 e0       	ldi	r24, 0x01	; 1
    8bb6:	80 93 91 04 	sts	0x0491, r24
}
    8bba:	c0 52       	subi	r28, 0x20	; 32
    8bbc:	df 4f       	sbci	r29, 0xFF	; 255
    8bbe:	0f b6       	in	r0, 0x3f	; 63
    8bc0:	f8 94       	cli
    8bc2:	de bf       	out	0x3e, r29	; 62
    8bc4:	0f be       	out	0x3f, r0	; 63
    8bc6:	cd bf       	out	0x3d, r28	; 61
    8bc8:	df 91       	pop	r29
    8bca:	cf 91       	pop	r28
    8bcc:	1f 91       	pop	r17
    8bce:	0f 91       	pop	r16
    8bd0:	08 95       	ret

00008bd2 <Terminal>:

/************************************************************************
* Máquina de estados de recepción y transmision por terminal
************************************************************************/

void Terminal(void) {
    8bd2:	0f 93       	push	r16
    8bd4:	1f 93       	push	r17
    8bd6:	cf 93       	push	r28
    8bd8:	df 93       	push	r29
    8bda:	00 d0       	rcall	.+0      	; 0x8bdc <Terminal+0xa>
    8bdc:	00 d0       	rcall	.+0      	; 0x8bde <Terminal+0xc>
    8bde:	cd b7       	in	r28, 0x3d	; 61
    8be0:	de b7       	in	r29, 0x3e	; 62
	switch (uchEstadoTerminal) {
    8be2:	80 91 94 04 	lds	r24, 0x0494
    8be6:	88 2f       	mov	r24, r24
    8be8:	90 e0       	ldi	r25, 0x00	; 0
    8bea:	00 97       	sbiw	r24, 0x00	; 0
    8bec:	21 f0       	breq	.+8      	; 0x8bf6 <Terminal+0x24>
    8bee:	01 97       	sbiw	r24, 0x01	; 1
    8bf0:	b9 f0       	breq	.+46     	; 0x8c20 <Terminal+0x4e>
    8bf2:	0c 94 77 52 	jmp	0xa4ee	; 0xa4ee <Terminal+0x191c>
		case TERMINAL_STANDBY:

			if (uchEstadoBufferRx_USART0 == LLENO) {		// si recibo desde el usuario
    8bf6:	80 91 40 03 	lds	r24, 0x0340
    8bfa:	81 30       	cpi	r24, 0x01	; 1
    8bfc:	79 f4       	brne	.+30     	; 0x8c1c <Terminal+0x4a>
				String_a_Mayusculas (chBufferRx_USART0, USART0_BUFFER_ZISE);
    8bfe:	68 ec       	ldi	r22, 0xC8	; 200
    8c00:	70 e0       	ldi	r23, 0x00	; 0
    8c02:	80 e7       	ldi	r24, 0x70	; 112
    8c04:	92 e0       	ldi	r25, 0x02	; 2
    8c06:	0e 94 f4 54 	call	0xa9e8	; 0xa9e8 <String_a_Mayusculas>
				auxIndexTerminal = 0;
    8c0a:	10 92 96 04 	sts	0x0496, r1
    8c0e:	10 92 95 04 	sts	0x0495, r1
				uchEstadoTerminal = TERMINAL_PROCESO;
    8c12:	81 e0       	ldi	r24, 0x01	; 1
    8c14:	80 93 94 04 	sts	0x0494, r24
			}
			break;
    8c18:	0c 94 84 52 	jmp	0xa508	; 0xa508 <Terminal+0x1936>
    8c1c:	0c 94 84 52 	jmp	0xa508	; 0xa508 <Terminal+0x1936>


		case TERMINAL_PROCESO:
			// chBufferRx_USART0 = SERIE xxxx.x\0
			if (Detectar_Comando_Buffer_P(Comando_MotorGasPP, chBufferRx_USART0)) {
    8c20:	60 e7       	ldi	r22, 0x70	; 112
    8c22:	72 e0       	ldi	r23, 0x02	; 2
    8c24:	87 e4       	ldi	r24, 0x47	; 71
    8c26:	91 e0       	ldi	r25, 0x01	; 1
    8c28:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    8c2c:	89 2b       	or	r24, r25
    8c2e:	09 f4       	brne	.+2      	; 0x8c32 <Terminal+0x60>
    8c30:	6e c0       	rjmp	.+220    	; 0x8d0e <Terminal+0x13c>
				int posFinal = relativePositionBySteps;
    8c32:	80 91 8c 04 	lds	r24, 0x048C
    8c36:	90 91 8d 04 	lds	r25, 0x048D
    8c3a:	9a 83       	std	Y+2, r25	; 0x02
    8c3c:	89 83       	std	Y+1, r24	; 0x01
				if ((*(chBufferRx_USART0+auxIndexTerminal) == '+') || (*(chBufferRx_USART0+auxIndexTerminal) == '-')){
    8c3e:	80 91 95 04 	lds	r24, 0x0495
    8c42:	90 91 96 04 	lds	r25, 0x0496
    8c46:	80 59       	subi	r24, 0x90	; 144
    8c48:	9d 4f       	sbci	r25, 0xFD	; 253
    8c4a:	fc 01       	movw	r30, r24
    8c4c:	80 81       	ld	r24, Z
    8c4e:	8b 32       	cpi	r24, 0x2B	; 43
    8c50:	51 f0       	breq	.+20     	; 0x8c66 <Terminal+0x94>
    8c52:	80 91 95 04 	lds	r24, 0x0495
    8c56:	90 91 96 04 	lds	r25, 0x0496
    8c5a:	80 59       	subi	r24, 0x90	; 144
    8c5c:	9d 4f       	sbci	r25, 0xFD	; 253
    8c5e:	fc 01       	movw	r30, r24
    8c60:	80 81       	ld	r24, Z
    8c62:	8d 32       	cpi	r24, 0x2D	; 45
    8c64:	41 f5       	brne	.+80     	; 0x8cb6 <Terminal+0xe4>
					stepToRotate = atoi(chBufferRx_USART0+auxIndexTerminal);
    8c66:	80 91 95 04 	lds	r24, 0x0495
    8c6a:	90 91 96 04 	lds	r25, 0x0496
    8c6e:	80 59       	subi	r24, 0x90	; 144
    8c70:	9d 4f       	sbci	r25, 0xFD	; 253
    8c72:	0e 94 c5 58 	call	0xb18a	; 0xb18a <atoi>
    8c76:	90 93 93 04 	sts	0x0493, r25
    8c7a:	80 93 92 04 	sts	0x0492, r24
					posFinal += stepToRotate;
    8c7e:	80 91 92 04 	lds	r24, 0x0492
    8c82:	90 91 93 04 	lds	r25, 0x0493
    8c86:	29 81       	ldd	r18, Y+1	; 0x01
    8c88:	3a 81       	ldd	r19, Y+2	; 0x02
    8c8a:	82 0f       	add	r24, r18
    8c8c:	93 1f       	adc	r25, r19
    8c8e:	9a 83       	std	Y+2, r25	; 0x02
    8c90:	89 83       	std	Y+1, r24	; 0x01
					if (posFinal > MAX_MOTOR_PP_ACUMULADOS){
    8c92:	89 81       	ldd	r24, Y+1	; 0x01
    8c94:	9a 81       	ldd	r25, Y+2	; 0x02
    8c96:	89 3c       	cpi	r24, 0xC9	; 201
    8c98:	91 05       	cpc	r25, r1
    8c9a:	2c f0       	brlt	.+10     	; 0x8ca6 <Terminal+0xd4>
						posFinal = MAX_MOTOR_PP_ACUMULADOS;
    8c9c:	88 ec       	ldi	r24, 0xC8	; 200
    8c9e:	90 e0       	ldi	r25, 0x00	; 0
    8ca0:	9a 83       	std	Y+2, r25	; 0x02
    8ca2:	89 83       	std	Y+1, r24	; 0x01
    8ca4:	08 c0       	rjmp	.+16     	; 0x8cb6 <Terminal+0xe4>
					}
					else if (posFinal < MIN_MOTOR_PP_ACUMULADOS){
    8ca6:	89 81       	ldd	r24, Y+1	; 0x01
    8ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    8caa:	40 97       	sbiw	r24, 0x10	; 16
    8cac:	24 f4       	brge	.+8      	; 0x8cb6 <Terminal+0xe4>
						posFinal = MIN_MOTOR_PP_ACUMULADOS;
    8cae:	80 e1       	ldi	r24, 0x10	; 16
    8cb0:	90 e0       	ldi	r25, 0x00	; 0
    8cb2:	9a 83       	std	Y+2, r25	; 0x02
    8cb4:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				sprintf(chBufferRx_USART0, "%S: %d->%d", (wchar_t*)Comando_MotorGasPP, relativePositionBySteps, posFinal);
    8cb6:	80 91 8c 04 	lds	r24, 0x048C
    8cba:	90 91 8d 04 	lds	r25, 0x048D
    8cbe:	2a 81       	ldd	r18, Y+2	; 0x02
    8cc0:	2f 93       	push	r18
    8cc2:	29 81       	ldd	r18, Y+1	; 0x01
    8cc4:	2f 93       	push	r18
    8cc6:	29 2f       	mov	r18, r25
    8cc8:	2f 93       	push	r18
    8cca:	8f 93       	push	r24
    8ccc:	87 e4       	ldi	r24, 0x47	; 71
    8cce:	91 e0       	ldi	r25, 0x01	; 1
    8cd0:	89 2f       	mov	r24, r25
    8cd2:	8f 93       	push	r24
    8cd4:	87 e4       	ldi	r24, 0x47	; 71
    8cd6:	91 e0       	ldi	r25, 0x01	; 1
    8cd8:	8f 93       	push	r24
    8cda:	84 e1       	ldi	r24, 0x14	; 20
    8cdc:	92 e0       	ldi	r25, 0x02	; 2
    8cde:	89 2f       	mov	r24, r25
    8ce0:	8f 93       	push	r24
    8ce2:	84 e1       	ldi	r24, 0x14	; 20
    8ce4:	92 e0       	ldi	r25, 0x02	; 2
    8ce6:	8f 93       	push	r24
    8ce8:	80 e7       	ldi	r24, 0x70	; 112
    8cea:	92 e0       	ldi	r25, 0x02	; 2
    8cec:	89 2f       	mov	r24, r25
    8cee:	8f 93       	push	r24
    8cf0:	80 e7       	ldi	r24, 0x70	; 112
    8cf2:	92 e0       	ldi	r25, 0x02	; 2
    8cf4:	8f 93       	push	r24
    8cf6:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    8cfa:	8d b7       	in	r24, 0x3d	; 61
    8cfc:	9e b7       	in	r25, 0x3e	; 62
    8cfe:	0a 96       	adiw	r24, 0x0a	; 10
    8d00:	0f b6       	in	r0, 0x3f	; 63
    8d02:	f8 94       	cli
    8d04:	de bf       	out	0x3e, r29	; 62
    8d06:	0f be       	out	0x3f, r0	; 63
    8d08:	cd bf       	out	0x3d, r28	; 61
    8d0a:	0c 94 64 52 	jmp	0xa4c8	; 0xa4c8 <Terminal+0x18f6>
			}

			// chBufferRx_USART0 = PERFIL x\0
			else if (Detectar_Comando_Buffer_P(Comando_Perfil, chBufferRx_USART0)) {
    8d0e:	60 e7       	ldi	r22, 0x70	; 112
    8d10:	72 e0       	ldi	r23, 0x02	; 2
    8d12:	85 e8       	ldi	r24, 0x85	; 133
    8d14:	91 e0       	ldi	r25, 0x01	; 1
    8d16:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    8d1a:	89 2b       	or	r24, r25
    8d1c:	09 f4       	brne	.+2      	; 0x8d20 <Terminal+0x14e>
    8d1e:	1c c4       	rjmp	.+2104   	; 0x9558 <Terminal+0x986>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    8d20:	80 91 95 04 	lds	r24, 0x0495
    8d24:	90 91 96 04 	lds	r25, 0x0496
    8d28:	80 59       	subi	r24, 0x90	; 144
    8d2a:	9d 4f       	sbci	r25, 0xFD	; 253
    8d2c:	fc 01       	movw	r30, r24
    8d2e:	80 81       	ld	r24, Z
    8d30:	80 33       	cpi	r24, 0x30	; 48
    8d32:	08 f4       	brcc	.+2      	; 0x8d36 <Terminal+0x164>
    8d34:	e6 c0       	rjmp	.+460    	; 0x8f02 <Terminal+0x330>
    8d36:	80 91 95 04 	lds	r24, 0x0495
    8d3a:	90 91 96 04 	lds	r25, 0x0496
    8d3e:	80 59       	subi	r24, 0x90	; 144
    8d40:	9d 4f       	sbci	r25, 0xFD	; 253
    8d42:	fc 01       	movw	r30, r24
    8d44:	80 81       	ld	r24, Z
    8d46:	8a 33       	cpi	r24, 0x3A	; 58
    8d48:	08 f0       	brcs	.+2      	; 0x8d4c <Terminal+0x17a>
    8d4a:	db c0       	rjmp	.+438    	; 0x8f02 <Terminal+0x330>
					int perfil = atoi(chBufferRx_USART0+auxIndexTerminal);
    8d4c:	80 91 95 04 	lds	r24, 0x0495
    8d50:	90 91 96 04 	lds	r25, 0x0496
    8d54:	80 59       	subi	r24, 0x90	; 144
    8d56:	9d 4f       	sbci	r25, 0xFD	; 253
    8d58:	0e 94 c5 58 	call	0xb18a	; 0xb18a <atoi>
    8d5c:	9c 83       	std	Y+4, r25	; 0x04
    8d5e:	8b 83       	std	Y+3, r24	; 0x03
					if (perfil == PERFIL_1){
    8d60:	8b 81       	ldd	r24, Y+3	; 0x03
    8d62:	9c 81       	ldd	r25, Y+4	; 0x04
    8d64:	01 97       	sbiw	r24, 0x01	; 1
    8d66:	09 f0       	breq	.+2      	; 0x8d6a <Terminal+0x198>
    8d68:	63 c0       	rjmp	.+198    	; 0x8e30 <Terminal+0x25e>
						flPIDkP = PERFIL_1_PID_KP;
    8d6a:	80 e0       	ldi	r24, 0x00	; 0
    8d6c:	90 e0       	ldi	r25, 0x00	; 0
    8d6e:	a0 e0       	ldi	r26, 0x00	; 0
    8d70:	b0 e4       	ldi	r27, 0x40	; 64
    8d72:	80 93 50 04 	sts	0x0450, r24
    8d76:	90 93 51 04 	sts	0x0451, r25
    8d7a:	a0 93 52 04 	sts	0x0452, r26
    8d7e:	b0 93 53 04 	sts	0x0453, r27
						flPIDkI = PERFIL_1_PID_KI;
    8d82:	8d ec       	ldi	r24, 0xCD	; 205
    8d84:	9c ec       	ldi	r25, 0xCC	; 204
    8d86:	ac e4       	ldi	r26, 0x4C	; 76
    8d88:	be e3       	ldi	r27, 0x3E	; 62
    8d8a:	80 93 4c 04 	sts	0x044C, r24
    8d8e:	90 93 4d 04 	sts	0x044D, r25
    8d92:	a0 93 4e 04 	sts	0x044E, r26
    8d96:	b0 93 4f 04 	sts	0x044F, r27
						flPIDkD = PERFIL_1_PID_KD;
    8d9a:	80 e0       	ldi	r24, 0x00	; 0
    8d9c:	90 e0       	ldi	r25, 0x00	; 0
    8d9e:	a0 e7       	ldi	r26, 0x70	; 112
    8da0:	b2 e4       	ldi	r27, 0x42	; 66
    8da2:	80 93 44 04 	sts	0x0444, r24
    8da6:	90 93 45 04 	sts	0x0445, r25
    8daa:	a0 93 46 04 	sts	0x0446, r26
    8dae:	b0 93 47 04 	sts	0x0447, r27
						flPIDintMax = PERFIL_1_MAX_PID_INTEG;
    8db2:	80 e0       	ldi	r24, 0x00	; 0
    8db4:	90 e0       	ldi	r25, 0x00	; 0
    8db6:	a0 ea       	ldi	r26, 0xA0	; 160
    8db8:	b0 e4       	ldi	r27, 0x40	; 64
    8dba:	80 93 19 04 	sts	0x0419, r24
    8dbe:	90 93 1a 04 	sts	0x041A, r25
    8dc2:	a0 93 1b 04 	sts	0x041B, r26
    8dc6:	b0 93 1c 04 	sts	0x041C, r27
						flVariacionCaudalSetP = PERFIL_1_VARIACION_CAUDAL;
    8dca:	80 e0       	ldi	r24, 0x00	; 0
    8dcc:	90 e0       	ldi	r25, 0x00	; 0
    8dce:	a0 ef       	ldi	r26, 0xF0	; 240
    8dd0:	b1 e4       	ldi	r27, 0x41	; 65
    8dd2:	80 93 58 04 	sts	0x0458, r24
    8dd6:	90 93 59 04 	sts	0x0459, r25
    8dda:	a0 93 5a 04 	sts	0x045A, r26
    8dde:	b0 93 5b 04 	sts	0x045B, r27
						flEscalaVariacionCaudal = PERFIL_1_ESCALA_VARIACION_CAUDAL;
    8de2:	80 e0       	ldi	r24, 0x00	; 0
    8de4:	90 e0       	ldi	r25, 0x00	; 0
    8de6:	a0 e8       	ldi	r26, 0x80	; 128
    8de8:	bf e3       	ldi	r27, 0x3F	; 63
    8dea:	80 93 48 04 	sts	0x0448, r24
    8dee:	90 93 49 04 	sts	0x0449, r25
    8df2:	a0 93 4a 04 	sts	0x044A, r26
    8df6:	b0 93 4b 04 	sts	0x044B, r27
						flCaudalEscalaKsPID = PERFIL_1_CAUDAL_ESCALA_KS_PID;
    8dfa:	10 92 3c 04 	sts	0x043C, r1
    8dfe:	10 92 3d 04 	sts	0x043D, r1
    8e02:	10 92 3e 04 	sts	0x043E, r1
    8e06:	10 92 3f 04 	sts	0x043F, r1
						uPeriodoPID = PERFIL_1_PID_PERIODO;
    8e0a:	80 ed       	ldi	r24, 0xD0	; 208
    8e0c:	97 e0       	ldi	r25, 0x07	; 7
    8e0e:	90 93 24 04 	sts	0x0424, r25
    8e12:	80 93 23 04 	sts	0x0423, r24
						uPeriodoVedaPID = PERFIL_1_PERIODO_VEDA_PID;
    8e16:	80 ee       	ldi	r24, 0xE0	; 224
    8e18:	9e e2       	ldi	r25, 0x2E	; 46
    8e1a:	90 93 57 04 	sts	0x0457, r25
    8e1e:	80 93 56 04 	sts	0x0456, r24
						uPeriodoVedaCaudal = PERFIL_1_PERIODO_VEDA_CAUDAL;
    8e22:	88 ee       	ldi	r24, 0xE8	; 232
    8e24:	9d ef       	ldi	r25, 0xFD	; 253
    8e26:	90 93 1e 04 	sts	0x041E, r25
    8e2a:	80 93 1d 04 	sts	0x041D, r24
    8e2e:	68 c0       	rjmp	.+208    	; 0x8f00 <Terminal+0x32e>
					}
					else if (perfil == PERFIL_2){
    8e30:	8b 81       	ldd	r24, Y+3	; 0x03
    8e32:	9c 81       	ldd	r25, Y+4	; 0x04
    8e34:	02 97       	sbiw	r24, 0x02	; 2
    8e36:	09 f0       	breq	.+2      	; 0x8e3a <Terminal+0x268>
    8e38:	63 c0       	rjmp	.+198    	; 0x8f00 <Terminal+0x32e>
						flPIDkP = PERFIL_2_PID_KP;
    8e3a:	8f e1       	ldi	r24, 0x1F	; 31
    8e3c:	95 e8       	ldi	r25, 0x85	; 133
    8e3e:	ab e9       	ldi	r26, 0x9B	; 155
    8e40:	b0 e4       	ldi	r27, 0x40	; 64
    8e42:	80 93 50 04 	sts	0x0450, r24
    8e46:	90 93 51 04 	sts	0x0451, r25
    8e4a:	a0 93 52 04 	sts	0x0452, r26
    8e4e:	b0 93 53 04 	sts	0x0453, r27
						flPIDkI = PERFIL_2_PID_KI;
    8e52:	84 e0       	ldi	r24, 0x04	; 4
    8e54:	96 e5       	ldi	r25, 0x56	; 86
    8e56:	ae e8       	ldi	r26, 0x8E	; 142
    8e58:	be e3       	ldi	r27, 0x3E	; 62
    8e5a:	80 93 4c 04 	sts	0x044C, r24
    8e5e:	90 93 4d 04 	sts	0x044D, r25
    8e62:	a0 93 4e 04 	sts	0x044E, r26
    8e66:	b0 93 4f 04 	sts	0x044F, r27
						flPIDkD = PERFIL_2_PID_KD;
    8e6a:	86 e6       	ldi	r24, 0x66	; 102
    8e6c:	96 e6       	ldi	r25, 0x66	; 102
    8e6e:	aa ea       	ldi	r26, 0xAA	; 170
    8e70:	b1 e4       	ldi	r27, 0x41	; 65
    8e72:	80 93 44 04 	sts	0x0444, r24
    8e76:	90 93 45 04 	sts	0x0445, r25
    8e7a:	a0 93 46 04 	sts	0x0446, r26
    8e7e:	b0 93 47 04 	sts	0x0447, r27
						flPIDintMax = PERFIL_2_MAX_PID_INTEG;
    8e82:	80 e0       	ldi	r24, 0x00	; 0
    8e84:	90 e0       	ldi	r25, 0x00	; 0
    8e86:	a0 ea       	ldi	r26, 0xA0	; 160
    8e88:	b0 e4       	ldi	r27, 0x40	; 64
    8e8a:	80 93 19 04 	sts	0x0419, r24
    8e8e:	90 93 1a 04 	sts	0x041A, r25
    8e92:	a0 93 1b 04 	sts	0x041B, r26
    8e96:	b0 93 1c 04 	sts	0x041C, r27
						flVariacionCaudalSetP = PERFIL_2_VARIACION_CAUDAL;
    8e9a:	80 e0       	ldi	r24, 0x00	; 0
    8e9c:	90 e0       	ldi	r25, 0x00	; 0
    8e9e:	a0 ef       	ldi	r26, 0xF0	; 240
    8ea0:	b1 e4       	ldi	r27, 0x41	; 65
    8ea2:	80 93 58 04 	sts	0x0458, r24
    8ea6:	90 93 59 04 	sts	0x0459, r25
    8eaa:	a0 93 5a 04 	sts	0x045A, r26
    8eae:	b0 93 5b 04 	sts	0x045B, r27
						flEscalaVariacionCaudal = PERFIL_2_ESCALA_VARIACION_CAUDAL;
    8eb2:	80 e0       	ldi	r24, 0x00	; 0
    8eb4:	90 e0       	ldi	r25, 0x00	; 0
    8eb6:	a0 e8       	ldi	r26, 0x80	; 128
    8eb8:	bf e3       	ldi	r27, 0x3F	; 63
    8eba:	80 93 48 04 	sts	0x0448, r24
    8ebe:	90 93 49 04 	sts	0x0449, r25
    8ec2:	a0 93 4a 04 	sts	0x044A, r26
    8ec6:	b0 93 4b 04 	sts	0x044B, r27
						flCaudalEscalaKsPID = PERFIL_2_CAUDAL_ESCALA_KS_PID;
    8eca:	10 92 3c 04 	sts	0x043C, r1
    8ece:	10 92 3d 04 	sts	0x043D, r1
    8ed2:	10 92 3e 04 	sts	0x043E, r1
    8ed6:	10 92 3f 04 	sts	0x043F, r1
						uPeriodoPID = PERFIL_2_PID_PERIODO;
    8eda:	80 ed       	ldi	r24, 0xD0	; 208
    8edc:	97 e0       	ldi	r25, 0x07	; 7
    8ede:	90 93 24 04 	sts	0x0424, r25
    8ee2:	80 93 23 04 	sts	0x0423, r24
						uPeriodoVedaPID = PERFIL_2_PERIODO_VEDA_PID;
    8ee6:	80 ee       	ldi	r24, 0xE0	; 224
    8ee8:	9e e2       	ldi	r25, 0x2E	; 46
    8eea:	90 93 57 04 	sts	0x0457, r25
    8eee:	80 93 56 04 	sts	0x0456, r24
						uPeriodoVedaCaudal = PERFIL_2_PERIODO_VEDA_CAUDAL;
    8ef2:	88 ee       	ldi	r24, 0xE8	; 232
    8ef4:	9d ef       	ldi	r25, 0xFD	; 253
    8ef6:	90 93 1e 04 	sts	0x041E, r25
    8efa:	80 93 1d 04 	sts	0x041D, r24
				sprintf(chBufferRx_USART0, "%S: %d->%d", (wchar_t*)Comando_MotorGasPP, relativePositionBySteps, posFinal);
			}

			// chBufferRx_USART0 = PERFIL x\0
			else if (Detectar_Comando_Buffer_P(Comando_Perfil, chBufferRx_USART0)) {
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    8efe:	75 c0       	rjmp	.+234    	; 0x8fea <Terminal+0x418>
    8f00:	74 c0       	rjmp	.+232    	; 0x8fea <Terminal+0x418>
						uPeriodoPID = PERFIL_2_PID_PERIODO;
						uPeriodoVedaPID = PERFIL_2_PERIODO_VEDA_PID;
						uPeriodoVedaCaudal = PERFIL_2_PERIODO_VEDA_CAUDAL;
					}
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    8f02:	80 91 95 04 	lds	r24, 0x0495
    8f06:	90 91 96 04 	lds	r25, 0x0496
    8f0a:	80 59       	subi	r24, 0x90	; 144
    8f0c:	9d 4f       	sbci	r25, 0xFD	; 253
    8f0e:	bc 01       	movw	r22, r24
    8f10:	81 ea       	ldi	r24, 0xA1	; 161
    8f12:	91 e0       	ldi	r25, 0x01	; 1
    8f14:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    8f18:	89 2b       	or	r24, r25
    8f1a:	09 f4       	brne	.+2      	; 0x8f1e <Terminal+0x34c>
    8f1c:	66 c0       	rjmp	.+204    	; 0x8fea <Terminal+0x418>
					flPIDkP = DEFAULT_PID_KP;
    8f1e:	80 e0       	ldi	r24, 0x00	; 0
    8f20:	90 e0       	ldi	r25, 0x00	; 0
    8f22:	a0 e8       	ldi	r26, 0x80	; 128
    8f24:	bf e3       	ldi	r27, 0x3F	; 63
    8f26:	80 93 50 04 	sts	0x0450, r24
    8f2a:	90 93 51 04 	sts	0x0451, r25
    8f2e:	a0 93 52 04 	sts	0x0452, r26
    8f32:	b0 93 53 04 	sts	0x0453, r27
					flPIDkI = DEFAULT_PID_KI;
    8f36:	8a e0       	ldi	r24, 0x0A	; 10
    8f38:	97 ed       	ldi	r25, 0xD7	; 215
    8f3a:	a3 e2       	ldi	r26, 0x23	; 35
    8f3c:	bc e3       	ldi	r27, 0x3C	; 60
    8f3e:	80 93 4c 04 	sts	0x044C, r24
    8f42:	90 93 4d 04 	sts	0x044D, r25
    8f46:	a0 93 4e 04 	sts	0x044E, r26
    8f4a:	b0 93 4f 04 	sts	0x044F, r27
					flPIDkD = DEFAULT_PID_KD;
    8f4e:	80 e0       	ldi	r24, 0x00	; 0
    8f50:	90 e0       	ldi	r25, 0x00	; 0
    8f52:	a8 e4       	ldi	r26, 0x48	; 72
    8f54:	b2 e4       	ldi	r27, 0x42	; 66
    8f56:	80 93 44 04 	sts	0x0444, r24
    8f5a:	90 93 45 04 	sts	0x0445, r25
    8f5e:	a0 93 46 04 	sts	0x0446, r26
    8f62:	b0 93 47 04 	sts	0x0447, r27
					flPIDintMax = DEFAULT_MAX_PID_INTEG;
    8f66:	80 e0       	ldi	r24, 0x00	; 0
    8f68:	90 e0       	ldi	r25, 0x00	; 0
    8f6a:	a0 ea       	ldi	r26, 0xA0	; 160
    8f6c:	b0 e4       	ldi	r27, 0x40	; 64
    8f6e:	80 93 19 04 	sts	0x0419, r24
    8f72:	90 93 1a 04 	sts	0x041A, r25
    8f76:	a0 93 1b 04 	sts	0x041B, r26
    8f7a:	b0 93 1c 04 	sts	0x041C, r27
					flVariacionCaudalSetP = DEFAULT_VARIACION_CAUDAL;
    8f7e:	80 e0       	ldi	r24, 0x00	; 0
    8f80:	90 e0       	ldi	r25, 0x00	; 0
    8f82:	a8 ec       	ldi	r26, 0xC8	; 200
    8f84:	b1 e4       	ldi	r27, 0x41	; 65
    8f86:	80 93 58 04 	sts	0x0458, r24
    8f8a:	90 93 59 04 	sts	0x0459, r25
    8f8e:	a0 93 5a 04 	sts	0x045A, r26
    8f92:	b0 93 5b 04 	sts	0x045B, r27
					flEscalaVariacionCaudal = DEFAULT_ESCALA_VARIACION_CAUDAL;
    8f96:	8d ec       	ldi	r24, 0xCD	; 205
    8f98:	9c ec       	ldi	r25, 0xCC	; 204
    8f9a:	ac e8       	ldi	r26, 0x8C	; 140
    8f9c:	bf e3       	ldi	r27, 0x3F	; 63
    8f9e:	80 93 48 04 	sts	0x0448, r24
    8fa2:	90 93 49 04 	sts	0x0449, r25
    8fa6:	a0 93 4a 04 	sts	0x044A, r26
    8faa:	b0 93 4b 04 	sts	0x044B, r27
					flCaudalEscalaKsPID = DEFAULT_CAUDAL_ESCALA_KS_PID;
    8fae:	80 e0       	ldi	r24, 0x00	; 0
    8fb0:	90 e0       	ldi	r25, 0x00	; 0
    8fb2:	a0 ea       	ldi	r26, 0xA0	; 160
    8fb4:	b0 e4       	ldi	r27, 0x40	; 64
    8fb6:	80 93 3c 04 	sts	0x043C, r24
    8fba:	90 93 3d 04 	sts	0x043D, r25
    8fbe:	a0 93 3e 04 	sts	0x043E, r26
    8fc2:	b0 93 3f 04 	sts	0x043F, r27
					uPeriodoPID = DEFAULT_PID_PERIODO;
    8fc6:	88 eb       	ldi	r24, 0xB8	; 184
    8fc8:	9b e0       	ldi	r25, 0x0B	; 11
    8fca:	90 93 24 04 	sts	0x0424, r25
    8fce:	80 93 23 04 	sts	0x0423, r24
					uPeriodoVedaPID = DEFAULT_PERIODO_VEDA_PID;
    8fd2:	80 ee       	ldi	r24, 0xE0	; 224
    8fd4:	9e e2       	ldi	r25, 0x2E	; 46
    8fd6:	90 93 57 04 	sts	0x0457, r25
    8fda:	80 93 56 04 	sts	0x0456, r24
					uPeriodoVedaCaudal = DEFAULT_PERIODO_VEDA_CAUDAL;
    8fde:	88 ee       	ldi	r24, 0xE8	; 232
    8fe0:	9d ef       	ldi	r25, 0xFD	; 253
    8fe2:	90 93 1e 04 	sts	0x041E, r25
    8fe6:	80 93 1d 04 	sts	0x041D, r24
				}
				Float_a_Eeprom(&flPIDkP_Eeprom, &flPIDkP);
    8fea:	60 e5       	ldi	r22, 0x50	; 80
    8fec:	74 e0       	ldi	r23, 0x04	; 4
    8fee:	80 e0       	ldi	r24, 0x00	; 0
    8ff0:	90 e0       	ldi	r25, 0x00	; 0
    8ff2:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flPIDkP_Eeprom_BK, &flPIDkP);
    8ff6:	60 e5       	ldi	r22, 0x50	; 80
    8ff8:	74 e0       	ldi	r23, 0x04	; 4
    8ffa:	84 e2       	ldi	r24, 0x24	; 36
    8ffc:	90 e0       	ldi	r25, 0x00	; 0
    8ffe:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flPIDkI_Eeprom, &flPIDkI);
    9002:	6c e4       	ldi	r22, 0x4C	; 76
    9004:	74 e0       	ldi	r23, 0x04	; 4
    9006:	84 e0       	ldi	r24, 0x04	; 4
    9008:	90 e0       	ldi	r25, 0x00	; 0
    900a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flPIDkI_Eeprom_BK, &flPIDkI);
    900e:	6c e4       	ldi	r22, 0x4C	; 76
    9010:	74 e0       	ldi	r23, 0x04	; 4
    9012:	88 e2       	ldi	r24, 0x28	; 40
    9014:	90 e0       	ldi	r25, 0x00	; 0
    9016:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flPIDkD_Eeprom, &flPIDkD);
    901a:	64 e4       	ldi	r22, 0x44	; 68
    901c:	74 e0       	ldi	r23, 0x04	; 4
    901e:	88 e0       	ldi	r24, 0x08	; 8
    9020:	90 e0       	ldi	r25, 0x00	; 0
    9022:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flPIDkD_Eeprom_BK, &flPIDkD);
    9026:	64 e4       	ldi	r22, 0x44	; 68
    9028:	74 e0       	ldi	r23, 0x04	; 4
    902a:	8c e2       	ldi	r24, 0x2C	; 44
    902c:	90 e0       	ldi	r25, 0x00	; 0
    902e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flPIDintMax_Eeprom, &flPIDintMax);
    9032:	69 e1       	ldi	r22, 0x19	; 25
    9034:	74 e0       	ldi	r23, 0x04	; 4
    9036:	8c e0       	ldi	r24, 0x0C	; 12
    9038:	90 e0       	ldi	r25, 0x00	; 0
    903a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flPIDintMax_Eeprom_BK, &flPIDintMax);
    903e:	69 e1       	ldi	r22, 0x19	; 25
    9040:	74 e0       	ldi	r23, 0x04	; 4
    9042:	80 e3       	ldi	r24, 0x30	; 48
    9044:	90 e0       	ldi	r25, 0x00	; 0
    9046:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flVariacionCaudalSetP_Eeprom, &flVariacionCaudalSetP);
    904a:	68 e5       	ldi	r22, 0x58	; 88
    904c:	74 e0       	ldi	r23, 0x04	; 4
    904e:	80 e1       	ldi	r24, 0x10	; 16
    9050:	90 e0       	ldi	r25, 0x00	; 0
    9052:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flVariacionCaudalSetP_Eeprom_BK, &flVariacionCaudalSetP);
    9056:	68 e5       	ldi	r22, 0x58	; 88
    9058:	74 e0       	ldi	r23, 0x04	; 4
    905a:	84 e3       	ldi	r24, 0x34	; 52
    905c:	90 e0       	ldi	r25, 0x00	; 0
    905e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flEscalaVariacionCaudal_Eeprom, &flEscalaVariacionCaudal);
    9062:	68 e4       	ldi	r22, 0x48	; 72
    9064:	74 e0       	ldi	r23, 0x04	; 4
    9066:	88 e1       	ldi	r24, 0x18	; 24
    9068:	90 e0       	ldi	r25, 0x00	; 0
    906a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flEscalaVariacionCaudal_Eeprom_BK, &flEscalaVariacionCaudal);
    906e:	68 e4       	ldi	r22, 0x48	; 72
    9070:	74 e0       	ldi	r23, 0x04	; 4
    9072:	8c e3       	ldi	r24, 0x3C	; 60
    9074:	90 e0       	ldi	r25, 0x00	; 0
    9076:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flCaudalEscalaKsPID_Eeprom, &flCaudalEscalaKsPID);
    907a:	6c e3       	ldi	r22, 0x3C	; 60
    907c:	74 e0       	ldi	r23, 0x04	; 4
    907e:	84 e1       	ldi	r24, 0x14	; 20
    9080:	90 e0       	ldi	r25, 0x00	; 0
    9082:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				Float_a_Eeprom(&flCaudalEscalaKsPID_Eeprom_BK, &flCaudalEscalaKsPID);
    9086:	6c e3       	ldi	r22, 0x3C	; 60
    9088:	74 e0       	ldi	r23, 0x04	; 4
    908a:	88 e3       	ldi	r24, 0x38	; 56
    908c:	90 e0       	ldi	r25, 0x00	; 0
    908e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
				UnsignedInt_a_Eeprom(&uPeriodoPID_Eeprom, &uPeriodoPID);
    9092:	63 e2       	ldi	r22, 0x23	; 35
    9094:	74 e0       	ldi	r23, 0x04	; 4
    9096:	8c e1       	ldi	r24, 0x1C	; 28
    9098:	90 e0       	ldi	r25, 0x00	; 0
    909a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
				UnsignedInt_a_Eeprom(&uPeriodoPID_Eeprom_BK, &uPeriodoPID);
    909e:	63 e2       	ldi	r22, 0x23	; 35
    90a0:	74 e0       	ldi	r23, 0x04	; 4
    90a2:	80 e4       	ldi	r24, 0x40	; 64
    90a4:	90 e0       	ldi	r25, 0x00	; 0
    90a6:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
				UnsignedInt_a_Eeprom(&uPeriodoVedaCaudal_Eeprom, &uPeriodoVedaCaudal);
    90aa:	6d e1       	ldi	r22, 0x1D	; 29
    90ac:	74 e0       	ldi	r23, 0x04	; 4
    90ae:	80 e2       	ldi	r24, 0x20	; 32
    90b0:	90 e0       	ldi	r25, 0x00	; 0
    90b2:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
				UnsignedInt_a_Eeprom(&uPeriodoVedaCaudal_Eeprom_BK, &uPeriodoVedaCaudal);
    90b6:	6d e1       	ldi	r22, 0x1D	; 29
    90b8:	74 e0       	ldi	r23, 0x04	; 4
    90ba:	84 e4       	ldi	r24, 0x44	; 68
    90bc:	90 e0       	ldi	r25, 0x00	; 0
    90be:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
				UnsignedInt_a_Eeprom(&uPeriodoVedaPID_Eeprom, &uPeriodoVedaPID);
    90c2:	66 e5       	ldi	r22, 0x56	; 86
    90c4:	74 e0       	ldi	r23, 0x04	; 4
    90c6:	8e e1       	ldi	r24, 0x1E	; 30
    90c8:	90 e0       	ldi	r25, 0x00	; 0
    90ca:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
				UnsignedInt_a_Eeprom(&uPeriodoVedaPID_Eeprom_BK, &uPeriodoVedaPID);
    90ce:	66 e5       	ldi	r22, 0x56	; 86
    90d0:	74 e0       	ldi	r23, 0x04	; 4
    90d2:	82 e4       	ldi	r24, 0x42	; 66
    90d4:	90 e0       	ldi	r25, 0x00	; 0
    90d6:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
				Escribir_Checksum_Eeprom (GRUPO_PID);
    90da:	80 e0       	ldi	r24, 0x00	; 0
    90dc:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>

				auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_KP);
    90e0:	8d e4       	ldi	r24, 0x4D	; 77
    90e2:	91 e0       	ldi	r25, 0x01	; 1
    90e4:	89 2f       	mov	r24, r25
    90e6:	8f 93       	push	r24
    90e8:	8d e4       	ldi	r24, 0x4D	; 77
    90ea:	91 e0       	ldi	r25, 0x01	; 1
    90ec:	8f 93       	push	r24
    90ee:	8f e1       	ldi	r24, 0x1F	; 31
    90f0:	92 e0       	ldi	r25, 0x02	; 2
    90f2:	89 2f       	mov	r24, r25
    90f4:	8f 93       	push	r24
    90f6:	8f e1       	ldi	r24, 0x1F	; 31
    90f8:	92 e0       	ldi	r25, 0x02	; 2
    90fa:	8f 93       	push	r24
    90fc:	80 e7       	ldi	r24, 0x70	; 112
    90fe:	92 e0       	ldi	r25, 0x02	; 2
    9100:	89 2f       	mov	r24, r25
    9102:	8f 93       	push	r24
    9104:	80 e7       	ldi	r24, 0x70	; 112
    9106:	92 e0       	ldi	r25, 0x02	; 2
    9108:	8f 93       	push	r24
    910a:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    910e:	0f 90       	pop	r0
    9110:	0f 90       	pop	r0
    9112:	0f 90       	pop	r0
    9114:	0f 90       	pop	r0
    9116:	0f 90       	pop	r0
    9118:	0f 90       	pop	r0
    911a:	90 93 96 04 	sts	0x0496, r25
    911e:	80 93 95 04 	sts	0x0495, r24
				dtostrf(flPIDkP, 7, 3, chBufferRx_USART0+auxIndexTerminal);
    9122:	80 91 95 04 	lds	r24, 0x0495
    9126:	90 91 96 04 	lds	r25, 0x0496
    912a:	9c 01       	movw	r18, r24
    912c:	20 59       	subi	r18, 0x90	; 144
    912e:	3d 4f       	sbci	r19, 0xFD	; 253
    9130:	80 91 50 04 	lds	r24, 0x0450
    9134:	90 91 51 04 	lds	r25, 0x0451
    9138:	a0 91 52 04 	lds	r26, 0x0452
    913c:	b0 91 53 04 	lds	r27, 0x0453
    9140:	89 01       	movw	r16, r18
    9142:	23 e0       	ldi	r18, 0x03	; 3
    9144:	47 e0       	ldi	r20, 0x07	; 7
    9146:	bc 01       	movw	r22, r24
    9148:	cd 01       	movw	r24, r26
    914a:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
				auxIndexTerminal += 7;
    914e:	80 91 95 04 	lds	r24, 0x0495
    9152:	90 91 96 04 	lds	r25, 0x0496
    9156:	07 96       	adiw	r24, 0x07	; 7
    9158:	90 93 96 04 	sts	0x0496, r25
    915c:	80 93 95 04 	sts	0x0495, r24
				auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, "\n\r%S: ", (wchar_t*)Comando_KI);
    9160:	80 91 95 04 	lds	r24, 0x0495
    9164:	90 91 96 04 	lds	r25, 0x0496
    9168:	80 59       	subi	r24, 0x90	; 144
    916a:	9d 4f       	sbci	r25, 0xFD	; 253
    916c:	21 e5       	ldi	r18, 0x51	; 81
    916e:	31 e0       	ldi	r19, 0x01	; 1
    9170:	23 2f       	mov	r18, r19
    9172:	2f 93       	push	r18
    9174:	21 e5       	ldi	r18, 0x51	; 81
    9176:	31 e0       	ldi	r19, 0x01	; 1
    9178:	2f 93       	push	r18
    917a:	24 e2       	ldi	r18, 0x24	; 36
    917c:	32 e0       	ldi	r19, 0x02	; 2
    917e:	23 2f       	mov	r18, r19
    9180:	2f 93       	push	r18
    9182:	24 e2       	ldi	r18, 0x24	; 36
    9184:	32 e0       	ldi	r19, 0x02	; 2
    9186:	2f 93       	push	r18
    9188:	29 2f       	mov	r18, r25
    918a:	2f 93       	push	r18
    918c:	8f 93       	push	r24
    918e:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    9192:	0f 90       	pop	r0
    9194:	0f 90       	pop	r0
    9196:	0f 90       	pop	r0
    9198:	0f 90       	pop	r0
    919a:	0f 90       	pop	r0
    919c:	0f 90       	pop	r0
    919e:	9c 01       	movw	r18, r24
    91a0:	80 91 95 04 	lds	r24, 0x0495
    91a4:	90 91 96 04 	lds	r25, 0x0496
    91a8:	82 0f       	add	r24, r18
    91aa:	93 1f       	adc	r25, r19
    91ac:	90 93 96 04 	sts	0x0496, r25
    91b0:	80 93 95 04 	sts	0x0495, r24
				dtostrf(flPIDkI, 7, 3, chBufferRx_USART0+auxIndexTerminal);
    91b4:	80 91 95 04 	lds	r24, 0x0495
    91b8:	90 91 96 04 	lds	r25, 0x0496
    91bc:	9c 01       	movw	r18, r24
    91be:	20 59       	subi	r18, 0x90	; 144
    91c0:	3d 4f       	sbci	r19, 0xFD	; 253
    91c2:	80 91 4c 04 	lds	r24, 0x044C
    91c6:	90 91 4d 04 	lds	r25, 0x044D
    91ca:	a0 91 4e 04 	lds	r26, 0x044E
    91ce:	b0 91 4f 04 	lds	r27, 0x044F
    91d2:	89 01       	movw	r16, r18
    91d4:	23 e0       	ldi	r18, 0x03	; 3
    91d6:	47 e0       	ldi	r20, 0x07	; 7
    91d8:	bc 01       	movw	r22, r24
    91da:	cd 01       	movw	r24, r26
    91dc:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
				auxIndexTerminal += 7;
    91e0:	80 91 95 04 	lds	r24, 0x0495
    91e4:	90 91 96 04 	lds	r25, 0x0496
    91e8:	07 96       	adiw	r24, 0x07	; 7
    91ea:	90 93 96 04 	sts	0x0496, r25
    91ee:	80 93 95 04 	sts	0x0495, r24
				auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, "\n\r%S: ", (wchar_t*)Comando_KD);
    91f2:	80 91 95 04 	lds	r24, 0x0495
    91f6:	90 91 96 04 	lds	r25, 0x0496
    91fa:	80 59       	subi	r24, 0x90	; 144
    91fc:	9d 4f       	sbci	r25, 0xFD	; 253
    91fe:	25 e5       	ldi	r18, 0x55	; 85
    9200:	31 e0       	ldi	r19, 0x01	; 1
    9202:	23 2f       	mov	r18, r19
    9204:	2f 93       	push	r18
    9206:	25 e5       	ldi	r18, 0x55	; 85
    9208:	31 e0       	ldi	r19, 0x01	; 1
    920a:	2f 93       	push	r18
    920c:	24 e2       	ldi	r18, 0x24	; 36
    920e:	32 e0       	ldi	r19, 0x02	; 2
    9210:	23 2f       	mov	r18, r19
    9212:	2f 93       	push	r18
    9214:	24 e2       	ldi	r18, 0x24	; 36
    9216:	32 e0       	ldi	r19, 0x02	; 2
    9218:	2f 93       	push	r18
    921a:	29 2f       	mov	r18, r25
    921c:	2f 93       	push	r18
    921e:	8f 93       	push	r24
    9220:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    9224:	0f 90       	pop	r0
    9226:	0f 90       	pop	r0
    9228:	0f 90       	pop	r0
    922a:	0f 90       	pop	r0
    922c:	0f 90       	pop	r0
    922e:	0f 90       	pop	r0
    9230:	9c 01       	movw	r18, r24
    9232:	80 91 95 04 	lds	r24, 0x0495
    9236:	90 91 96 04 	lds	r25, 0x0496
    923a:	82 0f       	add	r24, r18
    923c:	93 1f       	adc	r25, r19
    923e:	90 93 96 04 	sts	0x0496, r25
    9242:	80 93 95 04 	sts	0x0495, r24
				dtostrf(flPIDkD, 7, 3, chBufferRx_USART0+auxIndexTerminal);
    9246:	80 91 95 04 	lds	r24, 0x0495
    924a:	90 91 96 04 	lds	r25, 0x0496
    924e:	9c 01       	movw	r18, r24
    9250:	20 59       	subi	r18, 0x90	; 144
    9252:	3d 4f       	sbci	r19, 0xFD	; 253
    9254:	80 91 44 04 	lds	r24, 0x0444
    9258:	90 91 45 04 	lds	r25, 0x0445
    925c:	a0 91 46 04 	lds	r26, 0x0446
    9260:	b0 91 47 04 	lds	r27, 0x0447
    9264:	89 01       	movw	r16, r18
    9266:	23 e0       	ldi	r18, 0x03	; 3
    9268:	47 e0       	ldi	r20, 0x07	; 7
    926a:	bc 01       	movw	r22, r24
    926c:	cd 01       	movw	r24, r26
    926e:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
				auxIndexTerminal += 7;
    9272:	80 91 95 04 	lds	r24, 0x0495
    9276:	90 91 96 04 	lds	r25, 0x0496
    927a:	07 96       	adiw	r24, 0x07	; 7
    927c:	90 93 96 04 	sts	0x0496, r25
    9280:	80 93 95 04 	sts	0x0495, r24
				auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, "\n\r%S: ", (wchar_t*)Comando_Max_Integ);
    9284:	80 91 95 04 	lds	r24, 0x0495
    9288:	90 91 96 04 	lds	r25, 0x0496
    928c:	80 59       	subi	r24, 0x90	; 144
    928e:	9d 4f       	sbci	r25, 0xFD	; 253
    9290:	29 e5       	ldi	r18, 0x59	; 89
    9292:	31 e0       	ldi	r19, 0x01	; 1
    9294:	23 2f       	mov	r18, r19
    9296:	2f 93       	push	r18
    9298:	29 e5       	ldi	r18, 0x59	; 89
    929a:	31 e0       	ldi	r19, 0x01	; 1
    929c:	2f 93       	push	r18
    929e:	24 e2       	ldi	r18, 0x24	; 36
    92a0:	32 e0       	ldi	r19, 0x02	; 2
    92a2:	23 2f       	mov	r18, r19
    92a4:	2f 93       	push	r18
    92a6:	24 e2       	ldi	r18, 0x24	; 36
    92a8:	32 e0       	ldi	r19, 0x02	; 2
    92aa:	2f 93       	push	r18
    92ac:	29 2f       	mov	r18, r25
    92ae:	2f 93       	push	r18
    92b0:	8f 93       	push	r24
    92b2:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    92b6:	0f 90       	pop	r0
    92b8:	0f 90       	pop	r0
    92ba:	0f 90       	pop	r0
    92bc:	0f 90       	pop	r0
    92be:	0f 90       	pop	r0
    92c0:	0f 90       	pop	r0
    92c2:	9c 01       	movw	r18, r24
    92c4:	80 91 95 04 	lds	r24, 0x0495
    92c8:	90 91 96 04 	lds	r25, 0x0496
    92cc:	82 0f       	add	r24, r18
    92ce:	93 1f       	adc	r25, r19
    92d0:	90 93 96 04 	sts	0x0496, r25
    92d4:	80 93 95 04 	sts	0x0495, r24
				dtostrf(flPIDintMax, 4, 1, chBufferRx_USART0+auxIndexTerminal);
    92d8:	80 91 95 04 	lds	r24, 0x0495
    92dc:	90 91 96 04 	lds	r25, 0x0496
    92e0:	9c 01       	movw	r18, r24
    92e2:	20 59       	subi	r18, 0x90	; 144
    92e4:	3d 4f       	sbci	r19, 0xFD	; 253
    92e6:	80 91 19 04 	lds	r24, 0x0419
    92ea:	90 91 1a 04 	lds	r25, 0x041A
    92ee:	a0 91 1b 04 	lds	r26, 0x041B
    92f2:	b0 91 1c 04 	lds	r27, 0x041C
    92f6:	89 01       	movw	r16, r18
    92f8:	21 e0       	ldi	r18, 0x01	; 1
    92fa:	44 e0       	ldi	r20, 0x04	; 4
    92fc:	bc 01       	movw	r22, r24
    92fe:	cd 01       	movw	r24, r26
    9300:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
				auxIndexTerminal += 4;
    9304:	80 91 95 04 	lds	r24, 0x0495
    9308:	90 91 96 04 	lds	r25, 0x0496
    930c:	04 96       	adiw	r24, 0x04	; 4
    930e:	90 93 96 04 	sts	0x0496, r25
    9312:	80 93 95 04 	sts	0x0495, r24
				auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, "\n\r%S: ", (wchar_t*)Comando_Porcent_Var_Caudal);
    9316:	80 91 95 04 	lds	r24, 0x0495
    931a:	90 91 96 04 	lds	r25, 0x0496
    931e:	80 59       	subi	r24, 0x90	; 144
    9320:	9d 4f       	sbci	r25, 0xFD	; 253
    9322:	23 e7       	ldi	r18, 0x73	; 115
    9324:	31 e0       	ldi	r19, 0x01	; 1
    9326:	23 2f       	mov	r18, r19
    9328:	2f 93       	push	r18
    932a:	23 e7       	ldi	r18, 0x73	; 115
    932c:	31 e0       	ldi	r19, 0x01	; 1
    932e:	2f 93       	push	r18
    9330:	24 e2       	ldi	r18, 0x24	; 36
    9332:	32 e0       	ldi	r19, 0x02	; 2
    9334:	23 2f       	mov	r18, r19
    9336:	2f 93       	push	r18
    9338:	24 e2       	ldi	r18, 0x24	; 36
    933a:	32 e0       	ldi	r19, 0x02	; 2
    933c:	2f 93       	push	r18
    933e:	29 2f       	mov	r18, r25
    9340:	2f 93       	push	r18
    9342:	8f 93       	push	r24
    9344:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    9348:	0f 90       	pop	r0
    934a:	0f 90       	pop	r0
    934c:	0f 90       	pop	r0
    934e:	0f 90       	pop	r0
    9350:	0f 90       	pop	r0
    9352:	0f 90       	pop	r0
    9354:	9c 01       	movw	r18, r24
    9356:	80 91 95 04 	lds	r24, 0x0495
    935a:	90 91 96 04 	lds	r25, 0x0496
    935e:	82 0f       	add	r24, r18
    9360:	93 1f       	adc	r25, r19
    9362:	90 93 96 04 	sts	0x0496, r25
    9366:	80 93 95 04 	sts	0x0495, r24
				dtostrf(flVariacionCaudalSetP, 5, 1, chBufferRx_USART0+auxIndexTerminal);
    936a:	80 91 95 04 	lds	r24, 0x0495
    936e:	90 91 96 04 	lds	r25, 0x0496
    9372:	9c 01       	movw	r18, r24
    9374:	20 59       	subi	r18, 0x90	; 144
    9376:	3d 4f       	sbci	r19, 0xFD	; 253
    9378:	80 91 58 04 	lds	r24, 0x0458
    937c:	90 91 59 04 	lds	r25, 0x0459
    9380:	a0 91 5a 04 	lds	r26, 0x045A
    9384:	b0 91 5b 04 	lds	r27, 0x045B
    9388:	89 01       	movw	r16, r18
    938a:	21 e0       	ldi	r18, 0x01	; 1
    938c:	45 e0       	ldi	r20, 0x05	; 5
    938e:	bc 01       	movw	r22, r24
    9390:	cd 01       	movw	r24, r26
    9392:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
				auxIndexTerminal += 5;
    9396:	80 91 95 04 	lds	r24, 0x0495
    939a:	90 91 96 04 	lds	r25, 0x0496
    939e:	05 96       	adiw	r24, 0x05	; 5
    93a0:	90 93 96 04 	sts	0x0496, r25
    93a4:	80 93 95 04 	sts	0x0495, r24
				auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, "\n\r%S: ", (wchar_t*)Comando_Escala_Var_Caudal);
    93a8:	80 91 95 04 	lds	r24, 0x0495
    93ac:	90 91 96 04 	lds	r25, 0x0496
    93b0:	80 59       	subi	r24, 0x90	; 144
    93b2:	9d 4f       	sbci	r25, 0xFD	; 253
    93b4:	20 e8       	ldi	r18, 0x80	; 128
    93b6:	31 e0       	ldi	r19, 0x01	; 1
    93b8:	23 2f       	mov	r18, r19
    93ba:	2f 93       	push	r18
    93bc:	20 e8       	ldi	r18, 0x80	; 128
    93be:	31 e0       	ldi	r19, 0x01	; 1
    93c0:	2f 93       	push	r18
    93c2:	24 e2       	ldi	r18, 0x24	; 36
    93c4:	32 e0       	ldi	r19, 0x02	; 2
    93c6:	23 2f       	mov	r18, r19
    93c8:	2f 93       	push	r18
    93ca:	24 e2       	ldi	r18, 0x24	; 36
    93cc:	32 e0       	ldi	r19, 0x02	; 2
    93ce:	2f 93       	push	r18
    93d0:	29 2f       	mov	r18, r25
    93d2:	2f 93       	push	r18
    93d4:	8f 93       	push	r24
    93d6:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    93da:	0f 90       	pop	r0
    93dc:	0f 90       	pop	r0
    93de:	0f 90       	pop	r0
    93e0:	0f 90       	pop	r0
    93e2:	0f 90       	pop	r0
    93e4:	0f 90       	pop	r0
    93e6:	9c 01       	movw	r18, r24
    93e8:	80 91 95 04 	lds	r24, 0x0495
    93ec:	90 91 96 04 	lds	r25, 0x0496
    93f0:	82 0f       	add	r24, r18
    93f2:	93 1f       	adc	r25, r19
    93f4:	90 93 96 04 	sts	0x0496, r25
    93f8:	80 93 95 04 	sts	0x0495, r24
				dtostrf(flEscalaVariacionCaudal, 4, 2, chBufferRx_USART0+auxIndexTerminal);
    93fc:	80 91 95 04 	lds	r24, 0x0495
    9400:	90 91 96 04 	lds	r25, 0x0496
    9404:	9c 01       	movw	r18, r24
    9406:	20 59       	subi	r18, 0x90	; 144
    9408:	3d 4f       	sbci	r19, 0xFD	; 253
    940a:	80 91 48 04 	lds	r24, 0x0448
    940e:	90 91 49 04 	lds	r25, 0x0449
    9412:	a0 91 4a 04 	lds	r26, 0x044A
    9416:	b0 91 4b 04 	lds	r27, 0x044B
    941a:	89 01       	movw	r16, r18
    941c:	22 e0       	ldi	r18, 0x02	; 2
    941e:	44 e0       	ldi	r20, 0x04	; 4
    9420:	bc 01       	movw	r22, r24
    9422:	cd 01       	movw	r24, r26
    9424:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
				auxIndexTerminal += 4;
    9428:	80 91 95 04 	lds	r24, 0x0495
    942c:	90 91 96 04 	lds	r25, 0x0496
    9430:	04 96       	adiw	r24, 0x04	; 4
    9432:	90 93 96 04 	sts	0x0496, r25
    9436:	80 93 95 04 	sts	0x0495, r24
				auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, "\n\r%S: ", (wchar_t*)Comando_Caudal_Escala_PID);
    943a:	80 91 95 04 	lds	r24, 0x0495
    943e:	90 91 96 04 	lds	r25, 0x0496
    9442:	80 59       	subi	r24, 0x90	; 144
    9444:	9d 4f       	sbci	r25, 0xFD	; 253
    9446:	28 e7       	ldi	r18, 0x78	; 120
    9448:	31 e0       	ldi	r19, 0x01	; 1
    944a:	23 2f       	mov	r18, r19
    944c:	2f 93       	push	r18
    944e:	28 e7       	ldi	r18, 0x78	; 120
    9450:	31 e0       	ldi	r19, 0x01	; 1
    9452:	2f 93       	push	r18
    9454:	24 e2       	ldi	r18, 0x24	; 36
    9456:	32 e0       	ldi	r19, 0x02	; 2
    9458:	23 2f       	mov	r18, r19
    945a:	2f 93       	push	r18
    945c:	24 e2       	ldi	r18, 0x24	; 36
    945e:	32 e0       	ldi	r19, 0x02	; 2
    9460:	2f 93       	push	r18
    9462:	29 2f       	mov	r18, r25
    9464:	2f 93       	push	r18
    9466:	8f 93       	push	r24
    9468:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    946c:	0f 90       	pop	r0
    946e:	0f 90       	pop	r0
    9470:	0f 90       	pop	r0
    9472:	0f 90       	pop	r0
    9474:	0f 90       	pop	r0
    9476:	0f 90       	pop	r0
    9478:	9c 01       	movw	r18, r24
    947a:	80 91 95 04 	lds	r24, 0x0495
    947e:	90 91 96 04 	lds	r25, 0x0496
    9482:	82 0f       	add	r24, r18
    9484:	93 1f       	adc	r25, r19
    9486:	90 93 96 04 	sts	0x0496, r25
    948a:	80 93 95 04 	sts	0x0495, r24
				dtostrf(flCaudalEscalaKsPID, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    948e:	80 91 95 04 	lds	r24, 0x0495
    9492:	90 91 96 04 	lds	r25, 0x0496
    9496:	9c 01       	movw	r18, r24
    9498:	20 59       	subi	r18, 0x90	; 144
    949a:	3d 4f       	sbci	r19, 0xFD	; 253
    949c:	80 91 3c 04 	lds	r24, 0x043C
    94a0:	90 91 3d 04 	lds	r25, 0x043D
    94a4:	a0 91 3e 04 	lds	r26, 0x043E
    94a8:	b0 91 3f 04 	lds	r27, 0x043F
    94ac:	89 01       	movw	r16, r18
    94ae:	22 e0       	ldi	r18, 0x02	; 2
    94b0:	45 e0       	ldi	r20, 0x05	; 5
    94b2:	bc 01       	movw	r22, r24
    94b4:	cd 01       	movw	r24, r26
    94b6:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
				auxIndexTerminal += 5;
    94ba:	80 91 95 04 	lds	r24, 0x0495
    94be:	90 91 96 04 	lds	r25, 0x0496
    94c2:	05 96       	adiw	r24, 0x05	; 5
    94c4:	90 93 96 04 	sts	0x0496, r25
    94c8:	80 93 95 04 	sts	0x0495, r24
				sprintf(chBufferRx_USART0+auxIndexTerminal, "\n\r%S: %u\n\r%S: %u\n\r%S: %u", (wchar_t*)Comando_Periodo_PID, uPeriodoPID, (wchar_t*)Comando_Periodo_Veda_PID, uPeriodoVedaPID, (wchar_t*)Comando_Periodo_Veda_Caudal, uPeriodoVedaCaudal);
    94cc:	60 91 1d 04 	lds	r22, 0x041D
    94d0:	70 91 1e 04 	lds	r23, 0x041E
    94d4:	40 91 56 04 	lds	r20, 0x0456
    94d8:	50 91 57 04 	lds	r21, 0x0457
    94dc:	20 91 23 04 	lds	r18, 0x0423
    94e0:	30 91 24 04 	lds	r19, 0x0424
    94e4:	80 91 95 04 	lds	r24, 0x0495
    94e8:	90 91 96 04 	lds	r25, 0x0496
    94ec:	80 59       	subi	r24, 0x90	; 144
    94ee:	9d 4f       	sbci	r25, 0xFD	; 253
    94f0:	e7 2f       	mov	r30, r23
    94f2:	ef 93       	push	r30
    94f4:	6f 93       	push	r22
    94f6:	6e e6       	ldi	r22, 0x6E	; 110
    94f8:	71 e0       	ldi	r23, 0x01	; 1
    94fa:	67 2f       	mov	r22, r23
    94fc:	6f 93       	push	r22
    94fe:	6e e6       	ldi	r22, 0x6E	; 110
    9500:	71 e0       	ldi	r23, 0x01	; 1
    9502:	6f 93       	push	r22
    9504:	65 2f       	mov	r22, r21
    9506:	6f 93       	push	r22
    9508:	4f 93       	push	r20
    950a:	47 e6       	ldi	r20, 0x67	; 103
    950c:	51 e0       	ldi	r21, 0x01	; 1
    950e:	45 2f       	mov	r20, r21
    9510:	4f 93       	push	r20
    9512:	47 e6       	ldi	r20, 0x67	; 103
    9514:	51 e0       	ldi	r21, 0x01	; 1
    9516:	4f 93       	push	r20
    9518:	43 2f       	mov	r20, r19
    951a:	4f 93       	push	r20
    951c:	2f 93       	push	r18
    951e:	21 e6       	ldi	r18, 0x61	; 97
    9520:	31 e0       	ldi	r19, 0x01	; 1
    9522:	23 2f       	mov	r18, r19
    9524:	2f 93       	push	r18
    9526:	21 e6       	ldi	r18, 0x61	; 97
    9528:	31 e0       	ldi	r19, 0x01	; 1
    952a:	2f 93       	push	r18
    952c:	2b e2       	ldi	r18, 0x2B	; 43
    952e:	32 e0       	ldi	r19, 0x02	; 2
    9530:	23 2f       	mov	r18, r19
    9532:	2f 93       	push	r18
    9534:	2b e2       	ldi	r18, 0x2B	; 43
    9536:	32 e0       	ldi	r19, 0x02	; 2
    9538:	2f 93       	push	r18
    953a:	29 2f       	mov	r18, r25
    953c:	2f 93       	push	r18
    953e:	8f 93       	push	r24
    9540:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    9544:	8d b7       	in	r24, 0x3d	; 61
    9546:	9e b7       	in	r25, 0x3e	; 62
    9548:	40 96       	adiw	r24, 0x10	; 16
    954a:	0f b6       	in	r0, 0x3f	; 63
    954c:	f8 94       	cli
    954e:	de bf       	out	0x3e, r29	; 62
    9550:	0f be       	out	0x3f, r0	; 63
    9552:	cd bf       	out	0x3d, r28	; 61
    9554:	0c 94 64 52 	jmp	0xa4c8	; 0xa4c8 <Terminal+0x18f6>
			}

			// chBufferRx_USART0 = CEKPID xxx.xxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Caudal_Escala_PID, chBufferRx_USART0)) {
    9558:	60 e7       	ldi	r22, 0x70	; 112
    955a:	72 e0       	ldi	r23, 0x02	; 2
    955c:	88 e7       	ldi	r24, 0x78	; 120
    955e:	91 e0       	ldi	r25, 0x01	; 1
    9560:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    9564:	89 2b       	or	r24, r25
    9566:	09 f4       	brne	.+2      	; 0x956a <Terminal+0x998>
    9568:	98 c0       	rjmp	.+304    	; 0x969a <Terminal+0xac8>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    956a:	80 91 95 04 	lds	r24, 0x0495
    956e:	90 91 96 04 	lds	r25, 0x0496
    9572:	80 59       	subi	r24, 0x90	; 144
    9574:	9d 4f       	sbci	r25, 0xFD	; 253
    9576:	fc 01       	movw	r30, r24
    9578:	80 81       	ld	r24, Z
    957a:	80 33       	cpi	r24, 0x30	; 48
    957c:	70 f1       	brcs	.+92     	; 0x95da <Terminal+0xa08>
    957e:	80 91 95 04 	lds	r24, 0x0495
    9582:	90 91 96 04 	lds	r25, 0x0496
    9586:	80 59       	subi	r24, 0x90	; 144
    9588:	9d 4f       	sbci	r25, 0xFD	; 253
    958a:	fc 01       	movw	r30, r24
    958c:	80 81       	ld	r24, Z
    958e:	8a 33       	cpi	r24, 0x3A	; 58
    9590:	20 f5       	brcc	.+72     	; 0x95da <Terminal+0xa08>
					flCaudalEscalaKsPID = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    9592:	80 91 95 04 	lds	r24, 0x0495
    9596:	90 91 96 04 	lds	r25, 0x0496
    959a:	80 59       	subi	r24, 0x90	; 144
    959c:	9d 4f       	sbci	r25, 0xFD	; 253
    959e:	68 ec       	ldi	r22, 0xC8	; 200
    95a0:	70 e0       	ldi	r23, 0x00	; 0
    95a2:	0e 94 65 55 	call	0xaaca	; 0xaaca <From_String_to_Float>
    95a6:	dc 01       	movw	r26, r24
    95a8:	cb 01       	movw	r24, r22
    95aa:	80 93 3c 04 	sts	0x043C, r24
    95ae:	90 93 3d 04 	sts	0x043D, r25
    95b2:	a0 93 3e 04 	sts	0x043E, r26
    95b6:	b0 93 3f 04 	sts	0x043F, r27

					Float_a_Eeprom(&flCaudalEscalaKsPID_Eeprom, &flCaudalEscalaKsPID);
    95ba:	6c e3       	ldi	r22, 0x3C	; 60
    95bc:	74 e0       	ldi	r23, 0x04	; 4
    95be:	84 e1       	ldi	r24, 0x14	; 20
    95c0:	90 e0       	ldi	r25, 0x00	; 0
    95c2:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Float_a_Eeprom(&flCaudalEscalaKsPID_Eeprom_BK, &flCaudalEscalaKsPID);
    95c6:	6c e3       	ldi	r22, 0x3C	; 60
    95c8:	74 e0       	ldi	r23, 0x04	; 4
    95ca:	88 e3       	ldi	r24, 0x38	; 56
    95cc:	90 e0       	ldi	r25, 0x00	; 0
    95ce:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    95d2:	80 e0       	ldi	r24, 0x00	; 0
    95d4:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
    95d8:	28 c0       	rjmp	.+80     	; 0x962a <Terminal+0xa58>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    95da:	80 91 95 04 	lds	r24, 0x0495
    95de:	90 91 96 04 	lds	r25, 0x0496
    95e2:	80 59       	subi	r24, 0x90	; 144
    95e4:	9d 4f       	sbci	r25, 0xFD	; 253
    95e6:	bc 01       	movw	r22, r24
    95e8:	81 ea       	ldi	r24, 0xA1	; 161
    95ea:	91 e0       	ldi	r25, 0x01	; 1
    95ec:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    95f0:	89 2b       	or	r24, r25
    95f2:	d9 f0       	breq	.+54     	; 0x962a <Terminal+0xa58>
					flCaudalEscalaKsPID=DEFAULT_CAUDAL_ESCALA_KS_PID;
    95f4:	80 e0       	ldi	r24, 0x00	; 0
    95f6:	90 e0       	ldi	r25, 0x00	; 0
    95f8:	a0 ea       	ldi	r26, 0xA0	; 160
    95fa:	b0 e4       	ldi	r27, 0x40	; 64
    95fc:	80 93 3c 04 	sts	0x043C, r24
    9600:	90 93 3d 04 	sts	0x043D, r25
    9604:	a0 93 3e 04 	sts	0x043E, r26
    9608:	b0 93 3f 04 	sts	0x043F, r27

					Float_a_Eeprom(&flCaudalEscalaKsPID_Eeprom, &flCaudalEscalaKsPID);
    960c:	6c e3       	ldi	r22, 0x3C	; 60
    960e:	74 e0       	ldi	r23, 0x04	; 4
    9610:	84 e1       	ldi	r24, 0x14	; 20
    9612:	90 e0       	ldi	r25, 0x00	; 0
    9614:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Float_a_Eeprom(&flCaudalEscalaKsPID_Eeprom_BK, &flCaudalEscalaKsPID);
    9618:	6c e3       	ldi	r22, 0x3C	; 60
    961a:	74 e0       	ldi	r23, 0x04	; 4
    961c:	88 e3       	ldi	r24, 0x38	; 56
    961e:	90 e0       	ldi	r25, 0x00	; 0
    9620:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    9624:	80 e0       	ldi	r24, 0x00	; 0
    9626:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
				}
				auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Caudal_Escala_PID);
    962a:	88 e7       	ldi	r24, 0x78	; 120
    962c:	91 e0       	ldi	r25, 0x01	; 1
    962e:	89 2f       	mov	r24, r25
    9630:	8f 93       	push	r24
    9632:	88 e7       	ldi	r24, 0x78	; 120
    9634:	91 e0       	ldi	r25, 0x01	; 1
    9636:	8f 93       	push	r24
    9638:	8f e1       	ldi	r24, 0x1F	; 31
    963a:	92 e0       	ldi	r25, 0x02	; 2
    963c:	89 2f       	mov	r24, r25
    963e:	8f 93       	push	r24
    9640:	8f e1       	ldi	r24, 0x1F	; 31
    9642:	92 e0       	ldi	r25, 0x02	; 2
    9644:	8f 93       	push	r24
    9646:	80 e7       	ldi	r24, 0x70	; 112
    9648:	92 e0       	ldi	r25, 0x02	; 2
    964a:	89 2f       	mov	r24, r25
    964c:	8f 93       	push	r24
    964e:	80 e7       	ldi	r24, 0x70	; 112
    9650:	92 e0       	ldi	r25, 0x02	; 2
    9652:	8f 93       	push	r24
    9654:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    9658:	0f 90       	pop	r0
    965a:	0f 90       	pop	r0
    965c:	0f 90       	pop	r0
    965e:	0f 90       	pop	r0
    9660:	0f 90       	pop	r0
    9662:	0f 90       	pop	r0
    9664:	90 93 96 04 	sts	0x0496, r25
    9668:	80 93 95 04 	sts	0x0495, r24
				dtostrf(flCaudalEscalaKsPID, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    966c:	80 91 95 04 	lds	r24, 0x0495
    9670:	90 91 96 04 	lds	r25, 0x0496
    9674:	9c 01       	movw	r18, r24
    9676:	20 59       	subi	r18, 0x90	; 144
    9678:	3d 4f       	sbci	r19, 0xFD	; 253
    967a:	80 91 3c 04 	lds	r24, 0x043C
    967e:	90 91 3d 04 	lds	r25, 0x043D
    9682:	a0 91 3e 04 	lds	r26, 0x043E
    9686:	b0 91 3f 04 	lds	r27, 0x043F
    968a:	89 01       	movw	r16, r18
    968c:	22 e0       	ldi	r18, 0x02	; 2
    968e:	45 e0       	ldi	r20, 0x05	; 5
    9690:	bc 01       	movw	r22, r24
    9692:	cd 01       	movw	r24, r26
    9694:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
    9698:	17 c7       	rjmp	.+3630   	; 0xa4c8 <Terminal+0x18f6>
			}

			// chBufferRx_USART0 = EVC xxx.xxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Escala_Var_Caudal, chBufferRx_USART0)) {
    969a:	60 e7       	ldi	r22, 0x70	; 112
    969c:	72 e0       	ldi	r23, 0x02	; 2
    969e:	80 e8       	ldi	r24, 0x80	; 128
    96a0:	91 e0       	ldi	r25, 0x01	; 1
    96a2:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    96a6:	89 2b       	or	r24, r25
    96a8:	09 f4       	brne	.+2      	; 0x96ac <Terminal+0xada>
    96aa:	98 c0       	rjmp	.+304    	; 0x97dc <Terminal+0xc0a>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    96ac:	80 91 95 04 	lds	r24, 0x0495
    96b0:	90 91 96 04 	lds	r25, 0x0496
    96b4:	80 59       	subi	r24, 0x90	; 144
    96b6:	9d 4f       	sbci	r25, 0xFD	; 253
    96b8:	fc 01       	movw	r30, r24
    96ba:	80 81       	ld	r24, Z
    96bc:	80 33       	cpi	r24, 0x30	; 48
    96be:	70 f1       	brcs	.+92     	; 0x971c <Terminal+0xb4a>
    96c0:	80 91 95 04 	lds	r24, 0x0495
    96c4:	90 91 96 04 	lds	r25, 0x0496
    96c8:	80 59       	subi	r24, 0x90	; 144
    96ca:	9d 4f       	sbci	r25, 0xFD	; 253
    96cc:	fc 01       	movw	r30, r24
    96ce:	80 81       	ld	r24, Z
    96d0:	8a 33       	cpi	r24, 0x3A	; 58
    96d2:	20 f5       	brcc	.+72     	; 0x971c <Terminal+0xb4a>
					flEscalaVariacionCaudal = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    96d4:	80 91 95 04 	lds	r24, 0x0495
    96d8:	90 91 96 04 	lds	r25, 0x0496
    96dc:	80 59       	subi	r24, 0x90	; 144
    96de:	9d 4f       	sbci	r25, 0xFD	; 253
    96e0:	68 ec       	ldi	r22, 0xC8	; 200
    96e2:	70 e0       	ldi	r23, 0x00	; 0
    96e4:	0e 94 65 55 	call	0xaaca	; 0xaaca <From_String_to_Float>
    96e8:	dc 01       	movw	r26, r24
    96ea:	cb 01       	movw	r24, r22
    96ec:	80 93 48 04 	sts	0x0448, r24
    96f0:	90 93 49 04 	sts	0x0449, r25
    96f4:	a0 93 4a 04 	sts	0x044A, r26
    96f8:	b0 93 4b 04 	sts	0x044B, r27

					Float_a_Eeprom(&flEscalaVariacionCaudal_Eeprom, &flEscalaVariacionCaudal);
    96fc:	68 e4       	ldi	r22, 0x48	; 72
    96fe:	74 e0       	ldi	r23, 0x04	; 4
    9700:	88 e1       	ldi	r24, 0x18	; 24
    9702:	90 e0       	ldi	r25, 0x00	; 0
    9704:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Float_a_Eeprom(&flEscalaVariacionCaudal_Eeprom_BK, &flEscalaVariacionCaudal);
    9708:	68 e4       	ldi	r22, 0x48	; 72
    970a:	74 e0       	ldi	r23, 0x04	; 4
    970c:	8c e3       	ldi	r24, 0x3C	; 60
    970e:	90 e0       	ldi	r25, 0x00	; 0
    9710:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    9714:	80 e0       	ldi	r24, 0x00	; 0
    9716:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
    971a:	28 c0       	rjmp	.+80     	; 0x976c <Terminal+0xb9a>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    971c:	80 91 95 04 	lds	r24, 0x0495
    9720:	90 91 96 04 	lds	r25, 0x0496
    9724:	80 59       	subi	r24, 0x90	; 144
    9726:	9d 4f       	sbci	r25, 0xFD	; 253
    9728:	bc 01       	movw	r22, r24
    972a:	81 ea       	ldi	r24, 0xA1	; 161
    972c:	91 e0       	ldi	r25, 0x01	; 1
    972e:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    9732:	89 2b       	or	r24, r25
    9734:	d9 f0       	breq	.+54     	; 0x976c <Terminal+0xb9a>
					flEscalaVariacionCaudal=DEFAULT_ESCALA_VARIACION_CAUDAL;
    9736:	8d ec       	ldi	r24, 0xCD	; 205
    9738:	9c ec       	ldi	r25, 0xCC	; 204
    973a:	ac e8       	ldi	r26, 0x8C	; 140
    973c:	bf e3       	ldi	r27, 0x3F	; 63
    973e:	80 93 48 04 	sts	0x0448, r24
    9742:	90 93 49 04 	sts	0x0449, r25
    9746:	a0 93 4a 04 	sts	0x044A, r26
    974a:	b0 93 4b 04 	sts	0x044B, r27

					Float_a_Eeprom(&flEscalaVariacionCaudal_Eeprom, &flEscalaVariacionCaudal);
    974e:	68 e4       	ldi	r22, 0x48	; 72
    9750:	74 e0       	ldi	r23, 0x04	; 4
    9752:	88 e1       	ldi	r24, 0x18	; 24
    9754:	90 e0       	ldi	r25, 0x00	; 0
    9756:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Float_a_Eeprom(&flEscalaVariacionCaudal_Eeprom_BK, &flEscalaVariacionCaudal);
    975a:	68 e4       	ldi	r22, 0x48	; 72
    975c:	74 e0       	ldi	r23, 0x04	; 4
    975e:	8c e3       	ldi	r24, 0x3C	; 60
    9760:	90 e0       	ldi	r25, 0x00	; 0
    9762:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    9766:	80 e0       	ldi	r24, 0x00	; 0
    9768:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
				}
				auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Escala_Var_Caudal);
    976c:	80 e8       	ldi	r24, 0x80	; 128
    976e:	91 e0       	ldi	r25, 0x01	; 1
    9770:	89 2f       	mov	r24, r25
    9772:	8f 93       	push	r24
    9774:	80 e8       	ldi	r24, 0x80	; 128
    9776:	91 e0       	ldi	r25, 0x01	; 1
    9778:	8f 93       	push	r24
    977a:	8f e1       	ldi	r24, 0x1F	; 31
    977c:	92 e0       	ldi	r25, 0x02	; 2
    977e:	89 2f       	mov	r24, r25
    9780:	8f 93       	push	r24
    9782:	8f e1       	ldi	r24, 0x1F	; 31
    9784:	92 e0       	ldi	r25, 0x02	; 2
    9786:	8f 93       	push	r24
    9788:	80 e7       	ldi	r24, 0x70	; 112
    978a:	92 e0       	ldi	r25, 0x02	; 2
    978c:	89 2f       	mov	r24, r25
    978e:	8f 93       	push	r24
    9790:	80 e7       	ldi	r24, 0x70	; 112
    9792:	92 e0       	ldi	r25, 0x02	; 2
    9794:	8f 93       	push	r24
    9796:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    979a:	0f 90       	pop	r0
    979c:	0f 90       	pop	r0
    979e:	0f 90       	pop	r0
    97a0:	0f 90       	pop	r0
    97a2:	0f 90       	pop	r0
    97a4:	0f 90       	pop	r0
    97a6:	90 93 96 04 	sts	0x0496, r25
    97aa:	80 93 95 04 	sts	0x0495, r24
				dtostrf(flEscalaVariacionCaudal, 4, 2, chBufferRx_USART0+auxIndexTerminal);
    97ae:	80 91 95 04 	lds	r24, 0x0495
    97b2:	90 91 96 04 	lds	r25, 0x0496
    97b6:	9c 01       	movw	r18, r24
    97b8:	20 59       	subi	r18, 0x90	; 144
    97ba:	3d 4f       	sbci	r19, 0xFD	; 253
    97bc:	80 91 48 04 	lds	r24, 0x0448
    97c0:	90 91 49 04 	lds	r25, 0x0449
    97c4:	a0 91 4a 04 	lds	r26, 0x044A
    97c8:	b0 91 4b 04 	lds	r27, 0x044B
    97cc:	89 01       	movw	r16, r18
    97ce:	22 e0       	ldi	r18, 0x02	; 2
    97d0:	44 e0       	ldi	r20, 0x04	; 4
    97d2:	bc 01       	movw	r22, r24
    97d4:	cd 01       	movw	r24, r26
    97d6:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
    97da:	76 c6       	rjmp	.+3308   	; 0xa4c8 <Terminal+0x18f6>
			}

			// chBufferRx_USART0 = PVC xxx.xxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Porcent_Var_Caudal, chBufferRx_USART0)) {
    97dc:	60 e7       	ldi	r22, 0x70	; 112
    97de:	72 e0       	ldi	r23, 0x02	; 2
    97e0:	83 e7       	ldi	r24, 0x73	; 115
    97e2:	91 e0       	ldi	r25, 0x01	; 1
    97e4:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    97e8:	89 2b       	or	r24, r25
    97ea:	09 f4       	brne	.+2      	; 0x97ee <Terminal+0xc1c>
    97ec:	98 c0       	rjmp	.+304    	; 0x991e <Terminal+0xd4c>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    97ee:	80 91 95 04 	lds	r24, 0x0495
    97f2:	90 91 96 04 	lds	r25, 0x0496
    97f6:	80 59       	subi	r24, 0x90	; 144
    97f8:	9d 4f       	sbci	r25, 0xFD	; 253
    97fa:	fc 01       	movw	r30, r24
    97fc:	80 81       	ld	r24, Z
    97fe:	80 33       	cpi	r24, 0x30	; 48
    9800:	70 f1       	brcs	.+92     	; 0x985e <Terminal+0xc8c>
    9802:	80 91 95 04 	lds	r24, 0x0495
    9806:	90 91 96 04 	lds	r25, 0x0496
    980a:	80 59       	subi	r24, 0x90	; 144
    980c:	9d 4f       	sbci	r25, 0xFD	; 253
    980e:	fc 01       	movw	r30, r24
    9810:	80 81       	ld	r24, Z
    9812:	8a 33       	cpi	r24, 0x3A	; 58
    9814:	20 f5       	brcc	.+72     	; 0x985e <Terminal+0xc8c>
					flVariacionCaudalSetP = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    9816:	80 91 95 04 	lds	r24, 0x0495
    981a:	90 91 96 04 	lds	r25, 0x0496
    981e:	80 59       	subi	r24, 0x90	; 144
    9820:	9d 4f       	sbci	r25, 0xFD	; 253
    9822:	68 ec       	ldi	r22, 0xC8	; 200
    9824:	70 e0       	ldi	r23, 0x00	; 0
    9826:	0e 94 65 55 	call	0xaaca	; 0xaaca <From_String_to_Float>
    982a:	dc 01       	movw	r26, r24
    982c:	cb 01       	movw	r24, r22
    982e:	80 93 58 04 	sts	0x0458, r24
    9832:	90 93 59 04 	sts	0x0459, r25
    9836:	a0 93 5a 04 	sts	0x045A, r26
    983a:	b0 93 5b 04 	sts	0x045B, r27

					Float_a_Eeprom(&flVariacionCaudalSetP_Eeprom, &flVariacionCaudalSetP);
    983e:	68 e5       	ldi	r22, 0x58	; 88
    9840:	74 e0       	ldi	r23, 0x04	; 4
    9842:	80 e1       	ldi	r24, 0x10	; 16
    9844:	90 e0       	ldi	r25, 0x00	; 0
    9846:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Float_a_Eeprom(&flVariacionCaudalSetP_Eeprom_BK, &flVariacionCaudalSetP);
    984a:	68 e5       	ldi	r22, 0x58	; 88
    984c:	74 e0       	ldi	r23, 0x04	; 4
    984e:	84 e3       	ldi	r24, 0x34	; 52
    9850:	90 e0       	ldi	r25, 0x00	; 0
    9852:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    9856:	80 e0       	ldi	r24, 0x00	; 0
    9858:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
    985c:	28 c0       	rjmp	.+80     	; 0x98ae <Terminal+0xcdc>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    985e:	80 91 95 04 	lds	r24, 0x0495
    9862:	90 91 96 04 	lds	r25, 0x0496
    9866:	80 59       	subi	r24, 0x90	; 144
    9868:	9d 4f       	sbci	r25, 0xFD	; 253
    986a:	bc 01       	movw	r22, r24
    986c:	81 ea       	ldi	r24, 0xA1	; 161
    986e:	91 e0       	ldi	r25, 0x01	; 1
    9870:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    9874:	89 2b       	or	r24, r25
    9876:	d9 f0       	breq	.+54     	; 0x98ae <Terminal+0xcdc>
					flVariacionCaudalSetP=DEFAULT_VARIACION_CAUDAL;
    9878:	80 e0       	ldi	r24, 0x00	; 0
    987a:	90 e0       	ldi	r25, 0x00	; 0
    987c:	a8 ec       	ldi	r26, 0xC8	; 200
    987e:	b1 e4       	ldi	r27, 0x41	; 65
    9880:	80 93 58 04 	sts	0x0458, r24
    9884:	90 93 59 04 	sts	0x0459, r25
    9888:	a0 93 5a 04 	sts	0x045A, r26
    988c:	b0 93 5b 04 	sts	0x045B, r27

					Float_a_Eeprom(&flVariacionCaudalSetP_Eeprom, &flVariacionCaudalSetP);
    9890:	68 e5       	ldi	r22, 0x58	; 88
    9892:	74 e0       	ldi	r23, 0x04	; 4
    9894:	80 e1       	ldi	r24, 0x10	; 16
    9896:	90 e0       	ldi	r25, 0x00	; 0
    9898:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Float_a_Eeprom(&flVariacionCaudalSetP_Eeprom_BK, &flVariacionCaudalSetP);
    989c:	68 e5       	ldi	r22, 0x58	; 88
    989e:	74 e0       	ldi	r23, 0x04	; 4
    98a0:	84 e3       	ldi	r24, 0x34	; 52
    98a2:	90 e0       	ldi	r25, 0x00	; 0
    98a4:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    98a8:	80 e0       	ldi	r24, 0x00	; 0
    98aa:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
				}
				auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Porcent_Var_Caudal);
    98ae:	83 e7       	ldi	r24, 0x73	; 115
    98b0:	91 e0       	ldi	r25, 0x01	; 1
    98b2:	89 2f       	mov	r24, r25
    98b4:	8f 93       	push	r24
    98b6:	83 e7       	ldi	r24, 0x73	; 115
    98b8:	91 e0       	ldi	r25, 0x01	; 1
    98ba:	8f 93       	push	r24
    98bc:	8f e1       	ldi	r24, 0x1F	; 31
    98be:	92 e0       	ldi	r25, 0x02	; 2
    98c0:	89 2f       	mov	r24, r25
    98c2:	8f 93       	push	r24
    98c4:	8f e1       	ldi	r24, 0x1F	; 31
    98c6:	92 e0       	ldi	r25, 0x02	; 2
    98c8:	8f 93       	push	r24
    98ca:	80 e7       	ldi	r24, 0x70	; 112
    98cc:	92 e0       	ldi	r25, 0x02	; 2
    98ce:	89 2f       	mov	r24, r25
    98d0:	8f 93       	push	r24
    98d2:	80 e7       	ldi	r24, 0x70	; 112
    98d4:	92 e0       	ldi	r25, 0x02	; 2
    98d6:	8f 93       	push	r24
    98d8:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    98dc:	0f 90       	pop	r0
    98de:	0f 90       	pop	r0
    98e0:	0f 90       	pop	r0
    98e2:	0f 90       	pop	r0
    98e4:	0f 90       	pop	r0
    98e6:	0f 90       	pop	r0
    98e8:	90 93 96 04 	sts	0x0496, r25
    98ec:	80 93 95 04 	sts	0x0495, r24
				dtostrf(flVariacionCaudalSetP, 5, 1, chBufferRx_USART0+auxIndexTerminal);
    98f0:	80 91 95 04 	lds	r24, 0x0495
    98f4:	90 91 96 04 	lds	r25, 0x0496
    98f8:	9c 01       	movw	r18, r24
    98fa:	20 59       	subi	r18, 0x90	; 144
    98fc:	3d 4f       	sbci	r19, 0xFD	; 253
    98fe:	80 91 58 04 	lds	r24, 0x0458
    9902:	90 91 59 04 	lds	r25, 0x0459
    9906:	a0 91 5a 04 	lds	r26, 0x045A
    990a:	b0 91 5b 04 	lds	r27, 0x045B
    990e:	89 01       	movw	r16, r18
    9910:	21 e0       	ldi	r18, 0x01	; 1
    9912:	45 e0       	ldi	r20, 0x05	; 5
    9914:	bc 01       	movw	r22, r24
    9916:	cd 01       	movw	r24, r26
    9918:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
    991c:	d5 c5       	rjmp	.+2986   	; 0xa4c8 <Terminal+0x18f6>
			}

			// chBufferRx_USART0 = KP xxx.xxx\0
			else if (Detectar_Comando_Buffer_P(Comando_KP, chBufferRx_USART0)) {
    991e:	60 e7       	ldi	r22, 0x70	; 112
    9920:	72 e0       	ldi	r23, 0x02	; 2
    9922:	8d e4       	ldi	r24, 0x4D	; 77
    9924:	91 e0       	ldi	r25, 0x01	; 1
    9926:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    992a:	89 2b       	or	r24, r25
    992c:	09 f4       	brne	.+2      	; 0x9930 <Terminal+0xd5e>
    992e:	98 c0       	rjmp	.+304    	; 0x9a60 <Terminal+0xe8e>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    9930:	80 91 95 04 	lds	r24, 0x0495
    9934:	90 91 96 04 	lds	r25, 0x0496
    9938:	80 59       	subi	r24, 0x90	; 144
    993a:	9d 4f       	sbci	r25, 0xFD	; 253
    993c:	fc 01       	movw	r30, r24
    993e:	80 81       	ld	r24, Z
    9940:	80 33       	cpi	r24, 0x30	; 48
    9942:	70 f1       	brcs	.+92     	; 0x99a0 <Terminal+0xdce>
    9944:	80 91 95 04 	lds	r24, 0x0495
    9948:	90 91 96 04 	lds	r25, 0x0496
    994c:	80 59       	subi	r24, 0x90	; 144
    994e:	9d 4f       	sbci	r25, 0xFD	; 253
    9950:	fc 01       	movw	r30, r24
    9952:	80 81       	ld	r24, Z
    9954:	8a 33       	cpi	r24, 0x3A	; 58
    9956:	20 f5       	brcc	.+72     	; 0x99a0 <Terminal+0xdce>
					flPIDkP = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    9958:	80 91 95 04 	lds	r24, 0x0495
    995c:	90 91 96 04 	lds	r25, 0x0496
    9960:	80 59       	subi	r24, 0x90	; 144
    9962:	9d 4f       	sbci	r25, 0xFD	; 253
    9964:	68 ec       	ldi	r22, 0xC8	; 200
    9966:	70 e0       	ldi	r23, 0x00	; 0
    9968:	0e 94 65 55 	call	0xaaca	; 0xaaca <From_String_to_Float>
    996c:	dc 01       	movw	r26, r24
    996e:	cb 01       	movw	r24, r22
    9970:	80 93 50 04 	sts	0x0450, r24
    9974:	90 93 51 04 	sts	0x0451, r25
    9978:	a0 93 52 04 	sts	0x0452, r26
    997c:	b0 93 53 04 	sts	0x0453, r27

					Float_a_Eeprom(&flPIDkP_Eeprom, &flPIDkP);
    9980:	60 e5       	ldi	r22, 0x50	; 80
    9982:	74 e0       	ldi	r23, 0x04	; 4
    9984:	80 e0       	ldi	r24, 0x00	; 0
    9986:	90 e0       	ldi	r25, 0x00	; 0
    9988:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Float_a_Eeprom(&flPIDkP_Eeprom_BK, &flPIDkP);
    998c:	60 e5       	ldi	r22, 0x50	; 80
    998e:	74 e0       	ldi	r23, 0x04	; 4
    9990:	84 e2       	ldi	r24, 0x24	; 36
    9992:	90 e0       	ldi	r25, 0x00	; 0
    9994:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    9998:	80 e0       	ldi	r24, 0x00	; 0
    999a:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
    999e:	28 c0       	rjmp	.+80     	; 0x99f0 <Terminal+0xe1e>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    99a0:	80 91 95 04 	lds	r24, 0x0495
    99a4:	90 91 96 04 	lds	r25, 0x0496
    99a8:	80 59       	subi	r24, 0x90	; 144
    99aa:	9d 4f       	sbci	r25, 0xFD	; 253
    99ac:	bc 01       	movw	r22, r24
    99ae:	81 ea       	ldi	r24, 0xA1	; 161
    99b0:	91 e0       	ldi	r25, 0x01	; 1
    99b2:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    99b6:	89 2b       	or	r24, r25
    99b8:	d9 f0       	breq	.+54     	; 0x99f0 <Terminal+0xe1e>
					flPIDkP=DEFAULT_PID_KP;
    99ba:	80 e0       	ldi	r24, 0x00	; 0
    99bc:	90 e0       	ldi	r25, 0x00	; 0
    99be:	a0 e8       	ldi	r26, 0x80	; 128
    99c0:	bf e3       	ldi	r27, 0x3F	; 63
    99c2:	80 93 50 04 	sts	0x0450, r24
    99c6:	90 93 51 04 	sts	0x0451, r25
    99ca:	a0 93 52 04 	sts	0x0452, r26
    99ce:	b0 93 53 04 	sts	0x0453, r27

					Float_a_Eeprom(&flPIDkP_Eeprom, &flPIDkP);
    99d2:	60 e5       	ldi	r22, 0x50	; 80
    99d4:	74 e0       	ldi	r23, 0x04	; 4
    99d6:	80 e0       	ldi	r24, 0x00	; 0
    99d8:	90 e0       	ldi	r25, 0x00	; 0
    99da:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Float_a_Eeprom(&flPIDkP_Eeprom_BK, &flPIDkP);
    99de:	60 e5       	ldi	r22, 0x50	; 80
    99e0:	74 e0       	ldi	r23, 0x04	; 4
    99e2:	84 e2       	ldi	r24, 0x24	; 36
    99e4:	90 e0       	ldi	r25, 0x00	; 0
    99e6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    99ea:	80 e0       	ldi	r24, 0x00	; 0
    99ec:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
				}
				auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_KP);
    99f0:	8d e4       	ldi	r24, 0x4D	; 77
    99f2:	91 e0       	ldi	r25, 0x01	; 1
    99f4:	89 2f       	mov	r24, r25
    99f6:	8f 93       	push	r24
    99f8:	8d e4       	ldi	r24, 0x4D	; 77
    99fa:	91 e0       	ldi	r25, 0x01	; 1
    99fc:	8f 93       	push	r24
    99fe:	8f e1       	ldi	r24, 0x1F	; 31
    9a00:	92 e0       	ldi	r25, 0x02	; 2
    9a02:	89 2f       	mov	r24, r25
    9a04:	8f 93       	push	r24
    9a06:	8f e1       	ldi	r24, 0x1F	; 31
    9a08:	92 e0       	ldi	r25, 0x02	; 2
    9a0a:	8f 93       	push	r24
    9a0c:	80 e7       	ldi	r24, 0x70	; 112
    9a0e:	92 e0       	ldi	r25, 0x02	; 2
    9a10:	89 2f       	mov	r24, r25
    9a12:	8f 93       	push	r24
    9a14:	80 e7       	ldi	r24, 0x70	; 112
    9a16:	92 e0       	ldi	r25, 0x02	; 2
    9a18:	8f 93       	push	r24
    9a1a:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    9a1e:	0f 90       	pop	r0
    9a20:	0f 90       	pop	r0
    9a22:	0f 90       	pop	r0
    9a24:	0f 90       	pop	r0
    9a26:	0f 90       	pop	r0
    9a28:	0f 90       	pop	r0
    9a2a:	90 93 96 04 	sts	0x0496, r25
    9a2e:	80 93 95 04 	sts	0x0495, r24
				dtostrf(flPIDkP, 7, 3, chBufferRx_USART0+auxIndexTerminal);
    9a32:	80 91 95 04 	lds	r24, 0x0495
    9a36:	90 91 96 04 	lds	r25, 0x0496
    9a3a:	9c 01       	movw	r18, r24
    9a3c:	20 59       	subi	r18, 0x90	; 144
    9a3e:	3d 4f       	sbci	r19, 0xFD	; 253
    9a40:	80 91 50 04 	lds	r24, 0x0450
    9a44:	90 91 51 04 	lds	r25, 0x0451
    9a48:	a0 91 52 04 	lds	r26, 0x0452
    9a4c:	b0 91 53 04 	lds	r27, 0x0453
    9a50:	89 01       	movw	r16, r18
    9a52:	23 e0       	ldi	r18, 0x03	; 3
    9a54:	47 e0       	ldi	r20, 0x07	; 7
    9a56:	bc 01       	movw	r22, r24
    9a58:	cd 01       	movw	r24, r26
    9a5a:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
    9a5e:	34 c5       	rjmp	.+2664   	; 0xa4c8 <Terminal+0x18f6>
			}

			// chBufferRx_USART0 = KI xxx.xxx\0
			else if (Detectar_Comando_Buffer_P(Comando_KI, chBufferRx_USART0)) {
    9a60:	60 e7       	ldi	r22, 0x70	; 112
    9a62:	72 e0       	ldi	r23, 0x02	; 2
    9a64:	81 e5       	ldi	r24, 0x51	; 81
    9a66:	91 e0       	ldi	r25, 0x01	; 1
    9a68:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    9a6c:	89 2b       	or	r24, r25
    9a6e:	09 f4       	brne	.+2      	; 0x9a72 <Terminal+0xea0>
    9a70:	b9 c0       	rjmp	.+370    	; 0x9be4 <Terminal+0x1012>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    9a72:	80 91 95 04 	lds	r24, 0x0495
    9a76:	90 91 96 04 	lds	r25, 0x0496
    9a7a:	80 59       	subi	r24, 0x90	; 144
    9a7c:	9d 4f       	sbci	r25, 0xFD	; 253
    9a7e:	fc 01       	movw	r30, r24
    9a80:	80 81       	ld	r24, Z
    9a82:	80 33       	cpi	r24, 0x30	; 48
    9a84:	70 f1       	brcs	.+92     	; 0x9ae2 <Terminal+0xf10>
    9a86:	80 91 95 04 	lds	r24, 0x0495
    9a8a:	90 91 96 04 	lds	r25, 0x0496
    9a8e:	80 59       	subi	r24, 0x90	; 144
    9a90:	9d 4f       	sbci	r25, 0xFD	; 253
    9a92:	fc 01       	movw	r30, r24
    9a94:	80 81       	ld	r24, Z
    9a96:	8a 33       	cpi	r24, 0x3A	; 58
    9a98:	20 f5       	brcc	.+72     	; 0x9ae2 <Terminal+0xf10>
					flPIDkI = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    9a9a:	80 91 95 04 	lds	r24, 0x0495
    9a9e:	90 91 96 04 	lds	r25, 0x0496
    9aa2:	80 59       	subi	r24, 0x90	; 144
    9aa4:	9d 4f       	sbci	r25, 0xFD	; 253
    9aa6:	68 ec       	ldi	r22, 0xC8	; 200
    9aa8:	70 e0       	ldi	r23, 0x00	; 0
    9aaa:	0e 94 65 55 	call	0xaaca	; 0xaaca <From_String_to_Float>
    9aae:	dc 01       	movw	r26, r24
    9ab0:	cb 01       	movw	r24, r22
    9ab2:	80 93 4c 04 	sts	0x044C, r24
    9ab6:	90 93 4d 04 	sts	0x044D, r25
    9aba:	a0 93 4e 04 	sts	0x044E, r26
    9abe:	b0 93 4f 04 	sts	0x044F, r27

					Float_a_Eeprom(&flPIDkI_Eeprom, &flPIDkI);
    9ac2:	6c e4       	ldi	r22, 0x4C	; 76
    9ac4:	74 e0       	ldi	r23, 0x04	; 4
    9ac6:	84 e0       	ldi	r24, 0x04	; 4
    9ac8:	90 e0       	ldi	r25, 0x00	; 0
    9aca:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Float_a_Eeprom(&flPIDkI_Eeprom_BK, &flPIDkI);
    9ace:	6c e4       	ldi	r22, 0x4C	; 76
    9ad0:	74 e0       	ldi	r23, 0x04	; 4
    9ad2:	88 e2       	ldi	r24, 0x28	; 40
    9ad4:	90 e0       	ldi	r25, 0x00	; 0
    9ad6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    9ada:	80 e0       	ldi	r24, 0x00	; 0
    9adc:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
    9ae0:	49 c0       	rjmp	.+146    	; 0x9b74 <Terminal+0xfa2>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    9ae2:	80 91 95 04 	lds	r24, 0x0495
    9ae6:	90 91 96 04 	lds	r25, 0x0496
    9aea:	80 59       	subi	r24, 0x90	; 144
    9aec:	9d 4f       	sbci	r25, 0xFD	; 253
    9aee:	bc 01       	movw	r22, r24
    9af0:	81 ea       	ldi	r24, 0xA1	; 161
    9af2:	91 e0       	ldi	r25, 0x01	; 1
    9af4:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    9af8:	89 2b       	or	r24, r25
    9afa:	e1 f1       	breq	.+120    	; 0x9b74 <Terminal+0xfa2>
					flPIDkI=DEFAULT_PID_KI;
    9afc:	8a e0       	ldi	r24, 0x0A	; 10
    9afe:	97 ed       	ldi	r25, 0xD7	; 215
    9b00:	a3 e2       	ldi	r26, 0x23	; 35
    9b02:	bc e3       	ldi	r27, 0x3C	; 60
    9b04:	80 93 4c 04 	sts	0x044C, r24
    9b08:	90 93 4d 04 	sts	0x044D, r25
    9b0c:	a0 93 4e 04 	sts	0x044E, r26
    9b10:	b0 93 4f 04 	sts	0x044F, r27

					Float_a_Eeprom(&flPIDkI_Eeprom, &flPIDkI);
    9b14:	6c e4       	ldi	r22, 0x4C	; 76
    9b16:	74 e0       	ldi	r23, 0x04	; 4
    9b18:	84 e0       	ldi	r24, 0x04	; 4
    9b1a:	90 e0       	ldi	r25, 0x00	; 0
    9b1c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Float_a_Eeprom(&flPIDkI_Eeprom_BK, &flPIDkI);
    9b20:	6c e4       	ldi	r22, 0x4C	; 76
    9b22:	74 e0       	ldi	r23, 0x04	; 4
    9b24:	88 e2       	ldi	r24, 0x28	; 40
    9b26:	90 e0       	ldi	r25, 0x00	; 0
    9b28:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    9b2c:	80 e0       	ldi	r24, 0x00	; 0
    9b2e:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_KI);
    9b32:	81 e5       	ldi	r24, 0x51	; 81
    9b34:	91 e0       	ldi	r25, 0x01	; 1
    9b36:	89 2f       	mov	r24, r25
    9b38:	8f 93       	push	r24
    9b3a:	81 e5       	ldi	r24, 0x51	; 81
    9b3c:	91 e0       	ldi	r25, 0x01	; 1
    9b3e:	8f 93       	push	r24
    9b40:	8f e1       	ldi	r24, 0x1F	; 31
    9b42:	92 e0       	ldi	r25, 0x02	; 2
    9b44:	89 2f       	mov	r24, r25
    9b46:	8f 93       	push	r24
    9b48:	8f e1       	ldi	r24, 0x1F	; 31
    9b4a:	92 e0       	ldi	r25, 0x02	; 2
    9b4c:	8f 93       	push	r24
    9b4e:	80 e7       	ldi	r24, 0x70	; 112
    9b50:	92 e0       	ldi	r25, 0x02	; 2
    9b52:	89 2f       	mov	r24, r25
    9b54:	8f 93       	push	r24
    9b56:	80 e7       	ldi	r24, 0x70	; 112
    9b58:	92 e0       	ldi	r25, 0x02	; 2
    9b5a:	8f 93       	push	r24
    9b5c:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    9b60:	0f 90       	pop	r0
    9b62:	0f 90       	pop	r0
    9b64:	0f 90       	pop	r0
    9b66:	0f 90       	pop	r0
    9b68:	0f 90       	pop	r0
    9b6a:	0f 90       	pop	r0
    9b6c:	90 93 96 04 	sts	0x0496, r25
    9b70:	80 93 95 04 	sts	0x0495, r24
				}
				auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_KI);
    9b74:	81 e5       	ldi	r24, 0x51	; 81
    9b76:	91 e0       	ldi	r25, 0x01	; 1
    9b78:	89 2f       	mov	r24, r25
    9b7a:	8f 93       	push	r24
    9b7c:	81 e5       	ldi	r24, 0x51	; 81
    9b7e:	91 e0       	ldi	r25, 0x01	; 1
    9b80:	8f 93       	push	r24
    9b82:	8f e1       	ldi	r24, 0x1F	; 31
    9b84:	92 e0       	ldi	r25, 0x02	; 2
    9b86:	89 2f       	mov	r24, r25
    9b88:	8f 93       	push	r24
    9b8a:	8f e1       	ldi	r24, 0x1F	; 31
    9b8c:	92 e0       	ldi	r25, 0x02	; 2
    9b8e:	8f 93       	push	r24
    9b90:	80 e7       	ldi	r24, 0x70	; 112
    9b92:	92 e0       	ldi	r25, 0x02	; 2
    9b94:	89 2f       	mov	r24, r25
    9b96:	8f 93       	push	r24
    9b98:	80 e7       	ldi	r24, 0x70	; 112
    9b9a:	92 e0       	ldi	r25, 0x02	; 2
    9b9c:	8f 93       	push	r24
    9b9e:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    9ba2:	0f 90       	pop	r0
    9ba4:	0f 90       	pop	r0
    9ba6:	0f 90       	pop	r0
    9ba8:	0f 90       	pop	r0
    9baa:	0f 90       	pop	r0
    9bac:	0f 90       	pop	r0
    9bae:	90 93 96 04 	sts	0x0496, r25
    9bb2:	80 93 95 04 	sts	0x0495, r24
				dtostrf(flPIDkI, 7, 3, chBufferRx_USART0+auxIndexTerminal);
    9bb6:	80 91 95 04 	lds	r24, 0x0495
    9bba:	90 91 96 04 	lds	r25, 0x0496
    9bbe:	9c 01       	movw	r18, r24
    9bc0:	20 59       	subi	r18, 0x90	; 144
    9bc2:	3d 4f       	sbci	r19, 0xFD	; 253
    9bc4:	80 91 4c 04 	lds	r24, 0x044C
    9bc8:	90 91 4d 04 	lds	r25, 0x044D
    9bcc:	a0 91 4e 04 	lds	r26, 0x044E
    9bd0:	b0 91 4f 04 	lds	r27, 0x044F
    9bd4:	89 01       	movw	r16, r18
    9bd6:	23 e0       	ldi	r18, 0x03	; 3
    9bd8:	47 e0       	ldi	r20, 0x07	; 7
    9bda:	bc 01       	movw	r22, r24
    9bdc:	cd 01       	movw	r24, r26
    9bde:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
    9be2:	72 c4       	rjmp	.+2276   	; 0xa4c8 <Terminal+0x18f6>
			}

			// chBufferRx_USART0 = KD xxx.xxx\0
			else if (Detectar_Comando_Buffer_P(Comando_KD, chBufferRx_USART0)) {
    9be4:	60 e7       	ldi	r22, 0x70	; 112
    9be6:	72 e0       	ldi	r23, 0x02	; 2
    9be8:	85 e5       	ldi	r24, 0x55	; 85
    9bea:	91 e0       	ldi	r25, 0x01	; 1
    9bec:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    9bf0:	89 2b       	or	r24, r25
    9bf2:	09 f4       	brne	.+2      	; 0x9bf6 <Terminal+0x1024>
    9bf4:	98 c0       	rjmp	.+304    	; 0x9d26 <Terminal+0x1154>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    9bf6:	80 91 95 04 	lds	r24, 0x0495
    9bfa:	90 91 96 04 	lds	r25, 0x0496
    9bfe:	80 59       	subi	r24, 0x90	; 144
    9c00:	9d 4f       	sbci	r25, 0xFD	; 253
    9c02:	fc 01       	movw	r30, r24
    9c04:	80 81       	ld	r24, Z
    9c06:	80 33       	cpi	r24, 0x30	; 48
    9c08:	70 f1       	brcs	.+92     	; 0x9c66 <Terminal+0x1094>
    9c0a:	80 91 95 04 	lds	r24, 0x0495
    9c0e:	90 91 96 04 	lds	r25, 0x0496
    9c12:	80 59       	subi	r24, 0x90	; 144
    9c14:	9d 4f       	sbci	r25, 0xFD	; 253
    9c16:	fc 01       	movw	r30, r24
    9c18:	80 81       	ld	r24, Z
    9c1a:	8a 33       	cpi	r24, 0x3A	; 58
    9c1c:	20 f5       	brcc	.+72     	; 0x9c66 <Terminal+0x1094>
					flPIDkD = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    9c1e:	80 91 95 04 	lds	r24, 0x0495
    9c22:	90 91 96 04 	lds	r25, 0x0496
    9c26:	80 59       	subi	r24, 0x90	; 144
    9c28:	9d 4f       	sbci	r25, 0xFD	; 253
    9c2a:	68 ec       	ldi	r22, 0xC8	; 200
    9c2c:	70 e0       	ldi	r23, 0x00	; 0
    9c2e:	0e 94 65 55 	call	0xaaca	; 0xaaca <From_String_to_Float>
    9c32:	dc 01       	movw	r26, r24
    9c34:	cb 01       	movw	r24, r22
    9c36:	80 93 44 04 	sts	0x0444, r24
    9c3a:	90 93 45 04 	sts	0x0445, r25
    9c3e:	a0 93 46 04 	sts	0x0446, r26
    9c42:	b0 93 47 04 	sts	0x0447, r27

					Float_a_Eeprom(&flPIDkD_Eeprom, &flPIDkD);
    9c46:	64 e4       	ldi	r22, 0x44	; 68
    9c48:	74 e0       	ldi	r23, 0x04	; 4
    9c4a:	88 e0       	ldi	r24, 0x08	; 8
    9c4c:	90 e0       	ldi	r25, 0x00	; 0
    9c4e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Float_a_Eeprom(&flPIDkD_Eeprom_BK, &flPIDkD);
    9c52:	64 e4       	ldi	r22, 0x44	; 68
    9c54:	74 e0       	ldi	r23, 0x04	; 4
    9c56:	8c e2       	ldi	r24, 0x2C	; 44
    9c58:	90 e0       	ldi	r25, 0x00	; 0
    9c5a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    9c5e:	80 e0       	ldi	r24, 0x00	; 0
    9c60:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
    9c64:	28 c0       	rjmp	.+80     	; 0x9cb6 <Terminal+0x10e4>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    9c66:	80 91 95 04 	lds	r24, 0x0495
    9c6a:	90 91 96 04 	lds	r25, 0x0496
    9c6e:	80 59       	subi	r24, 0x90	; 144
    9c70:	9d 4f       	sbci	r25, 0xFD	; 253
    9c72:	bc 01       	movw	r22, r24
    9c74:	81 ea       	ldi	r24, 0xA1	; 161
    9c76:	91 e0       	ldi	r25, 0x01	; 1
    9c78:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    9c7c:	89 2b       	or	r24, r25
    9c7e:	d9 f0       	breq	.+54     	; 0x9cb6 <Terminal+0x10e4>
					flPIDkD=DEFAULT_PID_KD;
    9c80:	80 e0       	ldi	r24, 0x00	; 0
    9c82:	90 e0       	ldi	r25, 0x00	; 0
    9c84:	a8 e4       	ldi	r26, 0x48	; 72
    9c86:	b2 e4       	ldi	r27, 0x42	; 66
    9c88:	80 93 44 04 	sts	0x0444, r24
    9c8c:	90 93 45 04 	sts	0x0445, r25
    9c90:	a0 93 46 04 	sts	0x0446, r26
    9c94:	b0 93 47 04 	sts	0x0447, r27

					Float_a_Eeprom(&flPIDkD_Eeprom, &flPIDkD);
    9c98:	64 e4       	ldi	r22, 0x44	; 68
    9c9a:	74 e0       	ldi	r23, 0x04	; 4
    9c9c:	88 e0       	ldi	r24, 0x08	; 8
    9c9e:	90 e0       	ldi	r25, 0x00	; 0
    9ca0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Float_a_Eeprom(&flPIDkD_Eeprom_BK, &flPIDkD);
    9ca4:	64 e4       	ldi	r22, 0x44	; 68
    9ca6:	74 e0       	ldi	r23, 0x04	; 4
    9ca8:	8c e2       	ldi	r24, 0x2C	; 44
    9caa:	90 e0       	ldi	r25, 0x00	; 0
    9cac:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    9cb0:	80 e0       	ldi	r24, 0x00	; 0
    9cb2:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
				}
				auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_KD);
    9cb6:	85 e5       	ldi	r24, 0x55	; 85
    9cb8:	91 e0       	ldi	r25, 0x01	; 1
    9cba:	89 2f       	mov	r24, r25
    9cbc:	8f 93       	push	r24
    9cbe:	85 e5       	ldi	r24, 0x55	; 85
    9cc0:	91 e0       	ldi	r25, 0x01	; 1
    9cc2:	8f 93       	push	r24
    9cc4:	8f e1       	ldi	r24, 0x1F	; 31
    9cc6:	92 e0       	ldi	r25, 0x02	; 2
    9cc8:	89 2f       	mov	r24, r25
    9cca:	8f 93       	push	r24
    9ccc:	8f e1       	ldi	r24, 0x1F	; 31
    9cce:	92 e0       	ldi	r25, 0x02	; 2
    9cd0:	8f 93       	push	r24
    9cd2:	80 e7       	ldi	r24, 0x70	; 112
    9cd4:	92 e0       	ldi	r25, 0x02	; 2
    9cd6:	89 2f       	mov	r24, r25
    9cd8:	8f 93       	push	r24
    9cda:	80 e7       	ldi	r24, 0x70	; 112
    9cdc:	92 e0       	ldi	r25, 0x02	; 2
    9cde:	8f 93       	push	r24
    9ce0:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    9ce4:	0f 90       	pop	r0
    9ce6:	0f 90       	pop	r0
    9ce8:	0f 90       	pop	r0
    9cea:	0f 90       	pop	r0
    9cec:	0f 90       	pop	r0
    9cee:	0f 90       	pop	r0
    9cf0:	90 93 96 04 	sts	0x0496, r25
    9cf4:	80 93 95 04 	sts	0x0495, r24
				dtostrf(flPIDkD, 7, 3, chBufferRx_USART0+auxIndexTerminal);
    9cf8:	80 91 95 04 	lds	r24, 0x0495
    9cfc:	90 91 96 04 	lds	r25, 0x0496
    9d00:	9c 01       	movw	r18, r24
    9d02:	20 59       	subi	r18, 0x90	; 144
    9d04:	3d 4f       	sbci	r19, 0xFD	; 253
    9d06:	80 91 44 04 	lds	r24, 0x0444
    9d0a:	90 91 45 04 	lds	r25, 0x0445
    9d0e:	a0 91 46 04 	lds	r26, 0x0446
    9d12:	b0 91 47 04 	lds	r27, 0x0447
    9d16:	89 01       	movw	r16, r18
    9d18:	23 e0       	ldi	r18, 0x03	; 3
    9d1a:	47 e0       	ldi	r20, 0x07	; 7
    9d1c:	bc 01       	movw	r22, r24
    9d1e:	cd 01       	movw	r24, r26
    9d20:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
    9d24:	d1 c3       	rjmp	.+1954   	; 0xa4c8 <Terminal+0x18f6>
			}

			// chBufferRx_USART0 = MAXINT xxx.xxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Max_Integ, chBufferRx_USART0)) {
    9d26:	60 e7       	ldi	r22, 0x70	; 112
    9d28:	72 e0       	ldi	r23, 0x02	; 2
    9d2a:	89 e5       	ldi	r24, 0x59	; 89
    9d2c:	91 e0       	ldi	r25, 0x01	; 1
    9d2e:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    9d32:	89 2b       	or	r24, r25
    9d34:	09 f4       	brne	.+2      	; 0x9d38 <Terminal+0x1166>
    9d36:	98 c0       	rjmp	.+304    	; 0x9e68 <Terminal+0x1296>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    9d38:	80 91 95 04 	lds	r24, 0x0495
    9d3c:	90 91 96 04 	lds	r25, 0x0496
    9d40:	80 59       	subi	r24, 0x90	; 144
    9d42:	9d 4f       	sbci	r25, 0xFD	; 253
    9d44:	fc 01       	movw	r30, r24
    9d46:	80 81       	ld	r24, Z
    9d48:	80 33       	cpi	r24, 0x30	; 48
    9d4a:	70 f1       	brcs	.+92     	; 0x9da8 <Terminal+0x11d6>
    9d4c:	80 91 95 04 	lds	r24, 0x0495
    9d50:	90 91 96 04 	lds	r25, 0x0496
    9d54:	80 59       	subi	r24, 0x90	; 144
    9d56:	9d 4f       	sbci	r25, 0xFD	; 253
    9d58:	fc 01       	movw	r30, r24
    9d5a:	80 81       	ld	r24, Z
    9d5c:	8a 33       	cpi	r24, 0x3A	; 58
    9d5e:	20 f5       	brcc	.+72     	; 0x9da8 <Terminal+0x11d6>
					flPIDintMax = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    9d60:	80 91 95 04 	lds	r24, 0x0495
    9d64:	90 91 96 04 	lds	r25, 0x0496
    9d68:	80 59       	subi	r24, 0x90	; 144
    9d6a:	9d 4f       	sbci	r25, 0xFD	; 253
    9d6c:	68 ec       	ldi	r22, 0xC8	; 200
    9d6e:	70 e0       	ldi	r23, 0x00	; 0
    9d70:	0e 94 65 55 	call	0xaaca	; 0xaaca <From_String_to_Float>
    9d74:	dc 01       	movw	r26, r24
    9d76:	cb 01       	movw	r24, r22
    9d78:	80 93 19 04 	sts	0x0419, r24
    9d7c:	90 93 1a 04 	sts	0x041A, r25
    9d80:	a0 93 1b 04 	sts	0x041B, r26
    9d84:	b0 93 1c 04 	sts	0x041C, r27

					Float_a_Eeprom(&flPIDintMax_Eeprom, &flPIDintMax);
    9d88:	69 e1       	ldi	r22, 0x19	; 25
    9d8a:	74 e0       	ldi	r23, 0x04	; 4
    9d8c:	8c e0       	ldi	r24, 0x0C	; 12
    9d8e:	90 e0       	ldi	r25, 0x00	; 0
    9d90:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Float_a_Eeprom(&flPIDintMax_Eeprom_BK, &flPIDintMax);
    9d94:	69 e1       	ldi	r22, 0x19	; 25
    9d96:	74 e0       	ldi	r23, 0x04	; 4
    9d98:	80 e3       	ldi	r24, 0x30	; 48
    9d9a:	90 e0       	ldi	r25, 0x00	; 0
    9d9c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    9da0:	80 e0       	ldi	r24, 0x00	; 0
    9da2:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
    9da6:	28 c0       	rjmp	.+80     	; 0x9df8 <Terminal+0x1226>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    9da8:	80 91 95 04 	lds	r24, 0x0495
    9dac:	90 91 96 04 	lds	r25, 0x0496
    9db0:	80 59       	subi	r24, 0x90	; 144
    9db2:	9d 4f       	sbci	r25, 0xFD	; 253
    9db4:	bc 01       	movw	r22, r24
    9db6:	81 ea       	ldi	r24, 0xA1	; 161
    9db8:	91 e0       	ldi	r25, 0x01	; 1
    9dba:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    9dbe:	89 2b       	or	r24, r25
    9dc0:	d9 f0       	breq	.+54     	; 0x9df8 <Terminal+0x1226>
					flPIDintMax=DEFAULT_MAX_PID_INTEG;
    9dc2:	80 e0       	ldi	r24, 0x00	; 0
    9dc4:	90 e0       	ldi	r25, 0x00	; 0
    9dc6:	a0 ea       	ldi	r26, 0xA0	; 160
    9dc8:	b0 e4       	ldi	r27, 0x40	; 64
    9dca:	80 93 19 04 	sts	0x0419, r24
    9dce:	90 93 1a 04 	sts	0x041A, r25
    9dd2:	a0 93 1b 04 	sts	0x041B, r26
    9dd6:	b0 93 1c 04 	sts	0x041C, r27

					Float_a_Eeprom(&flPIDintMax_Eeprom, &flPIDintMax);
    9dda:	69 e1       	ldi	r22, 0x19	; 25
    9ddc:	74 e0       	ldi	r23, 0x04	; 4
    9dde:	8c e0       	ldi	r24, 0x0C	; 12
    9de0:	90 e0       	ldi	r25, 0x00	; 0
    9de2:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Float_a_Eeprom(&flPIDintMax_Eeprom_BK, &flPIDintMax);
    9de6:	69 e1       	ldi	r22, 0x19	; 25
    9de8:	74 e0       	ldi	r23, 0x04	; 4
    9dea:	80 e3       	ldi	r24, 0x30	; 48
    9dec:	90 e0       	ldi	r25, 0x00	; 0
    9dee:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    9df2:	80 e0       	ldi	r24, 0x00	; 0
    9df4:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
				}
				auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Max_Integ);
    9df8:	89 e5       	ldi	r24, 0x59	; 89
    9dfa:	91 e0       	ldi	r25, 0x01	; 1
    9dfc:	89 2f       	mov	r24, r25
    9dfe:	8f 93       	push	r24
    9e00:	89 e5       	ldi	r24, 0x59	; 89
    9e02:	91 e0       	ldi	r25, 0x01	; 1
    9e04:	8f 93       	push	r24
    9e06:	8f e1       	ldi	r24, 0x1F	; 31
    9e08:	92 e0       	ldi	r25, 0x02	; 2
    9e0a:	89 2f       	mov	r24, r25
    9e0c:	8f 93       	push	r24
    9e0e:	8f e1       	ldi	r24, 0x1F	; 31
    9e10:	92 e0       	ldi	r25, 0x02	; 2
    9e12:	8f 93       	push	r24
    9e14:	80 e7       	ldi	r24, 0x70	; 112
    9e16:	92 e0       	ldi	r25, 0x02	; 2
    9e18:	89 2f       	mov	r24, r25
    9e1a:	8f 93       	push	r24
    9e1c:	80 e7       	ldi	r24, 0x70	; 112
    9e1e:	92 e0       	ldi	r25, 0x02	; 2
    9e20:	8f 93       	push	r24
    9e22:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    9e26:	0f 90       	pop	r0
    9e28:	0f 90       	pop	r0
    9e2a:	0f 90       	pop	r0
    9e2c:	0f 90       	pop	r0
    9e2e:	0f 90       	pop	r0
    9e30:	0f 90       	pop	r0
    9e32:	90 93 96 04 	sts	0x0496, r25
    9e36:	80 93 95 04 	sts	0x0495, r24
				dtostrf(flPIDintMax, 7, 3, chBufferRx_USART0+auxIndexTerminal);
    9e3a:	80 91 95 04 	lds	r24, 0x0495
    9e3e:	90 91 96 04 	lds	r25, 0x0496
    9e42:	9c 01       	movw	r18, r24
    9e44:	20 59       	subi	r18, 0x90	; 144
    9e46:	3d 4f       	sbci	r19, 0xFD	; 253
    9e48:	80 91 19 04 	lds	r24, 0x0419
    9e4c:	90 91 1a 04 	lds	r25, 0x041A
    9e50:	a0 91 1b 04 	lds	r26, 0x041B
    9e54:	b0 91 1c 04 	lds	r27, 0x041C
    9e58:	89 01       	movw	r16, r18
    9e5a:	23 e0       	ldi	r18, 0x03	; 3
    9e5c:	47 e0       	ldi	r20, 0x07	; 7
    9e5e:	bc 01       	movw	r22, r24
    9e60:	cd 01       	movw	r24, r26
    9e62:	0e 94 a5 58 	call	0xb14a	; 0xb14a <dtostrf>
    9e66:	30 c3       	rjmp	.+1632   	; 0xa4c8 <Terminal+0x18f6>
			}

			// chBufferRx_USART0 = TPID xxxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Periodo_PID, chBufferRx_USART0)) {
    9e68:	60 e7       	ldi	r22, 0x70	; 112
    9e6a:	72 e0       	ldi	r23, 0x02	; 2
    9e6c:	81 e6       	ldi	r24, 0x61	; 97
    9e6e:	91 e0       	ldi	r25, 0x01	; 1
    9e70:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    9e74:	89 2b       	or	r24, r25
    9e76:	09 f4       	brne	.+2      	; 0x9e7a <Terminal+0x12a8>
    9e78:	79 c0       	rjmp	.+242    	; 0x9f6c <Terminal+0x139a>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    9e7a:	80 91 95 04 	lds	r24, 0x0495
    9e7e:	90 91 96 04 	lds	r25, 0x0496
    9e82:	80 59       	subi	r24, 0x90	; 144
    9e84:	9d 4f       	sbci	r25, 0xFD	; 253
    9e86:	fc 01       	movw	r30, r24
    9e88:	80 81       	ld	r24, Z
    9e8a:	80 33       	cpi	r24, 0x30	; 48
    9e8c:	30 f1       	brcs	.+76     	; 0x9eda <Terminal+0x1308>
    9e8e:	80 91 95 04 	lds	r24, 0x0495
    9e92:	90 91 96 04 	lds	r25, 0x0496
    9e96:	80 59       	subi	r24, 0x90	; 144
    9e98:	9d 4f       	sbci	r25, 0xFD	; 253
    9e9a:	fc 01       	movw	r30, r24
    9e9c:	80 81       	ld	r24, Z
    9e9e:	8a 33       	cpi	r24, 0x3A	; 58
    9ea0:	e0 f4       	brcc	.+56     	; 0x9eda <Terminal+0x1308>
					uPeriodoPID = atoi(chBufferRx_USART0+auxIndexTerminal);
    9ea2:	80 91 95 04 	lds	r24, 0x0495
    9ea6:	90 91 96 04 	lds	r25, 0x0496
    9eaa:	80 59       	subi	r24, 0x90	; 144
    9eac:	9d 4f       	sbci	r25, 0xFD	; 253
    9eae:	0e 94 c5 58 	call	0xb18a	; 0xb18a <atoi>
    9eb2:	90 93 24 04 	sts	0x0424, r25
    9eb6:	80 93 23 04 	sts	0x0423, r24

					UnsignedInt_a_Eeprom(&uPeriodoPID_Eeprom, &uPeriodoPID);
    9eba:	63 e2       	ldi	r22, 0x23	; 35
    9ebc:	74 e0       	ldi	r23, 0x04	; 4
    9ebe:	8c e1       	ldi	r24, 0x1C	; 28
    9ec0:	90 e0       	ldi	r25, 0x00	; 0
    9ec2:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uPeriodoPID_Eeprom_BK, &uPeriodoPID);
    9ec6:	63 e2       	ldi	r22, 0x23	; 35
    9ec8:	74 e0       	ldi	r23, 0x04	; 4
    9eca:	80 e4       	ldi	r24, 0x40	; 64
    9ecc:	90 e0       	ldi	r25, 0x00	; 0
    9ece:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    9ed2:	80 e0       	ldi	r24, 0x00	; 0
    9ed4:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
    9ed8:	22 c0       	rjmp	.+68     	; 0x9f1e <Terminal+0x134c>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    9eda:	80 91 95 04 	lds	r24, 0x0495
    9ede:	90 91 96 04 	lds	r25, 0x0496
    9ee2:	80 59       	subi	r24, 0x90	; 144
    9ee4:	9d 4f       	sbci	r25, 0xFD	; 253
    9ee6:	bc 01       	movw	r22, r24
    9ee8:	81 ea       	ldi	r24, 0xA1	; 161
    9eea:	91 e0       	ldi	r25, 0x01	; 1
    9eec:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    9ef0:	89 2b       	or	r24, r25
    9ef2:	a9 f0       	breq	.+42     	; 0x9f1e <Terminal+0x134c>
					uPeriodoPID = DEFAULT_PID_PERIODO;
    9ef4:	88 eb       	ldi	r24, 0xB8	; 184
    9ef6:	9b e0       	ldi	r25, 0x0B	; 11
    9ef8:	90 93 24 04 	sts	0x0424, r25
    9efc:	80 93 23 04 	sts	0x0423, r24

					UnsignedInt_a_Eeprom(&uPeriodoPID_Eeprom, &uPeriodoPID);
    9f00:	63 e2       	ldi	r22, 0x23	; 35
    9f02:	74 e0       	ldi	r23, 0x04	; 4
    9f04:	8c e1       	ldi	r24, 0x1C	; 28
    9f06:	90 e0       	ldi	r25, 0x00	; 0
    9f08:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uPeriodoPID_Eeprom_BK, &uPeriodoPID);
    9f0c:	63 e2       	ldi	r22, 0x23	; 35
    9f0e:	74 e0       	ldi	r23, 0x04	; 4
    9f10:	80 e4       	ldi	r24, 0x40	; 64
    9f12:	90 e0       	ldi	r25, 0x00	; 0
    9f14:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    9f18:	80 e0       	ldi	r24, 0x00	; 0
    9f1a:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
				}
				sprintf(chBufferRx_USART0, "%S: %dmseg", (wchar_t*)Comando_Periodo_PID, uPeriodoPID);
    9f1e:	80 91 23 04 	lds	r24, 0x0423
    9f22:	90 91 24 04 	lds	r25, 0x0424
    9f26:	29 2f       	mov	r18, r25
    9f28:	2f 93       	push	r18
    9f2a:	8f 93       	push	r24
    9f2c:	81 e6       	ldi	r24, 0x61	; 97
    9f2e:	91 e0       	ldi	r25, 0x01	; 1
    9f30:	89 2f       	mov	r24, r25
    9f32:	8f 93       	push	r24
    9f34:	81 e6       	ldi	r24, 0x61	; 97
    9f36:	91 e0       	ldi	r25, 0x01	; 1
    9f38:	8f 93       	push	r24
    9f3a:	84 e4       	ldi	r24, 0x44	; 68
    9f3c:	92 e0       	ldi	r25, 0x02	; 2
    9f3e:	89 2f       	mov	r24, r25
    9f40:	8f 93       	push	r24
    9f42:	84 e4       	ldi	r24, 0x44	; 68
    9f44:	92 e0       	ldi	r25, 0x02	; 2
    9f46:	8f 93       	push	r24
    9f48:	80 e7       	ldi	r24, 0x70	; 112
    9f4a:	92 e0       	ldi	r25, 0x02	; 2
    9f4c:	89 2f       	mov	r24, r25
    9f4e:	8f 93       	push	r24
    9f50:	80 e7       	ldi	r24, 0x70	; 112
    9f52:	92 e0       	ldi	r25, 0x02	; 2
    9f54:	8f 93       	push	r24
    9f56:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    9f5a:	8d b7       	in	r24, 0x3d	; 61
    9f5c:	9e b7       	in	r25, 0x3e	; 62
    9f5e:	08 96       	adiw	r24, 0x08	; 8
    9f60:	0f b6       	in	r0, 0x3f	; 63
    9f62:	f8 94       	cli
    9f64:	de bf       	out	0x3e, r29	; 62
    9f66:	0f be       	out	0x3f, r0	; 63
    9f68:	cd bf       	out	0x3d, r28	; 61
    9f6a:	ae c2       	rjmp	.+1372   	; 0xa4c8 <Terminal+0x18f6>
			}

			// chBufferRx_USART0 = TVC xxxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Periodo_Veda_Caudal, chBufferRx_USART0)) {
    9f6c:	60 e7       	ldi	r22, 0x70	; 112
    9f6e:	72 e0       	ldi	r23, 0x02	; 2
    9f70:	8e e6       	ldi	r24, 0x6E	; 110
    9f72:	91 e0       	ldi	r25, 0x01	; 1
    9f74:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    9f78:	89 2b       	or	r24, r25
    9f7a:	09 f4       	brne	.+2      	; 0x9f7e <Terminal+0x13ac>
    9f7c:	79 c0       	rjmp	.+242    	; 0xa070 <Terminal+0x149e>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    9f7e:	80 91 95 04 	lds	r24, 0x0495
    9f82:	90 91 96 04 	lds	r25, 0x0496
    9f86:	80 59       	subi	r24, 0x90	; 144
    9f88:	9d 4f       	sbci	r25, 0xFD	; 253
    9f8a:	fc 01       	movw	r30, r24
    9f8c:	80 81       	ld	r24, Z
    9f8e:	80 33       	cpi	r24, 0x30	; 48
    9f90:	30 f1       	brcs	.+76     	; 0x9fde <Terminal+0x140c>
    9f92:	80 91 95 04 	lds	r24, 0x0495
    9f96:	90 91 96 04 	lds	r25, 0x0496
    9f9a:	80 59       	subi	r24, 0x90	; 144
    9f9c:	9d 4f       	sbci	r25, 0xFD	; 253
    9f9e:	fc 01       	movw	r30, r24
    9fa0:	80 81       	ld	r24, Z
    9fa2:	8a 33       	cpi	r24, 0x3A	; 58
    9fa4:	e0 f4       	brcc	.+56     	; 0x9fde <Terminal+0x140c>
					uPeriodoVedaCaudal = atoi(chBufferRx_USART0+auxIndexTerminal);
    9fa6:	80 91 95 04 	lds	r24, 0x0495
    9faa:	90 91 96 04 	lds	r25, 0x0496
    9fae:	80 59       	subi	r24, 0x90	; 144
    9fb0:	9d 4f       	sbci	r25, 0xFD	; 253
    9fb2:	0e 94 c5 58 	call	0xb18a	; 0xb18a <atoi>
    9fb6:	90 93 1e 04 	sts	0x041E, r25
    9fba:	80 93 1d 04 	sts	0x041D, r24

					UnsignedInt_a_Eeprom(&uPeriodoVedaCaudal_Eeprom, &uPeriodoVedaCaudal);
    9fbe:	6d e1       	ldi	r22, 0x1D	; 29
    9fc0:	74 e0       	ldi	r23, 0x04	; 4
    9fc2:	80 e2       	ldi	r24, 0x20	; 32
    9fc4:	90 e0       	ldi	r25, 0x00	; 0
    9fc6:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uPeriodoVedaCaudal_Eeprom_BK, &uPeriodoVedaCaudal);
    9fca:	6d e1       	ldi	r22, 0x1D	; 29
    9fcc:	74 e0       	ldi	r23, 0x04	; 4
    9fce:	84 e4       	ldi	r24, 0x44	; 68
    9fd0:	90 e0       	ldi	r25, 0x00	; 0
    9fd2:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    9fd6:	80 e0       	ldi	r24, 0x00	; 0
    9fd8:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
    9fdc:	22 c0       	rjmp	.+68     	; 0xa022 <Terminal+0x1450>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    9fde:	80 91 95 04 	lds	r24, 0x0495
    9fe2:	90 91 96 04 	lds	r25, 0x0496
    9fe6:	80 59       	subi	r24, 0x90	; 144
    9fe8:	9d 4f       	sbci	r25, 0xFD	; 253
    9fea:	bc 01       	movw	r22, r24
    9fec:	81 ea       	ldi	r24, 0xA1	; 161
    9fee:	91 e0       	ldi	r25, 0x01	; 1
    9ff0:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    9ff4:	89 2b       	or	r24, r25
    9ff6:	a9 f0       	breq	.+42     	; 0xa022 <Terminal+0x1450>
					uPeriodoVedaCaudal = DEFAULT_PERIODO_VEDA_CAUDAL;
    9ff8:	88 ee       	ldi	r24, 0xE8	; 232
    9ffa:	9d ef       	ldi	r25, 0xFD	; 253
    9ffc:	90 93 1e 04 	sts	0x041E, r25
    a000:	80 93 1d 04 	sts	0x041D, r24

					UnsignedInt_a_Eeprom(&uPeriodoVedaCaudal_Eeprom, &uPeriodoVedaCaudal);
    a004:	6d e1       	ldi	r22, 0x1D	; 29
    a006:	74 e0       	ldi	r23, 0x04	; 4
    a008:	80 e2       	ldi	r24, 0x20	; 32
    a00a:	90 e0       	ldi	r25, 0x00	; 0
    a00c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uPeriodoVedaCaudal_Eeprom_BK, &uPeriodoVedaCaudal);
    a010:	6d e1       	ldi	r22, 0x1D	; 29
    a012:	74 e0       	ldi	r23, 0x04	; 4
    a014:	84 e4       	ldi	r24, 0x44	; 68
    a016:	90 e0       	ldi	r25, 0x00	; 0
    a018:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    a01c:	80 e0       	ldi	r24, 0x00	; 0
    a01e:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
				}
				sprintf(chBufferRx_USART0, "%S: %dmseg", (wchar_t*)Comando_Periodo_Veda_Caudal, uPeriodoVedaCaudal);
    a022:	80 91 1d 04 	lds	r24, 0x041D
    a026:	90 91 1e 04 	lds	r25, 0x041E
    a02a:	29 2f       	mov	r18, r25
    a02c:	2f 93       	push	r18
    a02e:	8f 93       	push	r24
    a030:	8e e6       	ldi	r24, 0x6E	; 110
    a032:	91 e0       	ldi	r25, 0x01	; 1
    a034:	89 2f       	mov	r24, r25
    a036:	8f 93       	push	r24
    a038:	8e e6       	ldi	r24, 0x6E	; 110
    a03a:	91 e0       	ldi	r25, 0x01	; 1
    a03c:	8f 93       	push	r24
    a03e:	84 e4       	ldi	r24, 0x44	; 68
    a040:	92 e0       	ldi	r25, 0x02	; 2
    a042:	89 2f       	mov	r24, r25
    a044:	8f 93       	push	r24
    a046:	84 e4       	ldi	r24, 0x44	; 68
    a048:	92 e0       	ldi	r25, 0x02	; 2
    a04a:	8f 93       	push	r24
    a04c:	80 e7       	ldi	r24, 0x70	; 112
    a04e:	92 e0       	ldi	r25, 0x02	; 2
    a050:	89 2f       	mov	r24, r25
    a052:	8f 93       	push	r24
    a054:	80 e7       	ldi	r24, 0x70	; 112
    a056:	92 e0       	ldi	r25, 0x02	; 2
    a058:	8f 93       	push	r24
    a05a:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    a05e:	8d b7       	in	r24, 0x3d	; 61
    a060:	9e b7       	in	r25, 0x3e	; 62
    a062:	08 96       	adiw	r24, 0x08	; 8
    a064:	0f b6       	in	r0, 0x3f	; 63
    a066:	f8 94       	cli
    a068:	de bf       	out	0x3e, r29	; 62
    a06a:	0f be       	out	0x3f, r0	; 63
    a06c:	cd bf       	out	0x3d, r28	; 61
    a06e:	2c c2       	rjmp	.+1112   	; 0xa4c8 <Terminal+0x18f6>
			}

			// chBufferRx_USART0 = TVPID xxxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Periodo_Veda_PID, chBufferRx_USART0)) {
    a070:	60 e7       	ldi	r22, 0x70	; 112
    a072:	72 e0       	ldi	r23, 0x02	; 2
    a074:	87 e6       	ldi	r24, 0x67	; 103
    a076:	91 e0       	ldi	r25, 0x01	; 1
    a078:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    a07c:	89 2b       	or	r24, r25
    a07e:	09 f4       	brne	.+2      	; 0xa082 <Terminal+0x14b0>
    a080:	79 c0       	rjmp	.+242    	; 0xa174 <Terminal+0x15a2>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    a082:	80 91 95 04 	lds	r24, 0x0495
    a086:	90 91 96 04 	lds	r25, 0x0496
    a08a:	80 59       	subi	r24, 0x90	; 144
    a08c:	9d 4f       	sbci	r25, 0xFD	; 253
    a08e:	fc 01       	movw	r30, r24
    a090:	80 81       	ld	r24, Z
    a092:	80 33       	cpi	r24, 0x30	; 48
    a094:	30 f1       	brcs	.+76     	; 0xa0e2 <Terminal+0x1510>
    a096:	80 91 95 04 	lds	r24, 0x0495
    a09a:	90 91 96 04 	lds	r25, 0x0496
    a09e:	80 59       	subi	r24, 0x90	; 144
    a0a0:	9d 4f       	sbci	r25, 0xFD	; 253
    a0a2:	fc 01       	movw	r30, r24
    a0a4:	80 81       	ld	r24, Z
    a0a6:	8a 33       	cpi	r24, 0x3A	; 58
    a0a8:	e0 f4       	brcc	.+56     	; 0xa0e2 <Terminal+0x1510>
					uPeriodoVedaPID = atoi(chBufferRx_USART0+auxIndexTerminal);
    a0aa:	80 91 95 04 	lds	r24, 0x0495
    a0ae:	90 91 96 04 	lds	r25, 0x0496
    a0b2:	80 59       	subi	r24, 0x90	; 144
    a0b4:	9d 4f       	sbci	r25, 0xFD	; 253
    a0b6:	0e 94 c5 58 	call	0xb18a	; 0xb18a <atoi>
    a0ba:	90 93 57 04 	sts	0x0457, r25
    a0be:	80 93 56 04 	sts	0x0456, r24

					UnsignedInt_a_Eeprom(&uPeriodoVedaPID_Eeprom, &uPeriodoVedaPID);
    a0c2:	66 e5       	ldi	r22, 0x56	; 86
    a0c4:	74 e0       	ldi	r23, 0x04	; 4
    a0c6:	8e e1       	ldi	r24, 0x1E	; 30
    a0c8:	90 e0       	ldi	r25, 0x00	; 0
    a0ca:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uPeriodoVedaPID_Eeprom_BK, &uPeriodoVedaPID);
    a0ce:	66 e5       	ldi	r22, 0x56	; 86
    a0d0:	74 e0       	ldi	r23, 0x04	; 4
    a0d2:	82 e4       	ldi	r24, 0x42	; 66
    a0d4:	90 e0       	ldi	r25, 0x00	; 0
    a0d6:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    a0da:	80 e0       	ldi	r24, 0x00	; 0
    a0dc:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
    a0e0:	22 c0       	rjmp	.+68     	; 0xa126 <Terminal+0x1554>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    a0e2:	80 91 95 04 	lds	r24, 0x0495
    a0e6:	90 91 96 04 	lds	r25, 0x0496
    a0ea:	80 59       	subi	r24, 0x90	; 144
    a0ec:	9d 4f       	sbci	r25, 0xFD	; 253
    a0ee:	bc 01       	movw	r22, r24
    a0f0:	81 ea       	ldi	r24, 0xA1	; 161
    a0f2:	91 e0       	ldi	r25, 0x01	; 1
    a0f4:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    a0f8:	89 2b       	or	r24, r25
    a0fa:	a9 f0       	breq	.+42     	; 0xa126 <Terminal+0x1554>
					uPeriodoVedaPID = DEFAULT_PERIODO_VEDA_PID;
    a0fc:	80 ee       	ldi	r24, 0xE0	; 224
    a0fe:	9e e2       	ldi	r25, 0x2E	; 46
    a100:	90 93 57 04 	sts	0x0457, r25
    a104:	80 93 56 04 	sts	0x0456, r24

					UnsignedInt_a_Eeprom(&uPeriodoVedaPID_Eeprom, &uPeriodoVedaPID);
    a108:	66 e5       	ldi	r22, 0x56	; 86
    a10a:	74 e0       	ldi	r23, 0x04	; 4
    a10c:	8e e1       	ldi	r24, 0x1E	; 30
    a10e:	90 e0       	ldi	r25, 0x00	; 0
    a110:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uPeriodoVedaPID_Eeprom_BK, &uPeriodoVedaPID);
    a114:	66 e5       	ldi	r22, 0x56	; 86
    a116:	74 e0       	ldi	r23, 0x04	; 4
    a118:	82 e4       	ldi	r24, 0x42	; 66
    a11a:	90 e0       	ldi	r25, 0x00	; 0
    a11c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PID);
    a120:	80 e0       	ldi	r24, 0x00	; 0
    a122:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Escribir_Checksum_Eeprom>
				}
				sprintf(chBufferRx_USART0, "%S: %dmseg", (wchar_t*)Comando_Periodo_Veda_PID, uPeriodoVedaPID);
    a126:	80 91 56 04 	lds	r24, 0x0456
    a12a:	90 91 57 04 	lds	r25, 0x0457
    a12e:	29 2f       	mov	r18, r25
    a130:	2f 93       	push	r18
    a132:	8f 93       	push	r24
    a134:	87 e6       	ldi	r24, 0x67	; 103
    a136:	91 e0       	ldi	r25, 0x01	; 1
    a138:	89 2f       	mov	r24, r25
    a13a:	8f 93       	push	r24
    a13c:	87 e6       	ldi	r24, 0x67	; 103
    a13e:	91 e0       	ldi	r25, 0x01	; 1
    a140:	8f 93       	push	r24
    a142:	84 e4       	ldi	r24, 0x44	; 68
    a144:	92 e0       	ldi	r25, 0x02	; 2
    a146:	89 2f       	mov	r24, r25
    a148:	8f 93       	push	r24
    a14a:	84 e4       	ldi	r24, 0x44	; 68
    a14c:	92 e0       	ldi	r25, 0x02	; 2
    a14e:	8f 93       	push	r24
    a150:	80 e7       	ldi	r24, 0x70	; 112
    a152:	92 e0       	ldi	r25, 0x02	; 2
    a154:	89 2f       	mov	r24, r25
    a156:	8f 93       	push	r24
    a158:	80 e7       	ldi	r24, 0x70	; 112
    a15a:	92 e0       	ldi	r25, 0x02	; 2
    a15c:	8f 93       	push	r24
    a15e:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    a162:	8d b7       	in	r24, 0x3d	; 61
    a164:	9e b7       	in	r25, 0x3e	; 62
    a166:	08 96       	adiw	r24, 0x08	; 8
    a168:	0f b6       	in	r0, 0x3f	; 63
    a16a:	f8 94       	cli
    a16c:	de bf       	out	0x3e, r29	; 62
    a16e:	0f be       	out	0x3f, r0	; 63
    a170:	cd bf       	out	0x3d, r28	; 61
    a172:	aa c1       	rjmp	.+852    	; 0xa4c8 <Terminal+0x18f6>
			}

			// chTextoSMS = REINICIAR\0
			else if (Detectar_Comando_Buffer_P(Comando_Reiniciar, chBufferRx_USART0)) {
    a174:	60 e7       	ldi	r22, 0x70	; 112
    a176:	72 e0       	ldi	r23, 0x02	; 2
    a178:	88 ea       	ldi	r24, 0xA8	; 168
    a17a:	91 e0       	ldi	r25, 0x01	; 1
    a17c:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    a180:	89 2b       	or	r24, r25
    a182:	09 f4       	brne	.+2      	; 0xa186 <Terminal+0x15b4>
    a184:	44 c0       	rjmp	.+136    	; 0xa20e <Terminal+0x163c>
				sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Reiniciar, (wchar_t*)MSG_Ok);
    a186:	8c ee       	ldi	r24, 0xEC	; 236
    a188:	91 e0       	ldi	r25, 0x01	; 1
    a18a:	89 2f       	mov	r24, r25
    a18c:	8f 93       	push	r24
    a18e:	8c ee       	ldi	r24, 0xEC	; 236
    a190:	91 e0       	ldi	r25, 0x01	; 1
    a192:	8f 93       	push	r24
    a194:	88 ea       	ldi	r24, 0xA8	; 168
    a196:	91 e0       	ldi	r25, 0x01	; 1
    a198:	89 2f       	mov	r24, r25
    a19a:	8f 93       	push	r24
    a19c:	88 ea       	ldi	r24, 0xA8	; 168
    a19e:	91 e0       	ldi	r25, 0x01	; 1
    a1a0:	8f 93       	push	r24
    a1a2:	8f e4       	ldi	r24, 0x4F	; 79
    a1a4:	92 e0       	ldi	r25, 0x02	; 2
    a1a6:	89 2f       	mov	r24, r25
    a1a8:	8f 93       	push	r24
    a1aa:	8f e4       	ldi	r24, 0x4F	; 79
    a1ac:	92 e0       	ldi	r25, 0x02	; 2
    a1ae:	8f 93       	push	r24
    a1b0:	80 e7       	ldi	r24, 0x70	; 112
    a1b2:	92 e0       	ldi	r25, 0x02	; 2
    a1b4:	89 2f       	mov	r24, r25
    a1b6:	8f 93       	push	r24
    a1b8:	80 e7       	ldi	r24, 0x70	; 112
    a1ba:	92 e0       	ldi	r25, 0x02	; 2
    a1bc:	8f 93       	push	r24
    a1be:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    a1c2:	ed b7       	in	r30, 0x3d	; 61
    a1c4:	fe b7       	in	r31, 0x3e	; 62
    a1c6:	38 96       	adiw	r30, 0x08	; 8
    a1c8:	0f b6       	in	r0, 0x3f	; 63
    a1ca:	f8 94       	cli
    a1cc:	de bf       	out	0x3e, r29	; 62
    a1ce:	0f be       	out	0x3f, r0	; 63
    a1d0:	cd bf       	out	0x3d, r28	; 61
				Transmitir_Buffer_USART0 (chBufferRx_USART0, USART0_BUFFER_ZISE);
    a1d2:	68 ec       	ldi	r22, 0xC8	; 200
    a1d4:	70 e0       	ldi	r23, 0x00	; 0
    a1d6:	80 e7       	ldi	r24, 0x70	; 112
    a1d8:	92 e0       	ldi	r25, 0x02	; 2
    a1da:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    a1de:	87 e0       	ldi	r24, 0x07	; 7
    a1e0:	90 e0       	ldi	r25, 0x00	; 0
    a1e2:	88 70       	andi	r24, 0x08	; 8
    a1e4:	99 27       	eor	r25, r25
    a1e6:	89 2b       	or	r24, r25
    a1e8:	11 f0       	breq	.+4      	; 0xa1ee <Terminal+0x161c>
    a1ea:	88 e2       	ldi	r24, 0x28	; 40
    a1ec:	01 c0       	rjmp	.+2      	; 0xa1f0 <Terminal+0x161e>
    a1ee:	88 e0       	ldi	r24, 0x08	; 8
    a1f0:	97 e0       	ldi	r25, 0x07	; 7
    a1f2:	97 70       	andi	r25, 0x07	; 7
    a1f4:	89 2b       	or	r24, r25
    a1f6:	98 2f       	mov	r25, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    a1f8:	88 e1       	ldi	r24, 0x18	; 24
    a1fa:	0f b6       	in	r0, 0x3f	; 63
    a1fc:	f8 94       	cli
    a1fe:	a8 95       	wdr
    a200:	80 93 60 00 	sts	0x0060, r24
    a204:	0f be       	out	0x3f, r0	; 63
    a206:	90 93 60 00 	sts	0x0060, r25
				UC_RESET();
    a20a:	a8 95       	wdr
    a20c:	ff cf       	rjmp	.-2      	; 0xa20c <Terminal+0x163a>
			}

			// chTextoSMS = FABRICA RESET\0
			else if (Detectar_Comando_Buffer_P(Comando_Factory_Reset, chBufferRx_USART0)) {
    a20e:	60 e7       	ldi	r22, 0x70	; 112
    a210:	72 e0       	ldi	r23, 0x02	; 2
    a212:	83 eb       	ldi	r24, 0xB3	; 179
    a214:	91 e0       	ldi	r25, 0x01	; 1
    a216:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    a21a:	89 2b       	or	r24, r25
    a21c:	09 f4       	brne	.+2      	; 0xa220 <Terminal+0x164e>
    a21e:	48 c0       	rjmp	.+144    	; 0xa2b0 <Terminal+0x16de>
				Carga_Configuracion_Fabrica_Eeprom(GRUPO_TODOS);
    a220:	84 e0       	ldi	r24, 0x04	; 4
    a222:	90 e0       	ldi	r25, 0x00	; 0
    a224:	0e 94 de 13 	call	0x27bc	; 0x27bc <Carga_Configuracion_Fabrica_Eeprom>
				sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Factory_Reset, (wchar_t*)MSG_Ok);
    a228:	8c ee       	ldi	r24, 0xEC	; 236
    a22a:	91 e0       	ldi	r25, 0x01	; 1
    a22c:	89 2f       	mov	r24, r25
    a22e:	8f 93       	push	r24
    a230:	8c ee       	ldi	r24, 0xEC	; 236
    a232:	91 e0       	ldi	r25, 0x01	; 1
    a234:	8f 93       	push	r24
    a236:	83 eb       	ldi	r24, 0xB3	; 179
    a238:	91 e0       	ldi	r25, 0x01	; 1
    a23a:	89 2f       	mov	r24, r25
    a23c:	8f 93       	push	r24
    a23e:	83 eb       	ldi	r24, 0xB3	; 179
    a240:	91 e0       	ldi	r25, 0x01	; 1
    a242:	8f 93       	push	r24
    a244:	8f e4       	ldi	r24, 0x4F	; 79
    a246:	92 e0       	ldi	r25, 0x02	; 2
    a248:	89 2f       	mov	r24, r25
    a24a:	8f 93       	push	r24
    a24c:	8f e4       	ldi	r24, 0x4F	; 79
    a24e:	92 e0       	ldi	r25, 0x02	; 2
    a250:	8f 93       	push	r24
    a252:	80 e7       	ldi	r24, 0x70	; 112
    a254:	92 e0       	ldi	r25, 0x02	; 2
    a256:	89 2f       	mov	r24, r25
    a258:	8f 93       	push	r24
    a25a:	80 e7       	ldi	r24, 0x70	; 112
    a25c:	92 e0       	ldi	r25, 0x02	; 2
    a25e:	8f 93       	push	r24
    a260:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    a264:	8d b7       	in	r24, 0x3d	; 61
    a266:	9e b7       	in	r25, 0x3e	; 62
    a268:	08 96       	adiw	r24, 0x08	; 8
    a26a:	0f b6       	in	r0, 0x3f	; 63
    a26c:	f8 94       	cli
    a26e:	de bf       	out	0x3e, r29	; 62
    a270:	0f be       	out	0x3f, r0	; 63
    a272:	cd bf       	out	0x3d, r28	; 61
				Transmitir_Buffer_USART0 (chBufferRx_USART0, USART0_BUFFER_ZISE);
    a274:	68 ec       	ldi	r22, 0xC8	; 200
    a276:	70 e0       	ldi	r23, 0x00	; 0
    a278:	80 e7       	ldi	r24, 0x70	; 112
    a27a:	92 e0       	ldi	r25, 0x02	; 2
    a27c:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    a280:	87 e0       	ldi	r24, 0x07	; 7
    a282:	90 e0       	ldi	r25, 0x00	; 0
    a284:	88 70       	andi	r24, 0x08	; 8
    a286:	99 27       	eor	r25, r25
    a288:	89 2b       	or	r24, r25
    a28a:	11 f0       	breq	.+4      	; 0xa290 <Terminal+0x16be>
    a28c:	88 e2       	ldi	r24, 0x28	; 40
    a28e:	01 c0       	rjmp	.+2      	; 0xa292 <Terminal+0x16c0>
    a290:	88 e0       	ldi	r24, 0x08	; 8
    a292:	97 e0       	ldi	r25, 0x07	; 7
    a294:	97 70       	andi	r25, 0x07	; 7
    a296:	89 2b       	or	r24, r25
    a298:	98 2f       	mov	r25, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    a29a:	88 e1       	ldi	r24, 0x18	; 24
    a29c:	0f b6       	in	r0, 0x3f	; 63
    a29e:	f8 94       	cli
    a2a0:	a8 95       	wdr
    a2a2:	80 93 60 00 	sts	0x0060, r24
    a2a6:	0f be       	out	0x3f, r0	; 63
    a2a8:	90 93 60 00 	sts	0x0060, r25
				UC_RESET();
    a2ac:	a8 95       	wdr
    a2ae:	ff cf       	rjmp	.-2      	; 0xa2ae <Terminal+0x16dc>
			}

			// chTextoSMS = PRINT\0
			else if (Detectar_Comando_Buffer_P(Comando_Print, chBufferRx_USART0)) {		// comando para dar inicio a la impresion de una variable
    a2b0:	60 e7       	ldi	r22, 0x70	; 112
    a2b2:	72 e0       	ldi	r23, 0x02	; 2
    a2b4:	8d e8       	ldi	r24, 0x8D	; 141
    a2b6:	91 e0       	ldi	r25, 0x01	; 1
    a2b8:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    a2bc:	89 2b       	or	r24, r25
    a2be:	09 f4       	brne	.+2      	; 0xa2c2 <Terminal+0x16f0>
    a2c0:	aa c0       	rjmp	.+340    	; 0xa416 <Terminal+0x1844>
				if (Detectar_Comando_Buffer_P(Comando_Estado, chBufferRx_USART0+auxIndexTerminal)) {
    a2c2:	80 91 95 04 	lds	r24, 0x0495
    a2c6:	90 91 96 04 	lds	r25, 0x0496
    a2ca:	80 59       	subi	r24, 0x90	; 144
    a2cc:	9d 4f       	sbci	r25, 0xFD	; 253
    a2ce:	bc 01       	movw	r22, r24
    a2d0:	84 e9       	ldi	r24, 0x94	; 148
    a2d2:	91 e0       	ldi	r25, 0x01	; 1
    a2d4:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    a2d8:	89 2b       	or	r24, r25
    a2da:	89 f1       	breq	.+98     	; 0xa33e <Terminal+0x176c>
					chPrintEstado = SI;
    a2dc:	81 e0       	ldi	r24, 0x01	; 1
    a2de:	80 93 16 04 	sts	0x0416, r24
					sprintf(chBufferRx_USART0, "%S: %S %S", (wchar_t*)Comando_Print, (wchar_t*)Comando_Estado, (wchar_t*)MSG_Ok);
    a2e2:	8c ee       	ldi	r24, 0xEC	; 236
    a2e4:	91 e0       	ldi	r25, 0x01	; 1
    a2e6:	89 2f       	mov	r24, r25
    a2e8:	8f 93       	push	r24
    a2ea:	8c ee       	ldi	r24, 0xEC	; 236
    a2ec:	91 e0       	ldi	r25, 0x01	; 1
    a2ee:	8f 93       	push	r24
    a2f0:	84 e9       	ldi	r24, 0x94	; 148
    a2f2:	91 e0       	ldi	r25, 0x01	; 1
    a2f4:	89 2f       	mov	r24, r25
    a2f6:	8f 93       	push	r24
    a2f8:	84 e9       	ldi	r24, 0x94	; 148
    a2fa:	91 e0       	ldi	r25, 0x01	; 1
    a2fc:	8f 93       	push	r24
    a2fe:	8d e8       	ldi	r24, 0x8D	; 141
    a300:	91 e0       	ldi	r25, 0x01	; 1
    a302:	89 2f       	mov	r24, r25
    a304:	8f 93       	push	r24
    a306:	8d e8       	ldi	r24, 0x8D	; 141
    a308:	91 e0       	ldi	r25, 0x01	; 1
    a30a:	8f 93       	push	r24
    a30c:	86 e5       	ldi	r24, 0x56	; 86
    a30e:	92 e0       	ldi	r25, 0x02	; 2
    a310:	89 2f       	mov	r24, r25
    a312:	8f 93       	push	r24
    a314:	86 e5       	ldi	r24, 0x56	; 86
    a316:	92 e0       	ldi	r25, 0x02	; 2
    a318:	8f 93       	push	r24
    a31a:	80 e7       	ldi	r24, 0x70	; 112
    a31c:	92 e0       	ldi	r25, 0x02	; 2
    a31e:	89 2f       	mov	r24, r25
    a320:	8f 93       	push	r24
    a322:	80 e7       	ldi	r24, 0x70	; 112
    a324:	92 e0       	ldi	r25, 0x02	; 2
    a326:	8f 93       	push	r24
    a328:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    a32c:	ed b7       	in	r30, 0x3d	; 61
    a32e:	fe b7       	in	r31, 0x3e	; 62
    a330:	3a 96       	adiw	r30, 0x0a	; 10
    a332:	0f b6       	in	r0, 0x3f	; 63
    a334:	f8 94       	cli
    a336:	de bf       	out	0x3e, r29	; 62
    a338:	0f be       	out	0x3f, r0	; 63
    a33a:	cd bf       	out	0x3d, r28	; 61
    a33c:	c5 c0       	rjmp	.+394    	; 0xa4c8 <Terminal+0x18f6>
				}
				else if (Detectar_Comando_Buffer_P(Comando_PID, chBufferRx_USART0+auxIndexTerminal)) {
    a33e:	80 91 95 04 	lds	r24, 0x0495
    a342:	90 91 96 04 	lds	r25, 0x0496
    a346:	80 59       	subi	r24, 0x90	; 144
    a348:	9d 4f       	sbci	r25, 0xFD	; 253
    a34a:	bc 01       	movw	r22, r24
    a34c:	8c e9       	ldi	r24, 0x9C	; 156
    a34e:	91 e0       	ldi	r25, 0x01	; 1
    a350:	0e 94 8d 52 	call	0xa51a	; 0xa51a <Detectar_Comando_Buffer_P>
    a354:	89 2b       	or	r24, r25
    a356:	89 f1       	breq	.+98     	; 0xa3ba <Terminal+0x17e8>
					chPrintPID = SI;
    a358:	81 e0       	ldi	r24, 0x01	; 1
    a35a:	80 93 31 04 	sts	0x0431, r24
					sprintf(chBufferRx_USART0, "%S: %S %S", (wchar_t*)Comando_Print, (wchar_t*)Comando_PID, (wchar_t*)MSG_Ok);
    a35e:	8c ee       	ldi	r24, 0xEC	; 236
    a360:	91 e0       	ldi	r25, 0x01	; 1
    a362:	89 2f       	mov	r24, r25
    a364:	8f 93       	push	r24
    a366:	8c ee       	ldi	r24, 0xEC	; 236
    a368:	91 e0       	ldi	r25, 0x01	; 1
    a36a:	8f 93       	push	r24
    a36c:	8c e9       	ldi	r24, 0x9C	; 156
    a36e:	91 e0       	ldi	r25, 0x01	; 1
    a370:	89 2f       	mov	r24, r25
    a372:	8f 93       	push	r24
    a374:	8c e9       	ldi	r24, 0x9C	; 156
    a376:	91 e0       	ldi	r25, 0x01	; 1
    a378:	8f 93       	push	r24
    a37a:	8d e8       	ldi	r24, 0x8D	; 141
    a37c:	91 e0       	ldi	r25, 0x01	; 1
    a37e:	89 2f       	mov	r24, r25
    a380:	8f 93       	push	r24
    a382:	8d e8       	ldi	r24, 0x8D	; 141
    a384:	91 e0       	ldi	r25, 0x01	; 1
    a386:	8f 93       	push	r24
    a388:	86 e5       	ldi	r24, 0x56	; 86
    a38a:	92 e0       	ldi	r25, 0x02	; 2
    a38c:	89 2f       	mov	r24, r25
    a38e:	8f 93       	push	r24
    a390:	86 e5       	ldi	r24, 0x56	; 86
    a392:	92 e0       	ldi	r25, 0x02	; 2
    a394:	8f 93       	push	r24
    a396:	80 e7       	ldi	r24, 0x70	; 112
    a398:	92 e0       	ldi	r25, 0x02	; 2
    a39a:	89 2f       	mov	r24, r25
    a39c:	8f 93       	push	r24
    a39e:	80 e7       	ldi	r24, 0x70	; 112
    a3a0:	92 e0       	ldi	r25, 0x02	; 2
    a3a2:	8f 93       	push	r24
    a3a4:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    a3a8:	8d b7       	in	r24, 0x3d	; 61
    a3aa:	9e b7       	in	r25, 0x3e	; 62
    a3ac:	0a 96       	adiw	r24, 0x0a	; 10
    a3ae:	0f b6       	in	r0, 0x3f	; 63
    a3b0:	f8 94       	cli
    a3b2:	de bf       	out	0x3e, r29	; 62
    a3b4:	0f be       	out	0x3f, r0	; 63
    a3b6:	cd bf       	out	0x3d, r28	; 61
    a3b8:	87 c0       	rjmp	.+270    	; 0xa4c8 <Terminal+0x18f6>
				}
				else {
					sprintf(chBufferRx_USART0, "%S: %S %S", (wchar_t*)Comando_Print, (wchar_t*)MSG_Parametro, (wchar_t*)MSG_Desconocido);
    a3ba:	86 ed       	ldi	r24, 0xD6	; 214
    a3bc:	91 e0       	ldi	r25, 0x01	; 1
    a3be:	89 2f       	mov	r24, r25
    a3c0:	8f 93       	push	r24
    a3c2:	86 ed       	ldi	r24, 0xD6	; 214
    a3c4:	91 e0       	ldi	r25, 0x01	; 1
    a3c6:	8f 93       	push	r24
    a3c8:	8b ec       	ldi	r24, 0xCB	; 203
    a3ca:	91 e0       	ldi	r25, 0x01	; 1
    a3cc:	89 2f       	mov	r24, r25
    a3ce:	8f 93       	push	r24
    a3d0:	8b ec       	ldi	r24, 0xCB	; 203
    a3d2:	91 e0       	ldi	r25, 0x01	; 1
    a3d4:	8f 93       	push	r24
    a3d6:	8d e8       	ldi	r24, 0x8D	; 141
    a3d8:	91 e0       	ldi	r25, 0x01	; 1
    a3da:	89 2f       	mov	r24, r25
    a3dc:	8f 93       	push	r24
    a3de:	8d e8       	ldi	r24, 0x8D	; 141
    a3e0:	91 e0       	ldi	r25, 0x01	; 1
    a3e2:	8f 93       	push	r24
    a3e4:	86 e5       	ldi	r24, 0x56	; 86
    a3e6:	92 e0       	ldi	r25, 0x02	; 2
    a3e8:	89 2f       	mov	r24, r25
    a3ea:	8f 93       	push	r24
    a3ec:	86 e5       	ldi	r24, 0x56	; 86
    a3ee:	92 e0       	ldi	r25, 0x02	; 2
    a3f0:	8f 93       	push	r24
    a3f2:	80 e7       	ldi	r24, 0x70	; 112
    a3f4:	92 e0       	ldi	r25, 0x02	; 2
    a3f6:	89 2f       	mov	r24, r25
    a3f8:	8f 93       	push	r24
    a3fa:	80 e7       	ldi	r24, 0x70	; 112
    a3fc:	92 e0       	ldi	r25, 0x02	; 2
    a3fe:	8f 93       	push	r24
    a400:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    a404:	ed b7       	in	r30, 0x3d	; 61
    a406:	fe b7       	in	r31, 0x3e	; 62
    a408:	3a 96       	adiw	r30, 0x0a	; 10
    a40a:	0f b6       	in	r0, 0x3f	; 63
    a40c:	f8 94       	cli
    a40e:	de bf       	out	0x3e, r29	; 62
    a410:	0f be       	out	0x3f, r0	; 63
    a412:	cd bf       	out	0x3d, r28	; 61
    a414:	59 c0       	rjmp	.+178    	; 0xa4c8 <Terminal+0x18f6>
			 */


			// chBufferRx_USART0 no contiene un comando conocido
			else {
				if ((chPrintEstado == SI)||(chPrintPID == SI)) {		// si se toca una tecla o entra cualquier cosa corta las impresiones
    a416:	80 91 16 04 	lds	r24, 0x0416
    a41a:	81 30       	cpi	r24, 0x01	; 1
    a41c:	21 f0       	breq	.+8      	; 0xa426 <Terminal+0x1854>
    a41e:	80 91 31 04 	lds	r24, 0x0431
    a422:	81 30       	cpi	r24, 0x01	; 1
    a424:	59 f5       	brne	.+86     	; 0xa47c <Terminal+0x18aa>
					chPrintEstado = NO;
    a426:	10 92 16 04 	sts	0x0416, r1
					chPrintPID = NO;
    a42a:	10 92 31 04 	sts	0x0431, r1
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Print, (wchar_t*)MSG_End);
    a42e:	80 ef       	ldi	r24, 0xF0	; 240
    a430:	91 e0       	ldi	r25, 0x01	; 1
    a432:	89 2f       	mov	r24, r25
    a434:	8f 93       	push	r24
    a436:	80 ef       	ldi	r24, 0xF0	; 240
    a438:	91 e0       	ldi	r25, 0x01	; 1
    a43a:	8f 93       	push	r24
    a43c:	8d e8       	ldi	r24, 0x8D	; 141
    a43e:	91 e0       	ldi	r25, 0x01	; 1
    a440:	89 2f       	mov	r24, r25
    a442:	8f 93       	push	r24
    a444:	8d e8       	ldi	r24, 0x8D	; 141
    a446:	91 e0       	ldi	r25, 0x01	; 1
    a448:	8f 93       	push	r24
    a44a:	8f e4       	ldi	r24, 0x4F	; 79
    a44c:	92 e0       	ldi	r25, 0x02	; 2
    a44e:	89 2f       	mov	r24, r25
    a450:	8f 93       	push	r24
    a452:	8f e4       	ldi	r24, 0x4F	; 79
    a454:	92 e0       	ldi	r25, 0x02	; 2
    a456:	8f 93       	push	r24
    a458:	80 e7       	ldi	r24, 0x70	; 112
    a45a:	92 e0       	ldi	r25, 0x02	; 2
    a45c:	89 2f       	mov	r24, r25
    a45e:	8f 93       	push	r24
    a460:	80 e7       	ldi	r24, 0x70	; 112
    a462:	92 e0       	ldi	r25, 0x02	; 2
    a464:	8f 93       	push	r24
    a466:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    a46a:	8d b7       	in	r24, 0x3d	; 61
    a46c:	9e b7       	in	r25, 0x3e	; 62
    a46e:	08 96       	adiw	r24, 0x08	; 8
    a470:	0f b6       	in	r0, 0x3f	; 63
    a472:	f8 94       	cli
    a474:	de bf       	out	0x3e, r29	; 62
    a476:	0f be       	out	0x3f, r0	; 63
    a478:	cd bf       	out	0x3d, r28	; 61
    a47a:	26 c0       	rjmp	.+76     	; 0xa4c8 <Terminal+0x18f6>
				}
				else {
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)MSG_Comando, (wchar_t*)MSG_Desconocido);
    a47c:	86 ed       	ldi	r24, 0xD6	; 214
    a47e:	91 e0       	ldi	r25, 0x01	; 1
    a480:	89 2f       	mov	r24, r25
    a482:	8f 93       	push	r24
    a484:	86 ed       	ldi	r24, 0xD6	; 214
    a486:	91 e0       	ldi	r25, 0x01	; 1
    a488:	8f 93       	push	r24
    a48a:	82 ec       	ldi	r24, 0xC2	; 194
    a48c:	91 e0       	ldi	r25, 0x01	; 1
    a48e:	89 2f       	mov	r24, r25
    a490:	8f 93       	push	r24
    a492:	82 ec       	ldi	r24, 0xC2	; 194
    a494:	91 e0       	ldi	r25, 0x01	; 1
    a496:	8f 93       	push	r24
    a498:	8f e4       	ldi	r24, 0x4F	; 79
    a49a:	92 e0       	ldi	r25, 0x02	; 2
    a49c:	89 2f       	mov	r24, r25
    a49e:	8f 93       	push	r24
    a4a0:	8f e4       	ldi	r24, 0x4F	; 79
    a4a2:	92 e0       	ldi	r25, 0x02	; 2
    a4a4:	8f 93       	push	r24
    a4a6:	80 e7       	ldi	r24, 0x70	; 112
    a4a8:	92 e0       	ldi	r25, 0x02	; 2
    a4aa:	89 2f       	mov	r24, r25
    a4ac:	8f 93       	push	r24
    a4ae:	80 e7       	ldi	r24, 0x70	; 112
    a4b0:	92 e0       	ldi	r25, 0x02	; 2
    a4b2:	8f 93       	push	r24
    a4b4:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    a4b8:	ed b7       	in	r30, 0x3d	; 61
    a4ba:	fe b7       	in	r31, 0x3e	; 62
    a4bc:	38 96       	adiw	r30, 0x08	; 8
    a4be:	0f b6       	in	r0, 0x3f	; 63
    a4c0:	f8 94       	cli
    a4c2:	de bf       	out	0x3e, r29	; 62
    a4c4:	0f be       	out	0x3f, r0	; 63
    a4c6:	cd bf       	out	0x3d, r28	; 61
				}
			}

			Transmitir_Buffer_USART0 (chBufferRx_USART0, USART0_BUFFER_ZISE);
    a4c8:	68 ec       	ldi	r22, 0xC8	; 200
    a4ca:	70 e0       	ldi	r23, 0x00	; 0
    a4cc:	80 e7       	ldi	r24, 0x70	; 112
    a4ce:	92 e0       	ldi	r25, 0x02	; 2
    a4d0:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>
			Transmitir_Buffer_USART0_P (PSTR("\n\r\0"));
    a4d4:	83 e1       	ldi	r24, 0x13	; 19
    a4d6:	92 e0       	ldi	r25, 0x02	; 2
    a4d8:	0e 94 52 05 	call	0xaa4	; 0xaa4 <Transmitir_Buffer_USART0_P>

			auxIndexTerminal = 0;
    a4dc:	10 92 96 04 	sts	0x0496, r1
    a4e0:	10 92 95 04 	sts	0x0495, r1
			uchEstadoBufferRx_USART0 = VACIO;											// libero el buffer de recepcion
    a4e4:	10 92 40 03 	sts	0x0340, r1
			uchEstadoTerminal = TERMINAL_STANDBY;
    a4e8:	10 92 94 04 	sts	0x0494, r1
			break;
    a4ec:	0d c0       	rjmp	.+26     	; 0xa508 <Terminal+0x1936>


		default:
			auxIndexTerminal = 0;
    a4ee:	10 92 96 04 	sts	0x0496, r1
    a4f2:	10 92 95 04 	sts	0x0495, r1
			Transmitir_Buffer_USART0_P (PSTR("\n\r\0"));
    a4f6:	87 e1       	ldi	r24, 0x17	; 23
    a4f8:	92 e0       	ldi	r25, 0x02	; 2
    a4fa:	0e 94 52 05 	call	0xaa4	; 0xaa4 <Transmitir_Buffer_USART0_P>
			uchEstadoBufferRx_USART0 = VACIO;											// libero el buffer de recepcion
    a4fe:	10 92 40 03 	sts	0x0340, r1
			uchEstadoTerminal = TERMINAL_STANDBY;
    a502:	10 92 94 04 	sts	0x0494, r1
			break;
    a506:	00 00       	nop
	}
}
    a508:	0f 90       	pop	r0
    a50a:	0f 90       	pop	r0
    a50c:	0f 90       	pop	r0
    a50e:	0f 90       	pop	r0
    a510:	df 91       	pop	r29
    a512:	cf 91       	pop	r28
    a514:	1f 91       	pop	r17
    a516:	0f 91       	pop	r16
    a518:	08 95       	ret

0000a51a <Detectar_Comando_Buffer_P>:

/************************************************************************
* Funcion que reconoce un comando en el inicio de un mesaje recibido y modifica el index de la terminal solo si detecta
************************************************************************/
int Detectar_Comando_Buffer_P (const char *chBufferOriginalPtr, char *chBufferRecibidoPtr) {
    a51a:	cf 93       	push	r28
    a51c:	df 93       	push	r29
    a51e:	cd b7       	in	r28, 0x3d	; 61
    a520:	de b7       	in	r29, 0x3e	; 62
    a522:	2e 97       	sbiw	r28, 0x0e	; 14
    a524:	0f b6       	in	r0, 0x3f	; 63
    a526:	f8 94       	cli
    a528:	de bf       	out	0x3e, r29	; 62
    a52a:	0f be       	out	0x3f, r0	; 63
    a52c:	cd bf       	out	0x3d, r28	; 61
    a52e:	9c 87       	std	Y+12, r25	; 0x0c
    a530:	8b 87       	std	Y+11, r24	; 0x0b
    a532:	7e 87       	std	Y+14, r23	; 0x0e
    a534:	6d 87       	std	Y+13, r22	; 0x0d
	int i = 0, endIndex = 0;
    a536:	1a 82       	std	Y+2, r1	; 0x02
    a538:	19 82       	std	Y+1, r1	; 0x01
    a53a:	1c 82       	std	Y+4, r1	; 0x04
    a53c:	1b 82       	std	Y+3, r1	; 0x03
	while ((*(chBufferRecibidoPtr+endIndex) == '\n') || (*(chBufferRecibidoPtr+endIndex) == '\r'))	// si lo recibido comienza con \n o \r lo salto
    a53e:	05 c0       	rjmp	.+10     	; 0xa54a <Detectar_Comando_Buffer_P+0x30>
		endIndex++;
    a540:	8b 81       	ldd	r24, Y+3	; 0x03
    a542:	9c 81       	ldd	r25, Y+4	; 0x04
    a544:	01 96       	adiw	r24, 0x01	; 1
    a546:	9c 83       	std	Y+4, r25	; 0x04
    a548:	8b 83       	std	Y+3, r24	; 0x03
/************************************************************************
* Funcion que reconoce un comando en el inicio de un mesaje recibido y modifica el index de la terminal solo si detecta
************************************************************************/
int Detectar_Comando_Buffer_P (const char *chBufferOriginalPtr, char *chBufferRecibidoPtr) {
	int i = 0, endIndex = 0;
	while ((*(chBufferRecibidoPtr+endIndex) == '\n') || (*(chBufferRecibidoPtr+endIndex) == '\r'))	// si lo recibido comienza con \n o \r lo salto
    a54a:	8b 81       	ldd	r24, Y+3	; 0x03
    a54c:	9c 81       	ldd	r25, Y+4	; 0x04
    a54e:	2d 85       	ldd	r18, Y+13	; 0x0d
    a550:	3e 85       	ldd	r19, Y+14	; 0x0e
    a552:	82 0f       	add	r24, r18
    a554:	93 1f       	adc	r25, r19
    a556:	fc 01       	movw	r30, r24
    a558:	80 81       	ld	r24, Z
    a55a:	8a 30       	cpi	r24, 0x0A	; 10
    a55c:	89 f3       	breq	.-30     	; 0xa540 <Detectar_Comando_Buffer_P+0x26>
    a55e:	8b 81       	ldd	r24, Y+3	; 0x03
    a560:	9c 81       	ldd	r25, Y+4	; 0x04
    a562:	2d 85       	ldd	r18, Y+13	; 0x0d
    a564:	3e 85       	ldd	r19, Y+14	; 0x0e
    a566:	82 0f       	add	r24, r18
    a568:	93 1f       	adc	r25, r19
    a56a:	fc 01       	movw	r30, r24
    a56c:	80 81       	ld	r24, Z
    a56e:	8d 30       	cpi	r24, 0x0D	; 13
    a570:	39 f3       	breq	.-50     	; 0xa540 <Detectar_Comando_Buffer_P+0x26>
		endIndex++;

	while (pgm_read_byte(chBufferOriginalPtr+i) != '\0') {								// Comparo lo recibido
    a572:	25 c0       	rjmp	.+74     	; 0xa5be <Detectar_Comando_Buffer_P+0xa4>
		if (pgm_read_byte(chBufferOriginalPtr+i) != *(chBufferRecibidoPtr+endIndex)) {	// verifico que coincidan
    a574:	89 81       	ldd	r24, Y+1	; 0x01
    a576:	9a 81       	ldd	r25, Y+2	; 0x02
    a578:	2b 85       	ldd	r18, Y+11	; 0x0b
    a57a:	3c 85       	ldd	r19, Y+12	; 0x0c
    a57c:	82 0f       	add	r24, r18
    a57e:	93 1f       	adc	r25, r19
    a580:	99 87       	std	Y+9, r25	; 0x09
    a582:	88 87       	std	Y+8, r24	; 0x08
    a584:	88 85       	ldd	r24, Y+8	; 0x08
    a586:	99 85       	ldd	r25, Y+9	; 0x09
    a588:	fc 01       	movw	r30, r24
    a58a:	84 91       	lpm	r24, Z
    a58c:	8a 87       	std	Y+10, r24	; 0x0a
    a58e:	4a 85       	ldd	r20, Y+10	; 0x0a
    a590:	8b 81       	ldd	r24, Y+3	; 0x03
    a592:	9c 81       	ldd	r25, Y+4	; 0x04
    a594:	2d 85       	ldd	r18, Y+13	; 0x0d
    a596:	3e 85       	ldd	r19, Y+14	; 0x0e
    a598:	82 0f       	add	r24, r18
    a59a:	93 1f       	adc	r25, r19
    a59c:	fc 01       	movw	r30, r24
    a59e:	80 81       	ld	r24, Z
    a5a0:	48 17       	cp	r20, r24
    a5a2:	19 f0       	breq	.+6      	; 0xa5aa <Detectar_Comando_Buffer_P+0x90>
			endIndex=0;
    a5a4:	1c 82       	std	Y+4, r1	; 0x04
    a5a6:	1b 82       	std	Y+3, r1	; 0x03
			break;
    a5a8:	1a c0       	rjmp	.+52     	; 0xa5de <Detectar_Comando_Buffer_P+0xc4>
		}
		i++;
    a5aa:	89 81       	ldd	r24, Y+1	; 0x01
    a5ac:	9a 81       	ldd	r25, Y+2	; 0x02
    a5ae:	01 96       	adiw	r24, 0x01	; 1
    a5b0:	9a 83       	std	Y+2, r25	; 0x02
    a5b2:	89 83       	std	Y+1, r24	; 0x01
		endIndex++;
    a5b4:	8b 81       	ldd	r24, Y+3	; 0x03
    a5b6:	9c 81       	ldd	r25, Y+4	; 0x04
    a5b8:	01 96       	adiw	r24, 0x01	; 1
    a5ba:	9c 83       	std	Y+4, r25	; 0x04
    a5bc:	8b 83       	std	Y+3, r24	; 0x03
int Detectar_Comando_Buffer_P (const char *chBufferOriginalPtr, char *chBufferRecibidoPtr) {
	int i = 0, endIndex = 0;
	while ((*(chBufferRecibidoPtr+endIndex) == '\n') || (*(chBufferRecibidoPtr+endIndex) == '\r'))	// si lo recibido comienza con \n o \r lo salto
		endIndex++;

	while (pgm_read_byte(chBufferOriginalPtr+i) != '\0') {								// Comparo lo recibido
    a5be:	89 81       	ldd	r24, Y+1	; 0x01
    a5c0:	9a 81       	ldd	r25, Y+2	; 0x02
    a5c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    a5c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    a5c6:	82 0f       	add	r24, r18
    a5c8:	93 1f       	adc	r25, r19
    a5ca:	9e 83       	std	Y+6, r25	; 0x06
    a5cc:	8d 83       	std	Y+5, r24	; 0x05
    a5ce:	8d 81       	ldd	r24, Y+5	; 0x05
    a5d0:	9e 81       	ldd	r25, Y+6	; 0x06
    a5d2:	fc 01       	movw	r30, r24
    a5d4:	84 91       	lpm	r24, Z
    a5d6:	8f 83       	std	Y+7, r24	; 0x07
    a5d8:	8f 81       	ldd	r24, Y+7	; 0x07
    a5da:	88 23       	and	r24, r24
    a5dc:	59 f6       	brne	.-106    	; 0xa574 <Detectar_Comando_Buffer_P+0x5a>
		}
		i++;
		endIndex++;
	}
	// si detecte...
	if (endIndex != 0){
    a5de:	8b 81       	ldd	r24, Y+3	; 0x03
    a5e0:	9c 81       	ldd	r25, Y+4	; 0x04
    a5e2:	89 2b       	or	r24, r25
    a5e4:	a9 f0       	breq	.+42     	; 0xa610 <Detectar_Comando_Buffer_P+0xf6>
		// si hay un espacio
		if(*(chBufferRecibidoPtr+endIndex) == ' '){
    a5e6:	8b 81       	ldd	r24, Y+3	; 0x03
    a5e8:	9c 81       	ldd	r25, Y+4	; 0x04
    a5ea:	2d 85       	ldd	r18, Y+13	; 0x0d
    a5ec:	3e 85       	ldd	r19, Y+14	; 0x0e
    a5ee:	82 0f       	add	r24, r18
    a5f0:	93 1f       	adc	r25, r19
    a5f2:	fc 01       	movw	r30, r24
    a5f4:	80 81       	ld	r24, Z
    a5f6:	80 32       	cpi	r24, 0x20	; 32
    a5f8:	29 f4       	brne	.+10     	; 0xa604 <Detectar_Comando_Buffer_P+0xea>
		endIndex++;
    a5fa:	8b 81       	ldd	r24, Y+3	; 0x03
    a5fc:	9c 81       	ldd	r25, Y+4	; 0x04
    a5fe:	01 96       	adiw	r24, 0x01	; 1
    a600:	9c 83       	std	Y+4, r25	; 0x04
    a602:	8b 83       	std	Y+3, r24	; 0x03
		}
		auxIndexTerminal=endIndex;	//modifica el index de la terminal solo si detecta
    a604:	8b 81       	ldd	r24, Y+3	; 0x03
    a606:	9c 81       	ldd	r25, Y+4	; 0x04
    a608:	90 93 96 04 	sts	0x0496, r25
    a60c:	80 93 95 04 	sts	0x0495, r24
	}
	return endIndex;
    a610:	8b 81       	ldd	r24, Y+3	; 0x03
    a612:	9c 81       	ldd	r25, Y+4	; 0x04
}
    a614:	2e 96       	adiw	r28, 0x0e	; 14
    a616:	0f b6       	in	r0, 0x3f	; 63
    a618:	f8 94       	cli
    a61a:	de bf       	out	0x3e, r29	; 62
    a61c:	0f be       	out	0x3f, r0	; 63
    a61e:	cd bf       	out	0x3d, r28	; 61
    a620:	df 91       	pop	r29
    a622:	cf 91       	pop	r28
    a624:	08 95       	ret

0000a626 <Inicio_Terminal>:

/*****************************************************************************
* Funcion de inicio
*****************************************************************************/
void Inicio_Terminal (void) {
    a626:	cf 93       	push	r28
    a628:	df 93       	push	r29
    a62a:	cd b7       	in	r28, 0x3d	; 61
    a62c:	de b7       	in	r29, 0x3e	; 62
	uchEstadoTerminal = TERMINAL_STANDBY;
    a62e:	10 92 94 04 	sts	0x0494, r1

	sprintf(chBufferRx_USART0, "%S", (wchar_t*)MSG_Terminal_Lista);
    a632:	8c ef       	ldi	r24, 0xFC	; 252
    a634:	91 e0       	ldi	r25, 0x01	; 1
    a636:	89 2f       	mov	r24, r25
    a638:	8f 93       	push	r24
    a63a:	8c ef       	ldi	r24, 0xFC	; 252
    a63c:	91 e0       	ldi	r25, 0x01	; 1
    a63e:	8f 93       	push	r24
    a640:	80 e6       	ldi	r24, 0x60	; 96
    a642:	92 e0       	ldi	r25, 0x02	; 2
    a644:	89 2f       	mov	r24, r25
    a646:	8f 93       	push	r24
    a648:	80 e6       	ldi	r24, 0x60	; 96
    a64a:	92 e0       	ldi	r25, 0x02	; 2
    a64c:	8f 93       	push	r24
    a64e:	80 e7       	ldi	r24, 0x70	; 112
    a650:	92 e0       	ldi	r25, 0x02	; 2
    a652:	89 2f       	mov	r24, r25
    a654:	8f 93       	push	r24
    a656:	80 e7       	ldi	r24, 0x70	; 112
    a658:	92 e0       	ldi	r25, 0x02	; 2
    a65a:	8f 93       	push	r24
    a65c:	0e 94 eb 58 	call	0xb1d6	; 0xb1d6 <sprintf>
    a660:	0f 90       	pop	r0
    a662:	0f 90       	pop	r0
    a664:	0f 90       	pop	r0
    a666:	0f 90       	pop	r0
    a668:	0f 90       	pop	r0
    a66a:	0f 90       	pop	r0
	Transmitir_Buffer_USART0 (chBufferRx_USART0, USART0_BUFFER_ZISE);
    a66c:	68 ec       	ldi	r22, 0xC8	; 200
    a66e:	70 e0       	ldi	r23, 0x00	; 0
    a670:	80 e7       	ldi	r24, 0x70	; 112
    a672:	92 e0       	ldi	r25, 0x02	; 2
    a674:	0e 94 13 05 	call	0xa26	; 0xa26 <Transmitir_Buffer_USART0>
}
    a678:	df 91       	pop	r29
    a67a:	cf 91       	pop	r28
    a67c:	08 95       	ret

0000a67e <Buscar_en_Buffer_P>:
#include <stdlib.h>

/**************************************************************************
* Funcion que busca un string de memoria de programa dentro de uno en RAM
***************************************************************************/
char Buscar_en_Buffer_P (const char *chBufferOriginalPtr, char *chBufferRecibidoPtr, int bufferRecibidoZise) {
    a67e:	cf 93       	push	r28
    a680:	df 93       	push	r29
    a682:	cd b7       	in	r28, 0x3d	; 61
    a684:	de b7       	in	r29, 0x3e	; 62
    a686:	64 97       	sbiw	r28, 0x14	; 20
    a688:	0f b6       	in	r0, 0x3f	; 63
    a68a:	f8 94       	cli
    a68c:	de bf       	out	0x3e, r29	; 62
    a68e:	0f be       	out	0x3f, r0	; 63
    a690:	cd bf       	out	0x3d, r28	; 61
    a692:	98 8b       	std	Y+16, r25	; 0x10
    a694:	8f 87       	std	Y+15, r24	; 0x0f
    a696:	7a 8b       	std	Y+18, r23	; 0x12
    a698:	69 8b       	std	Y+17, r22	; 0x11
    a69a:	5c 8b       	std	Y+20, r21	; 0x14
    a69c:	4b 8b       	std	Y+19, r20	; 0x13

	char chError=ERROR;
    a69e:	81 e0       	ldi	r24, 0x01	; 1
    a6a0:	89 83       	std	Y+1, r24	; 0x01
	int i = 0, j = 0;
    a6a2:	1b 82       	std	Y+3, r1	; 0x03
    a6a4:	1a 82       	std	Y+2, r1	; 0x02
    a6a6:	1d 82       	std	Y+5, r1	; 0x05
    a6a8:	1c 82       	std	Y+4, r1	; 0x04

	while ((*(chBufferRecibidoPtr+i) != '\0') && (i < bufferRecibidoZise) && (pgm_read_byte(chBufferOriginalPtr+j) != '\0')) {	// Comparo lo recibido
    a6aa:	38 c0       	rjmp	.+112    	; 0xa71c <Buscar_en_Buffer_P+0x9e>

		if (pgm_read_byte(chBufferOriginalPtr+j) != *(chBufferRecibidoPtr+i)) {				// verifico que coincidan
    a6ac:	8c 81       	ldd	r24, Y+4	; 0x04
    a6ae:	9d 81       	ldd	r25, Y+5	; 0x05
    a6b0:	2f 85       	ldd	r18, Y+15	; 0x0f
    a6b2:	38 89       	ldd	r19, Y+16	; 0x10
    a6b4:	82 0f       	add	r24, r18
    a6b6:	93 1f       	adc	r25, r19
    a6b8:	9a 87       	std	Y+10, r25	; 0x0a
    a6ba:	89 87       	std	Y+9, r24	; 0x09
    a6bc:	89 85       	ldd	r24, Y+9	; 0x09
    a6be:	9a 85       	ldd	r25, Y+10	; 0x0a
    a6c0:	fc 01       	movw	r30, r24
    a6c2:	84 91       	lpm	r24, Z
    a6c4:	8b 87       	std	Y+11, r24	; 0x0b
    a6c6:	4b 85       	ldd	r20, Y+11	; 0x0b
    a6c8:	8a 81       	ldd	r24, Y+2	; 0x02
    a6ca:	9b 81       	ldd	r25, Y+3	; 0x03
    a6cc:	29 89       	ldd	r18, Y+17	; 0x11
    a6ce:	3a 89       	ldd	r19, Y+18	; 0x12
    a6d0:	82 0f       	add	r24, r18
    a6d2:	93 1f       	adc	r25, r19
    a6d4:	fc 01       	movw	r30, r24
    a6d6:	80 81       	ld	r24, Z
    a6d8:	48 17       	cp	r20, r24
    a6da:	29 f0       	breq	.+10     	; 0xa6e6 <Buscar_en_Buffer_P+0x68>
			chError = ERROR;
    a6dc:	81 e0       	ldi	r24, 0x01	; 1
    a6de:	89 83       	std	Y+1, r24	; 0x01
			j = 0;
    a6e0:	1d 82       	std	Y+5, r1	; 0x05
    a6e2:	1c 82       	std	Y+4, r1	; 0x04
    a6e4:	16 c0       	rjmp	.+44     	; 0xa712 <Buscar_en_Buffer_P+0x94>
		}
		else {
			j++;
    a6e6:	8c 81       	ldd	r24, Y+4	; 0x04
    a6e8:	9d 81       	ldd	r25, Y+5	; 0x05
    a6ea:	01 96       	adiw	r24, 0x01	; 1
    a6ec:	9d 83       	std	Y+5, r25	; 0x05
    a6ee:	8c 83       	std	Y+4, r24	; 0x04
			if (pgm_read_byte(chBufferOriginalPtr+j) == '\0'){
    a6f0:	8c 81       	ldd	r24, Y+4	; 0x04
    a6f2:	9d 81       	ldd	r25, Y+5	; 0x05
    a6f4:	2f 85       	ldd	r18, Y+15	; 0x0f
    a6f6:	38 89       	ldd	r19, Y+16	; 0x10
    a6f8:	82 0f       	add	r24, r18
    a6fa:	93 1f       	adc	r25, r19
    a6fc:	9d 87       	std	Y+13, r25	; 0x0d
    a6fe:	8c 87       	std	Y+12, r24	; 0x0c
    a700:	8c 85       	ldd	r24, Y+12	; 0x0c
    a702:	9d 85       	ldd	r25, Y+13	; 0x0d
    a704:	fc 01       	movw	r30, r24
    a706:	84 91       	lpm	r24, Z
    a708:	8e 87       	std	Y+14, r24	; 0x0e
    a70a:	8e 85       	ldd	r24, Y+14	; 0x0e
    a70c:	88 23       	and	r24, r24
    a70e:	09 f4       	brne	.+2      	; 0xa712 <Buscar_en_Buffer_P+0x94>
				chError = OK;
    a710:	19 82       	std	Y+1, r1	; 0x01
			}
		}

		i++;
    a712:	8a 81       	ldd	r24, Y+2	; 0x02
    a714:	9b 81       	ldd	r25, Y+3	; 0x03
    a716:	01 96       	adiw	r24, 0x01	; 1
    a718:	9b 83       	std	Y+3, r25	; 0x03
    a71a:	8a 83       	std	Y+2, r24	; 0x02
char Buscar_en_Buffer_P (const char *chBufferOriginalPtr, char *chBufferRecibidoPtr, int bufferRecibidoZise) {

	char chError=ERROR;
	int i = 0, j = 0;

	while ((*(chBufferRecibidoPtr+i) != '\0') && (i < bufferRecibidoZise) && (pgm_read_byte(chBufferOriginalPtr+j) != '\0')) {	// Comparo lo recibido
    a71c:	8a 81       	ldd	r24, Y+2	; 0x02
    a71e:	9b 81       	ldd	r25, Y+3	; 0x03
    a720:	29 89       	ldd	r18, Y+17	; 0x11
    a722:	3a 89       	ldd	r19, Y+18	; 0x12
    a724:	82 0f       	add	r24, r18
    a726:	93 1f       	adc	r25, r19
    a728:	fc 01       	movw	r30, r24
    a72a:	80 81       	ld	r24, Z
    a72c:	88 23       	and	r24, r24
    a72e:	c1 f0       	breq	.+48     	; 0xa760 <Buscar_en_Buffer_P+0xe2>
    a730:	2a 81       	ldd	r18, Y+2	; 0x02
    a732:	3b 81       	ldd	r19, Y+3	; 0x03
    a734:	8b 89       	ldd	r24, Y+19	; 0x13
    a736:	9c 89       	ldd	r25, Y+20	; 0x14
    a738:	28 17       	cp	r18, r24
    a73a:	39 07       	cpc	r19, r25
    a73c:	8c f4       	brge	.+34     	; 0xa760 <Buscar_en_Buffer_P+0xe2>
    a73e:	8c 81       	ldd	r24, Y+4	; 0x04
    a740:	9d 81       	ldd	r25, Y+5	; 0x05
    a742:	2f 85       	ldd	r18, Y+15	; 0x0f
    a744:	38 89       	ldd	r19, Y+16	; 0x10
    a746:	82 0f       	add	r24, r18
    a748:	93 1f       	adc	r25, r19
    a74a:	9f 83       	std	Y+7, r25	; 0x07
    a74c:	8e 83       	std	Y+6, r24	; 0x06
    a74e:	8e 81       	ldd	r24, Y+6	; 0x06
    a750:	9f 81       	ldd	r25, Y+7	; 0x07
    a752:	fc 01       	movw	r30, r24
    a754:	84 91       	lpm	r24, Z
    a756:	88 87       	std	Y+8, r24	; 0x08
    a758:	88 85       	ldd	r24, Y+8	; 0x08
    a75a:	88 23       	and	r24, r24
    a75c:	09 f0       	breq	.+2      	; 0xa760 <Buscar_en_Buffer_P+0xe2>
    a75e:	a6 cf       	rjmp	.-180    	; 0xa6ac <Buscar_en_Buffer_P+0x2e>
			}
		}

		i++;
	}
	return chError;
    a760:	89 81       	ldd	r24, Y+1	; 0x01
}
    a762:	64 96       	adiw	r28, 0x14	; 20
    a764:	0f b6       	in	r0, 0x3f	; 63
    a766:	f8 94       	cli
    a768:	de bf       	out	0x3e, r29	; 62
    a76a:	0f be       	out	0x3f, r0	; 63
    a76c:	cd bf       	out	0x3d, r28	; 61
    a76e:	df 91       	pop	r29
    a770:	cf 91       	pop	r28
    a772:	08 95       	ret

0000a774 <Buscar_en_Buffer>:

/**************************************************************************
* Funcion que busca un string de memoria ram dentro de uno en RAM
***************************************************************************/
char Buscar_en_Buffer (char *chBufferOriginalPtr, char *chBufferRecibidoPtr, int bufferRecibidoZise) {
    a774:	cf 93       	push	r28
    a776:	df 93       	push	r29
    a778:	cd b7       	in	r28, 0x3d	; 61
    a77a:	de b7       	in	r29, 0x3e	; 62
    a77c:	2b 97       	sbiw	r28, 0x0b	; 11
    a77e:	0f b6       	in	r0, 0x3f	; 63
    a780:	f8 94       	cli
    a782:	de bf       	out	0x3e, r29	; 62
    a784:	0f be       	out	0x3f, r0	; 63
    a786:	cd bf       	out	0x3d, r28	; 61
    a788:	9f 83       	std	Y+7, r25	; 0x07
    a78a:	8e 83       	std	Y+6, r24	; 0x06
    a78c:	79 87       	std	Y+9, r23	; 0x09
    a78e:	68 87       	std	Y+8, r22	; 0x08
    a790:	5b 87       	std	Y+11, r21	; 0x0b
    a792:	4a 87       	std	Y+10, r20	; 0x0a

	char chError=ERROR;
    a794:	81 e0       	ldi	r24, 0x01	; 1
    a796:	89 83       	std	Y+1, r24	; 0x01
	int i = 0, j = 0;
    a798:	1b 82       	std	Y+3, r1	; 0x03
    a79a:	1a 82       	std	Y+2, r1	; 0x02
    a79c:	1d 82       	std	Y+5, r1	; 0x05
    a79e:	1c 82       	std	Y+4, r1	; 0x04

	while ((*(chBufferRecibidoPtr+i) != '\0') && (i < bufferRecibidoZise-1) && (*(chBufferOriginalPtr+j) != '\0')) {	// Comparo lo recibido
    a7a0:	2c c0       	rjmp	.+88     	; 0xa7fa <Buscar_en_Buffer+0x86>

		if (*(chBufferOriginalPtr+j) != *(chBufferRecibidoPtr+i)) {				// verifico que coincidan
    a7a2:	8c 81       	ldd	r24, Y+4	; 0x04
    a7a4:	9d 81       	ldd	r25, Y+5	; 0x05
    a7a6:	2e 81       	ldd	r18, Y+6	; 0x06
    a7a8:	3f 81       	ldd	r19, Y+7	; 0x07
    a7aa:	82 0f       	add	r24, r18
    a7ac:	93 1f       	adc	r25, r19
    a7ae:	fc 01       	movw	r30, r24
    a7b0:	40 81       	ld	r20, Z
    a7b2:	8a 81       	ldd	r24, Y+2	; 0x02
    a7b4:	9b 81       	ldd	r25, Y+3	; 0x03
    a7b6:	28 85       	ldd	r18, Y+8	; 0x08
    a7b8:	39 85       	ldd	r19, Y+9	; 0x09
    a7ba:	82 0f       	add	r24, r18
    a7bc:	93 1f       	adc	r25, r19
    a7be:	fc 01       	movw	r30, r24
    a7c0:	80 81       	ld	r24, Z
    a7c2:	48 17       	cp	r20, r24
    a7c4:	29 f0       	breq	.+10     	; 0xa7d0 <Buscar_en_Buffer+0x5c>
			chError = ERROR;
    a7c6:	81 e0       	ldi	r24, 0x01	; 1
    a7c8:	89 83       	std	Y+1, r24	; 0x01
			j = 0;
    a7ca:	1d 82       	std	Y+5, r1	; 0x05
    a7cc:	1c 82       	std	Y+4, r1	; 0x04
    a7ce:	10 c0       	rjmp	.+32     	; 0xa7f0 <Buscar_en_Buffer+0x7c>
		}
		else {
			j++;
    a7d0:	8c 81       	ldd	r24, Y+4	; 0x04
    a7d2:	9d 81       	ldd	r25, Y+5	; 0x05
    a7d4:	01 96       	adiw	r24, 0x01	; 1
    a7d6:	9d 83       	std	Y+5, r25	; 0x05
    a7d8:	8c 83       	std	Y+4, r24	; 0x04
			if (*(chBufferOriginalPtr+j) == '\0'){
    a7da:	8c 81       	ldd	r24, Y+4	; 0x04
    a7dc:	9d 81       	ldd	r25, Y+5	; 0x05
    a7de:	2e 81       	ldd	r18, Y+6	; 0x06
    a7e0:	3f 81       	ldd	r19, Y+7	; 0x07
    a7e2:	82 0f       	add	r24, r18
    a7e4:	93 1f       	adc	r25, r19
    a7e6:	fc 01       	movw	r30, r24
    a7e8:	80 81       	ld	r24, Z
    a7ea:	88 23       	and	r24, r24
    a7ec:	09 f4       	brne	.+2      	; 0xa7f0 <Buscar_en_Buffer+0x7c>
				chError = OK;
    a7ee:	19 82       	std	Y+1, r1	; 0x01
			}
		}

		i++;
    a7f0:	8a 81       	ldd	r24, Y+2	; 0x02
    a7f2:	9b 81       	ldd	r25, Y+3	; 0x03
    a7f4:	01 96       	adiw	r24, 0x01	; 1
    a7f6:	9b 83       	std	Y+3, r25	; 0x03
    a7f8:	8a 83       	std	Y+2, r24	; 0x02
char Buscar_en_Buffer (char *chBufferOriginalPtr, char *chBufferRecibidoPtr, int bufferRecibidoZise) {

	char chError=ERROR;
	int i = 0, j = 0;

	while ((*(chBufferRecibidoPtr+i) != '\0') && (i < bufferRecibidoZise-1) && (*(chBufferOriginalPtr+j) != '\0')) {	// Comparo lo recibido
    a7fa:	8a 81       	ldd	r24, Y+2	; 0x02
    a7fc:	9b 81       	ldd	r25, Y+3	; 0x03
    a7fe:	28 85       	ldd	r18, Y+8	; 0x08
    a800:	39 85       	ldd	r19, Y+9	; 0x09
    a802:	82 0f       	add	r24, r18
    a804:	93 1f       	adc	r25, r19
    a806:	fc 01       	movw	r30, r24
    a808:	80 81       	ld	r24, Z
    a80a:	88 23       	and	r24, r24
    a80c:	a9 f0       	breq	.+42     	; 0xa838 <Buscar_en_Buffer+0xc4>
    a80e:	8a 85       	ldd	r24, Y+10	; 0x0a
    a810:	9b 85       	ldd	r25, Y+11	; 0x0b
    a812:	9c 01       	movw	r18, r24
    a814:	21 50       	subi	r18, 0x01	; 1
    a816:	31 09       	sbc	r19, r1
    a818:	8a 81       	ldd	r24, Y+2	; 0x02
    a81a:	9b 81       	ldd	r25, Y+3	; 0x03
    a81c:	82 17       	cp	r24, r18
    a81e:	93 07       	cpc	r25, r19
    a820:	5c f4       	brge	.+22     	; 0xa838 <Buscar_en_Buffer+0xc4>
    a822:	8c 81       	ldd	r24, Y+4	; 0x04
    a824:	9d 81       	ldd	r25, Y+5	; 0x05
    a826:	2e 81       	ldd	r18, Y+6	; 0x06
    a828:	3f 81       	ldd	r19, Y+7	; 0x07
    a82a:	82 0f       	add	r24, r18
    a82c:	93 1f       	adc	r25, r19
    a82e:	fc 01       	movw	r30, r24
    a830:	80 81       	ld	r24, Z
    a832:	88 23       	and	r24, r24
    a834:	09 f0       	breq	.+2      	; 0xa838 <Buscar_en_Buffer+0xc4>
    a836:	b5 cf       	rjmp	.-150    	; 0xa7a2 <Buscar_en_Buffer+0x2e>
			}
		}

		i++;
	}
	return chError;
    a838:	89 81       	ldd	r24, Y+1	; 0x01
}
    a83a:	2b 96       	adiw	r28, 0x0b	; 11
    a83c:	0f b6       	in	r0, 0x3f	; 63
    a83e:	f8 94       	cli
    a840:	de bf       	out	0x3e, r29	; 62
    a842:	0f be       	out	0x3f, r0	; 63
    a844:	cd bf       	out	0x3d, r28	; 61
    a846:	df 91       	pop	r29
    a848:	cf 91       	pop	r28
    a84a:	08 95       	ret

0000a84c <Comparar_Inicio_Buffer_P>:

/************************************************************************
* Funcion que reconoce el inicio de un mesaje recibido
************************************************************************/
char Comparar_Inicio_Buffer_P (const char *chBufferOriginalPtr, char *chBufferRecibidoPtr) {
    a84c:	cf 93       	push	r28
    a84e:	df 93       	push	r29
    a850:	cd b7       	in	r28, 0x3d	; 61
    a852:	de b7       	in	r29, 0x3e	; 62
    a854:	2f 97       	sbiw	r28, 0x0f	; 15
    a856:	0f b6       	in	r0, 0x3f	; 63
    a858:	f8 94       	cli
    a85a:	de bf       	out	0x3e, r29	; 62
    a85c:	0f be       	out	0x3f, r0	; 63
    a85e:	cd bf       	out	0x3d, r28	; 61
    a860:	9d 87       	std	Y+13, r25	; 0x0d
    a862:	8c 87       	std	Y+12, r24	; 0x0c
    a864:	7f 87       	std	Y+15, r23	; 0x0f
    a866:	6e 87       	std	Y+14, r22	; 0x0e

	char chError = OK;
    a868:	19 82       	std	Y+1, r1	; 0x01
	int i = 0, j = 0;
    a86a:	1b 82       	std	Y+3, r1	; 0x03
    a86c:	1a 82       	std	Y+2, r1	; 0x02
    a86e:	1d 82       	std	Y+5, r1	; 0x05
    a870:	1c 82       	std	Y+4, r1	; 0x04

	while ((*(chBufferRecibidoPtr+j) == '\n') || (*(chBufferRecibidoPtr+j) == '\r'))	// si lo recibido comienza con \n o \r lo salto
    a872:	05 c0       	rjmp	.+10     	; 0xa87e <Comparar_Inicio_Buffer_P+0x32>
		j++;
    a874:	8c 81       	ldd	r24, Y+4	; 0x04
    a876:	9d 81       	ldd	r25, Y+5	; 0x05
    a878:	01 96       	adiw	r24, 0x01	; 1
    a87a:	9d 83       	std	Y+5, r25	; 0x05
    a87c:	8c 83       	std	Y+4, r24	; 0x04
char Comparar_Inicio_Buffer_P (const char *chBufferOriginalPtr, char *chBufferRecibidoPtr) {

	char chError = OK;
	int i = 0, j = 0;

	while ((*(chBufferRecibidoPtr+j) == '\n') || (*(chBufferRecibidoPtr+j) == '\r'))	// si lo recibido comienza con \n o \r lo salto
    a87e:	8c 81       	ldd	r24, Y+4	; 0x04
    a880:	9d 81       	ldd	r25, Y+5	; 0x05
    a882:	2e 85       	ldd	r18, Y+14	; 0x0e
    a884:	3f 85       	ldd	r19, Y+15	; 0x0f
    a886:	82 0f       	add	r24, r18
    a888:	93 1f       	adc	r25, r19
    a88a:	fc 01       	movw	r30, r24
    a88c:	80 81       	ld	r24, Z
    a88e:	8a 30       	cpi	r24, 0x0A	; 10
    a890:	89 f3       	breq	.-30     	; 0xa874 <Comparar_Inicio_Buffer_P+0x28>
    a892:	8c 81       	ldd	r24, Y+4	; 0x04
    a894:	9d 81       	ldd	r25, Y+5	; 0x05
    a896:	2e 85       	ldd	r18, Y+14	; 0x0e
    a898:	3f 85       	ldd	r19, Y+15	; 0x0f
    a89a:	82 0f       	add	r24, r18
    a89c:	93 1f       	adc	r25, r19
    a89e:	fc 01       	movw	r30, r24
    a8a0:	80 81       	ld	r24, Z
    a8a2:	8d 30       	cpi	r24, 0x0D	; 13
    a8a4:	39 f3       	breq	.-50     	; 0xa874 <Comparar_Inicio_Buffer_P+0x28>
		j++;

	while (pgm_read_byte(chBufferOriginalPtr+i) != '\0') {								// Comparo lo recibido
    a8a6:	25 c0       	rjmp	.+74     	; 0xa8f2 <Comparar_Inicio_Buffer_P+0xa6>

		if (pgm_read_byte(chBufferOriginalPtr+i) != *(chBufferRecibidoPtr+j)) {			// verifico que coincidan
    a8a8:	8a 81       	ldd	r24, Y+2	; 0x02
    a8aa:	9b 81       	ldd	r25, Y+3	; 0x03
    a8ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    a8ae:	3d 85       	ldd	r19, Y+13	; 0x0d
    a8b0:	82 0f       	add	r24, r18
    a8b2:	93 1f       	adc	r25, r19
    a8b4:	9a 87       	std	Y+10, r25	; 0x0a
    a8b6:	89 87       	std	Y+9, r24	; 0x09
    a8b8:	89 85       	ldd	r24, Y+9	; 0x09
    a8ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    a8bc:	fc 01       	movw	r30, r24
    a8be:	84 91       	lpm	r24, Z
    a8c0:	8b 87       	std	Y+11, r24	; 0x0b
    a8c2:	4b 85       	ldd	r20, Y+11	; 0x0b
    a8c4:	8c 81       	ldd	r24, Y+4	; 0x04
    a8c6:	9d 81       	ldd	r25, Y+5	; 0x05
    a8c8:	2e 85       	ldd	r18, Y+14	; 0x0e
    a8ca:	3f 85       	ldd	r19, Y+15	; 0x0f
    a8cc:	82 0f       	add	r24, r18
    a8ce:	93 1f       	adc	r25, r19
    a8d0:	fc 01       	movw	r30, r24
    a8d2:	80 81       	ld	r24, Z
    a8d4:	48 17       	cp	r20, r24
    a8d6:	19 f0       	breq	.+6      	; 0xa8de <Comparar_Inicio_Buffer_P+0x92>
			chError = ERROR;
    a8d8:	81 e0       	ldi	r24, 0x01	; 1
    a8da:	89 83       	std	Y+1, r24	; 0x01
			break;
    a8dc:	1a c0       	rjmp	.+52     	; 0xa912 <Comparar_Inicio_Buffer_P+0xc6>
		}

		i++;
    a8de:	8a 81       	ldd	r24, Y+2	; 0x02
    a8e0:	9b 81       	ldd	r25, Y+3	; 0x03
    a8e2:	01 96       	adiw	r24, 0x01	; 1
    a8e4:	9b 83       	std	Y+3, r25	; 0x03
    a8e6:	8a 83       	std	Y+2, r24	; 0x02
		j++;
    a8e8:	8c 81       	ldd	r24, Y+4	; 0x04
    a8ea:	9d 81       	ldd	r25, Y+5	; 0x05
    a8ec:	01 96       	adiw	r24, 0x01	; 1
    a8ee:	9d 83       	std	Y+5, r25	; 0x05
    a8f0:	8c 83       	std	Y+4, r24	; 0x04
	int i = 0, j = 0;

	while ((*(chBufferRecibidoPtr+j) == '\n') || (*(chBufferRecibidoPtr+j) == '\r'))	// si lo recibido comienza con \n o \r lo salto
		j++;

	while (pgm_read_byte(chBufferOriginalPtr+i) != '\0') {								// Comparo lo recibido
    a8f2:	8a 81       	ldd	r24, Y+2	; 0x02
    a8f4:	9b 81       	ldd	r25, Y+3	; 0x03
    a8f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    a8f8:	3d 85       	ldd	r19, Y+13	; 0x0d
    a8fa:	82 0f       	add	r24, r18
    a8fc:	93 1f       	adc	r25, r19
    a8fe:	9f 83       	std	Y+7, r25	; 0x07
    a900:	8e 83       	std	Y+6, r24	; 0x06
    a902:	8e 81       	ldd	r24, Y+6	; 0x06
    a904:	9f 81       	ldd	r25, Y+7	; 0x07
    a906:	fc 01       	movw	r30, r24
    a908:	84 91       	lpm	r24, Z
    a90a:	88 87       	std	Y+8, r24	; 0x08
    a90c:	88 85       	ldd	r24, Y+8	; 0x08
    a90e:	88 23       	and	r24, r24
    a910:	59 f6       	brne	.-106    	; 0xa8a8 <Comparar_Inicio_Buffer_P+0x5c>
		}

		i++;
		j++;
	}
	return chError;
    a912:	89 81       	ldd	r24, Y+1	; 0x01
}
    a914:	2f 96       	adiw	r28, 0x0f	; 15
    a916:	0f b6       	in	r0, 0x3f	; 63
    a918:	f8 94       	cli
    a91a:	de bf       	out	0x3e, r29	; 62
    a91c:	0f be       	out	0x3f, r0	; 63
    a91e:	cd bf       	out	0x3d, r28	; 61
    a920:	df 91       	pop	r29
    a922:	cf 91       	pop	r28
    a924:	08 95       	ret

0000a926 <Comparar_Inicio_Buffer>:

/************************************************************************
* Funcion que reconoce el inicio de un mesaje recibido
************************************************************************/
char Comparar_Inicio_Buffer (char *chBufferOriginalPtr, char *chBufferRecibidoPtr) {
    a926:	cf 93       	push	r28
    a928:	df 93       	push	r29
    a92a:	cd b7       	in	r28, 0x3d	; 61
    a92c:	de b7       	in	r29, 0x3e	; 62
    a92e:	29 97       	sbiw	r28, 0x09	; 9
    a930:	0f b6       	in	r0, 0x3f	; 63
    a932:	f8 94       	cli
    a934:	de bf       	out	0x3e, r29	; 62
    a936:	0f be       	out	0x3f, r0	; 63
    a938:	cd bf       	out	0x3d, r28	; 61
    a93a:	9f 83       	std	Y+7, r25	; 0x07
    a93c:	8e 83       	std	Y+6, r24	; 0x06
    a93e:	79 87       	std	Y+9, r23	; 0x09
    a940:	68 87       	std	Y+8, r22	; 0x08

	char chError = OK;
    a942:	19 82       	std	Y+1, r1	; 0x01
	int i = 0, j = 0;
    a944:	1b 82       	std	Y+3, r1	; 0x03
    a946:	1a 82       	std	Y+2, r1	; 0x02
    a948:	1d 82       	std	Y+5, r1	; 0x05
    a94a:	1c 82       	std	Y+4, r1	; 0x04

	while ((*(chBufferRecibidoPtr+j) == '\n') || (*(chBufferRecibidoPtr+j) == '\r'))	// si lo recibido comienza con \n o \r lo salto
    a94c:	05 c0       	rjmp	.+10     	; 0xa958 <Comparar_Inicio_Buffer+0x32>
		j++;
    a94e:	8c 81       	ldd	r24, Y+4	; 0x04
    a950:	9d 81       	ldd	r25, Y+5	; 0x05
    a952:	01 96       	adiw	r24, 0x01	; 1
    a954:	9d 83       	std	Y+5, r25	; 0x05
    a956:	8c 83       	std	Y+4, r24	; 0x04
char Comparar_Inicio_Buffer (char *chBufferOriginalPtr, char *chBufferRecibidoPtr) {

	char chError = OK;
	int i = 0, j = 0;

	while ((*(chBufferRecibidoPtr+j) == '\n') || (*(chBufferRecibidoPtr+j) == '\r'))	// si lo recibido comienza con \n o \r lo salto
    a958:	8c 81       	ldd	r24, Y+4	; 0x04
    a95a:	9d 81       	ldd	r25, Y+5	; 0x05
    a95c:	28 85       	ldd	r18, Y+8	; 0x08
    a95e:	39 85       	ldd	r19, Y+9	; 0x09
    a960:	82 0f       	add	r24, r18
    a962:	93 1f       	adc	r25, r19
    a964:	fc 01       	movw	r30, r24
    a966:	80 81       	ld	r24, Z
    a968:	8a 30       	cpi	r24, 0x0A	; 10
    a96a:	89 f3       	breq	.-30     	; 0xa94e <Comparar_Inicio_Buffer+0x28>
    a96c:	8c 81       	ldd	r24, Y+4	; 0x04
    a96e:	9d 81       	ldd	r25, Y+5	; 0x05
    a970:	28 85       	ldd	r18, Y+8	; 0x08
    a972:	39 85       	ldd	r19, Y+9	; 0x09
    a974:	82 0f       	add	r24, r18
    a976:	93 1f       	adc	r25, r19
    a978:	fc 01       	movw	r30, r24
    a97a:	80 81       	ld	r24, Z
    a97c:	8d 30       	cpi	r24, 0x0D	; 13
    a97e:	39 f3       	breq	.-50     	; 0xa94e <Comparar_Inicio_Buffer+0x28>
		j++;

	while (*(chBufferOriginalPtr+i) != '\0') {											// Comparo lo recibido
    a980:	1f c0       	rjmp	.+62     	; 0xa9c0 <Comparar_Inicio_Buffer+0x9a>

		if (*(chBufferOriginalPtr+i) != *(chBufferRecibidoPtr+j)) {						// verifico que coincidan
    a982:	8a 81       	ldd	r24, Y+2	; 0x02
    a984:	9b 81       	ldd	r25, Y+3	; 0x03
    a986:	2e 81       	ldd	r18, Y+6	; 0x06
    a988:	3f 81       	ldd	r19, Y+7	; 0x07
    a98a:	82 0f       	add	r24, r18
    a98c:	93 1f       	adc	r25, r19
    a98e:	fc 01       	movw	r30, r24
    a990:	40 81       	ld	r20, Z
    a992:	8c 81       	ldd	r24, Y+4	; 0x04
    a994:	9d 81       	ldd	r25, Y+5	; 0x05
    a996:	28 85       	ldd	r18, Y+8	; 0x08
    a998:	39 85       	ldd	r19, Y+9	; 0x09
    a99a:	82 0f       	add	r24, r18
    a99c:	93 1f       	adc	r25, r19
    a99e:	fc 01       	movw	r30, r24
    a9a0:	80 81       	ld	r24, Z
    a9a2:	48 17       	cp	r20, r24
    a9a4:	19 f0       	breq	.+6      	; 0xa9ac <Comparar_Inicio_Buffer+0x86>
			chError = ERROR;
    a9a6:	81 e0       	ldi	r24, 0x01	; 1
    a9a8:	89 83       	std	Y+1, r24	; 0x01
			break;
    a9aa:	14 c0       	rjmp	.+40     	; 0xa9d4 <Comparar_Inicio_Buffer+0xae>
		}

		i++;
    a9ac:	8a 81       	ldd	r24, Y+2	; 0x02
    a9ae:	9b 81       	ldd	r25, Y+3	; 0x03
    a9b0:	01 96       	adiw	r24, 0x01	; 1
    a9b2:	9b 83       	std	Y+3, r25	; 0x03
    a9b4:	8a 83       	std	Y+2, r24	; 0x02
		j++;
    a9b6:	8c 81       	ldd	r24, Y+4	; 0x04
    a9b8:	9d 81       	ldd	r25, Y+5	; 0x05
    a9ba:	01 96       	adiw	r24, 0x01	; 1
    a9bc:	9d 83       	std	Y+5, r25	; 0x05
    a9be:	8c 83       	std	Y+4, r24	; 0x04
	int i = 0, j = 0;

	while ((*(chBufferRecibidoPtr+j) == '\n') || (*(chBufferRecibidoPtr+j) == '\r'))	// si lo recibido comienza con \n o \r lo salto
		j++;

	while (*(chBufferOriginalPtr+i) != '\0') {											// Comparo lo recibido
    a9c0:	8a 81       	ldd	r24, Y+2	; 0x02
    a9c2:	9b 81       	ldd	r25, Y+3	; 0x03
    a9c4:	2e 81       	ldd	r18, Y+6	; 0x06
    a9c6:	3f 81       	ldd	r19, Y+7	; 0x07
    a9c8:	82 0f       	add	r24, r18
    a9ca:	93 1f       	adc	r25, r19
    a9cc:	fc 01       	movw	r30, r24
    a9ce:	80 81       	ld	r24, Z
    a9d0:	88 23       	and	r24, r24
    a9d2:	b9 f6       	brne	.-82     	; 0xa982 <Comparar_Inicio_Buffer+0x5c>
		}

		i++;
		j++;
	}
	return chError;
    a9d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    a9d6:	29 96       	adiw	r28, 0x09	; 9
    a9d8:	0f b6       	in	r0, 0x3f	; 63
    a9da:	f8 94       	cli
    a9dc:	de bf       	out	0x3e, r29	; 62
    a9de:	0f be       	out	0x3f, r0	; 63
    a9e0:	cd bf       	out	0x3d, r28	; 61
    a9e2:	df 91       	pop	r29
    a9e4:	cf 91       	pop	r28
    a9e6:	08 95       	ret

0000a9e8 <String_a_Mayusculas>:

/************************************************************************
* Funcion que conviertes un string a mayusculas
************************************************************************/

int String_a_Mayusculas (char * chStringPtr, int maxStringSize) {
    a9e8:	cf 93       	push	r28
    a9ea:	df 93       	push	r29
    a9ec:	00 d0       	rcall	.+0      	; 0xa9ee <String_a_Mayusculas+0x6>
    a9ee:	00 d0       	rcall	.+0      	; 0xa9f0 <String_a_Mayusculas+0x8>
    a9f0:	00 d0       	rcall	.+0      	; 0xa9f2 <String_a_Mayusculas+0xa>
    a9f2:	cd b7       	in	r28, 0x3d	; 61
    a9f4:	de b7       	in	r29, 0x3e	; 62
    a9f6:	9c 83       	std	Y+4, r25	; 0x04
    a9f8:	8b 83       	std	Y+3, r24	; 0x03
    a9fa:	7e 83       	std	Y+6, r23	; 0x06
    a9fc:	6d 83       	std	Y+5, r22	; 0x05
	int i = 0;
    a9fe:	1a 82       	std	Y+2, r1	; 0x02
    aa00:	19 82       	std	Y+1, r1	; 0x01

	while ((*(chStringPtr+i) != '\0') && (i<maxStringSize)) {
    aa02:	46 c0       	rjmp	.+140    	; 0xaa90 <String_a_Mayusculas+0xa8>
		if ((*(chStringPtr+i) >= 'a' ) && (*(chStringPtr+i) <= 'z'))
    aa04:	89 81       	ldd	r24, Y+1	; 0x01
    aa06:	9a 81       	ldd	r25, Y+2	; 0x02
    aa08:	2b 81       	ldd	r18, Y+3	; 0x03
    aa0a:	3c 81       	ldd	r19, Y+4	; 0x04
    aa0c:	82 0f       	add	r24, r18
    aa0e:	93 1f       	adc	r25, r19
    aa10:	fc 01       	movw	r30, r24
    aa12:	80 81       	ld	r24, Z
    aa14:	81 36       	cpi	r24, 0x61	; 97
    aa16:	e0 f0       	brcs	.+56     	; 0xaa50 <String_a_Mayusculas+0x68>
    aa18:	89 81       	ldd	r24, Y+1	; 0x01
    aa1a:	9a 81       	ldd	r25, Y+2	; 0x02
    aa1c:	2b 81       	ldd	r18, Y+3	; 0x03
    aa1e:	3c 81       	ldd	r19, Y+4	; 0x04
    aa20:	82 0f       	add	r24, r18
    aa22:	93 1f       	adc	r25, r19
    aa24:	fc 01       	movw	r30, r24
    aa26:	80 81       	ld	r24, Z
    aa28:	8b 37       	cpi	r24, 0x7B	; 123
    aa2a:	90 f4       	brcc	.+36     	; 0xaa50 <String_a_Mayusculas+0x68>
			*(chStringPtr+i) -= 32;
    aa2c:	89 81       	ldd	r24, Y+1	; 0x01
    aa2e:	9a 81       	ldd	r25, Y+2	; 0x02
    aa30:	2b 81       	ldd	r18, Y+3	; 0x03
    aa32:	3c 81       	ldd	r19, Y+4	; 0x04
    aa34:	82 0f       	add	r24, r18
    aa36:	93 1f       	adc	r25, r19
    aa38:	29 81       	ldd	r18, Y+1	; 0x01
    aa3a:	3a 81       	ldd	r19, Y+2	; 0x02
    aa3c:	4b 81       	ldd	r20, Y+3	; 0x03
    aa3e:	5c 81       	ldd	r21, Y+4	; 0x04
    aa40:	24 0f       	add	r18, r20
    aa42:	35 1f       	adc	r19, r21
    aa44:	f9 01       	movw	r30, r18
    aa46:	20 81       	ld	r18, Z
    aa48:	20 52       	subi	r18, 0x20	; 32
    aa4a:	fc 01       	movw	r30, r24
    aa4c:	20 83       	st	Z, r18
    aa4e:	1b c0       	rjmp	.+54     	; 0xaa86 <String_a_Mayusculas+0x9e>
		else if (*(chStringPtr+i) == 164 )	// ñ -> Ñ
    aa50:	89 81       	ldd	r24, Y+1	; 0x01
    aa52:	9a 81       	ldd	r25, Y+2	; 0x02
    aa54:	2b 81       	ldd	r18, Y+3	; 0x03
    aa56:	3c 81       	ldd	r19, Y+4	; 0x04
    aa58:	82 0f       	add	r24, r18
    aa5a:	93 1f       	adc	r25, r19
    aa5c:	fc 01       	movw	r30, r24
    aa5e:	80 81       	ld	r24, Z
    aa60:	84 3a       	cpi	r24, 0xA4	; 164
    aa62:	89 f4       	brne	.+34     	; 0xaa86 <String_a_Mayusculas+0x9e>
			*(chStringPtr+i) += 1;
    aa64:	89 81       	ldd	r24, Y+1	; 0x01
    aa66:	9a 81       	ldd	r25, Y+2	; 0x02
    aa68:	2b 81       	ldd	r18, Y+3	; 0x03
    aa6a:	3c 81       	ldd	r19, Y+4	; 0x04
    aa6c:	82 0f       	add	r24, r18
    aa6e:	93 1f       	adc	r25, r19
    aa70:	29 81       	ldd	r18, Y+1	; 0x01
    aa72:	3a 81       	ldd	r19, Y+2	; 0x02
    aa74:	4b 81       	ldd	r20, Y+3	; 0x03
    aa76:	5c 81       	ldd	r21, Y+4	; 0x04
    aa78:	24 0f       	add	r18, r20
    aa7a:	35 1f       	adc	r19, r21
    aa7c:	f9 01       	movw	r30, r18
    aa7e:	20 81       	ld	r18, Z
    aa80:	2f 5f       	subi	r18, 0xFF	; 255
    aa82:	fc 01       	movw	r30, r24
    aa84:	20 83       	st	Z, r18
		i++;
    aa86:	89 81       	ldd	r24, Y+1	; 0x01
    aa88:	9a 81       	ldd	r25, Y+2	; 0x02
    aa8a:	01 96       	adiw	r24, 0x01	; 1
    aa8c:	9a 83       	std	Y+2, r25	; 0x02
    aa8e:	89 83       	std	Y+1, r24	; 0x01
************************************************************************/

int String_a_Mayusculas (char * chStringPtr, int maxStringSize) {
	int i = 0;

	while ((*(chStringPtr+i) != '\0') && (i<maxStringSize)) {
    aa90:	89 81       	ldd	r24, Y+1	; 0x01
    aa92:	9a 81       	ldd	r25, Y+2	; 0x02
    aa94:	2b 81       	ldd	r18, Y+3	; 0x03
    aa96:	3c 81       	ldd	r19, Y+4	; 0x04
    aa98:	82 0f       	add	r24, r18
    aa9a:	93 1f       	adc	r25, r19
    aa9c:	fc 01       	movw	r30, r24
    aa9e:	80 81       	ld	r24, Z
    aaa0:	88 23       	and	r24, r24
    aaa2:	41 f0       	breq	.+16     	; 0xaab4 <String_a_Mayusculas+0xcc>
    aaa4:	29 81       	ldd	r18, Y+1	; 0x01
    aaa6:	3a 81       	ldd	r19, Y+2	; 0x02
    aaa8:	8d 81       	ldd	r24, Y+5	; 0x05
    aaaa:	9e 81       	ldd	r25, Y+6	; 0x06
    aaac:	28 17       	cp	r18, r24
    aaae:	39 07       	cpc	r19, r25
    aab0:	0c f4       	brge	.+2      	; 0xaab4 <String_a_Mayusculas+0xcc>
    aab2:	a8 cf       	rjmp	.-176    	; 0xaa04 <String_a_Mayusculas+0x1c>
		else if (*(chStringPtr+i) == 164 )	// ñ -> Ñ
			*(chStringPtr+i) += 1;
		i++;
	}

	return i;
    aab4:	89 81       	ldd	r24, Y+1	; 0x01
    aab6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    aab8:	26 96       	adiw	r28, 0x06	; 6
    aaba:	0f b6       	in	r0, 0x3f	; 63
    aabc:	f8 94       	cli
    aabe:	de bf       	out	0x3e, r29	; 62
    aac0:	0f be       	out	0x3f, r0	; 63
    aac2:	cd bf       	out	0x3d, r28	; 61
    aac4:	df 91       	pop	r29
    aac6:	cf 91       	pop	r28
    aac8:	08 95       	ret

0000aaca <From_String_to_Float>:

/**************************************************************************
* Funcion que extrae un float de un string en RAM
***************************************************************************/
float From_String_to_Float (char *chBuffer, int maxBufferZise) {
    aaca:	cf 92       	push	r12
    aacc:	df 92       	push	r13
    aace:	ef 92       	push	r14
    aad0:	ff 92       	push	r15
    aad2:	cf 93       	push	r28
    aad4:	df 93       	push	r29
    aad6:	cd b7       	in	r28, 0x3d	; 61
    aad8:	de b7       	in	r29, 0x3e	; 62
    aada:	2c 97       	sbiw	r28, 0x0c	; 12
    aadc:	0f b6       	in	r0, 0x3f	; 63
    aade:	f8 94       	cli
    aae0:	de bf       	out	0x3e, r29	; 62
    aae2:	0f be       	out	0x3f, r0	; 63
    aae4:	cd bf       	out	0x3d, r28	; 61
    aae6:	9a 87       	std	Y+10, r25	; 0x0a
    aae8:	89 87       	std	Y+9, r24	; 0x09
    aaea:	7c 87       	std	Y+12, r23	; 0x0c
    aaec:	6b 87       	std	Y+11, r22	; 0x0b
	float flValor = (float)atoi(chBuffer);
    aaee:	89 85       	ldd	r24, Y+9	; 0x09
    aaf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    aaf2:	0e 94 c5 58 	call	0xb18a	; 0xb18a <atoi>
    aaf6:	09 2e       	mov	r0, r25
    aaf8:	00 0c       	add	r0, r0
    aafa:	aa 0b       	sbc	r26, r26
    aafc:	bb 0b       	sbc	r27, r27
    aafe:	bc 01       	movw	r22, r24
    ab00:	cd 01       	movw	r24, r26
    ab02:	0e 94 83 57 	call	0xaf06	; 0xaf06 <__floatsisf>
    ab06:	dc 01       	movw	r26, r24
    ab08:	cb 01       	movw	r24, r22
    ab0a:	89 83       	std	Y+1, r24	; 0x01
    ab0c:	9a 83       	std	Y+2, r25	; 0x02
    ab0e:	ab 83       	std	Y+3, r26	; 0x03
    ab10:	bc 83       	std	Y+4, r27	; 0x04
	int index = 0;
    ab12:	1e 82       	std	Y+6, r1	; 0x06
    ab14:	1d 82       	std	Y+5, r1	; 0x05
	while ((*(chBuffer+index) != '.') && (*(chBuffer+index) != '\0') && (index<maxBufferZise))
    ab16:	05 c0       	rjmp	.+10     	; 0xab22 <From_String_to_Float+0x58>
		index++;
    ab18:	8d 81       	ldd	r24, Y+5	; 0x05
    ab1a:	9e 81       	ldd	r25, Y+6	; 0x06
    ab1c:	01 96       	adiw	r24, 0x01	; 1
    ab1e:	9e 83       	std	Y+6, r25	; 0x06
    ab20:	8d 83       	std	Y+5, r24	; 0x05
* Funcion que extrae un float de un string en RAM
***************************************************************************/
float From_String_to_Float (char *chBuffer, int maxBufferZise) {
	float flValor = (float)atoi(chBuffer);
	int index = 0;
	while ((*(chBuffer+index) != '.') && (*(chBuffer+index) != '\0') && (index<maxBufferZise))
    ab22:	8d 81       	ldd	r24, Y+5	; 0x05
    ab24:	9e 81       	ldd	r25, Y+6	; 0x06
    ab26:	29 85       	ldd	r18, Y+9	; 0x09
    ab28:	3a 85       	ldd	r19, Y+10	; 0x0a
    ab2a:	82 0f       	add	r24, r18
    ab2c:	93 1f       	adc	r25, r19
    ab2e:	fc 01       	movw	r30, r24
    ab30:	80 81       	ld	r24, Z
    ab32:	8e 32       	cpi	r24, 0x2E	; 46
    ab34:	89 f0       	breq	.+34     	; 0xab58 <From_String_to_Float+0x8e>
    ab36:	8d 81       	ldd	r24, Y+5	; 0x05
    ab38:	9e 81       	ldd	r25, Y+6	; 0x06
    ab3a:	29 85       	ldd	r18, Y+9	; 0x09
    ab3c:	3a 85       	ldd	r19, Y+10	; 0x0a
    ab3e:	82 0f       	add	r24, r18
    ab40:	93 1f       	adc	r25, r19
    ab42:	fc 01       	movw	r30, r24
    ab44:	80 81       	ld	r24, Z
    ab46:	88 23       	and	r24, r24
    ab48:	39 f0       	breq	.+14     	; 0xab58 <From_String_to_Float+0x8e>
    ab4a:	2d 81       	ldd	r18, Y+5	; 0x05
    ab4c:	3e 81       	ldd	r19, Y+6	; 0x06
    ab4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    ab50:	9c 85       	ldd	r25, Y+12	; 0x0c
    ab52:	28 17       	cp	r18, r24
    ab54:	39 07       	cpc	r19, r25
    ab56:	04 f3       	brlt	.-64     	; 0xab18 <From_String_to_Float+0x4e>
		index++;

	if(*(chBuffer+index) == '.') {
    ab58:	8d 81       	ldd	r24, Y+5	; 0x05
    ab5a:	9e 81       	ldd	r25, Y+6	; 0x06
    ab5c:	29 85       	ldd	r18, Y+9	; 0x09
    ab5e:	3a 85       	ldd	r19, Y+10	; 0x0a
    ab60:	82 0f       	add	r24, r18
    ab62:	93 1f       	adc	r25, r19
    ab64:	fc 01       	movw	r30, r24
    ab66:	80 81       	ld	r24, Z
    ab68:	8e 32       	cpi	r24, 0x2E	; 46
    ab6a:	09 f0       	breq	.+2      	; 0xab6e <From_String_to_Float+0xa4>
    ab6c:	6f c0       	rjmp	.+222    	; 0xac4c <From_String_to_Float+0x182>
		index++;
    ab6e:	8d 81       	ldd	r24, Y+5	; 0x05
    ab70:	9e 81       	ldd	r25, Y+6	; 0x06
    ab72:	01 96       	adiw	r24, 0x01	; 1
    ab74:	9e 83       	std	Y+6, r25	; 0x06
    ab76:	8d 83       	std	Y+5, r24	; 0x05
		int j=10;
    ab78:	8a e0       	ldi	r24, 0x0A	; 10
    ab7a:	90 e0       	ldi	r25, 0x00	; 0
    ab7c:	98 87       	std	Y+8, r25	; 0x08
    ab7e:	8f 83       	std	Y+7, r24	; 0x07
		while ((*(chBuffer+index) >= '0') && (*(chBuffer+index) <= '9') && (index<maxBufferZise)) {
    ab80:	49 c0       	rjmp	.+146    	; 0xac14 <From_String_to_Float+0x14a>
			flValor += (float)(*(chBuffer+index) - '0')/j;
    ab82:	8d 81       	ldd	r24, Y+5	; 0x05
    ab84:	9e 81       	ldd	r25, Y+6	; 0x06
    ab86:	29 85       	ldd	r18, Y+9	; 0x09
    ab88:	3a 85       	ldd	r19, Y+10	; 0x0a
    ab8a:	82 0f       	add	r24, r18
    ab8c:	93 1f       	adc	r25, r19
    ab8e:	fc 01       	movw	r30, r24
    ab90:	80 81       	ld	r24, Z
    ab92:	88 2f       	mov	r24, r24
    ab94:	90 e0       	ldi	r25, 0x00	; 0
    ab96:	c0 97       	sbiw	r24, 0x30	; 48
    ab98:	09 2e       	mov	r0, r25
    ab9a:	00 0c       	add	r0, r0
    ab9c:	aa 0b       	sbc	r26, r26
    ab9e:	bb 0b       	sbc	r27, r27
    aba0:	bc 01       	movw	r22, r24
    aba2:	cd 01       	movw	r24, r26
    aba4:	0e 94 83 57 	call	0xaf06	; 0xaf06 <__floatsisf>
    aba8:	6b 01       	movw	r12, r22
    abaa:	7c 01       	movw	r14, r24
    abac:	8f 81       	ldd	r24, Y+7	; 0x07
    abae:	98 85       	ldd	r25, Y+8	; 0x08
    abb0:	09 2e       	mov	r0, r25
    abb2:	00 0c       	add	r0, r0
    abb4:	aa 0b       	sbc	r26, r26
    abb6:	bb 0b       	sbc	r27, r27
    abb8:	bc 01       	movw	r22, r24
    abba:	cd 01       	movw	r24, r26
    abbc:	0e 94 83 57 	call	0xaf06	; 0xaf06 <__floatsisf>
    abc0:	dc 01       	movw	r26, r24
    abc2:	cb 01       	movw	r24, r22
    abc4:	9c 01       	movw	r18, r24
    abc6:	ad 01       	movw	r20, r26
    abc8:	c7 01       	movw	r24, r14
    abca:	b6 01       	movw	r22, r12
    abcc:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <__divsf3>
    abd0:	dc 01       	movw	r26, r24
    abd2:	cb 01       	movw	r24, r22
    abd4:	9c 01       	movw	r18, r24
    abd6:	ad 01       	movw	r20, r26
    abd8:	69 81       	ldd	r22, Y+1	; 0x01
    abda:	7a 81       	ldd	r23, Y+2	; 0x02
    abdc:	8b 81       	ldd	r24, Y+3	; 0x03
    abde:	9c 81       	ldd	r25, Y+4	; 0x04
    abe0:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__addsf3>
    abe4:	dc 01       	movw	r26, r24
    abe6:	cb 01       	movw	r24, r22
    abe8:	89 83       	std	Y+1, r24	; 0x01
    abea:	9a 83       	std	Y+2, r25	; 0x02
    abec:	ab 83       	std	Y+3, r26	; 0x03
    abee:	bc 83       	std	Y+4, r27	; 0x04
			index++;
    abf0:	8d 81       	ldd	r24, Y+5	; 0x05
    abf2:	9e 81       	ldd	r25, Y+6	; 0x06
    abf4:	01 96       	adiw	r24, 0x01	; 1
    abf6:	9e 83       	std	Y+6, r25	; 0x06
    abf8:	8d 83       	std	Y+5, r24	; 0x05
			j*=10;
    abfa:	8f 81       	ldd	r24, Y+7	; 0x07
    abfc:	98 85       	ldd	r25, Y+8	; 0x08
    abfe:	88 0f       	add	r24, r24
    ac00:	99 1f       	adc	r25, r25
    ac02:	9c 01       	movw	r18, r24
    ac04:	22 0f       	add	r18, r18
    ac06:	33 1f       	adc	r19, r19
    ac08:	22 0f       	add	r18, r18
    ac0a:	33 1f       	adc	r19, r19
    ac0c:	82 0f       	add	r24, r18
    ac0e:	93 1f       	adc	r25, r19
    ac10:	98 87       	std	Y+8, r25	; 0x08
    ac12:	8f 83       	std	Y+7, r24	; 0x07
		index++;

	if(*(chBuffer+index) == '.') {
		index++;
		int j=10;
		while ((*(chBuffer+index) >= '0') && (*(chBuffer+index) <= '9') && (index<maxBufferZise)) {
    ac14:	8d 81       	ldd	r24, Y+5	; 0x05
    ac16:	9e 81       	ldd	r25, Y+6	; 0x06
    ac18:	29 85       	ldd	r18, Y+9	; 0x09
    ac1a:	3a 85       	ldd	r19, Y+10	; 0x0a
    ac1c:	82 0f       	add	r24, r18
    ac1e:	93 1f       	adc	r25, r19
    ac20:	fc 01       	movw	r30, r24
    ac22:	80 81       	ld	r24, Z
    ac24:	80 33       	cpi	r24, 0x30	; 48
    ac26:	90 f0       	brcs	.+36     	; 0xac4c <From_String_to_Float+0x182>
    ac28:	8d 81       	ldd	r24, Y+5	; 0x05
    ac2a:	9e 81       	ldd	r25, Y+6	; 0x06
    ac2c:	29 85       	ldd	r18, Y+9	; 0x09
    ac2e:	3a 85       	ldd	r19, Y+10	; 0x0a
    ac30:	82 0f       	add	r24, r18
    ac32:	93 1f       	adc	r25, r19
    ac34:	fc 01       	movw	r30, r24
    ac36:	80 81       	ld	r24, Z
    ac38:	8a 33       	cpi	r24, 0x3A	; 58
    ac3a:	40 f4       	brcc	.+16     	; 0xac4c <From_String_to_Float+0x182>
    ac3c:	2d 81       	ldd	r18, Y+5	; 0x05
    ac3e:	3e 81       	ldd	r19, Y+6	; 0x06
    ac40:	8b 85       	ldd	r24, Y+11	; 0x0b
    ac42:	9c 85       	ldd	r25, Y+12	; 0x0c
    ac44:	28 17       	cp	r18, r24
    ac46:	39 07       	cpc	r19, r25
    ac48:	0c f4       	brge	.+2      	; 0xac4c <From_String_to_Float+0x182>
    ac4a:	9b cf       	rjmp	.-202    	; 0xab82 <From_String_to_Float+0xb8>
			flValor += (float)(*(chBuffer+index) - '0')/j;
			index++;
			j*=10;
		}
	}
	return flValor;
    ac4c:	89 81       	ldd	r24, Y+1	; 0x01
    ac4e:	9a 81       	ldd	r25, Y+2	; 0x02
    ac50:	ab 81       	ldd	r26, Y+3	; 0x03
    ac52:	bc 81       	ldd	r27, Y+4	; 0x04
}
    ac54:	bc 01       	movw	r22, r24
    ac56:	cd 01       	movw	r24, r26
    ac58:	2c 96       	adiw	r28, 0x0c	; 12
    ac5a:	0f b6       	in	r0, 0x3f	; 63
    ac5c:	f8 94       	cli
    ac5e:	de bf       	out	0x3e, r29	; 62
    ac60:	0f be       	out	0x3f, r0	; 63
    ac62:	cd bf       	out	0x3d, r28	; 61
    ac64:	df 91       	pop	r29
    ac66:	cf 91       	pop	r28
    ac68:	ff 90       	pop	r15
    ac6a:	ef 90       	pop	r14
    ac6c:	df 90       	pop	r13
    ac6e:	cf 90       	pop	r12
    ac70:	08 95       	ret

0000ac72 <__divmodhi4>:
    ac72:	97 fb       	bst	r25, 7
    ac74:	07 2e       	mov	r0, r23
    ac76:	16 f4       	brtc	.+4      	; 0xac7c <__divmodhi4+0xa>
    ac78:	00 94       	com	r0
    ac7a:	07 d0       	rcall	.+14     	; 0xac8a <__divmodhi4_neg1>
    ac7c:	77 fd       	sbrc	r23, 7
    ac7e:	09 d0       	rcall	.+18     	; 0xac92 <__divmodhi4_neg2>
    ac80:	0e 94 53 56 	call	0xaca6	; 0xaca6 <__udivmodhi4>
    ac84:	07 fc       	sbrc	r0, 7
    ac86:	05 d0       	rcall	.+10     	; 0xac92 <__divmodhi4_neg2>
    ac88:	3e f4       	brtc	.+14     	; 0xac98 <__divmodhi4_exit>

0000ac8a <__divmodhi4_neg1>:
    ac8a:	90 95       	com	r25
    ac8c:	81 95       	neg	r24
    ac8e:	9f 4f       	sbci	r25, 0xFF	; 255
    ac90:	08 95       	ret

0000ac92 <__divmodhi4_neg2>:
    ac92:	70 95       	com	r23
    ac94:	61 95       	neg	r22
    ac96:	7f 4f       	sbci	r23, 0xFF	; 255

0000ac98 <__divmodhi4_exit>:
    ac98:	08 95       	ret

0000ac9a <__tablejump2__>:
    ac9a:	ee 0f       	add	r30, r30
    ac9c:	ff 1f       	adc	r31, r31
    ac9e:	05 90       	lpm	r0, Z+
    aca0:	f4 91       	lpm	r31, Z
    aca2:	e0 2d       	mov	r30, r0
    aca4:	09 94       	ijmp

0000aca6 <__udivmodhi4>:
    aca6:	aa 1b       	sub	r26, r26
    aca8:	bb 1b       	sub	r27, r27
    acaa:	51 e1       	ldi	r21, 0x11	; 17
    acac:	07 c0       	rjmp	.+14     	; 0xacbc <__udivmodhi4_ep>

0000acae <__udivmodhi4_loop>:
    acae:	aa 1f       	adc	r26, r26
    acb0:	bb 1f       	adc	r27, r27
    acb2:	a6 17       	cp	r26, r22
    acb4:	b7 07       	cpc	r27, r23
    acb6:	10 f0       	brcs	.+4      	; 0xacbc <__udivmodhi4_ep>
    acb8:	a6 1b       	sub	r26, r22
    acba:	b7 0b       	sbc	r27, r23

0000acbc <__udivmodhi4_ep>:
    acbc:	88 1f       	adc	r24, r24
    acbe:	99 1f       	adc	r25, r25
    acc0:	5a 95       	dec	r21
    acc2:	a9 f7       	brne	.-22     	; 0xacae <__udivmodhi4_loop>
    acc4:	80 95       	com	r24
    acc6:	90 95       	com	r25
    acc8:	bc 01       	movw	r22, r24
    acca:	cd 01       	movw	r24, r26
    accc:	08 95       	ret

0000acce <__subsf3>:
    acce:	50 58       	subi	r21, 0x80	; 128

0000acd0 <__addsf3>:
    acd0:	bb 27       	eor	r27, r27
    acd2:	aa 27       	eor	r26, r26
    acd4:	0e 94 7f 56 	call	0xacfe	; 0xacfe <__addsf3x>
    acd8:	0c 94 f9 57 	jmp	0xaff2	; 0xaff2 <__fp_round>
    acdc:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__fp_pscA>
    ace0:	38 f0       	brcs	.+14     	; 0xacf0 <__addsf3+0x20>
    ace2:	0e 94 f2 57 	call	0xafe4	; 0xafe4 <__fp_pscB>
    ace6:	20 f0       	brcs	.+8      	; 0xacf0 <__addsf3+0x20>
    ace8:	39 f4       	brne	.+14     	; 0xacf8 <__addsf3+0x28>
    acea:	9f 3f       	cpi	r25, 0xFF	; 255
    acec:	19 f4       	brne	.+6      	; 0xacf4 <__addsf3+0x24>
    acee:	26 f4       	brtc	.+8      	; 0xacf8 <__addsf3+0x28>
    acf0:	0c 94 e8 57 	jmp	0xafd0	; 0xafd0 <__fp_nan>
    acf4:	0e f4       	brtc	.+2      	; 0xacf8 <__addsf3+0x28>
    acf6:	e0 95       	com	r30
    acf8:	e7 fb       	bst	r30, 7
    acfa:	0c 94 e2 57 	jmp	0xafc4	; 0xafc4 <__fp_inf>

0000acfe <__addsf3x>:
    acfe:	e9 2f       	mov	r30, r25
    ad00:	0e 94 0a 58 	call	0xb014	; 0xb014 <__fp_split3>
    ad04:	58 f3       	brcs	.-42     	; 0xacdc <__addsf3+0xc>
    ad06:	ba 17       	cp	r27, r26
    ad08:	62 07       	cpc	r22, r18
    ad0a:	73 07       	cpc	r23, r19
    ad0c:	84 07       	cpc	r24, r20
    ad0e:	95 07       	cpc	r25, r21
    ad10:	20 f0       	brcs	.+8      	; 0xad1a <__addsf3x+0x1c>
    ad12:	79 f4       	brne	.+30     	; 0xad32 <__addsf3x+0x34>
    ad14:	a6 f5       	brtc	.+104    	; 0xad7e <__addsf3x+0x80>
    ad16:	0c 94 2c 58 	jmp	0xb058	; 0xb058 <__fp_zero>
    ad1a:	0e f4       	brtc	.+2      	; 0xad1e <__addsf3x+0x20>
    ad1c:	e0 95       	com	r30
    ad1e:	0b 2e       	mov	r0, r27
    ad20:	ba 2f       	mov	r27, r26
    ad22:	a0 2d       	mov	r26, r0
    ad24:	0b 01       	movw	r0, r22
    ad26:	b9 01       	movw	r22, r18
    ad28:	90 01       	movw	r18, r0
    ad2a:	0c 01       	movw	r0, r24
    ad2c:	ca 01       	movw	r24, r20
    ad2e:	a0 01       	movw	r20, r0
    ad30:	11 24       	eor	r1, r1
    ad32:	ff 27       	eor	r31, r31
    ad34:	59 1b       	sub	r21, r25
    ad36:	99 f0       	breq	.+38     	; 0xad5e <__addsf3x+0x60>
    ad38:	59 3f       	cpi	r21, 0xF9	; 249
    ad3a:	50 f4       	brcc	.+20     	; 0xad50 <__addsf3x+0x52>
    ad3c:	50 3e       	cpi	r21, 0xE0	; 224
    ad3e:	68 f1       	brcs	.+90     	; 0xad9a <__addsf3x+0x9c>
    ad40:	1a 16       	cp	r1, r26
    ad42:	f0 40       	sbci	r31, 0x00	; 0
    ad44:	a2 2f       	mov	r26, r18
    ad46:	23 2f       	mov	r18, r19
    ad48:	34 2f       	mov	r19, r20
    ad4a:	44 27       	eor	r20, r20
    ad4c:	58 5f       	subi	r21, 0xF8	; 248
    ad4e:	f3 cf       	rjmp	.-26     	; 0xad36 <__addsf3x+0x38>
    ad50:	46 95       	lsr	r20
    ad52:	37 95       	ror	r19
    ad54:	27 95       	ror	r18
    ad56:	a7 95       	ror	r26
    ad58:	f0 40       	sbci	r31, 0x00	; 0
    ad5a:	53 95       	inc	r21
    ad5c:	c9 f7       	brne	.-14     	; 0xad50 <__addsf3x+0x52>
    ad5e:	7e f4       	brtc	.+30     	; 0xad7e <__addsf3x+0x80>
    ad60:	1f 16       	cp	r1, r31
    ad62:	ba 0b       	sbc	r27, r26
    ad64:	62 0b       	sbc	r22, r18
    ad66:	73 0b       	sbc	r23, r19
    ad68:	84 0b       	sbc	r24, r20
    ad6a:	ba f0       	brmi	.+46     	; 0xad9a <__addsf3x+0x9c>
    ad6c:	91 50       	subi	r25, 0x01	; 1
    ad6e:	a1 f0       	breq	.+40     	; 0xad98 <__addsf3x+0x9a>
    ad70:	ff 0f       	add	r31, r31
    ad72:	bb 1f       	adc	r27, r27
    ad74:	66 1f       	adc	r22, r22
    ad76:	77 1f       	adc	r23, r23
    ad78:	88 1f       	adc	r24, r24
    ad7a:	c2 f7       	brpl	.-16     	; 0xad6c <__addsf3x+0x6e>
    ad7c:	0e c0       	rjmp	.+28     	; 0xad9a <__addsf3x+0x9c>
    ad7e:	ba 0f       	add	r27, r26
    ad80:	62 1f       	adc	r22, r18
    ad82:	73 1f       	adc	r23, r19
    ad84:	84 1f       	adc	r24, r20
    ad86:	48 f4       	brcc	.+18     	; 0xad9a <__addsf3x+0x9c>
    ad88:	87 95       	ror	r24
    ad8a:	77 95       	ror	r23
    ad8c:	67 95       	ror	r22
    ad8e:	b7 95       	ror	r27
    ad90:	f7 95       	ror	r31
    ad92:	9e 3f       	cpi	r25, 0xFE	; 254
    ad94:	08 f0       	brcs	.+2      	; 0xad98 <__addsf3x+0x9a>
    ad96:	b0 cf       	rjmp	.-160    	; 0xacf8 <__addsf3+0x28>
    ad98:	93 95       	inc	r25
    ad9a:	88 0f       	add	r24, r24
    ad9c:	08 f0       	brcs	.+2      	; 0xada0 <__addsf3x+0xa2>
    ad9e:	99 27       	eor	r25, r25
    ada0:	ee 0f       	add	r30, r30
    ada2:	97 95       	ror	r25
    ada4:	87 95       	ror	r24
    ada6:	08 95       	ret

0000ada8 <__cmpsf2>:
    ada8:	0e 94 be 57 	call	0xaf7c	; 0xaf7c <__fp_cmp>
    adac:	08 f4       	brcc	.+2      	; 0xadb0 <__cmpsf2+0x8>
    adae:	81 e0       	ldi	r24, 0x01	; 1
    adb0:	08 95       	ret

0000adb2 <__divsf3>:
    adb2:	0e 94 ed 56 	call	0xadda	; 0xadda <__divsf3x>
    adb6:	0c 94 f9 57 	jmp	0xaff2	; 0xaff2 <__fp_round>
    adba:	0e 94 f2 57 	call	0xafe4	; 0xafe4 <__fp_pscB>
    adbe:	58 f0       	brcs	.+22     	; 0xadd6 <__divsf3+0x24>
    adc0:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__fp_pscA>
    adc4:	40 f0       	brcs	.+16     	; 0xadd6 <__divsf3+0x24>
    adc6:	29 f4       	brne	.+10     	; 0xadd2 <__divsf3+0x20>
    adc8:	5f 3f       	cpi	r21, 0xFF	; 255
    adca:	29 f0       	breq	.+10     	; 0xadd6 <__divsf3+0x24>
    adcc:	0c 94 e2 57 	jmp	0xafc4	; 0xafc4 <__fp_inf>
    add0:	51 11       	cpse	r21, r1
    add2:	0c 94 2d 58 	jmp	0xb05a	; 0xb05a <__fp_szero>
    add6:	0c 94 e8 57 	jmp	0xafd0	; 0xafd0 <__fp_nan>

0000adda <__divsf3x>:
    adda:	0e 94 0a 58 	call	0xb014	; 0xb014 <__fp_split3>
    adde:	68 f3       	brcs	.-38     	; 0xadba <__divsf3+0x8>

0000ade0 <__divsf3_pse>:
    ade0:	99 23       	and	r25, r25
    ade2:	b1 f3       	breq	.-20     	; 0xadd0 <__divsf3+0x1e>
    ade4:	55 23       	and	r21, r21
    ade6:	91 f3       	breq	.-28     	; 0xadcc <__divsf3+0x1a>
    ade8:	95 1b       	sub	r25, r21
    adea:	55 0b       	sbc	r21, r21
    adec:	bb 27       	eor	r27, r27
    adee:	aa 27       	eor	r26, r26
    adf0:	62 17       	cp	r22, r18
    adf2:	73 07       	cpc	r23, r19
    adf4:	84 07       	cpc	r24, r20
    adf6:	38 f0       	brcs	.+14     	; 0xae06 <__divsf3_pse+0x26>
    adf8:	9f 5f       	subi	r25, 0xFF	; 255
    adfa:	5f 4f       	sbci	r21, 0xFF	; 255
    adfc:	22 0f       	add	r18, r18
    adfe:	33 1f       	adc	r19, r19
    ae00:	44 1f       	adc	r20, r20
    ae02:	aa 1f       	adc	r26, r26
    ae04:	a9 f3       	breq	.-22     	; 0xadf0 <__divsf3_pse+0x10>
    ae06:	35 d0       	rcall	.+106    	; 0xae72 <__divsf3_pse+0x92>
    ae08:	0e 2e       	mov	r0, r30
    ae0a:	3a f0       	brmi	.+14     	; 0xae1a <__divsf3_pse+0x3a>
    ae0c:	e0 e8       	ldi	r30, 0x80	; 128
    ae0e:	32 d0       	rcall	.+100    	; 0xae74 <__divsf3_pse+0x94>
    ae10:	91 50       	subi	r25, 0x01	; 1
    ae12:	50 40       	sbci	r21, 0x00	; 0
    ae14:	e6 95       	lsr	r30
    ae16:	00 1c       	adc	r0, r0
    ae18:	ca f7       	brpl	.-14     	; 0xae0c <__divsf3_pse+0x2c>
    ae1a:	2b d0       	rcall	.+86     	; 0xae72 <__divsf3_pse+0x92>
    ae1c:	fe 2f       	mov	r31, r30
    ae1e:	29 d0       	rcall	.+82     	; 0xae72 <__divsf3_pse+0x92>
    ae20:	66 0f       	add	r22, r22
    ae22:	77 1f       	adc	r23, r23
    ae24:	88 1f       	adc	r24, r24
    ae26:	bb 1f       	adc	r27, r27
    ae28:	26 17       	cp	r18, r22
    ae2a:	37 07       	cpc	r19, r23
    ae2c:	48 07       	cpc	r20, r24
    ae2e:	ab 07       	cpc	r26, r27
    ae30:	b0 e8       	ldi	r27, 0x80	; 128
    ae32:	09 f0       	breq	.+2      	; 0xae36 <__divsf3_pse+0x56>
    ae34:	bb 0b       	sbc	r27, r27
    ae36:	80 2d       	mov	r24, r0
    ae38:	bf 01       	movw	r22, r30
    ae3a:	ff 27       	eor	r31, r31
    ae3c:	93 58       	subi	r25, 0x83	; 131
    ae3e:	5f 4f       	sbci	r21, 0xFF	; 255
    ae40:	3a f0       	brmi	.+14     	; 0xae50 <__divsf3_pse+0x70>
    ae42:	9e 3f       	cpi	r25, 0xFE	; 254
    ae44:	51 05       	cpc	r21, r1
    ae46:	78 f0       	brcs	.+30     	; 0xae66 <__divsf3_pse+0x86>
    ae48:	0c 94 e2 57 	jmp	0xafc4	; 0xafc4 <__fp_inf>
    ae4c:	0c 94 2d 58 	jmp	0xb05a	; 0xb05a <__fp_szero>
    ae50:	5f 3f       	cpi	r21, 0xFF	; 255
    ae52:	e4 f3       	brlt	.-8      	; 0xae4c <__divsf3_pse+0x6c>
    ae54:	98 3e       	cpi	r25, 0xE8	; 232
    ae56:	d4 f3       	brlt	.-12     	; 0xae4c <__divsf3_pse+0x6c>
    ae58:	86 95       	lsr	r24
    ae5a:	77 95       	ror	r23
    ae5c:	67 95       	ror	r22
    ae5e:	b7 95       	ror	r27
    ae60:	f7 95       	ror	r31
    ae62:	9f 5f       	subi	r25, 0xFF	; 255
    ae64:	c9 f7       	brne	.-14     	; 0xae58 <__divsf3_pse+0x78>
    ae66:	88 0f       	add	r24, r24
    ae68:	91 1d       	adc	r25, r1
    ae6a:	96 95       	lsr	r25
    ae6c:	87 95       	ror	r24
    ae6e:	97 f9       	bld	r25, 7
    ae70:	08 95       	ret
    ae72:	e1 e0       	ldi	r30, 0x01	; 1
    ae74:	66 0f       	add	r22, r22
    ae76:	77 1f       	adc	r23, r23
    ae78:	88 1f       	adc	r24, r24
    ae7a:	bb 1f       	adc	r27, r27
    ae7c:	62 17       	cp	r22, r18
    ae7e:	73 07       	cpc	r23, r19
    ae80:	84 07       	cpc	r24, r20
    ae82:	ba 07       	cpc	r27, r26
    ae84:	20 f0       	brcs	.+8      	; 0xae8e <__divsf3_pse+0xae>
    ae86:	62 1b       	sub	r22, r18
    ae88:	73 0b       	sbc	r23, r19
    ae8a:	84 0b       	sbc	r24, r20
    ae8c:	ba 0b       	sbc	r27, r26
    ae8e:	ee 1f       	adc	r30, r30
    ae90:	88 f7       	brcc	.-30     	; 0xae74 <__divsf3_pse+0x94>
    ae92:	e0 95       	com	r30
    ae94:	08 95       	ret

0000ae96 <__fixsfsi>:
    ae96:	0e 94 52 57 	call	0xaea4	; 0xaea4 <__fixunssfsi>
    ae9a:	68 94       	set
    ae9c:	b1 11       	cpse	r27, r1
    ae9e:	0c 94 2d 58 	jmp	0xb05a	; 0xb05a <__fp_szero>
    aea2:	08 95       	ret

0000aea4 <__fixunssfsi>:
    aea4:	0e 94 12 58 	call	0xb024	; 0xb024 <__fp_splitA>
    aea8:	88 f0       	brcs	.+34     	; 0xaecc <__fixunssfsi+0x28>
    aeaa:	9f 57       	subi	r25, 0x7F	; 127
    aeac:	98 f0       	brcs	.+38     	; 0xaed4 <__fixunssfsi+0x30>
    aeae:	b9 2f       	mov	r27, r25
    aeb0:	99 27       	eor	r25, r25
    aeb2:	b7 51       	subi	r27, 0x17	; 23
    aeb4:	b0 f0       	brcs	.+44     	; 0xaee2 <__fixunssfsi+0x3e>
    aeb6:	e1 f0       	breq	.+56     	; 0xaef0 <__fixunssfsi+0x4c>
    aeb8:	66 0f       	add	r22, r22
    aeba:	77 1f       	adc	r23, r23
    aebc:	88 1f       	adc	r24, r24
    aebe:	99 1f       	adc	r25, r25
    aec0:	1a f0       	brmi	.+6      	; 0xaec8 <__fixunssfsi+0x24>
    aec2:	ba 95       	dec	r27
    aec4:	c9 f7       	brne	.-14     	; 0xaeb8 <__fixunssfsi+0x14>
    aec6:	14 c0       	rjmp	.+40     	; 0xaef0 <__fixunssfsi+0x4c>
    aec8:	b1 30       	cpi	r27, 0x01	; 1
    aeca:	91 f0       	breq	.+36     	; 0xaef0 <__fixunssfsi+0x4c>
    aecc:	0e 94 2c 58 	call	0xb058	; 0xb058 <__fp_zero>
    aed0:	b1 e0       	ldi	r27, 0x01	; 1
    aed2:	08 95       	ret
    aed4:	0c 94 2c 58 	jmp	0xb058	; 0xb058 <__fp_zero>
    aed8:	67 2f       	mov	r22, r23
    aeda:	78 2f       	mov	r23, r24
    aedc:	88 27       	eor	r24, r24
    aede:	b8 5f       	subi	r27, 0xF8	; 248
    aee0:	39 f0       	breq	.+14     	; 0xaef0 <__fixunssfsi+0x4c>
    aee2:	b9 3f       	cpi	r27, 0xF9	; 249
    aee4:	cc f3       	brlt	.-14     	; 0xaed8 <__fixunssfsi+0x34>
    aee6:	86 95       	lsr	r24
    aee8:	77 95       	ror	r23
    aeea:	67 95       	ror	r22
    aeec:	b3 95       	inc	r27
    aeee:	d9 f7       	brne	.-10     	; 0xaee6 <__fixunssfsi+0x42>
    aef0:	3e f4       	brtc	.+14     	; 0xaf00 <__fixunssfsi+0x5c>
    aef2:	90 95       	com	r25
    aef4:	80 95       	com	r24
    aef6:	70 95       	com	r23
    aef8:	61 95       	neg	r22
    aefa:	7f 4f       	sbci	r23, 0xFF	; 255
    aefc:	8f 4f       	sbci	r24, 0xFF	; 255
    aefe:	9f 4f       	sbci	r25, 0xFF	; 255
    af00:	08 95       	ret

0000af02 <__floatunsisf>:
    af02:	e8 94       	clt
    af04:	09 c0       	rjmp	.+18     	; 0xaf18 <__floatsisf+0x12>

0000af06 <__floatsisf>:
    af06:	97 fb       	bst	r25, 7
    af08:	3e f4       	brtc	.+14     	; 0xaf18 <__floatsisf+0x12>
    af0a:	90 95       	com	r25
    af0c:	80 95       	com	r24
    af0e:	70 95       	com	r23
    af10:	61 95       	neg	r22
    af12:	7f 4f       	sbci	r23, 0xFF	; 255
    af14:	8f 4f       	sbci	r24, 0xFF	; 255
    af16:	9f 4f       	sbci	r25, 0xFF	; 255
    af18:	99 23       	and	r25, r25
    af1a:	a9 f0       	breq	.+42     	; 0xaf46 <__floatsisf+0x40>
    af1c:	f9 2f       	mov	r31, r25
    af1e:	96 e9       	ldi	r25, 0x96	; 150
    af20:	bb 27       	eor	r27, r27
    af22:	93 95       	inc	r25
    af24:	f6 95       	lsr	r31
    af26:	87 95       	ror	r24
    af28:	77 95       	ror	r23
    af2a:	67 95       	ror	r22
    af2c:	b7 95       	ror	r27
    af2e:	f1 11       	cpse	r31, r1
    af30:	f8 cf       	rjmp	.-16     	; 0xaf22 <__floatsisf+0x1c>
    af32:	fa f4       	brpl	.+62     	; 0xaf72 <__floatsisf+0x6c>
    af34:	bb 0f       	add	r27, r27
    af36:	11 f4       	brne	.+4      	; 0xaf3c <__floatsisf+0x36>
    af38:	60 ff       	sbrs	r22, 0
    af3a:	1b c0       	rjmp	.+54     	; 0xaf72 <__floatsisf+0x6c>
    af3c:	6f 5f       	subi	r22, 0xFF	; 255
    af3e:	7f 4f       	sbci	r23, 0xFF	; 255
    af40:	8f 4f       	sbci	r24, 0xFF	; 255
    af42:	9f 4f       	sbci	r25, 0xFF	; 255
    af44:	16 c0       	rjmp	.+44     	; 0xaf72 <__floatsisf+0x6c>
    af46:	88 23       	and	r24, r24
    af48:	11 f0       	breq	.+4      	; 0xaf4e <__floatsisf+0x48>
    af4a:	96 e9       	ldi	r25, 0x96	; 150
    af4c:	11 c0       	rjmp	.+34     	; 0xaf70 <__floatsisf+0x6a>
    af4e:	77 23       	and	r23, r23
    af50:	21 f0       	breq	.+8      	; 0xaf5a <__floatsisf+0x54>
    af52:	9e e8       	ldi	r25, 0x8E	; 142
    af54:	87 2f       	mov	r24, r23
    af56:	76 2f       	mov	r23, r22
    af58:	05 c0       	rjmp	.+10     	; 0xaf64 <__floatsisf+0x5e>
    af5a:	66 23       	and	r22, r22
    af5c:	71 f0       	breq	.+28     	; 0xaf7a <__floatsisf+0x74>
    af5e:	96 e8       	ldi	r25, 0x86	; 134
    af60:	86 2f       	mov	r24, r22
    af62:	70 e0       	ldi	r23, 0x00	; 0
    af64:	60 e0       	ldi	r22, 0x00	; 0
    af66:	2a f0       	brmi	.+10     	; 0xaf72 <__floatsisf+0x6c>
    af68:	9a 95       	dec	r25
    af6a:	66 0f       	add	r22, r22
    af6c:	77 1f       	adc	r23, r23
    af6e:	88 1f       	adc	r24, r24
    af70:	da f7       	brpl	.-10     	; 0xaf68 <__floatsisf+0x62>
    af72:	88 0f       	add	r24, r24
    af74:	96 95       	lsr	r25
    af76:	87 95       	ror	r24
    af78:	97 f9       	bld	r25, 7
    af7a:	08 95       	ret

0000af7c <__fp_cmp>:
    af7c:	99 0f       	add	r25, r25
    af7e:	00 08       	sbc	r0, r0
    af80:	55 0f       	add	r21, r21
    af82:	aa 0b       	sbc	r26, r26
    af84:	e0 e8       	ldi	r30, 0x80	; 128
    af86:	fe ef       	ldi	r31, 0xFE	; 254
    af88:	16 16       	cp	r1, r22
    af8a:	17 06       	cpc	r1, r23
    af8c:	e8 07       	cpc	r30, r24
    af8e:	f9 07       	cpc	r31, r25
    af90:	c0 f0       	brcs	.+48     	; 0xafc2 <__fp_cmp+0x46>
    af92:	12 16       	cp	r1, r18
    af94:	13 06       	cpc	r1, r19
    af96:	e4 07       	cpc	r30, r20
    af98:	f5 07       	cpc	r31, r21
    af9a:	98 f0       	brcs	.+38     	; 0xafc2 <__fp_cmp+0x46>
    af9c:	62 1b       	sub	r22, r18
    af9e:	73 0b       	sbc	r23, r19
    afa0:	84 0b       	sbc	r24, r20
    afa2:	95 0b       	sbc	r25, r21
    afa4:	39 f4       	brne	.+14     	; 0xafb4 <__fp_cmp+0x38>
    afa6:	0a 26       	eor	r0, r26
    afa8:	61 f0       	breq	.+24     	; 0xafc2 <__fp_cmp+0x46>
    afaa:	23 2b       	or	r18, r19
    afac:	24 2b       	or	r18, r20
    afae:	25 2b       	or	r18, r21
    afb0:	21 f4       	brne	.+8      	; 0xafba <__fp_cmp+0x3e>
    afb2:	08 95       	ret
    afb4:	0a 26       	eor	r0, r26
    afb6:	09 f4       	brne	.+2      	; 0xafba <__fp_cmp+0x3e>
    afb8:	a1 40       	sbci	r26, 0x01	; 1
    afba:	a6 95       	lsr	r26
    afbc:	8f ef       	ldi	r24, 0xFF	; 255
    afbe:	81 1d       	adc	r24, r1
    afc0:	81 1d       	adc	r24, r1
    afc2:	08 95       	ret

0000afc4 <__fp_inf>:
    afc4:	97 f9       	bld	r25, 7
    afc6:	9f 67       	ori	r25, 0x7F	; 127
    afc8:	80 e8       	ldi	r24, 0x80	; 128
    afca:	70 e0       	ldi	r23, 0x00	; 0
    afcc:	60 e0       	ldi	r22, 0x00	; 0
    afce:	08 95       	ret

0000afd0 <__fp_nan>:
    afd0:	9f ef       	ldi	r25, 0xFF	; 255
    afd2:	80 ec       	ldi	r24, 0xC0	; 192
    afd4:	08 95       	ret

0000afd6 <__fp_pscA>:
    afd6:	00 24       	eor	r0, r0
    afd8:	0a 94       	dec	r0
    afda:	16 16       	cp	r1, r22
    afdc:	17 06       	cpc	r1, r23
    afde:	18 06       	cpc	r1, r24
    afe0:	09 06       	cpc	r0, r25
    afe2:	08 95       	ret

0000afe4 <__fp_pscB>:
    afe4:	00 24       	eor	r0, r0
    afe6:	0a 94       	dec	r0
    afe8:	12 16       	cp	r1, r18
    afea:	13 06       	cpc	r1, r19
    afec:	14 06       	cpc	r1, r20
    afee:	05 06       	cpc	r0, r21
    aff0:	08 95       	ret

0000aff2 <__fp_round>:
    aff2:	09 2e       	mov	r0, r25
    aff4:	03 94       	inc	r0
    aff6:	00 0c       	add	r0, r0
    aff8:	11 f4       	brne	.+4      	; 0xaffe <__fp_round+0xc>
    affa:	88 23       	and	r24, r24
    affc:	52 f0       	brmi	.+20     	; 0xb012 <__fp_round+0x20>
    affe:	bb 0f       	add	r27, r27
    b000:	40 f4       	brcc	.+16     	; 0xb012 <__fp_round+0x20>
    b002:	bf 2b       	or	r27, r31
    b004:	11 f4       	brne	.+4      	; 0xb00a <__fp_round+0x18>
    b006:	60 ff       	sbrs	r22, 0
    b008:	04 c0       	rjmp	.+8      	; 0xb012 <__fp_round+0x20>
    b00a:	6f 5f       	subi	r22, 0xFF	; 255
    b00c:	7f 4f       	sbci	r23, 0xFF	; 255
    b00e:	8f 4f       	sbci	r24, 0xFF	; 255
    b010:	9f 4f       	sbci	r25, 0xFF	; 255
    b012:	08 95       	ret

0000b014 <__fp_split3>:
    b014:	57 fd       	sbrc	r21, 7
    b016:	90 58       	subi	r25, 0x80	; 128
    b018:	44 0f       	add	r20, r20
    b01a:	55 1f       	adc	r21, r21
    b01c:	59 f0       	breq	.+22     	; 0xb034 <__fp_splitA+0x10>
    b01e:	5f 3f       	cpi	r21, 0xFF	; 255
    b020:	71 f0       	breq	.+28     	; 0xb03e <__fp_splitA+0x1a>
    b022:	47 95       	ror	r20

0000b024 <__fp_splitA>:
    b024:	88 0f       	add	r24, r24
    b026:	97 fb       	bst	r25, 7
    b028:	99 1f       	adc	r25, r25
    b02a:	61 f0       	breq	.+24     	; 0xb044 <__fp_splitA+0x20>
    b02c:	9f 3f       	cpi	r25, 0xFF	; 255
    b02e:	79 f0       	breq	.+30     	; 0xb04e <__fp_splitA+0x2a>
    b030:	87 95       	ror	r24
    b032:	08 95       	ret
    b034:	12 16       	cp	r1, r18
    b036:	13 06       	cpc	r1, r19
    b038:	14 06       	cpc	r1, r20
    b03a:	55 1f       	adc	r21, r21
    b03c:	f2 cf       	rjmp	.-28     	; 0xb022 <__fp_split3+0xe>
    b03e:	46 95       	lsr	r20
    b040:	f1 df       	rcall	.-30     	; 0xb024 <__fp_splitA>
    b042:	08 c0       	rjmp	.+16     	; 0xb054 <__fp_splitA+0x30>
    b044:	16 16       	cp	r1, r22
    b046:	17 06       	cpc	r1, r23
    b048:	18 06       	cpc	r1, r24
    b04a:	99 1f       	adc	r25, r25
    b04c:	f1 cf       	rjmp	.-30     	; 0xb030 <__fp_splitA+0xc>
    b04e:	86 95       	lsr	r24
    b050:	71 05       	cpc	r23, r1
    b052:	61 05       	cpc	r22, r1
    b054:	08 94       	sec
    b056:	08 95       	ret

0000b058 <__fp_zero>:
    b058:	e8 94       	clt

0000b05a <__fp_szero>:
    b05a:	bb 27       	eor	r27, r27
    b05c:	66 27       	eor	r22, r22
    b05e:	77 27       	eor	r23, r23
    b060:	cb 01       	movw	r24, r22
    b062:	97 f9       	bld	r25, 7
    b064:	08 95       	ret

0000b066 <__gesf2>:
    b066:	0e 94 be 57 	call	0xaf7c	; 0xaf7c <__fp_cmp>
    b06a:	08 f4       	brcc	.+2      	; 0xb06e <__gesf2+0x8>
    b06c:	8f ef       	ldi	r24, 0xFF	; 255
    b06e:	08 95       	ret

0000b070 <__mulsf3>:
    b070:	0e 94 4b 58 	call	0xb096	; 0xb096 <__mulsf3x>
    b074:	0c 94 f9 57 	jmp	0xaff2	; 0xaff2 <__fp_round>
    b078:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__fp_pscA>
    b07c:	38 f0       	brcs	.+14     	; 0xb08c <__mulsf3+0x1c>
    b07e:	0e 94 f2 57 	call	0xafe4	; 0xafe4 <__fp_pscB>
    b082:	20 f0       	brcs	.+8      	; 0xb08c <__mulsf3+0x1c>
    b084:	95 23       	and	r25, r21
    b086:	11 f0       	breq	.+4      	; 0xb08c <__mulsf3+0x1c>
    b088:	0c 94 e2 57 	jmp	0xafc4	; 0xafc4 <__fp_inf>
    b08c:	0c 94 e8 57 	jmp	0xafd0	; 0xafd0 <__fp_nan>
    b090:	11 24       	eor	r1, r1
    b092:	0c 94 2d 58 	jmp	0xb05a	; 0xb05a <__fp_szero>

0000b096 <__mulsf3x>:
    b096:	0e 94 0a 58 	call	0xb014	; 0xb014 <__fp_split3>
    b09a:	70 f3       	brcs	.-36     	; 0xb078 <__mulsf3+0x8>

0000b09c <__mulsf3_pse>:
    b09c:	95 9f       	mul	r25, r21
    b09e:	c1 f3       	breq	.-16     	; 0xb090 <__mulsf3+0x20>
    b0a0:	95 0f       	add	r25, r21
    b0a2:	50 e0       	ldi	r21, 0x00	; 0
    b0a4:	55 1f       	adc	r21, r21
    b0a6:	62 9f       	mul	r22, r18
    b0a8:	f0 01       	movw	r30, r0
    b0aa:	72 9f       	mul	r23, r18
    b0ac:	bb 27       	eor	r27, r27
    b0ae:	f0 0d       	add	r31, r0
    b0b0:	b1 1d       	adc	r27, r1
    b0b2:	63 9f       	mul	r22, r19
    b0b4:	aa 27       	eor	r26, r26
    b0b6:	f0 0d       	add	r31, r0
    b0b8:	b1 1d       	adc	r27, r1
    b0ba:	aa 1f       	adc	r26, r26
    b0bc:	64 9f       	mul	r22, r20
    b0be:	66 27       	eor	r22, r22
    b0c0:	b0 0d       	add	r27, r0
    b0c2:	a1 1d       	adc	r26, r1
    b0c4:	66 1f       	adc	r22, r22
    b0c6:	82 9f       	mul	r24, r18
    b0c8:	22 27       	eor	r18, r18
    b0ca:	b0 0d       	add	r27, r0
    b0cc:	a1 1d       	adc	r26, r1
    b0ce:	62 1f       	adc	r22, r18
    b0d0:	73 9f       	mul	r23, r19
    b0d2:	b0 0d       	add	r27, r0
    b0d4:	a1 1d       	adc	r26, r1
    b0d6:	62 1f       	adc	r22, r18
    b0d8:	83 9f       	mul	r24, r19
    b0da:	a0 0d       	add	r26, r0
    b0dc:	61 1d       	adc	r22, r1
    b0de:	22 1f       	adc	r18, r18
    b0e0:	74 9f       	mul	r23, r20
    b0e2:	33 27       	eor	r19, r19
    b0e4:	a0 0d       	add	r26, r0
    b0e6:	61 1d       	adc	r22, r1
    b0e8:	23 1f       	adc	r18, r19
    b0ea:	84 9f       	mul	r24, r20
    b0ec:	60 0d       	add	r22, r0
    b0ee:	21 1d       	adc	r18, r1
    b0f0:	82 2f       	mov	r24, r18
    b0f2:	76 2f       	mov	r23, r22
    b0f4:	6a 2f       	mov	r22, r26
    b0f6:	11 24       	eor	r1, r1
    b0f8:	9f 57       	subi	r25, 0x7F	; 127
    b0fa:	50 40       	sbci	r21, 0x00	; 0
    b0fc:	9a f0       	brmi	.+38     	; 0xb124 <__mulsf3_pse+0x88>
    b0fe:	f1 f0       	breq	.+60     	; 0xb13c <__mulsf3_pse+0xa0>
    b100:	88 23       	and	r24, r24
    b102:	4a f0       	brmi	.+18     	; 0xb116 <__mulsf3_pse+0x7a>
    b104:	ee 0f       	add	r30, r30
    b106:	ff 1f       	adc	r31, r31
    b108:	bb 1f       	adc	r27, r27
    b10a:	66 1f       	adc	r22, r22
    b10c:	77 1f       	adc	r23, r23
    b10e:	88 1f       	adc	r24, r24
    b110:	91 50       	subi	r25, 0x01	; 1
    b112:	50 40       	sbci	r21, 0x00	; 0
    b114:	a9 f7       	brne	.-22     	; 0xb100 <__mulsf3_pse+0x64>
    b116:	9e 3f       	cpi	r25, 0xFE	; 254
    b118:	51 05       	cpc	r21, r1
    b11a:	80 f0       	brcs	.+32     	; 0xb13c <__mulsf3_pse+0xa0>
    b11c:	0c 94 e2 57 	jmp	0xafc4	; 0xafc4 <__fp_inf>
    b120:	0c 94 2d 58 	jmp	0xb05a	; 0xb05a <__fp_szero>
    b124:	5f 3f       	cpi	r21, 0xFF	; 255
    b126:	e4 f3       	brlt	.-8      	; 0xb120 <__mulsf3_pse+0x84>
    b128:	98 3e       	cpi	r25, 0xE8	; 232
    b12a:	d4 f3       	brlt	.-12     	; 0xb120 <__mulsf3_pse+0x84>
    b12c:	86 95       	lsr	r24
    b12e:	77 95       	ror	r23
    b130:	67 95       	ror	r22
    b132:	b7 95       	ror	r27
    b134:	f7 95       	ror	r31
    b136:	e7 95       	ror	r30
    b138:	9f 5f       	subi	r25, 0xFF	; 255
    b13a:	c1 f7       	brne	.-16     	; 0xb12c <__mulsf3_pse+0x90>
    b13c:	fe 2b       	or	r31, r30
    b13e:	88 0f       	add	r24, r24
    b140:	91 1d       	adc	r25, r1
    b142:	96 95       	lsr	r25
    b144:	87 95       	ror	r24
    b146:	97 f9       	bld	r25, 7
    b148:	08 95       	ret

0000b14a <dtostrf>:
    b14a:	ef 92       	push	r14
    b14c:	0f 93       	push	r16
    b14e:	1f 93       	push	r17
    b150:	cf 93       	push	r28
    b152:	df 93       	push	r29
    b154:	e8 01       	movw	r28, r16
    b156:	47 fd       	sbrc	r20, 7
    b158:	02 c0       	rjmp	.+4      	; 0xb15e <dtostrf+0x14>
    b15a:	34 e0       	ldi	r19, 0x04	; 4
    b15c:	01 c0       	rjmp	.+2      	; 0xb160 <dtostrf+0x16>
    b15e:	34 e1       	ldi	r19, 0x14	; 20
    b160:	e4 2f       	mov	r30, r20
    b162:	44 0f       	add	r20, r20
    b164:	ff 0b       	sbc	r31, r31
    b166:	f7 ff       	sbrs	r31, 7
    b168:	03 c0       	rjmp	.+6      	; 0xb170 <dtostrf+0x26>
    b16a:	f1 95       	neg	r31
    b16c:	e1 95       	neg	r30
    b16e:	f1 09       	sbc	r31, r1
    b170:	e3 2e       	mov	r14, r19
    b172:	02 2f       	mov	r16, r18
    b174:	2e 2f       	mov	r18, r30
    b176:	ae 01       	movw	r20, r28
    b178:	0e 94 e0 5a 	call	0xb5c0	; 0xb5c0 <dtoa_prf>
    b17c:	ce 01       	movw	r24, r28
    b17e:	df 91       	pop	r29
    b180:	cf 91       	pop	r28
    b182:	1f 91       	pop	r17
    b184:	0f 91       	pop	r16
    b186:	ef 90       	pop	r14
    b188:	08 95       	ret

0000b18a <atoi>:
    b18a:	fc 01       	movw	r30, r24
    b18c:	88 27       	eor	r24, r24
    b18e:	99 27       	eor	r25, r25
    b190:	e8 94       	clt
    b192:	21 91       	ld	r18, Z+
    b194:	20 32       	cpi	r18, 0x20	; 32
    b196:	e9 f3       	breq	.-6      	; 0xb192 <atoi+0x8>
    b198:	29 30       	cpi	r18, 0x09	; 9
    b19a:	10 f0       	brcs	.+4      	; 0xb1a0 <atoi+0x16>
    b19c:	2e 30       	cpi	r18, 0x0E	; 14
    b19e:	c8 f3       	brcs	.-14     	; 0xb192 <atoi+0x8>
    b1a0:	2b 32       	cpi	r18, 0x2B	; 43
    b1a2:	41 f0       	breq	.+16     	; 0xb1b4 <atoi+0x2a>
    b1a4:	2d 32       	cpi	r18, 0x2D	; 45
    b1a6:	39 f4       	brne	.+14     	; 0xb1b6 <atoi+0x2c>
    b1a8:	68 94       	set
    b1aa:	04 c0       	rjmp	.+8      	; 0xb1b4 <atoi+0x2a>
    b1ac:	0e 94 e3 58 	call	0xb1c6	; 0xb1c6 <__mulhi_const_10>
    b1b0:	82 0f       	add	r24, r18
    b1b2:	91 1d       	adc	r25, r1
    b1b4:	21 91       	ld	r18, Z+
    b1b6:	20 53       	subi	r18, 0x30	; 48
    b1b8:	2a 30       	cpi	r18, 0x0A	; 10
    b1ba:	c0 f3       	brcs	.-16     	; 0xb1ac <atoi+0x22>
    b1bc:	1e f4       	brtc	.+6      	; 0xb1c4 <atoi+0x3a>
    b1be:	90 95       	com	r25
    b1c0:	81 95       	neg	r24
    b1c2:	9f 4f       	sbci	r25, 0xFF	; 255
    b1c4:	08 95       	ret

0000b1c6 <__mulhi_const_10>:
    b1c6:	7a e0       	ldi	r23, 0x0A	; 10
    b1c8:	97 9f       	mul	r25, r23
    b1ca:	90 2d       	mov	r25, r0
    b1cc:	87 9f       	mul	r24, r23
    b1ce:	80 2d       	mov	r24, r0
    b1d0:	91 0d       	add	r25, r1
    b1d2:	11 24       	eor	r1, r1
    b1d4:	08 95       	ret

0000b1d6 <sprintf>:
    b1d6:	ae e0       	ldi	r26, 0x0E	; 14
    b1d8:	b0 e0       	ldi	r27, 0x00	; 0
    b1da:	e1 ef       	ldi	r30, 0xF1	; 241
    b1dc:	f8 e5       	ldi	r31, 0x58	; 88
    b1de:	0c 94 3f 5e 	jmp	0xbc7e	; 0xbc7e <__prologue_saves__+0x1c>
    b1e2:	0d 89       	ldd	r16, Y+21	; 0x15
    b1e4:	1e 89       	ldd	r17, Y+22	; 0x16
    b1e6:	86 e0       	ldi	r24, 0x06	; 6
    b1e8:	8c 83       	std	Y+4, r24	; 0x04
    b1ea:	1a 83       	std	Y+2, r17	; 0x02
    b1ec:	09 83       	std	Y+1, r16	; 0x01
    b1ee:	8f ef       	ldi	r24, 0xFF	; 255
    b1f0:	9f e7       	ldi	r25, 0x7F	; 127
    b1f2:	9e 83       	std	Y+6, r25	; 0x06
    b1f4:	8d 83       	std	Y+5, r24	; 0x05
    b1f6:	ae 01       	movw	r20, r28
    b1f8:	47 5e       	subi	r20, 0xE7	; 231
    b1fa:	5f 4f       	sbci	r21, 0xFF	; 255
    b1fc:	6f 89       	ldd	r22, Y+23	; 0x17
    b1fe:	78 8d       	ldd	r23, Y+24	; 0x18
    b200:	ce 01       	movw	r24, r28
    b202:	01 96       	adiw	r24, 0x01	; 1
    b204:	0e 94 0e 59 	call	0xb21c	; 0xb21c <vfprintf>
    b208:	2f 81       	ldd	r18, Y+7	; 0x07
    b20a:	38 85       	ldd	r19, Y+8	; 0x08
    b20c:	f8 01       	movw	r30, r16
    b20e:	e2 0f       	add	r30, r18
    b210:	f3 1f       	adc	r31, r19
    b212:	10 82       	st	Z, r1
    b214:	2e 96       	adiw	r28, 0x0e	; 14
    b216:	e4 e0       	ldi	r30, 0x04	; 4
    b218:	0c 94 5b 5e 	jmp	0xbcb6	; 0xbcb6 <__epilogue_restores__+0x1c>

0000b21c <vfprintf>:
    b21c:	ac e0       	ldi	r26, 0x0C	; 12
    b21e:	b0 e0       	ldi	r27, 0x00	; 0
    b220:	e4 e1       	ldi	r30, 0x14	; 20
    b222:	f9 e5       	ldi	r31, 0x59	; 89
    b224:	0c 94 31 5e 	jmp	0xbc62	; 0xbc62 <__prologue_saves__>
    b228:	7c 01       	movw	r14, r24
    b22a:	6b 01       	movw	r12, r22
    b22c:	8a 01       	movw	r16, r20
    b22e:	fc 01       	movw	r30, r24
    b230:	17 82       	std	Z+7, r1	; 0x07
    b232:	16 82       	std	Z+6, r1	; 0x06
    b234:	83 81       	ldd	r24, Z+3	; 0x03
    b236:	81 ff       	sbrs	r24, 1
    b238:	bd c1       	rjmp	.+890    	; 0xb5b4 <vfprintf+0x398>
    b23a:	ce 01       	movw	r24, r28
    b23c:	01 96       	adiw	r24, 0x01	; 1
    b23e:	4c 01       	movw	r8, r24
    b240:	f7 01       	movw	r30, r14
    b242:	93 81       	ldd	r25, Z+3	; 0x03
    b244:	f6 01       	movw	r30, r12
    b246:	93 fd       	sbrc	r25, 3
    b248:	85 91       	lpm	r24, Z+
    b24a:	93 ff       	sbrs	r25, 3
    b24c:	81 91       	ld	r24, Z+
    b24e:	6f 01       	movw	r12, r30
    b250:	88 23       	and	r24, r24
    b252:	09 f4       	brne	.+2      	; 0xb256 <vfprintf+0x3a>
    b254:	ab c1       	rjmp	.+854    	; 0xb5ac <vfprintf+0x390>
    b256:	85 32       	cpi	r24, 0x25	; 37
    b258:	39 f4       	brne	.+14     	; 0xb268 <vfprintf+0x4c>
    b25a:	93 fd       	sbrc	r25, 3
    b25c:	85 91       	lpm	r24, Z+
    b25e:	93 ff       	sbrs	r25, 3
    b260:	81 91       	ld	r24, Z+
    b262:	6f 01       	movw	r12, r30
    b264:	85 32       	cpi	r24, 0x25	; 37
    b266:	29 f4       	brne	.+10     	; 0xb272 <vfprintf+0x56>
    b268:	b7 01       	movw	r22, r14
    b26a:	90 e0       	ldi	r25, 0x00	; 0
    b26c:	0e 94 5c 5d 	call	0xbab8	; 0xbab8 <fputc>
    b270:	e7 cf       	rjmp	.-50     	; 0xb240 <vfprintf+0x24>
    b272:	51 2c       	mov	r5, r1
    b274:	31 2c       	mov	r3, r1
    b276:	20 e0       	ldi	r18, 0x00	; 0
    b278:	20 32       	cpi	r18, 0x20	; 32
    b27a:	a0 f4       	brcc	.+40     	; 0xb2a4 <vfprintf+0x88>
    b27c:	8b 32       	cpi	r24, 0x2B	; 43
    b27e:	69 f0       	breq	.+26     	; 0xb29a <vfprintf+0x7e>
    b280:	30 f4       	brcc	.+12     	; 0xb28e <vfprintf+0x72>
    b282:	80 32       	cpi	r24, 0x20	; 32
    b284:	59 f0       	breq	.+22     	; 0xb29c <vfprintf+0x80>
    b286:	83 32       	cpi	r24, 0x23	; 35
    b288:	69 f4       	brne	.+26     	; 0xb2a4 <vfprintf+0x88>
    b28a:	20 61       	ori	r18, 0x10	; 16
    b28c:	2c c0       	rjmp	.+88     	; 0xb2e6 <vfprintf+0xca>
    b28e:	8d 32       	cpi	r24, 0x2D	; 45
    b290:	39 f0       	breq	.+14     	; 0xb2a0 <vfprintf+0x84>
    b292:	80 33       	cpi	r24, 0x30	; 48
    b294:	39 f4       	brne	.+14     	; 0xb2a4 <vfprintf+0x88>
    b296:	21 60       	ori	r18, 0x01	; 1
    b298:	26 c0       	rjmp	.+76     	; 0xb2e6 <vfprintf+0xca>
    b29a:	22 60       	ori	r18, 0x02	; 2
    b29c:	24 60       	ori	r18, 0x04	; 4
    b29e:	23 c0       	rjmp	.+70     	; 0xb2e6 <vfprintf+0xca>
    b2a0:	28 60       	ori	r18, 0x08	; 8
    b2a2:	21 c0       	rjmp	.+66     	; 0xb2e6 <vfprintf+0xca>
    b2a4:	27 fd       	sbrc	r18, 7
    b2a6:	27 c0       	rjmp	.+78     	; 0xb2f6 <vfprintf+0xda>
    b2a8:	30 ed       	ldi	r19, 0xD0	; 208
    b2aa:	38 0f       	add	r19, r24
    b2ac:	3a 30       	cpi	r19, 0x0A	; 10
    b2ae:	78 f4       	brcc	.+30     	; 0xb2ce <vfprintf+0xb2>
    b2b0:	26 ff       	sbrs	r18, 6
    b2b2:	06 c0       	rjmp	.+12     	; 0xb2c0 <vfprintf+0xa4>
    b2b4:	fa e0       	ldi	r31, 0x0A	; 10
    b2b6:	5f 9e       	mul	r5, r31
    b2b8:	30 0d       	add	r19, r0
    b2ba:	11 24       	eor	r1, r1
    b2bc:	53 2e       	mov	r5, r19
    b2be:	13 c0       	rjmp	.+38     	; 0xb2e6 <vfprintf+0xca>
    b2c0:	8a e0       	ldi	r24, 0x0A	; 10
    b2c2:	38 9e       	mul	r3, r24
    b2c4:	30 0d       	add	r19, r0
    b2c6:	11 24       	eor	r1, r1
    b2c8:	33 2e       	mov	r3, r19
    b2ca:	20 62       	ori	r18, 0x20	; 32
    b2cc:	0c c0       	rjmp	.+24     	; 0xb2e6 <vfprintf+0xca>
    b2ce:	8e 32       	cpi	r24, 0x2E	; 46
    b2d0:	21 f4       	brne	.+8      	; 0xb2da <vfprintf+0xbe>
    b2d2:	26 fd       	sbrc	r18, 6
    b2d4:	6b c1       	rjmp	.+726    	; 0xb5ac <vfprintf+0x390>
    b2d6:	20 64       	ori	r18, 0x40	; 64
    b2d8:	06 c0       	rjmp	.+12     	; 0xb2e6 <vfprintf+0xca>
    b2da:	8c 36       	cpi	r24, 0x6C	; 108
    b2dc:	11 f4       	brne	.+4      	; 0xb2e2 <vfprintf+0xc6>
    b2de:	20 68       	ori	r18, 0x80	; 128
    b2e0:	02 c0       	rjmp	.+4      	; 0xb2e6 <vfprintf+0xca>
    b2e2:	88 36       	cpi	r24, 0x68	; 104
    b2e4:	41 f4       	brne	.+16     	; 0xb2f6 <vfprintf+0xda>
    b2e6:	f6 01       	movw	r30, r12
    b2e8:	93 fd       	sbrc	r25, 3
    b2ea:	85 91       	lpm	r24, Z+
    b2ec:	93 ff       	sbrs	r25, 3
    b2ee:	81 91       	ld	r24, Z+
    b2f0:	6f 01       	movw	r12, r30
    b2f2:	81 11       	cpse	r24, r1
    b2f4:	c1 cf       	rjmp	.-126    	; 0xb278 <vfprintf+0x5c>
    b2f6:	98 2f       	mov	r25, r24
    b2f8:	9f 7d       	andi	r25, 0xDF	; 223
    b2fa:	95 54       	subi	r25, 0x45	; 69
    b2fc:	93 30       	cpi	r25, 0x03	; 3
    b2fe:	28 f4       	brcc	.+10     	; 0xb30a <vfprintf+0xee>
    b300:	0c 5f       	subi	r16, 0xFC	; 252
    b302:	1f 4f       	sbci	r17, 0xFF	; 255
    b304:	ff e3       	ldi	r31, 0x3F	; 63
    b306:	f9 83       	std	Y+1, r31	; 0x01
    b308:	0d c0       	rjmp	.+26     	; 0xb324 <vfprintf+0x108>
    b30a:	83 36       	cpi	r24, 0x63	; 99
    b30c:	31 f0       	breq	.+12     	; 0xb31a <vfprintf+0xfe>
    b30e:	83 37       	cpi	r24, 0x73	; 115
    b310:	71 f0       	breq	.+28     	; 0xb32e <vfprintf+0x112>
    b312:	83 35       	cpi	r24, 0x53	; 83
    b314:	09 f0       	breq	.+2      	; 0xb318 <vfprintf+0xfc>
    b316:	5b c0       	rjmp	.+182    	; 0xb3ce <vfprintf+0x1b2>
    b318:	22 c0       	rjmp	.+68     	; 0xb35e <vfprintf+0x142>
    b31a:	f8 01       	movw	r30, r16
    b31c:	80 81       	ld	r24, Z
    b31e:	89 83       	std	Y+1, r24	; 0x01
    b320:	0e 5f       	subi	r16, 0xFE	; 254
    b322:	1f 4f       	sbci	r17, 0xFF	; 255
    b324:	44 24       	eor	r4, r4
    b326:	43 94       	inc	r4
    b328:	51 2c       	mov	r5, r1
    b32a:	54 01       	movw	r10, r8
    b32c:	15 c0       	rjmp	.+42     	; 0xb358 <vfprintf+0x13c>
    b32e:	38 01       	movw	r6, r16
    b330:	f2 e0       	ldi	r31, 0x02	; 2
    b332:	6f 0e       	add	r6, r31
    b334:	71 1c       	adc	r7, r1
    b336:	f8 01       	movw	r30, r16
    b338:	a0 80       	ld	r10, Z
    b33a:	b1 80       	ldd	r11, Z+1	; 0x01
    b33c:	26 ff       	sbrs	r18, 6
    b33e:	03 c0       	rjmp	.+6      	; 0xb346 <vfprintf+0x12a>
    b340:	65 2d       	mov	r22, r5
    b342:	70 e0       	ldi	r23, 0x00	; 0
    b344:	02 c0       	rjmp	.+4      	; 0xb34a <vfprintf+0x12e>
    b346:	6f ef       	ldi	r22, 0xFF	; 255
    b348:	7f ef       	ldi	r23, 0xFF	; 255
    b34a:	c5 01       	movw	r24, r10
    b34c:	2c 87       	std	Y+12, r18	; 0x0c
    b34e:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <strnlen>
    b352:	2c 01       	movw	r4, r24
    b354:	83 01       	movw	r16, r6
    b356:	2c 85       	ldd	r18, Y+12	; 0x0c
    b358:	2f 77       	andi	r18, 0x7F	; 127
    b35a:	22 2e       	mov	r2, r18
    b35c:	17 c0       	rjmp	.+46     	; 0xb38c <vfprintf+0x170>
    b35e:	38 01       	movw	r6, r16
    b360:	f2 e0       	ldi	r31, 0x02	; 2
    b362:	6f 0e       	add	r6, r31
    b364:	71 1c       	adc	r7, r1
    b366:	f8 01       	movw	r30, r16
    b368:	a0 80       	ld	r10, Z
    b36a:	b1 80       	ldd	r11, Z+1	; 0x01
    b36c:	26 ff       	sbrs	r18, 6
    b36e:	03 c0       	rjmp	.+6      	; 0xb376 <vfprintf+0x15a>
    b370:	65 2d       	mov	r22, r5
    b372:	70 e0       	ldi	r23, 0x00	; 0
    b374:	02 c0       	rjmp	.+4      	; 0xb37a <vfprintf+0x15e>
    b376:	6f ef       	ldi	r22, 0xFF	; 255
    b378:	7f ef       	ldi	r23, 0xFF	; 255
    b37a:	c5 01       	movw	r24, r10
    b37c:	2c 87       	std	Y+12, r18	; 0x0c
    b37e:	0e 94 46 5d 	call	0xba8c	; 0xba8c <strnlen_P>
    b382:	2c 01       	movw	r4, r24
    b384:	2c 85       	ldd	r18, Y+12	; 0x0c
    b386:	20 68       	ori	r18, 0x80	; 128
    b388:	22 2e       	mov	r2, r18
    b38a:	83 01       	movw	r16, r6
    b38c:	23 fc       	sbrc	r2, 3
    b38e:	1b c0       	rjmp	.+54     	; 0xb3c6 <vfprintf+0x1aa>
    b390:	83 2d       	mov	r24, r3
    b392:	90 e0       	ldi	r25, 0x00	; 0
    b394:	48 16       	cp	r4, r24
    b396:	59 06       	cpc	r5, r25
    b398:	b0 f4       	brcc	.+44     	; 0xb3c6 <vfprintf+0x1aa>
    b39a:	b7 01       	movw	r22, r14
    b39c:	80 e2       	ldi	r24, 0x20	; 32
    b39e:	90 e0       	ldi	r25, 0x00	; 0
    b3a0:	0e 94 5c 5d 	call	0xbab8	; 0xbab8 <fputc>
    b3a4:	3a 94       	dec	r3
    b3a6:	f4 cf       	rjmp	.-24     	; 0xb390 <vfprintf+0x174>
    b3a8:	f5 01       	movw	r30, r10
    b3aa:	27 fc       	sbrc	r2, 7
    b3ac:	85 91       	lpm	r24, Z+
    b3ae:	27 fe       	sbrs	r2, 7
    b3b0:	81 91       	ld	r24, Z+
    b3b2:	5f 01       	movw	r10, r30
    b3b4:	b7 01       	movw	r22, r14
    b3b6:	90 e0       	ldi	r25, 0x00	; 0
    b3b8:	0e 94 5c 5d 	call	0xbab8	; 0xbab8 <fputc>
    b3bc:	31 10       	cpse	r3, r1
    b3be:	3a 94       	dec	r3
    b3c0:	f1 e0       	ldi	r31, 0x01	; 1
    b3c2:	4f 1a       	sub	r4, r31
    b3c4:	51 08       	sbc	r5, r1
    b3c6:	41 14       	cp	r4, r1
    b3c8:	51 04       	cpc	r5, r1
    b3ca:	71 f7       	brne	.-36     	; 0xb3a8 <vfprintf+0x18c>
    b3cc:	e5 c0       	rjmp	.+458    	; 0xb598 <vfprintf+0x37c>
    b3ce:	84 36       	cpi	r24, 0x64	; 100
    b3d0:	11 f0       	breq	.+4      	; 0xb3d6 <vfprintf+0x1ba>
    b3d2:	89 36       	cpi	r24, 0x69	; 105
    b3d4:	39 f5       	brne	.+78     	; 0xb424 <vfprintf+0x208>
    b3d6:	f8 01       	movw	r30, r16
    b3d8:	27 ff       	sbrs	r18, 7
    b3da:	07 c0       	rjmp	.+14     	; 0xb3ea <vfprintf+0x1ce>
    b3dc:	60 81       	ld	r22, Z
    b3de:	71 81       	ldd	r23, Z+1	; 0x01
    b3e0:	82 81       	ldd	r24, Z+2	; 0x02
    b3e2:	93 81       	ldd	r25, Z+3	; 0x03
    b3e4:	0c 5f       	subi	r16, 0xFC	; 252
    b3e6:	1f 4f       	sbci	r17, 0xFF	; 255
    b3e8:	08 c0       	rjmp	.+16     	; 0xb3fa <vfprintf+0x1de>
    b3ea:	60 81       	ld	r22, Z
    b3ec:	71 81       	ldd	r23, Z+1	; 0x01
    b3ee:	07 2e       	mov	r0, r23
    b3f0:	00 0c       	add	r0, r0
    b3f2:	88 0b       	sbc	r24, r24
    b3f4:	99 0b       	sbc	r25, r25
    b3f6:	0e 5f       	subi	r16, 0xFE	; 254
    b3f8:	1f 4f       	sbci	r17, 0xFF	; 255
    b3fa:	2f 76       	andi	r18, 0x6F	; 111
    b3fc:	72 2e       	mov	r7, r18
    b3fe:	97 ff       	sbrs	r25, 7
    b400:	09 c0       	rjmp	.+18     	; 0xb414 <vfprintf+0x1f8>
    b402:	90 95       	com	r25
    b404:	80 95       	com	r24
    b406:	70 95       	com	r23
    b408:	61 95       	neg	r22
    b40a:	7f 4f       	sbci	r23, 0xFF	; 255
    b40c:	8f 4f       	sbci	r24, 0xFF	; 255
    b40e:	9f 4f       	sbci	r25, 0xFF	; 255
    b410:	20 68       	ori	r18, 0x80	; 128
    b412:	72 2e       	mov	r7, r18
    b414:	2a e0       	ldi	r18, 0x0A	; 10
    b416:	30 e0       	ldi	r19, 0x00	; 0
    b418:	a4 01       	movw	r20, r8
    b41a:	0e 94 94 5d 	call	0xbb28	; 0xbb28 <__ultoa_invert>
    b41e:	a8 2e       	mov	r10, r24
    b420:	a8 18       	sub	r10, r8
    b422:	44 c0       	rjmp	.+136    	; 0xb4ac <vfprintf+0x290>
    b424:	85 37       	cpi	r24, 0x75	; 117
    b426:	29 f4       	brne	.+10     	; 0xb432 <vfprintf+0x216>
    b428:	2f 7e       	andi	r18, 0xEF	; 239
    b42a:	b2 2e       	mov	r11, r18
    b42c:	2a e0       	ldi	r18, 0x0A	; 10
    b42e:	30 e0       	ldi	r19, 0x00	; 0
    b430:	25 c0       	rjmp	.+74     	; 0xb47c <vfprintf+0x260>
    b432:	f2 2f       	mov	r31, r18
    b434:	f9 7f       	andi	r31, 0xF9	; 249
    b436:	bf 2e       	mov	r11, r31
    b438:	8f 36       	cpi	r24, 0x6F	; 111
    b43a:	c1 f0       	breq	.+48     	; 0xb46c <vfprintf+0x250>
    b43c:	18 f4       	brcc	.+6      	; 0xb444 <vfprintf+0x228>
    b43e:	88 35       	cpi	r24, 0x58	; 88
    b440:	79 f0       	breq	.+30     	; 0xb460 <vfprintf+0x244>
    b442:	b4 c0       	rjmp	.+360    	; 0xb5ac <vfprintf+0x390>
    b444:	80 37       	cpi	r24, 0x70	; 112
    b446:	19 f0       	breq	.+6      	; 0xb44e <vfprintf+0x232>
    b448:	88 37       	cpi	r24, 0x78	; 120
    b44a:	21 f0       	breq	.+8      	; 0xb454 <vfprintf+0x238>
    b44c:	af c0       	rjmp	.+350    	; 0xb5ac <vfprintf+0x390>
    b44e:	2f 2f       	mov	r18, r31
    b450:	20 61       	ori	r18, 0x10	; 16
    b452:	b2 2e       	mov	r11, r18
    b454:	b4 fe       	sbrs	r11, 4
    b456:	0d c0       	rjmp	.+26     	; 0xb472 <vfprintf+0x256>
    b458:	8b 2d       	mov	r24, r11
    b45a:	84 60       	ori	r24, 0x04	; 4
    b45c:	b8 2e       	mov	r11, r24
    b45e:	09 c0       	rjmp	.+18     	; 0xb472 <vfprintf+0x256>
    b460:	24 ff       	sbrs	r18, 4
    b462:	0a c0       	rjmp	.+20     	; 0xb478 <vfprintf+0x25c>
    b464:	9f 2f       	mov	r25, r31
    b466:	96 60       	ori	r25, 0x06	; 6
    b468:	b9 2e       	mov	r11, r25
    b46a:	06 c0       	rjmp	.+12     	; 0xb478 <vfprintf+0x25c>
    b46c:	28 e0       	ldi	r18, 0x08	; 8
    b46e:	30 e0       	ldi	r19, 0x00	; 0
    b470:	05 c0       	rjmp	.+10     	; 0xb47c <vfprintf+0x260>
    b472:	20 e1       	ldi	r18, 0x10	; 16
    b474:	30 e0       	ldi	r19, 0x00	; 0
    b476:	02 c0       	rjmp	.+4      	; 0xb47c <vfprintf+0x260>
    b478:	20 e1       	ldi	r18, 0x10	; 16
    b47a:	32 e0       	ldi	r19, 0x02	; 2
    b47c:	f8 01       	movw	r30, r16
    b47e:	b7 fe       	sbrs	r11, 7
    b480:	07 c0       	rjmp	.+14     	; 0xb490 <vfprintf+0x274>
    b482:	60 81       	ld	r22, Z
    b484:	71 81       	ldd	r23, Z+1	; 0x01
    b486:	82 81       	ldd	r24, Z+2	; 0x02
    b488:	93 81       	ldd	r25, Z+3	; 0x03
    b48a:	0c 5f       	subi	r16, 0xFC	; 252
    b48c:	1f 4f       	sbci	r17, 0xFF	; 255
    b48e:	06 c0       	rjmp	.+12     	; 0xb49c <vfprintf+0x280>
    b490:	60 81       	ld	r22, Z
    b492:	71 81       	ldd	r23, Z+1	; 0x01
    b494:	80 e0       	ldi	r24, 0x00	; 0
    b496:	90 e0       	ldi	r25, 0x00	; 0
    b498:	0e 5f       	subi	r16, 0xFE	; 254
    b49a:	1f 4f       	sbci	r17, 0xFF	; 255
    b49c:	a4 01       	movw	r20, r8
    b49e:	0e 94 94 5d 	call	0xbb28	; 0xbb28 <__ultoa_invert>
    b4a2:	a8 2e       	mov	r10, r24
    b4a4:	a8 18       	sub	r10, r8
    b4a6:	fb 2d       	mov	r31, r11
    b4a8:	ff 77       	andi	r31, 0x7F	; 127
    b4aa:	7f 2e       	mov	r7, r31
    b4ac:	76 fe       	sbrs	r7, 6
    b4ae:	0b c0       	rjmp	.+22     	; 0xb4c6 <vfprintf+0x2aa>
    b4b0:	37 2d       	mov	r19, r7
    b4b2:	3e 7f       	andi	r19, 0xFE	; 254
    b4b4:	a5 14       	cp	r10, r5
    b4b6:	50 f4       	brcc	.+20     	; 0xb4cc <vfprintf+0x2b0>
    b4b8:	74 fe       	sbrs	r7, 4
    b4ba:	0a c0       	rjmp	.+20     	; 0xb4d0 <vfprintf+0x2b4>
    b4bc:	72 fc       	sbrc	r7, 2
    b4be:	08 c0       	rjmp	.+16     	; 0xb4d0 <vfprintf+0x2b4>
    b4c0:	37 2d       	mov	r19, r7
    b4c2:	3e 7e       	andi	r19, 0xEE	; 238
    b4c4:	05 c0       	rjmp	.+10     	; 0xb4d0 <vfprintf+0x2b4>
    b4c6:	ba 2c       	mov	r11, r10
    b4c8:	37 2d       	mov	r19, r7
    b4ca:	03 c0       	rjmp	.+6      	; 0xb4d2 <vfprintf+0x2b6>
    b4cc:	ba 2c       	mov	r11, r10
    b4ce:	01 c0       	rjmp	.+2      	; 0xb4d2 <vfprintf+0x2b6>
    b4d0:	b5 2c       	mov	r11, r5
    b4d2:	34 ff       	sbrs	r19, 4
    b4d4:	0d c0       	rjmp	.+26     	; 0xb4f0 <vfprintf+0x2d4>
    b4d6:	fe 01       	movw	r30, r28
    b4d8:	ea 0d       	add	r30, r10
    b4da:	f1 1d       	adc	r31, r1
    b4dc:	80 81       	ld	r24, Z
    b4de:	80 33       	cpi	r24, 0x30	; 48
    b4e0:	11 f4       	brne	.+4      	; 0xb4e6 <vfprintf+0x2ca>
    b4e2:	39 7e       	andi	r19, 0xE9	; 233
    b4e4:	09 c0       	rjmp	.+18     	; 0xb4f8 <vfprintf+0x2dc>
    b4e6:	32 ff       	sbrs	r19, 2
    b4e8:	06 c0       	rjmp	.+12     	; 0xb4f6 <vfprintf+0x2da>
    b4ea:	b3 94       	inc	r11
    b4ec:	b3 94       	inc	r11
    b4ee:	04 c0       	rjmp	.+8      	; 0xb4f8 <vfprintf+0x2dc>
    b4f0:	83 2f       	mov	r24, r19
    b4f2:	86 78       	andi	r24, 0x86	; 134
    b4f4:	09 f0       	breq	.+2      	; 0xb4f8 <vfprintf+0x2dc>
    b4f6:	b3 94       	inc	r11
    b4f8:	33 fd       	sbrc	r19, 3
    b4fa:	13 c0       	rjmp	.+38     	; 0xb522 <vfprintf+0x306>
    b4fc:	30 ff       	sbrs	r19, 0
    b4fe:	06 c0       	rjmp	.+12     	; 0xb50c <vfprintf+0x2f0>
    b500:	5a 2c       	mov	r5, r10
    b502:	b3 14       	cp	r11, r3
    b504:	18 f4       	brcc	.+6      	; 0xb50c <vfprintf+0x2f0>
    b506:	53 0c       	add	r5, r3
    b508:	5b 18       	sub	r5, r11
    b50a:	b3 2c       	mov	r11, r3
    b50c:	b3 14       	cp	r11, r3
    b50e:	68 f4       	brcc	.+26     	; 0xb52a <vfprintf+0x30e>
    b510:	b7 01       	movw	r22, r14
    b512:	80 e2       	ldi	r24, 0x20	; 32
    b514:	90 e0       	ldi	r25, 0x00	; 0
    b516:	3c 87       	std	Y+12, r19	; 0x0c
    b518:	0e 94 5c 5d 	call	0xbab8	; 0xbab8 <fputc>
    b51c:	b3 94       	inc	r11
    b51e:	3c 85       	ldd	r19, Y+12	; 0x0c
    b520:	f5 cf       	rjmp	.-22     	; 0xb50c <vfprintf+0x2f0>
    b522:	b3 14       	cp	r11, r3
    b524:	10 f4       	brcc	.+4      	; 0xb52a <vfprintf+0x30e>
    b526:	3b 18       	sub	r3, r11
    b528:	01 c0       	rjmp	.+2      	; 0xb52c <vfprintf+0x310>
    b52a:	31 2c       	mov	r3, r1
    b52c:	34 ff       	sbrs	r19, 4
    b52e:	12 c0       	rjmp	.+36     	; 0xb554 <vfprintf+0x338>
    b530:	b7 01       	movw	r22, r14
    b532:	80 e3       	ldi	r24, 0x30	; 48
    b534:	90 e0       	ldi	r25, 0x00	; 0
    b536:	3c 87       	std	Y+12, r19	; 0x0c
    b538:	0e 94 5c 5d 	call	0xbab8	; 0xbab8 <fputc>
    b53c:	3c 85       	ldd	r19, Y+12	; 0x0c
    b53e:	32 ff       	sbrs	r19, 2
    b540:	17 c0       	rjmp	.+46     	; 0xb570 <vfprintf+0x354>
    b542:	31 fd       	sbrc	r19, 1
    b544:	03 c0       	rjmp	.+6      	; 0xb54c <vfprintf+0x330>
    b546:	88 e7       	ldi	r24, 0x78	; 120
    b548:	90 e0       	ldi	r25, 0x00	; 0
    b54a:	02 c0       	rjmp	.+4      	; 0xb550 <vfprintf+0x334>
    b54c:	88 e5       	ldi	r24, 0x58	; 88
    b54e:	90 e0       	ldi	r25, 0x00	; 0
    b550:	b7 01       	movw	r22, r14
    b552:	0c c0       	rjmp	.+24     	; 0xb56c <vfprintf+0x350>
    b554:	83 2f       	mov	r24, r19
    b556:	86 78       	andi	r24, 0x86	; 134
    b558:	59 f0       	breq	.+22     	; 0xb570 <vfprintf+0x354>
    b55a:	31 ff       	sbrs	r19, 1
    b55c:	02 c0       	rjmp	.+4      	; 0xb562 <vfprintf+0x346>
    b55e:	8b e2       	ldi	r24, 0x2B	; 43
    b560:	01 c0       	rjmp	.+2      	; 0xb564 <vfprintf+0x348>
    b562:	80 e2       	ldi	r24, 0x20	; 32
    b564:	37 fd       	sbrc	r19, 7
    b566:	8d e2       	ldi	r24, 0x2D	; 45
    b568:	b7 01       	movw	r22, r14
    b56a:	90 e0       	ldi	r25, 0x00	; 0
    b56c:	0e 94 5c 5d 	call	0xbab8	; 0xbab8 <fputc>
    b570:	a5 14       	cp	r10, r5
    b572:	38 f4       	brcc	.+14     	; 0xb582 <vfprintf+0x366>
    b574:	b7 01       	movw	r22, r14
    b576:	80 e3       	ldi	r24, 0x30	; 48
    b578:	90 e0       	ldi	r25, 0x00	; 0
    b57a:	0e 94 5c 5d 	call	0xbab8	; 0xbab8 <fputc>
    b57e:	5a 94       	dec	r5
    b580:	f7 cf       	rjmp	.-18     	; 0xb570 <vfprintf+0x354>
    b582:	aa 94       	dec	r10
    b584:	f4 01       	movw	r30, r8
    b586:	ea 0d       	add	r30, r10
    b588:	f1 1d       	adc	r31, r1
    b58a:	80 81       	ld	r24, Z
    b58c:	b7 01       	movw	r22, r14
    b58e:	90 e0       	ldi	r25, 0x00	; 0
    b590:	0e 94 5c 5d 	call	0xbab8	; 0xbab8 <fputc>
    b594:	a1 10       	cpse	r10, r1
    b596:	f5 cf       	rjmp	.-22     	; 0xb582 <vfprintf+0x366>
    b598:	33 20       	and	r3, r3
    b59a:	09 f4       	brne	.+2      	; 0xb59e <vfprintf+0x382>
    b59c:	51 ce       	rjmp	.-862    	; 0xb240 <vfprintf+0x24>
    b59e:	b7 01       	movw	r22, r14
    b5a0:	80 e2       	ldi	r24, 0x20	; 32
    b5a2:	90 e0       	ldi	r25, 0x00	; 0
    b5a4:	0e 94 5c 5d 	call	0xbab8	; 0xbab8 <fputc>
    b5a8:	3a 94       	dec	r3
    b5aa:	f6 cf       	rjmp	.-20     	; 0xb598 <vfprintf+0x37c>
    b5ac:	f7 01       	movw	r30, r14
    b5ae:	86 81       	ldd	r24, Z+6	; 0x06
    b5b0:	97 81       	ldd	r25, Z+7	; 0x07
    b5b2:	02 c0       	rjmp	.+4      	; 0xb5b8 <vfprintf+0x39c>
    b5b4:	8f ef       	ldi	r24, 0xFF	; 255
    b5b6:	9f ef       	ldi	r25, 0xFF	; 255
    b5b8:	2c 96       	adiw	r28, 0x0c	; 12
    b5ba:	e2 e1       	ldi	r30, 0x12	; 18
    b5bc:	0c 94 4d 5e 	jmp	0xbc9a	; 0xbc9a <__epilogue_restores__>

0000b5c0 <dtoa_prf>:
    b5c0:	4f 92       	push	r4
    b5c2:	5f 92       	push	r5
    b5c4:	6f 92       	push	r6
    b5c6:	7f 92       	push	r7
    b5c8:	9f 92       	push	r9
    b5ca:	af 92       	push	r10
    b5cc:	bf 92       	push	r11
    b5ce:	cf 92       	push	r12
    b5d0:	df 92       	push	r13
    b5d2:	ef 92       	push	r14
    b5d4:	ff 92       	push	r15
    b5d6:	0f 93       	push	r16
    b5d8:	1f 93       	push	r17
    b5da:	cf 93       	push	r28
    b5dc:	df 93       	push	r29
    b5de:	cd b7       	in	r28, 0x3d	; 61
    b5e0:	de b7       	in	r29, 0x3e	; 62
    b5e2:	29 97       	sbiw	r28, 0x09	; 9
    b5e4:	0f b6       	in	r0, 0x3f	; 63
    b5e6:	f8 94       	cli
    b5e8:	de bf       	out	0x3e, r29	; 62
    b5ea:	0f be       	out	0x3f, r0	; 63
    b5ec:	cd bf       	out	0x3d, r28	; 61
    b5ee:	6a 01       	movw	r12, r20
    b5f0:	12 2f       	mov	r17, r18
    b5f2:	b0 2e       	mov	r11, r16
    b5f4:	2b e3       	ldi	r18, 0x3B	; 59
    b5f6:	20 17       	cp	r18, r16
    b5f8:	20 f0       	brcs	.+8      	; 0xb602 <dtoa_prf+0x42>
    b5fa:	ff 24       	eor	r15, r15
    b5fc:	f3 94       	inc	r15
    b5fe:	f0 0e       	add	r15, r16
    b600:	02 c0       	rjmp	.+4      	; 0xb606 <dtoa_prf+0x46>
    b602:	bc e3       	ldi	r27, 0x3C	; 60
    b604:	fb 2e       	mov	r15, r27
    b606:	0f 2d       	mov	r16, r15
    b608:	27 e0       	ldi	r18, 0x07	; 7
    b60a:	ae 01       	movw	r20, r28
    b60c:	4f 5f       	subi	r20, 0xFF	; 255
    b60e:	5f 4f       	sbci	r21, 0xFF	; 255
    b610:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <__ftoa_engine>
    b614:	ac 01       	movw	r20, r24
    b616:	89 81       	ldd	r24, Y+1	; 0x01
    b618:	98 2f       	mov	r25, r24
    b61a:	99 70       	andi	r25, 0x09	; 9
    b61c:	91 30       	cpi	r25, 0x01	; 1
    b61e:	31 f0       	breq	.+12     	; 0xb62c <dtoa_prf+0x6c>
    b620:	e1 fc       	sbrc	r14, 1
    b622:	06 c0       	rjmp	.+12     	; 0xb630 <dtoa_prf+0x70>
    b624:	e0 fe       	sbrs	r14, 0
    b626:	06 c0       	rjmp	.+12     	; 0xb634 <dtoa_prf+0x74>
    b628:	90 e2       	ldi	r25, 0x20	; 32
    b62a:	05 c0       	rjmp	.+10     	; 0xb636 <dtoa_prf+0x76>
    b62c:	9d e2       	ldi	r25, 0x2D	; 45
    b62e:	03 c0       	rjmp	.+6      	; 0xb636 <dtoa_prf+0x76>
    b630:	9b e2       	ldi	r25, 0x2B	; 43
    b632:	01 c0       	rjmp	.+2      	; 0xb636 <dtoa_prf+0x76>
    b634:	90 e0       	ldi	r25, 0x00	; 0
    b636:	ee 2d       	mov	r30, r14
    b638:	e0 71       	andi	r30, 0x10	; 16
    b63a:	83 ff       	sbrs	r24, 3
    b63c:	3c c0       	rjmp	.+120    	; 0xb6b6 <dtoa_prf+0xf6>
    b63e:	91 11       	cpse	r25, r1
    b640:	02 c0       	rjmp	.+4      	; 0xb646 <dtoa_prf+0x86>
    b642:	83 e0       	ldi	r24, 0x03	; 3
    b644:	01 c0       	rjmp	.+2      	; 0xb648 <dtoa_prf+0x88>
    b646:	84 e0       	ldi	r24, 0x04	; 4
    b648:	81 17       	cp	r24, r17
    b64a:	18 f4       	brcc	.+6      	; 0xb652 <dtoa_prf+0x92>
    b64c:	21 2f       	mov	r18, r17
    b64e:	28 1b       	sub	r18, r24
    b650:	01 c0       	rjmp	.+2      	; 0xb654 <dtoa_prf+0x94>
    b652:	20 e0       	ldi	r18, 0x00	; 0
    b654:	e1 11       	cpse	r30, r1
    b656:	0b c0       	rjmp	.+22     	; 0xb66e <dtoa_prf+0xae>
    b658:	f6 01       	movw	r30, r12
    b65a:	82 2f       	mov	r24, r18
    b65c:	30 e2       	ldi	r19, 0x20	; 32
    b65e:	88 23       	and	r24, r24
    b660:	19 f0       	breq	.+6      	; 0xb668 <dtoa_prf+0xa8>
    b662:	31 93       	st	Z+, r19
    b664:	81 50       	subi	r24, 0x01	; 1
    b666:	fb cf       	rjmp	.-10     	; 0xb65e <dtoa_prf+0x9e>
    b668:	c2 0e       	add	r12, r18
    b66a:	d1 1c       	adc	r13, r1
    b66c:	20 e0       	ldi	r18, 0x00	; 0
    b66e:	99 23       	and	r25, r25
    b670:	29 f0       	breq	.+10     	; 0xb67c <dtoa_prf+0xbc>
    b672:	d6 01       	movw	r26, r12
    b674:	9c 93       	st	X, r25
    b676:	f6 01       	movw	r30, r12
    b678:	31 96       	adiw	r30, 0x01	; 1
    b67a:	6f 01       	movw	r12, r30
    b67c:	c6 01       	movw	r24, r12
    b67e:	03 96       	adiw	r24, 0x03	; 3
    b680:	e2 fe       	sbrs	r14, 2
    b682:	0a c0       	rjmp	.+20     	; 0xb698 <dtoa_prf+0xd8>
    b684:	3e e4       	ldi	r19, 0x4E	; 78
    b686:	d6 01       	movw	r26, r12
    b688:	3c 93       	st	X, r19
    b68a:	41 e4       	ldi	r20, 0x41	; 65
    b68c:	11 96       	adiw	r26, 0x01	; 1
    b68e:	4c 93       	st	X, r20
    b690:	11 97       	sbiw	r26, 0x01	; 1
    b692:	12 96       	adiw	r26, 0x02	; 2
    b694:	3c 93       	st	X, r19
    b696:	06 c0       	rjmp	.+12     	; 0xb6a4 <dtoa_prf+0xe4>
    b698:	3e e6       	ldi	r19, 0x6E	; 110
    b69a:	f6 01       	movw	r30, r12
    b69c:	30 83       	st	Z, r19
    b69e:	41 e6       	ldi	r20, 0x61	; 97
    b6a0:	41 83       	std	Z+1, r20	; 0x01
    b6a2:	32 83       	std	Z+2, r19	; 0x02
    b6a4:	fc 01       	movw	r30, r24
    b6a6:	32 2f       	mov	r19, r18
    b6a8:	40 e2       	ldi	r20, 0x20	; 32
    b6aa:	33 23       	and	r19, r19
    b6ac:	09 f4       	brne	.+2      	; 0xb6b0 <dtoa_prf+0xf0>
    b6ae:	42 c0       	rjmp	.+132    	; 0xb734 <dtoa_prf+0x174>
    b6b0:	41 93       	st	Z+, r20
    b6b2:	31 50       	subi	r19, 0x01	; 1
    b6b4:	fa cf       	rjmp	.-12     	; 0xb6aa <dtoa_prf+0xea>
    b6b6:	82 ff       	sbrs	r24, 2
    b6b8:	44 c0       	rjmp	.+136    	; 0xb742 <dtoa_prf+0x182>
    b6ba:	91 11       	cpse	r25, r1
    b6bc:	02 c0       	rjmp	.+4      	; 0xb6c2 <dtoa_prf+0x102>
    b6be:	83 e0       	ldi	r24, 0x03	; 3
    b6c0:	01 c0       	rjmp	.+2      	; 0xb6c4 <dtoa_prf+0x104>
    b6c2:	84 e0       	ldi	r24, 0x04	; 4
    b6c4:	81 17       	cp	r24, r17
    b6c6:	18 f4       	brcc	.+6      	; 0xb6ce <dtoa_prf+0x10e>
    b6c8:	21 2f       	mov	r18, r17
    b6ca:	28 1b       	sub	r18, r24
    b6cc:	01 c0       	rjmp	.+2      	; 0xb6d0 <dtoa_prf+0x110>
    b6ce:	20 e0       	ldi	r18, 0x00	; 0
    b6d0:	e1 11       	cpse	r30, r1
    b6d2:	0b c0       	rjmp	.+22     	; 0xb6ea <dtoa_prf+0x12a>
    b6d4:	f6 01       	movw	r30, r12
    b6d6:	82 2f       	mov	r24, r18
    b6d8:	30 e2       	ldi	r19, 0x20	; 32
    b6da:	88 23       	and	r24, r24
    b6dc:	19 f0       	breq	.+6      	; 0xb6e4 <dtoa_prf+0x124>
    b6de:	31 93       	st	Z+, r19
    b6e0:	81 50       	subi	r24, 0x01	; 1
    b6e2:	fb cf       	rjmp	.-10     	; 0xb6da <dtoa_prf+0x11a>
    b6e4:	c2 0e       	add	r12, r18
    b6e6:	d1 1c       	adc	r13, r1
    b6e8:	20 e0       	ldi	r18, 0x00	; 0
    b6ea:	99 23       	and	r25, r25
    b6ec:	29 f0       	breq	.+10     	; 0xb6f8 <dtoa_prf+0x138>
    b6ee:	d6 01       	movw	r26, r12
    b6f0:	9c 93       	st	X, r25
    b6f2:	f6 01       	movw	r30, r12
    b6f4:	31 96       	adiw	r30, 0x01	; 1
    b6f6:	6f 01       	movw	r12, r30
    b6f8:	c6 01       	movw	r24, r12
    b6fa:	03 96       	adiw	r24, 0x03	; 3
    b6fc:	e2 fe       	sbrs	r14, 2
    b6fe:	0b c0       	rjmp	.+22     	; 0xb716 <dtoa_prf+0x156>
    b700:	39 e4       	ldi	r19, 0x49	; 73
    b702:	d6 01       	movw	r26, r12
    b704:	3c 93       	st	X, r19
    b706:	3e e4       	ldi	r19, 0x4E	; 78
    b708:	11 96       	adiw	r26, 0x01	; 1
    b70a:	3c 93       	st	X, r19
    b70c:	11 97       	sbiw	r26, 0x01	; 1
    b70e:	36 e4       	ldi	r19, 0x46	; 70
    b710:	12 96       	adiw	r26, 0x02	; 2
    b712:	3c 93       	st	X, r19
    b714:	07 c0       	rjmp	.+14     	; 0xb724 <dtoa_prf+0x164>
    b716:	39 e6       	ldi	r19, 0x69	; 105
    b718:	f6 01       	movw	r30, r12
    b71a:	30 83       	st	Z, r19
    b71c:	3e e6       	ldi	r19, 0x6E	; 110
    b71e:	31 83       	std	Z+1, r19	; 0x01
    b720:	36 e6       	ldi	r19, 0x66	; 102
    b722:	32 83       	std	Z+2, r19	; 0x02
    b724:	fc 01       	movw	r30, r24
    b726:	32 2f       	mov	r19, r18
    b728:	40 e2       	ldi	r20, 0x20	; 32
    b72a:	33 23       	and	r19, r19
    b72c:	19 f0       	breq	.+6      	; 0xb734 <dtoa_prf+0x174>
    b72e:	41 93       	st	Z+, r20
    b730:	31 50       	subi	r19, 0x01	; 1
    b732:	fb cf       	rjmp	.-10     	; 0xb72a <dtoa_prf+0x16a>
    b734:	fc 01       	movw	r30, r24
    b736:	e2 0f       	add	r30, r18
    b738:	f1 1d       	adc	r31, r1
    b73a:	10 82       	st	Z, r1
    b73c:	8e ef       	ldi	r24, 0xFE	; 254
    b73e:	9f ef       	ldi	r25, 0xFF	; 255
    b740:	b7 c0       	rjmp	.+366    	; 0xb8b0 <dtoa_prf+0x2f0>
    b742:	f1 e0       	ldi	r31, 0x01	; 1
    b744:	91 11       	cpse	r25, r1
    b746:	01 c0       	rjmp	.+2      	; 0xb74a <dtoa_prf+0x18a>
    b748:	f0 e0       	ldi	r31, 0x00	; 0
    b74a:	6f 2f       	mov	r22, r31
    b74c:	70 e0       	ldi	r23, 0x00	; 0
    b74e:	14 16       	cp	r1, r20
    b750:	15 06       	cpc	r1, r21
    b752:	24 f4       	brge	.+8      	; 0xb75c <dtoa_prf+0x19c>
    b754:	9a 01       	movw	r18, r20
    b756:	2f 5f       	subi	r18, 0xFF	; 255
    b758:	3f 4f       	sbci	r19, 0xFF	; 255
    b75a:	02 c0       	rjmp	.+4      	; 0xb760 <dtoa_prf+0x1a0>
    b75c:	21 e0       	ldi	r18, 0x01	; 1
    b75e:	30 e0       	ldi	r19, 0x00	; 0
    b760:	26 0f       	add	r18, r22
    b762:	37 1f       	adc	r19, r23
    b764:	bb 20       	and	r11, r11
    b766:	29 f0       	breq	.+10     	; 0xb772 <dtoa_prf+0x1b2>
    b768:	6b 2d       	mov	r22, r11
    b76a:	70 e0       	ldi	r23, 0x00	; 0
    b76c:	6f 5f       	subi	r22, 0xFF	; 255
    b76e:	7f 4f       	sbci	r23, 0xFF	; 255
    b770:	02 c0       	rjmp	.+4      	; 0xb776 <dtoa_prf+0x1b6>
    b772:	60 e0       	ldi	r22, 0x00	; 0
    b774:	70 e0       	ldi	r23, 0x00	; 0
    b776:	26 0f       	add	r18, r22
    b778:	37 1f       	adc	r19, r23
    b77a:	61 2f       	mov	r22, r17
    b77c:	70 e0       	ldi	r23, 0x00	; 0
    b77e:	26 17       	cp	r18, r22
    b780:	37 07       	cpc	r19, r23
    b782:	1c f4       	brge	.+6      	; 0xb78a <dtoa_prf+0x1ca>
    b784:	12 1b       	sub	r17, r18
    b786:	21 2f       	mov	r18, r17
    b788:	01 c0       	rjmp	.+2      	; 0xb78c <dtoa_prf+0x1cc>
    b78a:	20 e0       	ldi	r18, 0x00	; 0
    b78c:	3e 2d       	mov	r19, r14
    b78e:	38 71       	andi	r19, 0x18	; 24
    b790:	59 f4       	brne	.+22     	; 0xb7a8 <dtoa_prf+0x1e8>
    b792:	d6 01       	movw	r26, r12
    b794:	32 2f       	mov	r19, r18
    b796:	60 e2       	ldi	r22, 0x20	; 32
    b798:	33 23       	and	r19, r19
    b79a:	19 f0       	breq	.+6      	; 0xb7a2 <dtoa_prf+0x1e2>
    b79c:	6d 93       	st	X+, r22
    b79e:	31 50       	subi	r19, 0x01	; 1
    b7a0:	fb cf       	rjmp	.-10     	; 0xb798 <dtoa_prf+0x1d8>
    b7a2:	c2 0e       	add	r12, r18
    b7a4:	d1 1c       	adc	r13, r1
    b7a6:	20 e0       	ldi	r18, 0x00	; 0
    b7a8:	ff 23       	and	r31, r31
    b7aa:	31 f0       	breq	.+12     	; 0xb7b8 <dtoa_prf+0x1f8>
    b7ac:	d6 01       	movw	r26, r12
    b7ae:	9c 93       	st	X, r25
    b7b0:	b6 01       	movw	r22, r12
    b7b2:	6f 5f       	subi	r22, 0xFF	; 255
    b7b4:	7f 4f       	sbci	r23, 0xFF	; 255
    b7b6:	6b 01       	movw	r12, r22
    b7b8:	e1 11       	cpse	r30, r1
    b7ba:	0b c0       	rjmp	.+22     	; 0xb7d2 <dtoa_prf+0x212>
    b7bc:	f6 01       	movw	r30, r12
    b7be:	92 2f       	mov	r25, r18
    b7c0:	30 e3       	ldi	r19, 0x30	; 48
    b7c2:	99 23       	and	r25, r25
    b7c4:	19 f0       	breq	.+6      	; 0xb7cc <dtoa_prf+0x20c>
    b7c6:	31 93       	st	Z+, r19
    b7c8:	91 50       	subi	r25, 0x01	; 1
    b7ca:	fb cf       	rjmp	.-10     	; 0xb7c2 <dtoa_prf+0x202>
    b7cc:	c2 0e       	add	r12, r18
    b7ce:	d1 1c       	adc	r13, r1
    b7d0:	20 e0       	ldi	r18, 0x00	; 0
    b7d2:	9f 2d       	mov	r25, r15
    b7d4:	94 0f       	add	r25, r20
    b7d6:	3a 81       	ldd	r19, Y+2	; 0x02
    b7d8:	78 2f       	mov	r23, r24
    b7da:	70 71       	andi	r23, 0x10	; 16
    b7dc:	a7 2e       	mov	r10, r23
    b7de:	84 ff       	sbrs	r24, 4
    b7e0:	03 c0       	rjmp	.+6      	; 0xb7e8 <dtoa_prf+0x228>
    b7e2:	31 33       	cpi	r19, 0x31	; 49
    b7e4:	09 f4       	brne	.+2      	; 0xb7e8 <dtoa_prf+0x228>
    b7e6:	91 50       	subi	r25, 0x01	; 1
    b7e8:	19 16       	cp	r1, r25
    b7ea:	24 f4       	brge	.+8      	; 0xb7f4 <dtoa_prf+0x234>
    b7ec:	99 30       	cpi	r25, 0x09	; 9
    b7ee:	18 f0       	brcs	.+6      	; 0xb7f6 <dtoa_prf+0x236>
    b7f0:	98 e0       	ldi	r25, 0x08	; 8
    b7f2:	01 c0       	rjmp	.+2      	; 0xb7f6 <dtoa_prf+0x236>
    b7f4:	91 e0       	ldi	r25, 0x01	; 1
    b7f6:	e4 2f       	mov	r30, r20
    b7f8:	85 2f       	mov	r24, r21
    b7fa:	57 ff       	sbrs	r21, 7
    b7fc:	02 c0       	rjmp	.+4      	; 0xb802 <dtoa_prf+0x242>
    b7fe:	e0 e0       	ldi	r30, 0x00	; 0
    b800:	80 e0       	ldi	r24, 0x00	; 0
    b802:	6e 2f       	mov	r22, r30
    b804:	78 2f       	mov	r23, r24
    b806:	e0 e0       	ldi	r30, 0x00	; 0
    b808:	f0 e0       	ldi	r31, 0x00	; 0
    b80a:	ae e2       	ldi	r26, 0x2E	; 46
    b80c:	9a 2e       	mov	r9, r26
    b80e:	3a 01       	movw	r6, r20
    b810:	69 1a       	sub	r6, r25
    b812:	71 08       	sbc	r7, r1
    b814:	2a 01       	movw	r4, r20
    b816:	46 1a       	sub	r4, r22
    b818:	57 0a       	sbc	r5, r23
    b81a:	0b 2d       	mov	r16, r11
    b81c:	10 e0       	ldi	r17, 0x00	; 0
    b81e:	11 95       	neg	r17
    b820:	01 95       	neg	r16
    b822:	11 09       	sbc	r17, r1
    b824:	6f 3f       	cpi	r22, 0xFF	; 255
    b826:	8f ef       	ldi	r24, 0xFF	; 255
    b828:	78 07       	cpc	r23, r24
    b82a:	29 f4       	brne	.+10     	; 0xb836 <dtoa_prf+0x276>
    b82c:	d6 01       	movw	r26, r12
    b82e:	9c 92       	st	X, r9
    b830:	c6 01       	movw	r24, r12
    b832:	01 96       	adiw	r24, 0x01	; 1
    b834:	6c 01       	movw	r12, r24
    b836:	46 17       	cp	r20, r22
    b838:	57 07       	cpc	r21, r23
    b83a:	84 f0       	brlt	.+32     	; 0xb85c <dtoa_prf+0x29c>
    b83c:	66 16       	cp	r6, r22
    b83e:	77 06       	cpc	r7, r23
    b840:	6c f4       	brge	.+26     	; 0xb85c <dtoa_prf+0x29c>
    b842:	7f 01       	movw	r14, r30
    b844:	e4 0c       	add	r14, r4
    b846:	f5 1c       	adc	r15, r5
    b848:	a1 e0       	ldi	r26, 0x01	; 1
    b84a:	b0 e0       	ldi	r27, 0x00	; 0
    b84c:	ac 0f       	add	r26, r28
    b84e:	bd 1f       	adc	r27, r29
    b850:	ea 0e       	add	r14, r26
    b852:	fb 1e       	adc	r15, r27
    b854:	d7 01       	movw	r26, r14
    b856:	11 96       	adiw	r26, 0x01	; 1
    b858:	bc 90       	ld	r11, X
    b85a:	02 c0       	rjmp	.+4      	; 0xb860 <dtoa_prf+0x2a0>
    b85c:	90 e3       	ldi	r25, 0x30	; 48
    b85e:	b9 2e       	mov	r11, r25
    b860:	61 50       	subi	r22, 0x01	; 1
    b862:	71 09       	sbc	r23, r1
    b864:	31 96       	adiw	r30, 0x01	; 1
    b866:	c6 01       	movw	r24, r12
    b868:	01 96       	adiw	r24, 0x01	; 1
    b86a:	7c 01       	movw	r14, r24
    b86c:	60 17       	cp	r22, r16
    b86e:	71 07       	cpc	r23, r17
    b870:	24 f0       	brlt	.+8      	; 0xb87a <dtoa_prf+0x2ba>
    b872:	d6 01       	movw	r26, r12
    b874:	bc 92       	st	X, r11
    b876:	6c 01       	movw	r12, r24
    b878:	d5 cf       	rjmp	.-86     	; 0xb824 <dtoa_prf+0x264>
    b87a:	64 17       	cp	r22, r20
    b87c:	75 07       	cpc	r23, r21
    b87e:	41 f4       	brne	.+16     	; 0xb890 <dtoa_prf+0x2d0>
    b880:	36 33       	cpi	r19, 0x36	; 54
    b882:	20 f4       	brcc	.+8      	; 0xb88c <dtoa_prf+0x2cc>
    b884:	35 33       	cpi	r19, 0x35	; 53
    b886:	21 f4       	brne	.+8      	; 0xb890 <dtoa_prf+0x2d0>
    b888:	a1 10       	cpse	r10, r1
    b88a:	02 c0       	rjmp	.+4      	; 0xb890 <dtoa_prf+0x2d0>
    b88c:	81 e3       	ldi	r24, 0x31	; 49
    b88e:	b8 2e       	mov	r11, r24
    b890:	f6 01       	movw	r30, r12
    b892:	b0 82       	st	Z, r11
    b894:	f7 01       	movw	r30, r14
    b896:	82 2f       	mov	r24, r18
    b898:	90 e2       	ldi	r25, 0x20	; 32
    b89a:	88 23       	and	r24, r24
    b89c:	19 f0       	breq	.+6      	; 0xb8a4 <dtoa_prf+0x2e4>
    b89e:	91 93       	st	Z+, r25
    b8a0:	81 50       	subi	r24, 0x01	; 1
    b8a2:	fb cf       	rjmp	.-10     	; 0xb89a <dtoa_prf+0x2da>
    b8a4:	f7 01       	movw	r30, r14
    b8a6:	e2 0f       	add	r30, r18
    b8a8:	f1 1d       	adc	r31, r1
    b8aa:	10 82       	st	Z, r1
    b8ac:	80 e0       	ldi	r24, 0x00	; 0
    b8ae:	90 e0       	ldi	r25, 0x00	; 0
    b8b0:	29 96       	adiw	r28, 0x09	; 9
    b8b2:	0f b6       	in	r0, 0x3f	; 63
    b8b4:	f8 94       	cli
    b8b6:	de bf       	out	0x3e, r29	; 62
    b8b8:	0f be       	out	0x3f, r0	; 63
    b8ba:	cd bf       	out	0x3d, r28	; 61
    b8bc:	df 91       	pop	r29
    b8be:	cf 91       	pop	r28
    b8c0:	1f 91       	pop	r17
    b8c2:	0f 91       	pop	r16
    b8c4:	ff 90       	pop	r15
    b8c6:	ef 90       	pop	r14
    b8c8:	df 90       	pop	r13
    b8ca:	cf 90       	pop	r12
    b8cc:	bf 90       	pop	r11
    b8ce:	af 90       	pop	r10
    b8d0:	9f 90       	pop	r9
    b8d2:	7f 90       	pop	r7
    b8d4:	6f 90       	pop	r6
    b8d6:	5f 90       	pop	r5
    b8d8:	4f 90       	pop	r4
    b8da:	08 95       	ret

0000b8dc <__ftoa_engine>:
    b8dc:	28 30       	cpi	r18, 0x08	; 8
    b8de:	08 f0       	brcs	.+2      	; 0xb8e2 <__ftoa_engine+0x6>
    b8e0:	27 e0       	ldi	r18, 0x07	; 7
    b8e2:	33 27       	eor	r19, r19
    b8e4:	da 01       	movw	r26, r20
    b8e6:	99 0f       	add	r25, r25
    b8e8:	31 1d       	adc	r19, r1
    b8ea:	87 fd       	sbrc	r24, 7
    b8ec:	91 60       	ori	r25, 0x01	; 1
    b8ee:	00 96       	adiw	r24, 0x00	; 0
    b8f0:	61 05       	cpc	r22, r1
    b8f2:	71 05       	cpc	r23, r1
    b8f4:	39 f4       	brne	.+14     	; 0xb904 <__ftoa_engine+0x28>
    b8f6:	32 60       	ori	r19, 0x02	; 2
    b8f8:	2e 5f       	subi	r18, 0xFE	; 254
    b8fa:	3d 93       	st	X+, r19
    b8fc:	30 e3       	ldi	r19, 0x30	; 48
    b8fe:	2a 95       	dec	r18
    b900:	e1 f7       	brne	.-8      	; 0xb8fa <__ftoa_engine+0x1e>
    b902:	08 95       	ret
    b904:	9f 3f       	cpi	r25, 0xFF	; 255
    b906:	30 f0       	brcs	.+12     	; 0xb914 <__ftoa_engine+0x38>
    b908:	80 38       	cpi	r24, 0x80	; 128
    b90a:	71 05       	cpc	r23, r1
    b90c:	61 05       	cpc	r22, r1
    b90e:	09 f0       	breq	.+2      	; 0xb912 <__ftoa_engine+0x36>
    b910:	3c 5f       	subi	r19, 0xFC	; 252
    b912:	3c 5f       	subi	r19, 0xFC	; 252
    b914:	3d 93       	st	X+, r19
    b916:	91 30       	cpi	r25, 0x01	; 1
    b918:	08 f0       	brcs	.+2      	; 0xb91c <__ftoa_engine+0x40>
    b91a:	80 68       	ori	r24, 0x80	; 128
    b91c:	91 1d       	adc	r25, r1
    b91e:	df 93       	push	r29
    b920:	cf 93       	push	r28
    b922:	1f 93       	push	r17
    b924:	0f 93       	push	r16
    b926:	ff 92       	push	r15
    b928:	ef 92       	push	r14
    b92a:	19 2f       	mov	r17, r25
    b92c:	98 7f       	andi	r25, 0xF8	; 248
    b92e:	96 95       	lsr	r25
    b930:	e9 2f       	mov	r30, r25
    b932:	96 95       	lsr	r25
    b934:	96 95       	lsr	r25
    b936:	e9 0f       	add	r30, r25
    b938:	ff 27       	eor	r31, r31
    b93a:	eb 58       	subi	r30, 0x8B	; 139
    b93c:	fd 4f       	sbci	r31, 0xFD	; 253
    b93e:	99 27       	eor	r25, r25
    b940:	33 27       	eor	r19, r19
    b942:	ee 24       	eor	r14, r14
    b944:	ff 24       	eor	r15, r15
    b946:	a7 01       	movw	r20, r14
    b948:	e7 01       	movw	r28, r14
    b94a:	05 90       	lpm	r0, Z+
    b94c:	08 94       	sec
    b94e:	07 94       	ror	r0
    b950:	28 f4       	brcc	.+10     	; 0xb95c <__ftoa_engine+0x80>
    b952:	36 0f       	add	r19, r22
    b954:	e7 1e       	adc	r14, r23
    b956:	f8 1e       	adc	r15, r24
    b958:	49 1f       	adc	r20, r25
    b95a:	51 1d       	adc	r21, r1
    b95c:	66 0f       	add	r22, r22
    b95e:	77 1f       	adc	r23, r23
    b960:	88 1f       	adc	r24, r24
    b962:	99 1f       	adc	r25, r25
    b964:	06 94       	lsr	r0
    b966:	a1 f7       	brne	.-24     	; 0xb950 <__ftoa_engine+0x74>
    b968:	05 90       	lpm	r0, Z+
    b96a:	07 94       	ror	r0
    b96c:	28 f4       	brcc	.+10     	; 0xb978 <__ftoa_engine+0x9c>
    b96e:	e7 0e       	add	r14, r23
    b970:	f8 1e       	adc	r15, r24
    b972:	49 1f       	adc	r20, r25
    b974:	56 1f       	adc	r21, r22
    b976:	c1 1d       	adc	r28, r1
    b978:	77 0f       	add	r23, r23
    b97a:	88 1f       	adc	r24, r24
    b97c:	99 1f       	adc	r25, r25
    b97e:	66 1f       	adc	r22, r22
    b980:	06 94       	lsr	r0
    b982:	a1 f7       	brne	.-24     	; 0xb96c <__ftoa_engine+0x90>
    b984:	05 90       	lpm	r0, Z+
    b986:	07 94       	ror	r0
    b988:	28 f4       	brcc	.+10     	; 0xb994 <__ftoa_engine+0xb8>
    b98a:	f8 0e       	add	r15, r24
    b98c:	49 1f       	adc	r20, r25
    b98e:	56 1f       	adc	r21, r22
    b990:	c7 1f       	adc	r28, r23
    b992:	d1 1d       	adc	r29, r1
    b994:	88 0f       	add	r24, r24
    b996:	99 1f       	adc	r25, r25
    b998:	66 1f       	adc	r22, r22
    b99a:	77 1f       	adc	r23, r23
    b99c:	06 94       	lsr	r0
    b99e:	a1 f7       	brne	.-24     	; 0xb988 <__ftoa_engine+0xac>
    b9a0:	05 90       	lpm	r0, Z+
    b9a2:	07 94       	ror	r0
    b9a4:	20 f4       	brcc	.+8      	; 0xb9ae <__ftoa_engine+0xd2>
    b9a6:	49 0f       	add	r20, r25
    b9a8:	56 1f       	adc	r21, r22
    b9aa:	c7 1f       	adc	r28, r23
    b9ac:	d8 1f       	adc	r29, r24
    b9ae:	99 0f       	add	r25, r25
    b9b0:	66 1f       	adc	r22, r22
    b9b2:	77 1f       	adc	r23, r23
    b9b4:	88 1f       	adc	r24, r24
    b9b6:	06 94       	lsr	r0
    b9b8:	a9 f7       	brne	.-22     	; 0xb9a4 <__ftoa_engine+0xc8>
    b9ba:	84 91       	lpm	r24, Z
    b9bc:	10 95       	com	r17
    b9be:	17 70       	andi	r17, 0x07	; 7
    b9c0:	41 f0       	breq	.+16     	; 0xb9d2 <__ftoa_engine+0xf6>
    b9c2:	d6 95       	lsr	r29
    b9c4:	c7 95       	ror	r28
    b9c6:	57 95       	ror	r21
    b9c8:	47 95       	ror	r20
    b9ca:	f7 94       	ror	r15
    b9cc:	e7 94       	ror	r14
    b9ce:	1a 95       	dec	r17
    b9d0:	c1 f7       	brne	.-16     	; 0xb9c2 <__ftoa_engine+0xe6>
    b9d2:	eb e1       	ldi	r30, 0x1B	; 27
    b9d4:	f2 e0       	ldi	r31, 0x02	; 2
    b9d6:	68 94       	set
    b9d8:	15 90       	lpm	r1, Z+
    b9da:	15 91       	lpm	r17, Z+
    b9dc:	35 91       	lpm	r19, Z+
    b9de:	65 91       	lpm	r22, Z+
    b9e0:	95 91       	lpm	r25, Z+
    b9e2:	05 90       	lpm	r0, Z+
    b9e4:	7f e2       	ldi	r23, 0x2F	; 47
    b9e6:	73 95       	inc	r23
    b9e8:	e1 18       	sub	r14, r1
    b9ea:	f1 0a       	sbc	r15, r17
    b9ec:	43 0b       	sbc	r20, r19
    b9ee:	56 0b       	sbc	r21, r22
    b9f0:	c9 0b       	sbc	r28, r25
    b9f2:	d0 09       	sbc	r29, r0
    b9f4:	c0 f7       	brcc	.-16     	; 0xb9e6 <__ftoa_engine+0x10a>
    b9f6:	e1 0c       	add	r14, r1
    b9f8:	f1 1e       	adc	r15, r17
    b9fa:	43 1f       	adc	r20, r19
    b9fc:	56 1f       	adc	r21, r22
    b9fe:	c9 1f       	adc	r28, r25
    ba00:	d0 1d       	adc	r29, r0
    ba02:	7e f4       	brtc	.+30     	; 0xba22 <__ftoa_engine+0x146>
    ba04:	70 33       	cpi	r23, 0x30	; 48
    ba06:	11 f4       	brne	.+4      	; 0xba0c <__ftoa_engine+0x130>
    ba08:	8a 95       	dec	r24
    ba0a:	e6 cf       	rjmp	.-52     	; 0xb9d8 <__ftoa_engine+0xfc>
    ba0c:	e8 94       	clt
    ba0e:	01 50       	subi	r16, 0x01	; 1
    ba10:	30 f0       	brcs	.+12     	; 0xba1e <__ftoa_engine+0x142>
    ba12:	08 0f       	add	r16, r24
    ba14:	0a f4       	brpl	.+2      	; 0xba18 <__ftoa_engine+0x13c>
    ba16:	00 27       	eor	r16, r16
    ba18:	02 17       	cp	r16, r18
    ba1a:	08 f4       	brcc	.+2      	; 0xba1e <__ftoa_engine+0x142>
    ba1c:	20 2f       	mov	r18, r16
    ba1e:	23 95       	inc	r18
    ba20:	02 2f       	mov	r16, r18
    ba22:	7a 33       	cpi	r23, 0x3A	; 58
    ba24:	28 f0       	brcs	.+10     	; 0xba30 <__ftoa_engine+0x154>
    ba26:	79 e3       	ldi	r23, 0x39	; 57
    ba28:	7d 93       	st	X+, r23
    ba2a:	2a 95       	dec	r18
    ba2c:	e9 f7       	brne	.-6      	; 0xba28 <__ftoa_engine+0x14c>
    ba2e:	10 c0       	rjmp	.+32     	; 0xba50 <__ftoa_engine+0x174>
    ba30:	7d 93       	st	X+, r23
    ba32:	2a 95       	dec	r18
    ba34:	89 f6       	brne	.-94     	; 0xb9d8 <__ftoa_engine+0xfc>
    ba36:	06 94       	lsr	r0
    ba38:	97 95       	ror	r25
    ba3a:	67 95       	ror	r22
    ba3c:	37 95       	ror	r19
    ba3e:	17 95       	ror	r17
    ba40:	17 94       	ror	r1
    ba42:	e1 18       	sub	r14, r1
    ba44:	f1 0a       	sbc	r15, r17
    ba46:	43 0b       	sbc	r20, r19
    ba48:	56 0b       	sbc	r21, r22
    ba4a:	c9 0b       	sbc	r28, r25
    ba4c:	d0 09       	sbc	r29, r0
    ba4e:	98 f0       	brcs	.+38     	; 0xba76 <__ftoa_engine+0x19a>
    ba50:	23 95       	inc	r18
    ba52:	7e 91       	ld	r23, -X
    ba54:	73 95       	inc	r23
    ba56:	7a 33       	cpi	r23, 0x3A	; 58
    ba58:	08 f0       	brcs	.+2      	; 0xba5c <__ftoa_engine+0x180>
    ba5a:	70 e3       	ldi	r23, 0x30	; 48
    ba5c:	7c 93       	st	X, r23
    ba5e:	20 13       	cpse	r18, r16
    ba60:	b8 f7       	brcc	.-18     	; 0xba50 <__ftoa_engine+0x174>
    ba62:	7e 91       	ld	r23, -X
    ba64:	70 61       	ori	r23, 0x10	; 16
    ba66:	7d 93       	st	X+, r23
    ba68:	30 f0       	brcs	.+12     	; 0xba76 <__ftoa_engine+0x19a>
    ba6a:	83 95       	inc	r24
    ba6c:	71 e3       	ldi	r23, 0x31	; 49
    ba6e:	7d 93       	st	X+, r23
    ba70:	70 e3       	ldi	r23, 0x30	; 48
    ba72:	2a 95       	dec	r18
    ba74:	e1 f7       	brne	.-8      	; 0xba6e <__ftoa_engine+0x192>
    ba76:	11 24       	eor	r1, r1
    ba78:	ef 90       	pop	r14
    ba7a:	ff 90       	pop	r15
    ba7c:	0f 91       	pop	r16
    ba7e:	1f 91       	pop	r17
    ba80:	cf 91       	pop	r28
    ba82:	df 91       	pop	r29
    ba84:	99 27       	eor	r25, r25
    ba86:	87 fd       	sbrc	r24, 7
    ba88:	90 95       	com	r25
    ba8a:	08 95       	ret

0000ba8c <strnlen_P>:
    ba8c:	fc 01       	movw	r30, r24
    ba8e:	05 90       	lpm	r0, Z+
    ba90:	61 50       	subi	r22, 0x01	; 1
    ba92:	70 40       	sbci	r23, 0x00	; 0
    ba94:	01 10       	cpse	r0, r1
    ba96:	d8 f7       	brcc	.-10     	; 0xba8e <strnlen_P+0x2>
    ba98:	80 95       	com	r24
    ba9a:	90 95       	com	r25
    ba9c:	8e 0f       	add	r24, r30
    ba9e:	9f 1f       	adc	r25, r31
    baa0:	08 95       	ret

0000baa2 <strnlen>:
    baa2:	fc 01       	movw	r30, r24
    baa4:	61 50       	subi	r22, 0x01	; 1
    baa6:	70 40       	sbci	r23, 0x00	; 0
    baa8:	01 90       	ld	r0, Z+
    baaa:	01 10       	cpse	r0, r1
    baac:	d8 f7       	brcc	.-10     	; 0xbaa4 <strnlen+0x2>
    baae:	80 95       	com	r24
    bab0:	90 95       	com	r25
    bab2:	8e 0f       	add	r24, r30
    bab4:	9f 1f       	adc	r25, r31
    bab6:	08 95       	ret

0000bab8 <fputc>:
    bab8:	0f 93       	push	r16
    baba:	1f 93       	push	r17
    babc:	cf 93       	push	r28
    babe:	df 93       	push	r29
    bac0:	fb 01       	movw	r30, r22
    bac2:	23 81       	ldd	r18, Z+3	; 0x03
    bac4:	21 fd       	sbrc	r18, 1
    bac6:	03 c0       	rjmp	.+6      	; 0xbace <fputc+0x16>
    bac8:	8f ef       	ldi	r24, 0xFF	; 255
    baca:	9f ef       	ldi	r25, 0xFF	; 255
    bacc:	28 c0       	rjmp	.+80     	; 0xbb1e <fputc+0x66>
    bace:	22 ff       	sbrs	r18, 2
    bad0:	16 c0       	rjmp	.+44     	; 0xbafe <fputc+0x46>
    bad2:	46 81       	ldd	r20, Z+6	; 0x06
    bad4:	57 81       	ldd	r21, Z+7	; 0x07
    bad6:	24 81       	ldd	r18, Z+4	; 0x04
    bad8:	35 81       	ldd	r19, Z+5	; 0x05
    bada:	42 17       	cp	r20, r18
    badc:	53 07       	cpc	r21, r19
    bade:	44 f4       	brge	.+16     	; 0xbaf0 <fputc+0x38>
    bae0:	a0 81       	ld	r26, Z
    bae2:	b1 81       	ldd	r27, Z+1	; 0x01
    bae4:	9d 01       	movw	r18, r26
    bae6:	2f 5f       	subi	r18, 0xFF	; 255
    bae8:	3f 4f       	sbci	r19, 0xFF	; 255
    baea:	31 83       	std	Z+1, r19	; 0x01
    baec:	20 83       	st	Z, r18
    baee:	8c 93       	st	X, r24
    baf0:	26 81       	ldd	r18, Z+6	; 0x06
    baf2:	37 81       	ldd	r19, Z+7	; 0x07
    baf4:	2f 5f       	subi	r18, 0xFF	; 255
    baf6:	3f 4f       	sbci	r19, 0xFF	; 255
    baf8:	37 83       	std	Z+7, r19	; 0x07
    bafa:	26 83       	std	Z+6, r18	; 0x06
    bafc:	10 c0       	rjmp	.+32     	; 0xbb1e <fputc+0x66>
    bafe:	eb 01       	movw	r28, r22
    bb00:	09 2f       	mov	r16, r25
    bb02:	18 2f       	mov	r17, r24
    bb04:	00 84       	ldd	r0, Z+8	; 0x08
    bb06:	f1 85       	ldd	r31, Z+9	; 0x09
    bb08:	e0 2d       	mov	r30, r0
    bb0a:	09 95       	icall
    bb0c:	89 2b       	or	r24, r25
    bb0e:	e1 f6       	brne	.-72     	; 0xbac8 <fputc+0x10>
    bb10:	8e 81       	ldd	r24, Y+6	; 0x06
    bb12:	9f 81       	ldd	r25, Y+7	; 0x07
    bb14:	01 96       	adiw	r24, 0x01	; 1
    bb16:	9f 83       	std	Y+7, r25	; 0x07
    bb18:	8e 83       	std	Y+6, r24	; 0x06
    bb1a:	81 2f       	mov	r24, r17
    bb1c:	90 2f       	mov	r25, r16
    bb1e:	df 91       	pop	r29
    bb20:	cf 91       	pop	r28
    bb22:	1f 91       	pop	r17
    bb24:	0f 91       	pop	r16
    bb26:	08 95       	ret

0000bb28 <__ultoa_invert>:
    bb28:	fa 01       	movw	r30, r20
    bb2a:	aa 27       	eor	r26, r26
    bb2c:	28 30       	cpi	r18, 0x08	; 8
    bb2e:	51 f1       	breq	.+84     	; 0xbb84 <__ultoa_invert+0x5c>
    bb30:	20 31       	cpi	r18, 0x10	; 16
    bb32:	81 f1       	breq	.+96     	; 0xbb94 <__ultoa_invert+0x6c>
    bb34:	e8 94       	clt
    bb36:	6f 93       	push	r22
    bb38:	6e 7f       	andi	r22, 0xFE	; 254
    bb3a:	6e 5f       	subi	r22, 0xFE	; 254
    bb3c:	7f 4f       	sbci	r23, 0xFF	; 255
    bb3e:	8f 4f       	sbci	r24, 0xFF	; 255
    bb40:	9f 4f       	sbci	r25, 0xFF	; 255
    bb42:	af 4f       	sbci	r26, 0xFF	; 255
    bb44:	b1 e0       	ldi	r27, 0x01	; 1
    bb46:	3e d0       	rcall	.+124    	; 0xbbc4 <__ultoa_invert+0x9c>
    bb48:	b4 e0       	ldi	r27, 0x04	; 4
    bb4a:	3c d0       	rcall	.+120    	; 0xbbc4 <__ultoa_invert+0x9c>
    bb4c:	67 0f       	add	r22, r23
    bb4e:	78 1f       	adc	r23, r24
    bb50:	89 1f       	adc	r24, r25
    bb52:	9a 1f       	adc	r25, r26
    bb54:	a1 1d       	adc	r26, r1
    bb56:	68 0f       	add	r22, r24
    bb58:	79 1f       	adc	r23, r25
    bb5a:	8a 1f       	adc	r24, r26
    bb5c:	91 1d       	adc	r25, r1
    bb5e:	a1 1d       	adc	r26, r1
    bb60:	6a 0f       	add	r22, r26
    bb62:	71 1d       	adc	r23, r1
    bb64:	81 1d       	adc	r24, r1
    bb66:	91 1d       	adc	r25, r1
    bb68:	a1 1d       	adc	r26, r1
    bb6a:	20 d0       	rcall	.+64     	; 0xbbac <__ultoa_invert+0x84>
    bb6c:	09 f4       	brne	.+2      	; 0xbb70 <__ultoa_invert+0x48>
    bb6e:	68 94       	set
    bb70:	3f 91       	pop	r19
    bb72:	2a e0       	ldi	r18, 0x0A	; 10
    bb74:	26 9f       	mul	r18, r22
    bb76:	11 24       	eor	r1, r1
    bb78:	30 19       	sub	r19, r0
    bb7a:	30 5d       	subi	r19, 0xD0	; 208
    bb7c:	31 93       	st	Z+, r19
    bb7e:	de f6       	brtc	.-74     	; 0xbb36 <__ultoa_invert+0xe>
    bb80:	cf 01       	movw	r24, r30
    bb82:	08 95       	ret
    bb84:	46 2f       	mov	r20, r22
    bb86:	47 70       	andi	r20, 0x07	; 7
    bb88:	40 5d       	subi	r20, 0xD0	; 208
    bb8a:	41 93       	st	Z+, r20
    bb8c:	b3 e0       	ldi	r27, 0x03	; 3
    bb8e:	0f d0       	rcall	.+30     	; 0xbbae <__ultoa_invert+0x86>
    bb90:	c9 f7       	brne	.-14     	; 0xbb84 <__ultoa_invert+0x5c>
    bb92:	f6 cf       	rjmp	.-20     	; 0xbb80 <__ultoa_invert+0x58>
    bb94:	46 2f       	mov	r20, r22
    bb96:	4f 70       	andi	r20, 0x0F	; 15
    bb98:	40 5d       	subi	r20, 0xD0	; 208
    bb9a:	4a 33       	cpi	r20, 0x3A	; 58
    bb9c:	18 f0       	brcs	.+6      	; 0xbba4 <__ultoa_invert+0x7c>
    bb9e:	49 5d       	subi	r20, 0xD9	; 217
    bba0:	31 fd       	sbrc	r19, 1
    bba2:	40 52       	subi	r20, 0x20	; 32
    bba4:	41 93       	st	Z+, r20
    bba6:	02 d0       	rcall	.+4      	; 0xbbac <__ultoa_invert+0x84>
    bba8:	a9 f7       	brne	.-22     	; 0xbb94 <__ultoa_invert+0x6c>
    bbaa:	ea cf       	rjmp	.-44     	; 0xbb80 <__ultoa_invert+0x58>
    bbac:	b4 e0       	ldi	r27, 0x04	; 4
    bbae:	a6 95       	lsr	r26
    bbb0:	97 95       	ror	r25
    bbb2:	87 95       	ror	r24
    bbb4:	77 95       	ror	r23
    bbb6:	67 95       	ror	r22
    bbb8:	ba 95       	dec	r27
    bbba:	c9 f7       	brne	.-14     	; 0xbbae <__ultoa_invert+0x86>
    bbbc:	00 97       	sbiw	r24, 0x00	; 0
    bbbe:	61 05       	cpc	r22, r1
    bbc0:	71 05       	cpc	r23, r1
    bbc2:	08 95       	ret
    bbc4:	9b 01       	movw	r18, r22
    bbc6:	ac 01       	movw	r20, r24
    bbc8:	0a 2e       	mov	r0, r26
    bbca:	06 94       	lsr	r0
    bbcc:	57 95       	ror	r21
    bbce:	47 95       	ror	r20
    bbd0:	37 95       	ror	r19
    bbd2:	27 95       	ror	r18
    bbd4:	ba 95       	dec	r27
    bbd6:	c9 f7       	brne	.-14     	; 0xbbca <__ultoa_invert+0xa2>
    bbd8:	62 0f       	add	r22, r18
    bbda:	73 1f       	adc	r23, r19
    bbdc:	84 1f       	adc	r24, r20
    bbde:	95 1f       	adc	r25, r21
    bbe0:	a0 1d       	adc	r26, r0
    bbe2:	08 95       	ret

0000bbe4 <eeprom_read_byte>:
    bbe4:	f9 99       	sbic	0x1f, 1	; 31
    bbe6:	fe cf       	rjmp	.-4      	; 0xbbe4 <eeprom_read_byte>
    bbe8:	92 bd       	out	0x22, r25	; 34
    bbea:	81 bd       	out	0x21, r24	; 33
    bbec:	f8 9a       	sbi	0x1f, 0	; 31
    bbee:	99 27       	eor	r25, r25
    bbf0:	80 b5       	in	r24, 0x20	; 32
    bbf2:	08 95       	ret

0000bbf4 <eeprom_read_dword>:
    bbf4:	a6 e1       	ldi	r26, 0x16	; 22
    bbf6:	b0 e0       	ldi	r27, 0x00	; 0
    bbf8:	44 e0       	ldi	r20, 0x04	; 4
    bbfa:	50 e0       	ldi	r21, 0x00	; 0
    bbfc:	0c 94 23 5e 	jmp	0xbc46	; 0xbc46 <eeprom_read_blraw>

0000bc00 <eeprom_read_word>:
    bc00:	a8 e1       	ldi	r26, 0x18	; 24
    bc02:	b0 e0       	ldi	r27, 0x00	; 0
    bc04:	42 e0       	ldi	r20, 0x02	; 2
    bc06:	50 e0       	ldi	r21, 0x00	; 0
    bc08:	0c 94 23 5e 	jmp	0xbc46	; 0xbc46 <eeprom_read_blraw>

0000bc0c <eeprom_write_byte>:
    bc0c:	26 2f       	mov	r18, r22

0000bc0e <eeprom_write_r18>:
    bc0e:	f9 99       	sbic	0x1f, 1	; 31
    bc10:	fe cf       	rjmp	.-4      	; 0xbc0e <eeprom_write_r18>
    bc12:	1f ba       	out	0x1f, r1	; 31
    bc14:	92 bd       	out	0x22, r25	; 34
    bc16:	81 bd       	out	0x21, r24	; 33
    bc18:	20 bd       	out	0x20, r18	; 32
    bc1a:	0f b6       	in	r0, 0x3f	; 63
    bc1c:	f8 94       	cli
    bc1e:	fa 9a       	sbi	0x1f, 2	; 31
    bc20:	f9 9a       	sbi	0x1f, 1	; 31
    bc22:	0f be       	out	0x3f, r0	; 63
    bc24:	01 96       	adiw	r24, 0x01	; 1
    bc26:	08 95       	ret

0000bc28 <eeprom_write_dword>:
    bc28:	24 2f       	mov	r18, r20
    bc2a:	0e 94 07 5e 	call	0xbc0e	; 0xbc0e <eeprom_write_r18>
    bc2e:	25 2f       	mov	r18, r21
    bc30:	0e 94 07 5e 	call	0xbc0e	; 0xbc0e <eeprom_write_r18>
    bc34:	0c 94 1c 5e 	jmp	0xbc38	; 0xbc38 <eeprom_write_word>

0000bc38 <eeprom_write_word>:
    bc38:	0e 94 06 5e 	call	0xbc0c	; 0xbc0c <eeprom_write_byte>
    bc3c:	27 2f       	mov	r18, r23
    bc3e:	0c 94 07 5e 	jmp	0xbc0e	; 0xbc0e <eeprom_write_r18>

0000bc42 <eeprom_read_block>:
    bc42:	dc 01       	movw	r26, r24
    bc44:	cb 01       	movw	r24, r22

0000bc46 <eeprom_read_blraw>:
    bc46:	fc 01       	movw	r30, r24
    bc48:	f9 99       	sbic	0x1f, 1	; 31
    bc4a:	fe cf       	rjmp	.-4      	; 0xbc48 <eeprom_read_blraw+0x2>
    bc4c:	06 c0       	rjmp	.+12     	; 0xbc5a <eeprom_read_blraw+0x14>
    bc4e:	f2 bd       	out	0x22, r31	; 34
    bc50:	e1 bd       	out	0x21, r30	; 33
    bc52:	f8 9a       	sbi	0x1f, 0	; 31
    bc54:	31 96       	adiw	r30, 0x01	; 1
    bc56:	00 b4       	in	r0, 0x20	; 32
    bc58:	0d 92       	st	X+, r0
    bc5a:	41 50       	subi	r20, 0x01	; 1
    bc5c:	50 40       	sbci	r21, 0x00	; 0
    bc5e:	b8 f7       	brcc	.-18     	; 0xbc4e <eeprom_read_blraw+0x8>
    bc60:	08 95       	ret

0000bc62 <__prologue_saves__>:
    bc62:	2f 92       	push	r2
    bc64:	3f 92       	push	r3
    bc66:	4f 92       	push	r4
    bc68:	5f 92       	push	r5
    bc6a:	6f 92       	push	r6
    bc6c:	7f 92       	push	r7
    bc6e:	8f 92       	push	r8
    bc70:	9f 92       	push	r9
    bc72:	af 92       	push	r10
    bc74:	bf 92       	push	r11
    bc76:	cf 92       	push	r12
    bc78:	df 92       	push	r13
    bc7a:	ef 92       	push	r14
    bc7c:	ff 92       	push	r15
    bc7e:	0f 93       	push	r16
    bc80:	1f 93       	push	r17
    bc82:	cf 93       	push	r28
    bc84:	df 93       	push	r29
    bc86:	cd b7       	in	r28, 0x3d	; 61
    bc88:	de b7       	in	r29, 0x3e	; 62
    bc8a:	ca 1b       	sub	r28, r26
    bc8c:	db 0b       	sbc	r29, r27
    bc8e:	0f b6       	in	r0, 0x3f	; 63
    bc90:	f8 94       	cli
    bc92:	de bf       	out	0x3e, r29	; 62
    bc94:	0f be       	out	0x3f, r0	; 63
    bc96:	cd bf       	out	0x3d, r28	; 61
    bc98:	09 94       	ijmp

0000bc9a <__epilogue_restores__>:
    bc9a:	2a 88       	ldd	r2, Y+18	; 0x12
    bc9c:	39 88       	ldd	r3, Y+17	; 0x11
    bc9e:	48 88       	ldd	r4, Y+16	; 0x10
    bca0:	5f 84       	ldd	r5, Y+15	; 0x0f
    bca2:	6e 84       	ldd	r6, Y+14	; 0x0e
    bca4:	7d 84       	ldd	r7, Y+13	; 0x0d
    bca6:	8c 84       	ldd	r8, Y+12	; 0x0c
    bca8:	9b 84       	ldd	r9, Y+11	; 0x0b
    bcaa:	aa 84       	ldd	r10, Y+10	; 0x0a
    bcac:	b9 84       	ldd	r11, Y+9	; 0x09
    bcae:	c8 84       	ldd	r12, Y+8	; 0x08
    bcb0:	df 80       	ldd	r13, Y+7	; 0x07
    bcb2:	ee 80       	ldd	r14, Y+6	; 0x06
    bcb4:	fd 80       	ldd	r15, Y+5	; 0x05
    bcb6:	0c 81       	ldd	r16, Y+4	; 0x04
    bcb8:	1b 81       	ldd	r17, Y+3	; 0x03
    bcba:	aa 81       	ldd	r26, Y+2	; 0x02
    bcbc:	b9 81       	ldd	r27, Y+1	; 0x01
    bcbe:	ce 0f       	add	r28, r30
    bcc0:	d1 1d       	adc	r29, r1
    bcc2:	0f b6       	in	r0, 0x3f	; 63
    bcc4:	f8 94       	cli
    bcc6:	de bf       	out	0x3e, r29	; 62
    bcc8:	0f be       	out	0x3f, r0	; 63
    bcca:	cd bf       	out	0x3d, r28	; 61
    bccc:	ed 01       	movw	r28, r26
    bcce:	08 95       	ret

0000bcd0 <_exit>:
    bcd0:	f8 94       	cli

0000bcd2 <__stop_program>:
    bcd2:	ff cf       	rjmp	.-2      	; 0xbcd2 <__stop_program>
