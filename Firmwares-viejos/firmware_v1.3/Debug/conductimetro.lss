
conductimetro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000170  00800100  00011384  00011438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00011384  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003bc  00800270  00800270  000115a8  2**0
                  ALLOC
  3 .eeprom       00000014  00810000  00810000  000115a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         0000d47c  00000000  00000000  000115bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00003492  00000000  00000000  0001ea38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00021eca  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00021edc  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__ctors_end>
       4:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
       8:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
       c:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      10:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      14:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      18:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      1c:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      20:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      24:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      28:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      2c:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      30:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      34:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      38:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      3c:	0c 94 4d 44 	jmp	0x889a	; 0x889a <__vector_15>
      40:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      44:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      48:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      4c:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      50:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      54:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      58:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      5c:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      60:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      64:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      68:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      6c:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      70:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      74:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      78:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      7c:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      80:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      84:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>
      88:	0c 94 89 04 	jmp	0x912	; 0x912 <__bad_interrupt>

0000008c <MSG_Estado_Entradas>:
      8c:	45 73 74 61 64 6f 20 45 6e 74 72 61 64 61 73 3a     Estado Entradas:
      9c:	20 00 00                                             ..

0000009f <uFlagBotonesPresionados_MSG>:
      9f:	3b 20 20 41 63 74 69 76 61 64 61 73 3a 20 00 00     ;  Activadas: ..

000000af <uFlagBotonesLiberados_MSG>:
      af:	3b 20 20 4c 69 62 65 72 61 64 61 73 3a 20 00 00     ;  Liberadas: ..

000000bf <MSG_Estado_Salidas>:
      bf:	45 73 74 61 64 6f 20 53 61 6c 69 64 61 73 3a 20     Estado Salidas: 
	...

000000d1 <Texto_Llamas>:
      d1:	46 2e 4a 2e 20 4c 4c 41 4d 41 53 20 53 2e 41 2e     F.J. LLAMAS S.A.
	...

000000e3 <Texto_Cargando>:
      e3:	43 61 72 67 61 6e 64 6f 00 00                       Cargando..

000000ed <Texto_Punto>:
      ed:	2e 00 00                                            ...

000000f0 <Texto_Vacio>:
      f0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000102 <__c.2192>:
     102:	0a 0d 41 63 74 75 61 6c 69 7a 61 0a 0d 00 00        ..Actualiza....

00000111 <__c.2209>:
     111:	0a 0d 00 00                                         ....

00000115 <__c.2221>:
     115:	0a 0d 00 00                                         ....

00000119 <validacion_Serie_MSG>:
     119:	56 61 6c 69 64 61 63 69 6f 6e 20 47 52 55 50 4f     Validacion GRUPO
     129:	5f 53 45 52 49 45 20 28 23 30 29 3a 00 00           _SERIE (#0):..

00000137 <validacion_Alarmas_MSG>:
     137:	56 61 6c 69 64 61 63 69 6f 6e 20 47 52 55 50 4f     Validacion GRUPO
     147:	5f 41 4c 41 52 4d 41 53 20 28 23 31 29 3a 00 00     _ALARMAS (#1):..

00000157 <validacion_ADC_MSG>:
     157:	56 61 6c 69 64 61 63 69 6f 6e 20 47 52 55 50 4f     Validacion GRUPO
     167:	5f 41 44 43 20 28 23 32 29 3a 00 00                 _ADC (#2):..

00000173 <validacion_PWM_MSG>:
     173:	56 61 6c 69 64 61 63 69 6f 6e 20 47 52 55 50 4f     Validacion GRUPO
     183:	5f 50 57 4d 20 28 23 33 29 3a 00 00                 _PWM (#3):..

0000018f <datosOriginalesOk_MSG>:
     18f:	44 61 74 6f 73 20 6f 72 69 67 69 6e 61 6c 65 73     Datos originales
     19f:	20 4f 4b 00 00                                       OK..

000001a4 <datosBackUpError_MSG>:
     1a4:	44 61 74 6f 73 20 64 65 20 62 61 63 6b 75 70 20     Datos de backup 
     1b4:	45 52 52 4f 4e 45 4f 53 00 00                       ERRONEOS..

000001be <datosOriginalesError_MSG>:
     1be:	44 61 74 6f 73 20 6f 72 69 67 69 6e 61 6c 65 73     Datos originales
     1ce:	20 45 52 52 4f 4e 45 4f 53 00 00                     ERRONEOS..

000001d9 <datosBackUpOK_MSG>:
     1d9:	44 61 74 6f 73 20 64 65 20 62 61 63 6b 75 70 20     Datos de backup 
     1e9:	4f 4b 00 00                                         OK..

000001ed <datosOrigBackUPError_MSG>:
     1ed:	44 61 74 6f 73 20 6f 72 69 67 69 6e 61 6c 65 73     Datos originales
     1fd:	20 79 20 64 65 20 62 61 63 6b 75 70 20 45 52 52      y de backup ERR
     20d:	4f 4e 45 4f 53 00 00                                ONEOS..

00000214 <cargaPorDefecto_MSG>:
     214:	43 61 72 67 61 20 76 61 6c 6f 72 65 73 20 70 6f     Carga valores po
     224:	72 20 64 65 66 65 63 74 6f 00 00                    r defecto..

0000022f <numeroGrupo_MSG>:
     22f:	4e 75 6d 65 72 6f 20 64 65 20 47 72 75 70 6f 20     Numero de Grupo 
     23f:	3d 00 00                                            =..

00000242 <Cond_0_20_G_Factor>:
     242:	aa f1 92 3f aa f1 92 3f aa f1 92 3f c7 4b 87 3f     ...?...?...?.K.?
     252:	c7 4b 87 3f c7 4b 87 3f c7 4b 87 3f c7 4b 87 3f     .K.?.K.?.K.?.K.?
     262:	c7 4b 87 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     .K.?...?...?...?
     272:	00 00 80 3f 00 00 80 3f 8b 6c 47 3f 8b 6c 47 3f     ...?...?.lG?.lG?
     282:	8b 6c 47 3f 8b 6c 47 3f 8b 6c 47 3f 8b 6c 47 3f     .lG?.lG?.lG?.lG?
     292:	8b 6c 47 3f 8b 6c 47 3f 8b 6c 47 3f 8b 6c 47 3f     .lG?.lG?.lG?.lG?
     2a2:	8b 6c 47 3f 8b 6c 47 3f 8b 6c 47 3f 8b 6c 47 3f     .lG?.lG?.lG?.lG?
     2b2:	e9 26 31 3f d9 ce 57 3f                             .&1?..W?

000002ba <Cond_2_200_G_Factor>:
     2ba:	93 18 94 3f 93 18 94 3f 93 18 94 3f 93 18 94 3f     ...?...?...?...?
     2ca:	87 16 89 3f 87 16 89 3f 87 16 89 3f 87 16 89 3f     ...?...?...?...?
     2da:	87 16 89 3f 87 16 89 3f 87 16 89 3f 00 00 80 3f     ...?...?...?...?
     2ea:	00 00 80 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     ...?...?...?...?
     2fa:	00 00 80 3f 00 00 80 3f 10 58 79 3f 10 58 79 3f     ...?...?.Xy?.Xy?
     30a:	fc a9 71 3f fc a9 71 3f b0 72 68 3f b0 72 68 3f     ..q?..q?.rh?.rh?
     31a:	b0 72 68 3f b0 72 68 3f 4a 0c 62 3f 4a 0c 62 3f     .rh?.rh?J.b?J.b?
     32a:	4a 0c 62 3f 4a 0c 62 3f                             J.b?J.b?

00000332 <Cond_20_2500_G_Factor>:
     332:	e5 d0 d2 3f cf f7 93 3f a0 1a 8f 3f a0 1a 8f 3f     ...?...?...?...?
     342:	a0 1a 8f 3f a0 1a 8f 3f 00 00 80 3f 00 00 80 3f     ...?...?...?...?
     352:	00 00 80 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     ...?...?...?...?
     362:	00 00 80 3f 00 00 80 3f 00 00 80 3f aa f1 72 3f     ...?...?...?..r?
     372:	aa f1 72 3f aa f1 72 3f aa f1 72 3f 58 39 54 3f     ..r?..r?..r?X9T?
     382:	58 39 54 3f 58 39 54 3f 58 39 54 3f 58 39 54 3f     X9T?X9T?X9T?X9T?
     392:	58 39 54 3f 58 39 54 3f 58 39 54 3f 58 39 54 3f     X9T?X9T?X9T?X9T?
     3a2:	58 39 54 3f 58 39 54 3f                             X9T?X9T?

000003aa <Cond_0_20_C_Factor>:
     3aa:	21 b0 82 3f 21 b0 82 3f 21 b0 82 3f 21 b0 82 3f     !..?!..?!..?!..?
     3ba:	21 b0 82 3f 8b 6c 67 3f 8b 6c 67 3f 8b 6c 67 3f     !..?.lg?.lg?.lg?
     3ca:	8b 6c 67 3f 8b 6c 67 3f 8b 6c 67 3f 8b 6c 67 3f     .lg?.lg?.lg?.lg?
     3da:	8b 6c 67 3f 8b 6c 67 3f 8b 6c 67 3f 8b 6c 67 3f     .lg?.lg?.lg?.lg?
     3ea:	8b 6c 67 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     .lg?...?...?...?
     3fa:	00 00 80 3f db f9 8e 3f db f9 8e 3f db f9 8e 3f     ...?...?...?...?
     40a:	db f9 8e 3f c5 20 80 3f c5 20 80 3f c5 20 80 3f     ...?. .?. .?. .?
     41a:	c5 20 80 3f c5 20 80 3f                             . .?. .?

00000422 <Cond_2_200_C_Factor>:
     422:	7b 14 8e 3f 7b 14 8e 3f 7b 14 8e 3f 7b 14 8e 3f     {..?{..?{..?{..?
     432:	7b 14 8e 3f 7b 14 8e 3f 7b 14 8e 3f e9 26 81 3f     {..?{..?{..?.&.?
     442:	e9 26 81 3f e9 26 81 3f 48 e1 7a 3f 48 e1 7a 3f     .&.?.&.?H.z?H.z?
     452:	00 00 80 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     ...?...?...?...?
     462:	54 e3 85 3f 54 e3 85 3f 54 e3 85 3f 54 e3 85 3f     T..?T..?T..?T..?
     472:	54 e3 85 3f 54 e3 85 3f 54 e3 85 3f 54 e3 85 3f     T..?T..?T..?T..?
     482:	48 e1 7a 3f 48 e1 7a 3f 48 e1 7a 3f 48 e1 7a 3f     H.z?H.z?H.z?H.z?
     492:	e9 26 51 3f e9 26 51 3f                             .&Q?.&Q?

0000049a <Cond_20_2500_C_Factor>:
     49a:	7f 6a 8c 3f 7f 6a 8c 3f 7f 6a 8c 3f 7f 6a 8c 3f     .j.?.j.?.j.?.j.?
     4aa:	7f 6a 8c 3f 7f 6a 8c 3f 7f 6a 8c 3f 7f 6a 8c 3f     .j.?.j.?.j.?.j.?
     4ba:	5c 8f 62 3f 5c 8f 62 3f 5c 8f 62 3f 5c 8f 62 3f     \.b?\.b?\.b?\.b?
     4ca:	5c 8f 62 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     \.b?...?...?...?
     4da:	00 00 80 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     ...?...?...?...?
     4ea:	00 00 80 3f 00 00 80 3f 00 00 80 3f 9e ef 87 3f     ...?...?...?...?
     4fa:	9e ef 87 3f 9e ef 87 3f 9e ef 87 3f ee 7c 7f 3f     ...?...?...?.|.?
     50a:	ee 7c 7f 3f ee 7c 7f 3f                             .|.?.|.?

00000512 <Conductimetro_Info>:
     512:	46 2e 4a 2e 20 4c 4c 41 4d 41 53 20 53 2e 41 2e     F.J. LLAMAS S.A.
     522:	0a 0d 54 72 61 74 61 6d 69 65 6e 74 6f 20 64 65     ..Tratamiento de
     532:	20 41 67 75 61 73 2d 46 69 6c 74 72 61 63 69 6f      Aguas-Filtracio
     542:	6e 0a 0d 43 6f 6e 64 75 63 74 69 6d 65 74 72 6f     n..Conductimetro
     552:	20 64 65 20 44 6f 73 20 43 61 6e 61 6c 65 73 0a      de Dos Canales.
     562:	0d 46 69 72 6d 77 61 72 65 3a 20 76 31 2e 30 30     .Firmware: v1.00
     572:	0a 0d 53 2f 4e 3a 20 00 00                          ..S/N: ..

0000057b <Comando_Info>:
     57b:	49 4e 46 4f 00 00                                   INFO..

00000581 <Comando_Print>:
     581:	50 52 49 4e 54 20 00 00                             PRINT ..

00000589 <Comando_Entradas>:
     589:	45 4e 54 52 41 44 41 53 00 00                       ENTRADAS..

00000593 <Comando_ADC>:
     593:	41 44 43 00 00                                      ADC..

00000598 <Comando_Salidas>:
     598:	53 41 4c 49 44 41 53 00 00                          SALIDAS..

000005a1 <Comando_Reiniciar>:
     5a1:	52 45 49 4e 49 43 49 41 52 00 00                    REINICIAR..

000005ac <Comando_Factory_Reset>:
     5ac:	46 41 42 52 49 43 41 20 52 45 53 45 54 00 00        FABRICA RESET..

000005bb <Comando_Alarmas_Reset>:
     5bb:	41 4c 41 52 4d 41 53 20 52 45 53 45 54 00 00        ALARMAS RESET..

000005ca <Comando_PWM_Reset>:
     5ca:	50 57 4d 20 52 45 53 45 54 00 00                    PWM RESET..

000005d5 <Comando_Cal_Reset>:
     5d5:	43 41 4c 20 52 45 53 45 54 00 00                    CAL RESET..

000005e0 <Comando_Reset>:
     5e0:	52 45 53 45 54 00 00                                RESET..

000005e7 <Comando_Serie>:
     5e7:	53 45 52 49 45 00 00                                SERIE..

000005ee <Comando_Muestras_PWM_1>:
     5ee:	46 49 4c 54 52 4f 20 50 57 4d 20 31 00 00           FILTRO PWM 1..

000005fc <Comando_Muestras_PWM_2>:
     5fc:	46 49 4c 54 52 4f 20 50 57 4d 20 32 00 00           FILTRO PWM 2..

0000060a <Comando_Muestras_Cond_1>:
     60a:	46 49 4c 54 52 4f 20 43 4f 4e 44 20 31 00 00        FILTRO COND 1..

00000619 <Comando_Muestras_Cond_2>:
     619:	46 49 4c 54 52 4f 20 43 4f 4e 44 20 32 00 00        FILTRO COND 2..

00000628 <Comando_Ganancia_PWM_1>:
     628:	47 41 4e 41 4e 43 49 41 20 50 57 4d 20 31 00 00     GANANCIA PWM 1..

00000638 <Comando_Ganancia_PWM_2>:
     638:	47 41 4e 41 4e 43 49 41 20 50 57 4d 20 32 00 00     GANANCIA PWM 2..

00000648 <Comando_Tiempo_Alarma_Cond_1>:
     648:	54 49 45 4d 50 4f 20 41 4c 41 52 4d 41 20 31 00     TIEMPO ALARMA 1.
	...

00000659 <Comando_Tiempo_Alarma_Cond_2>:
     659:	54 49 45 4d 50 4f 20 41 4c 41 52 4d 41 20 32 00     TIEMPO ALARMA 2.
	...

0000066a <Comando_Alarma_1>:
     66a:	41 4c 41 52 4d 41 20 31 00 00                       ALARMA 1..

00000674 <Comando_Alarma_2>:
     674:	41 4c 41 52 4d 41 20 32 00 00                       ALARMA 2..

0000067e <Comando_Cal_PWM_1>:
     67e:	43 41 4c 20 50 57 4d 20 31 00 00                    CAL PWM 1..

00000689 <Comando_Cal_PWM_2>:
     689:	43 41 4c 20 50 57 4d 20 32 00 00                    CAL PWM 2..

00000694 <Comando_Cal_Cond_1>:
     694:	43 41 4c 20 43 4f 4e 44 20 31 00 00                 CAL COND 1..

000006a0 <Comando_Cal_Cond_2>:
     6a0:	43 41 4c 20 43 4f 4e 44 20 32 00 00                 CAL COND 2..

000006ac <Comando_Autocal_PWM_1>:
     6ac:	41 55 54 4f 43 41 4c 20 50 57 4d 20 31 00 00        AUTOCAL PWM 1..

000006bb <Comando_Autocal_PWM_2>:
     6bb:	41 55 54 4f 43 41 4c 20 50 57 4d 20 32 00 00        AUTOCAL PWM 2..

000006ca <Comando_Autocal_Cond_1>:
     6ca:	41 55 54 4f 43 41 4c 20 43 4f 4e 44 20 31 00 00     AUTOCAL COND 1..

000006da <Comando_Autocal_Cond_2>:
     6da:	41 55 54 4f 43 41 4c 20 43 4f 4e 44 20 32 00 00     AUTOCAL COND 2..

000006ea <Comando_Offset_1>:
     6ea:	4f 46 46 53 45 54 20 43 4f 4e 44 20 31 00 00        OFFSET COND 1..

000006f9 <Comando_Offset_2>:
     6f9:	4f 46 46 53 45 54 20 43 4f 4e 44 20 32 00 00        OFFSET COND 2..

00000708 <Comando_Rango_1>:
     708:	52 41 4e 47 4f 20 43 4f 4e 44 20 31 00 00           RANGO COND 1..

00000716 <Comando_Rango_2>:
     716:	52 41 4e 47 4f 20 43 4f 4e 44 20 32 00 00           RANGO COND 2..

00000724 <Comando_Silenciar_Alarma>:
     724:	53 49 4c 45 4e 43 49 41 52 20 41 4c 41 52 4d 41     SILENCIAR ALARMA
	...

00000736 <MSG_Comando>:
     736:	43 4f 4d 41 4e 44 4f 00 00                          COMANDO..

0000073f <MSG_Parametro>:
     73f:	50 41 52 41 4d 45 54 52 4f 00 00                    PARAMETRO..

0000074a <MSG_Desconocido>:
     74a:	44 45 53 43 4f 4e 4f 43 49 44 4f 00 00              DESCONOCIDO..

00000757 <MSG_Borrado>:
     757:	42 4f 52 52 41 44 4f 00 00                          BORRADO..

00000760 <MSG_Ok>:
     760:	4f 4b 00 00                                         OK..

00000764 <MSG_End>:
     764:	45 4e 44 00 00                                      END..

00000769 <MSG_Error>:
     769:	45 52 52 4f 52 00 00                                ERROR..

00000770 <MSG_Terminal_Lista>:
     770:	0a 0a 0d 54 65 72 6d 69 6e 61 6c 20 4c 69 73 74     ...Terminal List
     780:	61 21 0a 0a 0d 00 00                                a!.....

00000787 <MSG_FueraDeRango>:
     787:	46 55 45 52 41 20 44 45 20 52 41 4e 47 4f 00 00     FUERA DE RANGO..

00000797 <MSG_Offset>:
     797:	4f 46 46 53 45 54 00 00                             OFFSET..

0000079f <MSG_Rango_0_20_G>:
     79f:	30 2d 32 30 47 00 00                                0-20G..

000007a6 <MSG_Rango_0_20_C>:
     7a6:	30 2d 32 30 43 00 00                                0-20C..

000007ad <MSG_Rango_2_200_G>:
     7ad:	32 2d 32 30 30 47 00 00                             2-200G..

000007b5 <MSG_Rango_2_200_C>:
     7b5:	32 2d 32 30 30 43 00 00                             2-200C..

000007bd <MSG_Rango_20_2500_G>:
     7bd:	32 30 2d 32 35 30 30 47 00 00                       20-2500G..

000007c7 <MSG_Rango_20_2500_C>:
     7c7:	32 30 2d 32 35 30 30 43 00 00                       20-2500C..

000007d1 <__c.2510>:
     7d1:	0a 0d 00 00                                         ....

000007d5 <__c.2513>:
     7d5:	0a 0d 00 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     .....@z..Z..rN..
     7e5:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     7f5:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     805:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     815:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     825:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     835:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     845:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     855:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     865:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     875:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     885:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     895:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     8a5:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     8b5:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     8c5:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000008d4 <__ctors_end>:
     8d4:	11 24       	eor	r1, r1
     8d6:	1f be       	out	0x3f, r1	; 63
     8d8:	cf ef       	ldi	r28, 0xFF	; 255
     8da:	d0 e1       	ldi	r29, 0x10	; 16
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	cd bf       	out	0x3d, r28	; 61

000008e0 <__do_copy_data>:
     8e0:	12 e0       	ldi	r17, 0x02	; 2
     8e2:	a0 e0       	ldi	r26, 0x00	; 0
     8e4:	b1 e0       	ldi	r27, 0x01	; 1
     8e6:	e4 e8       	ldi	r30, 0x84	; 132
     8e8:	f3 e1       	ldi	r31, 0x13	; 19
     8ea:	01 e0       	ldi	r16, 0x01	; 1
     8ec:	0b bf       	out	0x3b, r16	; 59
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <__do_copy_data+0x14>
     8f0:	07 90       	elpm	r0, Z+
     8f2:	0d 92       	st	X+, r0
     8f4:	a0 37       	cpi	r26, 0x70	; 112
     8f6:	b1 07       	cpc	r27, r17
     8f8:	d9 f7       	brne	.-10     	; 0x8f0 <__do_copy_data+0x10>

000008fa <__do_clear_bss>:
     8fa:	26 e0       	ldi	r18, 0x06	; 6
     8fc:	a0 e7       	ldi	r26, 0x70	; 112
     8fe:	b2 e0       	ldi	r27, 0x02	; 2
     900:	01 c0       	rjmp	.+2      	; 0x904 <.do_clear_bss_start>

00000902 <.do_clear_bss_loop>:
     902:	1d 92       	st	X+, r1

00000904 <.do_clear_bss_start>:
     904:	ac 32       	cpi	r26, 0x2C	; 44
     906:	b2 07       	cpc	r27, r18
     908:	e1 f7       	brne	.-8      	; 0x902 <.do_clear_bss_loop>
     90a:	0e 94 0a 44 	call	0x8814	; 0x8814 <main>
     90e:	0c 94 c0 89 	jmp	0x11380	; 0x11380 <_exit>

00000912 <__bad_interrupt>:
     912:	0c 94 50 47 	jmp	0x8ea0	; 0x8ea0 <__vector_default>

00000916 <Actualizar_PWM_420mA>:
extern int				cond2MinUs;

/*****************************************************************************
* Maquina de estados
*****************************************************************************/
void Actualizar_PWM_420mA (void) {
     916:	cf 92       	push	r12
     918:	df 92       	push	r13
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
	switch (uchEstadoPWM420mA) {
     92a:	80 91 76 02 	lds	r24, 0x0276
     92e:	88 2f       	mov	r24, r24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	81 30       	cpi	r24, 0x01	; 1
     934:	91 05       	cpc	r25, r1
     936:	21 f0       	breq	.+8      	; 0x940 <Actualizar_PWM_420mA+0x2a>
     938:	02 97       	sbiw	r24, 0x02	; 2
     93a:	09 f4       	brne	.+2      	; 0x93e <Actualizar_PWM_420mA+0x28>
     93c:	48 c2       	rjmp	.+1168   	; 0xdce <Actualizar_PWM_420mA+0x4b8>
     93e:	8e c4       	rjmp	.+2332   	; 0x125c <__stack+0x15d>

		case PWM_1_420MA_ACTUALIZAR:
			if (chValorNuevoPWM1 == SI) {
     940:	80 91 1a 05 	lds	r24, 0x051A
     944:	81 30       	cpi	r24, 0x01	; 1
     946:	09 f0       	breq	.+2      	; 0x94a <Actualizar_PWM_420mA+0x34>
     948:	3e c2       	rjmp	.+1148   	; 0xdc6 <Actualizar_PWM_420mA+0x4b0>
				// salida 4-20mA Cond. 1
				flCorrienteObjetivo = I_MAX_MA-(cond1MaxUs-flCond1valoruS)*(I_MAX_MA-I_MIN_MA)/(cond1MaxUs-cond1MinUs);
     94a:	80 91 e7 04 	lds	r24, 0x04E7
     94e:	90 91 e8 04 	lds	r25, 0x04E8
     952:	09 2e       	mov	r0, r25
     954:	00 0c       	add	r0, r0
     956:	aa 0b       	sbc	r26, r26
     958:	bb 0b       	sbc	r27, r27
     95a:	bc 01       	movw	r22, r24
     95c:	cd 01       	movw	r24, r26
     95e:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
     962:	7b 01       	movw	r14, r22
     964:	8c 01       	movw	r16, r24
     966:	80 91 11 05 	lds	r24, 0x0511
     96a:	90 91 12 05 	lds	r25, 0x0512
     96e:	a0 91 13 05 	lds	r26, 0x0513
     972:	b0 91 14 05 	lds	r27, 0x0514
     976:	9c 01       	movw	r18, r24
     978:	ad 01       	movw	r20, r26
     97a:	c8 01       	movw	r24, r16
     97c:	b7 01       	movw	r22, r14
     97e:	0e 94 74 81 	call	0x102e8	; 0x102e8 <__subsf3>
     982:	dc 01       	movw	r26, r24
     984:	cb 01       	movw	r24, r22
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	40 e8       	ldi	r20, 0x80	; 128
     98c:	51 e4       	ldi	r21, 0x41	; 65
     98e:	bc 01       	movw	r22, r24
     990:	cd 01       	movw	r24, r26
     992:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
     996:	dc 01       	movw	r26, r24
     998:	cb 01       	movw	r24, r22
     99a:	6c 01       	movw	r12, r24
     99c:	7d 01       	movw	r14, r26
     99e:	20 91 e7 04 	lds	r18, 0x04E7
     9a2:	30 91 e8 04 	lds	r19, 0x04E8
     9a6:	80 91 ff 04 	lds	r24, 0x04FF
     9aa:	90 91 00 05 	lds	r25, 0x0500
     9ae:	a9 01       	movw	r20, r18
     9b0:	48 1b       	sub	r20, r24
     9b2:	59 0b       	sbc	r21, r25
     9b4:	ca 01       	movw	r24, r20
     9b6:	09 2e       	mov	r0, r25
     9b8:	00 0c       	add	r0, r0
     9ba:	aa 0b       	sbc	r26, r26
     9bc:	bb 0b       	sbc	r27, r27
     9be:	bc 01       	movw	r22, r24
     9c0:	cd 01       	movw	r24, r26
     9c2:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
     9c6:	dc 01       	movw	r26, r24
     9c8:	cb 01       	movw	r24, r22
     9ca:	9c 01       	movw	r18, r24
     9cc:	ad 01       	movw	r20, r26
     9ce:	c7 01       	movw	r24, r14
     9d0:	b6 01       	movw	r22, r12
     9d2:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
     9d6:	dc 01       	movw	r26, r24
     9d8:	cb 01       	movw	r24, r22
     9da:	9c 01       	movw	r18, r24
     9dc:	ad 01       	movw	r20, r26
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	80 ea       	ldi	r24, 0xA0	; 160
     9e4:	91 e4       	ldi	r25, 0x41	; 65
     9e6:	0e 94 74 81 	call	0x102e8	; 0x102e8 <__subsf3>
     9ea:	dc 01       	movw	r26, r24
     9ec:	cb 01       	movw	r24, r22
     9ee:	80 93 70 02 	sts	0x0270, r24
     9f2:	90 93 71 02 	sts	0x0271, r25
     9f6:	a0 93 72 02 	sts	0x0272, r26
     9fa:	b0 93 73 02 	sts	0x0273, r27

				// limito la corriente dentro del rango
				if (flCorrienteObjetivo < I_MIN_MA)
     9fe:	80 91 70 02 	lds	r24, 0x0270
     a02:	90 91 71 02 	lds	r25, 0x0271
     a06:	a0 91 72 02 	lds	r26, 0x0272
     a0a:	b0 91 73 02 	lds	r27, 0x0273
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	40 e8       	ldi	r20, 0x80	; 128
     a14:	50 e4       	ldi	r21, 0x40	; 64
     a16:	bc 01       	movw	r22, r24
     a18:	cd 01       	movw	r24, r26
     a1a:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
     a1e:	88 23       	and	r24, r24
     a20:	6c f4       	brge	.+26     	; 0xa3c <Actualizar_PWM_420mA+0x126>
					flCorrienteObjetivo = I_MIN_MA;
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	a0 e8       	ldi	r26, 0x80	; 128
     a28:	b0 e4       	ldi	r27, 0x40	; 64
     a2a:	80 93 70 02 	sts	0x0270, r24
     a2e:	90 93 71 02 	sts	0x0271, r25
     a32:	a0 93 72 02 	sts	0x0272, r26
     a36:	b0 93 73 02 	sts	0x0273, r27
     a3a:	1e c0       	rjmp	.+60     	; 0xa78 <Actualizar_PWM_420mA+0x162>
				else if (flCorrienteObjetivo > I_MAX_MA)
     a3c:	80 91 70 02 	lds	r24, 0x0270
     a40:	90 91 71 02 	lds	r25, 0x0271
     a44:	a0 91 72 02 	lds	r26, 0x0272
     a48:	b0 91 73 02 	lds	r27, 0x0273
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	40 ea       	ldi	r20, 0xA0	; 160
     a52:	51 e4       	ldi	r21, 0x41	; 65
     a54:	bc 01       	movw	r22, r24
     a56:	cd 01       	movw	r24, r26
     a58:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
     a5c:	18 16       	cp	r1, r24
     a5e:	64 f4       	brge	.+24     	; 0xa78 <Actualizar_PWM_420mA+0x162>
					flCorrienteObjetivo = I_MAX_MA;
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 ea       	ldi	r26, 0xA0	; 160
     a66:	b1 e4       	ldi	r27, 0x41	; 65
     a68:	80 93 70 02 	sts	0x0270, r24
     a6c:	90 93 71 02 	sts	0x0271, r25
     a70:	a0 93 72 02 	sts	0x0272, r26
     a74:	b0 93 73 02 	sts	0x0273, r27

				// calculo el diferencial de corriente
				flDeltaI = flCorrienteObjetivo-flPWM1valorMA;
     a78:	80 91 70 02 	lds	r24, 0x0270
     a7c:	90 91 71 02 	lds	r25, 0x0271
     a80:	a0 91 72 02 	lds	r26, 0x0272
     a84:	b0 91 73 02 	lds	r27, 0x0273
     a88:	20 91 13 06 	lds	r18, 0x0613
     a8c:	30 91 14 06 	lds	r19, 0x0614
     a90:	40 91 15 06 	lds	r20, 0x0615
     a94:	50 91 16 06 	lds	r21, 0x0616
     a98:	bc 01       	movw	r22, r24
     a9a:	cd 01       	movw	r24, r26
     a9c:	0e 94 74 81 	call	0x102e8	; 0x102e8 <__subsf3>
     aa0:	dc 01       	movw	r26, r24
     aa2:	cb 01       	movw	r24, r22
     aa4:	80 93 7b 02 	sts	0x027B, r24
     aa8:	90 93 7c 02 	sts	0x027C, r25
     aac:	a0 93 7d 02 	sts	0x027D, r26
     ab0:	b0 93 7e 02 	sts	0x027E, r27

				if (fabs(flDeltaI) > MAX_PWM_RES_MA){
     ab4:	80 91 7b 02 	lds	r24, 0x027B
     ab8:	90 91 7c 02 	lds	r25, 0x027C
     abc:	a0 91 7d 02 	lds	r26, 0x027D
     ac0:	b0 91 7e 02 	lds	r27, 0x027E
     ac4:	bf 77       	andi	r27, 0x7F	; 127
     ac6:	2a e0       	ldi	r18, 0x0A	; 10
     ac8:	37 ed       	ldi	r19, 0xD7	; 215
     aca:	43 ea       	ldi	r20, 0xA3	; 163
     acc:	5c e3       	ldi	r21, 0x3C	; 60
     ace:	bc 01       	movw	r22, r24
     ad0:	cd 01       	movw	r24, r26
     ad2:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
     ad6:	18 16       	cp	r1, r24
     ad8:	0c f0       	brlt	.+2      	; 0xadc <Actualizar_PWM_420mA+0x1c6>
     ada:	73 c1       	rjmp	.+742    	; 0xdc2 <Actualizar_PWM_420mA+0x4ac>
					if (fabs(flDeltaI) < VALOR_PWM_SIN_GANANCIA_MA){
     adc:	80 91 7b 02 	lds	r24, 0x027B
     ae0:	90 91 7c 02 	lds	r25, 0x027C
     ae4:	a0 91 7d 02 	lds	r26, 0x027D
     ae8:	b0 91 7e 02 	lds	r27, 0x027E
     aec:	bf 77       	andi	r27, 0x7F	; 127
     aee:	2d ec       	ldi	r18, 0xCD	; 205
     af0:	3c ec       	ldi	r19, 0xCC	; 204
     af2:	4c e4       	ldi	r20, 0x4C	; 76
     af4:	5e e3       	ldi	r21, 0x3E	; 62
     af6:	bc 01       	movw	r22, r24
     af8:	cd 01       	movw	r24, r26
     afa:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
     afe:	88 23       	and	r24, r24
     b00:	0c f0       	brlt	.+2      	; 0xb04 <Actualizar_PWM_420mA+0x1ee>
     b02:	53 c0       	rjmp	.+166    	; 0xbaa <Actualizar_PWM_420mA+0x294>
						if ((flCorrienteObjetivo > flPWM1valorMA) && (OCR1A < (CUENTAS_MAX_PWM-1))) {
     b04:	80 91 70 02 	lds	r24, 0x0270
     b08:	90 91 71 02 	lds	r25, 0x0271
     b0c:	a0 91 72 02 	lds	r26, 0x0272
     b10:	b0 91 73 02 	lds	r27, 0x0273
     b14:	20 91 13 06 	lds	r18, 0x0613
     b18:	30 91 14 06 	lds	r19, 0x0614
     b1c:	40 91 15 06 	lds	r20, 0x0615
     b20:	50 91 16 06 	lds	r21, 0x0616
     b24:	bc 01       	movw	r22, r24
     b26:	cd 01       	movw	r24, r26
     b28:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
     b2c:	18 16       	cp	r1, r24
     b2e:	9c f4       	brge	.+38     	; 0xb56 <Actualizar_PWM_420mA+0x240>
     b30:	8a e4       	ldi	r24, 0x4A	; 74
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	fc 01       	movw	r30, r24
     b36:	80 81       	ld	r24, Z
     b38:	91 81       	ldd	r25, Z+1	; 0x01
     b3a:	8f 3f       	cpi	r24, 0xFF	; 255
     b3c:	93 40       	sbci	r25, 0x03	; 3
     b3e:	58 f4       	brcc	.+22     	; 0xb56 <Actualizar_PWM_420mA+0x240>
							OCR1A++;
     b40:	8a e4       	ldi	r24, 0x4A	; 74
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	fc 01       	movw	r30, r24
     b46:	20 81       	ld	r18, Z
     b48:	31 81       	ldd	r19, Z+1	; 0x01
     b4a:	2f 5f       	subi	r18, 0xFF	; 255
     b4c:	3f 4f       	sbci	r19, 0xFF	; 255
     b4e:	fc 01       	movw	r30, r24
     b50:	31 83       	std	Z+1, r19	; 0x01
     b52:	20 83       	st	Z, r18
     b54:	36 c1       	rjmp	.+620    	; 0xdc2 <Actualizar_PWM_420mA+0x4ac>
						}
						else if ((flCorrienteObjetivo < flPWM1valorMA) && (OCR1A > 0)) {
     b56:	80 91 70 02 	lds	r24, 0x0270
     b5a:	90 91 71 02 	lds	r25, 0x0271
     b5e:	a0 91 72 02 	lds	r26, 0x0272
     b62:	b0 91 73 02 	lds	r27, 0x0273
     b66:	20 91 13 06 	lds	r18, 0x0613
     b6a:	30 91 14 06 	lds	r19, 0x0614
     b6e:	40 91 15 06 	lds	r20, 0x0615
     b72:	50 91 16 06 	lds	r21, 0x0616
     b76:	bc 01       	movw	r22, r24
     b78:	cd 01       	movw	r24, r26
     b7a:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
     b7e:	88 23       	and	r24, r24
     b80:	0c f0       	brlt	.+2      	; 0xb84 <Actualizar_PWM_420mA+0x26e>
     b82:	1f c1       	rjmp	.+574    	; 0xdc2 <Actualizar_PWM_420mA+0x4ac>
     b84:	8a e4       	ldi	r24, 0x4A	; 74
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	fc 01       	movw	r30, r24
     b8a:	80 81       	ld	r24, Z
     b8c:	91 81       	ldd	r25, Z+1	; 0x01
     b8e:	89 2b       	or	r24, r25
     b90:	09 f4       	brne	.+2      	; 0xb94 <Actualizar_PWM_420mA+0x27e>
     b92:	17 c1       	rjmp	.+558    	; 0xdc2 <Actualizar_PWM_420mA+0x4ac>
							OCR1A--;
     b94:	8a e4       	ldi	r24, 0x4A	; 74
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	fc 01       	movw	r30, r24
     b9a:	20 81       	ld	r18, Z
     b9c:	31 81       	ldd	r19, Z+1	; 0x01
     b9e:	21 50       	subi	r18, 0x01	; 1
     ba0:	31 09       	sbc	r19, r1
     ba2:	fc 01       	movw	r30, r24
     ba4:	31 83       	std	Z+1, r19	; 0x01
     ba6:	20 83       	st	Z, r18
     ba8:	0c c1       	rjmp	.+536    	; 0xdc2 <Actualizar_PWM_420mA+0x4ac>
						}
					}
					else {
						deltaOCR = (int)roundf((flDeltaI*CUENTAS_MAX_PWM*uGananciaPWM1)/(I_MAX_MA*MAXIMO_GANANCIA_LAZO_PWM));
     baa:	80 91 7b 02 	lds	r24, 0x027B
     bae:	90 91 7c 02 	lds	r25, 0x027C
     bb2:	a0 91 7d 02 	lds	r26, 0x027D
     bb6:	b0 91 7e 02 	lds	r27, 0x027E
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	54 e4       	ldi	r21, 0x44	; 68
     bc2:	bc 01       	movw	r22, r24
     bc4:	cd 01       	movw	r24, r26
     bc6:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
     bce:	6c 01       	movw	r12, r24
     bd0:	7d 01       	movw	r14, r26
     bd2:	80 91 74 02 	lds	r24, 0x0274
     bd6:	90 91 75 02 	lds	r25, 0x0275
     bda:	cc 01       	movw	r24, r24
     bdc:	a0 e0       	ldi	r26, 0x00	; 0
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	bc 01       	movw	r22, r24
     be2:	cd 01       	movw	r24, r26
     be4:	0e 94 8e 82 	call	0x1051c	; 0x1051c <__floatunsisf>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	9c 01       	movw	r18, r24
     bee:	ad 01       	movw	r20, r26
     bf0:	c7 01       	movw	r24, r14
     bf2:	b6 01       	movw	r22, r12
     bf4:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e4       	ldi	r19, 0x40	; 64
     c00:	4c e9       	ldi	r20, 0x9C	; 156
     c02:	56 e4       	ldi	r21, 0x46	; 70
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	bc 01       	movw	r22, r24
     c12:	cd 01       	movw	r24, r26
     c14:	0e 94 b2 83 	call	0x10764	; 0x10764 <round>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	bc 01       	movw	r22, r24
     c1e:	cd 01       	movw	r24, r26
     c20:	0e 94 58 82 	call	0x104b0	; 0x104b0 <__fixsfsi>
     c24:	dc 01       	movw	r26, r24
     c26:	cb 01       	movw	r24, r22
     c28:	90 93 7a 02 	sts	0x027A, r25
     c2c:	80 93 79 02 	sts	0x0279, r24

						if (deltaOCR == 0){
     c30:	80 91 79 02 	lds	r24, 0x0279
     c34:	90 91 7a 02 	lds	r25, 0x027A
     c38:	89 2b       	or	r24, r25
     c3a:	09 f0       	breq	.+2      	; 0xc3e <Actualizar_PWM_420mA+0x328>
     c3c:	53 c0       	rjmp	.+166    	; 0xce4 <Actualizar_PWM_420mA+0x3ce>
							if ((flCorrienteObjetivo > flPWM1valorMA) && (OCR1A < (CUENTAS_MAX_PWM-1))) {
     c3e:	80 91 70 02 	lds	r24, 0x0270
     c42:	90 91 71 02 	lds	r25, 0x0271
     c46:	a0 91 72 02 	lds	r26, 0x0272
     c4a:	b0 91 73 02 	lds	r27, 0x0273
     c4e:	20 91 13 06 	lds	r18, 0x0613
     c52:	30 91 14 06 	lds	r19, 0x0614
     c56:	40 91 15 06 	lds	r20, 0x0615
     c5a:	50 91 16 06 	lds	r21, 0x0616
     c5e:	bc 01       	movw	r22, r24
     c60:	cd 01       	movw	r24, r26
     c62:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
     c66:	18 16       	cp	r1, r24
     c68:	9c f4       	brge	.+38     	; 0xc90 <Actualizar_PWM_420mA+0x37a>
     c6a:	8a e4       	ldi	r24, 0x4A	; 74
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	fc 01       	movw	r30, r24
     c70:	80 81       	ld	r24, Z
     c72:	91 81       	ldd	r25, Z+1	; 0x01
     c74:	8f 3f       	cpi	r24, 0xFF	; 255
     c76:	93 40       	sbci	r25, 0x03	; 3
     c78:	58 f4       	brcc	.+22     	; 0xc90 <Actualizar_PWM_420mA+0x37a>
								OCR1A++;
     c7a:	8a e4       	ldi	r24, 0x4A	; 74
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	fc 01       	movw	r30, r24
     c80:	20 81       	ld	r18, Z
     c82:	31 81       	ldd	r19, Z+1	; 0x01
     c84:	2f 5f       	subi	r18, 0xFF	; 255
     c86:	3f 4f       	sbci	r19, 0xFF	; 255
     c88:	fc 01       	movw	r30, r24
     c8a:	31 83       	std	Z+1, r19	; 0x01
     c8c:	20 83       	st	Z, r18
     c8e:	99 c0       	rjmp	.+306    	; 0xdc2 <Actualizar_PWM_420mA+0x4ac>
							}
							else if ((flCorrienteObjetivo < flPWM1valorMA) && (OCR1A > 0)) {
     c90:	80 91 70 02 	lds	r24, 0x0270
     c94:	90 91 71 02 	lds	r25, 0x0271
     c98:	a0 91 72 02 	lds	r26, 0x0272
     c9c:	b0 91 73 02 	lds	r27, 0x0273
     ca0:	20 91 13 06 	lds	r18, 0x0613
     ca4:	30 91 14 06 	lds	r19, 0x0614
     ca8:	40 91 15 06 	lds	r20, 0x0615
     cac:	50 91 16 06 	lds	r21, 0x0616
     cb0:	bc 01       	movw	r22, r24
     cb2:	cd 01       	movw	r24, r26
     cb4:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
     cb8:	88 23       	and	r24, r24
     cba:	0c f0       	brlt	.+2      	; 0xcbe <Actualizar_PWM_420mA+0x3a8>
     cbc:	82 c0       	rjmp	.+260    	; 0xdc2 <Actualizar_PWM_420mA+0x4ac>
     cbe:	8a e4       	ldi	r24, 0x4A	; 74
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	fc 01       	movw	r30, r24
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	89 2b       	or	r24, r25
     cca:	09 f4       	brne	.+2      	; 0xcce <Actualizar_PWM_420mA+0x3b8>
     ccc:	7a c0       	rjmp	.+244    	; 0xdc2 <Actualizar_PWM_420mA+0x4ac>
								OCR1A--;
     cce:	8a e4       	ldi	r24, 0x4A	; 74
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	fc 01       	movw	r30, r24
     cd4:	20 81       	ld	r18, Z
     cd6:	31 81       	ldd	r19, Z+1	; 0x01
     cd8:	21 50       	subi	r18, 0x01	; 1
     cda:	31 09       	sbc	r19, r1
     cdc:	fc 01       	movw	r30, r24
     cde:	31 83       	std	Z+1, r19	; 0x01
     ce0:	20 83       	st	Z, r18
     ce2:	6f c0       	rjmp	.+222    	; 0xdc2 <Actualizar_PWM_420mA+0x4ac>
							}
						}
						else if (deltaOCR > 0){
     ce4:	80 91 79 02 	lds	r24, 0x0279
     ce8:	90 91 7a 02 	lds	r25, 0x027A
     cec:	18 16       	cp	r1, r24
     cee:	19 06       	cpc	r1, r25
     cf0:	9c f5       	brge	.+102    	; 0xd58 <Actualizar_PWM_420mA+0x442>
							if ((OCR1A+deltaOCR) < (CUENTAS_MAX_PWM-1)) {
     cf2:	8a e4       	ldi	r24, 0x4A	; 74
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	fc 01       	movw	r30, r24
     cf8:	80 81       	ld	r24, Z
     cfa:	91 81       	ldd	r25, Z+1	; 0x01
     cfc:	20 91 79 02 	lds	r18, 0x0279
     d00:	30 91 7a 02 	lds	r19, 0x027A
     d04:	82 0f       	add	r24, r18
     d06:	93 1f       	adc	r25, r19
     d08:	8f 3f       	cpi	r24, 0xFF	; 255
     d0a:	93 40       	sbci	r25, 0x03	; 3
     d0c:	88 f4       	brcc	.+34     	; 0xd30 <Actualizar_PWM_420mA+0x41a>
								OCR1A += deltaOCR;
     d0e:	8a e4       	ldi	r24, 0x4A	; 74
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	2a e4       	ldi	r18, 0x4A	; 74
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	f9 01       	movw	r30, r18
     d18:	20 81       	ld	r18, Z
     d1a:	31 81       	ldd	r19, Z+1	; 0x01
     d1c:	40 91 79 02 	lds	r20, 0x0279
     d20:	50 91 7a 02 	lds	r21, 0x027A
     d24:	24 0f       	add	r18, r20
     d26:	35 1f       	adc	r19, r21
     d28:	fc 01       	movw	r30, r24
     d2a:	31 83       	std	Z+1, r19	; 0x01
     d2c:	20 83       	st	Z, r18
     d2e:	49 c0       	rjmp	.+146    	; 0xdc2 <Actualizar_PWM_420mA+0x4ac>
							}
							else if (OCR1A < (CUENTAS_MAX_PWM-1)){
     d30:	8a e4       	ldi	r24, 0x4A	; 74
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	fc 01       	movw	r30, r24
     d36:	80 81       	ld	r24, Z
     d38:	91 81       	ldd	r25, Z+1	; 0x01
     d3a:	8f 3f       	cpi	r24, 0xFF	; 255
     d3c:	93 40       	sbci	r25, 0x03	; 3
     d3e:	08 f0       	brcs	.+2      	; 0xd42 <Actualizar_PWM_420mA+0x42c>
     d40:	40 c0       	rjmp	.+128    	; 0xdc2 <Actualizar_PWM_420mA+0x4ac>
								OCR1A++;
     d42:	8a e4       	ldi	r24, 0x4A	; 74
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	fc 01       	movw	r30, r24
     d48:	20 81       	ld	r18, Z
     d4a:	31 81       	ldd	r19, Z+1	; 0x01
     d4c:	2f 5f       	subi	r18, 0xFF	; 255
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255
     d50:	fc 01       	movw	r30, r24
     d52:	31 83       	std	Z+1, r19	; 0x01
     d54:	20 83       	st	Z, r18
     d56:	35 c0       	rjmp	.+106    	; 0xdc2 <Actualizar_PWM_420mA+0x4ac>
							}
						}
						else if (deltaOCR < 0){
     d58:	80 91 79 02 	lds	r24, 0x0279
     d5c:	90 91 7a 02 	lds	r25, 0x027A
     d60:	99 23       	and	r25, r25
     d62:	7c f5       	brge	.+94     	; 0xdc2 <Actualizar_PWM_420mA+0x4ac>
							if ((OCR1A+deltaOCR) > 0) {
     d64:	8a e4       	ldi	r24, 0x4A	; 74
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	fc 01       	movw	r30, r24
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	20 91 79 02 	lds	r18, 0x0279
     d72:	30 91 7a 02 	lds	r19, 0x027A
     d76:	82 0f       	add	r24, r18
     d78:	93 1f       	adc	r25, r19
     d7a:	89 2b       	or	r24, r25
     d7c:	89 f0       	breq	.+34     	; 0xda0 <Actualizar_PWM_420mA+0x48a>
								OCR1A += deltaOCR;
     d7e:	8a e4       	ldi	r24, 0x4A	; 74
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	2a e4       	ldi	r18, 0x4A	; 74
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	f9 01       	movw	r30, r18
     d88:	20 81       	ld	r18, Z
     d8a:	31 81       	ldd	r19, Z+1	; 0x01
     d8c:	40 91 79 02 	lds	r20, 0x0279
     d90:	50 91 7a 02 	lds	r21, 0x027A
     d94:	24 0f       	add	r18, r20
     d96:	35 1f       	adc	r19, r21
     d98:	fc 01       	movw	r30, r24
     d9a:	31 83       	std	Z+1, r19	; 0x01
     d9c:	20 83       	st	Z, r18
     d9e:	11 c0       	rjmp	.+34     	; 0xdc2 <Actualizar_PWM_420mA+0x4ac>
							}
							else if (OCR1A > 0){
     da0:	8a e4       	ldi	r24, 0x4A	; 74
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	fc 01       	movw	r30, r24
     da6:	80 81       	ld	r24, Z
     da8:	91 81       	ldd	r25, Z+1	; 0x01
     daa:	89 2b       	or	r24, r25
     dac:	51 f0       	breq	.+20     	; 0xdc2 <Actualizar_PWM_420mA+0x4ac>
								OCR1A--;
     dae:	8a e4       	ldi	r24, 0x4A	; 74
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	fc 01       	movw	r30, r24
     db4:	20 81       	ld	r18, Z
     db6:	31 81       	ldd	r19, Z+1	; 0x01
     db8:	21 50       	subi	r18, 0x01	; 1
     dba:	31 09       	sbc	r19, r1
     dbc:	fc 01       	movw	r30, r24
     dbe:	31 83       	std	Z+1, r19	; 0x01
     dc0:	20 83       	st	Z, r18
							}
						}
					}
				}
				chValorNuevoPWM1 = NO;
     dc2:	10 92 1a 05 	sts	0x051A, r1
			}

			uchEstadoPWM420mA = PWM_2_420MA_ACTUALIZAR;
     dc6:	82 e0       	ldi	r24, 0x02	; 2
     dc8:	80 93 76 02 	sts	0x0276, r24
			break;
     dcc:	4a c2       	rjmp	.+1172   	; 0x1262 <__stack+0x163>

		case PWM_2_420MA_ACTUALIZAR:
			if (chValorNuevoPWM2 == SI) {
     dce:	80 91 fc 04 	lds	r24, 0x04FC
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <Actualizar_PWM_420mA+0x4c2>
     dd6:	3e c2       	rjmp	.+1148   	; 0x1254 <__stack+0x155>
				// salida 4-20mA Cond. 2
				flCorrienteObjetivo = I_MAX_MA-(cond2MaxUs-flCond2valoruS)*(I_MAX_MA-I_MIN_MA)/(cond2MaxUs-cond2MinUs);
     dd8:	80 91 1b 06 	lds	r24, 0x061B
     ddc:	90 91 1c 06 	lds	r25, 0x061C
     de0:	09 2e       	mov	r0, r25
     de2:	00 0c       	add	r0, r0
     de4:	aa 0b       	sbc	r26, r26
     de6:	bb 0b       	sbc	r27, r27
     de8:	bc 01       	movw	r22, r24
     dea:	cd 01       	movw	r24, r26
     dec:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
     df0:	7b 01       	movw	r14, r22
     df2:	8c 01       	movw	r16, r24
     df4:	80 91 ed 04 	lds	r24, 0x04ED
     df8:	90 91 ee 04 	lds	r25, 0x04EE
     dfc:	a0 91 ef 04 	lds	r26, 0x04EF
     e00:	b0 91 f0 04 	lds	r27, 0x04F0
     e04:	9c 01       	movw	r18, r24
     e06:	ad 01       	movw	r20, r26
     e08:	c8 01       	movw	r24, r16
     e0a:	b7 01       	movw	r22, r14
     e0c:	0e 94 74 81 	call	0x102e8	; 0x102e8 <__subsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e8       	ldi	r20, 0x80	; 128
     e1a:	51 e4       	ldi	r21, 0x41	; 65
     e1c:	bc 01       	movw	r22, r24
     e1e:	cd 01       	movw	r24, r26
     e20:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	6c 01       	movw	r12, r24
     e2a:	7d 01       	movw	r14, r26
     e2c:	20 91 1b 06 	lds	r18, 0x061B
     e30:	30 91 1c 06 	lds	r19, 0x061C
     e34:	80 91 15 05 	lds	r24, 0x0515
     e38:	90 91 16 05 	lds	r25, 0x0516
     e3c:	a9 01       	movw	r20, r18
     e3e:	48 1b       	sub	r20, r24
     e40:	59 0b       	sbc	r21, r25
     e42:	ca 01       	movw	r24, r20
     e44:	09 2e       	mov	r0, r25
     e46:	00 0c       	add	r0, r0
     e48:	aa 0b       	sbc	r26, r26
     e4a:	bb 0b       	sbc	r27, r27
     e4c:	bc 01       	movw	r22, r24
     e4e:	cd 01       	movw	r24, r26
     e50:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	9c 01       	movw	r18, r24
     e5a:	ad 01       	movw	r20, r26
     e5c:	c7 01       	movw	r24, r14
     e5e:	b6 01       	movw	r22, r12
     e60:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9c 01       	movw	r18, r24
     e6a:	ad 01       	movw	r20, r26
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	80 ea       	ldi	r24, 0xA0	; 160
     e72:	91 e4       	ldi	r25, 0x41	; 65
     e74:	0e 94 74 81 	call	0x102e8	; 0x102e8 <__subsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	80 93 70 02 	sts	0x0270, r24
     e80:	90 93 71 02 	sts	0x0271, r25
     e84:	a0 93 72 02 	sts	0x0272, r26
     e88:	b0 93 73 02 	sts	0x0273, r27

				// limito la corriente dentro del rango
				if (flCorrienteObjetivo < I_MIN_MA)
     e8c:	80 91 70 02 	lds	r24, 0x0270
     e90:	90 91 71 02 	lds	r25, 0x0271
     e94:	a0 91 72 02 	lds	r26, 0x0272
     e98:	b0 91 73 02 	lds	r27, 0x0273
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e8       	ldi	r20, 0x80	; 128
     ea2:	50 e4       	ldi	r21, 0x40	; 64
     ea4:	bc 01       	movw	r22, r24
     ea6:	cd 01       	movw	r24, r26
     ea8:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
     eac:	88 23       	and	r24, r24
     eae:	6c f4       	brge	.+26     	; 0xeca <Actualizar_PWM_420mA+0x5b4>
					flCorrienteObjetivo = I_MIN_MA;
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	a0 e8       	ldi	r26, 0x80	; 128
     eb6:	b0 e4       	ldi	r27, 0x40	; 64
     eb8:	80 93 70 02 	sts	0x0270, r24
     ebc:	90 93 71 02 	sts	0x0271, r25
     ec0:	a0 93 72 02 	sts	0x0272, r26
     ec4:	b0 93 73 02 	sts	0x0273, r27
     ec8:	1e c0       	rjmp	.+60     	; 0xf06 <Actualizar_PWM_420mA+0x5f0>
				else if (flCorrienteObjetivo > I_MAX_MA)
     eca:	80 91 70 02 	lds	r24, 0x0270
     ece:	90 91 71 02 	lds	r25, 0x0271
     ed2:	a0 91 72 02 	lds	r26, 0x0272
     ed6:	b0 91 73 02 	lds	r27, 0x0273
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 ea       	ldi	r20, 0xA0	; 160
     ee0:	51 e4       	ldi	r21, 0x41	; 65
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
     eea:	18 16       	cp	r1, r24
     eec:	64 f4       	brge	.+24     	; 0xf06 <Actualizar_PWM_420mA+0x5f0>
					flCorrienteObjetivo = I_MAX_MA;
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a0 ea       	ldi	r26, 0xA0	; 160
     ef4:	b1 e4       	ldi	r27, 0x41	; 65
     ef6:	80 93 70 02 	sts	0x0270, r24
     efa:	90 93 71 02 	sts	0x0271, r25
     efe:	a0 93 72 02 	sts	0x0272, r26
     f02:	b0 93 73 02 	sts	0x0273, r27

				// calculo el diferencial de corriente
				flDeltaI = flCorrienteObjetivo-flPWM2valorMA;
     f06:	80 91 70 02 	lds	r24, 0x0270
     f0a:	90 91 71 02 	lds	r25, 0x0271
     f0e:	a0 91 72 02 	lds	r26, 0x0272
     f12:	b0 91 73 02 	lds	r27, 0x0273
     f16:	20 91 17 06 	lds	r18, 0x0617
     f1a:	30 91 18 06 	lds	r19, 0x0618
     f1e:	40 91 19 06 	lds	r20, 0x0619
     f22:	50 91 1a 06 	lds	r21, 0x061A
     f26:	bc 01       	movw	r22, r24
     f28:	cd 01       	movw	r24, r26
     f2a:	0e 94 74 81 	call	0x102e8	; 0x102e8 <__subsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	80 93 7b 02 	sts	0x027B, r24
     f36:	90 93 7c 02 	sts	0x027C, r25
     f3a:	a0 93 7d 02 	sts	0x027D, r26
     f3e:	b0 93 7e 02 	sts	0x027E, r27

				if (fabs(flDeltaI) > MAX_PWM_RES_MA){
     f42:	80 91 7b 02 	lds	r24, 0x027B
     f46:	90 91 7c 02 	lds	r25, 0x027C
     f4a:	a0 91 7d 02 	lds	r26, 0x027D
     f4e:	b0 91 7e 02 	lds	r27, 0x027E
     f52:	bf 77       	andi	r27, 0x7F	; 127
     f54:	2a e0       	ldi	r18, 0x0A	; 10
     f56:	37 ed       	ldi	r19, 0xD7	; 215
     f58:	43 ea       	ldi	r20, 0xA3	; 163
     f5a:	5c e3       	ldi	r21, 0x3C	; 60
     f5c:	bc 01       	movw	r22, r24
     f5e:	cd 01       	movw	r24, r26
     f60:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
     f64:	18 16       	cp	r1, r24
     f66:	0c f0       	brlt	.+2      	; 0xf6a <Actualizar_PWM_420mA+0x654>
     f68:	73 c1       	rjmp	.+742    	; 0x1250 <__stack+0x151>
					if (fabs(flDeltaI) < VALOR_PWM_SIN_GANANCIA_MA){
     f6a:	80 91 7b 02 	lds	r24, 0x027B
     f6e:	90 91 7c 02 	lds	r25, 0x027C
     f72:	a0 91 7d 02 	lds	r26, 0x027D
     f76:	b0 91 7e 02 	lds	r27, 0x027E
     f7a:	bf 77       	andi	r27, 0x7F	; 127
     f7c:	2d ec       	ldi	r18, 0xCD	; 205
     f7e:	3c ec       	ldi	r19, 0xCC	; 204
     f80:	4c e4       	ldi	r20, 0x4C	; 76
     f82:	5e e3       	ldi	r21, 0x3E	; 62
     f84:	bc 01       	movw	r22, r24
     f86:	cd 01       	movw	r24, r26
     f88:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
     f8c:	88 23       	and	r24, r24
     f8e:	0c f0       	brlt	.+2      	; 0xf92 <Actualizar_PWM_420mA+0x67c>
     f90:	53 c0       	rjmp	.+166    	; 0x1038 <Actualizar_PWM_420mA+0x722>
						if ((flCorrienteObjetivo > flPWM2valorMA) && (OCR1B < (CUENTAS_MAX_PWM-1))) {
     f92:	80 91 70 02 	lds	r24, 0x0270
     f96:	90 91 71 02 	lds	r25, 0x0271
     f9a:	a0 91 72 02 	lds	r26, 0x0272
     f9e:	b0 91 73 02 	lds	r27, 0x0273
     fa2:	20 91 17 06 	lds	r18, 0x0617
     fa6:	30 91 18 06 	lds	r19, 0x0618
     faa:	40 91 19 06 	lds	r20, 0x0619
     fae:	50 91 1a 06 	lds	r21, 0x061A
     fb2:	bc 01       	movw	r22, r24
     fb4:	cd 01       	movw	r24, r26
     fb6:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
     fba:	18 16       	cp	r1, r24
     fbc:	9c f4       	brge	.+38     	; 0xfe4 <Actualizar_PWM_420mA+0x6ce>
     fbe:	88 e4       	ldi	r24, 0x48	; 72
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	fc 01       	movw	r30, r24
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	8f 3f       	cpi	r24, 0xFF	; 255
     fca:	93 40       	sbci	r25, 0x03	; 3
     fcc:	58 f4       	brcc	.+22     	; 0xfe4 <Actualizar_PWM_420mA+0x6ce>
							OCR1B++;
     fce:	88 e4       	ldi	r24, 0x48	; 72
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	fc 01       	movw	r30, r24
     fd4:	20 81       	ld	r18, Z
     fd6:	31 81       	ldd	r19, Z+1	; 0x01
     fd8:	2f 5f       	subi	r18, 0xFF	; 255
     fda:	3f 4f       	sbci	r19, 0xFF	; 255
     fdc:	fc 01       	movw	r30, r24
     fde:	31 83       	std	Z+1, r19	; 0x01
     fe0:	20 83       	st	Z, r18
     fe2:	36 c1       	rjmp	.+620    	; 0x1250 <__stack+0x151>
						}
						else if ((flCorrienteObjetivo < flPWM2valorMA) && (OCR1B > 0)) {
     fe4:	80 91 70 02 	lds	r24, 0x0270
     fe8:	90 91 71 02 	lds	r25, 0x0271
     fec:	a0 91 72 02 	lds	r26, 0x0272
     ff0:	b0 91 73 02 	lds	r27, 0x0273
     ff4:	20 91 17 06 	lds	r18, 0x0617
     ff8:	30 91 18 06 	lds	r19, 0x0618
     ffc:	40 91 19 06 	lds	r20, 0x0619
    1000:	50 91 1a 06 	lds	r21, 0x061A
    1004:	bc 01       	movw	r22, r24
    1006:	cd 01       	movw	r24, r26
    1008:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    100c:	88 23       	and	r24, r24
    100e:	0c f0       	brlt	.+2      	; 0x1012 <Actualizar_PWM_420mA+0x6fc>
    1010:	1f c1       	rjmp	.+574    	; 0x1250 <__stack+0x151>
    1012:	88 e4       	ldi	r24, 0x48	; 72
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	fc 01       	movw	r30, r24
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	89 2b       	or	r24, r25
    101e:	09 f4       	brne	.+2      	; 0x1022 <Actualizar_PWM_420mA+0x70c>
    1020:	17 c1       	rjmp	.+558    	; 0x1250 <__stack+0x151>
							OCR1B--;
    1022:	88 e4       	ldi	r24, 0x48	; 72
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	fc 01       	movw	r30, r24
    1028:	20 81       	ld	r18, Z
    102a:	31 81       	ldd	r19, Z+1	; 0x01
    102c:	21 50       	subi	r18, 0x01	; 1
    102e:	31 09       	sbc	r19, r1
    1030:	fc 01       	movw	r30, r24
    1032:	31 83       	std	Z+1, r19	; 0x01
    1034:	20 83       	st	Z, r18
    1036:	0c c1       	rjmp	.+536    	; 0x1250 <__stack+0x151>
						}
					}
					else {
						deltaOCR = (int)roundf((flDeltaI*CUENTAS_MAX_PWM*uGananciaPWM2)/(I_MAX_MA*MAXIMO_GANANCIA_LAZO_PWM));
    1038:	80 91 7b 02 	lds	r24, 0x027B
    103c:	90 91 7c 02 	lds	r25, 0x027C
    1040:	a0 91 7d 02 	lds	r26, 0x027D
    1044:	b0 91 7e 02 	lds	r27, 0x027E
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e8       	ldi	r20, 0x80	; 128
    104e:	54 e4       	ldi	r21, 0x44	; 68
    1050:	bc 01       	movw	r22, r24
    1052:	cd 01       	movw	r24, r26
    1054:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	6c 01       	movw	r12, r24
    105e:	7d 01       	movw	r14, r26
    1060:	80 91 77 02 	lds	r24, 0x0277
    1064:	90 91 78 02 	lds	r25, 0x0278
    1068:	cc 01       	movw	r24, r24
    106a:	a0 e0       	ldi	r26, 0x00	; 0
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	bc 01       	movw	r22, r24
    1070:	cd 01       	movw	r24, r26
    1072:	0e 94 8e 82 	call	0x1051c	; 0x1051c <__floatunsisf>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	9c 01       	movw	r18, r24
    107c:	ad 01       	movw	r20, r26
    107e:	c7 01       	movw	r24, r14
    1080:	b6 01       	movw	r22, r12
    1082:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e4       	ldi	r19, 0x40	; 64
    108e:	4c e9       	ldi	r20, 0x9C	; 156
    1090:	56 e4       	ldi	r21, 0x46	; 70
    1092:	bc 01       	movw	r22, r24
    1094:	cd 01       	movw	r24, r26
    1096:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	bc 01       	movw	r22, r24
    10a0:	cd 01       	movw	r24, r26
    10a2:	0e 94 b2 83 	call	0x10764	; 0x10764 <round>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	bc 01       	movw	r22, r24
    10ac:	cd 01       	movw	r24, r26
    10ae:	0e 94 58 82 	call	0x104b0	; 0x104b0 <__fixsfsi>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	90 93 7a 02 	sts	0x027A, r25
    10ba:	80 93 79 02 	sts	0x0279, r24

						if (deltaOCR == 0){
    10be:	80 91 79 02 	lds	r24, 0x0279
    10c2:	90 91 7a 02 	lds	r25, 0x027A
    10c6:	89 2b       	or	r24, r25
    10c8:	09 f0       	breq	.+2      	; 0x10cc <Actualizar_PWM_420mA+0x7b6>
    10ca:	53 c0       	rjmp	.+166    	; 0x1172 <__stack+0x73>
							if ((flCorrienteObjetivo > flPWM2valorMA) && (OCR1B < (CUENTAS_MAX_PWM-1))) {
    10cc:	80 91 70 02 	lds	r24, 0x0270
    10d0:	90 91 71 02 	lds	r25, 0x0271
    10d4:	a0 91 72 02 	lds	r26, 0x0272
    10d8:	b0 91 73 02 	lds	r27, 0x0273
    10dc:	20 91 17 06 	lds	r18, 0x0617
    10e0:	30 91 18 06 	lds	r19, 0x0618
    10e4:	40 91 19 06 	lds	r20, 0x0619
    10e8:	50 91 1a 06 	lds	r21, 0x061A
    10ec:	bc 01       	movw	r22, r24
    10ee:	cd 01       	movw	r24, r26
    10f0:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    10f4:	18 16       	cp	r1, r24
    10f6:	9c f4       	brge	.+38     	; 0x111e <__stack+0x1f>
    10f8:	88 e4       	ldi	r24, 0x48	; 72
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	fc 01       	movw	r30, r24
    10fe:	80 81       	ld	r24, Z
    1100:	91 81       	ldd	r25, Z+1	; 0x01
    1102:	8f 3f       	cpi	r24, 0xFF	; 255
    1104:	93 40       	sbci	r25, 0x03	; 3
    1106:	58 f4       	brcc	.+22     	; 0x111e <__stack+0x1f>
								OCR1B++;
    1108:	88 e4       	ldi	r24, 0x48	; 72
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	fc 01       	movw	r30, r24
    110e:	20 81       	ld	r18, Z
    1110:	31 81       	ldd	r19, Z+1	; 0x01
    1112:	2f 5f       	subi	r18, 0xFF	; 255
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	fc 01       	movw	r30, r24
    1118:	31 83       	std	Z+1, r19	; 0x01
    111a:	20 83       	st	Z, r18
    111c:	99 c0       	rjmp	.+306    	; 0x1250 <__stack+0x151>
							}
							else if ((flCorrienteObjetivo < flPWM2valorMA) && (OCR1B > 0)) {
    111e:	80 91 70 02 	lds	r24, 0x0270
    1122:	90 91 71 02 	lds	r25, 0x0271
    1126:	a0 91 72 02 	lds	r26, 0x0272
    112a:	b0 91 73 02 	lds	r27, 0x0273
    112e:	20 91 17 06 	lds	r18, 0x0617
    1132:	30 91 18 06 	lds	r19, 0x0618
    1136:	40 91 19 06 	lds	r20, 0x0619
    113a:	50 91 1a 06 	lds	r21, 0x061A
    113e:	bc 01       	movw	r22, r24
    1140:	cd 01       	movw	r24, r26
    1142:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    1146:	88 23       	and	r24, r24
    1148:	0c f0       	brlt	.+2      	; 0x114c <__stack+0x4d>
    114a:	82 c0       	rjmp	.+260    	; 0x1250 <__stack+0x151>
    114c:	88 e4       	ldi	r24, 0x48	; 72
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	fc 01       	movw	r30, r24
    1152:	80 81       	ld	r24, Z
    1154:	91 81       	ldd	r25, Z+1	; 0x01
    1156:	89 2b       	or	r24, r25
    1158:	09 f4       	brne	.+2      	; 0x115c <__stack+0x5d>
    115a:	7a c0       	rjmp	.+244    	; 0x1250 <__stack+0x151>
								OCR1B--;
    115c:	88 e4       	ldi	r24, 0x48	; 72
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	fc 01       	movw	r30, r24
    1162:	20 81       	ld	r18, Z
    1164:	31 81       	ldd	r19, Z+1	; 0x01
    1166:	21 50       	subi	r18, 0x01	; 1
    1168:	31 09       	sbc	r19, r1
    116a:	fc 01       	movw	r30, r24
    116c:	31 83       	std	Z+1, r19	; 0x01
    116e:	20 83       	st	Z, r18
    1170:	6f c0       	rjmp	.+222    	; 0x1250 <__stack+0x151>
							}
						}
						else if (deltaOCR > 0){
    1172:	80 91 79 02 	lds	r24, 0x0279
    1176:	90 91 7a 02 	lds	r25, 0x027A
    117a:	18 16       	cp	r1, r24
    117c:	19 06       	cpc	r1, r25
    117e:	9c f5       	brge	.+102    	; 0x11e6 <__stack+0xe7>
							if ((OCR1B+deltaOCR) < (CUENTAS_MAX_PWM-1)) {
    1180:	88 e4       	ldi	r24, 0x48	; 72
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	fc 01       	movw	r30, r24
    1186:	80 81       	ld	r24, Z
    1188:	91 81       	ldd	r25, Z+1	; 0x01
    118a:	20 91 79 02 	lds	r18, 0x0279
    118e:	30 91 7a 02 	lds	r19, 0x027A
    1192:	82 0f       	add	r24, r18
    1194:	93 1f       	adc	r25, r19
    1196:	8f 3f       	cpi	r24, 0xFF	; 255
    1198:	93 40       	sbci	r25, 0x03	; 3
    119a:	88 f4       	brcc	.+34     	; 0x11be <__stack+0xbf>
								OCR1B += deltaOCR;
    119c:	88 e4       	ldi	r24, 0x48	; 72
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	28 e4       	ldi	r18, 0x48	; 72
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	f9 01       	movw	r30, r18
    11a6:	20 81       	ld	r18, Z
    11a8:	31 81       	ldd	r19, Z+1	; 0x01
    11aa:	40 91 79 02 	lds	r20, 0x0279
    11ae:	50 91 7a 02 	lds	r21, 0x027A
    11b2:	24 0f       	add	r18, r20
    11b4:	35 1f       	adc	r19, r21
    11b6:	fc 01       	movw	r30, r24
    11b8:	31 83       	std	Z+1, r19	; 0x01
    11ba:	20 83       	st	Z, r18
    11bc:	49 c0       	rjmp	.+146    	; 0x1250 <__stack+0x151>
							}
							else if (OCR1B < (CUENTAS_MAX_PWM-1)){
    11be:	88 e4       	ldi	r24, 0x48	; 72
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	fc 01       	movw	r30, r24
    11c4:	80 81       	ld	r24, Z
    11c6:	91 81       	ldd	r25, Z+1	; 0x01
    11c8:	8f 3f       	cpi	r24, 0xFF	; 255
    11ca:	93 40       	sbci	r25, 0x03	; 3
    11cc:	08 f0       	brcs	.+2      	; 0x11d0 <__stack+0xd1>
    11ce:	40 c0       	rjmp	.+128    	; 0x1250 <__stack+0x151>
								OCR1B++;
    11d0:	88 e4       	ldi	r24, 0x48	; 72
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	fc 01       	movw	r30, r24
    11d6:	20 81       	ld	r18, Z
    11d8:	31 81       	ldd	r19, Z+1	; 0x01
    11da:	2f 5f       	subi	r18, 0xFF	; 255
    11dc:	3f 4f       	sbci	r19, 0xFF	; 255
    11de:	fc 01       	movw	r30, r24
    11e0:	31 83       	std	Z+1, r19	; 0x01
    11e2:	20 83       	st	Z, r18
    11e4:	35 c0       	rjmp	.+106    	; 0x1250 <__stack+0x151>
							}
						}
						else if (deltaOCR < 0){
    11e6:	80 91 79 02 	lds	r24, 0x0279
    11ea:	90 91 7a 02 	lds	r25, 0x027A
    11ee:	99 23       	and	r25, r25
    11f0:	7c f5       	brge	.+94     	; 0x1250 <__stack+0x151>
							if ((OCR1B+deltaOCR) > 0) {
    11f2:	88 e4       	ldi	r24, 0x48	; 72
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	fc 01       	movw	r30, r24
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	20 91 79 02 	lds	r18, 0x0279
    1200:	30 91 7a 02 	lds	r19, 0x027A
    1204:	82 0f       	add	r24, r18
    1206:	93 1f       	adc	r25, r19
    1208:	89 2b       	or	r24, r25
    120a:	89 f0       	breq	.+34     	; 0x122e <__stack+0x12f>
								OCR1B += deltaOCR;
    120c:	88 e4       	ldi	r24, 0x48	; 72
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	28 e4       	ldi	r18, 0x48	; 72
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	f9 01       	movw	r30, r18
    1216:	20 81       	ld	r18, Z
    1218:	31 81       	ldd	r19, Z+1	; 0x01
    121a:	40 91 79 02 	lds	r20, 0x0279
    121e:	50 91 7a 02 	lds	r21, 0x027A
    1222:	24 0f       	add	r18, r20
    1224:	35 1f       	adc	r19, r21
    1226:	fc 01       	movw	r30, r24
    1228:	31 83       	std	Z+1, r19	; 0x01
    122a:	20 83       	st	Z, r18
    122c:	11 c0       	rjmp	.+34     	; 0x1250 <__stack+0x151>
							}
							else if (OCR1B > 0){
    122e:	88 e4       	ldi	r24, 0x48	; 72
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	fc 01       	movw	r30, r24
    1234:	80 81       	ld	r24, Z
    1236:	91 81       	ldd	r25, Z+1	; 0x01
    1238:	89 2b       	or	r24, r25
    123a:	51 f0       	breq	.+20     	; 0x1250 <__stack+0x151>
								OCR1B--;
    123c:	88 e4       	ldi	r24, 0x48	; 72
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	fc 01       	movw	r30, r24
    1242:	20 81       	ld	r18, Z
    1244:	31 81       	ldd	r19, Z+1	; 0x01
    1246:	21 50       	subi	r18, 0x01	; 1
    1248:	31 09       	sbc	r19, r1
    124a:	fc 01       	movw	r30, r24
    124c:	31 83       	std	Z+1, r19	; 0x01
    124e:	20 83       	st	Z, r18
							}
						}
					}
				}
				chValorNuevoPWM2 = NO;
    1250:	10 92 fc 04 	sts	0x04FC, r1
			}

			uchEstadoPWM420mA = PWM_1_420MA_ACTUALIZAR;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	80 93 76 02 	sts	0x0276, r24
			break;
    125a:	03 c0       	rjmp	.+6      	; 0x1262 <__stack+0x163>

		default:
			Inicio_PWM_420mA();
    125c:	0e 94 3a 09 	call	0x1274	; 0x1274 <Inicio_PWM_420mA>
			break;
    1260:	00 00       	nop
	}
}
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	08 95       	ret

00001274 <Inicio_PWM_420mA>:


/*****************************************************************************
* Funcion de inicio
*****************************************************************************/
void Inicio_PWM_420mA (void) {
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
	// Inicio en Fast PWM-10bits, preescaler 1, para la salida de 4-20mA
	TCCR1A = (ON<<COM1A1)|(OFF<<COM1A0)|(ON<<COM1B1)|(OFF<<COM1B0)|(OFF<<COM1C1)|(OFF<<COM1C0)|(ON<<WGM11)|(ON<<WGM10);
    127c:	8f e4       	ldi	r24, 0x4F	; 79
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	23 ea       	ldi	r18, 0xA3	; 163
    1282:	fc 01       	movw	r30, r24
    1284:	20 83       	st	Z, r18
	TCCR1B = (OFF<<ICNC1)|(OFF<<ICES1)|(OFF<<WGM13)|(ON<<WGM12)|(OFF<<CS12)|(OFF<<CS11)|(ON<<CS10);
    1286:	8e e4       	ldi	r24, 0x4E	; 78
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	29 e0       	ldi	r18, 0x09	; 9
    128c:	fc 01       	movw	r30, r24
    128e:	20 83       	st	Z, r18
	OCR1A = 0;
    1290:	8a e4       	ldi	r24, 0x4A	; 74
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	fc 01       	movw	r30, r24
    1296:	11 82       	std	Z+1, r1	; 0x01
    1298:	10 82       	st	Z, r1
	OCR1B = 0;
    129a:	88 e4       	ldi	r24, 0x48	; 72
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	fc 01       	movw	r30, r24
    12a0:	11 82       	std	Z+1, r1	; 0x01
    12a2:	10 82       	st	Z, r1

	uchEstadoPWM420mA = PWM_1_420MA_ACTUALIZAR;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 76 02 	sts	0x0276, r24
}
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <Recepcion_USART_0>:

/************************************************************************
* Máquina de estados de recepción por USART del uc
************************************************************************/

void Recepcion_USART_0(void) {
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
	switch (uchEstadoRecepcionUSART0) {
    12b8:	80 91 49 03 	lds	r24, 0x0349
    12bc:	88 2f       	mov	r24, r24
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	19 f0       	breq	.+6      	; 0x12ca <Recepcion_USART_0+0x1a>
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	e1 f0       	breq	.+56     	; 0x1300 <Recepcion_USART_0+0x50>
    12c8:	93 c1       	rjmp	.+806    	; 0x15f0 <Recepcion_USART_0+0x340>
		case STANDBY:
			if (((UCSR0A & (SET<<RXC0)) == 0) || (uchEstadoBufferRx_USART0 == LLENO)) {
    12ca:	8b e2       	ldi	r24, 0x2B	; 43
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	fc 01       	movw	r30, r24
    12d0:	80 81       	ld	r24, Z
    12d2:	88 23       	and	r24, r24
    12d4:	24 f4       	brge	.+8      	; 0x12de <Recepcion_USART_0+0x2e>
    12d6:	80 91 52 03 	lds	r24, 0x0352
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	59 f4       	brne	.+22     	; 0x12f4 <Recepcion_USART_0+0x44>

				if (uContTimeoutLecturaRxUSART0 == 0)
    12de:	80 91 4b 03 	lds	r24, 0x034B
    12e2:	90 91 4c 03 	lds	r25, 0x034C
    12e6:	89 2b       	or	r24, r25
    12e8:	11 f4       	brne	.+4      	; 0x12ee <Recepcion_USART_0+0x3e>
					uchEstadoBufferRx_USART0 = VACIO;
    12ea:	10 92 52 03 	sts	0x0352, r1

				uchEstadoRecepcionUSART0 = STANDBY;
    12ee:	10 92 49 03 	sts	0x0349, r1
			}
			else {
				uchContAuxRx_USART0 = 0;							
				uchEstadoRecepcionUSART0 = RECIBIR_USART0;
			}
			break;
    12f2:	83 c1       	rjmp	.+774    	; 0x15fa <Recepcion_USART_0+0x34a>
					uchEstadoBufferRx_USART0 = VACIO;

				uchEstadoRecepcionUSART0 = STANDBY;
			}
			else {
				uchContAuxRx_USART0 = 0;							
    12f4:	10 92 51 03 	sts	0x0351, r1
				uchEstadoRecepcionUSART0 = RECIBIR_USART0;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	80 93 49 03 	sts	0x0349, r24
			}
			break;
    12fe:	7d c1       	rjmp	.+762    	; 0x15fa <Recepcion_USART_0+0x34a>
		
		case RECIBIR_USART0:
			if (uchContAuxRx_USART0 == 0) {
    1300:	80 91 51 03 	lds	r24, 0x0351
    1304:	88 23       	and	r24, r24
    1306:	09 f0       	breq	.+2      	; 0x130a <Recepcion_USART_0+0x5a>
    1308:	85 c0       	rjmp	.+266    	; 0x1414 <Recepcion_USART_0+0x164>
				if ((UCSR0A&(SET<<FE0)) || (UCSR0A&(SET<<DOR0)) || (UCSR0A&(SET<<UPE0))) {	/* Frame Error (FE), Data OverRun (DOR) and Parity Error (UPE) */
    130a:	8b e2       	ldi	r24, 0x2B	; 43
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	fc 01       	movw	r30, r24
    1310:	80 81       	ld	r24, Z
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	80 71       	andi	r24, 0x10	; 16
    1318:	99 27       	eor	r25, r25
    131a:	89 2b       	or	r24, r25
    131c:	a1 f4       	brne	.+40     	; 0x1346 <Recepcion_USART_0+0x96>
    131e:	8b e2       	ldi	r24, 0x2B	; 43
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	fc 01       	movw	r30, r24
    1324:	80 81       	ld	r24, Z
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	88 70       	andi	r24, 0x08	; 8
    132c:	99 27       	eor	r25, r25
    132e:	89 2b       	or	r24, r25
    1330:	51 f4       	brne	.+20     	; 0x1346 <Recepcion_USART_0+0x96>
    1332:	8b e2       	ldi	r24, 0x2B	; 43
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	fc 01       	movw	r30, r24
    1338:	80 81       	ld	r24, Z
    133a:	88 2f       	mov	r24, r24
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	84 70       	andi	r24, 0x04	; 4
    1340:	99 27       	eor	r25, r25
    1342:	89 2b       	or	r24, r25
    1344:	39 f0       	breq	.+14     	; 0x1354 <Recepcion_USART_0+0xa4>
					USART0_Flush();
    1346:	0e 94 21 0b 	call	0x1642	; 0x1642 <USART0_Flush>
					uchEstadoBufferRx_USART0 = VACIO;
    134a:	10 92 52 03 	sts	0x0352, r1
					uchEstadoRecepcionUSART0 = STANDBY;
    134e:	10 92 49 03 	sts	0x0349, r1
    1352:	5f c0       	rjmp	.+190    	; 0x1412 <Recepcion_USART_0+0x162>
				}
				else {
					chBufferRx_USART0[uchContAuxRx_USART0] = UDR0;
    1354:	80 91 51 03 	lds	r24, 0x0351
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	2c e2       	ldi	r18, 0x2C	; 44
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	f9 01       	movw	r30, r18
    1362:	20 81       	ld	r18, Z
    1364:	8f 57       	subi	r24, 0x7F	; 127
    1366:	9d 4f       	sbci	r25, 0xFD	; 253
    1368:	fc 01       	movw	r30, r24
    136a:	20 83       	st	Z, r18
					uContTimeoutRxUSART0 = TIMEOUT_RX_USART_0;
    136c:	80 e3       	ldi	r24, 0x30	; 48
    136e:	95 e7       	ldi	r25, 0x75	; 117
    1370:	90 93 4e 03 	sts	0x034E, r25
    1374:	80 93 4d 03 	sts	0x034D, r24

					#ifdef RECIBIR_NULL_AL_FINAL
					if  (chBufferRx_USART0[uchContAuxRx_USART0] == '\0') {	/* chequeo no haber recibido un \0, sino corto la recepción */
					#else
					if  ((chBufferRx_USART0[uchContAuxRx_USART0] == '\n') || (chBufferRx_USART0[uchContAuxRx_USART0] == '\r')) {	/* chequeo no haber recibido un \n o \r, sino corto la recepción */
    1378:	80 91 51 03 	lds	r24, 0x0351
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	8f 57       	subi	r24, 0x7F	; 127
    1382:	9d 4f       	sbci	r25, 0xFD	; 253
    1384:	fc 01       	movw	r30, r24
    1386:	80 81       	ld	r24, Z
    1388:	8a 30       	cpi	r24, 0x0A	; 10
    138a:	51 f0       	breq	.+20     	; 0x13a0 <Recepcion_USART_0+0xf0>
    138c:	80 91 51 03 	lds	r24, 0x0351
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	8f 57       	subi	r24, 0x7F	; 127
    1396:	9d 4f       	sbci	r25, 0xFD	; 253
    1398:	fc 01       	movw	r30, r24
    139a:	80 81       	ld	r24, Z
    139c:	8d 30       	cpi	r24, 0x0D	; 13
    139e:	11 f5       	brne	.+68     	; 0x13e4 <Recepcion_USART_0+0x134>
						chBufferRx_USART0[uchContAuxRx_USART0] = '\0';
    13a0:	80 91 51 03 	lds	r24, 0x0351
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	8f 57       	subi	r24, 0x7F	; 127
    13aa:	9d 4f       	sbci	r25, 0xFD	; 253
    13ac:	fc 01       	movw	r30, r24
    13ae:	10 82       	st	Z, r1

						#ifdef TRANSMITIR_ECO
						/* escribo el enter */
						Esperar_USART_O_TX ();		/* si el registro de envio esta lleno, espero */
    13b0:	0e 94 31 0c 	call	0x1862	; 0x1862 <Esperar_USART_O_TX>
						UDR0 = '\n';
    13b4:	8c e2       	ldi	r24, 0x2C	; 44
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	2a e0       	ldi	r18, 0x0A	; 10
    13ba:	fc 01       	movw	r30, r24
    13bc:	20 83       	st	Z, r18
						Esperar_USART_O_TX ();		/* si el registro de envio esta lleno, espero */
    13be:	0e 94 31 0c 	call	0x1862	; 0x1862 <Esperar_USART_O_TX>
						UDR0 = '\r';
    13c2:	8c e2       	ldi	r24, 0x2C	; 44
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	2d e0       	ldi	r18, 0x0D	; 13
    13c8:	fc 01       	movw	r30, r24
    13ca:	20 83       	st	Z, r18
						#endif

					#endif

						uchEstadoBufferRx_USART0 = LLENO;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	80 93 52 03 	sts	0x0352, r24
						uContTimeoutLecturaRxUSART0 = TIMEOUT_LECTURA_RX_USART_0;
    13d2:	80 ed       	ldi	r24, 0xD0	; 208
    13d4:	97 e0       	ldi	r25, 0x07	; 7
    13d6:	90 93 4c 03 	sts	0x034C, r25
    13da:	80 93 4b 03 	sts	0x034B, r24
						uchEstadoRecepcionUSART0 = STANDBY;
    13de:	10 92 49 03 	sts	0x0349, r1
    13e2:	17 c0       	rjmp	.+46     	; 0x1412 <Recepcion_USART_0+0x162>
					}
					else {
						#ifdef TRANSMITIR_ECO
						/* escribo el caracter que llegó*/
						Esperar_USART_O_TX ();		/* si el registro de envio esta lleno, espero */
    13e4:	0e 94 31 0c 	call	0x1862	; 0x1862 <Esperar_USART_O_TX>
						UDR0 = chBufferRx_USART0[uchContAuxRx_USART0];
    13e8:	8c e2       	ldi	r24, 0x2C	; 44
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	20 91 51 03 	lds	r18, 0x0351
    13f0:	22 2f       	mov	r18, r18
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	2f 57       	subi	r18, 0x7F	; 127
    13f6:	3d 4f       	sbci	r19, 0xFD	; 253
    13f8:	f9 01       	movw	r30, r18
    13fa:	20 81       	ld	r18, Z
    13fc:	fc 01       	movw	r30, r24
    13fe:	20 83       	st	Z, r18
						#endif

						uchContAuxRx_USART0 ++;
    1400:	80 91 51 03 	lds	r24, 0x0351
    1404:	8f 5f       	subi	r24, 0xFF	; 255
    1406:	80 93 51 03 	sts	0x0351, r24
						uchEstadoRecepcionUSART0 = RECIBIR_USART0;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	80 93 49 03 	sts	0x0349, r24
    1410:	ee c0       	rjmp	.+476    	; 0x15ee <Recepcion_USART_0+0x33e>
    1412:	ed c0       	rjmp	.+474    	; 0x15ee <Recepcion_USART_0+0x33e>
					}
				}				
			}
			else if ((UCSR0A & (SET<<RXC0)) == 0) {			// espero recibir el siguiente caracter
    1414:	8b e2       	ldi	r24, 0x2B	; 43
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	fc 01       	movw	r30, r24
    141a:	80 81       	ld	r24, Z
    141c:	88 23       	and	r24, r24
    141e:	f4 f0       	brlt	.+60     	; 0x145c <Recepcion_USART_0+0x1ac>
				if (uContTimeoutRxUSART0 == 0) {			// si se vence el tiempo de espera del siguiente caracter
    1420:	80 91 4d 03 	lds	r24, 0x034D
    1424:	90 91 4e 03 	lds	r25, 0x034E
    1428:	89 2b       	or	r24, r25
    142a:	a1 f4       	brne	.+40     	; 0x1454 <Recepcion_USART_0+0x1a4>
					chBufferRx_USART0[uchContAuxRx_USART0] = '\0';
    142c:	80 91 51 03 	lds	r24, 0x0351
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	8f 57       	subi	r24, 0x7F	; 127
    1436:	9d 4f       	sbci	r25, 0xFD	; 253
    1438:	fc 01       	movw	r30, r24
    143a:	10 82       	st	Z, r1
					uchEstadoBufferRx_USART0 = LLENO;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	80 93 52 03 	sts	0x0352, r24
					uContTimeoutLecturaRxUSART0 = TIMEOUT_LECTURA_RX_USART_0;
    1442:	80 ed       	ldi	r24, 0xD0	; 208
    1444:	97 e0       	ldi	r25, 0x07	; 7
    1446:	90 93 4c 03 	sts	0x034C, r25
    144a:	80 93 4b 03 	sts	0x034B, r24
					uchEstadoRecepcionUSART0 = STANDBY;
    144e:	10 92 49 03 	sts	0x0349, r1
    1452:	cd c0       	rjmp	.+410    	; 0x15ee <Recepcion_USART_0+0x33e>
				}
				else {										// si no se vence sigo esperando el siguiente caracter
					uchEstadoRecepcionUSART0 = RECIBIR_USART0;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	80 93 49 03 	sts	0x0349, r24
				uchEstadoRecepcionUSART0 = STANDBY;
			}						
			else {
				uchEstadoRecepcionUSART0 = RECIBIR_USART0;
			}
			break;
    145a:	cf c0       	rjmp	.+414    	; 0x15fa <Recepcion_USART_0+0x34a>
				}
				else {										// si no se vence sigo esperando el siguiente caracter
					uchEstadoRecepcionUSART0 = RECIBIR_USART0;
				}
			}
			else if (uchContAuxRx_USART0 < (USART0_BUFFER_ZISE-1)) {
    145c:	80 91 51 03 	lds	r24, 0x0351
    1460:	87 3c       	cpi	r24, 0xC7	; 199
    1462:	08 f0       	brcs	.+2      	; 0x1466 <Recepcion_USART_0+0x1b6>
    1464:	a8 c0       	rjmp	.+336    	; 0x15b6 <Recepcion_USART_0+0x306>
				if ((UCSR0A&(SET<<FE0)) || (UCSR0A&(SET<<DOR0)) || (UCSR0A&(SET<<UPE0))) {	/* Frame Error (FE), Data OverRun (DOR) and Parity Error (UPE) */
    1466:	8b e2       	ldi	r24, 0x2B	; 43
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	fc 01       	movw	r30, r24
    146c:	80 81       	ld	r24, Z
    146e:	88 2f       	mov	r24, r24
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	80 71       	andi	r24, 0x10	; 16
    1474:	99 27       	eor	r25, r25
    1476:	89 2b       	or	r24, r25
    1478:	a1 f4       	brne	.+40     	; 0x14a2 <Recepcion_USART_0+0x1f2>
    147a:	8b e2       	ldi	r24, 0x2B	; 43
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	fc 01       	movw	r30, r24
    1480:	80 81       	ld	r24, Z
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	88 70       	andi	r24, 0x08	; 8
    1488:	99 27       	eor	r25, r25
    148a:	89 2b       	or	r24, r25
    148c:	51 f4       	brne	.+20     	; 0x14a2 <Recepcion_USART_0+0x1f2>
    148e:	8b e2       	ldi	r24, 0x2B	; 43
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	fc 01       	movw	r30, r24
    1494:	80 81       	ld	r24, Z
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	84 70       	andi	r24, 0x04	; 4
    149c:	99 27       	eor	r25, r25
    149e:	89 2b       	or	r24, r25
    14a0:	39 f0       	breq	.+14     	; 0x14b0 <Recepcion_USART_0+0x200>
					USART0_Flush();
    14a2:	0e 94 21 0b 	call	0x1642	; 0x1642 <USART0_Flush>
					uchEstadoBufferRx_USART0 = VACIO;
    14a6:	10 92 52 03 	sts	0x0352, r1
					uchEstadoRecepcionUSART0 = STANDBY;
    14aa:	10 92 49 03 	sts	0x0349, r1
    14ae:	82 c0       	rjmp	.+260    	; 0x15b4 <Recepcion_USART_0+0x304>
				}
				else {
					chBufferRx_USART0[uchContAuxRx_USART0] = UDR0;
    14b0:	80 91 51 03 	lds	r24, 0x0351
    14b4:	88 2f       	mov	r24, r24
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	2c e2       	ldi	r18, 0x2C	; 44
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	f9 01       	movw	r30, r18
    14be:	20 81       	ld	r18, Z
    14c0:	8f 57       	subi	r24, 0x7F	; 127
    14c2:	9d 4f       	sbci	r25, 0xFD	; 253
    14c4:	fc 01       	movw	r30, r24
    14c6:	20 83       	st	Z, r18
					uContTimeoutRxUSART0 = TIMEOUT_RX_USART_0;
    14c8:	80 e3       	ldi	r24, 0x30	; 48
    14ca:	95 e7       	ldi	r25, 0x75	; 117
    14cc:	90 93 4e 03 	sts	0x034E, r25
    14d0:	80 93 4d 03 	sts	0x034D, r24

					#ifdef RECIBIR_NULL_AL_FINAL
					if  (chBufferRx_USART0[uchContAuxRx_USART0] == '\0') {	/* chequeo no haber recibido un \0, sino corto la recepción */
					#else
					if  ((chBufferRx_USART0[uchContAuxRx_USART0] == '\n') || (chBufferRx_USART0[uchContAuxRx_USART0] == '\r')) {	/* chequeo no haber recibido un \n o \r, sino corto la recepción */
    14d4:	80 91 51 03 	lds	r24, 0x0351
    14d8:	88 2f       	mov	r24, r24
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	8f 57       	subi	r24, 0x7F	; 127
    14de:	9d 4f       	sbci	r25, 0xFD	; 253
    14e0:	fc 01       	movw	r30, r24
    14e2:	80 81       	ld	r24, Z
    14e4:	8a 30       	cpi	r24, 0x0A	; 10
    14e6:	51 f0       	breq	.+20     	; 0x14fc <Recepcion_USART_0+0x24c>
    14e8:	80 91 51 03 	lds	r24, 0x0351
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	8f 57       	subi	r24, 0x7F	; 127
    14f2:	9d 4f       	sbci	r25, 0xFD	; 253
    14f4:	fc 01       	movw	r30, r24
    14f6:	80 81       	ld	r24, Z
    14f8:	8d 30       	cpi	r24, 0x0D	; 13
    14fa:	11 f5       	brne	.+68     	; 0x1540 <Recepcion_USART_0+0x290>
						chBufferRx_USART0[uchContAuxRx_USART0] = '\0';
    14fc:	80 91 51 03 	lds	r24, 0x0351
    1500:	88 2f       	mov	r24, r24
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	8f 57       	subi	r24, 0x7F	; 127
    1506:	9d 4f       	sbci	r25, 0xFD	; 253
    1508:	fc 01       	movw	r30, r24
    150a:	10 82       	st	Z, r1

						#ifdef TRANSMITIR_ECO
						/* escribo el enter */
						Esperar_USART_O_TX ();		/* si el registro de envio esta lleno, espero */
    150c:	0e 94 31 0c 	call	0x1862	; 0x1862 <Esperar_USART_O_TX>
						UDR0 = '\n';
    1510:	8c e2       	ldi	r24, 0x2C	; 44
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	2a e0       	ldi	r18, 0x0A	; 10
    1516:	fc 01       	movw	r30, r24
    1518:	20 83       	st	Z, r18
						Esperar_USART_O_TX (); 		/* si el registro de envio esta lleno, espero */
    151a:	0e 94 31 0c 	call	0x1862	; 0x1862 <Esperar_USART_O_TX>
						UDR0 = '\r';
    151e:	8c e2       	ldi	r24, 0x2C	; 44
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	2d e0       	ldi	r18, 0x0D	; 13
    1524:	fc 01       	movw	r30, r24
    1526:	20 83       	st	Z, r18
						#endif

					#endif

						uchEstadoBufferRx_USART0 = LLENO;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	80 93 52 03 	sts	0x0352, r24
						uContTimeoutLecturaRxUSART0 = TIMEOUT_LECTURA_RX_USART_0;
    152e:	80 ed       	ldi	r24, 0xD0	; 208
    1530:	97 e0       	ldi	r25, 0x07	; 7
    1532:	90 93 4c 03 	sts	0x034C, r25
    1536:	80 93 4b 03 	sts	0x034B, r24
						uchEstadoRecepcionUSART0 = STANDBY;
    153a:	10 92 49 03 	sts	0x0349, r1
    153e:	3a c0       	rjmp	.+116    	; 0x15b4 <Recepcion_USART_0+0x304>
					}
					else {
						#ifdef TRANSMITIR_ECO
						/* escribo el caracter que llegó*/
						Esperar_USART_O_TX (); 		/* si el registro de envio esta lleno, espero */
    1540:	0e 94 31 0c 	call	0x1862	; 0x1862 <Esperar_USART_O_TX>
						if (chBufferRx_USART0[uchContAuxRx_USART0] == 8) {
    1544:	80 91 51 03 	lds	r24, 0x0351
    1548:	88 2f       	mov	r24, r24
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	8f 57       	subi	r24, 0x7F	; 127
    154e:	9d 4f       	sbci	r25, 0xFD	; 253
    1550:	fc 01       	movw	r30, r24
    1552:	80 81       	ld	r24, Z
    1554:	88 30       	cpi	r24, 0x08	; 8
    1556:	c9 f4       	brne	.+50     	; 0x158a <Recepcion_USART_0+0x2da>
							UDR0=8;
    1558:	8c e2       	ldi	r24, 0x2C	; 44
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	28 e0       	ldi	r18, 0x08	; 8
    155e:	fc 01       	movw	r30, r24
    1560:	20 83       	st	Z, r18
							Esperar_USART_O_TX ();
    1562:	0e 94 31 0c 	call	0x1862	; 0x1862 <Esperar_USART_O_TX>
							UDR0=' ';
    1566:	8c e2       	ldi	r24, 0x2C	; 44
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	20 e2       	ldi	r18, 0x20	; 32
    156c:	fc 01       	movw	r30, r24
    156e:	20 83       	st	Z, r18
							Esperar_USART_O_TX ();
    1570:	0e 94 31 0c 	call	0x1862	; 0x1862 <Esperar_USART_O_TX>
							UDR0=8;
    1574:	8c e2       	ldi	r24, 0x2C	; 44
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	28 e0       	ldi	r18, 0x08	; 8
    157a:	fc 01       	movw	r30, r24
    157c:	20 83       	st	Z, r18
							uchContAuxRx_USART0 --;
    157e:	80 91 51 03 	lds	r24, 0x0351
    1582:	81 50       	subi	r24, 0x01	; 1
    1584:	80 93 51 03 	sts	0x0351, r24
    1588:	11 c0       	rjmp	.+34     	; 0x15ac <Recepcion_USART_0+0x2fc>
						}
						else {
							UDR0 = chBufferRx_USART0[uchContAuxRx_USART0];
    158a:	8c e2       	ldi	r24, 0x2C	; 44
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	20 91 51 03 	lds	r18, 0x0351
    1592:	22 2f       	mov	r18, r18
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	2f 57       	subi	r18, 0x7F	; 127
    1598:	3d 4f       	sbci	r19, 0xFD	; 253
    159a:	f9 01       	movw	r30, r18
    159c:	20 81       	ld	r18, Z
    159e:	fc 01       	movw	r30, r24
    15a0:	20 83       	st	Z, r18
							uchContAuxRx_USART0 ++;
    15a2:	80 91 51 03 	lds	r24, 0x0351
    15a6:	8f 5f       	subi	r24, 0xFF	; 255
    15a8:	80 93 51 03 	sts	0x0351, r24
						}
						#else
						uchContAuxRx_USART0 ++;
						#endif
						uchEstadoRecepcionUSART0 = RECIBIR_USART0;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	80 93 49 03 	sts	0x0349, r24
    15b2:	1d c0       	rjmp	.+58     	; 0x15ee <Recepcion_USART_0+0x33e>
    15b4:	1c c0       	rjmp	.+56     	; 0x15ee <Recepcion_USART_0+0x33e>
					}
				}
			}
			else if (uchContAuxRx_USART0 == (USART0_BUFFER_ZISE-1)) {
    15b6:	80 91 51 03 	lds	r24, 0x0351
    15ba:	87 3c       	cpi	r24, 0xC7	; 199
    15bc:	a1 f4       	brne	.+40     	; 0x15e6 <Recepcion_USART_0+0x336>
				chBufferRx_USART0[uchContAuxRx_USART0] = '\0';
    15be:	80 91 51 03 	lds	r24, 0x0351
    15c2:	88 2f       	mov	r24, r24
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	8f 57       	subi	r24, 0x7F	; 127
    15c8:	9d 4f       	sbci	r25, 0xFD	; 253
    15ca:	fc 01       	movw	r30, r24
    15cc:	10 82       	st	Z, r1
				uchEstadoBufferRx_USART0 = LLENO;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	80 93 52 03 	sts	0x0352, r24
				uContTimeoutLecturaRxUSART0 = TIMEOUT_LECTURA_RX_USART_0;
    15d4:	80 ed       	ldi	r24, 0xD0	; 208
    15d6:	97 e0       	ldi	r25, 0x07	; 7
    15d8:	90 93 4c 03 	sts	0x034C, r25
    15dc:	80 93 4b 03 	sts	0x034B, r24
				uchEstadoRecepcionUSART0 = STANDBY;
    15e0:	10 92 49 03 	sts	0x0349, r1
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <Recepcion_USART_0+0x33e>
			}						
			else {
				uchEstadoRecepcionUSART0 = RECIBIR_USART0;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	80 93 49 03 	sts	0x0349, r24
			}
			break;
    15ec:	06 c0       	rjmp	.+12     	; 0x15fa <Recepcion_USART_0+0x34a>
    15ee:	05 c0       	rjmp	.+10     	; 0x15fa <Recepcion_USART_0+0x34a>
			
		default:
			uchEstadoBufferRx_USART0 = VACIO;
    15f0:	10 92 52 03 	sts	0x0352, r1
			uchEstadoRecepcionUSART0 = STANDBY;
    15f4:	10 92 49 03 	sts	0x0349, r1
			break;
    15f8:	00 00       	nop
	}	
}
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	08 95       	ret

00001600 <Inicio_USART_0>:
/************************************************************************
* Inicio del USART
************************************************************************/
/* La velocidad de transmisión es de 38,400 kbps, 8 bit de datos, sin control de paridad y 1 bit de parada. */

void Inicio_USART_0 (void) {
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
	/* cargo el UBRR necesario para el baudrate escogido */
	UBRR0H = (UBRR0>>8) & BYTE_MASK;
    1608:	80 e9       	ldi	r24, 0x90	; 144
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	fc 01       	movw	r30, r24
    160e:	10 82       	st	Z, r1
	UBRR0L = UBRR0 & BYTE_MASK;
    1610:	89 e2       	ldi	r24, 0x29	; 41
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	29 e1       	ldi	r18, 0x19	; 25
    1616:	fc 01       	movw	r30, r24
    1618:	20 83       	st	Z, r18
	
	/* limpio el flag de transmisión y no multiprocessor mode */
	UCSR0A = (OFF<<TXC0)|(VALOR_U2X0<<U2X0)|(OFF<<MPCM0);
    161a:	8b e2       	ldi	r24, 0x2B	; 43
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	22 e0       	ldi	r18, 0x02	; 2
    1620:	fc 01       	movw	r30, r24
    1622:	20 83       	st	Z, r18
	
	/* deshabilito la interrupción por recepción, por transmisión y por buffer vacio. Habilito la transmisión y la recepicón, 8n bit de datos y pongo en 0 el noveno bit */
	UCSR0B = (OFF<<RXCIE0)|(OFF<<TXCIE0)|(OFF<<UDRIE0)|(SET<<RXEN)|(SET<<TXEN)|(OFF<<UCSZ02)|(OFF<<TXB80);
    1624:	8a e2       	ldi	r24, 0x2A	; 42
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	28 e1       	ldi	r18, 0x18	; 24
    162a:	fc 01       	movw	r30, r24
    162c:	20 83       	st	Z, r18
	
	/* Modo asincronico, sin bit de paridad, un bit de stop, 8 bit de datos */ 
	UCSR0C = (OFF<<UMSEL0)|(OFF<<UPM01)|(OFF<<UPM00)|(OFF<<USBS0)|(SET<<UCSZ01)|(SET<<UCSZ00)|(OFF<<UCPOL0);
    162e:	85 e9       	ldi	r24, 0x95	; 149
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	26 e0       	ldi	r18, 0x06	; 6
    1634:	fc 01       	movw	r30, r24
    1636:	20 83       	st	Z, r18
	
	uchEstadoBufferRx_USART0 = VACIO;
    1638:	10 92 52 03 	sts	0x0352, r1
//	uchEstadoBufferTx_USART0 = VACIO;
}
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	08 95       	ret

00001642 <USART0_Flush>:

/************************************************************************
* USART vacio el buffer de recepción
************************************************************************/

void USART0_Flush(void) {
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	00 d0       	rcall	.+0      	; 0x1648 <USART0_Flush+0x6>
    1648:	1f 92       	push	r1
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
	unsigned char	uchDummy;
	unsigned int	uContFlush0 = 0;
    164e:	1a 82       	std	Y+2, r1	; 0x02
    1650:	19 82       	std	Y+1, r1	; 0x01
	
	while (UCSR0A & (SET<<RXC0)) {
    1652:	10 c0       	rjmp	.+32     	; 0x1674 <USART0_Flush+0x32>
		uchDummy = UDR0;
    1654:	8c e2       	ldi	r24, 0x2C	; 44
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	fc 01       	movw	r30, r24
    165a:	80 81       	ld	r24, Z
    165c:	8b 83       	std	Y+3, r24	; 0x03
		
		if (uContFlush0 == USART0_BUFFER_ZISE) {
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	88 3c       	cpi	r24, 0xC8	; 200
    1664:	91 05       	cpc	r25, r1
    1666:	09 f4       	brne	.+2      	; 0x166a <USART0_Flush+0x28>
			break;
    1668:	0b c0       	rjmp	.+22     	; 0x1680 <USART0_Flush+0x3e>
		}
		uContFlush0 ++;
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	9a 81       	ldd	r25, Y+2	; 0x02
    166e:	01 96       	adiw	r24, 0x01	; 1
    1670:	9a 83       	std	Y+2, r25	; 0x02
    1672:	89 83       	std	Y+1, r24	; 0x01

void USART0_Flush(void) {
	unsigned char	uchDummy;
	unsigned int	uContFlush0 = 0;
	
	while (UCSR0A & (SET<<RXC0)) {
    1674:	8b e2       	ldi	r24, 0x2B	; 43
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	fc 01       	movw	r30, r24
    167a:	80 81       	ld	r24, Z
    167c:	88 23       	and	r24, r24
    167e:	54 f3       	brlt	.-44     	; 0x1654 <USART0_Flush+0x12>
		if (uContFlush0 == USART0_BUFFER_ZISE) {
			break;
		}
		uContFlush0 ++;
	}	
}
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <Transmitir_Buffer_USART0>:

/************************************************************************
* Transmisión buffer conpleto por USART0 (de prepo y de corrido)
************************************************************************/

void Transmitir_Buffer_USART0 (char *chBufferPtr, int maxBufferSize) {
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	00 d0       	rcall	.+0      	; 0x1692 <Transmitir_Buffer_USART0+0x6>
    1692:	00 d0       	rcall	.+0      	; 0x1694 <Transmitir_Buffer_USART0+0x8>
    1694:	00 d0       	rcall	.+0      	; 0x1696 <Transmitir_Buffer_USART0+0xa>
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	9c 83       	std	Y+4, r25	; 0x04
    169c:	8b 83       	std	Y+3, r24	; 0x03
    169e:	7e 83       	std	Y+6, r23	; 0x06
    16a0:	6d 83       	std	Y+5, r22	; 0x05
	wdt_reset();
    16a2:	a8 95       	wdr
	int i = 0;
    16a4:	1a 82       	std	Y+2, r1	; 0x02
    16a6:	19 82       	std	Y+1, r1	; 0x01

	while ((*(chBufferPtr + i) != '\0') && (i < (maxBufferSize-1))) {
    16a8:	13 c0       	rjmp	.+38     	; 0x16d0 <Transmitir_Buffer_USART0+0x44>
		Esperar_USART_O_TX (); 		/* si el registro de envio esta lleno, espero */
    16aa:	0e 94 31 0c 	call	0x1862	; 0x1862 <Esperar_USART_O_TX>
		UDR0 = *(chBufferPtr + i);
    16ae:	8c e2       	ldi	r24, 0x2C	; 44
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	29 81       	ldd	r18, Y+1	; 0x01
    16b4:	3a 81       	ldd	r19, Y+2	; 0x02
    16b6:	4b 81       	ldd	r20, Y+3	; 0x03
    16b8:	5c 81       	ldd	r21, Y+4	; 0x04
    16ba:	24 0f       	add	r18, r20
    16bc:	35 1f       	adc	r19, r21
    16be:	f9 01       	movw	r30, r18
    16c0:	20 81       	ld	r18, Z
    16c2:	fc 01       	movw	r30, r24
    16c4:	20 83       	st	Z, r18
		i ++;
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	9a 83       	std	Y+2, r25	; 0x02
    16ce:	89 83       	std	Y+1, r24	; 0x01

void Transmitir_Buffer_USART0 (char *chBufferPtr, int maxBufferSize) {
	wdt_reset();
	int i = 0;

	while ((*(chBufferPtr + i) != '\0') && (i < (maxBufferSize-1))) {
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	2b 81       	ldd	r18, Y+3	; 0x03
    16d6:	3c 81       	ldd	r19, Y+4	; 0x04
    16d8:	82 0f       	add	r24, r18
    16da:	93 1f       	adc	r25, r19
    16dc:	fc 01       	movw	r30, r24
    16de:	80 81       	ld	r24, Z
    16e0:	88 23       	and	r24, r24
    16e2:	51 f0       	breq	.+20     	; 0x16f8 <Transmitir_Buffer_USART0+0x6c>
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	9c 01       	movw	r18, r24
    16ea:	21 50       	subi	r18, 0x01	; 1
    16ec:	31 09       	sbc	r19, r1
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	82 17       	cp	r24, r18
    16f4:	93 07       	cpc	r25, r19
    16f6:	cc f2       	brlt	.-78     	; 0x16aa <Transmitir_Buffer_USART0+0x1e>
#ifdef TRANSMITIR_NULL_AL_FINAL
	Esperar_USART_O_TX (); 			/* si el registro de envio esta lleno, espero */
	UDR0 = '\0';
#endif

}
    16f8:	26 96       	adiw	r28, 0x06	; 6
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	08 95       	ret

0000170a <Transmitir_Buffer_USART0_P>:

/************************************************************************
* Transmisión strig desde la memoria de programa (de prepo y de corrido)
************************************************************************/

void Transmitir_Buffer_USART0_P (const char *chStringPtr) {
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	2a 97       	sbiw	r28, 0x0a	; 10
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	9a 87       	std	Y+10, r25	; 0x0a
    1720:	89 87       	std	Y+9, r24	; 0x09
	wdt_reset();
    1722:	a8 95       	wdr
	int i = 0;
    1724:	1a 82       	std	Y+2, r1	; 0x02
    1726:	19 82       	std	Y+1, r1	; 0x01

	while (pgm_read_byte(chStringPtr+i) != '\0') {
    1728:	19 c0       	rjmp	.+50     	; 0x175c <Transmitir_Buffer_USART0_P+0x52>
		Esperar_USART_O_TX (); 		/* si el registro de envio esta lleno, espero */
    172a:	0e 94 31 0c 	call	0x1862	; 0x1862 <Esperar_USART_O_TX>
		UDR0 = pgm_read_byte(chStringPtr+i);
    172e:	8c e2       	ldi	r24, 0x2C	; 44
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	29 81       	ldd	r18, Y+1	; 0x01
    1734:	3a 81       	ldd	r19, Y+2	; 0x02
    1736:	49 85       	ldd	r20, Y+9	; 0x09
    1738:	5a 85       	ldd	r21, Y+10	; 0x0a
    173a:	24 0f       	add	r18, r20
    173c:	35 1f       	adc	r19, r21
    173e:	3f 83       	std	Y+7, r19	; 0x07
    1740:	2e 83       	std	Y+6, r18	; 0x06
    1742:	2e 81       	ldd	r18, Y+6	; 0x06
    1744:	3f 81       	ldd	r19, Y+7	; 0x07
    1746:	f9 01       	movw	r30, r18
    1748:	24 91       	lpm	r18, Z
    174a:	28 87       	std	Y+8, r18	; 0x08
    174c:	28 85       	ldd	r18, Y+8	; 0x08
    174e:	fc 01       	movw	r30, r24
    1750:	20 83       	st	Z, r18
		i ++;
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	9a 81       	ldd	r25, Y+2	; 0x02
    1756:	01 96       	adiw	r24, 0x01	; 1
    1758:	9a 83       	std	Y+2, r25	; 0x02
    175a:	89 83       	std	Y+1, r24	; 0x01

void Transmitir_Buffer_USART0_P (const char *chStringPtr) {
	wdt_reset();
	int i = 0;

	while (pgm_read_byte(chStringPtr+i) != '\0') {
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
    1760:	29 85       	ldd	r18, Y+9	; 0x09
    1762:	3a 85       	ldd	r19, Y+10	; 0x0a
    1764:	82 0f       	add	r24, r18
    1766:	93 1f       	adc	r25, r19
    1768:	9c 83       	std	Y+4, r25	; 0x04
    176a:	8b 83       	std	Y+3, r24	; 0x03
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	fc 01       	movw	r30, r24
    1772:	84 91       	lpm	r24, Z
    1774:	8d 83       	std	Y+5, r24	; 0x05
    1776:	8d 81       	ldd	r24, Y+5	; 0x05
    1778:	88 23       	and	r24, r24
    177a:	b9 f6       	brne	.-82     	; 0x172a <Transmitir_Buffer_USART0_P+0x20>
#ifdef TRANSMITIR_NULL_AL_FINAL
	Esperar_USART_O_TX (); 			/* si el registro de envio esta lleno, espero */
	UDR0 = '\0';
#endif

}
    177c:	2a 96       	adiw	r28, 0x0a	; 10
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	08 95       	ret

0000178e <Transmitir_Float_USART0>:

/************************************************************************
* Transmisión de un float por USART0
************************************************************************/

void Transmitir_Float_USART0 (float flValor, char chCantDigitos, char chDecimales) {
    178e:	cf 92       	push	r12
    1790:	df 92       	push	r13
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	2a 97       	sbiw	r28, 0x0a	; 10
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	6d 83       	std	Y+5, r22	; 0x05
    17b0:	7e 83       	std	Y+6, r23	; 0x06
    17b2:	8f 83       	std	Y+7, r24	; 0x07
    17b4:	98 87       	std	Y+8, r25	; 0x08
    17b6:	49 87       	std	Y+9, r20	; 0x09
    17b8:	2a 87       	std	Y+10, r18	; 0x0a
	wdt_reset();
	char charBuf [chCantDigitos+chDecimales];
	dtostrf(flValor, chCantDigitos, chDecimales, charBuf);
	Transmitir_Buffer_USART0 (charBuf, chCantDigitos+chDecimales);
}
    17ba:	ed b6       	in	r14, 0x3d	; 61
    17bc:	fe b6       	in	r15, 0x3e	; 62
    17be:	8d b7       	in	r24, 0x3d	; 61
    17c0:	9e b7       	in	r25, 0x3e	; 62
    17c2:	6c 01       	movw	r12, r24
/************************************************************************
* Transmisión de un float por USART0
************************************************************************/

void Transmitir_Float_USART0 (float flValor, char chCantDigitos, char chDecimales) {
	wdt_reset();
    17c4:	a8 95       	wdr
	char charBuf [chCantDigitos+chDecimales];
    17c6:	89 85       	ldd	r24, Y+9	; 0x09
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ce:	88 2f       	mov	r24, r24
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	82 0f       	add	r24, r18
    17d4:	93 1f       	adc	r25, r19
    17d6:	9c 01       	movw	r18, r24
    17d8:	21 50       	subi	r18, 0x01	; 1
    17da:	31 09       	sbc	r19, r1
    17dc:	3a 83       	std	Y+2, r19	; 0x02
    17de:	29 83       	std	Y+1, r18	; 0x01
    17e0:	2d b7       	in	r18, 0x3d	; 61
    17e2:	3e b7       	in	r19, 0x3e	; 62
    17e4:	28 1b       	sub	r18, r24
    17e6:	39 0b       	sbc	r19, r25
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	3e bf       	out	0x3e, r19	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	2d bf       	out	0x3d, r18	; 61
    17f2:	8d b7       	in	r24, 0x3d	; 61
    17f4:	9e b7       	in	r25, 0x3e	; 62
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	9c 83       	std	Y+4, r25	; 0x04
    17fa:	8b 83       	std	Y+3, r24	; 0x03
	dtostrf(flValor, chCantDigitos, chDecimales, charBuf);
    17fc:	2b 81       	ldd	r18, Y+3	; 0x03
    17fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1800:	49 85       	ldd	r20, Y+9	; 0x09
    1802:	8d 81       	ldd	r24, Y+5	; 0x05
    1804:	9e 81       	ldd	r25, Y+6	; 0x06
    1806:	af 81       	ldd	r26, Y+7	; 0x07
    1808:	b8 85       	ldd	r27, Y+8	; 0x08
    180a:	89 01       	movw	r16, r18
    180c:	2a 85       	ldd	r18, Y+10	; 0x0a
    180e:	bc 01       	movw	r22, r24
    1810:	cd 01       	movw	r24, r26
    1812:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
	Transmitir_Buffer_USART0 (charBuf, chCantDigitos+chDecimales);
    1816:	89 85       	ldd	r24, Y+9	; 0x09
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	8a 85       	ldd	r24, Y+10	; 0x0a
    181e:	88 2f       	mov	r24, r24
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	28 0f       	add	r18, r24
    1824:	39 1f       	adc	r19, r25
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	b9 01       	movw	r22, r18
    182c:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de be       	out	0x3e, r13	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd be       	out	0x3d, r12	; 61
}
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	fe be       	out	0x3e, r15	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	ed be       	out	0x3d, r14	; 61
    1844:	2a 96       	adiw	r28, 0x0a	; 10
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	ff 90       	pop	r15
    185a:	ef 90       	pop	r14
    185c:	df 90       	pop	r13
    185e:	cf 90       	pop	r12
    1860:	08 95       	ret

00001862 <Esperar_USART_O_TX>:

/************************************************************************
* Esperar USART0 para transmitir
************************************************************************/

char Esperar_USART_O_TX (void) {
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	1f 92       	push	r1
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
	wdt_reset();
    186c:	a8 95       	wdr
	char chTimeout;

	uContTimeoutEsperaUSART0 = TIMEOUT_ESPERA_USART_0;
    186e:	85 e0       	ldi	r24, 0x05	; 5
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	90 93 80 02 	sts	0x0280, r25
    1876:	80 93 7f 02 	sts	0x027F, r24

	while (((UCSR0A & (SET<<UDRE0)) == 0) && (uContTimeoutEsperaUSART0 != 0));
    187a:	00 00       	nop
    187c:	8b e2       	ldi	r24, 0x2B	; 43
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	fc 01       	movw	r30, r24
    1882:	80 81       	ld	r24, Z
    1884:	88 2f       	mov	r24, r24
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	80 72       	andi	r24, 0x20	; 32
    188a:	99 27       	eor	r25, r25
    188c:	89 2b       	or	r24, r25
    188e:	31 f4       	brne	.+12     	; 0x189c <Esperar_USART_O_TX+0x3a>
    1890:	80 91 7f 02 	lds	r24, 0x027F
    1894:	90 91 80 02 	lds	r25, 0x0280
    1898:	89 2b       	or	r24, r25
    189a:	81 f7       	brne	.-32     	; 0x187c <Esperar_USART_O_TX+0x1a>

	(uContTimeoutEsperaUSART0 != 0) ? (chTimeout = NO) : (chTimeout = SI);
    189c:	80 91 7f 02 	lds	r24, 0x027F
    18a0:	90 91 80 02 	lds	r25, 0x0280
    18a4:	89 2b       	or	r24, r25
    18a6:	11 f0       	breq	.+4      	; 0x18ac <Esperar_USART_O_TX+0x4a>
    18a8:	19 82       	std	Y+1, r1	; 0x01
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <Esperar_USART_O_TX+0x4e>
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	89 83       	std	Y+1, r24	; 0x01

	return chTimeout;
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b2:	0f 90       	pop	r0
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	08 95       	ret

000018ba <Recibir_Buffer_USART0>:

/************************************************************************
* Recepcion de buffer completo por USART 0 (de prepo y de corrido)
************************************************************************/

void Recibir_Buffer_USART0 (char *chBufferPtr, int maxBufferSize) {
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	27 97       	sbiw	r28, 0x07	; 7
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	9d 83       	std	Y+5, r25	; 0x05
    18d0:	8c 83       	std	Y+4, r24	; 0x04
    18d2:	7f 83       	std	Y+7, r23	; 0x07
    18d4:	6e 83       	std	Y+6, r22	; 0x06

	int i = 0;
    18d6:	1a 82       	std	Y+2, r1	; 0x02
    18d8:	19 82       	std	Y+1, r1	; 0x01
	char chTimeout = NO;
    18da:	1b 82       	std	Y+3, r1	; 0x03

	while ((chTimeout == NO) && (i < (maxBufferSize-1)) && (*(chBufferPtr+i-1) != '\0') && (*(chBufferPtr+i-1) != '\n') && (*(chBufferPtr+i-1) != '\r')) {
    18dc:	17 c0       	rjmp	.+46     	; 0x190c <Recibir_Buffer_USART0+0x52>

		chTimeout = Esperar_USART_0_RX();
    18de:	0e 94 c6 0c 	call	0x198c	; 0x198c <Esperar_USART_0_RX>
    18e2:	8b 83       	std	Y+3, r24	; 0x03

		if (chTimeout == NO) {
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	88 23       	and	r24, r24
    18e8:	89 f4       	brne	.+34     	; 0x190c <Recibir_Buffer_USART0+0x52>
			*(chBufferPtr+i) = UDR0;
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	9a 81       	ldd	r25, Y+2	; 0x02
    18ee:	2c 81       	ldd	r18, Y+4	; 0x04
    18f0:	3d 81       	ldd	r19, Y+5	; 0x05
    18f2:	82 0f       	add	r24, r18
    18f4:	93 1f       	adc	r25, r19
    18f6:	2c e2       	ldi	r18, 0x2C	; 44
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	f9 01       	movw	r30, r18
    18fc:	20 81       	ld	r18, Z
    18fe:	fc 01       	movw	r30, r24
    1900:	20 83       	st	Z, r18
			i++;
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	01 96       	adiw	r24, 0x01	; 1
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
void Recibir_Buffer_USART0 (char *chBufferPtr, int maxBufferSize) {

	int i = 0;
	char chTimeout = NO;

	while ((chTimeout == NO) && (i < (maxBufferSize-1)) && (*(chBufferPtr+i-1) != '\0') && (*(chBufferPtr+i-1) != '\n') && (*(chBufferPtr+i-1) != '\r')) {
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	88 23       	and	r24, r24
    1910:	61 f5       	brne	.+88     	; 0x196a <Recibir_Buffer_USART0+0xb0>
    1912:	8e 81       	ldd	r24, Y+6	; 0x06
    1914:	9f 81       	ldd	r25, Y+7	; 0x07
    1916:	9c 01       	movw	r18, r24
    1918:	21 50       	subi	r18, 0x01	; 1
    191a:	31 09       	sbc	r19, r1
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	82 17       	cp	r24, r18
    1922:	93 07       	cpc	r25, r19
    1924:	14 f5       	brge	.+68     	; 0x196a <Recibir_Buffer_USART0+0xb0>
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	9a 81       	ldd	r25, Y+2	; 0x02
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	2c 81       	ldd	r18, Y+4	; 0x04
    192e:	3d 81       	ldd	r19, Y+5	; 0x05
    1930:	82 0f       	add	r24, r18
    1932:	93 1f       	adc	r25, r19
    1934:	fc 01       	movw	r30, r24
    1936:	80 81       	ld	r24, Z
    1938:	88 23       	and	r24, r24
    193a:	b9 f0       	breq	.+46     	; 0x196a <Recibir_Buffer_USART0+0xb0>
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	2c 81       	ldd	r18, Y+4	; 0x04
    1944:	3d 81       	ldd	r19, Y+5	; 0x05
    1946:	82 0f       	add	r24, r18
    1948:	93 1f       	adc	r25, r19
    194a:	fc 01       	movw	r30, r24
    194c:	80 81       	ld	r24, Z
    194e:	8a 30       	cpi	r24, 0x0A	; 10
    1950:	61 f0       	breq	.+24     	; 0x196a <Recibir_Buffer_USART0+0xb0>
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	9a 81       	ldd	r25, Y+2	; 0x02
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	2c 81       	ldd	r18, Y+4	; 0x04
    195a:	3d 81       	ldd	r19, Y+5	; 0x05
    195c:	82 0f       	add	r24, r18
    195e:	93 1f       	adc	r25, r19
    1960:	fc 01       	movw	r30, r24
    1962:	80 81       	ld	r24, Z
    1964:	8d 30       	cpi	r24, 0x0D	; 13
    1966:	09 f0       	breq	.+2      	; 0x196a <Recibir_Buffer_USART0+0xb0>
    1968:	ba cf       	rjmp	.-140    	; 0x18de <Recibir_Buffer_USART0+0x24>
			*(chBufferPtr+i) = UDR0;
			i++;
		}
	}

	*(chBufferPtr+i) = '\0';
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	2c 81       	ldd	r18, Y+4	; 0x04
    1970:	3d 81       	ldd	r19, Y+5	; 0x05
    1972:	82 0f       	add	r24, r18
    1974:	93 1f       	adc	r25, r19
    1976:	fc 01       	movw	r30, r24
    1978:	10 82       	st	Z, r1
}
    197a:	27 96       	adiw	r28, 0x07	; 7
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	08 95       	ret

0000198c <Esperar_USART_0_RX>:

/************************************************************************
* Esperar USART0 para Recibir
************************************************************************/

char Esperar_USART_0_RX (void) {
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	1f 92       	push	r1
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
	wdt_reset();
    1996:	a8 95       	wdr
	char chTimeout;

	uContTimeoutEsperaUSART0 = TIMEOUT_ESPERA_USART_0;
    1998:	85 e0       	ldi	r24, 0x05	; 5
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	90 93 80 02 	sts	0x0280, r25
    19a0:	80 93 7f 02 	sts	0x027F, r24

	while (((UCSR0A & (SET<<RXC0)) == 0) && (uContTimeoutEsperaUSART0 != 0));
    19a4:	00 00       	nop
    19a6:	8b e2       	ldi	r24, 0x2B	; 43
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	fc 01       	movw	r30, r24
    19ac:	80 81       	ld	r24, Z
    19ae:	88 23       	and	r24, r24
    19b0:	34 f0       	brlt	.+12     	; 0x19be <Esperar_USART_0_RX+0x32>
    19b2:	80 91 7f 02 	lds	r24, 0x027F
    19b6:	90 91 80 02 	lds	r25, 0x0280
    19ba:	89 2b       	or	r24, r25
    19bc:	a1 f7       	brne	.-24     	; 0x19a6 <Esperar_USART_0_RX+0x1a>

	(uContTimeoutEsperaUSART0 != 0) ? (chTimeout = NO) : (chTimeout = SI);
    19be:	80 91 7f 02 	lds	r24, 0x027F
    19c2:	90 91 80 02 	lds	r25, 0x0280
    19c6:	89 2b       	or	r24, r25
    19c8:	11 f0       	breq	.+4      	; 0x19ce <Esperar_USART_0_RX+0x42>
    19ca:	19 82       	std	Y+1, r1	; 0x01
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <Esperar_USART_0_RX+0x46>
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	89 83       	std	Y+1, r24	; 0x01

	return chTimeout;
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d4:	0f 90       	pop	r0
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <Actualizar_Alarmas>:
extern volatile char			chBuzzerModo;	/* alarmas.c, modo de operacion del buzzer */

/*****************************************************************************
* Maquina de estados
*****************************************************************************/
void Actualizar_Alarmas (void) {
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
	switch (uchEstadoAlarmas) {
    19ec:	80 91 2b 04 	lds	r24, 0x042B
    19f0:	88 2f       	mov	r24, r24
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	91 05       	cpc	r25, r1
    19f8:	09 f4       	brne	.+2      	; 0x19fc <Actualizar_Alarmas+0x20>
    19fa:	5d c0       	rjmp	.+186    	; 0x1ab6 <Actualizar_Alarmas+0xda>
    19fc:	82 30       	cpi	r24, 0x02	; 2
    19fe:	91 05       	cpc	r25, r1
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <Actualizar_Alarmas+0x28>
    1a02:	af c0       	rjmp	.+350    	; 0x1b62 <Actualizar_Alarmas+0x186>
    1a04:	89 2b       	or	r24, r25
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <Actualizar_Alarmas+0x2e>
    1a08:	04 c1       	rjmp	.+520    	; 0x1c12 <Actualizar_Alarmas+0x236>

		case ALARMA_CONDUCTIMETRO_1:
			if (flValorAlarmaCond1 != 0){
    1a0a:	80 91 2c 04 	lds	r24, 0x042C
    1a0e:	90 91 2d 04 	lds	r25, 0x042D
    1a12:	a0 91 2e 04 	lds	r26, 0x042E
    1a16:	b0 91 2f 04 	lds	r27, 0x042F
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	a9 01       	movw	r20, r18
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	a1 f1       	breq	.+104    	; 0x1a94 <Actualizar_Alarmas+0xb8>
				if (uContTiempoAlarmaCond1 == uTiempoAlarmaCond1 * TIMER0_A_SEGUNDOS) {	// si integro el tiempo es que se activo la alarma
    1a2c:	80 91 1b 04 	lds	r24, 0x041B
    1a30:	90 91 1c 04 	lds	r25, 0x041C
    1a34:	7c 01       	movw	r14, r24
    1a36:	00 e0       	ldi	r16, 0x00	; 0
    1a38:	10 e0       	ldi	r17, 0x00	; 0
    1a3a:	80 91 1d 04 	lds	r24, 0x041D
    1a3e:	90 91 1e 04 	lds	r25, 0x041E
    1a42:	9c 01       	movw	r18, r24
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	88 ee       	ldi	r24, 0xE8	; 232
    1a4a:	93 e0       	ldi	r25, 0x03	; 3
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	0e 94 46 81 	call	0x1028c	; 0x1028c <__muluhisi3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	e8 16       	cp	r14, r24
    1a58:	f9 06       	cpc	r15, r25
    1a5a:	0a 07       	cpc	r16, r26
    1a5c:	1b 07       	cpc	r17, r27
    1a5e:	51 f4       	brne	.+20     	; 0x1a74 <Actualizar_Alarmas+0x98>
					SET_BIT(OnOffAlarmas, ALARMA_1);
    1a60:	80 91 27 04 	lds	r24, 0x0427
    1a64:	90 91 28 04 	lds	r25, 0x0428
    1a68:	81 60       	ori	r24, 0x01	; 1
    1a6a:	90 93 28 04 	sts	0x0428, r25
    1a6e:	80 93 27 04 	sts	0x0427, r24
    1a72:	1d c0       	rjmp	.+58     	; 0x1aae <Actualizar_Alarmas+0xd2>
				}
				else if (uContTiempoAlarmaCond1 == 0){
    1a74:	80 91 1b 04 	lds	r24, 0x041B
    1a78:	90 91 1c 04 	lds	r25, 0x041C
    1a7c:	89 2b       	or	r24, r25
    1a7e:	b9 f4       	brne	.+46     	; 0x1aae <Actualizar_Alarmas+0xd2>
					CLEAR_BIT(OnOffAlarmas, ALARMA_1);
    1a80:	80 91 27 04 	lds	r24, 0x0427
    1a84:	90 91 28 04 	lds	r25, 0x0428
    1a88:	8e 7f       	andi	r24, 0xFE	; 254
    1a8a:	90 93 28 04 	sts	0x0428, r25
    1a8e:	80 93 27 04 	sts	0x0427, r24
    1a92:	0d c0       	rjmp	.+26     	; 0x1aae <Actualizar_Alarmas+0xd2>
				}
			}
			else {
				uContTiempoAlarmaCond1=0;
    1a94:	10 92 1c 04 	sts	0x041C, r1
    1a98:	10 92 1b 04 	sts	0x041B, r1
				CLEAR_BIT(OnOffAlarmas, ALARMA_1);
    1a9c:	80 91 27 04 	lds	r24, 0x0427
    1aa0:	90 91 28 04 	lds	r25, 0x0428
    1aa4:	8e 7f       	andi	r24, 0xFE	; 254
    1aa6:	90 93 28 04 	sts	0x0428, r25
    1aaa:	80 93 27 04 	sts	0x0427, r24
			}

			uchEstadoAlarmas = ALARMA_CONDUCTIMETRO_2;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	80 93 2b 04 	sts	0x042B, r24
			break;
    1ab4:	b1 c0       	rjmp	.+354    	; 0x1c18 <Actualizar_Alarmas+0x23c>

		case ALARMA_CONDUCTIMETRO_2:
			if (flValorAlarmaCond2 != 0){
    1ab6:	80 91 21 04 	lds	r24, 0x0421
    1aba:	90 91 22 04 	lds	r25, 0x0422
    1abe:	a0 91 23 04 	lds	r26, 0x0423
    1ac2:	b0 91 24 04 	lds	r27, 0x0424
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	a9 01       	movw	r20, r18
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    1ad4:	88 23       	and	r24, r24
    1ad6:	a1 f1       	breq	.+104    	; 0x1b40 <Actualizar_Alarmas+0x164>
				if (uContTiempoAlarmaCond2 == uTiempoAlarmaCond2 * TIMER0_A_SEGUNDOS) {	// si integro el tiempo es que se activo la alarma
    1ad8:	80 91 25 04 	lds	r24, 0x0425
    1adc:	90 91 26 04 	lds	r25, 0x0426
    1ae0:	7c 01       	movw	r14, r24
    1ae2:	00 e0       	ldi	r16, 0x00	; 0
    1ae4:	10 e0       	ldi	r17, 0x00	; 0
    1ae6:	80 91 30 04 	lds	r24, 0x0430
    1aea:	90 91 31 04 	lds	r25, 0x0431
    1aee:	9c 01       	movw	r18, r24
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	50 e0       	ldi	r21, 0x00	; 0
    1af4:	88 ee       	ldi	r24, 0xE8	; 232
    1af6:	93 e0       	ldi	r25, 0x03	; 3
    1af8:	dc 01       	movw	r26, r24
    1afa:	0e 94 46 81 	call	0x1028c	; 0x1028c <__muluhisi3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	e8 16       	cp	r14, r24
    1b04:	f9 06       	cpc	r15, r25
    1b06:	0a 07       	cpc	r16, r26
    1b08:	1b 07       	cpc	r17, r27
    1b0a:	51 f4       	brne	.+20     	; 0x1b20 <Actualizar_Alarmas+0x144>
					SET_BIT(OnOffAlarmas, ALARMA_2);
    1b0c:	80 91 27 04 	lds	r24, 0x0427
    1b10:	90 91 28 04 	lds	r25, 0x0428
    1b14:	82 60       	ori	r24, 0x02	; 2
    1b16:	90 93 28 04 	sts	0x0428, r25
    1b1a:	80 93 27 04 	sts	0x0427, r24
    1b1e:	1d c0       	rjmp	.+58     	; 0x1b5a <Actualizar_Alarmas+0x17e>
				}
				else if (uContTiempoAlarmaCond2 == 0){
    1b20:	80 91 25 04 	lds	r24, 0x0425
    1b24:	90 91 26 04 	lds	r25, 0x0426
    1b28:	89 2b       	or	r24, r25
    1b2a:	b9 f4       	brne	.+46     	; 0x1b5a <Actualizar_Alarmas+0x17e>
					CLEAR_BIT(OnOffAlarmas, ALARMA_2);
    1b2c:	80 91 27 04 	lds	r24, 0x0427
    1b30:	90 91 28 04 	lds	r25, 0x0428
    1b34:	8d 7f       	andi	r24, 0xFD	; 253
    1b36:	90 93 28 04 	sts	0x0428, r25
    1b3a:	80 93 27 04 	sts	0x0427, r24
    1b3e:	0d c0       	rjmp	.+26     	; 0x1b5a <Actualizar_Alarmas+0x17e>
				}
			}
			else {
				uContTiempoAlarmaCond2=0;
    1b40:	10 92 26 04 	sts	0x0426, r1
    1b44:	10 92 25 04 	sts	0x0425, r1
				CLEAR_BIT(OnOffAlarmas, ALARMA_2);
    1b48:	80 91 27 04 	lds	r24, 0x0427
    1b4c:	90 91 28 04 	lds	r25, 0x0428
    1b50:	8d 7f       	andi	r24, 0xFD	; 253
    1b52:	90 93 28 04 	sts	0x0428, r25
    1b56:	80 93 27 04 	sts	0x0427, r24
			}

			uchEstadoAlarmas = ALARMA_CONTROL;
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	80 93 2b 04 	sts	0x042B, r24
			break;
    1b60:	5b c0       	rjmp	.+182    	; 0x1c18 <Actualizar_Alarmas+0x23c>

		case ALARMA_CONTROL:
			if (OnOffAlarmas != 0){
    1b62:	80 91 27 04 	lds	r24, 0x0427
    1b66:	90 91 28 04 	lds	r25, 0x0428
    1b6a:	89 2b       	or	r24, r25
    1b6c:	d1 f1       	breq	.+116    	; 0x1be2 <Actualizar_Alarmas+0x206>
				((OnOffAlarmas&(SET<<ALARMA_1)) != 0) ? (SET_BIT(SALIDA_DIG_PORT, SALIDA_DIG_1)) : (CLEAR_BIT(SALIDA_DIG_PORT, SALIDA_DIG_1));
    1b6e:	80 91 27 04 	lds	r24, 0x0427
    1b72:	90 91 28 04 	lds	r25, 0x0428
    1b76:	81 70       	andi	r24, 0x01	; 1
    1b78:	99 27       	eor	r25, r25
    1b7a:	89 2b       	or	r24, r25
    1b7c:	51 f0       	breq	.+20     	; 0x1b92 <Actualizar_Alarmas+0x1b6>
    1b7e:	83 e2       	ldi	r24, 0x23	; 35
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	23 e2       	ldi	r18, 0x23	; 35
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	f9 01       	movw	r30, r18
    1b88:	20 81       	ld	r18, Z
    1b8a:	20 62       	ori	r18, 0x20	; 32
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	20 83       	st	Z, r18
    1b90:	09 c0       	rjmp	.+18     	; 0x1ba4 <Actualizar_Alarmas+0x1c8>
    1b92:	83 e2       	ldi	r24, 0x23	; 35
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	23 e2       	ldi	r18, 0x23	; 35
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	f9 01       	movw	r30, r18
    1b9c:	20 81       	ld	r18, Z
    1b9e:	2f 7d       	andi	r18, 0xDF	; 223
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	20 83       	st	Z, r18
				((OnOffAlarmas&(SET<<ALARMA_2)) != 0) ? (SET_BIT(SALIDA_DIG_PORT, SALIDA_DIG_2)) : (CLEAR_BIT(SALIDA_DIG_PORT, SALIDA_DIG_2));
    1ba4:	80 91 27 04 	lds	r24, 0x0427
    1ba8:	90 91 28 04 	lds	r25, 0x0428
    1bac:	82 70       	andi	r24, 0x02	; 2
    1bae:	99 27       	eor	r25, r25
    1bb0:	89 2b       	or	r24, r25
    1bb2:	51 f0       	breq	.+20     	; 0x1bc8 <Actualizar_Alarmas+0x1ec>
    1bb4:	83 e2       	ldi	r24, 0x23	; 35
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	23 e2       	ldi	r18, 0x23	; 35
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	f9 01       	movw	r30, r18
    1bbe:	20 81       	ld	r18, Z
    1bc0:	20 61       	ori	r18, 0x10	; 16
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	20 83       	st	Z, r18
    1bc6:	09 c0       	rjmp	.+18     	; 0x1bda <Actualizar_Alarmas+0x1fe>
    1bc8:	83 e2       	ldi	r24, 0x23	; 35
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	23 e2       	ldi	r18, 0x23	; 35
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	f9 01       	movw	r30, r18
    1bd2:	20 81       	ld	r18, Z
    1bd4:	2f 7e       	andi	r18, 0xEF	; 239
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	20 83       	st	Z, r18

				chBuzzerModo = BUZZER_INTERMITENTE;
    1bda:	82 e0       	ldi	r24, 0x02	; 2
    1bdc:	80 93 e2 04 	sts	0x04E2, r24
    1be0:	15 c0       	rjmp	.+42     	; 0x1c0c <Actualizar_Alarmas+0x230>
			}
			else {
				CLEAR_BIT(SALIDA_DIG_PORT, SALIDA_DIG_1);
    1be2:	83 e2       	ldi	r24, 0x23	; 35
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	23 e2       	ldi	r18, 0x23	; 35
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	f9 01       	movw	r30, r18
    1bec:	20 81       	ld	r18, Z
    1bee:	2f 7d       	andi	r18, 0xDF	; 223
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	20 83       	st	Z, r18
				CLEAR_BIT(SALIDA_DIG_PORT, SALIDA_DIG_2);
    1bf4:	83 e2       	ldi	r24, 0x23	; 35
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	23 e2       	ldi	r18, 0x23	; 35
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	f9 01       	movw	r30, r18
    1bfe:	20 81       	ld	r18, Z
    1c00:	2f 7e       	andi	r18, 0xEF	; 239
    1c02:	fc 01       	movw	r30, r24
    1c04:	20 83       	st	Z, r18

				chBuzzerModo = BUZZER_OFF;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	80 93 e2 04 	sts	0x04E2, r24
			}

			uchEstadoAlarmas = ALARMA_CONDUCTIMETRO_1;
    1c0c:	10 92 2b 04 	sts	0x042B, r1
			break;
    1c10:	03 c0       	rjmp	.+6      	; 0x1c18 <Actualizar_Alarmas+0x23c>

		default:
			Inicio_Alarmas();
    1c12:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <Inicio_Alarmas>
			break;
    1c16:	00 00       	nop
	}
}
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
    1c24:	08 95       	ret

00001c26 <Inicio_Alarmas>:

/*****************************************************************************
* Inicio de Maquina de estados
*****************************************************************************/
void Inicio_Alarmas (void) {
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
	uContTiempoAlarmaCond1 = 0;
    1c2e:	10 92 1c 04 	sts	0x041C, r1
    1c32:	10 92 1b 04 	sts	0x041B, r1
	uContTiempoAlarmaCond2 = 0;
    1c36:	10 92 26 04 	sts	0x0426, r1
    1c3a:	10 92 25 04 	sts	0x0425, r1
	ulContTiempoSilenciarAlarma = 0;
    1c3e:	10 92 2a 04 	sts	0x042A, r1
    1c42:	10 92 29 04 	sts	0x0429, r1
	OnOffAlarmas = 0;
    1c46:	10 92 28 04 	sts	0x0428, r1
    1c4a:	10 92 27 04 	sts	0x0427, r1

	CLEAR_BIT(SALIDA_DIG_PORT, SALIDA_DIG_1);
    1c4e:	83 e2       	ldi	r24, 0x23	; 35
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	23 e2       	ldi	r18, 0x23	; 35
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	f9 01       	movw	r30, r18
    1c58:	20 81       	ld	r18, Z
    1c5a:	2f 7d       	andi	r18, 0xDF	; 223
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	20 83       	st	Z, r18
	CLEAR_BIT(SALIDA_DIG_PORT, SALIDA_DIG_2);
    1c60:	83 e2       	ldi	r24, 0x23	; 35
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	23 e2       	ldi	r18, 0x23	; 35
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	f9 01       	movw	r30, r18
    1c6a:	20 81       	ld	r18, Z
    1c6c:	2f 7e       	andi	r18, 0xEF	; 239
    1c6e:	fc 01       	movw	r30, r24
    1c70:	20 83       	st	Z, r18

	uchEstadoAlarmas = ALARMA_CONDUCTIMETRO_1;
    1c72:	10 92 2b 04 	sts	0x042B, r1
}
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	08 95       	ret

00001c7c <Leer_Entradas>:
const char MSG_Estado_Salidas[]				PROGMEM = "Estado Salidas: \0";

/************************************************************************
* Máquina de estados de lectura de la botonera
************************************************************************/
void Leer_Entradas(void) {
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	2a 97       	sbiw	r28, 0x0a	; 10
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
	switch (uchEstadoLeerEntradas) {
    1c90:	80 91 38 04 	lds	r24, 0x0438
    1c94:	88 2f       	mov	r24, r24
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	83 30       	cpi	r24, 0x03	; 3
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <Leer_Entradas+0x24>
    1c9e:	a9 c0       	rjmp	.+338    	; 0x1df2 <Leer_Entradas+0x176>
    1ca0:	84 30       	cpi	r24, 0x04	; 4
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	3c f4       	brge	.+14     	; 0x1cb4 <Leer_Entradas+0x38>
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	91 05       	cpc	r25, r1
    1caa:	61 f0       	breq	.+24     	; 0x1cc4 <Leer_Entradas+0x48>
    1cac:	02 97       	sbiw	r24, 0x02	; 2
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <Leer_Entradas+0x36>
    1cb0:	7f c0       	rjmp	.+254    	; 0x1db0 <Leer_Entradas+0x134>
    1cb2:	71 c2       	rjmp	.+1250   	; 0x2196 <Leer_Entradas+0x51a>
    1cb4:	84 30       	cpi	r24, 0x04	; 4
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <Leer_Entradas+0x40>
    1cba:	a7 c0       	rjmp	.+334    	; 0x1e0a <Leer_Entradas+0x18e>
    1cbc:	0a 97       	sbiw	r24, 0x0a	; 10
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <Leer_Entradas+0x46>
    1cc0:	b0 c0       	rjmp	.+352    	; 0x1e22 <Leer_Entradas+0x1a6>
    1cc2:	69 c2       	rjmp	.+1234   	; 0x2196 <Leer_Entradas+0x51a>

		case BARRER_ENTRADAS:
			uEstadoEntradasInstantaneas = 0;
    1cc4:	10 92 40 04 	sts	0x0440, r1
    1cc8:	10 92 3f 04 	sts	0x043F, r1

				CLEAR_BIT(TECLADO_PORT, PIN_TECLADO_COMUN);
    1ccc:	8b e3       	ldi	r24, 0x3B	; 59
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	2b e3       	ldi	r18, 0x3B	; 59
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	f9 01       	movw	r30, r18
    1cd6:	20 81       	ld	r18, Z
    1cd8:	2e 7f       	andi	r18, 0xFE	; 254
    1cda:	fc 01       	movw	r30, r24
    1cdc:	20 83       	st	Z, r18
				((TECLADO_PIN & (SET<<PIN_TECLADO_1)) == 0) ? (SET_BIT(uEstadoEntradasInstantaneas, BOTON_TECLADO_1)) : (CLEAR_BIT(uEstadoEntradasInstantaneas, BOTON_TECLADO_1));
    1cde:	89 e3       	ldi	r24, 0x39	; 57
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	80 81       	ld	r24, Z
    1ce6:	88 2f       	mov	r24, r24
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	82 70       	andi	r24, 0x02	; 2
    1cec:	99 27       	eor	r25, r25
    1cee:	89 2b       	or	r24, r25
    1cf0:	51 f4       	brne	.+20     	; 0x1d06 <Leer_Entradas+0x8a>
    1cf2:	80 91 3f 04 	lds	r24, 0x043F
    1cf6:	90 91 40 04 	lds	r25, 0x0440
    1cfa:	81 60       	ori	r24, 0x01	; 1
    1cfc:	90 93 40 04 	sts	0x0440, r25
    1d00:	80 93 3f 04 	sts	0x043F, r24
    1d04:	09 c0       	rjmp	.+18     	; 0x1d18 <Leer_Entradas+0x9c>
    1d06:	80 91 3f 04 	lds	r24, 0x043F
    1d0a:	90 91 40 04 	lds	r25, 0x0440
    1d0e:	8e 7f       	andi	r24, 0xFE	; 254
    1d10:	90 93 40 04 	sts	0x0440, r25
    1d14:	80 93 3f 04 	sts	0x043F, r24
				((TECLADO_PIN & (SET<<PIN_TECLADO_2)) == 0) ? (SET_BIT(uEstadoEntradasInstantaneas, BOTON_TECLADO_2)) : (CLEAR_BIT(uEstadoEntradasInstantaneas, BOTON_TECLADO_2));
    1d18:	89 e3       	ldi	r24, 0x39	; 57
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	80 81       	ld	r24, Z
    1d20:	88 2f       	mov	r24, r24
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	84 70       	andi	r24, 0x04	; 4
    1d26:	99 27       	eor	r25, r25
    1d28:	89 2b       	or	r24, r25
    1d2a:	51 f4       	brne	.+20     	; 0x1d40 <Leer_Entradas+0xc4>
    1d2c:	80 91 3f 04 	lds	r24, 0x043F
    1d30:	90 91 40 04 	lds	r25, 0x0440
    1d34:	82 60       	ori	r24, 0x02	; 2
    1d36:	90 93 40 04 	sts	0x0440, r25
    1d3a:	80 93 3f 04 	sts	0x043F, r24
    1d3e:	09 c0       	rjmp	.+18     	; 0x1d52 <Leer_Entradas+0xd6>
    1d40:	80 91 3f 04 	lds	r24, 0x043F
    1d44:	90 91 40 04 	lds	r25, 0x0440
    1d48:	8d 7f       	andi	r24, 0xFD	; 253
    1d4a:	90 93 40 04 	sts	0x0440, r25
    1d4e:	80 93 3f 04 	sts	0x043F, r24
				((TECLADO_PIN & (SET<<PIN_TECLADO_3)) == 0) ? (SET_BIT(uEstadoEntradasInstantaneas, BOTON_TECLADO_3)) : (CLEAR_BIT(uEstadoEntradasInstantaneas, BOTON_TECLADO_3));
    1d52:	89 e3       	ldi	r24, 0x39	; 57
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	fc 01       	movw	r30, r24
    1d58:	80 81       	ld	r24, Z
    1d5a:	88 2f       	mov	r24, r24
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	88 70       	andi	r24, 0x08	; 8
    1d60:	99 27       	eor	r25, r25
    1d62:	89 2b       	or	r24, r25
    1d64:	51 f4       	brne	.+20     	; 0x1d7a <Leer_Entradas+0xfe>
    1d66:	80 91 3f 04 	lds	r24, 0x043F
    1d6a:	90 91 40 04 	lds	r25, 0x0440
    1d6e:	84 60       	ori	r24, 0x04	; 4
    1d70:	90 93 40 04 	sts	0x0440, r25
    1d74:	80 93 3f 04 	sts	0x043F, r24
    1d78:	09 c0       	rjmp	.+18     	; 0x1d8c <Leer_Entradas+0x110>
    1d7a:	80 91 3f 04 	lds	r24, 0x043F
    1d7e:	90 91 40 04 	lds	r25, 0x0440
    1d82:	8b 7f       	andi	r24, 0xFB	; 251
    1d84:	90 93 40 04 	sts	0x0440, r25
    1d88:	80 93 3f 04 	sts	0x043F, r24

				if (uTimeoutEntradas == 0) {			/* si se vence el tiempo de lectura limpio los flag */
    1d8c:	80 91 45 04 	lds	r24, 0x0445
    1d90:	90 91 46 04 	lds	r25, 0x0446
    1d94:	89 2b       	or	r24, r25
    1d96:	41 f4       	brne	.+16     	; 0x1da8 <Leer_Entradas+0x12c>
					uFlagEntradasActivadas = 0;
    1d98:	10 92 43 04 	sts	0x0443, r1
    1d9c:	10 92 42 04 	sts	0x0442, r1
					uFlagEntradasLiberadas = 0;
    1da0:	10 92 3a 04 	sts	0x043A, r1
    1da4:	10 92 39 04 	sts	0x0439, r1
				}

			uchEstadoLeerEntradas = ENTRADA_TECLADO_1;
    1da8:	82 e0       	ldi	r24, 0x02	; 2
    1daa:	80 93 38 04 	sts	0x0438, r24
			break;
    1dae:	f6 c1       	rjmp	.+1004   	; 0x219c <Leer_Entradas+0x520>


		case ENTRADA_TECLADO_1:
			if ((uFlagEntradasActivadas & (SET<<BOTON_TECLADO_1)) != 0){
    1db0:	80 91 42 04 	lds	r24, 0x0442
    1db4:	90 91 43 04 	lds	r25, 0x0443
    1db8:	81 70       	andi	r24, 0x01	; 1
    1dba:	99 27       	eor	r25, r25
    1dbc:	89 2b       	or	r24, r25
    1dbe:	89 f0       	breq	.+34     	; 0x1de2 <Leer_Entradas+0x166>

				// boton presionado! - hacer aca -
				ulContTiempoSilenciarAlarma = uTiempoSilenciarAlarma * TIMER0_A_MINUTOS;
    1dc0:	40 91 1f 04 	lds	r20, 0x041F
    1dc4:	50 91 20 04 	lds	r21, 0x0420
    1dc8:	20 e6       	ldi	r18, 0x60	; 96
    1dca:	3a ee       	ldi	r19, 0xEA	; 234
    1dcc:	42 9f       	mul	r20, r18
    1dce:	c0 01       	movw	r24, r0
    1dd0:	43 9f       	mul	r20, r19
    1dd2:	90 0d       	add	r25, r0
    1dd4:	52 9f       	mul	r21, r18
    1dd6:	90 0d       	add	r25, r0
    1dd8:	11 24       	eor	r1, r1
    1dda:	90 93 2a 04 	sts	0x042A, r25
    1dde:	80 93 29 04 	sts	0x0429, r24

//				CLEAR_BIT(uFlagEntradasActivadas, BOTON_TECLADO_1);
			}

			if ((uFlagEntradasLiberadas & (SET<<BOTON_TECLADO_1)) != 0){
    1de2:	80 91 39 04 	lds	r24, 0x0439
    1de6:	90 91 3a 04 	lds	r25, 0x043A
				// boton soltado! - hacer aca -

//				CLEAR_BIT(uFlagEntradasLiberadas, BOTON_TECLADO_1);
			}

			uchEstadoLeerEntradas = ENTRADA_TECLADO_2;
    1dea:	83 e0       	ldi	r24, 0x03	; 3
    1dec:	80 93 38 04 	sts	0x0438, r24
			break;
    1df0:	d5 c1       	rjmp	.+938    	; 0x219c <Leer_Entradas+0x520>


		case ENTRADA_TECLADO_2:
			if ((uFlagEntradasActivadas & (SET<<BOTON_TECLADO_2)) != 0){
    1df2:	80 91 42 04 	lds	r24, 0x0442
    1df6:	90 91 43 04 	lds	r25, 0x0443
				// boton presionado! - hacer aca -

//				CLEAR_BIT(uFlagEntradasActivadas, BOTON_TECLADO_2);
			}

			if ((uFlagEntradasLiberadas & (SET<<BOTON_TECLADO_2)) != 0){
    1dfa:	80 91 39 04 	lds	r24, 0x0439
    1dfe:	90 91 3a 04 	lds	r25, 0x043A
				// boton soltado! - hacer aca -

//				CLEAR_BIT(uFlagEntradasLiberadas, BOTON_TECLADO_2);
			}

			uchEstadoLeerEntradas = ENTRADA_TECLADO_3;
    1e02:	84 e0       	ldi	r24, 0x04	; 4
    1e04:	80 93 38 04 	sts	0x0438, r24
			break;
    1e08:	c9 c1       	rjmp	.+914    	; 0x219c <Leer_Entradas+0x520>


		case ENTRADA_TECLADO_3:
			if ((uFlagEntradasActivadas & (SET<<BOTON_TECLADO_3)) != 0){
    1e0a:	80 91 42 04 	lds	r24, 0x0442
    1e0e:	90 91 43 04 	lds	r25, 0x0443
				// boton presionado! - hacer aca -

//				CLEAR_BIT(uFlagEntradasActivadas, BOTON_TECLADO_3);
			}

			if ((uFlagEntradasLiberadas & (SET<<BOTON_TECLADO_3)) != 0){
    1e12:	80 91 39 04 	lds	r24, 0x0439
    1e16:	90 91 3a 04 	lds	r25, 0x043A
				// boton soltado! - hacer aca -

//				CLEAR_BIT(uFlagEntradasLiberadas, BOTON_TECLADO_3);
			}

			uchEstadoLeerEntradas = IMPRIMIR_DISCRETAS;
    1e1a:	8a e0       	ldi	r24, 0x0A	; 10
    1e1c:	80 93 38 04 	sts	0x0438, r24
			break;
    1e20:	bd c1       	rjmp	.+890    	; 0x219c <Leer_Entradas+0x520>


		case IMPRIMIR_DISCRETAS:
			if (chPrintEntradas == SI){
    1e22:	80 91 41 04 	lds	r24, 0x0441
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	09 f0       	breq	.+2      	; 0x1e2c <Leer_Entradas+0x1b0>
    1e2a:	2d c1       	rjmp	.+602    	; 0x2086 <Leer_Entradas+0x40a>
				int index = sprintf(chBufferTx_USART0, "\r%S", (wchar_t*)MSG_Estado_Entradas);
    1e2c:	8c e8       	ldi	r24, 0x8C	; 140
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	89 2f       	mov	r24, r25
    1e32:	8f 93       	push	r24
    1e34:	8c e8       	ldi	r24, 0x8C	; 140
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	8f 93       	push	r24
    1e3a:	80 e4       	ldi	r24, 0x40	; 64
    1e3c:	91 e0       	ldi	r25, 0x01	; 1
    1e3e:	89 2f       	mov	r24, r25
    1e40:	8f 93       	push	r24
    1e42:	80 e4       	ldi	r24, 0x40	; 64
    1e44:	91 e0       	ldi	r25, 0x01	; 1
    1e46:	8f 93       	push	r24
    1e48:	83 e5       	ldi	r24, 0x53	; 83
    1e4a:	93 e0       	ldi	r25, 0x03	; 3
    1e4c:	89 2f       	mov	r24, r25
    1e4e:	8f 93       	push	r24
    1e50:	83 e5       	ldi	r24, 0x53	; 83
    1e52:	93 e0       	ldi	r25, 0x03	; 3
    1e54:	8f 93       	push	r24
    1e56:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01
				for (int i=0; i<CANTIDAD_ENTRADAS; i++){
    1e6a:	1c 82       	std	Y+4, r1	; 0x04
    1e6c:	1b 82       	std	Y+3, r1	; 0x03
    1e6e:	39 c0       	rjmp	.+114    	; 0x1ee2 <Leer_Entradas+0x266>
					((uEstadoEntradas & (SET<<i))!=0) ? (index+=sprintf(chBufferTx_USART0+index, "1")) : (index+=sprintf(chBufferTx_USART0+index, "0"));
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	0b 80       	ldd	r0, Y+3	; 0x03
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <Leer_Entradas+0x200>
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	0a 94       	dec	r0
    1e7e:	e2 f7       	brpl	.-8      	; 0x1e78 <Leer_Entradas+0x1fc>
    1e80:	9c 01       	movw	r18, r24
    1e82:	80 91 3d 04 	lds	r24, 0x043D
    1e86:	90 91 3e 04 	lds	r25, 0x043E
    1e8a:	82 23       	and	r24, r18
    1e8c:	93 23       	and	r25, r19
    1e8e:	89 2b       	or	r24, r25
    1e90:	91 f0       	breq	.+36     	; 0x1eb6 <Leer_Entradas+0x23a>
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	9a 81       	ldd	r25, Y+2	; 0x02
    1e96:	8d 5a       	subi	r24, 0xAD	; 173
    1e98:	9c 4f       	sbci	r25, 0xFC	; 252
    1e9a:	21 e3       	ldi	r18, 0x31	; 49
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	31 83       	std	Z+1, r19	; 0x01
    1ea2:	20 83       	st	Z, r18
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	29 81       	ldd	r18, Y+1	; 0x01
    1eaa:	3a 81       	ldd	r19, Y+2	; 0x02
    1eac:	82 0f       	add	r24, r18
    1eae:	93 1f       	adc	r25, r19
    1eb0:	9a 83       	std	Y+2, r25	; 0x02
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	11 c0       	rjmp	.+34     	; 0x1ed8 <Leer_Entradas+0x25c>
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	8d 5a       	subi	r24, 0xAD	; 173
    1ebc:	9c 4f       	sbci	r25, 0xFC	; 252
    1ebe:	20 e3       	ldi	r18, 0x30	; 48
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	31 83       	std	Z+1, r19	; 0x01
    1ec6:	20 83       	st	Z, r18
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	29 81       	ldd	r18, Y+1	; 0x01
    1ece:	3a 81       	ldd	r19, Y+2	; 0x02
    1ed0:	82 0f       	add	r24, r18
    1ed2:	93 1f       	adc	r25, r19
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	89 83       	std	Y+1, r24	; 0x01


		case IMPRIMIR_DISCRETAS:
			if (chPrintEntradas == SI){
				int index = sprintf(chBufferTx_USART0, "\r%S", (wchar_t*)MSG_Estado_Entradas);
				for (int i=0; i<CANTIDAD_ENTRADAS; i++){
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	01 96       	adiw	r24, 0x01	; 1
    1ede:	9c 83       	std	Y+4, r25	; 0x04
    1ee0:	8b 83       	std	Y+3, r24	; 0x03
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee6:	03 97       	sbiw	r24, 0x03	; 3
    1ee8:	1c f2       	brlt	.-122    	; 0x1e70 <Leer_Entradas+0x1f4>
					((uEstadoEntradas & (SET<<i))!=0) ? (index+=sprintf(chBufferTx_USART0+index, "1")) : (index+=sprintf(chBufferTx_USART0+index, "0"));
				}
				index += sprintf(chBufferTx_USART0+index, "%S", (wchar_t*)uFlagBotonesPresionados_MSG);
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	8d 5a       	subi	r24, 0xAD	; 173
    1ef0:	9c 4f       	sbci	r25, 0xFC	; 252
    1ef2:	2f e9       	ldi	r18, 0x9F	; 159
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	23 2f       	mov	r18, r19
    1ef8:	2f 93       	push	r18
    1efa:	2f e9       	ldi	r18, 0x9F	; 159
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	2f 93       	push	r18
    1f00:	24 e4       	ldi	r18, 0x44	; 68
    1f02:	31 e0       	ldi	r19, 0x01	; 1
    1f04:	23 2f       	mov	r18, r19
    1f06:	2f 93       	push	r18
    1f08:	24 e4       	ldi	r18, 0x44	; 68
    1f0a:	31 e0       	ldi	r19, 0x01	; 1
    1f0c:	2f 93       	push	r18
    1f0e:	29 2f       	mov	r18, r25
    1f10:	2f 93       	push	r18
    1f12:	8f 93       	push	r24
    1f14:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	9c 01       	movw	r18, r24
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	82 0f       	add	r24, r18
    1f2c:	93 1f       	adc	r25, r19
    1f2e:	9a 83       	std	Y+2, r25	; 0x02
    1f30:	89 83       	std	Y+1, r24	; 0x01
				for (int i=0; i<CANTIDAD_ENTRADAS; i++){
    1f32:	1e 82       	std	Y+6, r1	; 0x06
    1f34:	1d 82       	std	Y+5, r1	; 0x05
    1f36:	39 c0       	rjmp	.+114    	; 0x1faa <Leer_Entradas+0x32e>
					((uFlagEntradasActivadas & (SET<<i))!=0) ? (index+=sprintf(chBufferTx_USART0+index, "1")) : (index+=sprintf(chBufferTx_USART0+index, "0"));
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	0d 80       	ldd	r0, Y+5	; 0x05
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <Leer_Entradas+0x2c8>
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	0a 94       	dec	r0
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <Leer_Entradas+0x2c4>
    1f48:	9c 01       	movw	r18, r24
    1f4a:	80 91 42 04 	lds	r24, 0x0442
    1f4e:	90 91 43 04 	lds	r25, 0x0443
    1f52:	82 23       	and	r24, r18
    1f54:	93 23       	and	r25, r19
    1f56:	89 2b       	or	r24, r25
    1f58:	91 f0       	breq	.+36     	; 0x1f7e <Leer_Entradas+0x302>
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5e:	8d 5a       	subi	r24, 0xAD	; 173
    1f60:	9c 4f       	sbci	r25, 0xFC	; 252
    1f62:	21 e3       	ldi	r18, 0x31	; 49
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	fc 01       	movw	r30, r24
    1f68:	31 83       	std	Z+1, r19	; 0x01
    1f6a:	20 83       	st	Z, r18
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	29 81       	ldd	r18, Y+1	; 0x01
    1f72:	3a 81       	ldd	r19, Y+2	; 0x02
    1f74:	82 0f       	add	r24, r18
    1f76:	93 1f       	adc	r25, r19
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	11 c0       	rjmp	.+34     	; 0x1fa0 <Leer_Entradas+0x324>
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	8d 5a       	subi	r24, 0xAD	; 173
    1f84:	9c 4f       	sbci	r25, 0xFC	; 252
    1f86:	20 e3       	ldi	r18, 0x30	; 48
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	31 83       	std	Z+1, r19	; 0x01
    1f8e:	20 83       	st	Z, r18
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	29 81       	ldd	r18, Y+1	; 0x01
    1f96:	3a 81       	ldd	r19, Y+2	; 0x02
    1f98:	82 0f       	add	r24, r18
    1f9a:	93 1f       	adc	r25, r19
    1f9c:	9a 83       	std	Y+2, r25	; 0x02
    1f9e:	89 83       	std	Y+1, r24	; 0x01
				int index = sprintf(chBufferTx_USART0, "\r%S", (wchar_t*)MSG_Estado_Entradas);
				for (int i=0; i<CANTIDAD_ENTRADAS; i++){
					((uEstadoEntradas & (SET<<i))!=0) ? (index+=sprintf(chBufferTx_USART0+index, "1")) : (index+=sprintf(chBufferTx_USART0+index, "0"));
				}
				index += sprintf(chBufferTx_USART0+index, "%S", (wchar_t*)uFlagBotonesPresionados_MSG);
				for (int i=0; i<CANTIDAD_ENTRADAS; i++){
    1fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa4:	01 96       	adiw	r24, 0x01	; 1
    1fa6:	9e 83       	std	Y+6, r25	; 0x06
    1fa8:	8d 83       	std	Y+5, r24	; 0x05
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	03 97       	sbiw	r24, 0x03	; 3
    1fb0:	1c f2       	brlt	.-122    	; 0x1f38 <Leer_Entradas+0x2bc>
					((uFlagEntradasActivadas & (SET<<i))!=0) ? (index+=sprintf(chBufferTx_USART0+index, "1")) : (index+=sprintf(chBufferTx_USART0+index, "0"));
				}
				index += sprintf(chBufferTx_USART0+index, "%S", (wchar_t*)uFlagBotonesLiberados_MSG);
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb6:	8d 5a       	subi	r24, 0xAD	; 173
    1fb8:	9c 4f       	sbci	r25, 0xFC	; 252
    1fba:	2f ea       	ldi	r18, 0xAF	; 175
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	23 2f       	mov	r18, r19
    1fc0:	2f 93       	push	r18
    1fc2:	2f ea       	ldi	r18, 0xAF	; 175
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	2f 93       	push	r18
    1fc8:	24 e4       	ldi	r18, 0x44	; 68
    1fca:	31 e0       	ldi	r19, 0x01	; 1
    1fcc:	23 2f       	mov	r18, r19
    1fce:	2f 93       	push	r18
    1fd0:	24 e4       	ldi	r18, 0x44	; 68
    1fd2:	31 e0       	ldi	r19, 0x01	; 1
    1fd4:	2f 93       	push	r18
    1fd6:	29 2f       	mov	r18, r25
    1fd8:	2f 93       	push	r18
    1fda:	8f 93       	push	r24
    1fdc:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	9c 01       	movw	r18, r24
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	82 0f       	add	r24, r18
    1ff4:	93 1f       	adc	r25, r19
    1ff6:	9a 83       	std	Y+2, r25	; 0x02
    1ff8:	89 83       	std	Y+1, r24	; 0x01
				for (int i=0; i<CANTIDAD_ENTRADAS; i++){
    1ffa:	18 86       	std	Y+8, r1	; 0x08
    1ffc:	1f 82       	std	Y+7, r1	; 0x07
    1ffe:	39 c0       	rjmp	.+114    	; 0x2072 <Leer_Entradas+0x3f6>
					((uFlagEntradasLiberadas & (SET<<i))!=0) ? (index+=sprintf(chBufferTx_USART0+index, "1")) : (index+=sprintf(chBufferTx_USART0+index, "0"));
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	0f 80       	ldd	r0, Y+7	; 0x07
    2006:	02 c0       	rjmp	.+4      	; 0x200c <Leer_Entradas+0x390>
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	0a 94       	dec	r0
    200e:	e2 f7       	brpl	.-8      	; 0x2008 <Leer_Entradas+0x38c>
    2010:	9c 01       	movw	r18, r24
    2012:	80 91 39 04 	lds	r24, 0x0439
    2016:	90 91 3a 04 	lds	r25, 0x043A
    201a:	82 23       	and	r24, r18
    201c:	93 23       	and	r25, r19
    201e:	89 2b       	or	r24, r25
    2020:	91 f0       	breq	.+36     	; 0x2046 <Leer_Entradas+0x3ca>
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	9a 81       	ldd	r25, Y+2	; 0x02
    2026:	8d 5a       	subi	r24, 0xAD	; 173
    2028:	9c 4f       	sbci	r25, 0xFC	; 252
    202a:	21 e3       	ldi	r18, 0x31	; 49
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	fc 01       	movw	r30, r24
    2030:	31 83       	std	Z+1, r19	; 0x01
    2032:	20 83       	st	Z, r18
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	29 81       	ldd	r18, Y+1	; 0x01
    203a:	3a 81       	ldd	r19, Y+2	; 0x02
    203c:	82 0f       	add	r24, r18
    203e:	93 1f       	adc	r25, r19
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	11 c0       	rjmp	.+34     	; 0x2068 <Leer_Entradas+0x3ec>
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	9a 81       	ldd	r25, Y+2	; 0x02
    204a:	8d 5a       	subi	r24, 0xAD	; 173
    204c:	9c 4f       	sbci	r25, 0xFC	; 252
    204e:	20 e3       	ldi	r18, 0x30	; 48
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	fc 01       	movw	r30, r24
    2054:	31 83       	std	Z+1, r19	; 0x01
    2056:	20 83       	st	Z, r18
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	29 81       	ldd	r18, Y+1	; 0x01
    205e:	3a 81       	ldd	r19, Y+2	; 0x02
    2060:	82 0f       	add	r24, r18
    2062:	93 1f       	adc	r25, r19
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	89 83       	std	Y+1, r24	; 0x01
				index += sprintf(chBufferTx_USART0+index, "%S", (wchar_t*)uFlagBotonesPresionados_MSG);
				for (int i=0; i<CANTIDAD_ENTRADAS; i++){
					((uFlagEntradasActivadas & (SET<<i))!=0) ? (index+=sprintf(chBufferTx_USART0+index, "1")) : (index+=sprintf(chBufferTx_USART0+index, "0"));
				}
				index += sprintf(chBufferTx_USART0+index, "%S", (wchar_t*)uFlagBotonesLiberados_MSG);
				for (int i=0; i<CANTIDAD_ENTRADAS; i++){
    2068:	8f 81       	ldd	r24, Y+7	; 0x07
    206a:	98 85       	ldd	r25, Y+8	; 0x08
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	98 87       	std	Y+8, r25	; 0x08
    2070:	8f 83       	std	Y+7, r24	; 0x07
    2072:	8f 81       	ldd	r24, Y+7	; 0x07
    2074:	98 85       	ldd	r25, Y+8	; 0x08
    2076:	03 97       	sbiw	r24, 0x03	; 3
    2078:	1c f2       	brlt	.-122    	; 0x2000 <Leer_Entradas+0x384>
					((uFlagEntradasLiberadas & (SET<<i))!=0) ? (index+=sprintf(chBufferTx_USART0+index, "1")) : (index+=sprintf(chBufferTx_USART0+index, "0"));
				}

				Transmitir_Buffer_USART0(chBufferTx_USART0, USART0_BUFFER_ZISE);
    207a:	68 ec       	ldi	r22, 0xC8	; 200
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	83 e5       	ldi	r24, 0x53	; 83
    2080:	93 e0       	ldi	r25, 0x03	; 3
    2082:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			}
			if (chPrintSalidas == SI){
    2086:	80 91 44 04 	lds	r24, 0x0444
    208a:	81 30       	cpi	r24, 0x01	; 1
    208c:	09 f0       	breq	.+2      	; 0x2090 <Leer_Entradas+0x414>
    208e:	7f c0       	rjmp	.+254    	; 0x218e <Leer_Entradas+0x512>
				int index = sprintf(chBufferTx_USART0, "\r%S", (wchar_t*)MSG_Estado_Salidas);
    2090:	8f eb       	ldi	r24, 0xBF	; 191
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	89 2f       	mov	r24, r25
    2096:	8f 93       	push	r24
    2098:	8f eb       	ldi	r24, 0xBF	; 191
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	8f 93       	push	r24
    209e:	80 e4       	ldi	r24, 0x40	; 64
    20a0:	91 e0       	ldi	r25, 0x01	; 1
    20a2:	89 2f       	mov	r24, r25
    20a4:	8f 93       	push	r24
    20a6:	80 e4       	ldi	r24, 0x40	; 64
    20a8:	91 e0       	ldi	r25, 0x01	; 1
    20aa:	8f 93       	push	r24
    20ac:	83 e5       	ldi	r24, 0x53	; 83
    20ae:	93 e0       	ldi	r25, 0x03	; 3
    20b0:	89 2f       	mov	r24, r25
    20b2:	8f 93       	push	r24
    20b4:	83 e5       	ldi	r24, 0x53	; 83
    20b6:	93 e0       	ldi	r25, 0x03	; 3
    20b8:	8f 93       	push	r24
    20ba:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	9a 87       	std	Y+10, r25	; 0x0a
    20cc:	89 87       	std	Y+9, r24	; 0x09
				(SALIDA_DIG_PORT & (SET<<SALIDA_DIG_1)) ? (index+=sprintf(chBufferTx_USART0+index, "1")) : (index+=sprintf(chBufferTx_USART0+index, "0"));
    20ce:	83 e2       	ldi	r24, 0x23	; 35
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	fc 01       	movw	r30, r24
    20d4:	80 81       	ld	r24, Z
    20d6:	88 2f       	mov	r24, r24
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	80 72       	andi	r24, 0x20	; 32
    20dc:	99 27       	eor	r25, r25
    20de:	89 2b       	or	r24, r25
    20e0:	91 f0       	breq	.+36     	; 0x2106 <Leer_Entradas+0x48a>
    20e2:	89 85       	ldd	r24, Y+9	; 0x09
    20e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e6:	8d 5a       	subi	r24, 0xAD	; 173
    20e8:	9c 4f       	sbci	r25, 0xFC	; 252
    20ea:	21 e3       	ldi	r18, 0x31	; 49
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	fc 01       	movw	r30, r24
    20f0:	31 83       	std	Z+1, r19	; 0x01
    20f2:	20 83       	st	Z, r18
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	29 85       	ldd	r18, Y+9	; 0x09
    20fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    20fc:	82 0f       	add	r24, r18
    20fe:	93 1f       	adc	r25, r19
    2100:	9a 87       	std	Y+10, r25	; 0x0a
    2102:	89 87       	std	Y+9, r24	; 0x09
    2104:	11 c0       	rjmp	.+34     	; 0x2128 <Leer_Entradas+0x4ac>
    2106:	89 85       	ldd	r24, Y+9	; 0x09
    2108:	9a 85       	ldd	r25, Y+10	; 0x0a
    210a:	8d 5a       	subi	r24, 0xAD	; 173
    210c:	9c 4f       	sbci	r25, 0xFC	; 252
    210e:	20 e3       	ldi	r18, 0x30	; 48
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	fc 01       	movw	r30, r24
    2114:	31 83       	std	Z+1, r19	; 0x01
    2116:	20 83       	st	Z, r18
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	29 85       	ldd	r18, Y+9	; 0x09
    211e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2120:	82 0f       	add	r24, r18
    2122:	93 1f       	adc	r25, r19
    2124:	9a 87       	std	Y+10, r25	; 0x0a
    2126:	89 87       	std	Y+9, r24	; 0x09
				(SALIDA_DIG_PORT & (SET<<SALIDA_DIG_2)) ? (index+=sprintf(chBufferTx_USART0+index, "1")) : (index+=sprintf(chBufferTx_USART0+index, "0"));
    2128:	83 e2       	ldi	r24, 0x23	; 35
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	fc 01       	movw	r30, r24
    212e:	80 81       	ld	r24, Z
    2130:	88 2f       	mov	r24, r24
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	80 71       	andi	r24, 0x10	; 16
    2136:	99 27       	eor	r25, r25
    2138:	89 2b       	or	r24, r25
    213a:	91 f0       	breq	.+36     	; 0x2160 <Leer_Entradas+0x4e4>
    213c:	89 85       	ldd	r24, Y+9	; 0x09
    213e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2140:	8d 5a       	subi	r24, 0xAD	; 173
    2142:	9c 4f       	sbci	r25, 0xFC	; 252
    2144:	21 e3       	ldi	r18, 0x31	; 49
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	fc 01       	movw	r30, r24
    214a:	31 83       	std	Z+1, r19	; 0x01
    214c:	20 83       	st	Z, r18
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	29 85       	ldd	r18, Y+9	; 0x09
    2154:	3a 85       	ldd	r19, Y+10	; 0x0a
    2156:	82 0f       	add	r24, r18
    2158:	93 1f       	adc	r25, r19
    215a:	9a 87       	std	Y+10, r25	; 0x0a
    215c:	89 87       	std	Y+9, r24	; 0x09
    215e:	11 c0       	rjmp	.+34     	; 0x2182 <Leer_Entradas+0x506>
    2160:	89 85       	ldd	r24, Y+9	; 0x09
    2162:	9a 85       	ldd	r25, Y+10	; 0x0a
    2164:	8d 5a       	subi	r24, 0xAD	; 173
    2166:	9c 4f       	sbci	r25, 0xFC	; 252
    2168:	20 e3       	ldi	r18, 0x30	; 48
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	fc 01       	movw	r30, r24
    216e:	31 83       	std	Z+1, r19	; 0x01
    2170:	20 83       	st	Z, r18
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	29 85       	ldd	r18, Y+9	; 0x09
    2178:	3a 85       	ldd	r19, Y+10	; 0x0a
    217a:	82 0f       	add	r24, r18
    217c:	93 1f       	adc	r25, r19
    217e:	9a 87       	std	Y+10, r25	; 0x0a
    2180:	89 87       	std	Y+9, r24	; 0x09

				Transmitir_Buffer_USART0(chBufferTx_USART0, USART0_BUFFER_ZISE);
    2182:	68 ec       	ldi	r22, 0xC8	; 200
    2184:	70 e0       	ldi	r23, 0x00	; 0
    2186:	83 e5       	ldi	r24, 0x53	; 83
    2188:	93 e0       	ldi	r25, 0x03	; 3
    218a:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			}

			uchEstadoLeerEntradas = BARRER_ENTRADAS;
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	80 93 38 04 	sts	0x0438, r24
			break;
    2194:	03 c0       	rjmp	.+6      	; 0x219c <Leer_Entradas+0x520>


		default:
			Inicio_Entradas();
    2196:	0e 94 d7 10 	call	0x21ae	; 0x21ae <Inicio_Entradas>
			break;
    219a:	00 00       	nop
	}
}
    219c:	2a 96       	adiw	r28, 0x0a	; 10
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	df 91       	pop	r29
    21aa:	cf 91       	pop	r28
    21ac:	08 95       	ret

000021ae <Inicio_Entradas>:

/************************************************************************
* Funcion de inicio de la maquina de estados de lectura de teclado
************************************************************************/
void Inicio_Entradas (void){
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <Inicio_Entradas+0x6>
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
	uEstadoEntradasInstantaneas = 0;
    21b8:	10 92 40 04 	sts	0x0440, r1
    21bc:	10 92 3f 04 	sts	0x043F, r1
	uEstadoEntradas = 0;
    21c0:	10 92 3e 04 	sts	0x043E, r1
    21c4:	10 92 3d 04 	sts	0x043D, r1
	uFlagEntradasActivadas = 0;
    21c8:	10 92 43 04 	sts	0x0443, r1
    21cc:	10 92 42 04 	sts	0x0442, r1
	uFlagEntradasLiberadas = 0;
    21d0:	10 92 3a 04 	sts	0x043A, r1
    21d4:	10 92 39 04 	sts	0x0439, r1
	uTiempoIntegracionEntradas = 0;
    21d8:	10 92 3c 04 	sts	0x043C, r1
    21dc:	10 92 3b 04 	sts	0x043B, r1

	chPrintEntradas = NO;
    21e0:	10 92 41 04 	sts	0x0441, r1
	chPrintSalidas = NO;
    21e4:	10 92 44 04 	sts	0x0444, r1

	for(int i=0; i<CANTIDAD_ENTRADAS; i++)
    21e8:	1a 82       	std	Y+2, r1	; 0x02
    21ea:	19 82       	std	Y+1, r1	; 0x01
    21ec:	0e c0       	rjmp	.+28     	; 0x220a <Inicio_Entradas+0x5c>
		uValorIntegracionEntradas[i] = 0;
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	9a 81       	ldd	r25, Y+2	; 0x02
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	8e 5c       	subi	r24, 0xCE	; 206
    21f8:	9b 4f       	sbci	r25, 0xFB	; 251
    21fa:	fc 01       	movw	r30, r24
    21fc:	11 82       	std	Z+1, r1	; 0x01
    21fe:	10 82       	st	Z, r1
	uTiempoIntegracionEntradas = 0;

	chPrintEntradas = NO;
	chPrintSalidas = NO;

	for(int i=0; i<CANTIDAD_ENTRADAS; i++)
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	9a 81       	ldd	r25, Y+2	; 0x02
    2204:	01 96       	adiw	r24, 0x01	; 1
    2206:	9a 83       	std	Y+2, r25	; 0x02
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	9a 81       	ldd	r25, Y+2	; 0x02
    220e:	03 97       	sbiw	r24, 0x03	; 3
    2210:	74 f3       	brlt	.-36     	; 0x21ee <Inicio_Entradas+0x40>
		uValorIntegracionEntradas[i] = 0;

	uchEstadoLeerEntradas = BARRER_ENTRADAS;
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	80 93 38 04 	sts	0x0438, r24
}
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	08 95       	ret

00002222 <Actualizar_Display>:
const char Texto_Vacio[]			PROGMEM = "                \0";

/*****************************************************************************
* Maquina de estados
*****************************************************************************/
void Actualizar_Display (void) {
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	28 97       	sbiw	r28, 0x08	; 8
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	cd bf       	out	0x3d, r28	; 61
	switch (uchEstadoDisplay) {
    223a:	80 91 5d 04 	lds	r24, 0x045D
    223e:	88 2f       	mov	r24, r24
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	81 30       	cpi	r24, 0x01	; 1
    2244:	91 05       	cpc	r25, r1
    2246:	d1 f0       	breq	.+52     	; 0x227c <Actualizar_Display+0x5a>
    2248:	82 30       	cpi	r24, 0x02	; 2
    224a:	91 05       	cpc	r25, r1
    224c:	09 f4       	brne	.+2      	; 0x2250 <Actualizar_Display+0x2e>
    224e:	f6 c1       	rjmp	.+1004   	; 0x263c <Actualizar_Display+0x41a>
    2250:	89 2b       	or	r24, r25
    2252:	09 f0       	breq	.+2      	; 0x2256 <Actualizar_Display+0x34>
    2254:	d8 c3       	rjmp	.+1968   	; 0x2a06 <Actualizar_Display+0x7e4>

		case DISPLAY_STANDBY:
			if ((uContDisplay == 0) && (chDisplayInstalado == SI)){
    2256:	80 91 47 04 	lds	r24, 0x0447
    225a:	90 91 48 04 	lds	r25, 0x0448
    225e:	89 2b       	or	r24, r25
    2260:	61 f4       	brne	.+24     	; 0x227a <Actualizar_Display+0x58>
    2262:	80 91 5c 04 	lds	r24, 0x045C
    2266:	81 30       	cpi	r24, 0x01	; 1
    2268:	41 f4       	brne	.+16     	; 0x227a <Actualizar_Display+0x58>
				Transmitir_Buffer_USART0_P (PSTR("\n\rActualiza\n\r\0"));
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	91 e0       	ldi	r25, 0x01	; 1
    226e:	0e 94 85 0b 	call	0x170a	; 0x170a <Transmitir_Buffer_USART0_P>

				uchEstadoDisplay = DISPLAY_ACTUALIZAR_L1;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	80 93 5d 04 	sts	0x045D, r24
			}
			break;
    2278:	c9 c3       	rjmp	.+1938   	; 0x2a0c <Actualizar_Display+0x7ea>
    227a:	c8 c3       	rjmp	.+1936   	; 0x2a0c <Actualizar_Display+0x7ea>


		case DISPLAY_ACTUALIZAR_L1:
			// Actualización display
			if (((OnOffAlarmas&(SET<<ALARMA_1)) != 0) && (uContDisplayOFF != 0)){
    227c:	80 91 27 04 	lds	r24, 0x0427
    2280:	90 91 28 04 	lds	r25, 0x0428
    2284:	81 70       	andi	r24, 0x01	; 1
    2286:	99 27       	eor	r25, r25
    2288:	89 2b       	or	r24, r25
    228a:	21 f1       	breq	.+72     	; 0x22d4 <Actualizar_Display+0xb2>
    228c:	80 91 60 04 	lds	r24, 0x0460
    2290:	90 91 61 04 	lds	r25, 0x0461
    2294:	89 2b       	or	r24, r25
    2296:	f1 f0       	breq	.+60     	; 0x22d4 <Actualizar_Display+0xb2>
				sprintf(chBuffer, "%S", (wchar_t*)Texto_Vacio);
    2298:	80 ef       	ldi	r24, 0xF0	; 240
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	89 2f       	mov	r24, r25
    229e:	8f 93       	push	r24
    22a0:	80 ef       	ldi	r24, 0xF0	; 240
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	8f 93       	push	r24
    22a6:	87 e4       	ldi	r24, 0x47	; 71
    22a8:	91 e0       	ldi	r25, 0x01	; 1
    22aa:	89 2f       	mov	r24, r25
    22ac:	8f 93       	push	r24
    22ae:	87 e4       	ldi	r24, 0x47	; 71
    22b0:	91 e0       	ldi	r25, 0x01	; 1
    22b2:	8f 93       	push	r24
    22b4:	8b e4       	ldi	r24, 0x4B	; 75
    22b6:	94 e0       	ldi	r25, 0x04	; 4
    22b8:	89 2f       	mov	r24, r25
    22ba:	8f 93       	push	r24
    22bc:	8b e4       	ldi	r24, 0x4B	; 75
    22be:	94 e0       	ldi	r25, 0x04	; 4
    22c0:	8f 93       	push	r24
    22c2:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	a2 c1       	rjmp	.+836    	; 0x2618 <Actualizar_Display+0x3f6>
			}
			else {
				if (uValorADCcond1 >1020){
    22d4:	80 91 f3 04 	lds	r24, 0x04F3
    22d8:	90 91 f4 04 	lds	r25, 0x04F4
    22dc:	8d 3f       	cpi	r24, 0xFD	; 253
    22de:	93 40       	sbci	r25, 0x03	; 3
    22e0:	80 f0       	brcs	.+32     	; 0x2302 <Actualizar_Display+0xe0>
					indexDisplay = sprintf(chBuffer, "CH1> ");
    22e2:	86 e0       	ldi	r24, 0x06	; 6
    22e4:	ea e4       	ldi	r30, 0x4A	; 74
    22e6:	f1 e0       	ldi	r31, 0x01	; 1
    22e8:	ab e4       	ldi	r26, 0x4B	; 75
    22ea:	b4 e0       	ldi	r27, 0x04	; 4
    22ec:	01 90       	ld	r0, Z+
    22ee:	0d 92       	st	X+, r0
    22f0:	8a 95       	dec	r24
    22f2:	e1 f7       	brne	.-8      	; 0x22ec <Actualizar_Display+0xca>
    22f4:	85 e0       	ldi	r24, 0x05	; 5
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	90 93 5f 04 	sts	0x045F, r25
    22fc:	80 93 5e 04 	sts	0x045E, r24
    2300:	25 c0       	rjmp	.+74     	; 0x234c <Actualizar_Display+0x12a>
				}
				else if (uValorADCcond1 < 2){
    2302:	80 91 f3 04 	lds	r24, 0x04F3
    2306:	90 91 f4 04 	lds	r25, 0x04F4
    230a:	02 97       	sbiw	r24, 0x02	; 2
    230c:	80 f4       	brcc	.+32     	; 0x232e <Actualizar_Display+0x10c>
					indexDisplay = sprintf(chBuffer, "CH1< ");
    230e:	86 e0       	ldi	r24, 0x06	; 6
    2310:	e0 e5       	ldi	r30, 0x50	; 80
    2312:	f1 e0       	ldi	r31, 0x01	; 1
    2314:	ab e4       	ldi	r26, 0x4B	; 75
    2316:	b4 e0       	ldi	r27, 0x04	; 4
    2318:	01 90       	ld	r0, Z+
    231a:	0d 92       	st	X+, r0
    231c:	8a 95       	dec	r24
    231e:	e1 f7       	brne	.-8      	; 0x2318 <Actualizar_Display+0xf6>
    2320:	85 e0       	ldi	r24, 0x05	; 5
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	90 93 5f 04 	sts	0x045F, r25
    2328:	80 93 5e 04 	sts	0x045E, r24
    232c:	0f c0       	rjmp	.+30     	; 0x234c <Actualizar_Display+0x12a>
				}
				else{
					indexDisplay = sprintf(chBuffer, "CH1= ");
    232e:	86 e0       	ldi	r24, 0x06	; 6
    2330:	e6 e5       	ldi	r30, 0x56	; 86
    2332:	f1 e0       	ldi	r31, 0x01	; 1
    2334:	ab e4       	ldi	r26, 0x4B	; 75
    2336:	b4 e0       	ldi	r27, 0x04	; 4
    2338:	01 90       	ld	r0, Z+
    233a:	0d 92       	st	X+, r0
    233c:	8a 95       	dec	r24
    233e:	e1 f7       	brne	.-8      	; 0x2338 <Actualizar_Display+0x116>
    2340:	85 e0       	ldi	r24, 0x05	; 5
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	90 93 5f 04 	sts	0x045F, r25
    2348:	80 93 5e 04 	sts	0x045E, r24
				}

				float flValorDisplay = flCond1valoruS;
    234c:	80 91 11 05 	lds	r24, 0x0511
    2350:	90 91 12 05 	lds	r25, 0x0512
    2354:	a0 91 13 05 	lds	r26, 0x0513
    2358:	b0 91 14 05 	lds	r27, 0x0514
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	9a 83       	std	Y+2, r25	; 0x02
    2360:	ab 83       	std	Y+3, r26	; 0x03
    2362:	bc 83       	std	Y+4, r27	; 0x04

				if (flValorDisplay < cond1MinUs) {
    2364:	80 91 ff 04 	lds	r24, 0x04FF
    2368:	90 91 00 05 	lds	r25, 0x0500
    236c:	09 2e       	mov	r0, r25
    236e:	00 0c       	add	r0, r0
    2370:	aa 0b       	sbc	r26, r26
    2372:	bb 0b       	sbc	r27, r27
    2374:	bc 01       	movw	r22, r24
    2376:	cd 01       	movw	r24, r26
    2378:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	29 81       	ldd	r18, Y+1	; 0x01
    2382:	3a 81       	ldd	r19, Y+2	; 0x02
    2384:	4b 81       	ldd	r20, Y+3	; 0x03
    2386:	5c 81       	ldd	r21, Y+4	; 0x04
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    2390:	18 16       	cp	r1, r24
    2392:	14 f5       	brge	.+68     	; 0x23d8 <Actualizar_Display+0x1b6>
					indexDisplay = sprintf(chBuffer, "CH1< ");
    2394:	86 e0       	ldi	r24, 0x06	; 6
    2396:	e0 e5       	ldi	r30, 0x50	; 80
    2398:	f1 e0       	ldi	r31, 0x01	; 1
    239a:	ab e4       	ldi	r26, 0x4B	; 75
    239c:	b4 e0       	ldi	r27, 0x04	; 4
    239e:	01 90       	ld	r0, Z+
    23a0:	0d 92       	st	X+, r0
    23a2:	8a 95       	dec	r24
    23a4:	e1 f7       	brne	.-8      	; 0x239e <Actualizar_Display+0x17c>
    23a6:	85 e0       	ldi	r24, 0x05	; 5
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	90 93 5f 04 	sts	0x045F, r25
    23ae:	80 93 5e 04 	sts	0x045E, r24
					flValorDisplay = (float)cond1MinUs;
    23b2:	80 91 ff 04 	lds	r24, 0x04FF
    23b6:	90 91 00 05 	lds	r25, 0x0500
    23ba:	09 2e       	mov	r0, r25
    23bc:	00 0c       	add	r0, r0
    23be:	aa 0b       	sbc	r26, r26
    23c0:	bb 0b       	sbc	r27, r27
    23c2:	bc 01       	movw	r22, r24
    23c4:	cd 01       	movw	r24, r26
    23c6:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	ab 83       	std	Y+3, r26	; 0x03
    23d4:	bc 83       	std	Y+4, r27	; 0x04
    23d6:	39 c0       	rjmp	.+114    	; 0x244a <Actualizar_Display+0x228>
				}
				else if (flValorDisplay > cond1MaxUs) {
    23d8:	80 91 e7 04 	lds	r24, 0x04E7
    23dc:	90 91 e8 04 	lds	r25, 0x04E8
    23e0:	09 2e       	mov	r0, r25
    23e2:	00 0c       	add	r0, r0
    23e4:	aa 0b       	sbc	r26, r26
    23e6:	bb 0b       	sbc	r27, r27
    23e8:	bc 01       	movw	r22, r24
    23ea:	cd 01       	movw	r24, r26
    23ec:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	29 81       	ldd	r18, Y+1	; 0x01
    23f6:	3a 81       	ldd	r19, Y+2	; 0x02
    23f8:	4b 81       	ldd	r20, Y+3	; 0x03
    23fa:	5c 81       	ldd	r21, Y+4	; 0x04
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    2404:	88 23       	and	r24, r24
    2406:	0c f5       	brge	.+66     	; 0x244a <Actualizar_Display+0x228>
					indexDisplay = sprintf(chBuffer, "CH1> ");
    2408:	86 e0       	ldi	r24, 0x06	; 6
    240a:	ea e4       	ldi	r30, 0x4A	; 74
    240c:	f1 e0       	ldi	r31, 0x01	; 1
    240e:	ab e4       	ldi	r26, 0x4B	; 75
    2410:	b4 e0       	ldi	r27, 0x04	; 4
    2412:	01 90       	ld	r0, Z+
    2414:	0d 92       	st	X+, r0
    2416:	8a 95       	dec	r24
    2418:	e1 f7       	brne	.-8      	; 0x2412 <Actualizar_Display+0x1f0>
    241a:	85 e0       	ldi	r24, 0x05	; 5
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	90 93 5f 04 	sts	0x045F, r25
    2422:	80 93 5e 04 	sts	0x045E, r24
					flValorDisplay = (float)cond1MaxUs;
    2426:	80 91 e7 04 	lds	r24, 0x04E7
    242a:	90 91 e8 04 	lds	r25, 0x04E8
    242e:	09 2e       	mov	r0, r25
    2430:	00 0c       	add	r0, r0
    2432:	aa 0b       	sbc	r26, r26
    2434:	bb 0b       	sbc	r27, r27
    2436:	bc 01       	movw	r22, r24
    2438:	cd 01       	movw	r24, r26
    243a:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	9a 83       	std	Y+2, r25	; 0x02
    2446:	ab 83       	std	Y+3, r26	; 0x03
    2448:	bc 83       	std	Y+4, r27	; 0x04
				}

				if ((uRangoCond1 == COND_20_2500_G)||(uRangoCond1 == COND_20_2500_C)||(uRangoCond1 == COND_2_200_G)||(uRangoCond1 == COND_2_200_C)){
    244a:	80 91 e9 04 	lds	r24, 0x04E9
    244e:	90 91 ea 04 	lds	r25, 0x04EA
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	99 f0       	breq	.+38     	; 0x247c <Actualizar_Display+0x25a>
    2456:	80 91 e9 04 	lds	r24, 0x04E9
    245a:	90 91 ea 04 	lds	r25, 0x04EA
    245e:	04 97       	sbiw	r24, 0x04	; 4
    2460:	69 f0       	breq	.+26     	; 0x247c <Actualizar_Display+0x25a>
    2462:	80 91 e9 04 	lds	r24, 0x04E9
    2466:	90 91 ea 04 	lds	r25, 0x04EA
    246a:	03 97       	sbiw	r24, 0x03	; 3
    246c:	39 f0       	breq	.+14     	; 0x247c <Actualizar_Display+0x25a>
    246e:	80 91 e9 04 	lds	r24, 0x04E9
    2472:	90 91 ea 04 	lds	r25, 0x04EA
    2476:	06 97       	sbiw	r24, 0x06	; 6
    2478:	09 f0       	breq	.+2      	; 0x247c <Actualizar_Display+0x25a>
    247a:	5c c0       	rjmp	.+184    	; 0x2534 <Actualizar_Display+0x312>
					if (flValorDisplay < 0.1) {
    247c:	2d ec       	ldi	r18, 0xCD	; 205
    247e:	3c ec       	ldi	r19, 0xCC	; 204
    2480:	4c ec       	ldi	r20, 0xCC	; 204
    2482:	5d e3       	ldi	r21, 0x3D	; 61
    2484:	69 81       	ldd	r22, Y+1	; 0x01
    2486:	7a 81       	ldd	r23, Y+2	; 0x02
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	9c 81       	ldd	r25, Y+4	; 0x04
    248c:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    2490:	88 23       	and	r24, r24
    2492:	9c f4       	brge	.+38     	; 0x24ba <Actualizar_Display+0x298>
						indexDisplay = sprintf(chBuffer, "CH1= ");
    2494:	86 e0       	ldi	r24, 0x06	; 6
    2496:	e6 e5       	ldi	r30, 0x56	; 86
    2498:	f1 e0       	ldi	r31, 0x01	; 1
    249a:	ab e4       	ldi	r26, 0x4B	; 75
    249c:	b4 e0       	ldi	r27, 0x04	; 4
    249e:	01 90       	ld	r0, Z+
    24a0:	0d 92       	st	X+, r0
    24a2:	8a 95       	dec	r24
    24a4:	e1 f7       	brne	.-8      	; 0x249e <Actualizar_Display+0x27c>
    24a6:	85 e0       	ldi	r24, 0x05	; 5
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	90 93 5f 04 	sts	0x045F, r25
    24ae:	80 93 5e 04 	sts	0x045E, r24
						flValorDisplay = 0.0;
    24b2:	19 82       	std	Y+1, r1	; 0x01
    24b4:	1a 82       	std	Y+2, r1	; 0x02
    24b6:	1b 82       	std	Y+3, r1	; 0x03
    24b8:	1c 82       	std	Y+4, r1	; 0x04
					}
					dtostrf(flValorDisplay, 6, 1, chBuffer+indexDisplay);
    24ba:	80 91 5e 04 	lds	r24, 0x045E
    24be:	90 91 5f 04 	lds	r25, 0x045F
    24c2:	9c 01       	movw	r18, r24
    24c4:	25 5b       	subi	r18, 0xB5	; 181
    24c6:	3b 4f       	sbci	r19, 0xFB	; 251
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	9a 81       	ldd	r25, Y+2	; 0x02
    24cc:	ab 81       	ldd	r26, Y+3	; 0x03
    24ce:	bc 81       	ldd	r27, Y+4	; 0x04
    24d0:	89 01       	movw	r16, r18
    24d2:	21 e0       	ldi	r18, 0x01	; 1
    24d4:	46 e0       	ldi	r20, 0x06	; 6
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					indexDisplay += 6;
    24de:	80 91 5e 04 	lds	r24, 0x045E
    24e2:	90 91 5f 04 	lds	r25, 0x045F
    24e6:	06 96       	adiw	r24, 0x06	; 6
    24e8:	90 93 5f 04 	sts	0x045F, r25
    24ec:	80 93 5e 04 	sts	0x045E, r24
					indexDisplay += sprintf(chBuffer+indexDisplay, "%%0%%1/cm");
    24f0:	80 91 5e 04 	lds	r24, 0x045E
    24f4:	90 91 5f 04 	lds	r25, 0x045F
    24f8:	85 5b       	subi	r24, 0xB5	; 181
    24fa:	9b 4f       	sbci	r25, 0xFB	; 251
    24fc:	2c e5       	ldi	r18, 0x5C	; 92
    24fe:	31 e0       	ldi	r19, 0x01	; 1
    2500:	23 2f       	mov	r18, r19
    2502:	2f 93       	push	r18
    2504:	2c e5       	ldi	r18, 0x5C	; 92
    2506:	31 e0       	ldi	r19, 0x01	; 1
    2508:	2f 93       	push	r18
    250a:	29 2f       	mov	r18, r25
    250c:	2f 93       	push	r18
    250e:	8f 93       	push	r24
    2510:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	9c 01       	movw	r18, r24
    251e:	80 91 5e 04 	lds	r24, 0x045E
    2522:	90 91 5f 04 	lds	r25, 0x045F
    2526:	82 0f       	add	r24, r18
    2528:	93 1f       	adc	r25, r19
    252a:	90 93 5f 04 	sts	0x045F, r25
    252e:	80 93 5e 04 	sts	0x045E, r24
    2532:	72 c0       	rjmp	.+228    	; 0x2618 <Actualizar_Display+0x3f6>
				}
				else if ((uRangoCond1 == COND_0_20_G)||(uRangoCond1 == COND_0_20_C)){
    2534:	80 91 e9 04 	lds	r24, 0x04E9
    2538:	90 91 ea 04 	lds	r25, 0x04EA
    253c:	02 97       	sbiw	r24, 0x02	; 2
    253e:	39 f0       	breq	.+14     	; 0x254e <Actualizar_Display+0x32c>
    2540:	80 91 e9 04 	lds	r24, 0x04E9
    2544:	90 91 ea 04 	lds	r25, 0x04EA
    2548:	05 97       	sbiw	r24, 0x05	; 5
    254a:	09 f0       	breq	.+2      	; 0x254e <Actualizar_Display+0x32c>
    254c:	5c c0       	rjmp	.+184    	; 0x2606 <Actualizar_Display+0x3e4>
					if (flValorDisplay < 0.01) {
    254e:	2a e0       	ldi	r18, 0x0A	; 10
    2550:	37 ed       	ldi	r19, 0xD7	; 215
    2552:	43 e2       	ldi	r20, 0x23	; 35
    2554:	5c e3       	ldi	r21, 0x3C	; 60
    2556:	69 81       	ldd	r22, Y+1	; 0x01
    2558:	7a 81       	ldd	r23, Y+2	; 0x02
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    2562:	88 23       	and	r24, r24
    2564:	9c f4       	brge	.+38     	; 0x258c <Actualizar_Display+0x36a>
						indexDisplay = sprintf(chBuffer, "CH1= ");
    2566:	86 e0       	ldi	r24, 0x06	; 6
    2568:	e6 e5       	ldi	r30, 0x56	; 86
    256a:	f1 e0       	ldi	r31, 0x01	; 1
    256c:	ab e4       	ldi	r26, 0x4B	; 75
    256e:	b4 e0       	ldi	r27, 0x04	; 4
    2570:	01 90       	ld	r0, Z+
    2572:	0d 92       	st	X+, r0
    2574:	8a 95       	dec	r24
    2576:	e1 f7       	brne	.-8      	; 0x2570 <Actualizar_Display+0x34e>
    2578:	85 e0       	ldi	r24, 0x05	; 5
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	90 93 5f 04 	sts	0x045F, r25
    2580:	80 93 5e 04 	sts	0x045E, r24
						flValorDisplay = 0.0;
    2584:	19 82       	std	Y+1, r1	; 0x01
    2586:	1a 82       	std	Y+2, r1	; 0x02
    2588:	1b 82       	std	Y+3, r1	; 0x03
    258a:	1c 82       	std	Y+4, r1	; 0x04
					}
					dtostrf(flValorDisplay, 6, 2, chBuffer+indexDisplay);
    258c:	80 91 5e 04 	lds	r24, 0x045E
    2590:	90 91 5f 04 	lds	r25, 0x045F
    2594:	9c 01       	movw	r18, r24
    2596:	25 5b       	subi	r18, 0xB5	; 181
    2598:	3b 4f       	sbci	r19, 0xFB	; 251
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	9a 81       	ldd	r25, Y+2	; 0x02
    259e:	ab 81       	ldd	r26, Y+3	; 0x03
    25a0:	bc 81       	ldd	r27, Y+4	; 0x04
    25a2:	89 01       	movw	r16, r18
    25a4:	22 e0       	ldi	r18, 0x02	; 2
    25a6:	46 e0       	ldi	r20, 0x06	; 6
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					indexDisplay += 6;
    25b0:	80 91 5e 04 	lds	r24, 0x045E
    25b4:	90 91 5f 04 	lds	r25, 0x045F
    25b8:	06 96       	adiw	r24, 0x06	; 6
    25ba:	90 93 5f 04 	sts	0x045F, r25
    25be:	80 93 5e 04 	sts	0x045E, r24
					indexDisplay += sprintf(chBuffer+indexDisplay, "%%0%%1/cm");
    25c2:	80 91 5e 04 	lds	r24, 0x045E
    25c6:	90 91 5f 04 	lds	r25, 0x045F
    25ca:	85 5b       	subi	r24, 0xB5	; 181
    25cc:	9b 4f       	sbci	r25, 0xFB	; 251
    25ce:	2c e5       	ldi	r18, 0x5C	; 92
    25d0:	31 e0       	ldi	r19, 0x01	; 1
    25d2:	23 2f       	mov	r18, r19
    25d4:	2f 93       	push	r18
    25d6:	2c e5       	ldi	r18, 0x5C	; 92
    25d8:	31 e0       	ldi	r19, 0x01	; 1
    25da:	2f 93       	push	r18
    25dc:	29 2f       	mov	r18, r25
    25de:	2f 93       	push	r18
    25e0:	8f 93       	push	r24
    25e2:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	9c 01       	movw	r18, r24
    25f0:	80 91 5e 04 	lds	r24, 0x045E
    25f4:	90 91 5f 04 	lds	r25, 0x045F
    25f8:	82 0f       	add	r24, r18
    25fa:	93 1f       	adc	r25, r19
    25fc:	90 93 5f 04 	sts	0x045F, r25
    2600:	80 93 5e 04 	sts	0x045E, r24
    2604:	09 c0       	rjmp	.+18     	; 0x2618 <Actualizar_Display+0x3f6>
				}
				else {
					sprintf(chBuffer, "CH1= ERROR RANGO");
    2606:	81 e1       	ldi	r24, 0x11	; 17
    2608:	e8 e7       	ldi	r30, 0x78	; 120
    260a:	f1 e0       	ldi	r31, 0x01	; 1
    260c:	ab e4       	ldi	r26, 0x4B	; 75
    260e:	b4 e0       	ldi	r27, 0x04	; 4
    2610:	01 90       	ld	r0, Z+
    2612:	0d 92       	st	X+, r0
    2614:	8a 95       	dec	r24
    2616:	e1 f7       	brne	.-8      	; 0x2610 <Actualizar_Display+0x3ee>
				}
			}
			Transmitir_Buffer_USART0 (chBuffer, DISPLAY_SIZE+1);
    2618:	61 e1       	ldi	r22, 0x11	; 17
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	8b e4       	ldi	r24, 0x4B	; 75
    261e:	94 e0       	ldi	r25, 0x04	; 4
    2620:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			LCDWriteStringXY(0,0,chBuffer);
    2624:	60 e0       	ldi	r22, 0x00	; 0
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	0e 94 d7 43 	call	0x87ae	; 0x87ae <LCDGotoXY>
    262c:	8b e4       	ldi	r24, 0x4B	; 75
    262e:	94 e0       	ldi	r25, 0x04	; 4
    2630:	0e 94 01 43 	call	0x8602	; 0x8602 <LCDWriteString>

			uchEstadoDisplay = DISPLAY_ACTUALIZAR_L2;
    2634:	82 e0       	ldi	r24, 0x02	; 2
    2636:	80 93 5d 04 	sts	0x045D, r24
			break;
    263a:	e8 c1       	rjmp	.+976    	; 0x2a0c <Actualizar_Display+0x7ea>


		case DISPLAY_ACTUALIZAR_L2:
			// Actualización display
			if (((OnOffAlarmas&(SET<<ALARMA_2)) != 0) && (uContDisplayOFF != 0)){
    263c:	80 91 27 04 	lds	r24, 0x0427
    2640:	90 91 28 04 	lds	r25, 0x0428
    2644:	82 70       	andi	r24, 0x02	; 2
    2646:	99 27       	eor	r25, r25
    2648:	89 2b       	or	r24, r25
    264a:	21 f1       	breq	.+72     	; 0x2694 <Actualizar_Display+0x472>
    264c:	80 91 60 04 	lds	r24, 0x0460
    2650:	90 91 61 04 	lds	r25, 0x0461
    2654:	89 2b       	or	r24, r25
    2656:	f1 f0       	breq	.+60     	; 0x2694 <Actualizar_Display+0x472>
				sprintf(chBuffer, "%S", (wchar_t*)Texto_Vacio);
    2658:	80 ef       	ldi	r24, 0xF0	; 240
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	89 2f       	mov	r24, r25
    265e:	8f 93       	push	r24
    2660:	80 ef       	ldi	r24, 0xF0	; 240
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	8f 93       	push	r24
    2666:	87 e4       	ldi	r24, 0x47	; 71
    2668:	91 e0       	ldi	r25, 0x01	; 1
    266a:	89 2f       	mov	r24, r25
    266c:	8f 93       	push	r24
    266e:	87 e4       	ldi	r24, 0x47	; 71
    2670:	91 e0       	ldi	r25, 0x01	; 1
    2672:	8f 93       	push	r24
    2674:	8b e4       	ldi	r24, 0x4B	; 75
    2676:	94 e0       	ldi	r25, 0x04	; 4
    2678:	89 2f       	mov	r24, r25
    267a:	8f 93       	push	r24
    267c:	8b e4       	ldi	r24, 0x4B	; 75
    267e:	94 e0       	ldi	r25, 0x04	; 4
    2680:	8f 93       	push	r24
    2682:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	a2 c1       	rjmp	.+836    	; 0x29d8 <Actualizar_Display+0x7b6>
			}
			else {
				if (uValorADCcond2 >1020){
    2694:	80 91 07 05 	lds	r24, 0x0507
    2698:	90 91 08 05 	lds	r25, 0x0508
    269c:	8d 3f       	cpi	r24, 0xFD	; 253
    269e:	93 40       	sbci	r25, 0x03	; 3
    26a0:	80 f0       	brcs	.+32     	; 0x26c2 <Actualizar_Display+0x4a0>
					indexDisplay = sprintf(chBuffer, "CH2> ");
    26a2:	86 e0       	ldi	r24, 0x06	; 6
    26a4:	e6 e6       	ldi	r30, 0x66	; 102
    26a6:	f1 e0       	ldi	r31, 0x01	; 1
    26a8:	ab e4       	ldi	r26, 0x4B	; 75
    26aa:	b4 e0       	ldi	r27, 0x04	; 4
    26ac:	01 90       	ld	r0, Z+
    26ae:	0d 92       	st	X+, r0
    26b0:	8a 95       	dec	r24
    26b2:	e1 f7       	brne	.-8      	; 0x26ac <Actualizar_Display+0x48a>
    26b4:	85 e0       	ldi	r24, 0x05	; 5
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	90 93 5f 04 	sts	0x045F, r25
    26bc:	80 93 5e 04 	sts	0x045E, r24
    26c0:	25 c0       	rjmp	.+74     	; 0x270c <Actualizar_Display+0x4ea>
				}
				else if (uValorADCcond2 < 2){
    26c2:	80 91 07 05 	lds	r24, 0x0507
    26c6:	90 91 08 05 	lds	r25, 0x0508
    26ca:	02 97       	sbiw	r24, 0x02	; 2
    26cc:	80 f4       	brcc	.+32     	; 0x26ee <Actualizar_Display+0x4cc>
					indexDisplay = sprintf(chBuffer, "CH2< ");
    26ce:	86 e0       	ldi	r24, 0x06	; 6
    26d0:	ec e6       	ldi	r30, 0x6C	; 108
    26d2:	f1 e0       	ldi	r31, 0x01	; 1
    26d4:	ab e4       	ldi	r26, 0x4B	; 75
    26d6:	b4 e0       	ldi	r27, 0x04	; 4
    26d8:	01 90       	ld	r0, Z+
    26da:	0d 92       	st	X+, r0
    26dc:	8a 95       	dec	r24
    26de:	e1 f7       	brne	.-8      	; 0x26d8 <Actualizar_Display+0x4b6>
    26e0:	85 e0       	ldi	r24, 0x05	; 5
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	90 93 5f 04 	sts	0x045F, r25
    26e8:	80 93 5e 04 	sts	0x045E, r24
    26ec:	0f c0       	rjmp	.+30     	; 0x270c <Actualizar_Display+0x4ea>
				}
				else{
					indexDisplay = sprintf(chBuffer, "CH2= ");
    26ee:	86 e0       	ldi	r24, 0x06	; 6
    26f0:	e2 e7       	ldi	r30, 0x72	; 114
    26f2:	f1 e0       	ldi	r31, 0x01	; 1
    26f4:	ab e4       	ldi	r26, 0x4B	; 75
    26f6:	b4 e0       	ldi	r27, 0x04	; 4
    26f8:	01 90       	ld	r0, Z+
    26fa:	0d 92       	st	X+, r0
    26fc:	8a 95       	dec	r24
    26fe:	e1 f7       	brne	.-8      	; 0x26f8 <Actualizar_Display+0x4d6>
    2700:	85 e0       	ldi	r24, 0x05	; 5
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	90 93 5f 04 	sts	0x045F, r25
    2708:	80 93 5e 04 	sts	0x045E, r24
				}

				float flValorDisplay = flCond2valoruS;
    270c:	80 91 ed 04 	lds	r24, 0x04ED
    2710:	90 91 ee 04 	lds	r25, 0x04EE
    2714:	a0 91 ef 04 	lds	r26, 0x04EF
    2718:	b0 91 f0 04 	lds	r27, 0x04F0
    271c:	8d 83       	std	Y+5, r24	; 0x05
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	af 83       	std	Y+7, r26	; 0x07
    2722:	b8 87       	std	Y+8, r27	; 0x08

				if (flValorDisplay < cond2MinUs) {
    2724:	80 91 15 05 	lds	r24, 0x0515
    2728:	90 91 16 05 	lds	r25, 0x0516
    272c:	09 2e       	mov	r0, r25
    272e:	00 0c       	add	r0, r0
    2730:	aa 0b       	sbc	r26, r26
    2732:	bb 0b       	sbc	r27, r27
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	2d 81       	ldd	r18, Y+5	; 0x05
    2742:	3e 81       	ldd	r19, Y+6	; 0x06
    2744:	4f 81       	ldd	r20, Y+7	; 0x07
    2746:	58 85       	ldd	r21, Y+8	; 0x08
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    2750:	18 16       	cp	r1, r24
    2752:	14 f5       	brge	.+68     	; 0x2798 <Actualizar_Display+0x576>
					indexDisplay = sprintf(chBuffer, "CH2< ");
    2754:	86 e0       	ldi	r24, 0x06	; 6
    2756:	ec e6       	ldi	r30, 0x6C	; 108
    2758:	f1 e0       	ldi	r31, 0x01	; 1
    275a:	ab e4       	ldi	r26, 0x4B	; 75
    275c:	b4 e0       	ldi	r27, 0x04	; 4
    275e:	01 90       	ld	r0, Z+
    2760:	0d 92       	st	X+, r0
    2762:	8a 95       	dec	r24
    2764:	e1 f7       	brne	.-8      	; 0x275e <Actualizar_Display+0x53c>
    2766:	85 e0       	ldi	r24, 0x05	; 5
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	90 93 5f 04 	sts	0x045F, r25
    276e:	80 93 5e 04 	sts	0x045E, r24
					flValorDisplay = (float)cond2MinUs;
    2772:	80 91 15 05 	lds	r24, 0x0515
    2776:	90 91 16 05 	lds	r25, 0x0516
    277a:	09 2e       	mov	r0, r25
    277c:	00 0c       	add	r0, r0
    277e:	aa 0b       	sbc	r26, r26
    2780:	bb 0b       	sbc	r27, r27
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	8d 83       	std	Y+5, r24	; 0x05
    2790:	9e 83       	std	Y+6, r25	; 0x06
    2792:	af 83       	std	Y+7, r26	; 0x07
    2794:	b8 87       	std	Y+8, r27	; 0x08
    2796:	39 c0       	rjmp	.+114    	; 0x280a <Actualizar_Display+0x5e8>
				}
				else if (flValorDisplay > cond2MaxUs) {
    2798:	80 91 1b 06 	lds	r24, 0x061B
    279c:	90 91 1c 06 	lds	r25, 0x061C
    27a0:	09 2e       	mov	r0, r25
    27a2:	00 0c       	add	r0, r0
    27a4:	aa 0b       	sbc	r26, r26
    27a6:	bb 0b       	sbc	r27, r27
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	2d 81       	ldd	r18, Y+5	; 0x05
    27b6:	3e 81       	ldd	r19, Y+6	; 0x06
    27b8:	4f 81       	ldd	r20, Y+7	; 0x07
    27ba:	58 85       	ldd	r21, Y+8	; 0x08
    27bc:	bc 01       	movw	r22, r24
    27be:	cd 01       	movw	r24, r26
    27c0:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    27c4:	88 23       	and	r24, r24
    27c6:	0c f5       	brge	.+66     	; 0x280a <Actualizar_Display+0x5e8>
					indexDisplay = sprintf(chBuffer, "CH2> ");
    27c8:	86 e0       	ldi	r24, 0x06	; 6
    27ca:	e6 e6       	ldi	r30, 0x66	; 102
    27cc:	f1 e0       	ldi	r31, 0x01	; 1
    27ce:	ab e4       	ldi	r26, 0x4B	; 75
    27d0:	b4 e0       	ldi	r27, 0x04	; 4
    27d2:	01 90       	ld	r0, Z+
    27d4:	0d 92       	st	X+, r0
    27d6:	8a 95       	dec	r24
    27d8:	e1 f7       	brne	.-8      	; 0x27d2 <Actualizar_Display+0x5b0>
    27da:	85 e0       	ldi	r24, 0x05	; 5
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	90 93 5f 04 	sts	0x045F, r25
    27e2:	80 93 5e 04 	sts	0x045E, r24
					flValorDisplay = (float)cond2MaxUs;
    27e6:	80 91 1b 06 	lds	r24, 0x061B
    27ea:	90 91 1c 06 	lds	r25, 0x061C
    27ee:	09 2e       	mov	r0, r25
    27f0:	00 0c       	add	r0, r0
    27f2:	aa 0b       	sbc	r26, r26
    27f4:	bb 0b       	sbc	r27, r27
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	8d 83       	std	Y+5, r24	; 0x05
    2804:	9e 83       	std	Y+6, r25	; 0x06
    2806:	af 83       	std	Y+7, r26	; 0x07
    2808:	b8 87       	std	Y+8, r27	; 0x08
				}

				if ((uRangoCond2 == COND_20_2500_G)||(uRangoCond2 == COND_20_2500_C)||(uRangoCond2 == COND_2_200_G)||(uRangoCond2 == COND_2_200_C)){
    280a:	80 91 1d 06 	lds	r24, 0x061D
    280e:	90 91 1e 06 	lds	r25, 0x061E
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	99 f0       	breq	.+38     	; 0x283c <Actualizar_Display+0x61a>
    2816:	80 91 1d 06 	lds	r24, 0x061D
    281a:	90 91 1e 06 	lds	r25, 0x061E
    281e:	04 97       	sbiw	r24, 0x04	; 4
    2820:	69 f0       	breq	.+26     	; 0x283c <Actualizar_Display+0x61a>
    2822:	80 91 1d 06 	lds	r24, 0x061D
    2826:	90 91 1e 06 	lds	r25, 0x061E
    282a:	03 97       	sbiw	r24, 0x03	; 3
    282c:	39 f0       	breq	.+14     	; 0x283c <Actualizar_Display+0x61a>
    282e:	80 91 1d 06 	lds	r24, 0x061D
    2832:	90 91 1e 06 	lds	r25, 0x061E
    2836:	06 97       	sbiw	r24, 0x06	; 6
    2838:	09 f0       	breq	.+2      	; 0x283c <Actualizar_Display+0x61a>
    283a:	5c c0       	rjmp	.+184    	; 0x28f4 <Actualizar_Display+0x6d2>
					if (flValorDisplay < 0.1) {
    283c:	2d ec       	ldi	r18, 0xCD	; 205
    283e:	3c ec       	ldi	r19, 0xCC	; 204
    2840:	4c ec       	ldi	r20, 0xCC	; 204
    2842:	5d e3       	ldi	r21, 0x3D	; 61
    2844:	6d 81       	ldd	r22, Y+5	; 0x05
    2846:	7e 81       	ldd	r23, Y+6	; 0x06
    2848:	8f 81       	ldd	r24, Y+7	; 0x07
    284a:	98 85       	ldd	r25, Y+8	; 0x08
    284c:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    2850:	88 23       	and	r24, r24
    2852:	9c f4       	brge	.+38     	; 0x287a <Actualizar_Display+0x658>
						indexDisplay = sprintf(chBuffer, "CH2= ");
    2854:	86 e0       	ldi	r24, 0x06	; 6
    2856:	e2 e7       	ldi	r30, 0x72	; 114
    2858:	f1 e0       	ldi	r31, 0x01	; 1
    285a:	ab e4       	ldi	r26, 0x4B	; 75
    285c:	b4 e0       	ldi	r27, 0x04	; 4
    285e:	01 90       	ld	r0, Z+
    2860:	0d 92       	st	X+, r0
    2862:	8a 95       	dec	r24
    2864:	e1 f7       	brne	.-8      	; 0x285e <Actualizar_Display+0x63c>
    2866:	85 e0       	ldi	r24, 0x05	; 5
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	90 93 5f 04 	sts	0x045F, r25
    286e:	80 93 5e 04 	sts	0x045E, r24
						flValorDisplay = 0.0;
    2872:	1d 82       	std	Y+5, r1	; 0x05
    2874:	1e 82       	std	Y+6, r1	; 0x06
    2876:	1f 82       	std	Y+7, r1	; 0x07
    2878:	18 86       	std	Y+8, r1	; 0x08
					}
					dtostrf(flValorDisplay, 6, 1, chBuffer+indexDisplay);
    287a:	80 91 5e 04 	lds	r24, 0x045E
    287e:	90 91 5f 04 	lds	r25, 0x045F
    2882:	9c 01       	movw	r18, r24
    2884:	25 5b       	subi	r18, 0xB5	; 181
    2886:	3b 4f       	sbci	r19, 0xFB	; 251
    2888:	8d 81       	ldd	r24, Y+5	; 0x05
    288a:	9e 81       	ldd	r25, Y+6	; 0x06
    288c:	af 81       	ldd	r26, Y+7	; 0x07
    288e:	b8 85       	ldd	r27, Y+8	; 0x08
    2890:	89 01       	movw	r16, r18
    2892:	21 e0       	ldi	r18, 0x01	; 1
    2894:	46 e0       	ldi	r20, 0x06	; 6
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					indexDisplay += 6;
    289e:	80 91 5e 04 	lds	r24, 0x045E
    28a2:	90 91 5f 04 	lds	r25, 0x045F
    28a6:	06 96       	adiw	r24, 0x06	; 6
    28a8:	90 93 5f 04 	sts	0x045F, r25
    28ac:	80 93 5e 04 	sts	0x045E, r24
					indexDisplay += sprintf(chBuffer+indexDisplay, "%%0%%1/cm");
    28b0:	80 91 5e 04 	lds	r24, 0x045E
    28b4:	90 91 5f 04 	lds	r25, 0x045F
    28b8:	85 5b       	subi	r24, 0xB5	; 181
    28ba:	9b 4f       	sbci	r25, 0xFB	; 251
    28bc:	2c e5       	ldi	r18, 0x5C	; 92
    28be:	31 e0       	ldi	r19, 0x01	; 1
    28c0:	23 2f       	mov	r18, r19
    28c2:	2f 93       	push	r18
    28c4:	2c e5       	ldi	r18, 0x5C	; 92
    28c6:	31 e0       	ldi	r19, 0x01	; 1
    28c8:	2f 93       	push	r18
    28ca:	29 2f       	mov	r18, r25
    28cc:	2f 93       	push	r18
    28ce:	8f 93       	push	r24
    28d0:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	9c 01       	movw	r18, r24
    28de:	80 91 5e 04 	lds	r24, 0x045E
    28e2:	90 91 5f 04 	lds	r25, 0x045F
    28e6:	82 0f       	add	r24, r18
    28e8:	93 1f       	adc	r25, r19
    28ea:	90 93 5f 04 	sts	0x045F, r25
    28ee:	80 93 5e 04 	sts	0x045E, r24
    28f2:	72 c0       	rjmp	.+228    	; 0x29d8 <Actualizar_Display+0x7b6>
				}
				else if ((uRangoCond2 == COND_0_20_G)||(uRangoCond2 == COND_0_20_C)){
    28f4:	80 91 1d 06 	lds	r24, 0x061D
    28f8:	90 91 1e 06 	lds	r25, 0x061E
    28fc:	02 97       	sbiw	r24, 0x02	; 2
    28fe:	39 f0       	breq	.+14     	; 0x290e <Actualizar_Display+0x6ec>
    2900:	80 91 1d 06 	lds	r24, 0x061D
    2904:	90 91 1e 06 	lds	r25, 0x061E
    2908:	05 97       	sbiw	r24, 0x05	; 5
    290a:	09 f0       	breq	.+2      	; 0x290e <Actualizar_Display+0x6ec>
    290c:	5c c0       	rjmp	.+184    	; 0x29c6 <Actualizar_Display+0x7a4>
					if (flValorDisplay < 0.01) {
    290e:	2a e0       	ldi	r18, 0x0A	; 10
    2910:	37 ed       	ldi	r19, 0xD7	; 215
    2912:	43 e2       	ldi	r20, 0x23	; 35
    2914:	5c e3       	ldi	r21, 0x3C	; 60
    2916:	6d 81       	ldd	r22, Y+5	; 0x05
    2918:	7e 81       	ldd	r23, Y+6	; 0x06
    291a:	8f 81       	ldd	r24, Y+7	; 0x07
    291c:	98 85       	ldd	r25, Y+8	; 0x08
    291e:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    2922:	88 23       	and	r24, r24
    2924:	9c f4       	brge	.+38     	; 0x294c <Actualizar_Display+0x72a>
						indexDisplay = sprintf(chBuffer, "CH2= ");
    2926:	86 e0       	ldi	r24, 0x06	; 6
    2928:	e2 e7       	ldi	r30, 0x72	; 114
    292a:	f1 e0       	ldi	r31, 0x01	; 1
    292c:	ab e4       	ldi	r26, 0x4B	; 75
    292e:	b4 e0       	ldi	r27, 0x04	; 4
    2930:	01 90       	ld	r0, Z+
    2932:	0d 92       	st	X+, r0
    2934:	8a 95       	dec	r24
    2936:	e1 f7       	brne	.-8      	; 0x2930 <Actualizar_Display+0x70e>
    2938:	85 e0       	ldi	r24, 0x05	; 5
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	90 93 5f 04 	sts	0x045F, r25
    2940:	80 93 5e 04 	sts	0x045E, r24
						flValorDisplay = 0.0;
    2944:	1d 82       	std	Y+5, r1	; 0x05
    2946:	1e 82       	std	Y+6, r1	; 0x06
    2948:	1f 82       	std	Y+7, r1	; 0x07
    294a:	18 86       	std	Y+8, r1	; 0x08
					}
					dtostrf(flValorDisplay, 6, 2, chBuffer+indexDisplay);
    294c:	80 91 5e 04 	lds	r24, 0x045E
    2950:	90 91 5f 04 	lds	r25, 0x045F
    2954:	9c 01       	movw	r18, r24
    2956:	25 5b       	subi	r18, 0xB5	; 181
    2958:	3b 4f       	sbci	r19, 0xFB	; 251
    295a:	8d 81       	ldd	r24, Y+5	; 0x05
    295c:	9e 81       	ldd	r25, Y+6	; 0x06
    295e:	af 81       	ldd	r26, Y+7	; 0x07
    2960:	b8 85       	ldd	r27, Y+8	; 0x08
    2962:	89 01       	movw	r16, r18
    2964:	22 e0       	ldi	r18, 0x02	; 2
    2966:	46 e0       	ldi	r20, 0x06	; 6
    2968:	bc 01       	movw	r22, r24
    296a:	cd 01       	movw	r24, r26
    296c:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					indexDisplay += 6;
    2970:	80 91 5e 04 	lds	r24, 0x045E
    2974:	90 91 5f 04 	lds	r25, 0x045F
    2978:	06 96       	adiw	r24, 0x06	; 6
    297a:	90 93 5f 04 	sts	0x045F, r25
    297e:	80 93 5e 04 	sts	0x045E, r24
					indexDisplay += sprintf(chBuffer+indexDisplay, "%%0%%1/cm");
    2982:	80 91 5e 04 	lds	r24, 0x045E
    2986:	90 91 5f 04 	lds	r25, 0x045F
    298a:	85 5b       	subi	r24, 0xB5	; 181
    298c:	9b 4f       	sbci	r25, 0xFB	; 251
    298e:	2c e5       	ldi	r18, 0x5C	; 92
    2990:	31 e0       	ldi	r19, 0x01	; 1
    2992:	23 2f       	mov	r18, r19
    2994:	2f 93       	push	r18
    2996:	2c e5       	ldi	r18, 0x5C	; 92
    2998:	31 e0       	ldi	r19, 0x01	; 1
    299a:	2f 93       	push	r18
    299c:	29 2f       	mov	r18, r25
    299e:	2f 93       	push	r18
    29a0:	8f 93       	push	r24
    29a2:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	9c 01       	movw	r18, r24
    29b0:	80 91 5e 04 	lds	r24, 0x045E
    29b4:	90 91 5f 04 	lds	r25, 0x045F
    29b8:	82 0f       	add	r24, r18
    29ba:	93 1f       	adc	r25, r19
    29bc:	90 93 5f 04 	sts	0x045F, r25
    29c0:	80 93 5e 04 	sts	0x045E, r24
    29c4:	09 c0       	rjmp	.+18     	; 0x29d8 <Actualizar_Display+0x7b6>
				}
				else {
					sprintf(chBuffer, "CH2= ERROR RANGO");
    29c6:	81 e1       	ldi	r24, 0x11	; 17
    29c8:	e9 e8       	ldi	r30, 0x89	; 137
    29ca:	f1 e0       	ldi	r31, 0x01	; 1
    29cc:	ab e4       	ldi	r26, 0x4B	; 75
    29ce:	b4 e0       	ldi	r27, 0x04	; 4
    29d0:	01 90       	ld	r0, Z+
    29d2:	0d 92       	st	X+, r0
    29d4:	8a 95       	dec	r24
    29d6:	e1 f7       	brne	.-8      	; 0x29d0 <Actualizar_Display+0x7ae>
				}
			}
			Transmitir_Buffer_USART0 (chBuffer, DISPLAY_SIZE+1);
    29d8:	61 e1       	ldi	r22, 0x11	; 17
    29da:	70 e0       	ldi	r23, 0x00	; 0
    29dc:	8b e4       	ldi	r24, 0x4B	; 75
    29de:	94 e0       	ldi	r25, 0x04	; 4
    29e0:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			LCDWriteStringXY(0,1,chBuffer);
    29e4:	61 e0       	ldi	r22, 0x01	; 1
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	0e 94 d7 43 	call	0x87ae	; 0x87ae <LCDGotoXY>
    29ec:	8b e4       	ldi	r24, 0x4B	; 75
    29ee:	94 e0       	ldi	r25, 0x04	; 4
    29f0:	0e 94 01 43 	call	0x8602	; 0x8602 <LCDWriteString>

			uContDisplay = PERIODO_ACTUALIZACION_DISPLAY;
    29f4:	88 ee       	ldi	r24, 0xE8	; 232
    29f6:	93 e0       	ldi	r25, 0x03	; 3
    29f8:	90 93 48 04 	sts	0x0448, r25
    29fc:	80 93 47 04 	sts	0x0447, r24

			uchEstadoDisplay = DISPLAY_STANDBY;
    2a00:	10 92 5d 04 	sts	0x045D, r1
			break;
    2a04:	03 c0       	rjmp	.+6      	; 0x2a0c <Actualizar_Display+0x7ea>


		default:
			Inicio_Display();
    2a06:	0e 94 11 15 	call	0x2a22	; 0x2a22 <Inicio_Display>
			break;
    2a0a:	00 00       	nop
	}
}
    2a0c:	28 96       	adiw	r28, 0x08	; 8
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	f8 94       	cli
    2a12:	de bf       	out	0x3e, r29	; 62
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	cd bf       	out	0x3d, r28	; 61
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	08 95       	ret

00002a22 <Inicio_Display>:


/*****************************************************************************
* Funcion de inicio
*****************************************************************************/
void Inicio_Display (void) {
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
	// detecto si hay display antes de hacer el inicio
	CLEAR_BIT(JUMPER_PORT, PIN_JUMPER_OUT);
    2a2a:	8b e3       	ldi	r24, 0x3B	; 59
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	2b e3       	ldi	r18, 0x3B	; 59
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	f9 01       	movw	r30, r18
    2a34:	20 81       	ld	r18, Z
    2a36:	2f 7e       	andi	r18, 0xEF	; 239
    2a38:	fc 01       	movw	r30, r24
    2a3a:	20 83       	st	Z, r18
	CLEAR_BIT(JUMPER_PORT, PIN_JUMPER_OUT);
    2a3c:	8b e3       	ldi	r24, 0x3B	; 59
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	2b e3       	ldi	r18, 0x3B	; 59
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	f9 01       	movw	r30, r18
    2a46:	20 81       	ld	r18, Z
    2a48:	2f 7e       	andi	r18, 0xEF	; 239
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	20 83       	st	Z, r18
	if ((JUMPER_PIN & (SET<<PIN_JUMPER_IN)) == 0) {	// Jumper == SI => Display == SI
    2a4e:	89 e3       	ldi	r24, 0x39	; 57
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	fc 01       	movw	r30, r24
    2a54:	80 81       	ld	r24, Z
    2a56:	88 2f       	mov	r24, r24
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	80 72       	andi	r24, 0x20	; 32
    2a5c:	99 27       	eor	r25, r25
    2a5e:	89 2b       	or	r24, r25
    2a60:	09 f0       	breq	.+2      	; 0x2a64 <Inicio_Display+0x42>
    2a62:	47 c0       	rjmp	.+142    	; 0x2af2 <Inicio_Display+0xd0>
		LCDInit(LS_NONE);
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	0e 94 88 3d 	call	0x7b10	; 0x7b10 <LCDInit>
		sprintf(chBuffer, "%S", (wchar_t*)Texto_Vacio);
    2a6a:	80 ef       	ldi	r24, 0xF0	; 240
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	89 2f       	mov	r24, r25
    2a70:	8f 93       	push	r24
    2a72:	80 ef       	ldi	r24, 0xF0	; 240
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	8f 93       	push	r24
    2a78:	87 e4       	ldi	r24, 0x47	; 71
    2a7a:	91 e0       	ldi	r25, 0x01	; 1
    2a7c:	89 2f       	mov	r24, r25
    2a7e:	8f 93       	push	r24
    2a80:	87 e4       	ldi	r24, 0x47	; 71
    2a82:	91 e0       	ldi	r25, 0x01	; 1
    2a84:	8f 93       	push	r24
    2a86:	8b e4       	ldi	r24, 0x4B	; 75
    2a88:	94 e0       	ldi	r25, 0x04	; 4
    2a8a:	89 2f       	mov	r24, r25
    2a8c:	8f 93       	push	r24
    2a8e:	8b e4       	ldi	r24, 0x4B	; 75
    2a90:	94 e0       	ldi	r25, 0x04	; 4
    2a92:	8f 93       	push	r24
    2a94:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
		LCDWriteStringXY(0,0,chBuffer);
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	0e 94 d7 43 	call	0x87ae	; 0x87ae <LCDGotoXY>
    2aac:	8b e4       	ldi	r24, 0x4B	; 75
    2aae:	94 e0       	ldi	r25, 0x04	; 4
    2ab0:	0e 94 01 43 	call	0x8602	; 0x8602 <LCDWriteString>
		LCDWriteStringXY(0,1,chBuffer);
    2ab4:	61 e0       	ldi	r22, 0x01	; 1
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	0e 94 d7 43 	call	0x87ae	; 0x87ae <LCDGotoXY>
    2abc:	8b e4       	ldi	r24, 0x4B	; 75
    2abe:	94 e0       	ldi	r25, 0x04	; 4
    2ac0:	0e 94 01 43 	call	0x8602	; 0x8602 <LCDWriteString>
		SET_BIT(LCD_BACKLIGHT_PORT, LCD_BACKLIGHT);
    2ac4:	88 e3       	ldi	r24, 0x38	; 56
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	28 e3       	ldi	r18, 0x38	; 56
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	f9 01       	movw	r30, r18
    2ace:	20 81       	ld	r18, Z
    2ad0:	28 60       	ori	r18, 0x08	; 8
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	20 83       	st	Z, r18
		uContDisplayON = TIEMPO_DISPLAY_ON;
    2ad6:	88 ee       	ldi	r24, 0xE8	; 232
    2ad8:	93 e0       	ldi	r25, 0x03	; 3
    2ada:	90 93 4a 04 	sts	0x044A, r25
    2ade:	80 93 49 04 	sts	0x0449, r24
		uContDisplayOFF = 0;
    2ae2:	10 92 61 04 	sts	0x0461, r1
    2ae6:	10 92 60 04 	sts	0x0460, r1
		chDisplayInstalado = SI;
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	80 93 5c 04 	sts	0x045C, r24
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <Inicio_Display+0xd4>
	}
	else { 	// Jumper == NO => Display == NO
		chDisplayInstalado = NO;
    2af2:	10 92 5c 04 	sts	0x045C, r1
	}
	uchEstadoDisplay = DISPLAY_STANDBY;
    2af6:	10 92 5d 04 	sts	0x045D, r1
}
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	08 95       	ret

00002b00 <Pantalla_Presentacion_Display>:


/*****************************************************************************
* Pantalla presentacion
*****************************************************************************/
void Pantalla_Presentacion_Display (void) {
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	00 d0       	rcall	.+0      	; 0x2b06 <Pantalla_Presentacion_Display+0x6>
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
	if (chDisplayInstalado == SI){
    2b0a:	80 91 5c 04 	lds	r24, 0x045C
    2b0e:	81 30       	cpi	r24, 0x01	; 1
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <Pantalla_Presentacion_Display+0x14>
    2b12:	cd c0       	rjmp	.+410    	; 0x2cae <Pantalla_Presentacion_Display+0x1ae>
		sprintf(chBuffer, "%S", (wchar_t*)Texto_Llamas);
    2b14:	81 ed       	ldi	r24, 0xD1	; 209
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	89 2f       	mov	r24, r25
    2b1a:	8f 93       	push	r24
    2b1c:	81 ed       	ldi	r24, 0xD1	; 209
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	8f 93       	push	r24
    2b22:	87 e4       	ldi	r24, 0x47	; 71
    2b24:	91 e0       	ldi	r25, 0x01	; 1
    2b26:	89 2f       	mov	r24, r25
    2b28:	8f 93       	push	r24
    2b2a:	87 e4       	ldi	r24, 0x47	; 71
    2b2c:	91 e0       	ldi	r25, 0x01	; 1
    2b2e:	8f 93       	push	r24
    2b30:	8b e4       	ldi	r24, 0x4B	; 75
    2b32:	94 e0       	ldi	r25, 0x04	; 4
    2b34:	89 2f       	mov	r24, r25
    2b36:	8f 93       	push	r24
    2b38:	8b e4       	ldi	r24, 0x4B	; 75
    2b3a:	94 e0       	ldi	r25, 0x04	; 4
    2b3c:	8f 93       	push	r24
    2b3e:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
		LCDWriteStringXY(0,0,chBuffer);
    2b4e:	60 e0       	ldi	r22, 0x00	; 0
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	0e 94 d7 43 	call	0x87ae	; 0x87ae <LCDGotoXY>
    2b56:	8b e4       	ldi	r24, 0x4B	; 75
    2b58:	94 e0       	ldi	r25, 0x04	; 4
    2b5a:	0e 94 01 43 	call	0x8602	; 0x8602 <LCDWriteString>

		uContDisplay = TIEMPO_PUNTOS_PRESENTACION;
    2b5e:	84 ef       	ldi	r24, 0xF4	; 244
    2b60:	91 e0       	ldi	r25, 0x01	; 1
    2b62:	90 93 48 04 	sts	0x0448, r25
    2b66:	80 93 47 04 	sts	0x0447, r24
		while(uContDisplay != 0);
    2b6a:	00 00       	nop
    2b6c:	80 91 47 04 	lds	r24, 0x0447
    2b70:	90 91 48 04 	lds	r25, 0x0448
    2b74:	89 2b       	or	r24, r25
    2b76:	d1 f7       	brne	.-12     	; 0x2b6c <Pantalla_Presentacion_Display+0x6c>

		indexDisplay = sprintf(chBuffer, "%S", (wchar_t*)Texto_Cargando);
    2b78:	83 ee       	ldi	r24, 0xE3	; 227
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	89 2f       	mov	r24, r25
    2b7e:	8f 93       	push	r24
    2b80:	83 ee       	ldi	r24, 0xE3	; 227
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	8f 93       	push	r24
    2b86:	87 e4       	ldi	r24, 0x47	; 71
    2b88:	91 e0       	ldi	r25, 0x01	; 1
    2b8a:	89 2f       	mov	r24, r25
    2b8c:	8f 93       	push	r24
    2b8e:	87 e4       	ldi	r24, 0x47	; 71
    2b90:	91 e0       	ldi	r25, 0x01	; 1
    2b92:	8f 93       	push	r24
    2b94:	8b e4       	ldi	r24, 0x4B	; 75
    2b96:	94 e0       	ldi	r25, 0x04	; 4
    2b98:	89 2f       	mov	r24, r25
    2b9a:	8f 93       	push	r24
    2b9c:	8b e4       	ldi	r24, 0x4B	; 75
    2b9e:	94 e0       	ldi	r25, 0x04	; 4
    2ba0:	8f 93       	push	r24
    2ba2:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	0f 90       	pop	r0
    2bac:	0f 90       	pop	r0
    2bae:	0f 90       	pop	r0
    2bb0:	0f 90       	pop	r0
    2bb2:	90 93 5f 04 	sts	0x045F, r25
    2bb6:	80 93 5e 04 	sts	0x045E, r24
		LCDWriteStringXY(0,1,chBuffer);
    2bba:	61 e0       	ldi	r22, 0x01	; 1
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	0e 94 d7 43 	call	0x87ae	; 0x87ae <LCDGotoXY>
    2bc2:	8b e4       	ldi	r24, 0x4B	; 75
    2bc4:	94 e0       	ldi	r25, 0x04	; 4
    2bc6:	0e 94 01 43 	call	0x8602	; 0x8602 <LCDWriteString>
		Transmitir_Buffer_USART0_P (PSTR("\n\r\0"));
    2bca:	81 e1       	ldi	r24, 0x11	; 17
    2bcc:	91 e0       	ldi	r25, 0x01	; 1
    2bce:	0e 94 85 0b 	call	0x170a	; 0x170a <Transmitir_Buffer_USART0_P>
		Transmitir_Buffer_USART0 (chBuffer, DISPLAY_SIZE);
    2bd2:	60 e1       	ldi	r22, 0x10	; 16
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	8b e4       	ldi	r24, 0x4B	; 75
    2bd8:	94 e0       	ldi	r25, 0x04	; 4
    2bda:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

		uContDisplay = TIEMPO_PUNTOS_PRESENTACION;
    2bde:	84 ef       	ldi	r24, 0xF4	; 244
    2be0:	91 e0       	ldi	r25, 0x01	; 1
    2be2:	90 93 48 04 	sts	0x0448, r25
    2be6:	80 93 47 04 	sts	0x0447, r24
		while(uContDisplay != 0);
    2bea:	00 00       	nop
    2bec:	80 91 47 04 	lds	r24, 0x0447
    2bf0:	90 91 48 04 	lds	r25, 0x0448
    2bf4:	89 2b       	or	r24, r25
    2bf6:	d1 f7       	brne	.-12     	; 0x2bec <Pantalla_Presentacion_Display+0xec>

		sprintf(chBuffer, "%S", (wchar_t*)Texto_Punto);
    2bf8:	8d ee       	ldi	r24, 0xED	; 237
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	89 2f       	mov	r24, r25
    2bfe:	8f 93       	push	r24
    2c00:	8d ee       	ldi	r24, 0xED	; 237
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	8f 93       	push	r24
    2c06:	87 e4       	ldi	r24, 0x47	; 71
    2c08:	91 e0       	ldi	r25, 0x01	; 1
    2c0a:	89 2f       	mov	r24, r25
    2c0c:	8f 93       	push	r24
    2c0e:	87 e4       	ldi	r24, 0x47	; 71
    2c10:	91 e0       	ldi	r25, 0x01	; 1
    2c12:	8f 93       	push	r24
    2c14:	8b e4       	ldi	r24, 0x4B	; 75
    2c16:	94 e0       	ldi	r25, 0x04	; 4
    2c18:	89 2f       	mov	r24, r25
    2c1a:	8f 93       	push	r24
    2c1c:	8b e4       	ldi	r24, 0x4B	; 75
    2c1e:	94 e0       	ldi	r25, 0x04	; 4
    2c20:	8f 93       	push	r24
    2c22:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
		for (int i=0; i<DISPLAY_SIZE-indexDisplay; i++){
    2c32:	1a 82       	std	Y+2, r1	; 0x02
    2c34:	19 82       	std	Y+1, r1	; 0x01
    2c36:	26 c0       	rjmp	.+76     	; 0x2c84 <Pantalla_Presentacion_Display+0x184>
			LCDWriteStringXY(indexDisplay+i,1,chBuffer);
    2c38:	80 91 5e 04 	lds	r24, 0x045E
    2c3c:	90 91 5f 04 	lds	r25, 0x045F
    2c40:	98 2f       	mov	r25, r24
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	89 0f       	add	r24, r25
    2c46:	61 e0       	ldi	r22, 0x01	; 1
    2c48:	0e 94 d7 43 	call	0x87ae	; 0x87ae <LCDGotoXY>
    2c4c:	8b e4       	ldi	r24, 0x4B	; 75
    2c4e:	94 e0       	ldi	r25, 0x04	; 4
    2c50:	0e 94 01 43 	call	0x8602	; 0x8602 <LCDWriteString>
			Transmitir_Buffer_USART0 (chBuffer, DISPLAY_SIZE);
    2c54:	60 e1       	ldi	r22, 0x10	; 16
    2c56:	70 e0       	ldi	r23, 0x00	; 0
    2c58:	8b e4       	ldi	r24, 0x4B	; 75
    2c5a:	94 e0       	ldi	r25, 0x04	; 4
    2c5c:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			uContDisplay = TIEMPO_PUNTOS_PRESENTACION;
    2c60:	84 ef       	ldi	r24, 0xF4	; 244
    2c62:	91 e0       	ldi	r25, 0x01	; 1
    2c64:	90 93 48 04 	sts	0x0448, r25
    2c68:	80 93 47 04 	sts	0x0447, r24
			while(uContDisplay != 0);
    2c6c:	00 00       	nop
    2c6e:	80 91 47 04 	lds	r24, 0x0447
    2c72:	90 91 48 04 	lds	r25, 0x0448
    2c76:	89 2b       	or	r24, r25
    2c78:	d1 f7       	brne	.-12     	; 0x2c6e <Pantalla_Presentacion_Display+0x16e>

		uContDisplay = TIEMPO_PUNTOS_PRESENTACION;
		while(uContDisplay != 0);

		sprintf(chBuffer, "%S", (wchar_t*)Texto_Punto);
		for (int i=0; i<DISPLAY_SIZE-indexDisplay; i++){
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	89 83       	std	Y+1, r24	; 0x01
    2c84:	80 91 5e 04 	lds	r24, 0x045E
    2c88:	90 91 5f 04 	lds	r25, 0x045F
    2c8c:	20 e1       	ldi	r18, 0x10	; 16
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	28 1b       	sub	r18, r24
    2c92:	39 0b       	sbc	r19, r25
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	9a 81       	ldd	r25, Y+2	; 0x02
    2c98:	82 17       	cp	r24, r18
    2c9a:	93 07       	cpc	r25, r19
    2c9c:	6c f2       	brlt	.-102    	; 0x2c38 <Pantalla_Presentacion_Display+0x138>
			Transmitir_Buffer_USART0 (chBuffer, DISPLAY_SIZE);

			uContDisplay = TIEMPO_PUNTOS_PRESENTACION;
			while(uContDisplay != 0);
		}
		Transmitir_Buffer_USART0_P (PSTR("\n\r\0"));
    2c9e:	85 e1       	ldi	r24, 0x15	; 21
    2ca0:	91 e0       	ldi	r25, 0x01	; 1
    2ca2:	0e 94 85 0b 	call	0x170a	; 0x170a <Transmitir_Buffer_USART0_P>

		uContDisplayOFF = 0;
    2ca6:	10 92 61 04 	sts	0x0461, r1
    2caa:	10 92 60 04 	sts	0x0460, r1
	}
}
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	df 91       	pop	r29
    2cb4:	cf 91       	pop	r28
    2cb6:	08 95       	ret

00002cb8 <Carga_Configuracion_Desde_Eeprom>:

/*****************************************************************************
* Funcion de carga de variables desde eeprom al inicio
*****************************************************************************/

void Carga_Configuracion_Desde_Eeprom (void) {
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	cd b7       	in	r28, 0x3d	; 61
    2cbe:	de b7       	in	r29, 0x3e	; 62
    2cc0:	64 97       	sbiw	r28, 0x14	; 20
    2cc2:	0f b6       	in	r0, 0x3f	; 63
    2cc4:	f8 94       	cli
    2cc6:	de bf       	out	0x3e, r29	; 62
    2cc8:	0f be       	out	0x3f, r0	; 63
    2cca:	cd bf       	out	0x3d, r28	; 61
	unsigned int	uCRC_Eeprom;						/* Checksum eeprom */
	unsigned int	uCRC_BK;							/* Checksum backup */
	unsigned int	uCRC_Eeprom_BK;						/* Checksum eeprom backup */

	/* GRUPO_GENRAL -0- */
	unsigned int uContIntentosValidacionChecksum = 0;
    2ccc:	1a 82       	std	Y+2, r1	; 0x02
    2cce:	19 82       	std	Y+1, r1	; 0x01
	while (uContIntentosValidacionChecksum < CANT_INTENTOS_VALIDACION_CHECKSUM) {
    2cd0:	52 c2       	rjmp	.+1188   	; 0x3176 <Carga_Configuracion_Desde_Eeprom+0x4be>
		sprintf (chBufferTx_USART0, "\n\r%S %d", (wchar_t*)validacion_Serie_MSG, uContIntentosValidacionChecksum);
    2cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd4:	8f 93       	push	r24
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	8f 93       	push	r24
    2cda:	89 e1       	ldi	r24, 0x19	; 25
    2cdc:	91 e0       	ldi	r25, 0x01	; 1
    2cde:	89 2f       	mov	r24, r25
    2ce0:	8f 93       	push	r24
    2ce2:	89 e1       	ldi	r24, 0x19	; 25
    2ce4:	91 e0       	ldi	r25, 0x01	; 1
    2ce6:	8f 93       	push	r24
    2ce8:	8a e9       	ldi	r24, 0x9A	; 154
    2cea:	91 e0       	ldi	r25, 0x01	; 1
    2cec:	89 2f       	mov	r24, r25
    2cee:	8f 93       	push	r24
    2cf0:	8a e9       	ldi	r24, 0x9A	; 154
    2cf2:	91 e0       	ldi	r25, 0x01	; 1
    2cf4:	8f 93       	push	r24
    2cf6:	83 e5       	ldi	r24, 0x53	; 83
    2cf8:	93 e0       	ldi	r25, 0x03	; 3
    2cfa:	89 2f       	mov	r24, r25
    2cfc:	8f 93       	push	r24
    2cfe:	83 e5       	ldi	r24, 0x53	; 83
    2d00:	93 e0       	ldi	r25, 0x03	; 3
    2d02:	8f 93       	push	r24
    2d04:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    2d08:	8d b7       	in	r24, 0x3d	; 61
    2d0a:	9e b7       	in	r25, 0x3e	; 62
    2d0c:	08 96       	adiw	r24, 0x08	; 8
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
		Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    2d18:	68 ec       	ldi	r22, 0xC8	; 200
    2d1a:	70 e0       	ldi	r23, 0x00	; 0
    2d1c:	83 e5       	ldi	r24, 0x53	; 83
    2d1e:	93 e0       	ldi	r25, 0x03	; 3
    2d20:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

		uContIntentosValidacionChecksum++;
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	9a 81       	ldd	r25, Y+2	; 0x02
    2d28:	01 96       	adiw	r24, 0x01	; 1
    2d2a:	9a 83       	std	Y+2, r25	; 0x02
    2d2c:	89 83       	std	Y+1, r24	; 0x01

		// leo los valores originales
		uCRC = 0;
    2d2e:	1e 86       	std	Y+14, r1	; 0x0e
    2d30:	1d 86       	std	Y+13, r1	; 0x0d
		for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++) {
    2d32:	1c 82       	std	Y+4, r1	; 0x04
    2d34:	1b 82       	std	Y+3, r1	; 0x03
    2d36:	1e c0       	rjmp	.+60     	; 0x2d74 <Carga_Configuracion_Desde_Eeprom+0xbc>
			Eeprom_a_Char(chNumeroSerie_Eeprom+i, chNumeroSerie+i);										/* leeo los valores originales de la eeprom */
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3c:	9c 01       	movw	r18, r24
    2d3e:	21 5e       	subi	r18, 0xE1	; 225
    2d40:	39 4f       	sbci	r19, 0xF9	; 249
    2d42:	8b 81       	ldd	r24, Y+3	; 0x03
    2d44:	9c 81       	ldd	r25, Y+4	; 0x04
    2d46:	8a 59       	subi	r24, 0x9A	; 154
    2d48:	9b 4f       	sbci	r25, 0xFB	; 251
    2d4a:	b9 01       	movw	r22, r18
    2d4c:	0e 94 49 28 	call	0x5092	; 0x5092 <Eeprom_a_Char>
			uCRC += Char_a_Checksum(chNumeroSerie+i);													/* calculo el checksum de los valores lebantados a la ram */
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	9c 81       	ldd	r25, Y+4	; 0x04
    2d54:	81 5e       	subi	r24, 0xE1	; 225
    2d56:	99 4f       	sbci	r25, 0xF9	; 249
    2d58:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <Char_a_Checksum>
    2d5c:	9c 01       	movw	r18, r24
    2d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d62:	82 0f       	add	r24, r18
    2d64:	93 1f       	adc	r25, r19
    2d66:	9e 87       	std	Y+14, r25	; 0x0e
    2d68:	8d 87       	std	Y+13, r24	; 0x0d

		uContIntentosValidacionChecksum++;

		// leo los valores originales
		uCRC = 0;
		for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++) {
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6e:	01 96       	adiw	r24, 0x01	; 1
    2d70:	9c 83       	std	Y+4, r25	; 0x04
    2d72:	8b 83       	std	Y+3, r24	; 0x03
    2d74:	8b 81       	ldd	r24, Y+3	; 0x03
    2d76:	9c 81       	ldd	r25, Y+4	; 0x04
    2d78:	0a 97       	sbiw	r24, 0x0a	; 10
    2d7a:	f4 f2       	brlt	.-68     	; 0x2d38 <Carga_Configuracion_Desde_Eeprom+0x80>
			Eeprom_a_Char(chNumeroSerie_Eeprom+i, chNumeroSerie+i);										/* leeo los valores originales de la eeprom */
			uCRC += Char_a_Checksum(chNumeroSerie+i);													/* calculo el checksum de los valores lebantados a la ram */
		}
		Eeprom_a_UnsignedInt (&uChecksumGeneral_Eeprom, &uCRC_Eeprom);									/* levanto el checksum de la eeprom */
    2d7c:	ce 01       	movw	r24, r28
    2d7e:	0f 96       	adiw	r24, 0x0f	; 15
    2d80:	bc 01       	movw	r22, r24
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>

		// leo los valores de la copia
		uCRC_BK = 0;
    2d8a:	1a 8a       	std	Y+18, r1	; 0x12
    2d8c:	19 8a       	std	Y+17, r1	; 0x11
		for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++) {
    2d8e:	1e 82       	std	Y+6, r1	; 0x06
    2d90:	1d 82       	std	Y+5, r1	; 0x05
    2d92:	1e c0       	rjmp	.+60     	; 0x2dd0 <Carga_Configuracion_Desde_Eeprom+0x118>
			Eeprom_a_Char(chNumeroSerie_Eeprom_BK+i, chNumeroSerie+i);										/* leeo los valores originales de la eeprom */
    2d94:	8d 81       	ldd	r24, Y+5	; 0x05
    2d96:	9e 81       	ldd	r25, Y+6	; 0x06
    2d98:	9c 01       	movw	r18, r24
    2d9a:	21 5e       	subi	r18, 0xE1	; 225
    2d9c:	39 4f       	sbci	r19, 0xF9	; 249
    2d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2da0:	9e 81       	ldd	r25, Y+6	; 0x06
    2da2:	8c 55       	subi	r24, 0x5C	; 92
    2da4:	9b 4f       	sbci	r25, 0xFB	; 251
    2da6:	b9 01       	movw	r22, r18
    2da8:	0e 94 49 28 	call	0x5092	; 0x5092 <Eeprom_a_Char>
			uCRC_BK += Char_a_Checksum(chNumeroSerie+i);													/* calculo el checksum de los valores lebantados a la ram */
    2dac:	8d 81       	ldd	r24, Y+5	; 0x05
    2dae:	9e 81       	ldd	r25, Y+6	; 0x06
    2db0:	81 5e       	subi	r24, 0xE1	; 225
    2db2:	99 4f       	sbci	r25, 0xF9	; 249
    2db4:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <Char_a_Checksum>
    2db8:	9c 01       	movw	r18, r24
    2dba:	89 89       	ldd	r24, Y+17	; 0x11
    2dbc:	9a 89       	ldd	r25, Y+18	; 0x12
    2dbe:	82 0f       	add	r24, r18
    2dc0:	93 1f       	adc	r25, r19
    2dc2:	9a 8b       	std	Y+18, r25	; 0x12
    2dc4:	89 8b       	std	Y+17, r24	; 0x11
		}
		Eeprom_a_UnsignedInt (&uChecksumGeneral_Eeprom, &uCRC_Eeprom);									/* levanto el checksum de la eeprom */

		// leo los valores de la copia
		uCRC_BK = 0;
		for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++) {
    2dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dca:	01 96       	adiw	r24, 0x01	; 1
    2dcc:	9e 83       	std	Y+6, r25	; 0x06
    2dce:	8d 83       	std	Y+5, r24	; 0x05
    2dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd4:	0a 97       	sbiw	r24, 0x0a	; 10
    2dd6:	f4 f2       	brlt	.-68     	; 0x2d94 <Carga_Configuracion_Desde_Eeprom+0xdc>
			Eeprom_a_Char(chNumeroSerie_Eeprom_BK+i, chNumeroSerie+i);										/* leeo los valores originales de la eeprom */
			uCRC_BK += Char_a_Checksum(chNumeroSerie+i);													/* calculo el checksum de los valores lebantados a la ram */
		}
		Eeprom_a_UnsignedInt (&uChecksumGeneral_Eeprom, &uCRC_Eeprom_BK);									/* levanto el checksum de la eeprom */
    2dd8:	ce 01       	movw	r24, r28
    2dda:	43 96       	adiw	r24, 0x13	; 19
    2ddc:	bc 01       	movw	r22, r24
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>

		// si ambas dan bien
		if ((uCRC == uCRC_Eeprom) && (uCRC_BK == uCRC_Eeprom_BK)) {
    2de6:	2d 85       	ldd	r18, Y+13	; 0x0d
    2de8:	3e 85       	ldd	r19, Y+14	; 0x0e
    2dea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dec:	98 89       	ldd	r25, Y+16	; 0x10
    2dee:	28 17       	cp	r18, r24
    2df0:	39 07       	cpc	r19, r25
    2df2:	09 f0       	breq	.+2      	; 0x2df6 <Carga_Configuracion_Desde_Eeprom+0x13e>
    2df4:	4f c0       	rjmp	.+158    	; 0x2e94 <Carga_Configuracion_Desde_Eeprom+0x1dc>
    2df6:	29 89       	ldd	r18, Y+17	; 0x11
    2df8:	3a 89       	ldd	r19, Y+18	; 0x12
    2dfa:	8b 89       	ldd	r24, Y+19	; 0x13
    2dfc:	9c 89       	ldd	r25, Y+20	; 0x14
    2dfe:	28 17       	cp	r18, r24
    2e00:	39 07       	cpc	r19, r25
    2e02:	09 f0       	breq	.+2      	; 0x2e06 <Carga_Configuracion_Desde_Eeprom+0x14e>
    2e04:	47 c0       	rjmp	.+142    	; 0x2e94 <Carga_Configuracion_Desde_Eeprom+0x1dc>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesOk_MSG);
    2e06:	8f e8       	ldi	r24, 0x8F	; 143
    2e08:	91 e0       	ldi	r25, 0x01	; 1
    2e0a:	89 2f       	mov	r24, r25
    2e0c:	8f 93       	push	r24
    2e0e:	8f e8       	ldi	r24, 0x8F	; 143
    2e10:	91 e0       	ldi	r25, 0x01	; 1
    2e12:	8f 93       	push	r24
    2e14:	82 ea       	ldi	r24, 0xA2	; 162
    2e16:	91 e0       	ldi	r25, 0x01	; 1
    2e18:	89 2f       	mov	r24, r25
    2e1a:	8f 93       	push	r24
    2e1c:	82 ea       	ldi	r24, 0xA2	; 162
    2e1e:	91 e0       	ldi	r25, 0x01	; 1
    2e20:	8f 93       	push	r24
    2e22:	83 e5       	ldi	r24, 0x53	; 83
    2e24:	93 e0       	ldi	r25, 0x03	; 3
    2e26:	89 2f       	mov	r24, r25
    2e28:	8f 93       	push	r24
    2e2a:	83 e5       	ldi	r24, 0x53	; 83
    2e2c:	93 e0       	ldi	r25, 0x03	; 3
    2e2e:	8f 93       	push	r24
    2e30:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    2e40:	68 ec       	ldi	r22, 0xC8	; 200
    2e42:	70 e0       	ldi	r23, 0x00	; 0
    2e44:	83 e5       	ldi	r24, 0x53	; 83
    2e46:	93 e0       	ldi	r25, 0x03	; 3
    2e48:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpOK_MSG);
    2e4c:	89 ed       	ldi	r24, 0xD9	; 217
    2e4e:	91 e0       	ldi	r25, 0x01	; 1
    2e50:	89 2f       	mov	r24, r25
    2e52:	8f 93       	push	r24
    2e54:	89 ed       	ldi	r24, 0xD9	; 217
    2e56:	91 e0       	ldi	r25, 0x01	; 1
    2e58:	8f 93       	push	r24
    2e5a:	82 ea       	ldi	r24, 0xA2	; 162
    2e5c:	91 e0       	ldi	r25, 0x01	; 1
    2e5e:	89 2f       	mov	r24, r25
    2e60:	8f 93       	push	r24
    2e62:	82 ea       	ldi	r24, 0xA2	; 162
    2e64:	91 e0       	ldi	r25, 0x01	; 1
    2e66:	8f 93       	push	r24
    2e68:	83 e5       	ldi	r24, 0x53	; 83
    2e6a:	93 e0       	ldi	r25, 0x03	; 3
    2e6c:	89 2f       	mov	r24, r25
    2e6e:	8f 93       	push	r24
    2e70:	83 e5       	ldi	r24, 0x53	; 83
    2e72:	93 e0       	ldi	r25, 0x03	; 3
    2e74:	8f 93       	push	r24
    2e76:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	0f 90       	pop	r0
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    2e86:	68 ec       	ldi	r22, 0xC8	; 200
    2e88:	70 e0       	ldi	r23, 0x00	; 0
    2e8a:	83 e5       	ldi	r24, 0x53	; 83
    2e8c:	93 e0       	ldi	r25, 0x03	; 3
    2e8e:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			break;
    2e92:	76 c1       	rjmp	.+748    	; 0x3180 <Carga_Configuracion_Desde_Eeprom+0x4c8>
		}
		// si la copia da mal vuelvo a leer el original porque habia dado bien
		else if ((uCRC == uCRC_Eeprom) && (uCRC_BK != uCRC_Eeprom_BK)) {
    2e94:	2d 85       	ldd	r18, Y+13	; 0x0d
    2e96:	3e 85       	ldd	r19, Y+14	; 0x0e
    2e98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e9a:	98 89       	ldd	r25, Y+16	; 0x10
    2e9c:	28 17       	cp	r18, r24
    2e9e:	39 07       	cpc	r19, r25
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <Carga_Configuracion_Desde_Eeprom+0x1ec>
    2ea2:	a4 c0       	rjmp	.+328    	; 0x2fec <Carga_Configuracion_Desde_Eeprom+0x334>
    2ea4:	29 89       	ldd	r18, Y+17	; 0x11
    2ea6:	3a 89       	ldd	r19, Y+18	; 0x12
    2ea8:	8b 89       	ldd	r24, Y+19	; 0x13
    2eaa:	9c 89       	ldd	r25, Y+20	; 0x14
    2eac:	28 17       	cp	r18, r24
    2eae:	39 07       	cpc	r19, r25
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <Carga_Configuracion_Desde_Eeprom+0x1fc>
    2eb2:	9c c0       	rjmp	.+312    	; 0x2fec <Carga_Configuracion_Desde_Eeprom+0x334>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesOk_MSG);
    2eb4:	8f e8       	ldi	r24, 0x8F	; 143
    2eb6:	91 e0       	ldi	r25, 0x01	; 1
    2eb8:	89 2f       	mov	r24, r25
    2eba:	8f 93       	push	r24
    2ebc:	8f e8       	ldi	r24, 0x8F	; 143
    2ebe:	91 e0       	ldi	r25, 0x01	; 1
    2ec0:	8f 93       	push	r24
    2ec2:	82 ea       	ldi	r24, 0xA2	; 162
    2ec4:	91 e0       	ldi	r25, 0x01	; 1
    2ec6:	89 2f       	mov	r24, r25
    2ec8:	8f 93       	push	r24
    2eca:	82 ea       	ldi	r24, 0xA2	; 162
    2ecc:	91 e0       	ldi	r25, 0x01	; 1
    2ece:	8f 93       	push	r24
    2ed0:	83 e5       	ldi	r24, 0x53	; 83
    2ed2:	93 e0       	ldi	r25, 0x03	; 3
    2ed4:	89 2f       	mov	r24, r25
    2ed6:	8f 93       	push	r24
    2ed8:	83 e5       	ldi	r24, 0x53	; 83
    2eda:	93 e0       	ldi	r25, 0x03	; 3
    2edc:	8f 93       	push	r24
    2ede:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    2eee:	68 ec       	ldi	r22, 0xC8	; 200
    2ef0:	70 e0       	ldi	r23, 0x00	; 0
    2ef2:	83 e5       	ldi	r24, 0x53	; 83
    2ef4:	93 e0       	ldi	r25, 0x03	; 3
    2ef6:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpError_MSG);
    2efa:	84 ea       	ldi	r24, 0xA4	; 164
    2efc:	91 e0       	ldi	r25, 0x01	; 1
    2efe:	89 2f       	mov	r24, r25
    2f00:	8f 93       	push	r24
    2f02:	84 ea       	ldi	r24, 0xA4	; 164
    2f04:	91 e0       	ldi	r25, 0x01	; 1
    2f06:	8f 93       	push	r24
    2f08:	82 ea       	ldi	r24, 0xA2	; 162
    2f0a:	91 e0       	ldi	r25, 0x01	; 1
    2f0c:	89 2f       	mov	r24, r25
    2f0e:	8f 93       	push	r24
    2f10:	82 ea       	ldi	r24, 0xA2	; 162
    2f12:	91 e0       	ldi	r25, 0x01	; 1
    2f14:	8f 93       	push	r24
    2f16:	83 e5       	ldi	r24, 0x53	; 83
    2f18:	93 e0       	ldi	r25, 0x03	; 3
    2f1a:	89 2f       	mov	r24, r25
    2f1c:	8f 93       	push	r24
    2f1e:	83 e5       	ldi	r24, 0x53	; 83
    2f20:	93 e0       	ldi	r25, 0x03	; 3
    2f22:	8f 93       	push	r24
    2f24:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    2f34:	68 ec       	ldi	r22, 0xC8	; 200
    2f36:	70 e0       	ldi	r23, 0x00	; 0
    2f38:	83 e5       	ldi	r24, 0x53	; 83
    2f3a:	93 e0       	ldi	r25, 0x03	; 3
    2f3c:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			// leo los valores originales nuevamente
			uCRC = 0;
    2f40:	1e 86       	std	Y+14, r1	; 0x0e
    2f42:	1d 86       	std	Y+13, r1	; 0x0d
			for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++) {
    2f44:	18 86       	std	Y+8, r1	; 0x08
    2f46:	1f 82       	std	Y+7, r1	; 0x07
    2f48:	1e c0       	rjmp	.+60     	; 0x2f86 <Carga_Configuracion_Desde_Eeprom+0x2ce>
				Eeprom_a_Char(chNumeroSerie_Eeprom+i, chNumeroSerie+i);										/* leeo los valores originales de la eeprom */
    2f4a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f4c:	98 85       	ldd	r25, Y+8	; 0x08
    2f4e:	9c 01       	movw	r18, r24
    2f50:	21 5e       	subi	r18, 0xE1	; 225
    2f52:	39 4f       	sbci	r19, 0xF9	; 249
    2f54:	8f 81       	ldd	r24, Y+7	; 0x07
    2f56:	98 85       	ldd	r25, Y+8	; 0x08
    2f58:	8a 59       	subi	r24, 0x9A	; 154
    2f5a:	9b 4f       	sbci	r25, 0xFB	; 251
    2f5c:	b9 01       	movw	r22, r18
    2f5e:	0e 94 49 28 	call	0x5092	; 0x5092 <Eeprom_a_Char>
				uCRC += Char_a_Checksum(chNumeroSerie+i);													/* calculo el checksum de los valores lebantados a la ram */
    2f62:	8f 81       	ldd	r24, Y+7	; 0x07
    2f64:	98 85       	ldd	r25, Y+8	; 0x08
    2f66:	81 5e       	subi	r24, 0xE1	; 225
    2f68:	99 4f       	sbci	r25, 0xF9	; 249
    2f6a:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <Char_a_Checksum>
    2f6e:	9c 01       	movw	r18, r24
    2f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f74:	82 0f       	add	r24, r18
    2f76:	93 1f       	adc	r25, r19
    2f78:	9e 87       	std	Y+14, r25	; 0x0e
    2f7a:	8d 87       	std	Y+13, r24	; 0x0d
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpError_MSG);
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);

			// leo los valores originales nuevamente
			uCRC = 0;
			for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++) {
    2f7c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f7e:	98 85       	ldd	r25, Y+8	; 0x08
    2f80:	01 96       	adiw	r24, 0x01	; 1
    2f82:	98 87       	std	Y+8, r25	; 0x08
    2f84:	8f 83       	std	Y+7, r24	; 0x07
    2f86:	8f 81       	ldd	r24, Y+7	; 0x07
    2f88:	98 85       	ldd	r25, Y+8	; 0x08
    2f8a:	0a 97       	sbiw	r24, 0x0a	; 10
    2f8c:	f4 f2       	brlt	.-68     	; 0x2f4a <Carga_Configuracion_Desde_Eeprom+0x292>
				Eeprom_a_Char(chNumeroSerie_Eeprom+i, chNumeroSerie+i);										/* leeo los valores originales de la eeprom */
				uCRC += Char_a_Checksum(chNumeroSerie+i);													/* calculo el checksum de los valores lebantados a la ram */
			}
			Eeprom_a_UnsignedInt (&uChecksumGeneral_Eeprom, &uCRC_Eeprom);									/* levanto el checksum de la eeprom */
    2f8e:	ce 01       	movw	r24, r28
    2f90:	0f 96       	adiw	r24, 0x0f	; 15
    2f92:	bc 01       	movw	r22, r24
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>

			// si lei bien los originales grabo la copia sobre el backup
			if (uCRC == uCRC_Eeprom) {
    2f9c:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f9e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fa0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fa2:	98 89       	ldd	r25, Y+16	; 0x10
    2fa4:	28 17       	cp	r18, r24
    2fa6:	39 07       	cpc	r19, r25
    2fa8:	01 f5       	brne	.+64     	; 0x2fea <Carga_Configuracion_Desde_Eeprom+0x332>
				for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++) {
    2faa:	1a 86       	std	Y+10, r1	; 0x0a
    2fac:	19 86       	std	Y+9, r1	; 0x09
    2fae:	11 c0       	rjmp	.+34     	; 0x2fd2 <Carga_Configuracion_Desde_Eeprom+0x31a>
					Char_a_Eeprom(chNumeroSerie_Eeprom_BK+i, chNumeroSerie+i);
    2fb0:	89 85       	ldd	r24, Y+9	; 0x09
    2fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb4:	9c 01       	movw	r18, r24
    2fb6:	21 5e       	subi	r18, 0xE1	; 225
    2fb8:	39 4f       	sbci	r19, 0xF9	; 249
    2fba:	89 85       	ldd	r24, Y+9	; 0x09
    2fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fbe:	8c 55       	subi	r24, 0x5C	; 92
    2fc0:	9b 4f       	sbci	r25, 0xFB	; 251
    2fc2:	b9 01       	movw	r22, r18
    2fc4:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <Char_a_Eeprom>
			}
			Eeprom_a_UnsignedInt (&uChecksumGeneral_Eeprom, &uCRC_Eeprom);									/* levanto el checksum de la eeprom */

			// si lei bien los originales grabo la copia sobre el backup
			if (uCRC == uCRC_Eeprom) {
				for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++) {
    2fc8:	89 85       	ldd	r24, Y+9	; 0x09
    2fca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fcc:	01 96       	adiw	r24, 0x01	; 1
    2fce:	9a 87       	std	Y+10, r25	; 0x0a
    2fd0:	89 87       	std	Y+9, r24	; 0x09
    2fd2:	89 85       	ldd	r24, Y+9	; 0x09
    2fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd6:	0a 97       	sbiw	r24, 0x0a	; 10
    2fd8:	5c f3       	brlt	.-42     	; 0x2fb0 <Carga_Configuracion_Desde_Eeprom+0x2f8>
					Char_a_Eeprom(chNumeroSerie_Eeprom_BK+i, chNumeroSerie+i);
				}
				UnsignedInt_a_Eeprom (&uChecksumGeneral_Eeprom_BK, &uCRC);
    2fda:	ce 01       	movw	r24, r28
    2fdc:	0d 96       	adiw	r24, 0x0d	; 13
    2fde:	bc 01       	movw	r22, r24
    2fe0:	82 e0       	ldi	r24, 0x02	; 2
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>

				break;
    2fe8:	cb c0       	rjmp	.+406    	; 0x3180 <Carga_Configuracion_Desde_Eeprom+0x4c8>
				uCRC += Char_a_Checksum(chNumeroSerie+i);													/* calculo el checksum de los valores lebantados a la ram */
			}
			Eeprom_a_UnsignedInt (&uChecksumGeneral_Eeprom, &uCRC_Eeprom);									/* levanto el checksum de la eeprom */

			// si lei bien los originales grabo la copia sobre el backup
			if (uCRC == uCRC_Eeprom) {
    2fea:	c5 c0       	rjmp	.+394    	; 0x3176 <Carga_Configuracion_Desde_Eeprom+0x4be>

				break;
			}
		}
		// si el original da mal y la copia bien
		else if ((uCRC != uCRC_Eeprom) && (uCRC_BK == uCRC_Eeprom_BK)) {
    2fec:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fee:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff2:	98 89       	ldd	r25, Y+16	; 0x10
    2ff4:	28 17       	cp	r18, r24
    2ff6:	39 07       	cpc	r19, r25
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <Carga_Configuracion_Desde_Eeprom+0x344>
    2ffa:	6e c0       	rjmp	.+220    	; 0x30d8 <Carga_Configuracion_Desde_Eeprom+0x420>
    2ffc:	29 89       	ldd	r18, Y+17	; 0x11
    2ffe:	3a 89       	ldd	r19, Y+18	; 0x12
    3000:	8b 89       	ldd	r24, Y+19	; 0x13
    3002:	9c 89       	ldd	r25, Y+20	; 0x14
    3004:	28 17       	cp	r18, r24
    3006:	39 07       	cpc	r19, r25
    3008:	09 f0       	breq	.+2      	; 0x300c <Carga_Configuracion_Desde_Eeprom+0x354>
    300a:	66 c0       	rjmp	.+204    	; 0x30d8 <Carga_Configuracion_Desde_Eeprom+0x420>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesError_MSG);
    300c:	8e eb       	ldi	r24, 0xBE	; 190
    300e:	91 e0       	ldi	r25, 0x01	; 1
    3010:	89 2f       	mov	r24, r25
    3012:	8f 93       	push	r24
    3014:	8e eb       	ldi	r24, 0xBE	; 190
    3016:	91 e0       	ldi	r25, 0x01	; 1
    3018:	8f 93       	push	r24
    301a:	82 ea       	ldi	r24, 0xA2	; 162
    301c:	91 e0       	ldi	r25, 0x01	; 1
    301e:	89 2f       	mov	r24, r25
    3020:	8f 93       	push	r24
    3022:	82 ea       	ldi	r24, 0xA2	; 162
    3024:	91 e0       	ldi	r25, 0x01	; 1
    3026:	8f 93       	push	r24
    3028:	83 e5       	ldi	r24, 0x53	; 83
    302a:	93 e0       	ldi	r25, 0x03	; 3
    302c:	89 2f       	mov	r24, r25
    302e:	8f 93       	push	r24
    3030:	83 e5       	ldi	r24, 0x53	; 83
    3032:	93 e0       	ldi	r25, 0x03	; 3
    3034:	8f 93       	push	r24
    3036:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    3046:	68 ec       	ldi	r22, 0xC8	; 200
    3048:	70 e0       	ldi	r23, 0x00	; 0
    304a:	83 e5       	ldi	r24, 0x53	; 83
    304c:	93 e0       	ldi	r25, 0x03	; 3
    304e:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpOK_MSG);
    3052:	89 ed       	ldi	r24, 0xD9	; 217
    3054:	91 e0       	ldi	r25, 0x01	; 1
    3056:	89 2f       	mov	r24, r25
    3058:	8f 93       	push	r24
    305a:	89 ed       	ldi	r24, 0xD9	; 217
    305c:	91 e0       	ldi	r25, 0x01	; 1
    305e:	8f 93       	push	r24
    3060:	82 ea       	ldi	r24, 0xA2	; 162
    3062:	91 e0       	ldi	r25, 0x01	; 1
    3064:	89 2f       	mov	r24, r25
    3066:	8f 93       	push	r24
    3068:	82 ea       	ldi	r24, 0xA2	; 162
    306a:	91 e0       	ldi	r25, 0x01	; 1
    306c:	8f 93       	push	r24
    306e:	83 e5       	ldi	r24, 0x53	; 83
    3070:	93 e0       	ldi	r25, 0x03	; 3
    3072:	89 2f       	mov	r24, r25
    3074:	8f 93       	push	r24
    3076:	83 e5       	ldi	r24, 0x53	; 83
    3078:	93 e0       	ldi	r25, 0x03	; 3
    307a:	8f 93       	push	r24
    307c:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    308c:	68 ec       	ldi	r22, 0xC8	; 200
    308e:	70 e0       	ldi	r23, 0x00	; 0
    3090:	83 e5       	ldi	r24, 0x53	; 83
    3092:	93 e0       	ldi	r25, 0x03	; 3
    3094:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			// grabo el backup sobre los originales
			for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++) {
    3098:	1c 86       	std	Y+12, r1	; 0x0c
    309a:	1b 86       	std	Y+11, r1	; 0x0b
    309c:	11 c0       	rjmp	.+34     	; 0x30c0 <Carga_Configuracion_Desde_Eeprom+0x408>
				Char_a_Eeprom(chNumeroSerie_Eeprom+i, chNumeroSerie+i);
    309e:	8b 85       	ldd	r24, Y+11	; 0x0b
    30a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    30a2:	9c 01       	movw	r18, r24
    30a4:	21 5e       	subi	r18, 0xE1	; 225
    30a6:	39 4f       	sbci	r19, 0xF9	; 249
    30a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    30aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    30ac:	8a 59       	subi	r24, 0x9A	; 154
    30ae:	9b 4f       	sbci	r25, 0xFB	; 251
    30b0:	b9 01       	movw	r22, r18
    30b2:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <Char_a_Eeprom>
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpOK_MSG);
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);

			// grabo el backup sobre los originales
			for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++) {
    30b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    30b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    30ba:	01 96       	adiw	r24, 0x01	; 1
    30bc:	9c 87       	std	Y+12, r25	; 0x0c
    30be:	8b 87       	std	Y+11, r24	; 0x0b
    30c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    30c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    30c4:	0a 97       	sbiw	r24, 0x0a	; 10
    30c6:	5c f3       	brlt	.-42     	; 0x309e <Carga_Configuracion_Desde_Eeprom+0x3e6>
				Char_a_Eeprom(chNumeroSerie_Eeprom+i, chNumeroSerie+i);
			}
			UnsignedInt_a_Eeprom (&uChecksumGeneral_Eeprom, &uCRC_BK);
    30c8:	ce 01       	movw	r24, r28
    30ca:	41 96       	adiw	r24, 0x11	; 17
    30cc:	bc 01       	movw	r22, r24
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>

			break;
    30d6:	54 c0       	rjmp	.+168    	; 0x3180 <Carga_Configuracion_Desde_Eeprom+0x4c8>
		}
		// si ambas dan mal y agote los intentos
		else if (uContIntentosValidacionChecksum == CANT_INTENTOS_VALIDACION_CHECKSUM){
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	9a 81       	ldd	r25, Y+2	; 0x02
    30dc:	0a 97       	sbiw	r24, 0x0a	; 10
    30de:	09 f0       	breq	.+2      	; 0x30e2 <Carga_Configuracion_Desde_Eeprom+0x42a>
    30e0:	4a c0       	rjmp	.+148    	; 0x3176 <Carga_Configuracion_Desde_Eeprom+0x4be>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesError_MSG);
    30e2:	8e eb       	ldi	r24, 0xBE	; 190
    30e4:	91 e0       	ldi	r25, 0x01	; 1
    30e6:	89 2f       	mov	r24, r25
    30e8:	8f 93       	push	r24
    30ea:	8e eb       	ldi	r24, 0xBE	; 190
    30ec:	91 e0       	ldi	r25, 0x01	; 1
    30ee:	8f 93       	push	r24
    30f0:	82 ea       	ldi	r24, 0xA2	; 162
    30f2:	91 e0       	ldi	r25, 0x01	; 1
    30f4:	89 2f       	mov	r24, r25
    30f6:	8f 93       	push	r24
    30f8:	82 ea       	ldi	r24, 0xA2	; 162
    30fa:	91 e0       	ldi	r25, 0x01	; 1
    30fc:	8f 93       	push	r24
    30fe:	83 e5       	ldi	r24, 0x53	; 83
    3100:	93 e0       	ldi	r25, 0x03	; 3
    3102:	89 2f       	mov	r24, r25
    3104:	8f 93       	push	r24
    3106:	83 e5       	ldi	r24, 0x53	; 83
    3108:	93 e0       	ldi	r25, 0x03	; 3
    310a:	8f 93       	push	r24
    310c:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    3110:	0f 90       	pop	r0
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    311c:	68 ec       	ldi	r22, 0xC8	; 200
    311e:	70 e0       	ldi	r23, 0x00	; 0
    3120:	83 e5       	ldi	r24, 0x53	; 83
    3122:	93 e0       	ldi	r25, 0x03	; 3
    3124:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpError_MSG);
    3128:	84 ea       	ldi	r24, 0xA4	; 164
    312a:	91 e0       	ldi	r25, 0x01	; 1
    312c:	89 2f       	mov	r24, r25
    312e:	8f 93       	push	r24
    3130:	84 ea       	ldi	r24, 0xA4	; 164
    3132:	91 e0       	ldi	r25, 0x01	; 1
    3134:	8f 93       	push	r24
    3136:	82 ea       	ldi	r24, 0xA2	; 162
    3138:	91 e0       	ldi	r25, 0x01	; 1
    313a:	89 2f       	mov	r24, r25
    313c:	8f 93       	push	r24
    313e:	82 ea       	ldi	r24, 0xA2	; 162
    3140:	91 e0       	ldi	r25, 0x01	; 1
    3142:	8f 93       	push	r24
    3144:	83 e5       	ldi	r24, 0x53	; 83
    3146:	93 e0       	ldi	r25, 0x03	; 3
    3148:	89 2f       	mov	r24, r25
    314a:	8f 93       	push	r24
    314c:	83 e5       	ldi	r24, 0x53	; 83
    314e:	93 e0       	ldi	r25, 0x03	; 3
    3150:	8f 93       	push	r24
    3152:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    3156:	0f 90       	pop	r0
    3158:	0f 90       	pop	r0
    315a:	0f 90       	pop	r0
    315c:	0f 90       	pop	r0
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    3162:	68 ec       	ldi	r22, 0xC8	; 200
    3164:	70 e0       	ldi	r23, 0x00	; 0
    3166:	83 e5       	ldi	r24, 0x53	; 83
    3168:	93 e0       	ldi	r25, 0x03	; 3
    316a:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			Carga_Configuracion_Fabrica_Eeprom (GRUPO_SERIE);
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	0e 94 69 22 	call	0x44d2	; 0x44d2 <Carga_Configuracion_Fabrica_Eeprom>
	unsigned int	uCRC_BK;							/* Checksum backup */
	unsigned int	uCRC_Eeprom_BK;						/* Checksum eeprom backup */

	/* GRUPO_GENRAL -0- */
	unsigned int uContIntentosValidacionChecksum = 0;
	while (uContIntentosValidacionChecksum < CANT_INTENTOS_VALIDACION_CHECKSUM) {
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	9a 81       	ldd	r25, Y+2	; 0x02
    317a:	0a 97       	sbiw	r24, 0x0a	; 10
    317c:	08 f4       	brcc	.+2      	; 0x3180 <Carga_Configuracion_Desde_Eeprom+0x4c8>
    317e:	a9 cd       	rjmp	.-1198   	; 0x2cd2 <Carga_Configuracion_Desde_Eeprom+0x1a>
			Carga_Configuracion_Fabrica_Eeprom (GRUPO_SERIE);
		}
	}

	/* GRUPO_ALARMAS -1- */
	uContIntentosValidacionChecksum = 0;
    3180:	1a 82       	std	Y+2, r1	; 0x02
    3182:	19 82       	std	Y+1, r1	; 0x01
	while (uContIntentosValidacionChecksum < CANT_INTENTOS_VALIDACION_CHECKSUM) {
    3184:	d9 c2       	rjmp	.+1458   	; 0x3738 <Carga_Configuracion_Desde_Eeprom+0xa80>
		sprintf (chBufferTx_USART0, "\n\r%S %d", (wchar_t*)validacion_Alarmas_MSG, uContIntentosValidacionChecksum);
    3186:	8a 81       	ldd	r24, Y+2	; 0x02
    3188:	8f 93       	push	r24
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	8f 93       	push	r24
    318e:	87 e3       	ldi	r24, 0x37	; 55
    3190:	91 e0       	ldi	r25, 0x01	; 1
    3192:	89 2f       	mov	r24, r25
    3194:	8f 93       	push	r24
    3196:	87 e3       	ldi	r24, 0x37	; 55
    3198:	91 e0       	ldi	r25, 0x01	; 1
    319a:	8f 93       	push	r24
    319c:	8a e9       	ldi	r24, 0x9A	; 154
    319e:	91 e0       	ldi	r25, 0x01	; 1
    31a0:	89 2f       	mov	r24, r25
    31a2:	8f 93       	push	r24
    31a4:	8a e9       	ldi	r24, 0x9A	; 154
    31a6:	91 e0       	ldi	r25, 0x01	; 1
    31a8:	8f 93       	push	r24
    31aa:	83 e5       	ldi	r24, 0x53	; 83
    31ac:	93 e0       	ldi	r25, 0x03	; 3
    31ae:	89 2f       	mov	r24, r25
    31b0:	8f 93       	push	r24
    31b2:	83 e5       	ldi	r24, 0x53	; 83
    31b4:	93 e0       	ldi	r25, 0x03	; 3
    31b6:	8f 93       	push	r24
    31b8:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    31bc:	8d b7       	in	r24, 0x3d	; 61
    31be:	9e b7       	in	r25, 0x3e	; 62
    31c0:	08 96       	adiw	r24, 0x08	; 8
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
		Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    31cc:	68 ec       	ldi	r22, 0xC8	; 200
    31ce:	70 e0       	ldi	r23, 0x00	; 0
    31d0:	83 e5       	ldi	r24, 0x53	; 83
    31d2:	93 e0       	ldi	r25, 0x03	; 3
    31d4:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

		uContIntentosValidacionChecksum++;
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	9a 81       	ldd	r25, Y+2	; 0x02
    31dc:	01 96       	adiw	r24, 0x01	; 1
    31de:	9a 83       	std	Y+2, r25	; 0x02
    31e0:	89 83       	std	Y+1, r24	; 0x01

		// leo los valores originales
		Eeprom_a_Float(&flValorAlarmaCond1_Eeprom, &flValorAlarmaCond1);						/* leo los valores originales de la eeprom */
    31e2:	6c e2       	ldi	r22, 0x2C	; 44
    31e4:	74 e0       	ldi	r23, 0x04	; 4
    31e6:	8c e7       	ldi	r24, 0x7C	; 124
    31e8:	94 e0       	ldi	r25, 0x04	; 4
    31ea:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC = Float_a_Checksum(&flValorAlarmaCond1);											/* calculo el checksum de los valores lebantados a la ram */
    31ee:	8c e2       	ldi	r24, 0x2C	; 44
    31f0:	94 e0       	ldi	r25, 0x04	; 4
    31f2:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    31f6:	9e 87       	std	Y+14, r25	; 0x0e
    31f8:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_UnsignedInt(&uTiempoAlarmaCond1_Eeprom, &uTiempoAlarmaCond1);
    31fa:	6d e1       	ldi	r22, 0x1D	; 29
    31fc:	74 e0       	ldi	r23, 0x04	; 4
    31fe:	86 ec       	ldi	r24, 0xC6	; 198
    3200:	94 e0       	ldi	r25, 0x04	; 4
    3202:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC += UnsignedInt_a_Checksum(&uTiempoAlarmaCond1);
    3206:	8d e1       	ldi	r24, 0x1D	; 29
    3208:	94 e0       	ldi	r25, 0x04	; 4
    320a:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    320e:	9c 01       	movw	r18, r24
    3210:	8d 85       	ldd	r24, Y+13	; 0x0d
    3212:	9e 85       	ldd	r25, Y+14	; 0x0e
    3214:	82 0f       	add	r24, r18
    3216:	93 1f       	adc	r25, r19
    3218:	9e 87       	std	Y+14, r25	; 0x0e
    321a:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_Float(&flValorAlarmaCond2_Eeprom, &flValorAlarmaCond2);
    321c:	61 e2       	ldi	r22, 0x21	; 33
    321e:	74 e0       	ldi	r23, 0x04	; 4
    3220:	82 e9       	ldi	r24, 0x92	; 146
    3222:	94 e0       	ldi	r25, 0x04	; 4
    3224:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC += Float_a_Checksum(&flValorAlarmaCond2);
    3228:	81 e2       	ldi	r24, 0x21	; 33
    322a:	94 e0       	ldi	r25, 0x04	; 4
    322c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    3230:	9c 01       	movw	r18, r24
    3232:	8d 85       	ldd	r24, Y+13	; 0x0d
    3234:	9e 85       	ldd	r25, Y+14	; 0x0e
    3236:	82 0f       	add	r24, r18
    3238:	93 1f       	adc	r25, r19
    323a:	9e 87       	std	Y+14, r25	; 0x0e
    323c:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_UnsignedInt(&uTiempoAlarmaCond2_Eeprom, &uTiempoAlarmaCond2);
    323e:	60 e3       	ldi	r22, 0x30	; 48
    3240:	74 e0       	ldi	r23, 0x04	; 4
    3242:	8a ed       	ldi	r24, 0xDA	; 218
    3244:	94 e0       	ldi	r25, 0x04	; 4
    3246:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC += UnsignedInt_a_Checksum(&uTiempoAlarmaCond2);
    324a:	80 e3       	ldi	r24, 0x30	; 48
    324c:	94 e0       	ldi	r25, 0x04	; 4
    324e:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3252:	9c 01       	movw	r18, r24
    3254:	8d 85       	ldd	r24, Y+13	; 0x0d
    3256:	9e 85       	ldd	r25, Y+14	; 0x0e
    3258:	82 0f       	add	r24, r18
    325a:	93 1f       	adc	r25, r19
    325c:	9e 87       	std	Y+14, r25	; 0x0e
    325e:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_UnsignedInt(&uTiempoSilenciarAlarma_Eeprom, &uTiempoSilenciarAlarma);
    3260:	6f e1       	ldi	r22, 0x1F	; 31
    3262:	74 e0       	ldi	r23, 0x04	; 4
    3264:	8c ed       	ldi	r24, 0xDC	; 220
    3266:	94 e0       	ldi	r25, 0x04	; 4
    3268:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC += UnsignedInt_a_Checksum(&uTiempoSilenciarAlarma);
    326c:	8f e1       	ldi	r24, 0x1F	; 31
    326e:	94 e0       	ldi	r25, 0x04	; 4
    3270:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3274:	9c 01       	movw	r18, r24
    3276:	8d 85       	ldd	r24, Y+13	; 0x0d
    3278:	9e 85       	ldd	r25, Y+14	; 0x0e
    327a:	82 0f       	add	r24, r18
    327c:	93 1f       	adc	r25, r19
    327e:	9e 87       	std	Y+14, r25	; 0x0e
    3280:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_UnsignedInt (&uChecksumAlarmas_Eeprom, &uCRC_Eeprom);									/* levanto el checksum de la eeprom */
    3282:	ce 01       	movw	r24, r28
    3284:	0f 96       	adiw	r24, 0x0f	; 15
    3286:	bc 01       	movw	r22, r24
    3288:	84 e0       	ldi	r24, 0x04	; 4
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>

		// leo los valores de la copia
		Eeprom_a_Float(&flValorAlarmaCond1_Eeprom_BK, &flValorAlarmaCond1);						/* leo los valores copia de la eeprom */
    3290:	6c e2       	ldi	r22, 0x2C	; 44
    3292:	74 e0       	ldi	r23, 0x04	; 4
    3294:	80 e8       	ldi	r24, 0x80	; 128
    3296:	94 e0       	ldi	r25, 0x04	; 4
    3298:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC_BK = Float_a_Checksum(&flValorAlarmaCond1);										/* calculo el checksum de los valores lebantados a la ram */
    329c:	8c e2       	ldi	r24, 0x2C	; 44
    329e:	94 e0       	ldi	r25, 0x04	; 4
    32a0:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    32a4:	9a 8b       	std	Y+18, r25	; 0x12
    32a6:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_UnsignedInt(&uTiempoAlarmaCond1_Eeprom_BK, &uTiempoAlarmaCond1);
    32a8:	6d e1       	ldi	r22, 0x1D	; 29
    32aa:	74 e0       	ldi	r23, 0x04	; 4
    32ac:	8e ec       	ldi	r24, 0xCE	; 206
    32ae:	94 e0       	ldi	r25, 0x04	; 4
    32b0:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC_BK += UnsignedInt_a_Checksum(&uTiempoAlarmaCond1);
    32b4:	8d e1       	ldi	r24, 0x1D	; 29
    32b6:	94 e0       	ldi	r25, 0x04	; 4
    32b8:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    32bc:	9c 01       	movw	r18, r24
    32be:	89 89       	ldd	r24, Y+17	; 0x11
    32c0:	9a 89       	ldd	r25, Y+18	; 0x12
    32c2:	82 0f       	add	r24, r18
    32c4:	93 1f       	adc	r25, r19
    32c6:	9a 8b       	std	Y+18, r25	; 0x12
    32c8:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_Float(&flValorAlarmaCond2_Eeprom_BK, &flValorAlarmaCond2);
    32ca:	61 e2       	ldi	r22, 0x21	; 33
    32cc:	74 e0       	ldi	r23, 0x04	; 4
    32ce:	8e e9       	ldi	r24, 0x9E	; 158
    32d0:	94 e0       	ldi	r25, 0x04	; 4
    32d2:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC_BK += Float_a_Checksum(&flValorAlarmaCond2);
    32d6:	81 e2       	ldi	r24, 0x21	; 33
    32d8:	94 e0       	ldi	r25, 0x04	; 4
    32da:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    32de:	9c 01       	movw	r18, r24
    32e0:	89 89       	ldd	r24, Y+17	; 0x11
    32e2:	9a 89       	ldd	r25, Y+18	; 0x12
    32e4:	82 0f       	add	r24, r18
    32e6:	93 1f       	adc	r25, r19
    32e8:	9a 8b       	std	Y+18, r25	; 0x12
    32ea:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_UnsignedInt(&uTiempoAlarmaCond2_Eeprom_BK, &uTiempoAlarmaCond2);
    32ec:	60 e3       	ldi	r22, 0x30	; 48
    32ee:	74 e0       	ldi	r23, 0x04	; 4
    32f0:	84 ed       	ldi	r24, 0xD4	; 212
    32f2:	94 e0       	ldi	r25, 0x04	; 4
    32f4:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC_BK += UnsignedInt_a_Checksum(&uTiempoAlarmaCond2);
    32f8:	80 e3       	ldi	r24, 0x30	; 48
    32fa:	94 e0       	ldi	r25, 0x04	; 4
    32fc:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3300:	9c 01       	movw	r18, r24
    3302:	89 89       	ldd	r24, Y+17	; 0x11
    3304:	9a 89       	ldd	r25, Y+18	; 0x12
    3306:	82 0f       	add	r24, r18
    3308:	93 1f       	adc	r25, r19
    330a:	9a 8b       	std	Y+18, r25	; 0x12
    330c:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_UnsignedInt(&uTiempoSilenciarAlarma_Eeprom_BK, &uTiempoSilenciarAlarma);
    330e:	6f e1       	ldi	r22, 0x1F	; 31
    3310:	74 e0       	ldi	r23, 0x04	; 4
    3312:	8a e7       	ldi	r24, 0x7A	; 122
    3314:	94 e0       	ldi	r25, 0x04	; 4
    3316:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC_BK += UnsignedInt_a_Checksum(&uTiempoSilenciarAlarma);
    331a:	8f e1       	ldi	r24, 0x1F	; 31
    331c:	94 e0       	ldi	r25, 0x04	; 4
    331e:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3322:	9c 01       	movw	r18, r24
    3324:	89 89       	ldd	r24, Y+17	; 0x11
    3326:	9a 89       	ldd	r25, Y+18	; 0x12
    3328:	82 0f       	add	r24, r18
    332a:	93 1f       	adc	r25, r19
    332c:	9a 8b       	std	Y+18, r25	; 0x12
    332e:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_UnsignedInt (&uChecksumAlarmas_Eeprom_BK, &uCRC_Eeprom_BK);							/* levanto el checksum de la eeprom */
    3330:	ce 01       	movw	r24, r28
    3332:	43 96       	adiw	r24, 0x13	; 19
    3334:	bc 01       	movw	r22, r24
    3336:	86 e0       	ldi	r24, 0x06	; 6
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>

		// si ambas dan bien
		if ((uCRC == uCRC_Eeprom) && (uCRC_BK == uCRC_Eeprom_BK)) {
    333e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3340:	3e 85       	ldd	r19, Y+14	; 0x0e
    3342:	8f 85       	ldd	r24, Y+15	; 0x0f
    3344:	98 89       	ldd	r25, Y+16	; 0x10
    3346:	28 17       	cp	r18, r24
    3348:	39 07       	cpc	r19, r25
    334a:	09 f0       	breq	.+2      	; 0x334e <Carga_Configuracion_Desde_Eeprom+0x696>
    334c:	4f c0       	rjmp	.+158    	; 0x33ec <Carga_Configuracion_Desde_Eeprom+0x734>
    334e:	29 89       	ldd	r18, Y+17	; 0x11
    3350:	3a 89       	ldd	r19, Y+18	; 0x12
    3352:	8b 89       	ldd	r24, Y+19	; 0x13
    3354:	9c 89       	ldd	r25, Y+20	; 0x14
    3356:	28 17       	cp	r18, r24
    3358:	39 07       	cpc	r19, r25
    335a:	09 f0       	breq	.+2      	; 0x335e <Carga_Configuracion_Desde_Eeprom+0x6a6>
    335c:	47 c0       	rjmp	.+142    	; 0x33ec <Carga_Configuracion_Desde_Eeprom+0x734>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesOk_MSG);
    335e:	8f e8       	ldi	r24, 0x8F	; 143
    3360:	91 e0       	ldi	r25, 0x01	; 1
    3362:	89 2f       	mov	r24, r25
    3364:	8f 93       	push	r24
    3366:	8f e8       	ldi	r24, 0x8F	; 143
    3368:	91 e0       	ldi	r25, 0x01	; 1
    336a:	8f 93       	push	r24
    336c:	82 ea       	ldi	r24, 0xA2	; 162
    336e:	91 e0       	ldi	r25, 0x01	; 1
    3370:	89 2f       	mov	r24, r25
    3372:	8f 93       	push	r24
    3374:	82 ea       	ldi	r24, 0xA2	; 162
    3376:	91 e0       	ldi	r25, 0x01	; 1
    3378:	8f 93       	push	r24
    337a:	83 e5       	ldi	r24, 0x53	; 83
    337c:	93 e0       	ldi	r25, 0x03	; 3
    337e:	89 2f       	mov	r24, r25
    3380:	8f 93       	push	r24
    3382:	83 e5       	ldi	r24, 0x53	; 83
    3384:	93 e0       	ldi	r25, 0x03	; 3
    3386:	8f 93       	push	r24
    3388:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    338c:	0f 90       	pop	r0
    338e:	0f 90       	pop	r0
    3390:	0f 90       	pop	r0
    3392:	0f 90       	pop	r0
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    3398:	68 ec       	ldi	r22, 0xC8	; 200
    339a:	70 e0       	ldi	r23, 0x00	; 0
    339c:	83 e5       	ldi	r24, 0x53	; 83
    339e:	93 e0       	ldi	r25, 0x03	; 3
    33a0:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpOK_MSG);
    33a4:	89 ed       	ldi	r24, 0xD9	; 217
    33a6:	91 e0       	ldi	r25, 0x01	; 1
    33a8:	89 2f       	mov	r24, r25
    33aa:	8f 93       	push	r24
    33ac:	89 ed       	ldi	r24, 0xD9	; 217
    33ae:	91 e0       	ldi	r25, 0x01	; 1
    33b0:	8f 93       	push	r24
    33b2:	82 ea       	ldi	r24, 0xA2	; 162
    33b4:	91 e0       	ldi	r25, 0x01	; 1
    33b6:	89 2f       	mov	r24, r25
    33b8:	8f 93       	push	r24
    33ba:	82 ea       	ldi	r24, 0xA2	; 162
    33bc:	91 e0       	ldi	r25, 0x01	; 1
    33be:	8f 93       	push	r24
    33c0:	83 e5       	ldi	r24, 0x53	; 83
    33c2:	93 e0       	ldi	r25, 0x03	; 3
    33c4:	89 2f       	mov	r24, r25
    33c6:	8f 93       	push	r24
    33c8:	83 e5       	ldi	r24, 0x53	; 83
    33ca:	93 e0       	ldi	r25, 0x03	; 3
    33cc:	8f 93       	push	r24
    33ce:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    33d2:	0f 90       	pop	r0
    33d4:	0f 90       	pop	r0
    33d6:	0f 90       	pop	r0
    33d8:	0f 90       	pop	r0
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    33de:	68 ec       	ldi	r22, 0xC8	; 200
    33e0:	70 e0       	ldi	r23, 0x00	; 0
    33e2:	83 e5       	ldi	r24, 0x53	; 83
    33e4:	93 e0       	ldi	r25, 0x03	; 3
    33e6:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			break;
    33ea:	ab c1       	rjmp	.+854    	; 0x3742 <Carga_Configuracion_Desde_Eeprom+0xa8a>
		}
		// si la copia da mal vuelvo a leer el original porque habia dado bien
		else if ((uCRC == uCRC_Eeprom) && (uCRC_BK != uCRC_Eeprom_BK)) {
    33ec:	2d 85       	ldd	r18, Y+13	; 0x0d
    33ee:	3e 85       	ldd	r19, Y+14	; 0x0e
    33f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33f2:	98 89       	ldd	r25, Y+16	; 0x10
    33f4:	28 17       	cp	r18, r24
    33f6:	39 07       	cpc	r19, r25
    33f8:	09 f0       	breq	.+2      	; 0x33fc <Carga_Configuracion_Desde_Eeprom+0x744>
    33fa:	d3 c0       	rjmp	.+422    	; 0x35a2 <Carga_Configuracion_Desde_Eeprom+0x8ea>
    33fc:	29 89       	ldd	r18, Y+17	; 0x11
    33fe:	3a 89       	ldd	r19, Y+18	; 0x12
    3400:	8b 89       	ldd	r24, Y+19	; 0x13
    3402:	9c 89       	ldd	r25, Y+20	; 0x14
    3404:	28 17       	cp	r18, r24
    3406:	39 07       	cpc	r19, r25
    3408:	09 f4       	brne	.+2      	; 0x340c <Carga_Configuracion_Desde_Eeprom+0x754>
    340a:	cb c0       	rjmp	.+406    	; 0x35a2 <Carga_Configuracion_Desde_Eeprom+0x8ea>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesOk_MSG);
    340c:	8f e8       	ldi	r24, 0x8F	; 143
    340e:	91 e0       	ldi	r25, 0x01	; 1
    3410:	89 2f       	mov	r24, r25
    3412:	8f 93       	push	r24
    3414:	8f e8       	ldi	r24, 0x8F	; 143
    3416:	91 e0       	ldi	r25, 0x01	; 1
    3418:	8f 93       	push	r24
    341a:	82 ea       	ldi	r24, 0xA2	; 162
    341c:	91 e0       	ldi	r25, 0x01	; 1
    341e:	89 2f       	mov	r24, r25
    3420:	8f 93       	push	r24
    3422:	82 ea       	ldi	r24, 0xA2	; 162
    3424:	91 e0       	ldi	r25, 0x01	; 1
    3426:	8f 93       	push	r24
    3428:	83 e5       	ldi	r24, 0x53	; 83
    342a:	93 e0       	ldi	r25, 0x03	; 3
    342c:	89 2f       	mov	r24, r25
    342e:	8f 93       	push	r24
    3430:	83 e5       	ldi	r24, 0x53	; 83
    3432:	93 e0       	ldi	r25, 0x03	; 3
    3434:	8f 93       	push	r24
    3436:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    343a:	0f 90       	pop	r0
    343c:	0f 90       	pop	r0
    343e:	0f 90       	pop	r0
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    3446:	68 ec       	ldi	r22, 0xC8	; 200
    3448:	70 e0       	ldi	r23, 0x00	; 0
    344a:	83 e5       	ldi	r24, 0x53	; 83
    344c:	93 e0       	ldi	r25, 0x03	; 3
    344e:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpError_MSG);
    3452:	84 ea       	ldi	r24, 0xA4	; 164
    3454:	91 e0       	ldi	r25, 0x01	; 1
    3456:	89 2f       	mov	r24, r25
    3458:	8f 93       	push	r24
    345a:	84 ea       	ldi	r24, 0xA4	; 164
    345c:	91 e0       	ldi	r25, 0x01	; 1
    345e:	8f 93       	push	r24
    3460:	82 ea       	ldi	r24, 0xA2	; 162
    3462:	91 e0       	ldi	r25, 0x01	; 1
    3464:	89 2f       	mov	r24, r25
    3466:	8f 93       	push	r24
    3468:	82 ea       	ldi	r24, 0xA2	; 162
    346a:	91 e0       	ldi	r25, 0x01	; 1
    346c:	8f 93       	push	r24
    346e:	83 e5       	ldi	r24, 0x53	; 83
    3470:	93 e0       	ldi	r25, 0x03	; 3
    3472:	89 2f       	mov	r24, r25
    3474:	8f 93       	push	r24
    3476:	83 e5       	ldi	r24, 0x53	; 83
    3478:	93 e0       	ldi	r25, 0x03	; 3
    347a:	8f 93       	push	r24
    347c:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    3480:	0f 90       	pop	r0
    3482:	0f 90       	pop	r0
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    348c:	68 ec       	ldi	r22, 0xC8	; 200
    348e:	70 e0       	ldi	r23, 0x00	; 0
    3490:	83 e5       	ldi	r24, 0x53	; 83
    3492:	93 e0       	ldi	r25, 0x03	; 3
    3494:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			// leo los valores originales nuevamente
			Eeprom_a_Float(&flValorAlarmaCond1_Eeprom, &flValorAlarmaCond1);						/* leo los valores originales de la eeprom */
    3498:	6c e2       	ldi	r22, 0x2C	; 44
    349a:	74 e0       	ldi	r23, 0x04	; 4
    349c:	8c e7       	ldi	r24, 0x7C	; 124
    349e:	94 e0       	ldi	r25, 0x04	; 4
    34a0:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
			uCRC = Float_a_Checksum(&flValorAlarmaCond1);											/* calculo el checksum de los valores lebantados a la ram */
    34a4:	8c e2       	ldi	r24, 0x2C	; 44
    34a6:	94 e0       	ldi	r25, 0x04	; 4
    34a8:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    34ac:	9e 87       	std	Y+14, r25	; 0x0e
    34ae:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_UnsignedInt(&uTiempoAlarmaCond1_Eeprom, &uTiempoAlarmaCond1);
    34b0:	6d e1       	ldi	r22, 0x1D	; 29
    34b2:	74 e0       	ldi	r23, 0x04	; 4
    34b4:	86 ec       	ldi	r24, 0xC6	; 198
    34b6:	94 e0       	ldi	r25, 0x04	; 4
    34b8:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
			uCRC += UnsignedInt_a_Checksum(&uTiempoAlarmaCond1);
    34bc:	8d e1       	ldi	r24, 0x1D	; 29
    34be:	94 e0       	ldi	r25, 0x04	; 4
    34c0:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    34c4:	9c 01       	movw	r18, r24
    34c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ca:	82 0f       	add	r24, r18
    34cc:	93 1f       	adc	r25, r19
    34ce:	9e 87       	std	Y+14, r25	; 0x0e
    34d0:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_Float(&flValorAlarmaCond2_Eeprom, &flValorAlarmaCond2);
    34d2:	61 e2       	ldi	r22, 0x21	; 33
    34d4:	74 e0       	ldi	r23, 0x04	; 4
    34d6:	82 e9       	ldi	r24, 0x92	; 146
    34d8:	94 e0       	ldi	r25, 0x04	; 4
    34da:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
			uCRC += Float_a_Checksum(&flValorAlarmaCond2);
    34de:	81 e2       	ldi	r24, 0x21	; 33
    34e0:	94 e0       	ldi	r25, 0x04	; 4
    34e2:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    34e6:	9c 01       	movw	r18, r24
    34e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ec:	82 0f       	add	r24, r18
    34ee:	93 1f       	adc	r25, r19
    34f0:	9e 87       	std	Y+14, r25	; 0x0e
    34f2:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_UnsignedInt(&uTiempoAlarmaCond2_Eeprom, &uTiempoAlarmaCond2);
    34f4:	60 e3       	ldi	r22, 0x30	; 48
    34f6:	74 e0       	ldi	r23, 0x04	; 4
    34f8:	8a ed       	ldi	r24, 0xDA	; 218
    34fa:	94 e0       	ldi	r25, 0x04	; 4
    34fc:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
			uCRC += UnsignedInt_a_Checksum(&uTiempoAlarmaCond2);
    3500:	80 e3       	ldi	r24, 0x30	; 48
    3502:	94 e0       	ldi	r25, 0x04	; 4
    3504:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3508:	9c 01       	movw	r18, r24
    350a:	8d 85       	ldd	r24, Y+13	; 0x0d
    350c:	9e 85       	ldd	r25, Y+14	; 0x0e
    350e:	82 0f       	add	r24, r18
    3510:	93 1f       	adc	r25, r19
    3512:	9e 87       	std	Y+14, r25	; 0x0e
    3514:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_UnsignedInt(&uTiempoSilenciarAlarma_Eeprom, &uTiempoSilenciarAlarma);
    3516:	6f e1       	ldi	r22, 0x1F	; 31
    3518:	74 e0       	ldi	r23, 0x04	; 4
    351a:	8c ed       	ldi	r24, 0xDC	; 220
    351c:	94 e0       	ldi	r25, 0x04	; 4
    351e:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
			uCRC += UnsignedInt_a_Checksum(&uTiempoSilenciarAlarma);
    3522:	8f e1       	ldi	r24, 0x1F	; 31
    3524:	94 e0       	ldi	r25, 0x04	; 4
    3526:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    352a:	9c 01       	movw	r18, r24
    352c:	8d 85       	ldd	r24, Y+13	; 0x0d
    352e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3530:	82 0f       	add	r24, r18
    3532:	93 1f       	adc	r25, r19
    3534:	9e 87       	std	Y+14, r25	; 0x0e
    3536:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_UnsignedInt (&uChecksumAlarmas_Eeprom, &uCRC_Eeprom);									/* levanto el checksum de la eeprom */
    3538:	ce 01       	movw	r24, r28
    353a:	0f 96       	adiw	r24, 0x0f	; 15
    353c:	bc 01       	movw	r22, r24
    353e:	84 e0       	ldi	r24, 0x04	; 4
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>

			// si lei bien los originales grabo la copia sobre el backup
			if (uCRC == uCRC_Eeprom) {
    3546:	2d 85       	ldd	r18, Y+13	; 0x0d
    3548:	3e 85       	ldd	r19, Y+14	; 0x0e
    354a:	8f 85       	ldd	r24, Y+15	; 0x0f
    354c:	98 89       	ldd	r25, Y+16	; 0x10
    354e:	28 17       	cp	r18, r24
    3550:	39 07       	cpc	r19, r25
    3552:	31 f5       	brne	.+76     	; 0x35a0 <Carga_Configuracion_Desde_Eeprom+0x8e8>
				Float_a_Eeprom(&flValorAlarmaCond1_Eeprom_BK, &flValorAlarmaCond1);
    3554:	6c e2       	ldi	r22, 0x2C	; 44
    3556:	74 e0       	ldi	r23, 0x04	; 4
    3558:	80 e8       	ldi	r24, 0x80	; 128
    355a:	94 e0       	ldi	r25, 0x04	; 4
    355c:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
				UnsignedInt_a_Eeprom(&uTiempoAlarmaCond1_Eeprom_BK, &uTiempoAlarmaCond1);
    3560:	6d e1       	ldi	r22, 0x1D	; 29
    3562:	74 e0       	ldi	r23, 0x04	; 4
    3564:	8e ec       	ldi	r24, 0xCE	; 206
    3566:	94 e0       	ldi	r25, 0x04	; 4
    3568:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
				Float_a_Eeprom(&flValorAlarmaCond2_Eeprom_BK, &flValorAlarmaCond2);
    356c:	61 e2       	ldi	r22, 0x21	; 33
    356e:	74 e0       	ldi	r23, 0x04	; 4
    3570:	8e e9       	ldi	r24, 0x9E	; 158
    3572:	94 e0       	ldi	r25, 0x04	; 4
    3574:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
				UnsignedInt_a_Eeprom(&uTiempoAlarmaCond2_Eeprom_BK, &uTiempoAlarmaCond2);
    3578:	60 e3       	ldi	r22, 0x30	; 48
    357a:	74 e0       	ldi	r23, 0x04	; 4
    357c:	84 ed       	ldi	r24, 0xD4	; 212
    357e:	94 e0       	ldi	r25, 0x04	; 4
    3580:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
				UnsignedInt_a_Eeprom(&uTiempoSilenciarAlarma_Eeprom_BK, &uTiempoSilenciarAlarma);
    3584:	6f e1       	ldi	r22, 0x1F	; 31
    3586:	74 e0       	ldi	r23, 0x04	; 4
    3588:	8a e7       	ldi	r24, 0x7A	; 122
    358a:	94 e0       	ldi	r25, 0x04	; 4
    358c:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
				UnsignedInt_a_Eeprom (&uChecksumAlarmas_Eeprom_BK, &uCRC);
    3590:	ce 01       	movw	r24, r28
    3592:	0d 96       	adiw	r24, 0x0d	; 13
    3594:	bc 01       	movw	r22, r24
    3596:	86 e0       	ldi	r24, 0x06	; 6
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>

				break;
    359e:	d1 c0       	rjmp	.+418    	; 0x3742 <Carga_Configuracion_Desde_Eeprom+0xa8a>
			Eeprom_a_UnsignedInt(&uTiempoSilenciarAlarma_Eeprom, &uTiempoSilenciarAlarma);
			uCRC += UnsignedInt_a_Checksum(&uTiempoSilenciarAlarma);
			Eeprom_a_UnsignedInt (&uChecksumAlarmas_Eeprom, &uCRC_Eeprom);									/* levanto el checksum de la eeprom */

			// si lei bien los originales grabo la copia sobre el backup
			if (uCRC == uCRC_Eeprom) {
    35a0:	cb c0       	rjmp	.+406    	; 0x3738 <Carga_Configuracion_Desde_Eeprom+0xa80>

				break;
			}
		}
		// si el original da mal y la copia bien
		else if ((uCRC != uCRC_Eeprom) && (uCRC_BK == uCRC_Eeprom_BK)) {
    35a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    35a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    35a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    35a8:	98 89       	ldd	r25, Y+16	; 0x10
    35aa:	28 17       	cp	r18, r24
    35ac:	39 07       	cpc	r19, r25
    35ae:	09 f4       	brne	.+2      	; 0x35b2 <Carga_Configuracion_Desde_Eeprom+0x8fa>
    35b0:	74 c0       	rjmp	.+232    	; 0x369a <Carga_Configuracion_Desde_Eeprom+0x9e2>
    35b2:	29 89       	ldd	r18, Y+17	; 0x11
    35b4:	3a 89       	ldd	r19, Y+18	; 0x12
    35b6:	8b 89       	ldd	r24, Y+19	; 0x13
    35b8:	9c 89       	ldd	r25, Y+20	; 0x14
    35ba:	28 17       	cp	r18, r24
    35bc:	39 07       	cpc	r19, r25
    35be:	09 f0       	breq	.+2      	; 0x35c2 <Carga_Configuracion_Desde_Eeprom+0x90a>
    35c0:	6c c0       	rjmp	.+216    	; 0x369a <Carga_Configuracion_Desde_Eeprom+0x9e2>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesError_MSG);
    35c2:	8e eb       	ldi	r24, 0xBE	; 190
    35c4:	91 e0       	ldi	r25, 0x01	; 1
    35c6:	89 2f       	mov	r24, r25
    35c8:	8f 93       	push	r24
    35ca:	8e eb       	ldi	r24, 0xBE	; 190
    35cc:	91 e0       	ldi	r25, 0x01	; 1
    35ce:	8f 93       	push	r24
    35d0:	82 ea       	ldi	r24, 0xA2	; 162
    35d2:	91 e0       	ldi	r25, 0x01	; 1
    35d4:	89 2f       	mov	r24, r25
    35d6:	8f 93       	push	r24
    35d8:	82 ea       	ldi	r24, 0xA2	; 162
    35da:	91 e0       	ldi	r25, 0x01	; 1
    35dc:	8f 93       	push	r24
    35de:	83 e5       	ldi	r24, 0x53	; 83
    35e0:	93 e0       	ldi	r25, 0x03	; 3
    35e2:	89 2f       	mov	r24, r25
    35e4:	8f 93       	push	r24
    35e6:	83 e5       	ldi	r24, 0x53	; 83
    35e8:	93 e0       	ldi	r25, 0x03	; 3
    35ea:	8f 93       	push	r24
    35ec:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    35f0:	0f 90       	pop	r0
    35f2:	0f 90       	pop	r0
    35f4:	0f 90       	pop	r0
    35f6:	0f 90       	pop	r0
    35f8:	0f 90       	pop	r0
    35fa:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    35fc:	68 ec       	ldi	r22, 0xC8	; 200
    35fe:	70 e0       	ldi	r23, 0x00	; 0
    3600:	83 e5       	ldi	r24, 0x53	; 83
    3602:	93 e0       	ldi	r25, 0x03	; 3
    3604:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpOK_MSG);
    3608:	89 ed       	ldi	r24, 0xD9	; 217
    360a:	91 e0       	ldi	r25, 0x01	; 1
    360c:	89 2f       	mov	r24, r25
    360e:	8f 93       	push	r24
    3610:	89 ed       	ldi	r24, 0xD9	; 217
    3612:	91 e0       	ldi	r25, 0x01	; 1
    3614:	8f 93       	push	r24
    3616:	82 ea       	ldi	r24, 0xA2	; 162
    3618:	91 e0       	ldi	r25, 0x01	; 1
    361a:	89 2f       	mov	r24, r25
    361c:	8f 93       	push	r24
    361e:	82 ea       	ldi	r24, 0xA2	; 162
    3620:	91 e0       	ldi	r25, 0x01	; 1
    3622:	8f 93       	push	r24
    3624:	83 e5       	ldi	r24, 0x53	; 83
    3626:	93 e0       	ldi	r25, 0x03	; 3
    3628:	89 2f       	mov	r24, r25
    362a:	8f 93       	push	r24
    362c:	83 e5       	ldi	r24, 0x53	; 83
    362e:	93 e0       	ldi	r25, 0x03	; 3
    3630:	8f 93       	push	r24
    3632:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    3642:	68 ec       	ldi	r22, 0xC8	; 200
    3644:	70 e0       	ldi	r23, 0x00	; 0
    3646:	83 e5       	ldi	r24, 0x53	; 83
    3648:	93 e0       	ldi	r25, 0x03	; 3
    364a:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			// grabo el backup sobre los originales
			Float_a_Eeprom(&flValorAlarmaCond1_Eeprom, &flValorAlarmaCond1);
    364e:	6c e2       	ldi	r22, 0x2C	; 44
    3650:	74 e0       	ldi	r23, 0x04	; 4
    3652:	8c e7       	ldi	r24, 0x7C	; 124
    3654:	94 e0       	ldi	r25, 0x04	; 4
    3656:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
			UnsignedInt_a_Eeprom(&uTiempoAlarmaCond1_Eeprom, &uTiempoAlarmaCond1);
    365a:	6d e1       	ldi	r22, 0x1D	; 29
    365c:	74 e0       	ldi	r23, 0x04	; 4
    365e:	86 ec       	ldi	r24, 0xC6	; 198
    3660:	94 e0       	ldi	r25, 0x04	; 4
    3662:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
			Float_a_Eeprom(&flValorAlarmaCond2_Eeprom, &flValorAlarmaCond2);
    3666:	61 e2       	ldi	r22, 0x21	; 33
    3668:	74 e0       	ldi	r23, 0x04	; 4
    366a:	82 e9       	ldi	r24, 0x92	; 146
    366c:	94 e0       	ldi	r25, 0x04	; 4
    366e:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
			UnsignedInt_a_Eeprom(&uTiempoAlarmaCond2_Eeprom, &uTiempoAlarmaCond2);
    3672:	60 e3       	ldi	r22, 0x30	; 48
    3674:	74 e0       	ldi	r23, 0x04	; 4
    3676:	8a ed       	ldi	r24, 0xDA	; 218
    3678:	94 e0       	ldi	r25, 0x04	; 4
    367a:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
			UnsignedInt_a_Eeprom(&uTiempoSilenciarAlarma_Eeprom, &uTiempoSilenciarAlarma);
    367e:	6f e1       	ldi	r22, 0x1F	; 31
    3680:	74 e0       	ldi	r23, 0x04	; 4
    3682:	8c ed       	ldi	r24, 0xDC	; 220
    3684:	94 e0       	ldi	r25, 0x04	; 4
    3686:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
			UnsignedInt_a_Eeprom (&uChecksumAlarmas_Eeprom, &uCRC_BK);
    368a:	ce 01       	movw	r24, r28
    368c:	41 96       	adiw	r24, 0x11	; 17
    368e:	bc 01       	movw	r22, r24
    3690:	84 e0       	ldi	r24, 0x04	; 4
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>

			break;
    3698:	54 c0       	rjmp	.+168    	; 0x3742 <Carga_Configuracion_Desde_Eeprom+0xa8a>
		}
		// si ambas dan mal y agote los intentos
		else if (uContIntentosValidacionChecksum == CANT_INTENTOS_VALIDACION_CHECKSUM){
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	9a 81       	ldd	r25, Y+2	; 0x02
    369e:	0a 97       	sbiw	r24, 0x0a	; 10
    36a0:	09 f0       	breq	.+2      	; 0x36a4 <Carga_Configuracion_Desde_Eeprom+0x9ec>
    36a2:	4a c0       	rjmp	.+148    	; 0x3738 <Carga_Configuracion_Desde_Eeprom+0xa80>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesError_MSG);
    36a4:	8e eb       	ldi	r24, 0xBE	; 190
    36a6:	91 e0       	ldi	r25, 0x01	; 1
    36a8:	89 2f       	mov	r24, r25
    36aa:	8f 93       	push	r24
    36ac:	8e eb       	ldi	r24, 0xBE	; 190
    36ae:	91 e0       	ldi	r25, 0x01	; 1
    36b0:	8f 93       	push	r24
    36b2:	82 ea       	ldi	r24, 0xA2	; 162
    36b4:	91 e0       	ldi	r25, 0x01	; 1
    36b6:	89 2f       	mov	r24, r25
    36b8:	8f 93       	push	r24
    36ba:	82 ea       	ldi	r24, 0xA2	; 162
    36bc:	91 e0       	ldi	r25, 0x01	; 1
    36be:	8f 93       	push	r24
    36c0:	83 e5       	ldi	r24, 0x53	; 83
    36c2:	93 e0       	ldi	r25, 0x03	; 3
    36c4:	89 2f       	mov	r24, r25
    36c6:	8f 93       	push	r24
    36c8:	83 e5       	ldi	r24, 0x53	; 83
    36ca:	93 e0       	ldi	r25, 0x03	; 3
    36cc:	8f 93       	push	r24
    36ce:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    36de:	68 ec       	ldi	r22, 0xC8	; 200
    36e0:	70 e0       	ldi	r23, 0x00	; 0
    36e2:	83 e5       	ldi	r24, 0x53	; 83
    36e4:	93 e0       	ldi	r25, 0x03	; 3
    36e6:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpError_MSG);
    36ea:	84 ea       	ldi	r24, 0xA4	; 164
    36ec:	91 e0       	ldi	r25, 0x01	; 1
    36ee:	89 2f       	mov	r24, r25
    36f0:	8f 93       	push	r24
    36f2:	84 ea       	ldi	r24, 0xA4	; 164
    36f4:	91 e0       	ldi	r25, 0x01	; 1
    36f6:	8f 93       	push	r24
    36f8:	82 ea       	ldi	r24, 0xA2	; 162
    36fa:	91 e0       	ldi	r25, 0x01	; 1
    36fc:	89 2f       	mov	r24, r25
    36fe:	8f 93       	push	r24
    3700:	82 ea       	ldi	r24, 0xA2	; 162
    3702:	91 e0       	ldi	r25, 0x01	; 1
    3704:	8f 93       	push	r24
    3706:	83 e5       	ldi	r24, 0x53	; 83
    3708:	93 e0       	ldi	r25, 0x03	; 3
    370a:	89 2f       	mov	r24, r25
    370c:	8f 93       	push	r24
    370e:	83 e5       	ldi	r24, 0x53	; 83
    3710:	93 e0       	ldi	r25, 0x03	; 3
    3712:	8f 93       	push	r24
    3714:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    3718:	0f 90       	pop	r0
    371a:	0f 90       	pop	r0
    371c:	0f 90       	pop	r0
    371e:	0f 90       	pop	r0
    3720:	0f 90       	pop	r0
    3722:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    3724:	68 ec       	ldi	r22, 0xC8	; 200
    3726:	70 e0       	ldi	r23, 0x00	; 0
    3728:	83 e5       	ldi	r24, 0x53	; 83
    372a:	93 e0       	ldi	r25, 0x03	; 3
    372c:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			Carga_Configuracion_Fabrica_Eeprom (GRUPO_ALARMAS);
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	0e 94 69 22 	call	0x44d2	; 0x44d2 <Carga_Configuracion_Fabrica_Eeprom>
		}
	}

	/* GRUPO_ALARMAS -1- */
	uContIntentosValidacionChecksum = 0;
	while (uContIntentosValidacionChecksum < CANT_INTENTOS_VALIDACION_CHECKSUM) {
    3738:	89 81       	ldd	r24, Y+1	; 0x01
    373a:	9a 81       	ldd	r25, Y+2	; 0x02
    373c:	0a 97       	sbiw	r24, 0x0a	; 10
    373e:	08 f4       	brcc	.+2      	; 0x3742 <Carga_Configuracion_Desde_Eeprom+0xa8a>
    3740:	22 cd       	rjmp	.-1468   	; 0x3186 <Carga_Configuracion_Desde_Eeprom+0x4ce>
		}
	}


	/* GRUPO_ADC -2- */
	uContIntentosValidacionChecksum = 0;
    3742:	1a 82       	std	Y+2, r1	; 0x02
    3744:	19 82       	std	Y+1, r1	; 0x01
	while (uContIntentosValidacionChecksum < CANT_INTENTOS_VALIDACION_CHECKSUM) {
    3746:	93 c4       	rjmp	.+2342   	; 0x406e <Carga_Configuracion_Desde_Eeprom+0x13b6>
		sprintf (chBufferTx_USART0, "\n\r%S %d", (wchar_t*)validacion_ADC_MSG, uContIntentosValidacionChecksum);
    3748:	8a 81       	ldd	r24, Y+2	; 0x02
    374a:	8f 93       	push	r24
    374c:	89 81       	ldd	r24, Y+1	; 0x01
    374e:	8f 93       	push	r24
    3750:	87 e5       	ldi	r24, 0x57	; 87
    3752:	91 e0       	ldi	r25, 0x01	; 1
    3754:	89 2f       	mov	r24, r25
    3756:	8f 93       	push	r24
    3758:	87 e5       	ldi	r24, 0x57	; 87
    375a:	91 e0       	ldi	r25, 0x01	; 1
    375c:	8f 93       	push	r24
    375e:	8a e9       	ldi	r24, 0x9A	; 154
    3760:	91 e0       	ldi	r25, 0x01	; 1
    3762:	89 2f       	mov	r24, r25
    3764:	8f 93       	push	r24
    3766:	8a e9       	ldi	r24, 0x9A	; 154
    3768:	91 e0       	ldi	r25, 0x01	; 1
    376a:	8f 93       	push	r24
    376c:	83 e5       	ldi	r24, 0x53	; 83
    376e:	93 e0       	ldi	r25, 0x03	; 3
    3770:	89 2f       	mov	r24, r25
    3772:	8f 93       	push	r24
    3774:	83 e5       	ldi	r24, 0x53	; 83
    3776:	93 e0       	ldi	r25, 0x03	; 3
    3778:	8f 93       	push	r24
    377a:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    377e:	8d b7       	in	r24, 0x3d	; 61
    3780:	9e b7       	in	r25, 0x3e	; 62
    3782:	08 96       	adiw	r24, 0x08	; 8
    3784:	0f b6       	in	r0, 0x3f	; 63
    3786:	f8 94       	cli
    3788:	de bf       	out	0x3e, r29	; 62
    378a:	0f be       	out	0x3f, r0	; 63
    378c:	cd bf       	out	0x3d, r28	; 61
		Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    378e:	68 ec       	ldi	r22, 0xC8	; 200
    3790:	70 e0       	ldi	r23, 0x00	; 0
    3792:	83 e5       	ldi	r24, 0x53	; 83
    3794:	93 e0       	ldi	r25, 0x03	; 3
    3796:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

		uContIntentosValidacionChecksum++;
    379a:	89 81       	ldd	r24, Y+1	; 0x01
    379c:	9a 81       	ldd	r25, Y+2	; 0x02
    379e:	01 96       	adiw	r24, 0x01	; 1
    37a0:	9a 83       	std	Y+2, r25	; 0x02
    37a2:	89 83       	std	Y+1, r24	; 0x01

		// leo los valores originales
		Eeprom_a_UnsignedInt(&uMuestrasADCpwm1_Eeprom, &uMuestrasADCpwm1);
    37a4:	6d ef       	ldi	r22, 0xFD	; 253
    37a6:	74 e0       	ldi	r23, 0x04	; 4
    37a8:	80 e9       	ldi	r24, 0x90	; 144
    37aa:	94 e0       	ldi	r25, 0x04	; 4
    37ac:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC = UnsignedInt_a_Checksum(&uMuestrasADCpwm1);
    37b0:	8d ef       	ldi	r24, 0xFD	; 253
    37b2:	94 e0       	ldi	r25, 0x04	; 4
    37b4:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    37b8:	9e 87       	std	Y+14, r25	; 0x0e
    37ba:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_Float(&flPWM1aMA_Eeprom, &flPWM1aMA);
    37bc:	69 e0       	ldi	r22, 0x09	; 9
    37be:	75 e0       	ldi	r23, 0x05	; 5
    37c0:	80 e7       	ldi	r24, 0x70	; 112
    37c2:	94 e0       	ldi	r25, 0x04	; 4
    37c4:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC += Float_a_Checksum(&flPWM1aMA);
    37c8:	89 e0       	ldi	r24, 0x09	; 9
    37ca:	95 e0       	ldi	r25, 0x05	; 5
    37cc:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    37d0:	9c 01       	movw	r18, r24
    37d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    37d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    37d6:	82 0f       	add	r24, r18
    37d8:	93 1f       	adc	r25, r19
    37da:	9e 87       	std	Y+14, r25	; 0x0e
    37dc:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_UnsignedInt(&uMuestrasADCpwm2_Eeprom, &uMuestrasADCpwm2);
    37de:	68 e1       	ldi	r22, 0x18	; 24
    37e0:	75 e0       	ldi	r23, 0x05	; 5
    37e2:	84 e7       	ldi	r24, 0x74	; 116
    37e4:	94 e0       	ldi	r25, 0x04	; 4
    37e6:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC += UnsignedInt_a_Checksum(&uMuestrasADCpwm2);
    37ea:	88 e1       	ldi	r24, 0x18	; 24
    37ec:	95 e0       	ldi	r25, 0x05	; 5
    37ee:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    37f2:	9c 01       	movw	r18, r24
    37f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    37f8:	82 0f       	add	r24, r18
    37fa:	93 1f       	adc	r25, r19
    37fc:	9e 87       	std	Y+14, r25	; 0x0e
    37fe:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_Float(&flPWM2aMA_Eeprom, &flPWM2aMA);
    3800:	67 e9       	ldi	r22, 0x97	; 151
    3802:	75 e0       	ldi	r23, 0x05	; 5
    3804:	8e ea       	ldi	r24, 0xAE	; 174
    3806:	94 e0       	ldi	r25, 0x04	; 4
    3808:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC += Float_a_Checksum(&flPWM2aMA);
    380c:	87 e9       	ldi	r24, 0x97	; 151
    380e:	95 e0       	ldi	r25, 0x05	; 5
    3810:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    3814:	9c 01       	movw	r18, r24
    3816:	8d 85       	ldd	r24, Y+13	; 0x0d
    3818:	9e 85       	ldd	r25, Y+14	; 0x0e
    381a:	82 0f       	add	r24, r18
    381c:	93 1f       	adc	r25, r19
    381e:	9e 87       	std	Y+14, r25	; 0x0e
    3820:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_UnsignedInt(&uRangoCond1_Eeprom, &uRangoCond1);
    3822:	69 ee       	ldi	r22, 0xE9	; 233
    3824:	74 e0       	ldi	r23, 0x04	; 4
    3826:	84 e6       	ldi	r24, 0x64	; 100
    3828:	94 e0       	ldi	r25, 0x04	; 4
    382a:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC += UnsignedInt_a_Checksum(&uRangoCond1);
    382e:	89 ee       	ldi	r24, 0xE9	; 233
    3830:	94 e0       	ldi	r25, 0x04	; 4
    3832:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3836:	9c 01       	movw	r18, r24
    3838:	8d 85       	ldd	r24, Y+13	; 0x0d
    383a:	9e 85       	ldd	r25, Y+14	; 0x0e
    383c:	82 0f       	add	r24, r18
    383e:	93 1f       	adc	r25, r19
    3840:	9e 87       	std	Y+14, r25	; 0x0e
    3842:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_UnsignedInt(&uMuestrasADCcond1_Eeprom, &uMuestrasADCcond1);
    3844:	61 e0       	ldi	r22, 0x01	; 1
    3846:	75 e0       	ldi	r23, 0x05	; 5
    3848:	8a e9       	ldi	r24, 0x9A	; 154
    384a:	94 e0       	ldi	r25, 0x04	; 4
    384c:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC += UnsignedInt_a_Checksum(&uMuestrasADCcond1);
    3850:	81 e0       	ldi	r24, 0x01	; 1
    3852:	95 e0       	ldi	r25, 0x05	; 5
    3854:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3858:	9c 01       	movw	r18, r24
    385a:	8d 85       	ldd	r24, Y+13	; 0x0d
    385c:	9e 85       	ldd	r25, Y+14	; 0x0e
    385e:	82 0f       	add	r24, r18
    3860:	93 1f       	adc	r25, r19
    3862:	9e 87       	std	Y+14, r25	; 0x0e
    3864:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_Float(&flCond1auS_Eeprom, &flCond1auS);
    3866:	6d e0       	ldi	r22, 0x0D	; 13
    3868:	75 e0       	ldi	r23, 0x05	; 5
    386a:	8e ed       	ldi	r24, 0xDE	; 222
    386c:	94 e0       	ldi	r25, 0x04	; 4
    386e:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC += Float_a_Checksum(&flCond1auS);
    3872:	8d e0       	ldi	r24, 0x0D	; 13
    3874:	95 e0       	ldi	r25, 0x05	; 5
    3876:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    387a:	9c 01       	movw	r18, r24
    387c:	8d 85       	ldd	r24, Y+13	; 0x0d
    387e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3880:	82 0f       	add	r24, r18
    3882:	93 1f       	adc	r25, r19
    3884:	9e 87       	std	Y+14, r25	; 0x0e
    3886:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_Float(&flOffsetCond1_Eeprom, &flOffsetCond1);
    3888:	68 ef       	ldi	r22, 0xF8	; 248
    388a:	74 e0       	ldi	r23, 0x04	; 4
    388c:	80 ec       	ldi	r24, 0xC0	; 192
    388e:	94 e0       	ldi	r25, 0x04	; 4
    3890:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC += Float_a_Checksum(&flOffsetCond1);
    3894:	88 ef       	ldi	r24, 0xF8	; 248
    3896:	94 e0       	ldi	r25, 0x04	; 4
    3898:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    389c:	9c 01       	movw	r18, r24
    389e:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38a2:	82 0f       	add	r24, r18
    38a4:	93 1f       	adc	r25, r19
    38a6:	9e 87       	std	Y+14, r25	; 0x0e
    38a8:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_UnsignedInt(&uRangoCond2_Eeprom, &uRangoCond2);
    38aa:	6d e1       	ldi	r22, 0x1D	; 29
    38ac:	76 e0       	ldi	r23, 0x06	; 6
    38ae:	88 e9       	ldi	r24, 0x98	; 152
    38b0:	94 e0       	ldi	r25, 0x04	; 4
    38b2:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC += UnsignedInt_a_Checksum(&uRangoCond2);
    38b6:	8d e1       	ldi	r24, 0x1D	; 29
    38b8:	96 e0       	ldi	r25, 0x06	; 6
    38ba:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    38be:	9c 01       	movw	r18, r24
    38c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    38c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    38c4:	82 0f       	add	r24, r18
    38c6:	93 1f       	adc	r25, r19
    38c8:	9e 87       	std	Y+14, r25	; 0x0e
    38ca:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_UnsignedInt(&uMuestrasADCcond2_Eeprom, &uMuestrasADCcond2);
    38cc:	66 ef       	ldi	r22, 0xF6	; 246
    38ce:	74 e0       	ldi	r23, 0x04	; 4
    38d0:	88 ec       	ldi	r24, 0xC8	; 200
    38d2:	94 e0       	ldi	r25, 0x04	; 4
    38d4:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC += UnsignedInt_a_Checksum(&uMuestrasADCcond2);
    38d8:	86 ef       	ldi	r24, 0xF6	; 246
    38da:	94 e0       	ldi	r25, 0x04	; 4
    38dc:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    38e0:	9c 01       	movw	r18, r24
    38e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38e6:	82 0f       	add	r24, r18
    38e8:	93 1f       	adc	r25, r19
    38ea:	9e 87       	std	Y+14, r25	; 0x0e
    38ec:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_Float(&flCond2auS_Eeprom, &flCond2auS);
    38ee:	63 e9       	ldi	r22, 0x93	; 147
    38f0:	75 e0       	ldi	r23, 0x05	; 5
    38f2:	84 e8       	ldi	r24, 0x84	; 132
    38f4:	94 e0       	ldi	r25, 0x04	; 4
    38f6:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC += Float_a_Checksum(&flCond2auS);
    38fa:	83 e9       	ldi	r24, 0x93	; 147
    38fc:	95 e0       	ldi	r25, 0x05	; 5
    38fe:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    3902:	9c 01       	movw	r18, r24
    3904:	8d 85       	ldd	r24, Y+13	; 0x0d
    3906:	9e 85       	ldd	r25, Y+14	; 0x0e
    3908:	82 0f       	add	r24, r18
    390a:	93 1f       	adc	r25, r19
    390c:	9e 87       	std	Y+14, r25	; 0x0e
    390e:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_Float(&flOffsetCond2_Eeprom, &flOffsetCond2);
    3910:	63 e0       	ldi	r22, 0x03	; 3
    3912:	75 e0       	ldi	r23, 0x05	; 5
    3914:	80 ed       	ldi	r24, 0xD0	; 208
    3916:	94 e0       	ldi	r25, 0x04	; 4
    3918:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC += Float_a_Checksum(&flOffsetCond2);
    391c:	83 e0       	ldi	r24, 0x03	; 3
    391e:	95 e0       	ldi	r25, 0x05	; 5
    3920:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    3924:	9c 01       	movw	r18, r24
    3926:	8d 85       	ldd	r24, Y+13	; 0x0d
    3928:	9e 85       	ldd	r25, Y+14	; 0x0e
    392a:	82 0f       	add	r24, r18
    392c:	93 1f       	adc	r25, r19
    392e:	9e 87       	std	Y+14, r25	; 0x0e
    3930:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_UnsignedInt (&uChecksumADC_Eeprom, &uCRC_Eeprom);										/* levanto el checksum de la eeprom */
    3932:	ce 01       	movw	r24, r28
    3934:	0f 96       	adiw	r24, 0x0f	; 15
    3936:	bc 01       	movw	r22, r24
    3938:	88 e0       	ldi	r24, 0x08	; 8
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>

		// leo los valores de la copia
		Eeprom_a_UnsignedInt(&uMuestrasADCpwm1_Eeprom_BK, &uMuestrasADCpwm1);
    3940:	6d ef       	ldi	r22, 0xFD	; 253
    3942:	74 e0       	ldi	r23, 0x04	; 4
    3944:	84 ec       	ldi	r24, 0xC4	; 196
    3946:	94 e0       	ldi	r25, 0x04	; 4
    3948:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC_BK = UnsignedInt_a_Checksum(&uMuestrasADCpwm1);
    394c:	8d ef       	ldi	r24, 0xFD	; 253
    394e:	94 e0       	ldi	r25, 0x04	; 4
    3950:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3954:	9a 8b       	std	Y+18, r25	; 0x12
    3956:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_Float(&flPWM1aMA_Eeprom_BK, &flPWM1aMA);
    3958:	69 e0       	ldi	r22, 0x09	; 9
    395a:	75 e0       	ldi	r23, 0x05	; 5
    395c:	8a ec       	ldi	r24, 0xCA	; 202
    395e:	94 e0       	ldi	r25, 0x04	; 4
    3960:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC_BK += Float_a_Checksum(&flPWM1aMA);
    3964:	89 e0       	ldi	r24, 0x09	; 9
    3966:	95 e0       	ldi	r25, 0x05	; 5
    3968:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    396c:	9c 01       	movw	r18, r24
    396e:	89 89       	ldd	r24, Y+17	; 0x11
    3970:	9a 89       	ldd	r25, Y+18	; 0x12
    3972:	82 0f       	add	r24, r18
    3974:	93 1f       	adc	r25, r19
    3976:	9a 8b       	std	Y+18, r25	; 0x12
    3978:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_UnsignedInt(&uMuestrasADCpwm2_Eeprom_BK, &uMuestrasADCpwm2);
    397a:	68 e1       	ldi	r22, 0x18	; 24
    397c:	75 e0       	ldi	r23, 0x05	; 5
    397e:	86 e9       	ldi	r24, 0x96	; 150
    3980:	94 e0       	ldi	r25, 0x04	; 4
    3982:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC_BK += UnsignedInt_a_Checksum(&uMuestrasADCpwm2);
    3986:	88 e1       	ldi	r24, 0x18	; 24
    3988:	95 e0       	ldi	r25, 0x05	; 5
    398a:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    398e:	9c 01       	movw	r18, r24
    3990:	89 89       	ldd	r24, Y+17	; 0x11
    3992:	9a 89       	ldd	r25, Y+18	; 0x12
    3994:	82 0f       	add	r24, r18
    3996:	93 1f       	adc	r25, r19
    3998:	9a 8b       	std	Y+18, r25	; 0x12
    399a:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_Float(&flPWM2aMA_Eeprom_BK, &flPWM2aMA);
    399c:	67 e9       	ldi	r22, 0x97	; 151
    399e:	75 e0       	ldi	r23, 0x05	; 5
    39a0:	84 eb       	ldi	r24, 0xB4	; 180
    39a2:	94 e0       	ldi	r25, 0x04	; 4
    39a4:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC_BK += Float_a_Checksum(&flPWM2aMA);
    39a8:	87 e9       	ldi	r24, 0x97	; 151
    39aa:	95 e0       	ldi	r25, 0x05	; 5
    39ac:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    39b0:	9c 01       	movw	r18, r24
    39b2:	89 89       	ldd	r24, Y+17	; 0x11
    39b4:	9a 89       	ldd	r25, Y+18	; 0x12
    39b6:	82 0f       	add	r24, r18
    39b8:	93 1f       	adc	r25, r19
    39ba:	9a 8b       	std	Y+18, r25	; 0x12
    39bc:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_UnsignedInt(&uRangoCond1_Eeprom_BK, &uRangoCond1);
    39be:	69 ee       	ldi	r22, 0xE9	; 233
    39c0:	74 e0       	ldi	r23, 0x04	; 4
    39c2:	82 e6       	ldi	r24, 0x62	; 98
    39c4:	94 e0       	ldi	r25, 0x04	; 4
    39c6:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC_BK += UnsignedInt_a_Checksum(&uRangoCond1);
    39ca:	89 ee       	ldi	r24, 0xE9	; 233
    39cc:	94 e0       	ldi	r25, 0x04	; 4
    39ce:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    39d2:	9c 01       	movw	r18, r24
    39d4:	89 89       	ldd	r24, Y+17	; 0x11
    39d6:	9a 89       	ldd	r25, Y+18	; 0x12
    39d8:	82 0f       	add	r24, r18
    39da:	93 1f       	adc	r25, r19
    39dc:	9a 8b       	std	Y+18, r25	; 0x12
    39de:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_UnsignedInt(&uMuestrasADCcond1_Eeprom_BK, &uMuestrasADCcond1);
    39e0:	61 e0       	ldi	r22, 0x01	; 1
    39e2:	75 e0       	ldi	r23, 0x05	; 5
    39e4:	8a e8       	ldi	r24, 0x8A	; 138
    39e6:	94 e0       	ldi	r25, 0x04	; 4
    39e8:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC_BK += UnsignedInt_a_Checksum(&uMuestrasADCcond1);
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	95 e0       	ldi	r25, 0x05	; 5
    39f0:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    39f4:	9c 01       	movw	r18, r24
    39f6:	89 89       	ldd	r24, Y+17	; 0x11
    39f8:	9a 89       	ldd	r25, Y+18	; 0x12
    39fa:	82 0f       	add	r24, r18
    39fc:	93 1f       	adc	r25, r19
    39fe:	9a 8b       	std	Y+18, r25	; 0x12
    3a00:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_Float(&flCond1auS_Eeprom_BK, &flCond1auS);
    3a02:	6d e0       	ldi	r22, 0x0D	; 13
    3a04:	75 e0       	ldi	r23, 0x05	; 5
    3a06:	8c eb       	ldi	r24, 0xBC	; 188
    3a08:	94 e0       	ldi	r25, 0x04	; 4
    3a0a:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC_BK += Float_a_Checksum(&flCond1auS);
    3a0e:	8d e0       	ldi	r24, 0x0D	; 13
    3a10:	95 e0       	ldi	r25, 0x05	; 5
    3a12:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    3a16:	9c 01       	movw	r18, r24
    3a18:	89 89       	ldd	r24, Y+17	; 0x11
    3a1a:	9a 89       	ldd	r25, Y+18	; 0x12
    3a1c:	82 0f       	add	r24, r18
    3a1e:	93 1f       	adc	r25, r19
    3a20:	9a 8b       	std	Y+18, r25	; 0x12
    3a22:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_Float(&flOffsetCond1_Eeprom_BK, &flOffsetCond1);
    3a24:	68 ef       	ldi	r22, 0xF8	; 248
    3a26:	74 e0       	ldi	r23, 0x04	; 4
    3a28:	86 ed       	ldi	r24, 0xD6	; 214
    3a2a:	94 e0       	ldi	r25, 0x04	; 4
    3a2c:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC_BK += Float_a_Checksum(&flOffsetCond1);
    3a30:	88 ef       	ldi	r24, 0xF8	; 248
    3a32:	94 e0       	ldi	r25, 0x04	; 4
    3a34:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    3a38:	9c 01       	movw	r18, r24
    3a3a:	89 89       	ldd	r24, Y+17	; 0x11
    3a3c:	9a 89       	ldd	r25, Y+18	; 0x12
    3a3e:	82 0f       	add	r24, r18
    3a40:	93 1f       	adc	r25, r19
    3a42:	9a 8b       	std	Y+18, r25	; 0x12
    3a44:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_UnsignedInt(&uRangoCond2_Eeprom_BK, &uRangoCond2);
    3a46:	6d e1       	ldi	r22, 0x1D	; 29
    3a48:	76 e0       	ldi	r23, 0x06	; 6
    3a4a:	88 eb       	ldi	r24, 0xB8	; 184
    3a4c:	94 e0       	ldi	r25, 0x04	; 4
    3a4e:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC_BK += UnsignedInt_a_Checksum(&uRangoCond2);
    3a52:	8d e1       	ldi	r24, 0x1D	; 29
    3a54:	96 e0       	ldi	r25, 0x06	; 6
    3a56:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3a5a:	9c 01       	movw	r18, r24
    3a5c:	89 89       	ldd	r24, Y+17	; 0x11
    3a5e:	9a 89       	ldd	r25, Y+18	; 0x12
    3a60:	82 0f       	add	r24, r18
    3a62:	93 1f       	adc	r25, r19
    3a64:	9a 8b       	std	Y+18, r25	; 0x12
    3a66:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_UnsignedInt(&uMuestrasADCcond2_Eeprom_BK, &uMuestrasADCcond2);
    3a68:	66 ef       	ldi	r22, 0xF6	; 246
    3a6a:	74 e0       	ldi	r23, 0x04	; 4
    3a6c:	8c e9       	ldi	r24, 0x9C	; 156
    3a6e:	94 e0       	ldi	r25, 0x04	; 4
    3a70:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC_BK += UnsignedInt_a_Checksum(&uMuestrasADCcond2);
    3a74:	86 ef       	ldi	r24, 0xF6	; 246
    3a76:	94 e0       	ldi	r25, 0x04	; 4
    3a78:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3a7c:	9c 01       	movw	r18, r24
    3a7e:	89 89       	ldd	r24, Y+17	; 0x11
    3a80:	9a 89       	ldd	r25, Y+18	; 0x12
    3a82:	82 0f       	add	r24, r18
    3a84:	93 1f       	adc	r25, r19
    3a86:	9a 8b       	std	Y+18, r25	; 0x12
    3a88:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_Float(&flCond2auS_Eeprom_BK, &flCond2auS);
    3a8a:	63 e9       	ldi	r22, 0x93	; 147
    3a8c:	75 e0       	ldi	r23, 0x05	; 5
    3a8e:	8c e8       	ldi	r24, 0x8C	; 140
    3a90:	94 e0       	ldi	r25, 0x04	; 4
    3a92:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC_BK += Float_a_Checksum(&flCond2auS);
    3a96:	83 e9       	ldi	r24, 0x93	; 147
    3a98:	95 e0       	ldi	r25, 0x05	; 5
    3a9a:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    3a9e:	9c 01       	movw	r18, r24
    3aa0:	89 89       	ldd	r24, Y+17	; 0x11
    3aa2:	9a 89       	ldd	r25, Y+18	; 0x12
    3aa4:	82 0f       	add	r24, r18
    3aa6:	93 1f       	adc	r25, r19
    3aa8:	9a 8b       	std	Y+18, r25	; 0x12
    3aaa:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_Float(&flOffsetCond2_Eeprom_BK, &flOffsetCond2);
    3aac:	63 e0       	ldi	r22, 0x03	; 3
    3aae:	75 e0       	ldi	r23, 0x05	; 5
    3ab0:	86 e7       	ldi	r24, 0x76	; 118
    3ab2:	94 e0       	ldi	r25, 0x04	; 4
    3ab4:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
		uCRC_BK += Float_a_Checksum(&flOffsetCond2);
    3ab8:	83 e0       	ldi	r24, 0x03	; 3
    3aba:	95 e0       	ldi	r25, 0x05	; 5
    3abc:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    3ac0:	9c 01       	movw	r18, r24
    3ac2:	89 89       	ldd	r24, Y+17	; 0x11
    3ac4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ac6:	82 0f       	add	r24, r18
    3ac8:	93 1f       	adc	r25, r19
    3aca:	9a 8b       	std	Y+18, r25	; 0x12
    3acc:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_UnsignedInt (&uChecksumADC_Eeprom_BK, &uCRC_Eeprom_BK);										/* levanto el checksum de la eeprom */
    3ace:	ce 01       	movw	r24, r28
    3ad0:	43 96       	adiw	r24, 0x13	; 19
    3ad2:	bc 01       	movw	r22, r24
    3ad4:	8a e0       	ldi	r24, 0x0A	; 10
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>

		// si ambas dan bien
		if ((uCRC == uCRC_Eeprom) && (uCRC_BK == uCRC_Eeprom_BK)) {
    3adc:	2d 85       	ldd	r18, Y+13	; 0x0d
    3ade:	3e 85       	ldd	r19, Y+14	; 0x0e
    3ae0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ae2:	98 89       	ldd	r25, Y+16	; 0x10
    3ae4:	28 17       	cp	r18, r24
    3ae6:	39 07       	cpc	r19, r25
    3ae8:	09 f0       	breq	.+2      	; 0x3aec <Carga_Configuracion_Desde_Eeprom+0xe34>
    3aea:	4f c0       	rjmp	.+158    	; 0x3b8a <Carga_Configuracion_Desde_Eeprom+0xed2>
    3aec:	29 89       	ldd	r18, Y+17	; 0x11
    3aee:	3a 89       	ldd	r19, Y+18	; 0x12
    3af0:	8b 89       	ldd	r24, Y+19	; 0x13
    3af2:	9c 89       	ldd	r25, Y+20	; 0x14
    3af4:	28 17       	cp	r18, r24
    3af6:	39 07       	cpc	r19, r25
    3af8:	09 f0       	breq	.+2      	; 0x3afc <Carga_Configuracion_Desde_Eeprom+0xe44>
    3afa:	47 c0       	rjmp	.+142    	; 0x3b8a <Carga_Configuracion_Desde_Eeprom+0xed2>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesOk_MSG);
    3afc:	8f e8       	ldi	r24, 0x8F	; 143
    3afe:	91 e0       	ldi	r25, 0x01	; 1
    3b00:	89 2f       	mov	r24, r25
    3b02:	8f 93       	push	r24
    3b04:	8f e8       	ldi	r24, 0x8F	; 143
    3b06:	91 e0       	ldi	r25, 0x01	; 1
    3b08:	8f 93       	push	r24
    3b0a:	82 ea       	ldi	r24, 0xA2	; 162
    3b0c:	91 e0       	ldi	r25, 0x01	; 1
    3b0e:	89 2f       	mov	r24, r25
    3b10:	8f 93       	push	r24
    3b12:	82 ea       	ldi	r24, 0xA2	; 162
    3b14:	91 e0       	ldi	r25, 0x01	; 1
    3b16:	8f 93       	push	r24
    3b18:	83 e5       	ldi	r24, 0x53	; 83
    3b1a:	93 e0       	ldi	r25, 0x03	; 3
    3b1c:	89 2f       	mov	r24, r25
    3b1e:	8f 93       	push	r24
    3b20:	83 e5       	ldi	r24, 0x53	; 83
    3b22:	93 e0       	ldi	r25, 0x03	; 3
    3b24:	8f 93       	push	r24
    3b26:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	0f 90       	pop	r0
    3b30:	0f 90       	pop	r0
    3b32:	0f 90       	pop	r0
    3b34:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    3b36:	68 ec       	ldi	r22, 0xC8	; 200
    3b38:	70 e0       	ldi	r23, 0x00	; 0
    3b3a:	83 e5       	ldi	r24, 0x53	; 83
    3b3c:	93 e0       	ldi	r25, 0x03	; 3
    3b3e:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpOK_MSG);
    3b42:	89 ed       	ldi	r24, 0xD9	; 217
    3b44:	91 e0       	ldi	r25, 0x01	; 1
    3b46:	89 2f       	mov	r24, r25
    3b48:	8f 93       	push	r24
    3b4a:	89 ed       	ldi	r24, 0xD9	; 217
    3b4c:	91 e0       	ldi	r25, 0x01	; 1
    3b4e:	8f 93       	push	r24
    3b50:	82 ea       	ldi	r24, 0xA2	; 162
    3b52:	91 e0       	ldi	r25, 0x01	; 1
    3b54:	89 2f       	mov	r24, r25
    3b56:	8f 93       	push	r24
    3b58:	82 ea       	ldi	r24, 0xA2	; 162
    3b5a:	91 e0       	ldi	r25, 0x01	; 1
    3b5c:	8f 93       	push	r24
    3b5e:	83 e5       	ldi	r24, 0x53	; 83
    3b60:	93 e0       	ldi	r25, 0x03	; 3
    3b62:	89 2f       	mov	r24, r25
    3b64:	8f 93       	push	r24
    3b66:	83 e5       	ldi	r24, 0x53	; 83
    3b68:	93 e0       	ldi	r25, 0x03	; 3
    3b6a:	8f 93       	push	r24
    3b6c:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    3b70:	0f 90       	pop	r0
    3b72:	0f 90       	pop	r0
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	0f 90       	pop	r0
    3b7a:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    3b7c:	68 ec       	ldi	r22, 0xC8	; 200
    3b7e:	70 e0       	ldi	r23, 0x00	; 0
    3b80:	83 e5       	ldi	r24, 0x53	; 83
    3b82:	93 e0       	ldi	r25, 0x03	; 3
    3b84:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			break;
    3b88:	77 c2       	rjmp	.+1262   	; 0x4078 <Carga_Configuracion_Desde_Eeprom+0x13c0>
		}
		// si la copia da mal vuelvo a leer el original porque habia dado bien
		else if ((uCRC == uCRC_Eeprom) && (uCRC_BK != uCRC_Eeprom_BK)) {
    3b8a:	2d 85       	ldd	r18, Y+13	; 0x0d
    3b8c:	3e 85       	ldd	r19, Y+14	; 0x0e
    3b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b90:	98 89       	ldd	r25, Y+16	; 0x10
    3b92:	28 17       	cp	r18, r24
    3b94:	39 07       	cpc	r19, r25
    3b96:	09 f0       	breq	.+2      	; 0x3b9a <Carga_Configuracion_Desde_Eeprom+0xee2>
    3b98:	75 c1       	rjmp	.+746    	; 0x3e84 <Carga_Configuracion_Desde_Eeprom+0x11cc>
    3b9a:	29 89       	ldd	r18, Y+17	; 0x11
    3b9c:	3a 89       	ldd	r19, Y+18	; 0x12
    3b9e:	8b 89       	ldd	r24, Y+19	; 0x13
    3ba0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ba2:	28 17       	cp	r18, r24
    3ba4:	39 07       	cpc	r19, r25
    3ba6:	09 f4       	brne	.+2      	; 0x3baa <Carga_Configuracion_Desde_Eeprom+0xef2>
    3ba8:	6d c1       	rjmp	.+730    	; 0x3e84 <Carga_Configuracion_Desde_Eeprom+0x11cc>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesOk_MSG);
    3baa:	8f e8       	ldi	r24, 0x8F	; 143
    3bac:	91 e0       	ldi	r25, 0x01	; 1
    3bae:	89 2f       	mov	r24, r25
    3bb0:	8f 93       	push	r24
    3bb2:	8f e8       	ldi	r24, 0x8F	; 143
    3bb4:	91 e0       	ldi	r25, 0x01	; 1
    3bb6:	8f 93       	push	r24
    3bb8:	82 ea       	ldi	r24, 0xA2	; 162
    3bba:	91 e0       	ldi	r25, 0x01	; 1
    3bbc:	89 2f       	mov	r24, r25
    3bbe:	8f 93       	push	r24
    3bc0:	82 ea       	ldi	r24, 0xA2	; 162
    3bc2:	91 e0       	ldi	r25, 0x01	; 1
    3bc4:	8f 93       	push	r24
    3bc6:	83 e5       	ldi	r24, 0x53	; 83
    3bc8:	93 e0       	ldi	r25, 0x03	; 3
    3bca:	89 2f       	mov	r24, r25
    3bcc:	8f 93       	push	r24
    3bce:	83 e5       	ldi	r24, 0x53	; 83
    3bd0:	93 e0       	ldi	r25, 0x03	; 3
    3bd2:	8f 93       	push	r24
    3bd4:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    3bd8:	0f 90       	pop	r0
    3bda:	0f 90       	pop	r0
    3bdc:	0f 90       	pop	r0
    3bde:	0f 90       	pop	r0
    3be0:	0f 90       	pop	r0
    3be2:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    3be4:	68 ec       	ldi	r22, 0xC8	; 200
    3be6:	70 e0       	ldi	r23, 0x00	; 0
    3be8:	83 e5       	ldi	r24, 0x53	; 83
    3bea:	93 e0       	ldi	r25, 0x03	; 3
    3bec:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpError_MSG);
    3bf0:	84 ea       	ldi	r24, 0xA4	; 164
    3bf2:	91 e0       	ldi	r25, 0x01	; 1
    3bf4:	89 2f       	mov	r24, r25
    3bf6:	8f 93       	push	r24
    3bf8:	84 ea       	ldi	r24, 0xA4	; 164
    3bfa:	91 e0       	ldi	r25, 0x01	; 1
    3bfc:	8f 93       	push	r24
    3bfe:	82 ea       	ldi	r24, 0xA2	; 162
    3c00:	91 e0       	ldi	r25, 0x01	; 1
    3c02:	89 2f       	mov	r24, r25
    3c04:	8f 93       	push	r24
    3c06:	82 ea       	ldi	r24, 0xA2	; 162
    3c08:	91 e0       	ldi	r25, 0x01	; 1
    3c0a:	8f 93       	push	r24
    3c0c:	83 e5       	ldi	r24, 0x53	; 83
    3c0e:	93 e0       	ldi	r25, 0x03	; 3
    3c10:	89 2f       	mov	r24, r25
    3c12:	8f 93       	push	r24
    3c14:	83 e5       	ldi	r24, 0x53	; 83
    3c16:	93 e0       	ldi	r25, 0x03	; 3
    3c18:	8f 93       	push	r24
    3c1a:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    3c1e:	0f 90       	pop	r0
    3c20:	0f 90       	pop	r0
    3c22:	0f 90       	pop	r0
    3c24:	0f 90       	pop	r0
    3c26:	0f 90       	pop	r0
    3c28:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    3c2a:	68 ec       	ldi	r22, 0xC8	; 200
    3c2c:	70 e0       	ldi	r23, 0x00	; 0
    3c2e:	83 e5       	ldi	r24, 0x53	; 83
    3c30:	93 e0       	ldi	r25, 0x03	; 3
    3c32:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			// leo los valores originales nuevamente
			Eeprom_a_UnsignedInt(&uMuestrasADCpwm1_Eeprom, &uMuestrasADCpwm1);
    3c36:	6d ef       	ldi	r22, 0xFD	; 253
    3c38:	74 e0       	ldi	r23, 0x04	; 4
    3c3a:	80 e9       	ldi	r24, 0x90	; 144
    3c3c:	94 e0       	ldi	r25, 0x04	; 4
    3c3e:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
			uCRC = UnsignedInt_a_Checksum(&uMuestrasADCpwm1);
    3c42:	8d ef       	ldi	r24, 0xFD	; 253
    3c44:	94 e0       	ldi	r25, 0x04	; 4
    3c46:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3c4a:	9e 87       	std	Y+14, r25	; 0x0e
    3c4c:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_Float(&flPWM1aMA_Eeprom, &flPWM1aMA);
    3c4e:	69 e0       	ldi	r22, 0x09	; 9
    3c50:	75 e0       	ldi	r23, 0x05	; 5
    3c52:	80 e7       	ldi	r24, 0x70	; 112
    3c54:	94 e0       	ldi	r25, 0x04	; 4
    3c56:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
			uCRC += Float_a_Checksum(&flPWM1aMA);
    3c5a:	89 e0       	ldi	r24, 0x09	; 9
    3c5c:	95 e0       	ldi	r25, 0x05	; 5
    3c5e:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    3c62:	9c 01       	movw	r18, r24
    3c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c66:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c68:	82 0f       	add	r24, r18
    3c6a:	93 1f       	adc	r25, r19
    3c6c:	9e 87       	std	Y+14, r25	; 0x0e
    3c6e:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_UnsignedInt(&uMuestrasADCpwm2_Eeprom, &uMuestrasADCpwm2);
    3c70:	68 e1       	ldi	r22, 0x18	; 24
    3c72:	75 e0       	ldi	r23, 0x05	; 5
    3c74:	84 e7       	ldi	r24, 0x74	; 116
    3c76:	94 e0       	ldi	r25, 0x04	; 4
    3c78:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
			uCRC += UnsignedInt_a_Checksum(&uMuestrasADCpwm2);
    3c7c:	88 e1       	ldi	r24, 0x18	; 24
    3c7e:	95 e0       	ldi	r25, 0x05	; 5
    3c80:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3c84:	9c 01       	movw	r18, r24
    3c86:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c88:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c8a:	82 0f       	add	r24, r18
    3c8c:	93 1f       	adc	r25, r19
    3c8e:	9e 87       	std	Y+14, r25	; 0x0e
    3c90:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_Float(&flPWM2aMA_Eeprom, &flPWM2aMA);
    3c92:	67 e9       	ldi	r22, 0x97	; 151
    3c94:	75 e0       	ldi	r23, 0x05	; 5
    3c96:	8e ea       	ldi	r24, 0xAE	; 174
    3c98:	94 e0       	ldi	r25, 0x04	; 4
    3c9a:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
			uCRC += Float_a_Checksum(&flPWM2aMA);
    3c9e:	87 e9       	ldi	r24, 0x97	; 151
    3ca0:	95 e0       	ldi	r25, 0x05	; 5
    3ca2:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    3ca6:	9c 01       	movw	r18, r24
    3ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cac:	82 0f       	add	r24, r18
    3cae:	93 1f       	adc	r25, r19
    3cb0:	9e 87       	std	Y+14, r25	; 0x0e
    3cb2:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_UnsignedInt(&uRangoCond1_Eeprom, &uRangoCond1);
    3cb4:	69 ee       	ldi	r22, 0xE9	; 233
    3cb6:	74 e0       	ldi	r23, 0x04	; 4
    3cb8:	84 e6       	ldi	r24, 0x64	; 100
    3cba:	94 e0       	ldi	r25, 0x04	; 4
    3cbc:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
			uCRC += UnsignedInt_a_Checksum(&uRangoCond1);
    3cc0:	89 ee       	ldi	r24, 0xE9	; 233
    3cc2:	94 e0       	ldi	r25, 0x04	; 4
    3cc4:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3cc8:	9c 01       	movw	r18, r24
    3cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cce:	82 0f       	add	r24, r18
    3cd0:	93 1f       	adc	r25, r19
    3cd2:	9e 87       	std	Y+14, r25	; 0x0e
    3cd4:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_UnsignedInt(&uMuestrasADCcond1_Eeprom, &uMuestrasADCcond1);
    3cd6:	61 e0       	ldi	r22, 0x01	; 1
    3cd8:	75 e0       	ldi	r23, 0x05	; 5
    3cda:	8a e9       	ldi	r24, 0x9A	; 154
    3cdc:	94 e0       	ldi	r25, 0x04	; 4
    3cde:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
			uCRC += UnsignedInt_a_Checksum(&uMuestrasADCcond1);
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	95 e0       	ldi	r25, 0x05	; 5
    3ce6:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3cea:	9c 01       	movw	r18, r24
    3cec:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cee:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cf0:	82 0f       	add	r24, r18
    3cf2:	93 1f       	adc	r25, r19
    3cf4:	9e 87       	std	Y+14, r25	; 0x0e
    3cf6:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_Float(&flCond1auS_Eeprom, &flCond1auS);
    3cf8:	6d e0       	ldi	r22, 0x0D	; 13
    3cfa:	75 e0       	ldi	r23, 0x05	; 5
    3cfc:	8e ed       	ldi	r24, 0xDE	; 222
    3cfe:	94 e0       	ldi	r25, 0x04	; 4
    3d00:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
			uCRC += Float_a_Checksum(&flCond1auS);
    3d04:	8d e0       	ldi	r24, 0x0D	; 13
    3d06:	95 e0       	ldi	r25, 0x05	; 5
    3d08:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    3d0c:	9c 01       	movw	r18, r24
    3d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d10:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d12:	82 0f       	add	r24, r18
    3d14:	93 1f       	adc	r25, r19
    3d16:	9e 87       	std	Y+14, r25	; 0x0e
    3d18:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_Float(&flOffsetCond1_Eeprom, &flOffsetCond1);
    3d1a:	68 ef       	ldi	r22, 0xF8	; 248
    3d1c:	74 e0       	ldi	r23, 0x04	; 4
    3d1e:	80 ec       	ldi	r24, 0xC0	; 192
    3d20:	94 e0       	ldi	r25, 0x04	; 4
    3d22:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
			uCRC += Float_a_Checksum(&flOffsetCond1);
    3d26:	88 ef       	ldi	r24, 0xF8	; 248
    3d28:	94 e0       	ldi	r25, 0x04	; 4
    3d2a:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    3d2e:	9c 01       	movw	r18, r24
    3d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d34:	82 0f       	add	r24, r18
    3d36:	93 1f       	adc	r25, r19
    3d38:	9e 87       	std	Y+14, r25	; 0x0e
    3d3a:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_UnsignedInt(&uRangoCond2_Eeprom, &uRangoCond2);
    3d3c:	6d e1       	ldi	r22, 0x1D	; 29
    3d3e:	76 e0       	ldi	r23, 0x06	; 6
    3d40:	88 e9       	ldi	r24, 0x98	; 152
    3d42:	94 e0       	ldi	r25, 0x04	; 4
    3d44:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
			uCRC += UnsignedInt_a_Checksum(&uRangoCond2);
    3d48:	8d e1       	ldi	r24, 0x1D	; 29
    3d4a:	96 e0       	ldi	r25, 0x06	; 6
    3d4c:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3d50:	9c 01       	movw	r18, r24
    3d52:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d54:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d56:	82 0f       	add	r24, r18
    3d58:	93 1f       	adc	r25, r19
    3d5a:	9e 87       	std	Y+14, r25	; 0x0e
    3d5c:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_UnsignedInt(&uMuestrasADCcond2_Eeprom, &uMuestrasADCcond2);
    3d5e:	66 ef       	ldi	r22, 0xF6	; 246
    3d60:	74 e0       	ldi	r23, 0x04	; 4
    3d62:	88 ec       	ldi	r24, 0xC8	; 200
    3d64:	94 e0       	ldi	r25, 0x04	; 4
    3d66:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
			uCRC += UnsignedInt_a_Checksum(&uMuestrasADCcond2);
    3d6a:	86 ef       	ldi	r24, 0xF6	; 246
    3d6c:	94 e0       	ldi	r25, 0x04	; 4
    3d6e:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    3d72:	9c 01       	movw	r18, r24
    3d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d78:	82 0f       	add	r24, r18
    3d7a:	93 1f       	adc	r25, r19
    3d7c:	9e 87       	std	Y+14, r25	; 0x0e
    3d7e:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_Float(&flCond2auS_Eeprom, &flCond2auS);
    3d80:	63 e9       	ldi	r22, 0x93	; 147
    3d82:	75 e0       	ldi	r23, 0x05	; 5
    3d84:	84 e8       	ldi	r24, 0x84	; 132
    3d86:	94 e0       	ldi	r25, 0x04	; 4
    3d88:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
			uCRC += Float_a_Checksum(&flCond2auS);
    3d8c:	83 e9       	ldi	r24, 0x93	; 147
    3d8e:	95 e0       	ldi	r25, 0x05	; 5
    3d90:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    3d94:	9c 01       	movw	r18, r24
    3d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d9a:	82 0f       	add	r24, r18
    3d9c:	93 1f       	adc	r25, r19
    3d9e:	9e 87       	std	Y+14, r25	; 0x0e
    3da0:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_Float(&flOffsetCond2_Eeprom, &flOffsetCond2);
    3da2:	63 e0       	ldi	r22, 0x03	; 3
    3da4:	75 e0       	ldi	r23, 0x05	; 5
    3da6:	80 ed       	ldi	r24, 0xD0	; 208
    3da8:	94 e0       	ldi	r25, 0x04	; 4
    3daa:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <Eeprom_a_Float>
			uCRC += Float_a_Checksum(&flOffsetCond2);
    3dae:	83 e0       	ldi	r24, 0x03	; 3
    3db0:	95 e0       	ldi	r25, 0x05	; 5
    3db2:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    3db6:	9c 01       	movw	r18, r24
    3db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dbc:	82 0f       	add	r24, r18
    3dbe:	93 1f       	adc	r25, r19
    3dc0:	9e 87       	std	Y+14, r25	; 0x0e
    3dc2:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_UnsignedInt (&uChecksumADC_Eeprom, &uCRC_Eeprom);										/* levanto el checksum de la eeprom */
    3dc4:	ce 01       	movw	r24, r28
    3dc6:	0f 96       	adiw	r24, 0x0f	; 15
    3dc8:	bc 01       	movw	r22, r24
    3dca:	88 e0       	ldi	r24, 0x08	; 8
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>

			// si lei bien los originales grabo la copia sobre el backup
			if (uCRC == uCRC_Eeprom) {
    3dd2:	2d 85       	ldd	r18, Y+13	; 0x0d
    3dd4:	3e 85       	ldd	r19, Y+14	; 0x0e
    3dd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dd8:	98 89       	ldd	r25, Y+16	; 0x10
    3dda:	28 17       	cp	r18, r24
    3ddc:	39 07       	cpc	r19, r25
    3dde:	09 f0       	breq	.+2      	; 0x3de2 <Carga_Configuracion_Desde_Eeprom+0x112a>
    3de0:	50 c0       	rjmp	.+160    	; 0x3e82 <Carga_Configuracion_Desde_Eeprom+0x11ca>
				UnsignedInt_a_Eeprom(&uMuestrasADCpwm1_Eeprom_BK, &uMuestrasADCpwm1);
    3de2:	6d ef       	ldi	r22, 0xFD	; 253
    3de4:	74 e0       	ldi	r23, 0x04	; 4
    3de6:	84 ec       	ldi	r24, 0xC4	; 196
    3de8:	94 e0       	ldi	r25, 0x04	; 4
    3dea:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
				Float_a_Eeprom(&flPWM1aMA_Eeprom_BK, &flPWM1aMA);
    3dee:	69 e0       	ldi	r22, 0x09	; 9
    3df0:	75 e0       	ldi	r23, 0x05	; 5
    3df2:	8a ec       	ldi	r24, 0xCA	; 202
    3df4:	94 e0       	ldi	r25, 0x04	; 4
    3df6:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
				UnsignedInt_a_Eeprom(&uMuestrasADCpwm2_Eeprom_BK, &uMuestrasADCpwm2);
    3dfa:	68 e1       	ldi	r22, 0x18	; 24
    3dfc:	75 e0       	ldi	r23, 0x05	; 5
    3dfe:	86 e9       	ldi	r24, 0x96	; 150
    3e00:	94 e0       	ldi	r25, 0x04	; 4
    3e02:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
				Float_a_Eeprom(&flPWM2aMA_Eeprom_BK, &flPWM2aMA);
    3e06:	67 e9       	ldi	r22, 0x97	; 151
    3e08:	75 e0       	ldi	r23, 0x05	; 5
    3e0a:	84 eb       	ldi	r24, 0xB4	; 180
    3e0c:	94 e0       	ldi	r25, 0x04	; 4
    3e0e:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
				UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom_BK, &uRangoCond1);
    3e12:	69 ee       	ldi	r22, 0xE9	; 233
    3e14:	74 e0       	ldi	r23, 0x04	; 4
    3e16:	82 e6       	ldi	r24, 0x62	; 98
    3e18:	94 e0       	ldi	r25, 0x04	; 4
    3e1a:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
				UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom_BK, &uMuestrasADCcond1);
    3e1e:	61 e0       	ldi	r22, 0x01	; 1
    3e20:	75 e0       	ldi	r23, 0x05	; 5
    3e22:	8a e8       	ldi	r24, 0x8A	; 138
    3e24:	94 e0       	ldi	r25, 0x04	; 4
    3e26:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
				Float_a_Eeprom(&flCond1auS_Eeprom_BK, &flCond1auS);
    3e2a:	6d e0       	ldi	r22, 0x0D	; 13
    3e2c:	75 e0       	ldi	r23, 0x05	; 5
    3e2e:	8c eb       	ldi	r24, 0xBC	; 188
    3e30:	94 e0       	ldi	r25, 0x04	; 4
    3e32:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
				Float_a_Eeprom(&flOffsetCond1_Eeprom_BK, &flOffsetCond1);
    3e36:	68 ef       	ldi	r22, 0xF8	; 248
    3e38:	74 e0       	ldi	r23, 0x04	; 4
    3e3a:	86 ed       	ldi	r24, 0xD6	; 214
    3e3c:	94 e0       	ldi	r25, 0x04	; 4
    3e3e:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
				UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom_BK, &uRangoCond2);
    3e42:	6d e1       	ldi	r22, 0x1D	; 29
    3e44:	76 e0       	ldi	r23, 0x06	; 6
    3e46:	88 eb       	ldi	r24, 0xB8	; 184
    3e48:	94 e0       	ldi	r25, 0x04	; 4
    3e4a:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
				UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom_BK, &uMuestrasADCcond2);
    3e4e:	66 ef       	ldi	r22, 0xF6	; 246
    3e50:	74 e0       	ldi	r23, 0x04	; 4
    3e52:	8c e9       	ldi	r24, 0x9C	; 156
    3e54:	94 e0       	ldi	r25, 0x04	; 4
    3e56:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
				Float_a_Eeprom(&flCond2auS_Eeprom_BK, &flCond2auS);
    3e5a:	63 e9       	ldi	r22, 0x93	; 147
    3e5c:	75 e0       	ldi	r23, 0x05	; 5
    3e5e:	8c e8       	ldi	r24, 0x8C	; 140
    3e60:	94 e0       	ldi	r25, 0x04	; 4
    3e62:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
				Float_a_Eeprom(&flOffsetCond2_Eeprom_BK, &flOffsetCond2);
    3e66:	63 e0       	ldi	r22, 0x03	; 3
    3e68:	75 e0       	ldi	r23, 0x05	; 5
    3e6a:	86 e7       	ldi	r24, 0x76	; 118
    3e6c:	94 e0       	ldi	r25, 0x04	; 4
    3e6e:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
				UnsignedInt_a_Eeprom(&uChecksumADC_Eeprom_BK, &uCRC);
    3e72:	ce 01       	movw	r24, r28
    3e74:	0d 96       	adiw	r24, 0x0d	; 13
    3e76:	bc 01       	movw	r22, r24
    3e78:	8a e0       	ldi	r24, 0x0A	; 10
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>

				break;
    3e80:	fb c0       	rjmp	.+502    	; 0x4078 <Carga_Configuracion_Desde_Eeprom+0x13c0>
			Eeprom_a_Float(&flOffsetCond2_Eeprom, &flOffsetCond2);
			uCRC += Float_a_Checksum(&flOffsetCond2);
			Eeprom_a_UnsignedInt (&uChecksumADC_Eeprom, &uCRC_Eeprom);										/* levanto el checksum de la eeprom */

			// si lei bien los originales grabo la copia sobre el backup
			if (uCRC == uCRC_Eeprom) {
    3e82:	f5 c0       	rjmp	.+490    	; 0x406e <Carga_Configuracion_Desde_Eeprom+0x13b6>

				break;
			}
		}
		// si el original da mal y la copia bien
		else if ((uCRC != uCRC_Eeprom) && (uCRC_BK == uCRC_Eeprom_BK)) {
    3e84:	2d 85       	ldd	r18, Y+13	; 0x0d
    3e86:	3e 85       	ldd	r19, Y+14	; 0x0e
    3e88:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e8a:	98 89       	ldd	r25, Y+16	; 0x10
    3e8c:	28 17       	cp	r18, r24
    3e8e:	39 07       	cpc	r19, r25
    3e90:	09 f4       	brne	.+2      	; 0x3e94 <Carga_Configuracion_Desde_Eeprom+0x11dc>
    3e92:	9e c0       	rjmp	.+316    	; 0x3fd0 <Carga_Configuracion_Desde_Eeprom+0x1318>
    3e94:	29 89       	ldd	r18, Y+17	; 0x11
    3e96:	3a 89       	ldd	r19, Y+18	; 0x12
    3e98:	8b 89       	ldd	r24, Y+19	; 0x13
    3e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    3e9c:	28 17       	cp	r18, r24
    3e9e:	39 07       	cpc	r19, r25
    3ea0:	09 f0       	breq	.+2      	; 0x3ea4 <Carga_Configuracion_Desde_Eeprom+0x11ec>
    3ea2:	96 c0       	rjmp	.+300    	; 0x3fd0 <Carga_Configuracion_Desde_Eeprom+0x1318>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesError_MSG);
    3ea4:	8e eb       	ldi	r24, 0xBE	; 190
    3ea6:	91 e0       	ldi	r25, 0x01	; 1
    3ea8:	89 2f       	mov	r24, r25
    3eaa:	8f 93       	push	r24
    3eac:	8e eb       	ldi	r24, 0xBE	; 190
    3eae:	91 e0       	ldi	r25, 0x01	; 1
    3eb0:	8f 93       	push	r24
    3eb2:	82 ea       	ldi	r24, 0xA2	; 162
    3eb4:	91 e0       	ldi	r25, 0x01	; 1
    3eb6:	89 2f       	mov	r24, r25
    3eb8:	8f 93       	push	r24
    3eba:	82 ea       	ldi	r24, 0xA2	; 162
    3ebc:	91 e0       	ldi	r25, 0x01	; 1
    3ebe:	8f 93       	push	r24
    3ec0:	83 e5       	ldi	r24, 0x53	; 83
    3ec2:	93 e0       	ldi	r25, 0x03	; 3
    3ec4:	89 2f       	mov	r24, r25
    3ec6:	8f 93       	push	r24
    3ec8:	83 e5       	ldi	r24, 0x53	; 83
    3eca:	93 e0       	ldi	r25, 0x03	; 3
    3ecc:	8f 93       	push	r24
    3ece:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    3ed2:	0f 90       	pop	r0
    3ed4:	0f 90       	pop	r0
    3ed6:	0f 90       	pop	r0
    3ed8:	0f 90       	pop	r0
    3eda:	0f 90       	pop	r0
    3edc:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    3ede:	68 ec       	ldi	r22, 0xC8	; 200
    3ee0:	70 e0       	ldi	r23, 0x00	; 0
    3ee2:	83 e5       	ldi	r24, 0x53	; 83
    3ee4:	93 e0       	ldi	r25, 0x03	; 3
    3ee6:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpOK_MSG);
    3eea:	89 ed       	ldi	r24, 0xD9	; 217
    3eec:	91 e0       	ldi	r25, 0x01	; 1
    3eee:	89 2f       	mov	r24, r25
    3ef0:	8f 93       	push	r24
    3ef2:	89 ed       	ldi	r24, 0xD9	; 217
    3ef4:	91 e0       	ldi	r25, 0x01	; 1
    3ef6:	8f 93       	push	r24
    3ef8:	82 ea       	ldi	r24, 0xA2	; 162
    3efa:	91 e0       	ldi	r25, 0x01	; 1
    3efc:	89 2f       	mov	r24, r25
    3efe:	8f 93       	push	r24
    3f00:	82 ea       	ldi	r24, 0xA2	; 162
    3f02:	91 e0       	ldi	r25, 0x01	; 1
    3f04:	8f 93       	push	r24
    3f06:	83 e5       	ldi	r24, 0x53	; 83
    3f08:	93 e0       	ldi	r25, 0x03	; 3
    3f0a:	89 2f       	mov	r24, r25
    3f0c:	8f 93       	push	r24
    3f0e:	83 e5       	ldi	r24, 0x53	; 83
    3f10:	93 e0       	ldi	r25, 0x03	; 3
    3f12:	8f 93       	push	r24
    3f14:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    3f18:	0f 90       	pop	r0
    3f1a:	0f 90       	pop	r0
    3f1c:	0f 90       	pop	r0
    3f1e:	0f 90       	pop	r0
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    3f24:	68 ec       	ldi	r22, 0xC8	; 200
    3f26:	70 e0       	ldi	r23, 0x00	; 0
    3f28:	83 e5       	ldi	r24, 0x53	; 83
    3f2a:	93 e0       	ldi	r25, 0x03	; 3
    3f2c:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			// grabo el backup sobre los originales
			UnsignedInt_a_Eeprom(&uMuestrasADCpwm1_Eeprom, &uMuestrasADCpwm1);
    3f30:	6d ef       	ldi	r22, 0xFD	; 253
    3f32:	74 e0       	ldi	r23, 0x04	; 4
    3f34:	80 e9       	ldi	r24, 0x90	; 144
    3f36:	94 e0       	ldi	r25, 0x04	; 4
    3f38:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
			Float_a_Eeprom(&flPWM1aMA_Eeprom, &flPWM1aMA);
    3f3c:	69 e0       	ldi	r22, 0x09	; 9
    3f3e:	75 e0       	ldi	r23, 0x05	; 5
    3f40:	80 e7       	ldi	r24, 0x70	; 112
    3f42:	94 e0       	ldi	r25, 0x04	; 4
    3f44:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
			UnsignedInt_a_Eeprom(&uMuestrasADCpwm2_Eeprom, &uMuestrasADCpwm2);
    3f48:	68 e1       	ldi	r22, 0x18	; 24
    3f4a:	75 e0       	ldi	r23, 0x05	; 5
    3f4c:	84 e7       	ldi	r24, 0x74	; 116
    3f4e:	94 e0       	ldi	r25, 0x04	; 4
    3f50:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
			Float_a_Eeprom(&flPWM2aMA_Eeprom, &flPWM2aMA);
    3f54:	67 e9       	ldi	r22, 0x97	; 151
    3f56:	75 e0       	ldi	r23, 0x05	; 5
    3f58:	8e ea       	ldi	r24, 0xAE	; 174
    3f5a:	94 e0       	ldi	r25, 0x04	; 4
    3f5c:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
			UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom, &uRangoCond1);
    3f60:	69 ee       	ldi	r22, 0xE9	; 233
    3f62:	74 e0       	ldi	r23, 0x04	; 4
    3f64:	84 e6       	ldi	r24, 0x64	; 100
    3f66:	94 e0       	ldi	r25, 0x04	; 4
    3f68:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
			UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom, &uMuestrasADCcond1);
    3f6c:	61 e0       	ldi	r22, 0x01	; 1
    3f6e:	75 e0       	ldi	r23, 0x05	; 5
    3f70:	8a e9       	ldi	r24, 0x9A	; 154
    3f72:	94 e0       	ldi	r25, 0x04	; 4
    3f74:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
			Float_a_Eeprom(&flCond1auS_Eeprom, &flCond1auS);
    3f78:	6d e0       	ldi	r22, 0x0D	; 13
    3f7a:	75 e0       	ldi	r23, 0x05	; 5
    3f7c:	8e ed       	ldi	r24, 0xDE	; 222
    3f7e:	94 e0       	ldi	r25, 0x04	; 4
    3f80:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
			Float_a_Eeprom(&flOffsetCond1_Eeprom, &flOffsetCond1);
    3f84:	68 ef       	ldi	r22, 0xF8	; 248
    3f86:	74 e0       	ldi	r23, 0x04	; 4
    3f88:	80 ec       	ldi	r24, 0xC0	; 192
    3f8a:	94 e0       	ldi	r25, 0x04	; 4
    3f8c:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
			UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom, &uRangoCond2);
    3f90:	6d e1       	ldi	r22, 0x1D	; 29
    3f92:	76 e0       	ldi	r23, 0x06	; 6
    3f94:	88 e9       	ldi	r24, 0x98	; 152
    3f96:	94 e0       	ldi	r25, 0x04	; 4
    3f98:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
			UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom, &uMuestrasADCcond2);
    3f9c:	66 ef       	ldi	r22, 0xF6	; 246
    3f9e:	74 e0       	ldi	r23, 0x04	; 4
    3fa0:	88 ec       	ldi	r24, 0xC8	; 200
    3fa2:	94 e0       	ldi	r25, 0x04	; 4
    3fa4:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
			Float_a_Eeprom(&flCond2auS_Eeprom, &flCond2auS);
    3fa8:	63 e9       	ldi	r22, 0x93	; 147
    3faa:	75 e0       	ldi	r23, 0x05	; 5
    3fac:	84 e8       	ldi	r24, 0x84	; 132
    3fae:	94 e0       	ldi	r25, 0x04	; 4
    3fb0:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
			Float_a_Eeprom(&flOffsetCond2_Eeprom, &flOffsetCond2);
    3fb4:	63 e0       	ldi	r22, 0x03	; 3
    3fb6:	75 e0       	ldi	r23, 0x05	; 5
    3fb8:	80 ed       	ldi	r24, 0xD0	; 208
    3fba:	94 e0       	ldi	r25, 0x04	; 4
    3fbc:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
			UnsignedInt_a_Eeprom(&uChecksumADC_Eeprom, &uCRC_BK);
    3fc0:	ce 01       	movw	r24, r28
    3fc2:	41 96       	adiw	r24, 0x11	; 17
    3fc4:	bc 01       	movw	r22, r24
    3fc6:	88 e0       	ldi	r24, 0x08	; 8
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>

			break;
    3fce:	54 c0       	rjmp	.+168    	; 0x4078 <Carga_Configuracion_Desde_Eeprom+0x13c0>
		}
		// si ambas dan mal y agote los intentos
		else if (uContIntentosValidacionChecksum == CANT_INTENTOS_VALIDACION_CHECKSUM){
    3fd0:	89 81       	ldd	r24, Y+1	; 0x01
    3fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd4:	0a 97       	sbiw	r24, 0x0a	; 10
    3fd6:	09 f0       	breq	.+2      	; 0x3fda <Carga_Configuracion_Desde_Eeprom+0x1322>
    3fd8:	4a c0       	rjmp	.+148    	; 0x406e <Carga_Configuracion_Desde_Eeprom+0x13b6>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesError_MSG);
    3fda:	8e eb       	ldi	r24, 0xBE	; 190
    3fdc:	91 e0       	ldi	r25, 0x01	; 1
    3fde:	89 2f       	mov	r24, r25
    3fe0:	8f 93       	push	r24
    3fe2:	8e eb       	ldi	r24, 0xBE	; 190
    3fe4:	91 e0       	ldi	r25, 0x01	; 1
    3fe6:	8f 93       	push	r24
    3fe8:	82 ea       	ldi	r24, 0xA2	; 162
    3fea:	91 e0       	ldi	r25, 0x01	; 1
    3fec:	89 2f       	mov	r24, r25
    3fee:	8f 93       	push	r24
    3ff0:	82 ea       	ldi	r24, 0xA2	; 162
    3ff2:	91 e0       	ldi	r25, 0x01	; 1
    3ff4:	8f 93       	push	r24
    3ff6:	83 e5       	ldi	r24, 0x53	; 83
    3ff8:	93 e0       	ldi	r25, 0x03	; 3
    3ffa:	89 2f       	mov	r24, r25
    3ffc:	8f 93       	push	r24
    3ffe:	83 e5       	ldi	r24, 0x53	; 83
    4000:	93 e0       	ldi	r25, 0x03	; 3
    4002:	8f 93       	push	r24
    4004:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    4008:	0f 90       	pop	r0
    400a:	0f 90       	pop	r0
    400c:	0f 90       	pop	r0
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0
    4012:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    4014:	68 ec       	ldi	r22, 0xC8	; 200
    4016:	70 e0       	ldi	r23, 0x00	; 0
    4018:	83 e5       	ldi	r24, 0x53	; 83
    401a:	93 e0       	ldi	r25, 0x03	; 3
    401c:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpError_MSG);
    4020:	84 ea       	ldi	r24, 0xA4	; 164
    4022:	91 e0       	ldi	r25, 0x01	; 1
    4024:	89 2f       	mov	r24, r25
    4026:	8f 93       	push	r24
    4028:	84 ea       	ldi	r24, 0xA4	; 164
    402a:	91 e0       	ldi	r25, 0x01	; 1
    402c:	8f 93       	push	r24
    402e:	82 ea       	ldi	r24, 0xA2	; 162
    4030:	91 e0       	ldi	r25, 0x01	; 1
    4032:	89 2f       	mov	r24, r25
    4034:	8f 93       	push	r24
    4036:	82 ea       	ldi	r24, 0xA2	; 162
    4038:	91 e0       	ldi	r25, 0x01	; 1
    403a:	8f 93       	push	r24
    403c:	83 e5       	ldi	r24, 0x53	; 83
    403e:	93 e0       	ldi	r25, 0x03	; 3
    4040:	89 2f       	mov	r24, r25
    4042:	8f 93       	push	r24
    4044:	83 e5       	ldi	r24, 0x53	; 83
    4046:	93 e0       	ldi	r25, 0x03	; 3
    4048:	8f 93       	push	r24
    404a:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    404e:	0f 90       	pop	r0
    4050:	0f 90       	pop	r0
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    405a:	68 ec       	ldi	r22, 0xC8	; 200
    405c:	70 e0       	ldi	r23, 0x00	; 0
    405e:	83 e5       	ldi	r24, 0x53	; 83
    4060:	93 e0       	ldi	r25, 0x03	; 3
    4062:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			Carga_Configuracion_Fabrica_Eeprom (GRUPO_ADC);
    4066:	82 e0       	ldi	r24, 0x02	; 2
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	0e 94 69 22 	call	0x44d2	; 0x44d2 <Carga_Configuracion_Fabrica_Eeprom>
	}


	/* GRUPO_ADC -2- */
	uContIntentosValidacionChecksum = 0;
	while (uContIntentosValidacionChecksum < CANT_INTENTOS_VALIDACION_CHECKSUM) {
    406e:	89 81       	ldd	r24, Y+1	; 0x01
    4070:	9a 81       	ldd	r25, Y+2	; 0x02
    4072:	0a 97       	sbiw	r24, 0x0a	; 10
    4074:	08 f4       	brcc	.+2      	; 0x4078 <Carga_Configuracion_Desde_Eeprom+0x13c0>
    4076:	68 cb       	rjmp	.-2352   	; 0x3748 <Carga_Configuracion_Desde_Eeprom+0xa90>
			Carga_Configuracion_Fabrica_Eeprom (GRUPO_ADC);
		}
	}

	/* GRUPO_PWM -3- */
	uContIntentosValidacionChecksum = 0;
    4078:	1a 82       	std	Y+2, r1	; 0x02
    407a:	19 82       	std	Y+1, r1	; 0x01
	while (uContIntentosValidacionChecksum <= CANT_INTENTOS_VALIDACION_CHECKSUM) {
    407c:	1c c2       	rjmp	.+1080   	; 0x44b6 <Carga_Configuracion_Desde_Eeprom+0x17fe>
		sprintf (chBufferTx_USART0, "\n\r%S %d", (wchar_t*)validacion_PWM_MSG, uContIntentosValidacionChecksum);
    407e:	8a 81       	ldd	r24, Y+2	; 0x02
    4080:	8f 93       	push	r24
    4082:	89 81       	ldd	r24, Y+1	; 0x01
    4084:	8f 93       	push	r24
    4086:	83 e7       	ldi	r24, 0x73	; 115
    4088:	91 e0       	ldi	r25, 0x01	; 1
    408a:	89 2f       	mov	r24, r25
    408c:	8f 93       	push	r24
    408e:	83 e7       	ldi	r24, 0x73	; 115
    4090:	91 e0       	ldi	r25, 0x01	; 1
    4092:	8f 93       	push	r24
    4094:	8a e9       	ldi	r24, 0x9A	; 154
    4096:	91 e0       	ldi	r25, 0x01	; 1
    4098:	89 2f       	mov	r24, r25
    409a:	8f 93       	push	r24
    409c:	8a e9       	ldi	r24, 0x9A	; 154
    409e:	91 e0       	ldi	r25, 0x01	; 1
    40a0:	8f 93       	push	r24
    40a2:	83 e5       	ldi	r24, 0x53	; 83
    40a4:	93 e0       	ldi	r25, 0x03	; 3
    40a6:	89 2f       	mov	r24, r25
    40a8:	8f 93       	push	r24
    40aa:	83 e5       	ldi	r24, 0x53	; 83
    40ac:	93 e0       	ldi	r25, 0x03	; 3
    40ae:	8f 93       	push	r24
    40b0:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    40b4:	8d b7       	in	r24, 0x3d	; 61
    40b6:	9e b7       	in	r25, 0x3e	; 62
    40b8:	08 96       	adiw	r24, 0x08	; 8
    40ba:	0f b6       	in	r0, 0x3f	; 63
    40bc:	f8 94       	cli
    40be:	de bf       	out	0x3e, r29	; 62
    40c0:	0f be       	out	0x3f, r0	; 63
    40c2:	cd bf       	out	0x3d, r28	; 61
		Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    40c4:	68 ec       	ldi	r22, 0xC8	; 200
    40c6:	70 e0       	ldi	r23, 0x00	; 0
    40c8:	83 e5       	ldi	r24, 0x53	; 83
    40ca:	93 e0       	ldi	r25, 0x03	; 3
    40cc:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

		uContIntentosValidacionChecksum++;
    40d0:	89 81       	ldd	r24, Y+1	; 0x01
    40d2:	9a 81       	ldd	r25, Y+2	; 0x02
    40d4:	01 96       	adiw	r24, 0x01	; 1
    40d6:	9a 83       	std	Y+2, r25	; 0x02
    40d8:	89 83       	std	Y+1, r24	; 0x01

		// leo los valores originales
		Eeprom_a_UnsignedInt(&uGananciaPWM1_Eeprom, &uGananciaPWM1);							/* leeo los valores originales de la eeprom */
    40da:	64 e7       	ldi	r22, 0x74	; 116
    40dc:	72 e0       	ldi	r23, 0x02	; 2
    40de:	82 eb       	ldi	r24, 0xB2	; 178
    40e0:	94 e0       	ldi	r25, 0x04	; 4
    40e2:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC = UnsignedInt_a_Checksum(&uGananciaPWM1);											/* calculo el checksum de los valores lebantados a la ram */
    40e6:	84 e7       	ldi	r24, 0x74	; 116
    40e8:	92 e0       	ldi	r25, 0x02	; 2
    40ea:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    40ee:	9e 87       	std	Y+14, r25	; 0x0e
    40f0:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_UnsignedInt(&uGananciaPWM2_Eeprom, &uGananciaPWM2);
    40f2:	67 e7       	ldi	r22, 0x77	; 119
    40f4:	72 e0       	ldi	r23, 0x02	; 2
    40f6:	82 ea       	ldi	r24, 0xA2	; 162
    40f8:	94 e0       	ldi	r25, 0x04	; 4
    40fa:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC += UnsignedInt_a_Checksum(&uGananciaPWM2);
    40fe:	87 e7       	ldi	r24, 0x77	; 119
    4100:	92 e0       	ldi	r25, 0x02	; 2
    4102:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    4106:	9c 01       	movw	r18, r24
    4108:	8d 85       	ldd	r24, Y+13	; 0x0d
    410a:	9e 85       	ldd	r25, Y+14	; 0x0e
    410c:	82 0f       	add	r24, r18
    410e:	93 1f       	adc	r25, r19
    4110:	9e 87       	std	Y+14, r25	; 0x0e
    4112:	8d 87       	std	Y+13, r24	; 0x0d
		Eeprom_a_UnsignedInt (&uChecksumPWM_Eeprom, &uCRC_Eeprom);
    4114:	ce 01       	movw	r24, r28
    4116:	0f 96       	adiw	r24, 0x0f	; 15
    4118:	bc 01       	movw	r22, r24
    411a:	8c e0       	ldi	r24, 0x0C	; 12
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>

		// leo los valores de la copia
		Eeprom_a_UnsignedInt(&uGananciaPWM1_Eeprom_BK, &uGananciaPWM1);
    4122:	64 e7       	ldi	r22, 0x74	; 116
    4124:	72 e0       	ldi	r23, 0x02	; 2
    4126:	8a eb       	ldi	r24, 0xBA	; 186
    4128:	94 e0       	ldi	r25, 0x04	; 4
    412a:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC_BK = UnsignedInt_a_Checksum(&uGananciaPWM1);
    412e:	84 e7       	ldi	r24, 0x74	; 116
    4130:	92 e0       	ldi	r25, 0x02	; 2
    4132:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    4136:	9a 8b       	std	Y+18, r25	; 0x12
    4138:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_UnsignedInt(&uGananciaPWM2_Eeprom_BK, &uGananciaPWM2);
    413a:	67 e7       	ldi	r22, 0x77	; 119
    413c:	72 e0       	ldi	r23, 0x02	; 2
    413e:	88 e8       	ldi	r24, 0x88	; 136
    4140:	94 e0       	ldi	r25, 0x04	; 4
    4142:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
		uCRC_BK += UnsignedInt_a_Checksum(&uGananciaPWM2);
    4146:	87 e7       	ldi	r24, 0x77	; 119
    4148:	92 e0       	ldi	r25, 0x02	; 2
    414a:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    414e:	9c 01       	movw	r18, r24
    4150:	89 89       	ldd	r24, Y+17	; 0x11
    4152:	9a 89       	ldd	r25, Y+18	; 0x12
    4154:	82 0f       	add	r24, r18
    4156:	93 1f       	adc	r25, r19
    4158:	9a 8b       	std	Y+18, r25	; 0x12
    415a:	89 8b       	std	Y+17, r24	; 0x11
		Eeprom_a_UnsignedInt (&uChecksumPWM_Eeprom_BK, &uCRC_Eeprom_BK);
    415c:	ce 01       	movw	r24, r28
    415e:	43 96       	adiw	r24, 0x13	; 19
    4160:	bc 01       	movw	r22, r24
    4162:	8e e0       	ldi	r24, 0x0E	; 14
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>


		// si ambas dan bien
		if ((uCRC == uCRC_Eeprom) && (uCRC_BK == uCRC_Eeprom_BK)) {
    416a:	2d 85       	ldd	r18, Y+13	; 0x0d
    416c:	3e 85       	ldd	r19, Y+14	; 0x0e
    416e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4170:	98 89       	ldd	r25, Y+16	; 0x10
    4172:	28 17       	cp	r18, r24
    4174:	39 07       	cpc	r19, r25
    4176:	09 f0       	breq	.+2      	; 0x417a <Carga_Configuracion_Desde_Eeprom+0x14c2>
    4178:	4f c0       	rjmp	.+158    	; 0x4218 <Carga_Configuracion_Desde_Eeprom+0x1560>
    417a:	29 89       	ldd	r18, Y+17	; 0x11
    417c:	3a 89       	ldd	r19, Y+18	; 0x12
    417e:	8b 89       	ldd	r24, Y+19	; 0x13
    4180:	9c 89       	ldd	r25, Y+20	; 0x14
    4182:	28 17       	cp	r18, r24
    4184:	39 07       	cpc	r19, r25
    4186:	09 f0       	breq	.+2      	; 0x418a <Carga_Configuracion_Desde_Eeprom+0x14d2>
    4188:	47 c0       	rjmp	.+142    	; 0x4218 <Carga_Configuracion_Desde_Eeprom+0x1560>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesOk_MSG);
    418a:	8f e8       	ldi	r24, 0x8F	; 143
    418c:	91 e0       	ldi	r25, 0x01	; 1
    418e:	89 2f       	mov	r24, r25
    4190:	8f 93       	push	r24
    4192:	8f e8       	ldi	r24, 0x8F	; 143
    4194:	91 e0       	ldi	r25, 0x01	; 1
    4196:	8f 93       	push	r24
    4198:	82 ea       	ldi	r24, 0xA2	; 162
    419a:	91 e0       	ldi	r25, 0x01	; 1
    419c:	89 2f       	mov	r24, r25
    419e:	8f 93       	push	r24
    41a0:	82 ea       	ldi	r24, 0xA2	; 162
    41a2:	91 e0       	ldi	r25, 0x01	; 1
    41a4:	8f 93       	push	r24
    41a6:	83 e5       	ldi	r24, 0x53	; 83
    41a8:	93 e0       	ldi	r25, 0x03	; 3
    41aa:	89 2f       	mov	r24, r25
    41ac:	8f 93       	push	r24
    41ae:	83 e5       	ldi	r24, 0x53	; 83
    41b0:	93 e0       	ldi	r25, 0x03	; 3
    41b2:	8f 93       	push	r24
    41b4:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    41b8:	0f 90       	pop	r0
    41ba:	0f 90       	pop	r0
    41bc:	0f 90       	pop	r0
    41be:	0f 90       	pop	r0
    41c0:	0f 90       	pop	r0
    41c2:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    41c4:	68 ec       	ldi	r22, 0xC8	; 200
    41c6:	70 e0       	ldi	r23, 0x00	; 0
    41c8:	83 e5       	ldi	r24, 0x53	; 83
    41ca:	93 e0       	ldi	r25, 0x03	; 3
    41cc:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpOK_MSG);
    41d0:	89 ed       	ldi	r24, 0xD9	; 217
    41d2:	91 e0       	ldi	r25, 0x01	; 1
    41d4:	89 2f       	mov	r24, r25
    41d6:	8f 93       	push	r24
    41d8:	89 ed       	ldi	r24, 0xD9	; 217
    41da:	91 e0       	ldi	r25, 0x01	; 1
    41dc:	8f 93       	push	r24
    41de:	82 ea       	ldi	r24, 0xA2	; 162
    41e0:	91 e0       	ldi	r25, 0x01	; 1
    41e2:	89 2f       	mov	r24, r25
    41e4:	8f 93       	push	r24
    41e6:	82 ea       	ldi	r24, 0xA2	; 162
    41e8:	91 e0       	ldi	r25, 0x01	; 1
    41ea:	8f 93       	push	r24
    41ec:	83 e5       	ldi	r24, 0x53	; 83
    41ee:	93 e0       	ldi	r25, 0x03	; 3
    41f0:	89 2f       	mov	r24, r25
    41f2:	8f 93       	push	r24
    41f4:	83 e5       	ldi	r24, 0x53	; 83
    41f6:	93 e0       	ldi	r25, 0x03	; 3
    41f8:	8f 93       	push	r24
    41fa:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    41fe:	0f 90       	pop	r0
    4200:	0f 90       	pop	r0
    4202:	0f 90       	pop	r0
    4204:	0f 90       	pop	r0
    4206:	0f 90       	pop	r0
    4208:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    420a:	68 ec       	ldi	r22, 0xC8	; 200
    420c:	70 e0       	ldi	r23, 0x00	; 0
    420e:	83 e5       	ldi	r24, 0x53	; 83
    4210:	93 e0       	ldi	r25, 0x03	; 3
    4212:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			break;
    4216:	54 c1       	rjmp	.+680    	; 0x44c0 <Carga_Configuracion_Desde_Eeprom+0x1808>
		}
		// si la copia da mal vuelvo a leer el original porque habia dado bien
		else if ((uCRC == uCRC_Eeprom) && (uCRC_BK != uCRC_Eeprom_BK)) {
    4218:	2d 85       	ldd	r18, Y+13	; 0x0d
    421a:	3e 85       	ldd	r19, Y+14	; 0x0e
    421c:	8f 85       	ldd	r24, Y+15	; 0x0f
    421e:	98 89       	ldd	r25, Y+16	; 0x10
    4220:	28 17       	cp	r18, r24
    4222:	39 07       	cpc	r19, r25
    4224:	09 f0       	breq	.+2      	; 0x4228 <Carga_Configuracion_Desde_Eeprom+0x1570>
    4226:	8e c0       	rjmp	.+284    	; 0x4344 <Carga_Configuracion_Desde_Eeprom+0x168c>
    4228:	29 89       	ldd	r18, Y+17	; 0x11
    422a:	3a 89       	ldd	r19, Y+18	; 0x12
    422c:	8b 89       	ldd	r24, Y+19	; 0x13
    422e:	9c 89       	ldd	r25, Y+20	; 0x14
    4230:	28 17       	cp	r18, r24
    4232:	39 07       	cpc	r19, r25
    4234:	09 f4       	brne	.+2      	; 0x4238 <Carga_Configuracion_Desde_Eeprom+0x1580>
    4236:	86 c0       	rjmp	.+268    	; 0x4344 <Carga_Configuracion_Desde_Eeprom+0x168c>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesOk_MSG);
    4238:	8f e8       	ldi	r24, 0x8F	; 143
    423a:	91 e0       	ldi	r25, 0x01	; 1
    423c:	89 2f       	mov	r24, r25
    423e:	8f 93       	push	r24
    4240:	8f e8       	ldi	r24, 0x8F	; 143
    4242:	91 e0       	ldi	r25, 0x01	; 1
    4244:	8f 93       	push	r24
    4246:	82 ea       	ldi	r24, 0xA2	; 162
    4248:	91 e0       	ldi	r25, 0x01	; 1
    424a:	89 2f       	mov	r24, r25
    424c:	8f 93       	push	r24
    424e:	82 ea       	ldi	r24, 0xA2	; 162
    4250:	91 e0       	ldi	r25, 0x01	; 1
    4252:	8f 93       	push	r24
    4254:	83 e5       	ldi	r24, 0x53	; 83
    4256:	93 e0       	ldi	r25, 0x03	; 3
    4258:	89 2f       	mov	r24, r25
    425a:	8f 93       	push	r24
    425c:	83 e5       	ldi	r24, 0x53	; 83
    425e:	93 e0       	ldi	r25, 0x03	; 3
    4260:	8f 93       	push	r24
    4262:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    4266:	0f 90       	pop	r0
    4268:	0f 90       	pop	r0
    426a:	0f 90       	pop	r0
    426c:	0f 90       	pop	r0
    426e:	0f 90       	pop	r0
    4270:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    4272:	68 ec       	ldi	r22, 0xC8	; 200
    4274:	70 e0       	ldi	r23, 0x00	; 0
    4276:	83 e5       	ldi	r24, 0x53	; 83
    4278:	93 e0       	ldi	r25, 0x03	; 3
    427a:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpError_MSG);
    427e:	84 ea       	ldi	r24, 0xA4	; 164
    4280:	91 e0       	ldi	r25, 0x01	; 1
    4282:	89 2f       	mov	r24, r25
    4284:	8f 93       	push	r24
    4286:	84 ea       	ldi	r24, 0xA4	; 164
    4288:	91 e0       	ldi	r25, 0x01	; 1
    428a:	8f 93       	push	r24
    428c:	82 ea       	ldi	r24, 0xA2	; 162
    428e:	91 e0       	ldi	r25, 0x01	; 1
    4290:	89 2f       	mov	r24, r25
    4292:	8f 93       	push	r24
    4294:	82 ea       	ldi	r24, 0xA2	; 162
    4296:	91 e0       	ldi	r25, 0x01	; 1
    4298:	8f 93       	push	r24
    429a:	83 e5       	ldi	r24, 0x53	; 83
    429c:	93 e0       	ldi	r25, 0x03	; 3
    429e:	89 2f       	mov	r24, r25
    42a0:	8f 93       	push	r24
    42a2:	83 e5       	ldi	r24, 0x53	; 83
    42a4:	93 e0       	ldi	r25, 0x03	; 3
    42a6:	8f 93       	push	r24
    42a8:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    42ac:	0f 90       	pop	r0
    42ae:	0f 90       	pop	r0
    42b0:	0f 90       	pop	r0
    42b2:	0f 90       	pop	r0
    42b4:	0f 90       	pop	r0
    42b6:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    42b8:	68 ec       	ldi	r22, 0xC8	; 200
    42ba:	70 e0       	ldi	r23, 0x00	; 0
    42bc:	83 e5       	ldi	r24, 0x53	; 83
    42be:	93 e0       	ldi	r25, 0x03	; 3
    42c0:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			// leo los valores originales nuevamente
			Eeprom_a_UnsignedInt(&uGananciaPWM1_Eeprom, &uGananciaPWM1);							/* leeo los valores originales de la eeprom */
    42c4:	64 e7       	ldi	r22, 0x74	; 116
    42c6:	72 e0       	ldi	r23, 0x02	; 2
    42c8:	82 eb       	ldi	r24, 0xB2	; 178
    42ca:	94 e0       	ldi	r25, 0x04	; 4
    42cc:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
			uCRC = UnsignedInt_a_Checksum(&uGananciaPWM1);											/* calculo el checksum de los valores lebantados a la ram */
    42d0:	84 e7       	ldi	r24, 0x74	; 116
    42d2:	92 e0       	ldi	r25, 0x02	; 2
    42d4:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    42d8:	9e 87       	std	Y+14, r25	; 0x0e
    42da:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_UnsignedInt(&uGananciaPWM2_Eeprom, &uGananciaPWM2);
    42dc:	67 e7       	ldi	r22, 0x77	; 119
    42de:	72 e0       	ldi	r23, 0x02	; 2
    42e0:	82 ea       	ldi	r24, 0xA2	; 162
    42e2:	94 e0       	ldi	r25, 0x04	; 4
    42e4:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>
			uCRC += UnsignedInt_a_Checksum(&uGananciaPWM2);
    42e8:	87 e7       	ldi	r24, 0x77	; 119
    42ea:	92 e0       	ldi	r25, 0x02	; 2
    42ec:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    42f0:	9c 01       	movw	r18, r24
    42f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    42f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    42f6:	82 0f       	add	r24, r18
    42f8:	93 1f       	adc	r25, r19
    42fa:	9e 87       	std	Y+14, r25	; 0x0e
    42fc:	8d 87       	std	Y+13, r24	; 0x0d
			Eeprom_a_UnsignedInt (&uChecksumPWM_Eeprom, &uCRC_Eeprom);
    42fe:	ce 01       	movw	r24, r28
    4300:	0f 96       	adiw	r24, 0x0f	; 15
    4302:	bc 01       	movw	r22, r24
    4304:	8c e0       	ldi	r24, 0x0C	; 12
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Eeprom_a_UnsignedInt>

			// si lei bien los originales grabo la copia sobre el backup
			if (uCRC == uCRC_Eeprom) {
    430c:	2d 85       	ldd	r18, Y+13	; 0x0d
    430e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4310:	8f 85       	ldd	r24, Y+15	; 0x0f
    4312:	98 89       	ldd	r25, Y+16	; 0x10
    4314:	28 17       	cp	r18, r24
    4316:	39 07       	cpc	r19, r25
    4318:	a1 f4       	brne	.+40     	; 0x4342 <Carga_Configuracion_Desde_Eeprom+0x168a>
				UnsignedInt_a_Eeprom(&uGananciaPWM1_Eeprom_BK, &uGananciaPWM1);
    431a:	64 e7       	ldi	r22, 0x74	; 116
    431c:	72 e0       	ldi	r23, 0x02	; 2
    431e:	8a eb       	ldi	r24, 0xBA	; 186
    4320:	94 e0       	ldi	r25, 0x04	; 4
    4322:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
				UnsignedInt_a_Eeprom(&uGananciaPWM2_Eeprom_BK, &uGananciaPWM2);
    4326:	67 e7       	ldi	r22, 0x77	; 119
    4328:	72 e0       	ldi	r23, 0x02	; 2
    432a:	88 e8       	ldi	r24, 0x88	; 136
    432c:	94 e0       	ldi	r25, 0x04	; 4
    432e:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
				UnsignedInt_a_Eeprom (&uChecksumPWM_Eeprom_BK, &uCRC);
    4332:	ce 01       	movw	r24, r28
    4334:	0d 96       	adiw	r24, 0x0d	; 13
    4336:	bc 01       	movw	r22, r24
    4338:	8e e0       	ldi	r24, 0x0E	; 14
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>

				break;
    4340:	bf c0       	rjmp	.+382    	; 0x44c0 <Carga_Configuracion_Desde_Eeprom+0x1808>
			Eeprom_a_UnsignedInt(&uGananciaPWM2_Eeprom, &uGananciaPWM2);
			uCRC += UnsignedInt_a_Checksum(&uGananciaPWM2);
			Eeprom_a_UnsignedInt (&uChecksumPWM_Eeprom, &uCRC_Eeprom);

			// si lei bien los originales grabo la copia sobre el backup
			if (uCRC == uCRC_Eeprom) {
    4342:	b9 c0       	rjmp	.+370    	; 0x44b6 <Carga_Configuracion_Desde_Eeprom+0x17fe>

				break;
			}
		}
		// si el original da mal y la copia bien
		else if ((uCRC != uCRC_Eeprom) && (uCRC_BK == uCRC_Eeprom_BK)) {
    4344:	2d 85       	ldd	r18, Y+13	; 0x0d
    4346:	3e 85       	ldd	r19, Y+14	; 0x0e
    4348:	8f 85       	ldd	r24, Y+15	; 0x0f
    434a:	98 89       	ldd	r25, Y+16	; 0x10
    434c:	28 17       	cp	r18, r24
    434e:	39 07       	cpc	r19, r25
    4350:	09 f4       	brne	.+2      	; 0x4354 <Carga_Configuracion_Desde_Eeprom+0x169c>
    4352:	62 c0       	rjmp	.+196    	; 0x4418 <Carga_Configuracion_Desde_Eeprom+0x1760>
    4354:	29 89       	ldd	r18, Y+17	; 0x11
    4356:	3a 89       	ldd	r19, Y+18	; 0x12
    4358:	8b 89       	ldd	r24, Y+19	; 0x13
    435a:	9c 89       	ldd	r25, Y+20	; 0x14
    435c:	28 17       	cp	r18, r24
    435e:	39 07       	cpc	r19, r25
    4360:	09 f0       	breq	.+2      	; 0x4364 <Carga_Configuracion_Desde_Eeprom+0x16ac>
    4362:	5a c0       	rjmp	.+180    	; 0x4418 <Carga_Configuracion_Desde_Eeprom+0x1760>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesError_MSG);
    4364:	8e eb       	ldi	r24, 0xBE	; 190
    4366:	91 e0       	ldi	r25, 0x01	; 1
    4368:	89 2f       	mov	r24, r25
    436a:	8f 93       	push	r24
    436c:	8e eb       	ldi	r24, 0xBE	; 190
    436e:	91 e0       	ldi	r25, 0x01	; 1
    4370:	8f 93       	push	r24
    4372:	82 ea       	ldi	r24, 0xA2	; 162
    4374:	91 e0       	ldi	r25, 0x01	; 1
    4376:	89 2f       	mov	r24, r25
    4378:	8f 93       	push	r24
    437a:	82 ea       	ldi	r24, 0xA2	; 162
    437c:	91 e0       	ldi	r25, 0x01	; 1
    437e:	8f 93       	push	r24
    4380:	83 e5       	ldi	r24, 0x53	; 83
    4382:	93 e0       	ldi	r25, 0x03	; 3
    4384:	89 2f       	mov	r24, r25
    4386:	8f 93       	push	r24
    4388:	83 e5       	ldi	r24, 0x53	; 83
    438a:	93 e0       	ldi	r25, 0x03	; 3
    438c:	8f 93       	push	r24
    438e:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    4392:	0f 90       	pop	r0
    4394:	0f 90       	pop	r0
    4396:	0f 90       	pop	r0
    4398:	0f 90       	pop	r0
    439a:	0f 90       	pop	r0
    439c:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    439e:	68 ec       	ldi	r22, 0xC8	; 200
    43a0:	70 e0       	ldi	r23, 0x00	; 0
    43a2:	83 e5       	ldi	r24, 0x53	; 83
    43a4:	93 e0       	ldi	r25, 0x03	; 3
    43a6:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpOK_MSG);
    43aa:	89 ed       	ldi	r24, 0xD9	; 217
    43ac:	91 e0       	ldi	r25, 0x01	; 1
    43ae:	89 2f       	mov	r24, r25
    43b0:	8f 93       	push	r24
    43b2:	89 ed       	ldi	r24, 0xD9	; 217
    43b4:	91 e0       	ldi	r25, 0x01	; 1
    43b6:	8f 93       	push	r24
    43b8:	82 ea       	ldi	r24, 0xA2	; 162
    43ba:	91 e0       	ldi	r25, 0x01	; 1
    43bc:	89 2f       	mov	r24, r25
    43be:	8f 93       	push	r24
    43c0:	82 ea       	ldi	r24, 0xA2	; 162
    43c2:	91 e0       	ldi	r25, 0x01	; 1
    43c4:	8f 93       	push	r24
    43c6:	83 e5       	ldi	r24, 0x53	; 83
    43c8:	93 e0       	ldi	r25, 0x03	; 3
    43ca:	89 2f       	mov	r24, r25
    43cc:	8f 93       	push	r24
    43ce:	83 e5       	ldi	r24, 0x53	; 83
    43d0:	93 e0       	ldi	r25, 0x03	; 3
    43d2:	8f 93       	push	r24
    43d4:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    43d8:	0f 90       	pop	r0
    43da:	0f 90       	pop	r0
    43dc:	0f 90       	pop	r0
    43de:	0f 90       	pop	r0
    43e0:	0f 90       	pop	r0
    43e2:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    43e4:	68 ec       	ldi	r22, 0xC8	; 200
    43e6:	70 e0       	ldi	r23, 0x00	; 0
    43e8:	83 e5       	ldi	r24, 0x53	; 83
    43ea:	93 e0       	ldi	r25, 0x03	; 3
    43ec:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			// grabo el backup sobre los originales
			UnsignedInt_a_Eeprom(&uGananciaPWM1_Eeprom, &uGananciaPWM1);
    43f0:	64 e7       	ldi	r22, 0x74	; 116
    43f2:	72 e0       	ldi	r23, 0x02	; 2
    43f4:	82 eb       	ldi	r24, 0xB2	; 178
    43f6:	94 e0       	ldi	r25, 0x04	; 4
    43f8:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
			UnsignedInt_a_Eeprom(&uGananciaPWM2_Eeprom, &uGananciaPWM2);
    43fc:	67 e7       	ldi	r22, 0x77	; 119
    43fe:	72 e0       	ldi	r23, 0x02	; 2
    4400:	82 ea       	ldi	r24, 0xA2	; 162
    4402:	94 e0       	ldi	r25, 0x04	; 4
    4404:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
			UnsignedInt_a_Eeprom (&uChecksumPWM_Eeprom, &uCRC_BK);
    4408:	ce 01       	movw	r24, r28
    440a:	41 96       	adiw	r24, 0x11	; 17
    440c:	bc 01       	movw	r22, r24
    440e:	8c e0       	ldi	r24, 0x0C	; 12
    4410:	90 e0       	ldi	r25, 0x00	; 0
    4412:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>

			break;
    4416:	54 c0       	rjmp	.+168    	; 0x44c0 <Carga_Configuracion_Desde_Eeprom+0x1808>
		}
		// si ambas dan mal y agote los intentos
		else if (uContIntentosValidacionChecksum == CANT_INTENTOS_VALIDACION_CHECKSUM){
    4418:	89 81       	ldd	r24, Y+1	; 0x01
    441a:	9a 81       	ldd	r25, Y+2	; 0x02
    441c:	0a 97       	sbiw	r24, 0x0a	; 10
    441e:	09 f0       	breq	.+2      	; 0x4422 <Carga_Configuracion_Desde_Eeprom+0x176a>
    4420:	4a c0       	rjmp	.+148    	; 0x44b6 <Carga_Configuracion_Desde_Eeprom+0x17fe>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosOriginalesError_MSG);
    4422:	8e eb       	ldi	r24, 0xBE	; 190
    4424:	91 e0       	ldi	r25, 0x01	; 1
    4426:	89 2f       	mov	r24, r25
    4428:	8f 93       	push	r24
    442a:	8e eb       	ldi	r24, 0xBE	; 190
    442c:	91 e0       	ldi	r25, 0x01	; 1
    442e:	8f 93       	push	r24
    4430:	82 ea       	ldi	r24, 0xA2	; 162
    4432:	91 e0       	ldi	r25, 0x01	; 1
    4434:	89 2f       	mov	r24, r25
    4436:	8f 93       	push	r24
    4438:	82 ea       	ldi	r24, 0xA2	; 162
    443a:	91 e0       	ldi	r25, 0x01	; 1
    443c:	8f 93       	push	r24
    443e:	83 e5       	ldi	r24, 0x53	; 83
    4440:	93 e0       	ldi	r25, 0x03	; 3
    4442:	89 2f       	mov	r24, r25
    4444:	8f 93       	push	r24
    4446:	83 e5       	ldi	r24, 0x53	; 83
    4448:	93 e0       	ldi	r25, 0x03	; 3
    444a:	8f 93       	push	r24
    444c:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    4450:	0f 90       	pop	r0
    4452:	0f 90       	pop	r0
    4454:	0f 90       	pop	r0
    4456:	0f 90       	pop	r0
    4458:	0f 90       	pop	r0
    445a:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    445c:	68 ec       	ldi	r22, 0xC8	; 200
    445e:	70 e0       	ldi	r23, 0x00	; 0
    4460:	83 e5       	ldi	r24, 0x53	; 83
    4462:	93 e0       	ldi	r25, 0x03	; 3
    4464:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			sprintf (chBufferTx_USART0, "\n\r%S", (wchar_t*)datosBackUpError_MSG);
    4468:	84 ea       	ldi	r24, 0xA4	; 164
    446a:	91 e0       	ldi	r25, 0x01	; 1
    446c:	89 2f       	mov	r24, r25
    446e:	8f 93       	push	r24
    4470:	84 ea       	ldi	r24, 0xA4	; 164
    4472:	91 e0       	ldi	r25, 0x01	; 1
    4474:	8f 93       	push	r24
    4476:	82 ea       	ldi	r24, 0xA2	; 162
    4478:	91 e0       	ldi	r25, 0x01	; 1
    447a:	89 2f       	mov	r24, r25
    447c:	8f 93       	push	r24
    447e:	82 ea       	ldi	r24, 0xA2	; 162
    4480:	91 e0       	ldi	r25, 0x01	; 1
    4482:	8f 93       	push	r24
    4484:	83 e5       	ldi	r24, 0x53	; 83
    4486:	93 e0       	ldi	r25, 0x03	; 3
    4488:	89 2f       	mov	r24, r25
    448a:	8f 93       	push	r24
    448c:	83 e5       	ldi	r24, 0x53	; 83
    448e:	93 e0       	ldi	r25, 0x03	; 3
    4490:	8f 93       	push	r24
    4492:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    4496:	0f 90       	pop	r0
    4498:	0f 90       	pop	r0
    449a:	0f 90       	pop	r0
    449c:	0f 90       	pop	r0
    449e:	0f 90       	pop	r0
    44a0:	0f 90       	pop	r0
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);
    44a2:	68 ec       	ldi	r22, 0xC8	; 200
    44a4:	70 e0       	ldi	r23, 0x00	; 0
    44a6:	83 e5       	ldi	r24, 0x53	; 83
    44a8:	93 e0       	ldi	r25, 0x03	; 3
    44aa:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

			Carga_Configuracion_Fabrica_Eeprom (GRUPO_PWM);
    44ae:	83 e0       	ldi	r24, 0x03	; 3
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	0e 94 69 22 	call	0x44d2	; 0x44d2 <Carga_Configuracion_Fabrica_Eeprom>
		}
	}

	/* GRUPO_PWM -3- */
	uContIntentosValidacionChecksum = 0;
	while (uContIntentosValidacionChecksum <= CANT_INTENTOS_VALIDACION_CHECKSUM) {
    44b6:	89 81       	ldd	r24, Y+1	; 0x01
    44b8:	9a 81       	ldd	r25, Y+2	; 0x02
    44ba:	0b 97       	sbiw	r24, 0x0b	; 11
    44bc:	08 f4       	brcc	.+2      	; 0x44c0 <Carga_Configuracion_Desde_Eeprom+0x1808>
    44be:	df cd       	rjmp	.-1090   	; 0x407e <Carga_Configuracion_Desde_Eeprom+0x13c6>
			Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);

			Carga_Configuracion_Fabrica_Eeprom (GRUPO_PWM);
		}
	}
}
    44c0:	64 96       	adiw	r28, 0x14	; 20
    44c2:	0f b6       	in	r0, 0x3f	; 63
    44c4:	f8 94       	cli
    44c6:	de bf       	out	0x3e, r29	; 62
    44c8:	0f be       	out	0x3f, r0	; 63
    44ca:	cd bf       	out	0x3d, r28	; 61
    44cc:	df 91       	pop	r29
    44ce:	cf 91       	pop	r28
    44d0:	08 95       	ret

000044d2 <Carga_Configuracion_Fabrica_Eeprom>:

/*****************************************************************************
* Funcion de carga de variables con valores de fabrica
*****************************************************************************/

void Carga_Configuracion_Fabrica_Eeprom (int grupo) {
    44d2:	cf 93       	push	r28
    44d4:	df 93       	push	r29
    44d6:	cd b7       	in	r28, 0x3d	; 61
    44d8:	de b7       	in	r29, 0x3e	; 62
    44da:	28 97       	sbiw	r28, 0x08	; 8
    44dc:	0f b6       	in	r0, 0x3f	; 63
    44de:	f8 94       	cli
    44e0:	de bf       	out	0x3e, r29	; 62
    44e2:	0f be       	out	0x3f, r0	; 63
    44e4:	cd bf       	out	0x3d, r28	; 61
    44e6:	98 87       	std	Y+8, r25	; 0x08
    44e8:	8f 83       	std	Y+7, r24	; 0x07
	/////GRUPO GENERAL/////
	if (grupo == GRUPO_SERIE) {
    44ea:	8f 81       	ldd	r24, Y+7	; 0x07
    44ec:	98 85       	ldd	r25, Y+8	; 0x08
    44ee:	89 2b       	or	r24, r25
    44f0:	09 f0       	breq	.+2      	; 0x44f4 <Carga_Configuracion_Fabrica_Eeprom+0x22>
    44f2:	45 c0       	rjmp	.+138    	; 0x457e <Carga_Configuracion_Fabrica_Eeprom+0xac>
		for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++){
    44f4:	1a 82       	std	Y+2, r1	; 0x02
    44f6:	19 82       	std	Y+1, r1	; 0x01
    44f8:	0b c0       	rjmp	.+22     	; 0x4510 <Carga_Configuracion_Fabrica_Eeprom+0x3e>
			chNumeroSerie[i] = '\0';
    44fa:	89 81       	ldd	r24, Y+1	; 0x01
    44fc:	9a 81       	ldd	r25, Y+2	; 0x02
    44fe:	81 5e       	subi	r24, 0xE1	; 225
    4500:	99 4f       	sbci	r25, 0xF9	; 249
    4502:	fc 01       	movw	r30, r24
    4504:	10 82       	st	Z, r1
*****************************************************************************/

void Carga_Configuracion_Fabrica_Eeprom (int grupo) {
	/////GRUPO GENERAL/////
	if (grupo == GRUPO_SERIE) {
		for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++){
    4506:	89 81       	ldd	r24, Y+1	; 0x01
    4508:	9a 81       	ldd	r25, Y+2	; 0x02
    450a:	01 96       	adiw	r24, 0x01	; 1
    450c:	9a 83       	std	Y+2, r25	; 0x02
    450e:	89 83       	std	Y+1, r24	; 0x01
    4510:	89 81       	ldd	r24, Y+1	; 0x01
    4512:	9a 81       	ldd	r25, Y+2	; 0x02
    4514:	0a 97       	sbiw	r24, 0x0a	; 10
    4516:	8c f3       	brlt	.-30     	; 0x44fa <Carga_Configuracion_Fabrica_Eeprom+0x28>
			chNumeroSerie[i] = '\0';
		}

		for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++) {
    4518:	1c 82       	std	Y+4, r1	; 0x04
    451a:	1b 82       	std	Y+3, r1	; 0x03
    451c:	11 c0       	rjmp	.+34     	; 0x4540 <Carga_Configuracion_Fabrica_Eeprom+0x6e>
			Char_a_Eeprom(chNumeroSerie_Eeprom+i, chNumeroSerie+i);										/* leeo los valores originales de la eeprom */
    451e:	8b 81       	ldd	r24, Y+3	; 0x03
    4520:	9c 81       	ldd	r25, Y+4	; 0x04
    4522:	9c 01       	movw	r18, r24
    4524:	21 5e       	subi	r18, 0xE1	; 225
    4526:	39 4f       	sbci	r19, 0xF9	; 249
    4528:	8b 81       	ldd	r24, Y+3	; 0x03
    452a:	9c 81       	ldd	r25, Y+4	; 0x04
    452c:	8a 59       	subi	r24, 0x9A	; 154
    452e:	9b 4f       	sbci	r25, 0xFB	; 251
    4530:	b9 01       	movw	r22, r18
    4532:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <Char_a_Eeprom>
	if (grupo == GRUPO_SERIE) {
		for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++){
			chNumeroSerie[i] = '\0';
		}

		for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++) {
    4536:	8b 81       	ldd	r24, Y+3	; 0x03
    4538:	9c 81       	ldd	r25, Y+4	; 0x04
    453a:	01 96       	adiw	r24, 0x01	; 1
    453c:	9c 83       	std	Y+4, r25	; 0x04
    453e:	8b 83       	std	Y+3, r24	; 0x03
    4540:	8b 81       	ldd	r24, Y+3	; 0x03
    4542:	9c 81       	ldd	r25, Y+4	; 0x04
    4544:	0a 97       	sbiw	r24, 0x0a	; 10
    4546:	5c f3       	brlt	.-42     	; 0x451e <Carga_Configuracion_Fabrica_Eeprom+0x4c>
			Char_a_Eeprom(chNumeroSerie_Eeprom+i, chNumeroSerie+i);										/* leeo los valores originales de la eeprom */
		}

		for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++) {
    4548:	1e 82       	std	Y+6, r1	; 0x06
    454a:	1d 82       	std	Y+5, r1	; 0x05
    454c:	11 c0       	rjmp	.+34     	; 0x4570 <Carga_Configuracion_Fabrica_Eeprom+0x9e>
			Char_a_Eeprom(chNumeroSerie_Eeprom_BK+i, chNumeroSerie+i);										/* leeo los valores originales de la eeprom */
    454e:	8d 81       	ldd	r24, Y+5	; 0x05
    4550:	9e 81       	ldd	r25, Y+6	; 0x06
    4552:	9c 01       	movw	r18, r24
    4554:	21 5e       	subi	r18, 0xE1	; 225
    4556:	39 4f       	sbci	r19, 0xF9	; 249
    4558:	8d 81       	ldd	r24, Y+5	; 0x05
    455a:	9e 81       	ldd	r25, Y+6	; 0x06
    455c:	8c 55       	subi	r24, 0x5C	; 92
    455e:	9b 4f       	sbci	r25, 0xFB	; 251
    4560:	b9 01       	movw	r22, r18
    4562:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <Char_a_Eeprom>

		for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++) {
			Char_a_Eeprom(chNumeroSerie_Eeprom+i, chNumeroSerie+i);										/* leeo los valores originales de la eeprom */
		}

		for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++) {
    4566:	8d 81       	ldd	r24, Y+5	; 0x05
    4568:	9e 81       	ldd	r25, Y+6	; 0x06
    456a:	01 96       	adiw	r24, 0x01	; 1
    456c:	9e 83       	std	Y+6, r25	; 0x06
    456e:	8d 83       	std	Y+5, r24	; 0x05
    4570:	8d 81       	ldd	r24, Y+5	; 0x05
    4572:	9e 81       	ldd	r25, Y+6	; 0x06
    4574:	0a 97       	sbiw	r24, 0x0a	; 10
    4576:	5c f3       	brlt	.-42     	; 0x454e <Carga_Configuracion_Fabrica_Eeprom+0x7c>
			Char_a_Eeprom(chNumeroSerie_Eeprom_BK+i, chNumeroSerie+i);										/* leeo los valores originales de la eeprom */
		}

		Escribir_Checksum_Eeprom (GRUPO_SERIE);
    4578:	80 e0       	ldi	r24, 0x00	; 0
    457a:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
	}

	/////GRUPO ALARMAS/////
	if ((grupo == GRUPO_ALARMAS)||(grupo == GRUPO_TODOS)) {
    457e:	8f 81       	ldd	r24, Y+7	; 0x07
    4580:	98 85       	ldd	r25, Y+8	; 0x08
    4582:	01 97       	sbiw	r24, 0x01	; 1
    4584:	29 f0       	breq	.+10     	; 0x4590 <Carga_Configuracion_Fabrica_Eeprom+0xbe>
    4586:	8f 81       	ldd	r24, Y+7	; 0x07
    4588:	98 85       	ldd	r25, Y+8	; 0x08
    458a:	04 97       	sbiw	r24, 0x04	; 4
    458c:	09 f0       	breq	.+2      	; 0x4590 <Carga_Configuracion_Fabrica_Eeprom+0xbe>
    458e:	61 c0       	rjmp	.+194    	; 0x4652 <Carga_Configuracion_Fabrica_Eeprom+0x180>
		flValorAlarmaCond1 = DEFAULT_VALOR_ALARMA_COND_1;
    4590:	10 92 2c 04 	sts	0x042C, r1
    4594:	10 92 2d 04 	sts	0x042D, r1
    4598:	10 92 2e 04 	sts	0x042E, r1
    459c:	10 92 2f 04 	sts	0x042F, r1
		uTiempoAlarmaCond1 = DEFAULT_TIEMPO_ALARMA_COND_1;
    45a0:	8e e1       	ldi	r24, 0x1E	; 30
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	90 93 1e 04 	sts	0x041E, r25
    45a8:	80 93 1d 04 	sts	0x041D, r24
		flValorAlarmaCond2 = DEFAULT_VALOR_ALARMA_COND_2;
    45ac:	10 92 21 04 	sts	0x0421, r1
    45b0:	10 92 22 04 	sts	0x0422, r1
    45b4:	10 92 23 04 	sts	0x0423, r1
    45b8:	10 92 24 04 	sts	0x0424, r1
		uTiempoAlarmaCond2 = DEFAULT_TIEMPO_ALARMA_COND_2;
    45bc:	8e e1       	ldi	r24, 0x1E	; 30
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	90 93 31 04 	sts	0x0431, r25
    45c4:	80 93 30 04 	sts	0x0430, r24
		uTiempoSilenciarAlarma = DEFAULT_TIEMPO_SILENCIAR_ALARMA;
    45c8:	8c e3       	ldi	r24, 0x3C	; 60
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	90 93 20 04 	sts	0x0420, r25
    45d0:	80 93 1f 04 	sts	0x041F, r24

		Float_a_Eeprom(&flValorAlarmaCond1_Eeprom, &flValorAlarmaCond1);
    45d4:	6c e2       	ldi	r22, 0x2C	; 44
    45d6:	74 e0       	ldi	r23, 0x04	; 4
    45d8:	8c e7       	ldi	r24, 0x7C	; 124
    45da:	94 e0       	ldi	r25, 0x04	; 4
    45dc:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
		UnsignedInt_a_Eeprom(&uTiempoAlarmaCond1_Eeprom, &uTiempoAlarmaCond1);
    45e0:	6d e1       	ldi	r22, 0x1D	; 29
    45e2:	74 e0       	ldi	r23, 0x04	; 4
    45e4:	86 ec       	ldi	r24, 0xC6	; 198
    45e6:	94 e0       	ldi	r25, 0x04	; 4
    45e8:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		Float_a_Eeprom(&flValorAlarmaCond2_Eeprom, &flValorAlarmaCond2);
    45ec:	61 e2       	ldi	r22, 0x21	; 33
    45ee:	74 e0       	ldi	r23, 0x04	; 4
    45f0:	82 e9       	ldi	r24, 0x92	; 146
    45f2:	94 e0       	ldi	r25, 0x04	; 4
    45f4:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
		UnsignedInt_a_Eeprom(&uTiempoAlarmaCond2_Eeprom, &uTiempoAlarmaCond2);
    45f8:	60 e3       	ldi	r22, 0x30	; 48
    45fa:	74 e0       	ldi	r23, 0x04	; 4
    45fc:	8a ed       	ldi	r24, 0xDA	; 218
    45fe:	94 e0       	ldi	r25, 0x04	; 4
    4600:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom(&uTiempoSilenciarAlarma_Eeprom, &uTiempoSilenciarAlarma);
    4604:	6f e1       	ldi	r22, 0x1F	; 31
    4606:	74 e0       	ldi	r23, 0x04	; 4
    4608:	8c ed       	ldi	r24, 0xDC	; 220
    460a:	94 e0       	ldi	r25, 0x04	; 4
    460c:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>

		Float_a_Eeprom(&flValorAlarmaCond1_Eeprom_BK, &flValorAlarmaCond1);
    4610:	6c e2       	ldi	r22, 0x2C	; 44
    4612:	74 e0       	ldi	r23, 0x04	; 4
    4614:	80 e8       	ldi	r24, 0x80	; 128
    4616:	94 e0       	ldi	r25, 0x04	; 4
    4618:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
		UnsignedInt_a_Eeprom(&uTiempoAlarmaCond1_Eeprom_BK, &uTiempoAlarmaCond1);
    461c:	6d e1       	ldi	r22, 0x1D	; 29
    461e:	74 e0       	ldi	r23, 0x04	; 4
    4620:	8e ec       	ldi	r24, 0xCE	; 206
    4622:	94 e0       	ldi	r25, 0x04	; 4
    4624:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		Float_a_Eeprom(&flValorAlarmaCond2_Eeprom_BK, &flValorAlarmaCond2);
    4628:	61 e2       	ldi	r22, 0x21	; 33
    462a:	74 e0       	ldi	r23, 0x04	; 4
    462c:	8e e9       	ldi	r24, 0x9E	; 158
    462e:	94 e0       	ldi	r25, 0x04	; 4
    4630:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
		UnsignedInt_a_Eeprom(&uTiempoAlarmaCond2_Eeprom_BK, &uTiempoAlarmaCond2);
    4634:	60 e3       	ldi	r22, 0x30	; 48
    4636:	74 e0       	ldi	r23, 0x04	; 4
    4638:	84 ed       	ldi	r24, 0xD4	; 212
    463a:	94 e0       	ldi	r25, 0x04	; 4
    463c:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom(&uTiempoSilenciarAlarma_Eeprom_BK, &uTiempoSilenciarAlarma);
    4640:	6f e1       	ldi	r22, 0x1F	; 31
    4642:	74 e0       	ldi	r23, 0x04	; 4
    4644:	8a e7       	ldi	r24, 0x7A	; 122
    4646:	94 e0       	ldi	r25, 0x04	; 4
    4648:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>

		Escribir_Checksum_Eeprom (GRUPO_ALARMAS);
    464c:	81 e0       	ldi	r24, 0x01	; 1
    464e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
	}

	/////GRUPO ADC/////
	if ((grupo == GRUPO_ADC)||(grupo == GRUPO_TODOS)) {
    4652:	8f 81       	ldd	r24, Y+7	; 0x07
    4654:	98 85       	ldd	r25, Y+8	; 0x08
    4656:	02 97       	sbiw	r24, 0x02	; 2
    4658:	29 f0       	breq	.+10     	; 0x4664 <Carga_Configuracion_Fabrica_Eeprom+0x192>
    465a:	8f 81       	ldd	r24, Y+7	; 0x07
    465c:	98 85       	ldd	r25, Y+8	; 0x08
    465e:	04 97       	sbiw	r24, 0x04	; 4
    4660:	09 f0       	breq	.+2      	; 0x4664 <Carga_Configuracion_Fabrica_Eeprom+0x192>
    4662:	f7 c0       	rjmp	.+494    	; 0x4852 <Carga_Configuracion_Fabrica_Eeprom+0x380>
		uMuestrasADCpwm1 = DEFAULT_MUESTRAS_ADC_PWM1;
    4664:	84 ef       	ldi	r24, 0xF4	; 244
    4666:	91 e0       	ldi	r25, 0x01	; 1
    4668:	90 93 fe 04 	sts	0x04FE, r25
    466c:	80 93 fd 04 	sts	0x04FD, r24
		flPWM1aMA = DEFAULT_PWM1_A_MA;
    4670:	8d ec       	ldi	r24, 0xCD	; 205
    4672:	9c ec       	ldi	r25, 0xCC	; 204
    4674:	ac e4       	ldi	r26, 0x4C	; 76
    4676:	b2 e4       	ldi	r27, 0x42	; 66
    4678:	80 93 09 05 	sts	0x0509, r24
    467c:	90 93 0a 05 	sts	0x050A, r25
    4680:	a0 93 0b 05 	sts	0x050B, r26
    4684:	b0 93 0c 05 	sts	0x050C, r27
		uMuestrasADCpwm2 = DEFAULT_MUESTRAS_ADC_PWM2;
    4688:	84 ef       	ldi	r24, 0xF4	; 244
    468a:	91 e0       	ldi	r25, 0x01	; 1
    468c:	90 93 19 05 	sts	0x0519, r25
    4690:	80 93 18 05 	sts	0x0518, r24
		flPWM2aMA = DEFAULT_PWM2_A_MA;
    4694:	8d ec       	ldi	r24, 0xCD	; 205
    4696:	9c ec       	ldi	r25, 0xCC	; 204
    4698:	ac e4       	ldi	r26, 0x4C	; 76
    469a:	b2 e4       	ldi	r27, 0x42	; 66
    469c:	80 93 97 05 	sts	0x0597, r24
    46a0:	90 93 98 05 	sts	0x0598, r25
    46a4:	a0 93 99 05 	sts	0x0599, r26
    46a8:	b0 93 9a 05 	sts	0x059A, r27
		uRangoCond1 = DEFAULT_RANGO_COND_1;
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	90 93 ea 04 	sts	0x04EA, r25
    46b4:	80 93 e9 04 	sts	0x04E9, r24
		uMuestrasADCcond1 = DEFAULT_MUESTRAS_COND1;
    46b8:	84 ef       	ldi	r24, 0xF4	; 244
    46ba:	91 e0       	ldi	r25, 0x01	; 1
    46bc:	90 93 02 05 	sts	0x0502, r25
    46c0:	80 93 01 05 	sts	0x0501, r24
		flCond1auS = DEFAULT_COND1_A_US;
    46c4:	8c e9       	ldi	r24, 0x9C	; 156
    46c6:	92 ea       	ldi	r25, 0xA2	; 162
    46c8:	ab e0       	ldi	r26, 0x0B	; 11
    46ca:	b0 e4       	ldi	r27, 0x40	; 64
    46cc:	80 93 0d 05 	sts	0x050D, r24
    46d0:	90 93 0e 05 	sts	0x050E, r25
    46d4:	a0 93 0f 05 	sts	0x050F, r26
    46d8:	b0 93 10 05 	sts	0x0510, r27
		flOffsetCond1 = DEFAULT_OFFSET_COND1;
    46dc:	10 92 f8 04 	sts	0x04F8, r1
    46e0:	10 92 f9 04 	sts	0x04F9, r1
    46e4:	10 92 fa 04 	sts	0x04FA, r1
    46e8:	10 92 fb 04 	sts	0x04FB, r1
		uRangoCond2 = DEFAULT_RANGO_COND_2;
    46ec:	82 e0       	ldi	r24, 0x02	; 2
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	90 93 1e 06 	sts	0x061E, r25
    46f4:	80 93 1d 06 	sts	0x061D, r24
		uMuestrasADCcond2 = DEFAULT_MUESTRAS_COND2;
    46f8:	84 ef       	ldi	r24, 0xF4	; 244
    46fa:	91 e0       	ldi	r25, 0x01	; 1
    46fc:	90 93 f7 04 	sts	0x04F7, r25
    4700:	80 93 f6 04 	sts	0x04F6, r24
		flCond2auS = DEFAULT_COND2_A_US;
    4704:	8d e4       	ldi	r24, 0x4D	; 77
    4706:	95 e1       	ldi	r25, 0x15	; 21
    4708:	ac e8       	ldi	r26, 0x8C	; 140
    470a:	bc e3       	ldi	r27, 0x3C	; 60
    470c:	80 93 93 05 	sts	0x0593, r24
    4710:	90 93 94 05 	sts	0x0594, r25
    4714:	a0 93 95 05 	sts	0x0595, r26
    4718:	b0 93 96 05 	sts	0x0596, r27
		flOffsetCond2 = DEFAULT_OFFSET_COND2;
    471c:	10 92 03 05 	sts	0x0503, r1
    4720:	10 92 04 05 	sts	0x0504, r1
    4724:	10 92 05 05 	sts	0x0505, r1
    4728:	10 92 06 05 	sts	0x0506, r1

		UnsignedInt_a_Eeprom(&uMuestrasADCpwm1_Eeprom, &uMuestrasADCpwm1);
    472c:	6d ef       	ldi	r22, 0xFD	; 253
    472e:	74 e0       	ldi	r23, 0x04	; 4
    4730:	80 e9       	ldi	r24, 0x90	; 144
    4732:	94 e0       	ldi	r25, 0x04	; 4
    4734:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		Float_a_Eeprom(&flPWM1aMA_Eeprom, &flPWM1aMA);
    4738:	69 e0       	ldi	r22, 0x09	; 9
    473a:	75 e0       	ldi	r23, 0x05	; 5
    473c:	80 e7       	ldi	r24, 0x70	; 112
    473e:	94 e0       	ldi	r25, 0x04	; 4
    4740:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
		UnsignedInt_a_Eeprom(&uMuestrasADCpwm2_Eeprom, &uMuestrasADCpwm2);
    4744:	68 e1       	ldi	r22, 0x18	; 24
    4746:	75 e0       	ldi	r23, 0x05	; 5
    4748:	84 e7       	ldi	r24, 0x74	; 116
    474a:	94 e0       	ldi	r25, 0x04	; 4
    474c:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		Float_a_Eeprom(&flPWM2aMA_Eeprom, &flPWM2aMA);
    4750:	67 e9       	ldi	r22, 0x97	; 151
    4752:	75 e0       	ldi	r23, 0x05	; 5
    4754:	8e ea       	ldi	r24, 0xAE	; 174
    4756:	94 e0       	ldi	r25, 0x04	; 4
    4758:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
		UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom, &uRangoCond1);
    475c:	69 ee       	ldi	r22, 0xE9	; 233
    475e:	74 e0       	ldi	r23, 0x04	; 4
    4760:	84 e6       	ldi	r24, 0x64	; 100
    4762:	94 e0       	ldi	r25, 0x04	; 4
    4764:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom, &uMuestrasADCcond1);
    4768:	61 e0       	ldi	r22, 0x01	; 1
    476a:	75 e0       	ldi	r23, 0x05	; 5
    476c:	8a e9       	ldi	r24, 0x9A	; 154
    476e:	94 e0       	ldi	r25, 0x04	; 4
    4770:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		Float_a_Eeprom(&flCond1auS_Eeprom, &flCond1auS);
    4774:	6d e0       	ldi	r22, 0x0D	; 13
    4776:	75 e0       	ldi	r23, 0x05	; 5
    4778:	8e ed       	ldi	r24, 0xDE	; 222
    477a:	94 e0       	ldi	r25, 0x04	; 4
    477c:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
		Float_a_Eeprom(&flOffsetCond1_Eeprom, &flOffsetCond1);
    4780:	68 ef       	ldi	r22, 0xF8	; 248
    4782:	74 e0       	ldi	r23, 0x04	; 4
    4784:	80 ec       	ldi	r24, 0xC0	; 192
    4786:	94 e0       	ldi	r25, 0x04	; 4
    4788:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
		UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom, &uRangoCond2);
    478c:	6d e1       	ldi	r22, 0x1D	; 29
    478e:	76 e0       	ldi	r23, 0x06	; 6
    4790:	88 e9       	ldi	r24, 0x98	; 152
    4792:	94 e0       	ldi	r25, 0x04	; 4
    4794:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom, &uMuestrasADCcond2);
    4798:	66 ef       	ldi	r22, 0xF6	; 246
    479a:	74 e0       	ldi	r23, 0x04	; 4
    479c:	88 ec       	ldi	r24, 0xC8	; 200
    479e:	94 e0       	ldi	r25, 0x04	; 4
    47a0:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		Float_a_Eeprom(&flCond2auS_Eeprom, &flCond2auS);
    47a4:	63 e9       	ldi	r22, 0x93	; 147
    47a6:	75 e0       	ldi	r23, 0x05	; 5
    47a8:	84 e8       	ldi	r24, 0x84	; 132
    47aa:	94 e0       	ldi	r25, 0x04	; 4
    47ac:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
		Float_a_Eeprom(&flOffsetCond2_Eeprom, &flOffsetCond2);
    47b0:	63 e0       	ldi	r22, 0x03	; 3
    47b2:	75 e0       	ldi	r23, 0x05	; 5
    47b4:	80 ed       	ldi	r24, 0xD0	; 208
    47b6:	94 e0       	ldi	r25, 0x04	; 4
    47b8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>

		UnsignedInt_a_Eeprom(&uMuestrasADCpwm1_Eeprom_BK, &uMuestrasADCpwm1);
    47bc:	6d ef       	ldi	r22, 0xFD	; 253
    47be:	74 e0       	ldi	r23, 0x04	; 4
    47c0:	84 ec       	ldi	r24, 0xC4	; 196
    47c2:	94 e0       	ldi	r25, 0x04	; 4
    47c4:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		Float_a_Eeprom(&flPWM1aMA_Eeprom_BK, &flPWM1aMA);
    47c8:	69 e0       	ldi	r22, 0x09	; 9
    47ca:	75 e0       	ldi	r23, 0x05	; 5
    47cc:	8a ec       	ldi	r24, 0xCA	; 202
    47ce:	94 e0       	ldi	r25, 0x04	; 4
    47d0:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
		UnsignedInt_a_Eeprom(&uMuestrasADCpwm2_Eeprom_BK, &uMuestrasADCpwm2);
    47d4:	68 e1       	ldi	r22, 0x18	; 24
    47d6:	75 e0       	ldi	r23, 0x05	; 5
    47d8:	86 e9       	ldi	r24, 0x96	; 150
    47da:	94 e0       	ldi	r25, 0x04	; 4
    47dc:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		Float_a_Eeprom(&flPWM2aMA_Eeprom_BK, &flPWM2aMA);
    47e0:	67 e9       	ldi	r22, 0x97	; 151
    47e2:	75 e0       	ldi	r23, 0x05	; 5
    47e4:	84 eb       	ldi	r24, 0xB4	; 180
    47e6:	94 e0       	ldi	r25, 0x04	; 4
    47e8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
		UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom_BK, &uRangoCond1);
    47ec:	69 ee       	ldi	r22, 0xE9	; 233
    47ee:	74 e0       	ldi	r23, 0x04	; 4
    47f0:	82 e6       	ldi	r24, 0x62	; 98
    47f2:	94 e0       	ldi	r25, 0x04	; 4
    47f4:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom_BK, &uMuestrasADCcond1);
    47f8:	61 e0       	ldi	r22, 0x01	; 1
    47fa:	75 e0       	ldi	r23, 0x05	; 5
    47fc:	8a e8       	ldi	r24, 0x8A	; 138
    47fe:	94 e0       	ldi	r25, 0x04	; 4
    4800:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		Float_a_Eeprom(&flCond1auS_Eeprom_BK, &flCond1auS);
    4804:	6d e0       	ldi	r22, 0x0D	; 13
    4806:	75 e0       	ldi	r23, 0x05	; 5
    4808:	8c eb       	ldi	r24, 0xBC	; 188
    480a:	94 e0       	ldi	r25, 0x04	; 4
    480c:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
		Float_a_Eeprom(&flOffsetCond1_Eeprom_BK, &flOffsetCond1);
    4810:	68 ef       	ldi	r22, 0xF8	; 248
    4812:	74 e0       	ldi	r23, 0x04	; 4
    4814:	86 ed       	ldi	r24, 0xD6	; 214
    4816:	94 e0       	ldi	r25, 0x04	; 4
    4818:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
		UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom_BK, &uRangoCond2);
    481c:	6d e1       	ldi	r22, 0x1D	; 29
    481e:	76 e0       	ldi	r23, 0x06	; 6
    4820:	88 eb       	ldi	r24, 0xB8	; 184
    4822:	94 e0       	ldi	r25, 0x04	; 4
    4824:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom_BK, &uMuestrasADCcond2);
    4828:	66 ef       	ldi	r22, 0xF6	; 246
    482a:	74 e0       	ldi	r23, 0x04	; 4
    482c:	8c e9       	ldi	r24, 0x9C	; 156
    482e:	94 e0       	ldi	r25, 0x04	; 4
    4830:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		Float_a_Eeprom(&flCond2auS_Eeprom_BK, &flCond2auS);
    4834:	63 e9       	ldi	r22, 0x93	; 147
    4836:	75 e0       	ldi	r23, 0x05	; 5
    4838:	8c e8       	ldi	r24, 0x8C	; 140
    483a:	94 e0       	ldi	r25, 0x04	; 4
    483c:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
		Float_a_Eeprom(&flOffsetCond2_Eeprom_BK, &flOffsetCond2);
    4840:	63 e0       	ldi	r22, 0x03	; 3
    4842:	75 e0       	ldi	r23, 0x05	; 5
    4844:	86 e7       	ldi	r24, 0x76	; 118
    4846:	94 e0       	ldi	r25, 0x04	; 4
    4848:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>

		Escribir_Checksum_Eeprom (GRUPO_ADC);
    484c:	82 e0       	ldi	r24, 0x02	; 2
    484e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
	}

	/////GRUPO PWM/////
	if ((grupo == GRUPO_PWM)||(grupo == GRUPO_TODOS)) {
    4852:	8f 81       	ldd	r24, Y+7	; 0x07
    4854:	98 85       	ldd	r25, Y+8	; 0x08
    4856:	03 97       	sbiw	r24, 0x03	; 3
    4858:	21 f0       	breq	.+8      	; 0x4862 <Carga_Configuracion_Fabrica_Eeprom+0x390>
    485a:	8f 81       	ldd	r24, Y+7	; 0x07
    485c:	98 85       	ldd	r25, Y+8	; 0x08
    485e:	04 97       	sbiw	r24, 0x04	; 4
    4860:	39 f5       	brne	.+78     	; 0x48b0 <Carga_Configuracion_Fabrica_Eeprom+0x3de>
		uGananciaPWM1 = DEFAULT_GANACIA_LAZO_PWM_1;
    4862:	88 ec       	ldi	r24, 0xC8	; 200
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	90 93 75 02 	sts	0x0275, r25
    486a:	80 93 74 02 	sts	0x0274, r24
		uGananciaPWM2 = DEFAULT_GANACIA_LAZO_PWM_2;
    486e:	88 ec       	ldi	r24, 0xC8	; 200
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	90 93 78 02 	sts	0x0278, r25
    4876:	80 93 77 02 	sts	0x0277, r24

		UnsignedInt_a_Eeprom(&uGananciaPWM1_Eeprom, &uGananciaPWM1);							/* leeo los valores originales de la eeprom */
    487a:	64 e7       	ldi	r22, 0x74	; 116
    487c:	72 e0       	ldi	r23, 0x02	; 2
    487e:	82 eb       	ldi	r24, 0xB2	; 178
    4880:	94 e0       	ldi	r25, 0x04	; 4
    4882:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom(&uGananciaPWM2_Eeprom, &uGananciaPWM2);
    4886:	67 e7       	ldi	r22, 0x77	; 119
    4888:	72 e0       	ldi	r23, 0x02	; 2
    488a:	82 ea       	ldi	r24, 0xA2	; 162
    488c:	94 e0       	ldi	r25, 0x04	; 4
    488e:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>

		UnsignedInt_a_Eeprom(&uGananciaPWM1_Eeprom_BK, &uGananciaPWM1);							/* leeo los valores originales de la eeprom */
    4892:	64 e7       	ldi	r22, 0x74	; 116
    4894:	72 e0       	ldi	r23, 0x02	; 2
    4896:	8a eb       	ldi	r24, 0xBA	; 186
    4898:	94 e0       	ldi	r25, 0x04	; 4
    489a:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom(&uGananciaPWM2_Eeprom_BK, &uGananciaPWM2);
    489e:	67 e7       	ldi	r22, 0x77	; 119
    48a0:	72 e0       	ldi	r23, 0x02	; 2
    48a2:	88 e8       	ldi	r24, 0x88	; 136
    48a4:	94 e0       	ldi	r25, 0x04	; 4
    48a6:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>

		Escribir_Checksum_Eeprom (GRUPO_PWM);
    48aa:	83 e0       	ldi	r24, 0x03	; 3
    48ac:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
	}
}
    48b0:	28 96       	adiw	r28, 0x08	; 8
    48b2:	0f b6       	in	r0, 0x3f	; 63
    48b4:	f8 94       	cli
    48b6:	de bf       	out	0x3e, r29	; 62
    48b8:	0f be       	out	0x3f, r0	; 63
    48ba:	cd bf       	out	0x3d, r28	; 61
    48bc:	df 91       	pop	r29
    48be:	cf 91       	pop	r28
    48c0:	08 95       	ret

000048c2 <Escribir_Checksum_Eeprom>:

/*****************************************************************************
* Actualiza en checksum del original y de la copia de la eeprom
*****************************************************************************/

void Escribir_Checksum_Eeprom (char chGrupo) {
    48c2:	cf 93       	push	r28
    48c4:	df 93       	push	r29
    48c6:	00 d0       	rcall	.+0      	; 0x48c8 <Escribir_Checksum_Eeprom+0x6>
    48c8:	00 d0       	rcall	.+0      	; 0x48ca <Escribir_Checksum_Eeprom+0x8>
    48ca:	1f 92       	push	r1
    48cc:	cd b7       	in	r28, 0x3d	; 61
    48ce:	de b7       	in	r29, 0x3e	; 62
    48d0:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int uChecksum;

//	sprintf (chBufferTx_USART0, "\n\r%S %d\n\r", (wchar_t*)numeroGrupo_MSG, chGrupo);
//	Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);

	if (chGrupo == GRUPO_SERIE) { /* -0- */
    48d2:	8d 81       	ldd	r24, Y+5	; 0x05
    48d4:	88 23       	and	r24, r24
    48d6:	51 f5       	brne	.+84     	; 0x492c <Escribir_Checksum_Eeprom+0x6a>
		uChecksum = 0;
    48d8:	1c 82       	std	Y+4, r1	; 0x04
    48da:	1b 82       	std	Y+3, r1	; 0x03
		for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++)
    48dc:	1a 82       	std	Y+2, r1	; 0x02
    48de:	19 82       	std	Y+1, r1	; 0x01
    48e0:	12 c0       	rjmp	.+36     	; 0x4906 <Escribir_Checksum_Eeprom+0x44>
			uChecksum += Char_a_Checksum (chNumeroSerie+i);
    48e2:	89 81       	ldd	r24, Y+1	; 0x01
    48e4:	9a 81       	ldd	r25, Y+2	; 0x02
    48e6:	81 5e       	subi	r24, 0xE1	; 225
    48e8:	99 4f       	sbci	r25, 0xF9	; 249
    48ea:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <Char_a_Checksum>
    48ee:	9c 01       	movw	r18, r24
    48f0:	8b 81       	ldd	r24, Y+3	; 0x03
    48f2:	9c 81       	ldd	r25, Y+4	; 0x04
    48f4:	82 0f       	add	r24, r18
    48f6:	93 1f       	adc	r25, r19
    48f8:	9c 83       	std	Y+4, r25	; 0x04
    48fa:	8b 83       	std	Y+3, r24	; 0x03
//	sprintf (chBufferTx_USART0, "\n\r%S %d\n\r", (wchar_t*)numeroGrupo_MSG, chGrupo);
//	Transmitir_Buffer_USART0 (chBufferTx_USART0, USART0_BUFFER_ZISE);

	if (chGrupo == GRUPO_SERIE) { /* -0- */
		uChecksum = 0;
		for (int i=0; i<NUMERO_SERIE_MAX_DIGITOS; i++)
    48fc:	89 81       	ldd	r24, Y+1	; 0x01
    48fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4900:	01 96       	adiw	r24, 0x01	; 1
    4902:	9a 83       	std	Y+2, r25	; 0x02
    4904:	89 83       	std	Y+1, r24	; 0x01
    4906:	89 81       	ldd	r24, Y+1	; 0x01
    4908:	9a 81       	ldd	r25, Y+2	; 0x02
    490a:	0a 97       	sbiw	r24, 0x0a	; 10
    490c:	54 f3       	brlt	.-44     	; 0x48e2 <Escribir_Checksum_Eeprom+0x20>
			uChecksum += Char_a_Checksum (chNumeroSerie+i);

		UnsignedInt_a_Eeprom (&uChecksumGeneral_Eeprom, &uChecksum);
    490e:	ce 01       	movw	r24, r28
    4910:	03 96       	adiw	r24, 0x03	; 3
    4912:	bc 01       	movw	r22, r24
    4914:	80 e0       	ldi	r24, 0x00	; 0
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom (&uChecksumGeneral_Eeprom_BK, &uChecksum);
    491c:	ce 01       	movw	r24, r28
    491e:	03 96       	adiw	r24, 0x03	; 3
    4920:	bc 01       	movw	r22, r24
    4922:	82 e0       	ldi	r24, 0x02	; 2
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
    492a:	f9 c0       	rjmp	.+498    	; 0x4b1e <Escribir_Checksum_Eeprom+0x25c>
	}
	else if (chGrupo == GRUPO_ALARMAS) { /* -1- */
    492c:	8d 81       	ldd	r24, Y+5	; 0x05
    492e:	81 30       	cpi	r24, 0x01	; 1
    4930:	09 f0       	breq	.+2      	; 0x4934 <Escribir_Checksum_Eeprom+0x72>
    4932:	41 c0       	rjmp	.+130    	; 0x49b6 <Escribir_Checksum_Eeprom+0xf4>
		uChecksum = Float_a_Checksum (&flValorAlarmaCond1);
    4934:	8c e2       	ldi	r24, 0x2C	; 44
    4936:	94 e0       	ldi	r25, 0x04	; 4
    4938:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    493c:	9c 83       	std	Y+4, r25	; 0x04
    493e:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += UnsignedInt_a_Checksum (&uTiempoAlarmaCond1);
    4940:	8d e1       	ldi	r24, 0x1D	; 29
    4942:	94 e0       	ldi	r25, 0x04	; 4
    4944:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    4948:	9c 01       	movw	r18, r24
    494a:	8b 81       	ldd	r24, Y+3	; 0x03
    494c:	9c 81       	ldd	r25, Y+4	; 0x04
    494e:	82 0f       	add	r24, r18
    4950:	93 1f       	adc	r25, r19
    4952:	9c 83       	std	Y+4, r25	; 0x04
    4954:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += Float_a_Checksum(&flValorAlarmaCond2);
    4956:	81 e2       	ldi	r24, 0x21	; 33
    4958:	94 e0       	ldi	r25, 0x04	; 4
    495a:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    495e:	9c 01       	movw	r18, r24
    4960:	8b 81       	ldd	r24, Y+3	; 0x03
    4962:	9c 81       	ldd	r25, Y+4	; 0x04
    4964:	82 0f       	add	r24, r18
    4966:	93 1f       	adc	r25, r19
    4968:	9c 83       	std	Y+4, r25	; 0x04
    496a:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += UnsignedInt_a_Checksum(&uTiempoAlarmaCond2);
    496c:	80 e3       	ldi	r24, 0x30	; 48
    496e:	94 e0       	ldi	r25, 0x04	; 4
    4970:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    4974:	9c 01       	movw	r18, r24
    4976:	8b 81       	ldd	r24, Y+3	; 0x03
    4978:	9c 81       	ldd	r25, Y+4	; 0x04
    497a:	82 0f       	add	r24, r18
    497c:	93 1f       	adc	r25, r19
    497e:	9c 83       	std	Y+4, r25	; 0x04
    4980:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += UnsignedInt_a_Checksum(&uTiempoSilenciarAlarma);
    4982:	8f e1       	ldi	r24, 0x1F	; 31
    4984:	94 e0       	ldi	r25, 0x04	; 4
    4986:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    498a:	9c 01       	movw	r18, r24
    498c:	8b 81       	ldd	r24, Y+3	; 0x03
    498e:	9c 81       	ldd	r25, Y+4	; 0x04
    4990:	82 0f       	add	r24, r18
    4992:	93 1f       	adc	r25, r19
    4994:	9c 83       	std	Y+4, r25	; 0x04
    4996:	8b 83       	std	Y+3, r24	; 0x03

		UnsignedInt_a_Eeprom (&uChecksumAlarmas_Eeprom, &uChecksum);
    4998:	ce 01       	movw	r24, r28
    499a:	03 96       	adiw	r24, 0x03	; 3
    499c:	bc 01       	movw	r22, r24
    499e:	84 e0       	ldi	r24, 0x04	; 4
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom (&uChecksumAlarmas_Eeprom_BK, &uChecksum);
    49a6:	ce 01       	movw	r24, r28
    49a8:	03 96       	adiw	r24, 0x03	; 3
    49aa:	bc 01       	movw	r22, r24
    49ac:	86 e0       	ldi	r24, 0x06	; 6
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
    49b4:	b4 c0       	rjmp	.+360    	; 0x4b1e <Escribir_Checksum_Eeprom+0x25c>
	}
	else if (chGrupo == GRUPO_ADC) { /* -2- */
    49b6:	8d 81       	ldd	r24, Y+5	; 0x05
    49b8:	82 30       	cpi	r24, 0x02	; 2
    49ba:	09 f0       	breq	.+2      	; 0x49be <Escribir_Checksum_Eeprom+0xfc>
    49bc:	8e c0       	rjmp	.+284    	; 0x4ada <Escribir_Checksum_Eeprom+0x218>
		uChecksum = UnsignedInt_a_Checksum (&uMuestrasADCpwm1);
    49be:	8d ef       	ldi	r24, 0xFD	; 253
    49c0:	94 e0       	ldi	r25, 0x04	; 4
    49c2:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    49c6:	9c 83       	std	Y+4, r25	; 0x04
    49c8:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += Float_a_Checksum(&flPWM1aMA);
    49ca:	89 e0       	ldi	r24, 0x09	; 9
    49cc:	95 e0       	ldi	r25, 0x05	; 5
    49ce:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    49d2:	9c 01       	movw	r18, r24
    49d4:	8b 81       	ldd	r24, Y+3	; 0x03
    49d6:	9c 81       	ldd	r25, Y+4	; 0x04
    49d8:	82 0f       	add	r24, r18
    49da:	93 1f       	adc	r25, r19
    49dc:	9c 83       	std	Y+4, r25	; 0x04
    49de:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += UnsignedInt_a_Checksum (&uMuestrasADCpwm2);
    49e0:	88 e1       	ldi	r24, 0x18	; 24
    49e2:	95 e0       	ldi	r25, 0x05	; 5
    49e4:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    49e8:	9c 01       	movw	r18, r24
    49ea:	8b 81       	ldd	r24, Y+3	; 0x03
    49ec:	9c 81       	ldd	r25, Y+4	; 0x04
    49ee:	82 0f       	add	r24, r18
    49f0:	93 1f       	adc	r25, r19
    49f2:	9c 83       	std	Y+4, r25	; 0x04
    49f4:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += Float_a_Checksum(&flPWM2aMA);
    49f6:	87 e9       	ldi	r24, 0x97	; 151
    49f8:	95 e0       	ldi	r25, 0x05	; 5
    49fa:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    49fe:	9c 01       	movw	r18, r24
    4a00:	8b 81       	ldd	r24, Y+3	; 0x03
    4a02:	9c 81       	ldd	r25, Y+4	; 0x04
    4a04:	82 0f       	add	r24, r18
    4a06:	93 1f       	adc	r25, r19
    4a08:	9c 83       	std	Y+4, r25	; 0x04
    4a0a:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += UnsignedInt_a_Checksum (&uRangoCond1);
    4a0c:	89 ee       	ldi	r24, 0xE9	; 233
    4a0e:	94 e0       	ldi	r25, 0x04	; 4
    4a10:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    4a14:	9c 01       	movw	r18, r24
    4a16:	8b 81       	ldd	r24, Y+3	; 0x03
    4a18:	9c 81       	ldd	r25, Y+4	; 0x04
    4a1a:	82 0f       	add	r24, r18
    4a1c:	93 1f       	adc	r25, r19
    4a1e:	9c 83       	std	Y+4, r25	; 0x04
    4a20:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += UnsignedInt_a_Checksum (&uMuestrasADCcond1);
    4a22:	81 e0       	ldi	r24, 0x01	; 1
    4a24:	95 e0       	ldi	r25, 0x05	; 5
    4a26:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    4a2a:	9c 01       	movw	r18, r24
    4a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a30:	82 0f       	add	r24, r18
    4a32:	93 1f       	adc	r25, r19
    4a34:	9c 83       	std	Y+4, r25	; 0x04
    4a36:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += Float_a_Checksum(&flCond1auS);
    4a38:	8d e0       	ldi	r24, 0x0D	; 13
    4a3a:	95 e0       	ldi	r25, 0x05	; 5
    4a3c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    4a40:	9c 01       	movw	r18, r24
    4a42:	8b 81       	ldd	r24, Y+3	; 0x03
    4a44:	9c 81       	ldd	r25, Y+4	; 0x04
    4a46:	82 0f       	add	r24, r18
    4a48:	93 1f       	adc	r25, r19
    4a4a:	9c 83       	std	Y+4, r25	; 0x04
    4a4c:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += Float_a_Checksum(&flOffsetCond1);
    4a4e:	88 ef       	ldi	r24, 0xF8	; 248
    4a50:	94 e0       	ldi	r25, 0x04	; 4
    4a52:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    4a56:	9c 01       	movw	r18, r24
    4a58:	8b 81       	ldd	r24, Y+3	; 0x03
    4a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    4a5c:	82 0f       	add	r24, r18
    4a5e:	93 1f       	adc	r25, r19
    4a60:	9c 83       	std	Y+4, r25	; 0x04
    4a62:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += UnsignedInt_a_Checksum (&uRangoCond2);
    4a64:	8d e1       	ldi	r24, 0x1D	; 29
    4a66:	96 e0       	ldi	r25, 0x06	; 6
    4a68:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    4a6c:	9c 01       	movw	r18, r24
    4a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a70:	9c 81       	ldd	r25, Y+4	; 0x04
    4a72:	82 0f       	add	r24, r18
    4a74:	93 1f       	adc	r25, r19
    4a76:	9c 83       	std	Y+4, r25	; 0x04
    4a78:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += UnsignedInt_a_Checksum (&uMuestrasADCcond2);
    4a7a:	86 ef       	ldi	r24, 0xF6	; 246
    4a7c:	94 e0       	ldi	r25, 0x04	; 4
    4a7e:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    4a82:	9c 01       	movw	r18, r24
    4a84:	8b 81       	ldd	r24, Y+3	; 0x03
    4a86:	9c 81       	ldd	r25, Y+4	; 0x04
    4a88:	82 0f       	add	r24, r18
    4a8a:	93 1f       	adc	r25, r19
    4a8c:	9c 83       	std	Y+4, r25	; 0x04
    4a8e:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += Float_a_Checksum(&flCond2auS);
    4a90:	83 e9       	ldi	r24, 0x93	; 147
    4a92:	95 e0       	ldi	r25, 0x05	; 5
    4a94:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    4a98:	9c 01       	movw	r18, r24
    4a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a9e:	82 0f       	add	r24, r18
    4aa0:	93 1f       	adc	r25, r19
    4aa2:	9c 83       	std	Y+4, r25	; 0x04
    4aa4:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += Float_a_Checksum(&flOffsetCond2);
    4aa6:	83 e0       	ldi	r24, 0x03	; 3
    4aa8:	95 e0       	ldi	r25, 0x05	; 5
    4aaa:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <Float_a_Checksum>
    4aae:	9c 01       	movw	r18, r24
    4ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ab4:	82 0f       	add	r24, r18
    4ab6:	93 1f       	adc	r25, r19
    4ab8:	9c 83       	std	Y+4, r25	; 0x04
    4aba:	8b 83       	std	Y+3, r24	; 0x03

		UnsignedInt_a_Eeprom (&uChecksumADC_Eeprom, &uChecksum);
    4abc:	ce 01       	movw	r24, r28
    4abe:	03 96       	adiw	r24, 0x03	; 3
    4ac0:	bc 01       	movw	r22, r24
    4ac2:	88 e0       	ldi	r24, 0x08	; 8
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom (&uChecksumADC_Eeprom_BK, &uChecksum);
    4aca:	ce 01       	movw	r24, r28
    4acc:	03 96       	adiw	r24, 0x03	; 3
    4ace:	bc 01       	movw	r22, r24
    4ad0:	8a e0       	ldi	r24, 0x0A	; 10
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
    4ad8:	22 c0       	rjmp	.+68     	; 0x4b1e <Escribir_Checksum_Eeprom+0x25c>
	}
	else if (chGrupo == GRUPO_PWM) { /* -3- */
    4ada:	8d 81       	ldd	r24, Y+5	; 0x05
    4adc:	83 30       	cpi	r24, 0x03	; 3
    4ade:	f9 f4       	brne	.+62     	; 0x4b1e <Escribir_Checksum_Eeprom+0x25c>
		uChecksum = UnsignedInt_a_Checksum (&uGananciaPWM1);
    4ae0:	84 e7       	ldi	r24, 0x74	; 116
    4ae2:	92 e0       	ldi	r25, 0x02	; 2
    4ae4:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    4ae8:	9c 83       	std	Y+4, r25	; 0x04
    4aea:	8b 83       	std	Y+3, r24	; 0x03
		uChecksum += UnsignedInt_a_Checksum (&uGananciaPWM2);
    4aec:	87 e7       	ldi	r24, 0x77	; 119
    4aee:	92 e0       	ldi	r25, 0x02	; 2
    4af0:	0e 94 f5 25 	call	0x4bea	; 0x4bea <UnsignedInt_a_Checksum>
    4af4:	9c 01       	movw	r18, r24
    4af6:	8b 81       	ldd	r24, Y+3	; 0x03
    4af8:	9c 81       	ldd	r25, Y+4	; 0x04
    4afa:	82 0f       	add	r24, r18
    4afc:	93 1f       	adc	r25, r19
    4afe:	9c 83       	std	Y+4, r25	; 0x04
    4b00:	8b 83       	std	Y+3, r24	; 0x03

		UnsignedInt_a_Eeprom (&uChecksumPWM_Eeprom, &uChecksum);
    4b02:	ce 01       	movw	r24, r28
    4b04:	03 96       	adiw	r24, 0x03	; 3
    4b06:	bc 01       	movw	r22, r24
    4b08:	8c e0       	ldi	r24, 0x0C	; 12
    4b0a:	90 e0       	ldi	r25, 0x00	; 0
    4b0c:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
		UnsignedInt_a_Eeprom (&uChecksumPWM_Eeprom_BK, &uChecksum);
    4b10:	ce 01       	movw	r24, r28
    4b12:	03 96       	adiw	r24, 0x03	; 3
    4b14:	bc 01       	movw	r22, r24
    4b16:	8e e0       	ldi	r24, 0x0E	; 14
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
	}
}
    4b1e:	0f 90       	pop	r0
    4b20:	0f 90       	pop	r0
    4b22:	0f 90       	pop	r0
    4b24:	0f 90       	pop	r0
    4b26:	0f 90       	pop	r0
    4b28:	df 91       	pop	r29
    4b2a:	cf 91       	pop	r28
    4b2c:	08 95       	ret

00004b2e <Float_a_Checksum>:

/*****************************************************************************
* Calcula el checksum de un float
*****************************************************************************/

unsigned int Float_a_Checksum (float *flDatoPtr) {
    4b2e:	cf 93       	push	r28
    4b30:	df 93       	push	r29
    4b32:	00 d0       	rcall	.+0      	; 0x4b34 <Float_a_Checksum+0x6>
    4b34:	00 d0       	rcall	.+0      	; 0x4b36 <Float_a_Checksum+0x8>
    4b36:	00 d0       	rcall	.+0      	; 0x4b38 <Float_a_Checksum+0xa>
    4b38:	cd b7       	in	r28, 0x3d	; 61
    4b3a:	de b7       	in	r29, 0x3e	; 62
    4b3c:	9e 83       	std	Y+6, r25	; 0x06
    4b3e:	8d 83       	std	Y+5, r24	; 0x05
	wdt_reset();
    4b40:	a8 95       	wdr

	long *lDatoPtr = (long *) flDatoPtr;
    4b42:	8d 81       	ldd	r24, Y+5	; 0x05
    4b44:	9e 81       	ldd	r25, Y+6	; 0x06
    4b46:	9a 83       	std	Y+2, r25	; 0x02
    4b48:	89 83       	std	Y+1, r24	; 0x01
	unsigned int CRC;

	CRC = (unsigned int)((*lDatoPtr >> 24) & BYTE_MASK);
    4b4a:	89 81       	ldd	r24, Y+1	; 0x01
    4b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b4e:	fc 01       	movw	r30, r24
    4b50:	80 81       	ld	r24, Z
    4b52:	91 81       	ldd	r25, Z+1	; 0x01
    4b54:	a2 81       	ldd	r26, Z+2	; 0x02
    4b56:	b3 81       	ldd	r27, Z+3	; 0x03
    4b58:	8b 2f       	mov	r24, r27
    4b5a:	bb 27       	eor	r27, r27
    4b5c:	87 fd       	sbrc	r24, 7
    4b5e:	b0 95       	com	r27
    4b60:	9b 2f       	mov	r25, r27
    4b62:	ab 2f       	mov	r26, r27
    4b64:	99 27       	eor	r25, r25
    4b66:	9c 83       	std	Y+4, r25	; 0x04
    4b68:	8b 83       	std	Y+3, r24	; 0x03
	CRC += (unsigned int)((*lDatoPtr >> 16) & BYTE_MASK);
    4b6a:	89 81       	ldd	r24, Y+1	; 0x01
    4b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b6e:	fc 01       	movw	r30, r24
    4b70:	80 81       	ld	r24, Z
    4b72:	91 81       	ldd	r25, Z+1	; 0x01
    4b74:	a2 81       	ldd	r26, Z+2	; 0x02
    4b76:	b3 81       	ldd	r27, Z+3	; 0x03
    4b78:	cd 01       	movw	r24, r26
    4b7a:	bb 27       	eor	r27, r27
    4b7c:	97 fd       	sbrc	r25, 7
    4b7e:	b0 95       	com	r27
    4b80:	ab 2f       	mov	r26, r27
    4b82:	99 27       	eor	r25, r25
    4b84:	2b 81       	ldd	r18, Y+3	; 0x03
    4b86:	3c 81       	ldd	r19, Y+4	; 0x04
    4b88:	82 0f       	add	r24, r18
    4b8a:	93 1f       	adc	r25, r19
    4b8c:	9c 83       	std	Y+4, r25	; 0x04
    4b8e:	8b 83       	std	Y+3, r24	; 0x03
	CRC += (unsigned int)((*lDatoPtr >> 8) & BYTE_MASK);
    4b90:	89 81       	ldd	r24, Y+1	; 0x01
    4b92:	9a 81       	ldd	r25, Y+2	; 0x02
    4b94:	fc 01       	movw	r30, r24
    4b96:	80 81       	ld	r24, Z
    4b98:	91 81       	ldd	r25, Z+1	; 0x01
    4b9a:	a2 81       	ldd	r26, Z+2	; 0x02
    4b9c:	b3 81       	ldd	r27, Z+3	; 0x03
    4b9e:	89 2f       	mov	r24, r25
    4ba0:	9a 2f       	mov	r25, r26
    4ba2:	ab 2f       	mov	r26, r27
    4ba4:	bb 27       	eor	r27, r27
    4ba6:	a7 fd       	sbrc	r26, 7
    4ba8:	ba 95       	dec	r27
    4baa:	99 27       	eor	r25, r25
    4bac:	2b 81       	ldd	r18, Y+3	; 0x03
    4bae:	3c 81       	ldd	r19, Y+4	; 0x04
    4bb0:	82 0f       	add	r24, r18
    4bb2:	93 1f       	adc	r25, r19
    4bb4:	9c 83       	std	Y+4, r25	; 0x04
    4bb6:	8b 83       	std	Y+3, r24	; 0x03
	CRC += (unsigned int)((*lDatoPtr) & BYTE_MASK);
    4bb8:	89 81       	ldd	r24, Y+1	; 0x01
    4bba:	9a 81       	ldd	r25, Y+2	; 0x02
    4bbc:	fc 01       	movw	r30, r24
    4bbe:	80 81       	ld	r24, Z
    4bc0:	91 81       	ldd	r25, Z+1	; 0x01
    4bc2:	a2 81       	ldd	r26, Z+2	; 0x02
    4bc4:	b3 81       	ldd	r27, Z+3	; 0x03
    4bc6:	99 27       	eor	r25, r25
    4bc8:	2b 81       	ldd	r18, Y+3	; 0x03
    4bca:	3c 81       	ldd	r19, Y+4	; 0x04
    4bcc:	82 0f       	add	r24, r18
    4bce:	93 1f       	adc	r25, r19
    4bd0:	9c 83       	std	Y+4, r25	; 0x04
    4bd2:	8b 83       	std	Y+3, r24	; 0x03

	return CRC;
    4bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    4bd6:	9c 81       	ldd	r25, Y+4	; 0x04
}
    4bd8:	26 96       	adiw	r28, 0x06	; 6
    4bda:	0f b6       	in	r0, 0x3f	; 63
    4bdc:	f8 94       	cli
    4bde:	de bf       	out	0x3e, r29	; 62
    4be0:	0f be       	out	0x3f, r0	; 63
    4be2:	cd bf       	out	0x3d, r28	; 61
    4be4:	df 91       	pop	r29
    4be6:	cf 91       	pop	r28
    4be8:	08 95       	ret

00004bea <UnsignedInt_a_Checksum>:

/*****************************************************************************
* Calcula el checksum de un unsigned int
*****************************************************************************/

unsigned int UnsignedInt_a_Checksum (unsigned int *uDatoPtr) {
    4bea:	cf 93       	push	r28
    4bec:	df 93       	push	r29
    4bee:	00 d0       	rcall	.+0      	; 0x4bf0 <UnsignedInt_a_Checksum+0x6>
    4bf0:	00 d0       	rcall	.+0      	; 0x4bf2 <UnsignedInt_a_Checksum+0x8>
    4bf2:	cd b7       	in	r28, 0x3d	; 61
    4bf4:	de b7       	in	r29, 0x3e	; 62
    4bf6:	9c 83       	std	Y+4, r25	; 0x04
    4bf8:	8b 83       	std	Y+3, r24	; 0x03
	wdt_reset();
    4bfa:	a8 95       	wdr

	unsigned int CRC;

	CRC = (*uDatoPtr >> 8) & BYTE_MASK;
    4bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    4c00:	fc 01       	movw	r30, r24
    4c02:	80 81       	ld	r24, Z
    4c04:	91 81       	ldd	r25, Z+1	; 0x01
    4c06:	89 2f       	mov	r24, r25
    4c08:	99 27       	eor	r25, r25
    4c0a:	9a 83       	std	Y+2, r25	; 0x02
    4c0c:	89 83       	std	Y+1, r24	; 0x01
	CRC += *uDatoPtr & BYTE_MASK;
    4c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c10:	9c 81       	ldd	r25, Y+4	; 0x04
    4c12:	fc 01       	movw	r30, r24
    4c14:	80 81       	ld	r24, Z
    4c16:	91 81       	ldd	r25, Z+1	; 0x01
    4c18:	99 27       	eor	r25, r25
    4c1a:	29 81       	ldd	r18, Y+1	; 0x01
    4c1c:	3a 81       	ldd	r19, Y+2	; 0x02
    4c1e:	82 0f       	add	r24, r18
    4c20:	93 1f       	adc	r25, r19
    4c22:	9a 83       	std	Y+2, r25	; 0x02
    4c24:	89 83       	std	Y+1, r24	; 0x01

	return CRC;
    4c26:	89 81       	ldd	r24, Y+1	; 0x01
    4c28:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4c2a:	0f 90       	pop	r0
    4c2c:	0f 90       	pop	r0
    4c2e:	0f 90       	pop	r0
    4c30:	0f 90       	pop	r0
    4c32:	df 91       	pop	r29
    4c34:	cf 91       	pop	r28
    4c36:	08 95       	ret

00004c38 <Char_a_Checksum>:

/*****************************************************************************
* Calcula el checksum de un char
*****************************************************************************/

unsigned int Char_a_Checksum (char *chDatoPtr) {
    4c38:	cf 93       	push	r28
    4c3a:	df 93       	push	r29
    4c3c:	00 d0       	rcall	.+0      	; 0x4c3e <Char_a_Checksum+0x6>
    4c3e:	00 d0       	rcall	.+0      	; 0x4c40 <Char_a_Checksum+0x8>
    4c40:	00 d0       	rcall	.+0      	; 0x4c42 <Char_a_Checksum+0xa>
    4c42:	cd b7       	in	r28, 0x3d	; 61
    4c44:	de b7       	in	r29, 0x3e	; 62
    4c46:	9e 83       	std	Y+6, r25	; 0x06
    4c48:	8d 83       	std	Y+5, r24	; 0x05
	wdt_reset();
    4c4a:	a8 95       	wdr

	unsigned int *uDatoPtr = (unsigned int *) chDatoPtr;
    4c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    4c50:	9a 83       	std	Y+2, r25	; 0x02
    4c52:	89 83       	std	Y+1, r24	; 0x01
	unsigned int CRC;

	CRC = *uDatoPtr & BYTE_MASK;
    4c54:	89 81       	ldd	r24, Y+1	; 0x01
    4c56:	9a 81       	ldd	r25, Y+2	; 0x02
    4c58:	fc 01       	movw	r30, r24
    4c5a:	80 81       	ld	r24, Z
    4c5c:	91 81       	ldd	r25, Z+1	; 0x01
    4c5e:	99 27       	eor	r25, r25
    4c60:	9c 83       	std	Y+4, r25	; 0x04
    4c62:	8b 83       	std	Y+3, r24	; 0x03

	return CRC;
    4c64:	8b 81       	ldd	r24, Y+3	; 0x03
    4c66:	9c 81       	ldd	r25, Y+4	; 0x04
}
    4c68:	26 96       	adiw	r28, 0x06	; 6
    4c6a:	0f b6       	in	r0, 0x3f	; 63
    4c6c:	f8 94       	cli
    4c6e:	de bf       	out	0x3e, r29	; 62
    4c70:	0f be       	out	0x3f, r0	; 63
    4c72:	cd bf       	out	0x3d, r28	; 61
    4c74:	df 91       	pop	r29
    4c76:	cf 91       	pop	r28
    4c78:	08 95       	ret

00004c7a <Float_a_Eeprom>:

/*****************************************************************************
* Funcion de escritura de un float a la eeprom
*****************************************************************************/

void Float_a_Eeprom (float *flEepromPtr, float *flDatoEscritoPtr) {
    4c7a:	cf 93       	push	r28
    4c7c:	df 93       	push	r29
    4c7e:	cd b7       	in	r28, 0x3d	; 61
    4c80:	de b7       	in	r29, 0x3e	; 62
    4c82:	2a 97       	sbiw	r28, 0x0a	; 10
    4c84:	0f b6       	in	r0, 0x3f	; 63
    4c86:	f8 94       	cli
    4c88:	de bf       	out	0x3e, r29	; 62
    4c8a:	0f be       	out	0x3f, r0	; 63
    4c8c:	cd bf       	out	0x3d, r28	; 61
    4c8e:	98 87       	std	Y+8, r25	; 0x08
    4c90:	8f 83       	std	Y+7, r24	; 0x07
    4c92:	7a 87       	std	Y+10, r23	; 0x0a
    4c94:	69 87       	std	Y+9, r22	; 0x09
	int i = 0;
    4c96:	1a 82       	std	Y+2, r1	; 0x02
    4c98:	19 82       	std	Y+1, r1	; 0x01
	float flDatoLeido;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    4c9a:	4c c0       	rjmp	.+152    	; 0x4d34 <Float_a_Eeprom+0xba>
		wdt_reset();
    4c9c:	a8 95       	wdr
		eeprom_busy_wait ();
    4c9e:	8c e3       	ldi	r24, 0x3C	; 60
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	fc 01       	movw	r30, r24
    4ca4:	80 81       	ld	r24, Z
    4ca6:	88 2f       	mov	r24, r24
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	82 70       	andi	r24, 0x02	; 2
    4cac:	99 27       	eor	r25, r25
    4cae:	89 2b       	or	r24, r25
    4cb0:	b1 f7       	brne	.-20     	; 0x4c9e <Float_a_Eeprom+0x24>
		cli();
    4cb2:	f8 94       	cli
		eeprom_write_float (flEepromPtr, *flDatoEscritoPtr);
    4cb4:	89 85       	ldd	r24, Y+9	; 0x09
    4cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cb8:	fc 01       	movw	r30, r24
    4cba:	80 81       	ld	r24, Z
    4cbc:	91 81       	ldd	r25, Z+1	; 0x01
    4cbe:	a2 81       	ldd	r26, Z+2	; 0x02
    4cc0:	b3 81       	ldd	r27, Z+3	; 0x03
    4cc2:	2f 81       	ldd	r18, Y+7	; 0x07
    4cc4:	38 85       	ldd	r19, Y+8	; 0x08
    4cc6:	ac 01       	movw	r20, r24
    4cc8:	bd 01       	movw	r22, r26
    4cca:	c9 01       	movw	r24, r18
    4ccc:	0e 94 a3 89 	call	0x11346	; 0x11346 <eeprom_write_dword>
		sei();
    4cd0:	78 94       	sei
		eeprom_busy_wait ();
    4cd2:	8c e3       	ldi	r24, 0x3C	; 60
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	fc 01       	movw	r30, r24
    4cd8:	80 81       	ld	r24, Z
    4cda:	88 2f       	mov	r24, r24
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	82 70       	andi	r24, 0x02	; 2
    4ce0:	99 27       	eor	r25, r25
    4ce2:	89 2b       	or	r24, r25
    4ce4:	b1 f7       	brne	.-20     	; 0x4cd2 <Float_a_Eeprom+0x58>
		cli();
    4ce6:	f8 94       	cli
		flDatoLeido = eeprom_read_float (flEepromPtr);
    4ce8:	8f 81       	ldd	r24, Y+7	; 0x07
    4cea:	98 85       	ldd	r25, Y+8	; 0x08
    4cec:	0e 94 8a 89 	call	0x11314	; 0x11314 <eeprom_read_dword>
    4cf0:	dc 01       	movw	r26, r24
    4cf2:	cb 01       	movw	r24, r22
    4cf4:	8b 83       	std	Y+3, r24	; 0x03
    4cf6:	9c 83       	std	Y+4, r25	; 0x04
    4cf8:	ad 83       	std	Y+5, r26	; 0x05
    4cfa:	be 83       	std	Y+6, r27	; 0x06
		sei();
    4cfc:	78 94       	sei
		(flDatoLeido == *flDatoEscritoPtr) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
    4cfe:	89 85       	ldd	r24, Y+9	; 0x09
    4d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d02:	fc 01       	movw	r30, r24
    4d04:	80 81       	ld	r24, Z
    4d06:	91 81       	ldd	r25, Z+1	; 0x01
    4d08:	a2 81       	ldd	r26, Z+2	; 0x02
    4d0a:	b3 81       	ldd	r27, Z+3	; 0x03
    4d0c:	2b 81       	ldd	r18, Y+3	; 0x03
    4d0e:	3c 81       	ldd	r19, Y+4	; 0x04
    4d10:	4d 81       	ldd	r20, Y+5	; 0x05
    4d12:	5e 81       	ldd	r21, Y+6	; 0x06
    4d14:	bc 01       	movw	r22, r24
    4d16:	cd 01       	movw	r24, r26
    4d18:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    4d1c:	88 23       	and	r24, r24
    4d1e:	29 f4       	brne	.+10     	; 0x4d2a <Float_a_Eeprom+0xb0>
    4d20:	85 e6       	ldi	r24, 0x65	; 101
    4d22:	90 e0       	ldi	r25, 0x00	; 0
    4d24:	9a 83       	std	Y+2, r25	; 0x02
    4d26:	89 83       	std	Y+1, r24	; 0x01
    4d28:	05 c0       	rjmp	.+10     	; 0x4d34 <Float_a_Eeprom+0xba>
    4d2a:	89 81       	ldd	r24, Y+1	; 0x01
    4d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d2e:	01 96       	adiw	r24, 0x01	; 1
    4d30:	9a 83       	std	Y+2, r25	; 0x02
    4d32:	89 83       	std	Y+1, r24	; 0x01

void Float_a_Eeprom (float *flEepromPtr, float *flDatoEscritoPtr) {
	int i = 0;
	float flDatoLeido;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    4d34:	89 81       	ldd	r24, Y+1	; 0x01
    4d36:	9a 81       	ldd	r25, Y+2	; 0x02
    4d38:	84 36       	cpi	r24, 0x64	; 100
    4d3a:	91 05       	cpc	r25, r1
    4d3c:	0c f4       	brge	.+2      	; 0x4d40 <Float_a_Eeprom+0xc6>
    4d3e:	ae cf       	rjmp	.-164    	; 0x4c9c <Float_a_Eeprom+0x22>
		flDatoLeido = eeprom_read_float (flEepromPtr);
		sei();
		(flDatoLeido == *flDatoEscritoPtr) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
	}

	EEAR = (uint16_t) &flDireccionVaciaEeprom;
    4d40:	8e e3       	ldi	r24, 0x3E	; 62
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	20 e1       	ldi	r18, 0x10	; 16
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	fc 01       	movw	r30, r24
    4d4a:	31 83       	std	Z+1, r19	; 0x01
    4d4c:	20 83       	st	Z, r18
}
    4d4e:	2a 96       	adiw	r28, 0x0a	; 10
    4d50:	0f b6       	in	r0, 0x3f	; 63
    4d52:	f8 94       	cli
    4d54:	de bf       	out	0x3e, r29	; 62
    4d56:	0f be       	out	0x3f, r0	; 63
    4d58:	cd bf       	out	0x3d, r28	; 61
    4d5a:	df 91       	pop	r29
    4d5c:	cf 91       	pop	r28
    4d5e:	08 95       	ret

00004d60 <Eeprom_a_Float>:

/*****************************************************************************
* Funcion de lectura de un float de la eeprom
*****************************************************************************/

void Eeprom_a_Float (float *flEepromPtr, float *flDatoLeidoPtr) {
    4d60:	cf 93       	push	r28
    4d62:	df 93       	push	r29
    4d64:	cd b7       	in	r28, 0x3d	; 61
    4d66:	de b7       	in	r29, 0x3e	; 62
    4d68:	2a 97       	sbiw	r28, 0x0a	; 10
    4d6a:	0f b6       	in	r0, 0x3f	; 63
    4d6c:	f8 94       	cli
    4d6e:	de bf       	out	0x3e, r29	; 62
    4d70:	0f be       	out	0x3f, r0	; 63
    4d72:	cd bf       	out	0x3d, r28	; 61
    4d74:	98 87       	std	Y+8, r25	; 0x08
    4d76:	8f 83       	std	Y+7, r24	; 0x07
    4d78:	7a 87       	std	Y+10, r23	; 0x0a
    4d7a:	69 87       	std	Y+9, r22	; 0x09
	int i = 0;
    4d7c:	1a 82       	std	Y+2, r1	; 0x02
    4d7e:	19 82       	std	Y+1, r1	; 0x01
	float flDatoLeido2;

	while (i < CANT_INTENTOS_LECTURA_EEPROM) {
    4d80:	4b c0       	rjmp	.+150    	; 0x4e18 <Eeprom_a_Float+0xb8>
		wdt_reset();
    4d82:	a8 95       	wdr
		eeprom_busy_wait ();
    4d84:	8c e3       	ldi	r24, 0x3C	; 60
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	fc 01       	movw	r30, r24
    4d8a:	80 81       	ld	r24, Z
    4d8c:	88 2f       	mov	r24, r24
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	82 70       	andi	r24, 0x02	; 2
    4d92:	99 27       	eor	r25, r25
    4d94:	89 2b       	or	r24, r25
    4d96:	b1 f7       	brne	.-20     	; 0x4d84 <Eeprom_a_Float+0x24>
		cli();
    4d98:	f8 94       	cli
		*flDatoLeidoPtr = eeprom_read_float (flEepromPtr);
    4d9a:	8f 81       	ldd	r24, Y+7	; 0x07
    4d9c:	98 85       	ldd	r25, Y+8	; 0x08
    4d9e:	0e 94 8a 89 	call	0x11314	; 0x11314 <eeprom_read_dword>
    4da2:	dc 01       	movw	r26, r24
    4da4:	cb 01       	movw	r24, r22
    4da6:	29 85       	ldd	r18, Y+9	; 0x09
    4da8:	3a 85       	ldd	r19, Y+10	; 0x0a
    4daa:	f9 01       	movw	r30, r18
    4dac:	80 83       	st	Z, r24
    4dae:	91 83       	std	Z+1, r25	; 0x01
    4db0:	a2 83       	std	Z+2, r26	; 0x02
    4db2:	b3 83       	std	Z+3, r27	; 0x03
		sei();
    4db4:	78 94       	sei
		eeprom_busy_wait ();
    4db6:	8c e3       	ldi	r24, 0x3C	; 60
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	fc 01       	movw	r30, r24
    4dbc:	80 81       	ld	r24, Z
    4dbe:	88 2f       	mov	r24, r24
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	82 70       	andi	r24, 0x02	; 2
    4dc4:	99 27       	eor	r25, r25
    4dc6:	89 2b       	or	r24, r25
    4dc8:	b1 f7       	brne	.-20     	; 0x4db6 <Eeprom_a_Float+0x56>
		cli();
    4dca:	f8 94       	cli
		flDatoLeido2 = eeprom_read_float (flEepromPtr);
    4dcc:	8f 81       	ldd	r24, Y+7	; 0x07
    4dce:	98 85       	ldd	r25, Y+8	; 0x08
    4dd0:	0e 94 8a 89 	call	0x11314	; 0x11314 <eeprom_read_dword>
    4dd4:	dc 01       	movw	r26, r24
    4dd6:	cb 01       	movw	r24, r22
    4dd8:	8b 83       	std	Y+3, r24	; 0x03
    4dda:	9c 83       	std	Y+4, r25	; 0x04
    4ddc:	ad 83       	std	Y+5, r26	; 0x05
    4dde:	be 83       	std	Y+6, r27	; 0x06
		sei();
    4de0:	78 94       	sei
		(*flDatoLeidoPtr == flDatoLeido2) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
    4de2:	89 85       	ldd	r24, Y+9	; 0x09
    4de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4de6:	fc 01       	movw	r30, r24
    4de8:	80 81       	ld	r24, Z
    4dea:	91 81       	ldd	r25, Z+1	; 0x01
    4dec:	a2 81       	ldd	r26, Z+2	; 0x02
    4dee:	b3 81       	ldd	r27, Z+3	; 0x03
    4df0:	2b 81       	ldd	r18, Y+3	; 0x03
    4df2:	3c 81       	ldd	r19, Y+4	; 0x04
    4df4:	4d 81       	ldd	r20, Y+5	; 0x05
    4df6:	5e 81       	ldd	r21, Y+6	; 0x06
    4df8:	bc 01       	movw	r22, r24
    4dfa:	cd 01       	movw	r24, r26
    4dfc:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    4e00:	88 23       	and	r24, r24
    4e02:	29 f4       	brne	.+10     	; 0x4e0e <Eeprom_a_Float+0xae>
    4e04:	85 e6       	ldi	r24, 0x65	; 101
    4e06:	90 e0       	ldi	r25, 0x00	; 0
    4e08:	9a 83       	std	Y+2, r25	; 0x02
    4e0a:	89 83       	std	Y+1, r24	; 0x01
    4e0c:	05 c0       	rjmp	.+10     	; 0x4e18 <Eeprom_a_Float+0xb8>
    4e0e:	89 81       	ldd	r24, Y+1	; 0x01
    4e10:	9a 81       	ldd	r25, Y+2	; 0x02
    4e12:	01 96       	adiw	r24, 0x01	; 1
    4e14:	9a 83       	std	Y+2, r25	; 0x02
    4e16:	89 83       	std	Y+1, r24	; 0x01

void Eeprom_a_Float (float *flEepromPtr, float *flDatoLeidoPtr) {
	int i = 0;
	float flDatoLeido2;

	while (i < CANT_INTENTOS_LECTURA_EEPROM) {
    4e18:	89 81       	ldd	r24, Y+1	; 0x01
    4e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e1c:	84 36       	cpi	r24, 0x64	; 100
    4e1e:	91 05       	cpc	r25, r1
    4e20:	0c f4       	brge	.+2      	; 0x4e24 <Eeprom_a_Float+0xc4>
    4e22:	af cf       	rjmp	.-162    	; 0x4d82 <Eeprom_a_Float+0x22>
		flDatoLeido2 = eeprom_read_float (flEepromPtr);
		sei();
		(*flDatoLeidoPtr == flDatoLeido2) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
	}

	EEAR = (uint16_t) &flDireccionVaciaEeprom;
    4e24:	8e e3       	ldi	r24, 0x3E	; 62
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	20 e1       	ldi	r18, 0x10	; 16
    4e2a:	30 e0       	ldi	r19, 0x00	; 0
    4e2c:	fc 01       	movw	r30, r24
    4e2e:	31 83       	std	Z+1, r19	; 0x01
    4e30:	20 83       	st	Z, r18
}
    4e32:	2a 96       	adiw	r28, 0x0a	; 10
    4e34:	0f b6       	in	r0, 0x3f	; 63
    4e36:	f8 94       	cli
    4e38:	de bf       	out	0x3e, r29	; 62
    4e3a:	0f be       	out	0x3f, r0	; 63
    4e3c:	cd bf       	out	0x3d, r28	; 61
    4e3e:	df 91       	pop	r29
    4e40:	cf 91       	pop	r28
    4e42:	08 95       	ret

00004e44 <UnsignedInt_a_Eeprom>:

/*****************************************************************************
* Funcion de escritura de un unsigned int a la eeprom
*****************************************************************************/

void UnsignedInt_a_Eeprom (unsigned int *uEepromPtr, unsigned int *uDatoEscritoPtr) {
    4e44:	cf 93       	push	r28
    4e46:	df 93       	push	r29
    4e48:	cd b7       	in	r28, 0x3d	; 61
    4e4a:	de b7       	in	r29, 0x3e	; 62
    4e4c:	28 97       	sbiw	r28, 0x08	; 8
    4e4e:	0f b6       	in	r0, 0x3f	; 63
    4e50:	f8 94       	cli
    4e52:	de bf       	out	0x3e, r29	; 62
    4e54:	0f be       	out	0x3f, r0	; 63
    4e56:	cd bf       	out	0x3d, r28	; 61
    4e58:	9e 83       	std	Y+6, r25	; 0x06
    4e5a:	8d 83       	std	Y+5, r24	; 0x05
    4e5c:	78 87       	std	Y+8, r23	; 0x08
    4e5e:	6f 83       	std	Y+7, r22	; 0x07
	int i = 0;
    4e60:	1a 82       	std	Y+2, r1	; 0x02
    4e62:	19 82       	std	Y+1, r1	; 0x01
	unsigned int uDatoLeido;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    4e64:	3d c0       	rjmp	.+122    	; 0x4ee0 <UnsignedInt_a_Eeprom+0x9c>
		wdt_reset();
    4e66:	a8 95       	wdr
		eeprom_busy_wait ();
    4e68:	8c e3       	ldi	r24, 0x3C	; 60
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	fc 01       	movw	r30, r24
    4e6e:	80 81       	ld	r24, Z
    4e70:	88 2f       	mov	r24, r24
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	82 70       	andi	r24, 0x02	; 2
    4e76:	99 27       	eor	r25, r25
    4e78:	89 2b       	or	r24, r25
    4e7a:	b1 f7       	brne	.-20     	; 0x4e68 <UnsignedInt_a_Eeprom+0x24>
		cli();
    4e7c:	f8 94       	cli
		eeprom_write_word ((uint16_t *) uEepromPtr, *uDatoEscritoPtr);
    4e7e:	8f 81       	ldd	r24, Y+7	; 0x07
    4e80:	98 85       	ldd	r25, Y+8	; 0x08
    4e82:	fc 01       	movw	r30, r24
    4e84:	20 81       	ld	r18, Z
    4e86:	31 81       	ldd	r19, Z+1	; 0x01
    4e88:	8d 81       	ldd	r24, Y+5	; 0x05
    4e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    4e8c:	b9 01       	movw	r22, r18
    4e8e:	0e 94 ab 89 	call	0x11356	; 0x11356 <eeprom_write_word>
		sei();
    4e92:	78 94       	sei
		eeprom_busy_wait ();
    4e94:	8c e3       	ldi	r24, 0x3C	; 60
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	fc 01       	movw	r30, r24
    4e9a:	80 81       	ld	r24, Z
    4e9c:	88 2f       	mov	r24, r24
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	82 70       	andi	r24, 0x02	; 2
    4ea2:	99 27       	eor	r25, r25
    4ea4:	89 2b       	or	r24, r25
    4ea6:	b1 f7       	brne	.-20     	; 0x4e94 <UnsignedInt_a_Eeprom+0x50>
		cli();
    4ea8:	f8 94       	cli
		uDatoLeido = eeprom_read_word ((uint16_t *) uEepromPtr);
    4eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    4eac:	9e 81       	ldd	r25, Y+6	; 0x06
    4eae:	0e 94 90 89 	call	0x11320	; 0x11320 <eeprom_read_word>
    4eb2:	9c 83       	std	Y+4, r25	; 0x04
    4eb4:	8b 83       	std	Y+3, r24	; 0x03
		sei();
    4eb6:	78 94       	sei
		(uDatoLeido == *uDatoEscritoPtr) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
    4eb8:	8f 81       	ldd	r24, Y+7	; 0x07
    4eba:	98 85       	ldd	r25, Y+8	; 0x08
    4ebc:	fc 01       	movw	r30, r24
    4ebe:	20 81       	ld	r18, Z
    4ec0:	31 81       	ldd	r19, Z+1	; 0x01
    4ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ec6:	28 17       	cp	r18, r24
    4ec8:	39 07       	cpc	r19, r25
    4eca:	29 f4       	brne	.+10     	; 0x4ed6 <UnsignedInt_a_Eeprom+0x92>
    4ecc:	85 e6       	ldi	r24, 0x65	; 101
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	9a 83       	std	Y+2, r25	; 0x02
    4ed2:	89 83       	std	Y+1, r24	; 0x01
    4ed4:	05 c0       	rjmp	.+10     	; 0x4ee0 <UnsignedInt_a_Eeprom+0x9c>
    4ed6:	89 81       	ldd	r24, Y+1	; 0x01
    4ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    4eda:	01 96       	adiw	r24, 0x01	; 1
    4edc:	9a 83       	std	Y+2, r25	; 0x02
    4ede:	89 83       	std	Y+1, r24	; 0x01

void UnsignedInt_a_Eeprom (unsigned int *uEepromPtr, unsigned int *uDatoEscritoPtr) {
	int i = 0;
	unsigned int uDatoLeido;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    4ee0:	89 81       	ldd	r24, Y+1	; 0x01
    4ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ee4:	84 36       	cpi	r24, 0x64	; 100
    4ee6:	91 05       	cpc	r25, r1
    4ee8:	0c f4       	brge	.+2      	; 0x4eec <UnsignedInt_a_Eeprom+0xa8>
    4eea:	bd cf       	rjmp	.-134    	; 0x4e66 <UnsignedInt_a_Eeprom+0x22>
		uDatoLeido = eeprom_read_word ((uint16_t *) uEepromPtr);
		sei();
		(uDatoLeido == *uDatoEscritoPtr) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
	}

	EEAR = (uint16_t) &flDireccionVaciaEeprom;
    4eec:	8e e3       	ldi	r24, 0x3E	; 62
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	20 e1       	ldi	r18, 0x10	; 16
    4ef2:	30 e0       	ldi	r19, 0x00	; 0
    4ef4:	fc 01       	movw	r30, r24
    4ef6:	31 83       	std	Z+1, r19	; 0x01
    4ef8:	20 83       	st	Z, r18
}
    4efa:	28 96       	adiw	r28, 0x08	; 8
    4efc:	0f b6       	in	r0, 0x3f	; 63
    4efe:	f8 94       	cli
    4f00:	de bf       	out	0x3e, r29	; 62
    4f02:	0f be       	out	0x3f, r0	; 63
    4f04:	cd bf       	out	0x3d, r28	; 61
    4f06:	df 91       	pop	r29
    4f08:	cf 91       	pop	r28
    4f0a:	08 95       	ret

00004f0c <Eeprom_a_UnsignedInt>:

/*****************************************************************************
* Funcion de lectura de un unsigned int a la eeprom
*****************************************************************************/

void Eeprom_a_UnsignedInt (unsigned int *uEepromPtr, unsigned int *uDatoLeidoPtr) {
    4f0c:	cf 93       	push	r28
    4f0e:	df 93       	push	r29
    4f10:	cd b7       	in	r28, 0x3d	; 61
    4f12:	de b7       	in	r29, 0x3e	; 62
    4f14:	28 97       	sbiw	r28, 0x08	; 8
    4f16:	0f b6       	in	r0, 0x3f	; 63
    4f18:	f8 94       	cli
    4f1a:	de bf       	out	0x3e, r29	; 62
    4f1c:	0f be       	out	0x3f, r0	; 63
    4f1e:	cd bf       	out	0x3d, r28	; 61
    4f20:	9e 83       	std	Y+6, r25	; 0x06
    4f22:	8d 83       	std	Y+5, r24	; 0x05
    4f24:	78 87       	std	Y+8, r23	; 0x08
    4f26:	6f 83       	std	Y+7, r22	; 0x07
	int i = 0;
    4f28:	1a 82       	std	Y+2, r1	; 0x02
    4f2a:	19 82       	std	Y+1, r1	; 0x01
	unsigned int uDatoLeido2;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    4f2c:	3d c0       	rjmp	.+122    	; 0x4fa8 <Eeprom_a_UnsignedInt+0x9c>
		wdt_reset();
    4f2e:	a8 95       	wdr
		eeprom_busy_wait ();
    4f30:	8c e3       	ldi	r24, 0x3C	; 60
    4f32:	90 e0       	ldi	r25, 0x00	; 0
    4f34:	fc 01       	movw	r30, r24
    4f36:	80 81       	ld	r24, Z
    4f38:	88 2f       	mov	r24, r24
    4f3a:	90 e0       	ldi	r25, 0x00	; 0
    4f3c:	82 70       	andi	r24, 0x02	; 2
    4f3e:	99 27       	eor	r25, r25
    4f40:	89 2b       	or	r24, r25
    4f42:	b1 f7       	brne	.-20     	; 0x4f30 <Eeprom_a_UnsignedInt+0x24>
		cli();
    4f44:	f8 94       	cli
		*uDatoLeidoPtr = eeprom_read_word ((uint16_t *) uEepromPtr);
    4f46:	8d 81       	ldd	r24, Y+5	; 0x05
    4f48:	9e 81       	ldd	r25, Y+6	; 0x06
    4f4a:	0e 94 90 89 	call	0x11320	; 0x11320 <eeprom_read_word>
    4f4e:	9c 01       	movw	r18, r24
    4f50:	8f 81       	ldd	r24, Y+7	; 0x07
    4f52:	98 85       	ldd	r25, Y+8	; 0x08
    4f54:	fc 01       	movw	r30, r24
    4f56:	31 83       	std	Z+1, r19	; 0x01
    4f58:	20 83       	st	Z, r18
		sei();
    4f5a:	78 94       	sei
		eeprom_busy_wait ();
    4f5c:	8c e3       	ldi	r24, 0x3C	; 60
    4f5e:	90 e0       	ldi	r25, 0x00	; 0
    4f60:	fc 01       	movw	r30, r24
    4f62:	80 81       	ld	r24, Z
    4f64:	88 2f       	mov	r24, r24
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	82 70       	andi	r24, 0x02	; 2
    4f6a:	99 27       	eor	r25, r25
    4f6c:	89 2b       	or	r24, r25
    4f6e:	b1 f7       	brne	.-20     	; 0x4f5c <Eeprom_a_UnsignedInt+0x50>
		cli();
    4f70:	f8 94       	cli
		uDatoLeido2 = eeprom_read_word ((uint16_t *) uEepromPtr);
    4f72:	8d 81       	ldd	r24, Y+5	; 0x05
    4f74:	9e 81       	ldd	r25, Y+6	; 0x06
    4f76:	0e 94 90 89 	call	0x11320	; 0x11320 <eeprom_read_word>
    4f7a:	9c 83       	std	Y+4, r25	; 0x04
    4f7c:	8b 83       	std	Y+3, r24	; 0x03
		sei();
    4f7e:	78 94       	sei
		(*uDatoLeidoPtr == uDatoLeido2) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
    4f80:	8f 81       	ldd	r24, Y+7	; 0x07
    4f82:	98 85       	ldd	r25, Y+8	; 0x08
    4f84:	fc 01       	movw	r30, r24
    4f86:	20 81       	ld	r18, Z
    4f88:	31 81       	ldd	r19, Z+1	; 0x01
    4f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f8e:	28 17       	cp	r18, r24
    4f90:	39 07       	cpc	r19, r25
    4f92:	29 f4       	brne	.+10     	; 0x4f9e <Eeprom_a_UnsignedInt+0x92>
    4f94:	85 e6       	ldi	r24, 0x65	; 101
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	9a 83       	std	Y+2, r25	; 0x02
    4f9a:	89 83       	std	Y+1, r24	; 0x01
    4f9c:	05 c0       	rjmp	.+10     	; 0x4fa8 <Eeprom_a_UnsignedInt+0x9c>
    4f9e:	89 81       	ldd	r24, Y+1	; 0x01
    4fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa2:	01 96       	adiw	r24, 0x01	; 1
    4fa4:	9a 83       	std	Y+2, r25	; 0x02
    4fa6:	89 83       	std	Y+1, r24	; 0x01

void Eeprom_a_UnsignedInt (unsigned int *uEepromPtr, unsigned int *uDatoLeidoPtr) {
	int i = 0;
	unsigned int uDatoLeido2;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    4fa8:	89 81       	ldd	r24, Y+1	; 0x01
    4faa:	9a 81       	ldd	r25, Y+2	; 0x02
    4fac:	84 36       	cpi	r24, 0x64	; 100
    4fae:	91 05       	cpc	r25, r1
    4fb0:	0c f4       	brge	.+2      	; 0x4fb4 <Eeprom_a_UnsignedInt+0xa8>
    4fb2:	bd cf       	rjmp	.-134    	; 0x4f2e <Eeprom_a_UnsignedInt+0x22>
		uDatoLeido2 = eeprom_read_word ((uint16_t *) uEepromPtr);
		sei();
		(*uDatoLeidoPtr == uDatoLeido2) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
	}

	EEAR = (uint16_t) &flDireccionVaciaEeprom;
    4fb4:	8e e3       	ldi	r24, 0x3E	; 62
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	20 e1       	ldi	r18, 0x10	; 16
    4fba:	30 e0       	ldi	r19, 0x00	; 0
    4fbc:	fc 01       	movw	r30, r24
    4fbe:	31 83       	std	Z+1, r19	; 0x01
    4fc0:	20 83       	st	Z, r18
}
    4fc2:	28 96       	adiw	r28, 0x08	; 8
    4fc4:	0f b6       	in	r0, 0x3f	; 63
    4fc6:	f8 94       	cli
    4fc8:	de bf       	out	0x3e, r29	; 62
    4fca:	0f be       	out	0x3f, r0	; 63
    4fcc:	cd bf       	out	0x3d, r28	; 61
    4fce:	df 91       	pop	r29
    4fd0:	cf 91       	pop	r28
    4fd2:	08 95       	ret

00004fd4 <Char_a_Eeprom>:

/*****************************************************************************
* Funcion de escritura de un char a la eeprom
*****************************************************************************/

void Char_a_Eeprom (char *chEepromPtr, char *chDatoEscritoPtr) {
    4fd4:	cf 93       	push	r28
    4fd6:	df 93       	push	r29
    4fd8:	cd b7       	in	r28, 0x3d	; 61
    4fda:	de b7       	in	r29, 0x3e	; 62
    4fdc:	27 97       	sbiw	r28, 0x07	; 7
    4fde:	0f b6       	in	r0, 0x3f	; 63
    4fe0:	f8 94       	cli
    4fe2:	de bf       	out	0x3e, r29	; 62
    4fe4:	0f be       	out	0x3f, r0	; 63
    4fe6:	cd bf       	out	0x3d, r28	; 61
    4fe8:	9d 83       	std	Y+5, r25	; 0x05
    4fea:	8c 83       	std	Y+4, r24	; 0x04
    4fec:	7f 83       	std	Y+7, r23	; 0x07
    4fee:	6e 83       	std	Y+6, r22	; 0x06
	int i = 0;
    4ff0:	1a 82       	std	Y+2, r1	; 0x02
    4ff2:	19 82       	std	Y+1, r1	; 0x01
	char chDatoLeido;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    4ff4:	38 c0       	rjmp	.+112    	; 0x5066 <Char_a_Eeprom+0x92>
		wdt_reset();
    4ff6:	a8 95       	wdr
		eeprom_busy_wait ();
    4ff8:	8c e3       	ldi	r24, 0x3C	; 60
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	fc 01       	movw	r30, r24
    4ffe:	80 81       	ld	r24, Z
    5000:	88 2f       	mov	r24, r24
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	82 70       	andi	r24, 0x02	; 2
    5006:	99 27       	eor	r25, r25
    5008:	89 2b       	or	r24, r25
    500a:	b1 f7       	brne	.-20     	; 0x4ff8 <Char_a_Eeprom+0x24>
		cli();
    500c:	f8 94       	cli
		eeprom_write_byte ((uint8_t *) chEepromPtr, *chDatoEscritoPtr);
    500e:	8e 81       	ldd	r24, Y+6	; 0x06
    5010:	9f 81       	ldd	r25, Y+7	; 0x07
    5012:	fc 01       	movw	r30, r24
    5014:	20 81       	ld	r18, Z
    5016:	8c 81       	ldd	r24, Y+4	; 0x04
    5018:	9d 81       	ldd	r25, Y+5	; 0x05
    501a:	62 2f       	mov	r22, r18
    501c:	0e 94 96 89 	call	0x1132c	; 0x1132c <eeprom_write_byte>
		sei();
    5020:	78 94       	sei
		eeprom_busy_wait ();
    5022:	8c e3       	ldi	r24, 0x3C	; 60
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	fc 01       	movw	r30, r24
    5028:	80 81       	ld	r24, Z
    502a:	88 2f       	mov	r24, r24
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	82 70       	andi	r24, 0x02	; 2
    5030:	99 27       	eor	r25, r25
    5032:	89 2b       	or	r24, r25
    5034:	b1 f7       	brne	.-20     	; 0x5022 <Char_a_Eeprom+0x4e>
		cli();
    5036:	f8 94       	cli
		chDatoLeido = eeprom_read_byte ((uint8_t *) chEepromPtr);
    5038:	8c 81       	ldd	r24, Y+4	; 0x04
    503a:	9d 81       	ldd	r25, Y+5	; 0x05
    503c:	0e 94 82 89 	call	0x11304	; 0x11304 <eeprom_read_byte>
    5040:	8b 83       	std	Y+3, r24	; 0x03
		sei();
    5042:	78 94       	sei
		(chDatoLeido == *chDatoEscritoPtr) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
    5044:	8e 81       	ldd	r24, Y+6	; 0x06
    5046:	9f 81       	ldd	r25, Y+7	; 0x07
    5048:	fc 01       	movw	r30, r24
    504a:	90 81       	ld	r25, Z
    504c:	8b 81       	ldd	r24, Y+3	; 0x03
    504e:	98 17       	cp	r25, r24
    5050:	29 f4       	brne	.+10     	; 0x505c <Char_a_Eeprom+0x88>
    5052:	85 e6       	ldi	r24, 0x65	; 101
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	9a 83       	std	Y+2, r25	; 0x02
    5058:	89 83       	std	Y+1, r24	; 0x01
    505a:	05 c0       	rjmp	.+10     	; 0x5066 <Char_a_Eeprom+0x92>
    505c:	89 81       	ldd	r24, Y+1	; 0x01
    505e:	9a 81       	ldd	r25, Y+2	; 0x02
    5060:	01 96       	adiw	r24, 0x01	; 1
    5062:	9a 83       	std	Y+2, r25	; 0x02
    5064:	89 83       	std	Y+1, r24	; 0x01

void Char_a_Eeprom (char *chEepromPtr, char *chDatoEscritoPtr) {
	int i = 0;
	char chDatoLeido;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    5066:	89 81       	ldd	r24, Y+1	; 0x01
    5068:	9a 81       	ldd	r25, Y+2	; 0x02
    506a:	84 36       	cpi	r24, 0x64	; 100
    506c:	91 05       	cpc	r25, r1
    506e:	0c f4       	brge	.+2      	; 0x5072 <Char_a_Eeprom+0x9e>
    5070:	c2 cf       	rjmp	.-124    	; 0x4ff6 <Char_a_Eeprom+0x22>
		chDatoLeido = eeprom_read_byte ((uint8_t *) chEepromPtr);
		sei();
		(chDatoLeido == *chDatoEscritoPtr) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
	}

	EEAR = (uint16_t) &flDireccionVaciaEeprom;
    5072:	8e e3       	ldi	r24, 0x3E	; 62
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	20 e1       	ldi	r18, 0x10	; 16
    5078:	30 e0       	ldi	r19, 0x00	; 0
    507a:	fc 01       	movw	r30, r24
    507c:	31 83       	std	Z+1, r19	; 0x01
    507e:	20 83       	st	Z, r18
}
    5080:	27 96       	adiw	r28, 0x07	; 7
    5082:	0f b6       	in	r0, 0x3f	; 63
    5084:	f8 94       	cli
    5086:	de bf       	out	0x3e, r29	; 62
    5088:	0f be       	out	0x3f, r0	; 63
    508a:	cd bf       	out	0x3d, r28	; 61
    508c:	df 91       	pop	r29
    508e:	cf 91       	pop	r28
    5090:	08 95       	ret

00005092 <Eeprom_a_Char>:

/*****************************************************************************
* Funcion de lectura de un char de la eeprom
*****************************************************************************/

void Eeprom_a_Char (char *chEepromPtr, char *chDatoLeidoPtr) {
    5092:	cf 93       	push	r28
    5094:	df 93       	push	r29
    5096:	cd b7       	in	r28, 0x3d	; 61
    5098:	de b7       	in	r29, 0x3e	; 62
    509a:	27 97       	sbiw	r28, 0x07	; 7
    509c:	0f b6       	in	r0, 0x3f	; 63
    509e:	f8 94       	cli
    50a0:	de bf       	out	0x3e, r29	; 62
    50a2:	0f be       	out	0x3f, r0	; 63
    50a4:	cd bf       	out	0x3d, r28	; 61
    50a6:	9d 83       	std	Y+5, r25	; 0x05
    50a8:	8c 83       	std	Y+4, r24	; 0x04
    50aa:	7f 83       	std	Y+7, r23	; 0x07
    50ac:	6e 83       	std	Y+6, r22	; 0x06
	int i = 0;
    50ae:	1a 82       	std	Y+2, r1	; 0x02
    50b0:	19 82       	std	Y+1, r1	; 0x01
	char chDatoLeido2;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    50b2:	38 c0       	rjmp	.+112    	; 0x5124 <Eeprom_a_Char+0x92>
		wdt_reset();
    50b4:	a8 95       	wdr
		eeprom_busy_wait ();
    50b6:	8c e3       	ldi	r24, 0x3C	; 60
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	fc 01       	movw	r30, r24
    50bc:	80 81       	ld	r24, Z
    50be:	88 2f       	mov	r24, r24
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	82 70       	andi	r24, 0x02	; 2
    50c4:	99 27       	eor	r25, r25
    50c6:	89 2b       	or	r24, r25
    50c8:	b1 f7       	brne	.-20     	; 0x50b6 <Eeprom_a_Char+0x24>
		cli();
    50ca:	f8 94       	cli
		*chDatoLeidoPtr = eeprom_read_byte ((uint8_t *) chEepromPtr);
    50cc:	8c 81       	ldd	r24, Y+4	; 0x04
    50ce:	9d 81       	ldd	r25, Y+5	; 0x05
    50d0:	0e 94 82 89 	call	0x11304	; 0x11304 <eeprom_read_byte>
    50d4:	28 2f       	mov	r18, r24
    50d6:	8e 81       	ldd	r24, Y+6	; 0x06
    50d8:	9f 81       	ldd	r25, Y+7	; 0x07
    50da:	fc 01       	movw	r30, r24
    50dc:	20 83       	st	Z, r18
		sei();
    50de:	78 94       	sei
		eeprom_busy_wait ();
    50e0:	8c e3       	ldi	r24, 0x3C	; 60
    50e2:	90 e0       	ldi	r25, 0x00	; 0
    50e4:	fc 01       	movw	r30, r24
    50e6:	80 81       	ld	r24, Z
    50e8:	88 2f       	mov	r24, r24
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	82 70       	andi	r24, 0x02	; 2
    50ee:	99 27       	eor	r25, r25
    50f0:	89 2b       	or	r24, r25
    50f2:	b1 f7       	brne	.-20     	; 0x50e0 <Eeprom_a_Char+0x4e>
		cli();
    50f4:	f8 94       	cli
		chDatoLeido2 = eeprom_read_byte ((uint8_t *) chEepromPtr);
    50f6:	8c 81       	ldd	r24, Y+4	; 0x04
    50f8:	9d 81       	ldd	r25, Y+5	; 0x05
    50fa:	0e 94 82 89 	call	0x11304	; 0x11304 <eeprom_read_byte>
    50fe:	8b 83       	std	Y+3, r24	; 0x03
		sei();
    5100:	78 94       	sei
		(*chDatoLeidoPtr == chDatoLeido2) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
    5102:	8e 81       	ldd	r24, Y+6	; 0x06
    5104:	9f 81       	ldd	r25, Y+7	; 0x07
    5106:	fc 01       	movw	r30, r24
    5108:	90 81       	ld	r25, Z
    510a:	8b 81       	ldd	r24, Y+3	; 0x03
    510c:	98 17       	cp	r25, r24
    510e:	29 f4       	brne	.+10     	; 0x511a <Eeprom_a_Char+0x88>
    5110:	85 e6       	ldi	r24, 0x65	; 101
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	9a 83       	std	Y+2, r25	; 0x02
    5116:	89 83       	std	Y+1, r24	; 0x01
    5118:	05 c0       	rjmp	.+10     	; 0x5124 <Eeprom_a_Char+0x92>
    511a:	89 81       	ldd	r24, Y+1	; 0x01
    511c:	9a 81       	ldd	r25, Y+2	; 0x02
    511e:	01 96       	adiw	r24, 0x01	; 1
    5120:	9a 83       	std	Y+2, r25	; 0x02
    5122:	89 83       	std	Y+1, r24	; 0x01

void Eeprom_a_Char (char *chEepromPtr, char *chDatoLeidoPtr) {
	int i = 0;
	char chDatoLeido2;

	while (i < CANT_INTENTOS_ESCRITURA_EEPROM) {
    5124:	89 81       	ldd	r24, Y+1	; 0x01
    5126:	9a 81       	ldd	r25, Y+2	; 0x02
    5128:	84 36       	cpi	r24, 0x64	; 100
    512a:	91 05       	cpc	r25, r1
    512c:	0c f4       	brge	.+2      	; 0x5130 <Eeprom_a_Char+0x9e>
    512e:	c2 cf       	rjmp	.-124    	; 0x50b4 <Eeprom_a_Char+0x22>
		chDatoLeido2 = eeprom_read_byte ((uint8_t *) chEepromPtr);
		sei();
		(*chDatoLeidoPtr == chDatoLeido2) ? (i = CANT_INTENTOS_ESCRITURA_EEPROM + 1) : (i ++);
	}

	EEAR = (uint16_t) &flDireccionVaciaEeprom;
    5130:	8e e3       	ldi	r24, 0x3E	; 62
    5132:	90 e0       	ldi	r25, 0x00	; 0
    5134:	20 e1       	ldi	r18, 0x10	; 16
    5136:	30 e0       	ldi	r19, 0x00	; 0
    5138:	fc 01       	movw	r30, r24
    513a:	31 83       	std	Z+1, r19	; 0x01
    513c:	20 83       	st	Z, r18
}
    513e:	27 96       	adiw	r28, 0x07	; 7
    5140:	0f b6       	in	r0, 0x3f	; 63
    5142:	f8 94       	cli
    5144:	de bf       	out	0x3e, r29	; 62
    5146:	0f be       	out	0x3f, r0	; 63
    5148:	cd bf       	out	0x3d, r28	; 61
    514a:	df 91       	pop	r29
    514c:	cf 91       	pop	r28
    514e:	08 95       	ret

00005150 <Inicio_Puertos>:
volatile unsigned int	uContBuzzerOFF;	/**< \brief contador de tiempo apagado del buzzer */

/************************************************************************
* Inicio de los puertos
************************************************************************/
void Inicio_Puertos (void) {	/* Funcion de inicio de los puertos de entrada/salida */
    5150:	cf 93       	push	r28
    5152:	df 93       	push	r29
    5154:	cd b7       	in	r28, 0x3d	; 61
    5156:	de b7       	in	r29, 0x3e	; 62

	/* Puerto A */
	DIRECCION_PIN(DIR_TECLADO_PORT, PIN_TECLADO_COMUN, SALIDA);
    5158:	8a e3       	ldi	r24, 0x3A	; 58
    515a:	90 e0       	ldi	r25, 0x00	; 0
    515c:	2a e3       	ldi	r18, 0x3A	; 58
    515e:	30 e0       	ldi	r19, 0x00	; 0
    5160:	f9 01       	movw	r30, r18
    5162:	20 81       	ld	r18, Z
    5164:	21 60       	ori	r18, 0x01	; 1
    5166:	fc 01       	movw	r30, r24
    5168:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_TECLADO_PORT, PIN_TECLADO_1, ENTRADA);
    516a:	8a e3       	ldi	r24, 0x3A	; 58
    516c:	90 e0       	ldi	r25, 0x00	; 0
    516e:	2a e3       	ldi	r18, 0x3A	; 58
    5170:	30 e0       	ldi	r19, 0x00	; 0
    5172:	f9 01       	movw	r30, r18
    5174:	20 81       	ld	r18, Z
    5176:	2d 7f       	andi	r18, 0xFD	; 253
    5178:	fc 01       	movw	r30, r24
    517a:	20 83       	st	Z, r18
	PULL_UP_PIN(TECLADO_PORT, PIN_TECLADO_1, ON);
    517c:	8b e3       	ldi	r24, 0x3B	; 59
    517e:	90 e0       	ldi	r25, 0x00	; 0
    5180:	2b e3       	ldi	r18, 0x3B	; 59
    5182:	30 e0       	ldi	r19, 0x00	; 0
    5184:	f9 01       	movw	r30, r18
    5186:	20 81       	ld	r18, Z
    5188:	22 60       	ori	r18, 0x02	; 2
    518a:	fc 01       	movw	r30, r24
    518c:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_TECLADO_PORT, PIN_TECLADO_2, ENTRADA);
    518e:	8a e3       	ldi	r24, 0x3A	; 58
    5190:	90 e0       	ldi	r25, 0x00	; 0
    5192:	2a e3       	ldi	r18, 0x3A	; 58
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	f9 01       	movw	r30, r18
    5198:	20 81       	ld	r18, Z
    519a:	2b 7f       	andi	r18, 0xFB	; 251
    519c:	fc 01       	movw	r30, r24
    519e:	20 83       	st	Z, r18
	PULL_UP_PIN(TECLADO_PORT, PIN_TECLADO_2, ON);
    51a0:	8b e3       	ldi	r24, 0x3B	; 59
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	2b e3       	ldi	r18, 0x3B	; 59
    51a6:	30 e0       	ldi	r19, 0x00	; 0
    51a8:	f9 01       	movw	r30, r18
    51aa:	20 81       	ld	r18, Z
    51ac:	24 60       	ori	r18, 0x04	; 4
    51ae:	fc 01       	movw	r30, r24
    51b0:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_TECLADO_PORT, PIN_TECLADO_3, ENTRADA);
    51b2:	8a e3       	ldi	r24, 0x3A	; 58
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	2a e3       	ldi	r18, 0x3A	; 58
    51b8:	30 e0       	ldi	r19, 0x00	; 0
    51ba:	f9 01       	movw	r30, r18
    51bc:	20 81       	ld	r18, Z
    51be:	27 7f       	andi	r18, 0xF7	; 247
    51c0:	fc 01       	movw	r30, r24
    51c2:	20 83       	st	Z, r18
	PULL_UP_PIN(TECLADO_PORT, PIN_TECLADO_3, ON);
    51c4:	8b e3       	ldi	r24, 0x3B	; 59
    51c6:	90 e0       	ldi	r25, 0x00	; 0
    51c8:	2b e3       	ldi	r18, 0x3B	; 59
    51ca:	30 e0       	ldi	r19, 0x00	; 0
    51cc:	f9 01       	movw	r30, r18
    51ce:	20 81       	ld	r18, Z
    51d0:	28 60       	ori	r18, 0x08	; 8
    51d2:	fc 01       	movw	r30, r24
    51d4:	20 83       	st	Z, r18

	DIRECCION_PIN(DIR_JUMPER_PORT, PIN_JUMPER_OUT, SALIDA);
    51d6:	8a e3       	ldi	r24, 0x3A	; 58
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	2a e3       	ldi	r18, 0x3A	; 58
    51dc:	30 e0       	ldi	r19, 0x00	; 0
    51de:	f9 01       	movw	r30, r18
    51e0:	20 81       	ld	r18, Z
    51e2:	20 61       	ori	r18, 0x10	; 16
    51e4:	fc 01       	movw	r30, r24
    51e6:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_JUMPER_PORT, PIN_JUMPER_IN, ENTRADA);
    51e8:	8a e3       	ldi	r24, 0x3A	; 58
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	2a e3       	ldi	r18, 0x3A	; 58
    51ee:	30 e0       	ldi	r19, 0x00	; 0
    51f0:	f9 01       	movw	r30, r18
    51f2:	20 81       	ld	r18, Z
    51f4:	2f 7d       	andi	r18, 0xDF	; 223
    51f6:	fc 01       	movw	r30, r24
    51f8:	20 83       	st	Z, r18
	PULL_UP_PIN(JUMPER_PORT, PIN_JUMPER_IN, ON);
    51fa:	8b e3       	ldi	r24, 0x3B	; 59
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	2b e3       	ldi	r18, 0x3B	; 59
    5200:	30 e0       	ldi	r19, 0x00	; 0
    5202:	f9 01       	movw	r30, r18
    5204:	20 81       	ld	r18, Z
    5206:	20 62       	ori	r18, 0x20	; 32
    5208:	fc 01       	movw	r30, r24
    520a:	20 83       	st	Z, r18


	/* Puerto B */
	DIRECCION_PIN(DIR_LCD_BACKLIGHT_PORT, LCD_BACKLIGHT, SALIDA);
    520c:	87 e3       	ldi	r24, 0x37	; 55
    520e:	90 e0       	ldi	r25, 0x00	; 0
    5210:	27 e3       	ldi	r18, 0x37	; 55
    5212:	30 e0       	ldi	r19, 0x00	; 0
    5214:	f9 01       	movw	r30, r18
    5216:	20 81       	ld	r18, Z
    5218:	28 60       	ori	r18, 0x08	; 8
    521a:	fc 01       	movw	r30, r24
    521c:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_PWM_420MA_PORT, PWM_2_420MA, SALIDA);
    521e:	87 e3       	ldi	r24, 0x37	; 55
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	27 e3       	ldi	r18, 0x37	; 55
    5224:	30 e0       	ldi	r19, 0x00	; 0
    5226:	f9 01       	movw	r30, r18
    5228:	20 81       	ld	r18, Z
    522a:	20 62       	ori	r18, 0x20	; 32
    522c:	fc 01       	movw	r30, r24
    522e:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_PWM_420MA_PORT, PWM_1_420MA, SALIDA);
    5230:	87 e3       	ldi	r24, 0x37	; 55
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	27 e3       	ldi	r18, 0x37	; 55
    5236:	30 e0       	ldi	r19, 0x00	; 0
    5238:	f9 01       	movw	r30, r18
    523a:	20 81       	ld	r18, Z
    523c:	20 64       	ori	r18, 0x40	; 64
    523e:	fc 01       	movw	r30, r24
    5240:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_PULSOS_COND_PORT, PULSOS_COND, SALIDA);
    5242:	87 e3       	ldi	r24, 0x37	; 55
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	27 e3       	ldi	r18, 0x37	; 55
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	f9 01       	movw	r30, r18
    524c:	20 81       	ld	r18, Z
    524e:	20 68       	ori	r18, 0x80	; 128
    5250:	fc 01       	movw	r30, r24
    5252:	20 83       	st	Z, r18


	/* Puerto C */
	DIRECCION_PIN(DIR_LCD_DB_PORT, LCD_DB_7, SALIDA);
    5254:	84 e3       	ldi	r24, 0x34	; 52
    5256:	90 e0       	ldi	r25, 0x00	; 0
    5258:	24 e3       	ldi	r18, 0x34	; 52
    525a:	30 e0       	ldi	r19, 0x00	; 0
    525c:	f9 01       	movw	r30, r18
    525e:	20 81       	ld	r18, Z
    5260:	21 60       	ori	r18, 0x01	; 1
    5262:	fc 01       	movw	r30, r24
    5264:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_LCD_DB_PORT, LCD_DB_6, SALIDA);
    5266:	84 e3       	ldi	r24, 0x34	; 52
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	24 e3       	ldi	r18, 0x34	; 52
    526c:	30 e0       	ldi	r19, 0x00	; 0
    526e:	f9 01       	movw	r30, r18
    5270:	20 81       	ld	r18, Z
    5272:	22 60       	ori	r18, 0x02	; 2
    5274:	fc 01       	movw	r30, r24
    5276:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_LCD_DB_PORT, LCD_DB_5, SALIDA);
    5278:	84 e3       	ldi	r24, 0x34	; 52
    527a:	90 e0       	ldi	r25, 0x00	; 0
    527c:	24 e3       	ldi	r18, 0x34	; 52
    527e:	30 e0       	ldi	r19, 0x00	; 0
    5280:	f9 01       	movw	r30, r18
    5282:	20 81       	ld	r18, Z
    5284:	24 60       	ori	r18, 0x04	; 4
    5286:	fc 01       	movw	r30, r24
    5288:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_LCD_DB_PORT, LCD_DB_4, SALIDA);
    528a:	84 e3       	ldi	r24, 0x34	; 52
    528c:	90 e0       	ldi	r25, 0x00	; 0
    528e:	24 e3       	ldi	r18, 0x34	; 52
    5290:	30 e0       	ldi	r19, 0x00	; 0
    5292:	f9 01       	movw	r30, r18
    5294:	20 81       	ld	r18, Z
    5296:	28 60       	ori	r18, 0x08	; 8
    5298:	fc 01       	movw	r30, r24
    529a:	20 83       	st	Z, r18


	/* Puerto D */
	DIRECCION_PIN(DIR_SERIAL_422485_PORT, RXD_422485, ENTRADA);
    529c:	81 e3       	ldi	r24, 0x31	; 49
    529e:	90 e0       	ldi	r25, 0x00	; 0
    52a0:	21 e3       	ldi	r18, 0x31	; 49
    52a2:	30 e0       	ldi	r19, 0x00	; 0
    52a4:	f9 01       	movw	r30, r18
    52a6:	20 81       	ld	r18, Z
    52a8:	2b 7f       	andi	r18, 0xFB	; 251
    52aa:	fc 01       	movw	r30, r24
    52ac:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_SERIAL_422485_PORT, TXD_422485, SALIDA);
    52ae:	81 e3       	ldi	r24, 0x31	; 49
    52b0:	90 e0       	ldi	r25, 0x00	; 0
    52b2:	21 e3       	ldi	r18, 0x31	; 49
    52b4:	30 e0       	ldi	r19, 0x00	; 0
    52b6:	f9 01       	movw	r30, r18
    52b8:	20 81       	ld	r18, Z
    52ba:	28 60       	ori	r18, 0x08	; 8
    52bc:	fc 01       	movw	r30, r24
    52be:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_SERIAL_422485_PORT, SELECT_422485, SALIDA);
    52c0:	81 e3       	ldi	r24, 0x31	; 49
    52c2:	90 e0       	ldi	r25, 0x00	; 0
    52c4:	21 e3       	ldi	r18, 0x31	; 49
    52c6:	30 e0       	ldi	r19, 0x00	; 0
    52c8:	f9 01       	movw	r30, r18
    52ca:	20 81       	ld	r18, Z
    52cc:	20 62       	ori	r18, 0x20	; 32
    52ce:	fc 01       	movw	r30, r24
    52d0:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_LCD_RS_PORT, LCD_CONT_RS, SALIDA);
    52d2:	81 e3       	ldi	r24, 0x31	; 49
    52d4:	90 e0       	ldi	r25, 0x00	; 0
    52d6:	21 e3       	ldi	r18, 0x31	; 49
    52d8:	30 e0       	ldi	r19, 0x00	; 0
    52da:	f9 01       	movw	r30, r18
    52dc:	20 81       	ld	r18, Z
    52de:	20 64       	ori	r18, 0x40	; 64
    52e0:	fc 01       	movw	r30, r24
    52e2:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_LCD_RW_PORT, LCD_CONT_RW, SALIDA);
    52e4:	81 e3       	ldi	r24, 0x31	; 49
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	21 e3       	ldi	r18, 0x31	; 49
    52ea:	30 e0       	ldi	r19, 0x00	; 0
    52ec:	f9 01       	movw	r30, r18
    52ee:	20 81       	ld	r18, Z
    52f0:	20 68       	ori	r18, 0x80	; 128
    52f2:	fc 01       	movw	r30, r24
    52f4:	20 83       	st	Z, r18


	/* Puerto E */
	DIRECCION_PIN(DIR_SERIAL_PORT, SERIAL_RX, ENTRADA);
    52f6:	82 e2       	ldi	r24, 0x22	; 34
    52f8:	90 e0       	ldi	r25, 0x00	; 0
    52fa:	22 e2       	ldi	r18, 0x22	; 34
    52fc:	30 e0       	ldi	r19, 0x00	; 0
    52fe:	f9 01       	movw	r30, r18
    5300:	20 81       	ld	r18, Z
    5302:	2e 7f       	andi	r18, 0xFE	; 254
    5304:	fc 01       	movw	r30, r24
    5306:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_SERIAL_PORT, SERIAL_TX, SALIDA);
    5308:	82 e2       	ldi	r24, 0x22	; 34
    530a:	90 e0       	ldi	r25, 0x00	; 0
    530c:	22 e2       	ldi	r18, 0x22	; 34
    530e:	30 e0       	ldi	r19, 0x00	; 0
    5310:	f9 01       	movw	r30, r18
    5312:	20 81       	ld	r18, Z
    5314:	22 60       	ori	r18, 0x02	; 2
    5316:	fc 01       	movw	r30, r24
    5318:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_BUZZER_PORT, BUZZER, SALIDA);
    531a:	82 e2       	ldi	r24, 0x22	; 34
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	22 e2       	ldi	r18, 0x22	; 34
    5320:	30 e0       	ldi	r19, 0x00	; 0
    5322:	f9 01       	movw	r30, r18
    5324:	20 81       	ld	r18, Z
    5326:	28 60       	ori	r18, 0x08	; 8
    5328:	fc 01       	movw	r30, r24
    532a:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_SALIDA_DIG_PORT, SALIDA_DIG_2, SALIDA);
    532c:	82 e2       	ldi	r24, 0x22	; 34
    532e:	90 e0       	ldi	r25, 0x00	; 0
    5330:	22 e2       	ldi	r18, 0x22	; 34
    5332:	30 e0       	ldi	r19, 0x00	; 0
    5334:	f9 01       	movw	r30, r18
    5336:	20 81       	ld	r18, Z
    5338:	20 61       	ori	r18, 0x10	; 16
    533a:	fc 01       	movw	r30, r24
    533c:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_SALIDA_DIG_PORT, SALIDA_DIG_1, SALIDA);
    533e:	82 e2       	ldi	r24, 0x22	; 34
    5340:	90 e0       	ldi	r25, 0x00	; 0
    5342:	22 e2       	ldi	r18, 0x22	; 34
    5344:	30 e0       	ldi	r19, 0x00	; 0
    5346:	f9 01       	movw	r30, r18
    5348:	20 81       	ld	r18, Z
    534a:	20 62       	ori	r18, 0x20	; 32
    534c:	fc 01       	movw	r30, r24
    534e:	20 83       	st	Z, r18


	/* Puerto F */
	DIRECCION_PIN(DIR_ADC_420MA_PORT, ADC_1_420MA_P, ENTRADA);
    5350:	81 e6       	ldi	r24, 0x61	; 97
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	21 e6       	ldi	r18, 0x61	; 97
    5356:	30 e0       	ldi	r19, 0x00	; 0
    5358:	f9 01       	movw	r30, r18
    535a:	20 81       	ld	r18, Z
    535c:	2e 7f       	andi	r18, 0xFE	; 254
    535e:	fc 01       	movw	r30, r24
    5360:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_ADC_420MA_PORT, ADC_1_420MA_N, ENTRADA);
    5362:	81 e6       	ldi	r24, 0x61	; 97
    5364:	90 e0       	ldi	r25, 0x00	; 0
    5366:	21 e6       	ldi	r18, 0x61	; 97
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	f9 01       	movw	r30, r18
    536c:	20 81       	ld	r18, Z
    536e:	2d 7f       	andi	r18, 0xFD	; 253
    5370:	fc 01       	movw	r30, r24
    5372:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_ADC_420MA_PORT, ADC_2_420MA_P, ENTRADA);
    5374:	81 e6       	ldi	r24, 0x61	; 97
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	21 e6       	ldi	r18, 0x61	; 97
    537a:	30 e0       	ldi	r19, 0x00	; 0
    537c:	f9 01       	movw	r30, r18
    537e:	20 81       	ld	r18, Z
    5380:	2b 7f       	andi	r18, 0xFB	; 251
    5382:	fc 01       	movw	r30, r24
    5384:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_ADC_420MA_PORT, ADC_2_420MA_N, ENTRADA);
    5386:	81 e6       	ldi	r24, 0x61	; 97
    5388:	90 e0       	ldi	r25, 0x00	; 0
    538a:	21 e6       	ldi	r18, 0x61	; 97
    538c:	30 e0       	ldi	r19, 0x00	; 0
    538e:	f9 01       	movw	r30, r18
    5390:	20 81       	ld	r18, Z
    5392:	27 7f       	andi	r18, 0xF7	; 247
    5394:	fc 01       	movw	r30, r24
    5396:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_ADC_CONDUCT_PORT, ADC_CONDUCT_1, ENTRADA);
    5398:	81 e6       	ldi	r24, 0x61	; 97
    539a:	90 e0       	ldi	r25, 0x00	; 0
    539c:	21 e6       	ldi	r18, 0x61	; 97
    539e:	30 e0       	ldi	r19, 0x00	; 0
    53a0:	f9 01       	movw	r30, r18
    53a2:	20 81       	ld	r18, Z
    53a4:	2f 7b       	andi	r18, 0xBF	; 191
    53a6:	fc 01       	movw	r30, r24
    53a8:	20 83       	st	Z, r18
	DIRECCION_PIN(DIR_ADC_CONDUCT_PORT, ADC_CONDUCT_2, ENTRADA);
    53aa:	81 e6       	ldi	r24, 0x61	; 97
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	21 e6       	ldi	r18, 0x61	; 97
    53b0:	30 e0       	ldi	r19, 0x00	; 0
    53b2:	f9 01       	movw	r30, r18
    53b4:	20 81       	ld	r18, Z
    53b6:	2f 77       	andi	r18, 0x7F	; 127
    53b8:	fc 01       	movw	r30, r24
    53ba:	20 83       	st	Z, r18


	/* Puerto G*/
	DIRECCION_PIN(DIR_LCD_ENB_PORT, LCD_ENB, SALIDA);
    53bc:	84 e6       	ldi	r24, 0x64	; 100
    53be:	90 e0       	ldi	r25, 0x00	; 0
    53c0:	24 e6       	ldi	r18, 0x64	; 100
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	f9 01       	movw	r30, r18
    53c6:	20 81       	ld	r18, Z
    53c8:	20 61       	ori	r18, 0x10	; 16
    53ca:	fc 01       	movw	r30, r24
    53cc:	20 83       	st	Z, r18

}
    53ce:	df 91       	pop	r29
    53d0:	cf 91       	pop	r28
    53d2:	08 95       	ret

000053d4 <Inicio_Timer0>:
/************************************************************************
* Inicio Timer 0
************************************************************************/
/* Inicio el Timer 0 como marcador de inetrvalos de 1ms, modo 2 CTC, con prescaler 64 (CS02:0=100) [1024 (CS02:0=111)] */

void Inicio_Timer0 (void) {
    53d4:	cf 93       	push	r28
    53d6:	df 93       	push	r29
    53d8:	cd b7       	in	r28, 0x3d	; 61
    53da:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (OFF<<FOC0)|(OFF<<WGM00)|(ON<<WGM01)|(OFF<<COM01)|(OFF<<COM00)|(ON<<CS02)|(OFF<<CS01)|(OFF<<CS00);
    53dc:	83 e5       	ldi	r24, 0x53	; 83
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	2c e0       	ldi	r18, 0x0C	; 12
    53e2:	fc 01       	movw	r30, r24
    53e4:	20 83       	st	Z, r18
	OCR0 = ((F_CPU/64)/FRECUECNIA_INT_TIMER_0)-1;
    53e6:	81 e5       	ldi	r24, 0x51	; 81
    53e8:	90 e0       	ldi	r25, 0x00	; 0
    53ea:	2c e7       	ldi	r18, 0x7C	; 124
    53ec:	fc 01       	movw	r30, r24
    53ee:	20 83       	st	Z, r18
	SET_BIT (TIFR, OCF0);		/* aseguro que no haya ninguna interrupción por la unidad de comparación */
    53f0:	86 e5       	ldi	r24, 0x56	; 86
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	26 e5       	ldi	r18, 0x56	; 86
    53f6:	30 e0       	ldi	r19, 0x00	; 0
    53f8:	f9 01       	movw	r30, r18
    53fa:	20 81       	ld	r18, Z
    53fc:	22 60       	ori	r18, 0x02	; 2
    53fe:	fc 01       	movw	r30, r24
    5400:	20 83       	st	Z, r18
	SET_BIT (TIFR, TOV0);		/* aseguro que no haya ninguna interrupción por overflow */
    5402:	86 e5       	ldi	r24, 0x56	; 86
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	26 e5       	ldi	r18, 0x56	; 86
    5408:	30 e0       	ldi	r19, 0x00	; 0
    540a:	f9 01       	movw	r30, r18
    540c:	20 81       	ld	r18, Z
    540e:	21 60       	ori	r18, 0x01	; 1
    5410:	fc 01       	movw	r30, r24
    5412:	20 83       	st	Z, r18
	CLEAR_BIT (TIMSK,TOIE0);	/* deshabilito la interrupción por overflow */
    5414:	87 e5       	ldi	r24, 0x57	; 87
    5416:	90 e0       	ldi	r25, 0x00	; 0
    5418:	27 e5       	ldi	r18, 0x57	; 87
    541a:	30 e0       	ldi	r19, 0x00	; 0
    541c:	f9 01       	movw	r30, r18
    541e:	20 81       	ld	r18, Z
    5420:	2e 7f       	andi	r18, 0xFE	; 254
    5422:	fc 01       	movw	r30, r24
    5424:	20 83       	st	Z, r18
	SET_BIT (TIMSK, OCIE0);		/* Habilito la interrupción para cuando OCR0 == TCNT0 */
    5426:	87 e5       	ldi	r24, 0x57	; 87
    5428:	90 e0       	ldi	r25, 0x00	; 0
    542a:	27 e5       	ldi	r18, 0x57	; 87
    542c:	30 e0       	ldi	r19, 0x00	; 0
    542e:	f9 01       	movw	r30, r18
    5430:	20 81       	ld	r18, Z
    5432:	22 60       	ori	r18, 0x02	; 2
    5434:	fc 01       	movw	r30, r24
    5436:	20 83       	st	Z, r18
}
    5438:	df 91       	pop	r29
    543a:	cf 91       	pop	r28
    543c:	08 95       	ret

0000543e <Inicio_Buzzer>:


/************************************************************************
* Inicio Del Buzzer
************************************************************************/
void Inicio_Buzzer (void) {
    543e:	cf 93       	push	r28
    5440:	df 93       	push	r29
    5442:	cd b7       	in	r28, 0x3d	; 61
    5444:	de b7       	in	r29, 0x3e	; 62
	chBuzzerModo = BUZZER_CORTO;
    5446:	84 e0       	ldi	r24, 0x04	; 4
    5448:	80 93 e2 04 	sts	0x04E2, r24
	uContBuzzerON = 0;
    544c:	10 92 e6 04 	sts	0x04E6, r1
    5450:	10 92 e5 04 	sts	0x04E5, r1
	uContBuzzerOFF = 0;
    5454:	10 92 e4 04 	sts	0x04E4, r1
    5458:	10 92 e3 04 	sts	0x04E3, r1

	CLEAR_BIT(BUZZER_PORT, BUZZER);
    545c:	83 e2       	ldi	r24, 0x23	; 35
    545e:	90 e0       	ldi	r25, 0x00	; 0
    5460:	23 e2       	ldi	r18, 0x23	; 35
    5462:	30 e0       	ldi	r19, 0x00	; 0
    5464:	f9 01       	movw	r30, r18
    5466:	20 81       	ld	r18, Z
    5468:	27 7f       	andi	r18, 0xF7	; 247
    546a:	fc 01       	movw	r30, r24
    546c:	20 83       	st	Z, r18
}
    546e:	df 91       	pop	r29
    5470:	cf 91       	pop	r28
    5472:	08 95       	ret

00005474 <LCDByte>:
#endif

/***********************************************************
 * Escribe un byte al LCD
 ***********************************************************/
void LCDByte(uint8_t c,uint8_t isdata){
    5474:	0f 93       	push	r16
    5476:	1f 93       	push	r17
    5478:	cf 93       	push	r28
    547a:	df 93       	push	r29
    547c:	cd b7       	in	r28, 0x3d	; 61
    547e:	de b7       	in	r29, 0x3e	; 62
    5480:	ca 5a       	subi	r28, 0xAA	; 170
    5482:	d1 09       	sbc	r29, r1
    5484:	0f b6       	in	r0, 0x3f	; 63
    5486:	f8 94       	cli
    5488:	de bf       	out	0x3e, r29	; 62
    548a:	0f be       	out	0x3f, r0	; 63
    548c:	cd bf       	out	0x3d, r28	; 61
    548e:	9e 01       	movw	r18, r28
    5490:	27 55       	subi	r18, 0x57	; 87
    5492:	3f 4f       	sbci	r19, 0xFF	; 255
    5494:	f9 01       	movw	r30, r18
    5496:	80 83       	st	Z, r24
    5498:	ce 01       	movw	r24, r28
    549a:	86 55       	subi	r24, 0x56	; 86
    549c:	9f 4f       	sbci	r25, 0xFF	; 255
    549e:	fc 01       	movw	r30, r24
    54a0:	60 83       	st	Z, r22
	uint8_t hn,ln;			//Nibbles
	uint8_t temp;

	// si estan invertidos los pines de datos, invierto los bit dentro de los nibbles
	#ifdef LCD_DATA_INV
	char aux = c;
    54a2:	ce 01       	movw	r24, r28
    54a4:	87 55       	subi	r24, 0x57	; 87
    54a6:	9f 4f       	sbci	r25, 0xFF	; 255
    54a8:	fc 01       	movw	r30, r24
    54aa:	80 81       	ld	r24, Z
    54ac:	8d 83       	std	Y+5, r24	; 0x05
	c=0;
    54ae:	ce 01       	movw	r24, r28
    54b0:	87 55       	subi	r24, 0x57	; 87
    54b2:	9f 4f       	sbci	r25, 0xFF	; 255
    54b4:	fc 01       	movw	r30, r24
    54b6:	10 82       	st	Z, r1
	for (int i=0; i<4; i++){
    54b8:	1a 82       	std	Y+2, r1	; 0x02
    54ba:	19 82       	std	Y+1, r1	; 0x01
    54bc:	2b c0       	rjmp	.+86     	; 0x5514 <LCDByte+0xa0>
		if ((aux&(1<<i)) != 0){
    54be:	8d 81       	ldd	r24, Y+5	; 0x05
    54c0:	88 2f       	mov	r24, r24
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	09 80       	ldd	r0, Y+1	; 0x01
    54c6:	02 c0       	rjmp	.+4      	; 0x54cc <LCDByte+0x58>
    54c8:	95 95       	asr	r25
    54ca:	87 95       	ror	r24
    54cc:	0a 94       	dec	r0
    54ce:	e2 f7       	brpl	.-8      	; 0x54c8 <LCDByte+0x54>
    54d0:	81 70       	andi	r24, 0x01	; 1
    54d2:	99 27       	eor	r25, r25
    54d4:	89 2b       	or	r24, r25
    54d6:	c9 f0       	breq	.+50     	; 0x550a <LCDByte+0x96>
			c|=(1<<(3-i));
    54d8:	23 e0       	ldi	r18, 0x03	; 3
    54da:	30 e0       	ldi	r19, 0x00	; 0
    54dc:	89 81       	ldd	r24, Y+1	; 0x01
    54de:	9a 81       	ldd	r25, Y+2	; 0x02
    54e0:	28 1b       	sub	r18, r24
    54e2:	39 0b       	sbc	r19, r25
    54e4:	81 e0       	ldi	r24, 0x01	; 1
    54e6:	90 e0       	ldi	r25, 0x00	; 0
    54e8:	02 c0       	rjmp	.+4      	; 0x54ee <LCDByte+0x7a>
    54ea:	88 0f       	add	r24, r24
    54ec:	99 1f       	adc	r25, r25
    54ee:	2a 95       	dec	r18
    54f0:	e2 f7       	brpl	.-8      	; 0x54ea <LCDByte+0x76>
    54f2:	28 2f       	mov	r18, r24
    54f4:	ce 01       	movw	r24, r28
    54f6:	87 55       	subi	r24, 0x57	; 87
    54f8:	9f 4f       	sbci	r25, 0xFF	; 255
    54fa:	fc 01       	movw	r30, r24
    54fc:	80 81       	ld	r24, Z
    54fe:	28 2b       	or	r18, r24
    5500:	ce 01       	movw	r24, r28
    5502:	87 55       	subi	r24, 0x57	; 87
    5504:	9f 4f       	sbci	r25, 0xFF	; 255
    5506:	fc 01       	movw	r30, r24
    5508:	20 83       	st	Z, r18

	// si estan invertidos los pines de datos, invierto los bit dentro de los nibbles
	#ifdef LCD_DATA_INV
	char aux = c;
	c=0;
	for (int i=0; i<4; i++){
    550a:	89 81       	ldd	r24, Y+1	; 0x01
    550c:	9a 81       	ldd	r25, Y+2	; 0x02
    550e:	01 96       	adiw	r24, 0x01	; 1
    5510:	9a 83       	std	Y+2, r25	; 0x02
    5512:	89 83       	std	Y+1, r24	; 0x01
    5514:	89 81       	ldd	r24, Y+1	; 0x01
    5516:	9a 81       	ldd	r25, Y+2	; 0x02
    5518:	04 97       	sbiw	r24, 0x04	; 4
    551a:	8c f2       	brlt	.-94     	; 0x54be <LCDByte+0x4a>
		if ((aux&(1<<i)) != 0){
			c|=(1<<(3-i));
		}
	}
	for (int i=4; i<8; i++){
    551c:	84 e0       	ldi	r24, 0x04	; 4
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	9c 83       	std	Y+4, r25	; 0x04
    5522:	8b 83       	std	Y+3, r24	; 0x03
    5524:	2b c0       	rjmp	.+86     	; 0x557c <LCDByte+0x108>
		if ((aux&(1<<i)) != 0){
    5526:	8d 81       	ldd	r24, Y+5	; 0x05
    5528:	88 2f       	mov	r24, r24
    552a:	90 e0       	ldi	r25, 0x00	; 0
    552c:	0b 80       	ldd	r0, Y+3	; 0x03
    552e:	02 c0       	rjmp	.+4      	; 0x5534 <LCDByte+0xc0>
    5530:	95 95       	asr	r25
    5532:	87 95       	ror	r24
    5534:	0a 94       	dec	r0
    5536:	e2 f7       	brpl	.-8      	; 0x5530 <LCDByte+0xbc>
    5538:	81 70       	andi	r24, 0x01	; 1
    553a:	99 27       	eor	r25, r25
    553c:	89 2b       	or	r24, r25
    553e:	c9 f0       	breq	.+50     	; 0x5572 <LCDByte+0xfe>
			c|=(1<<(11-i));
    5540:	2b e0       	ldi	r18, 0x0B	; 11
    5542:	30 e0       	ldi	r19, 0x00	; 0
    5544:	8b 81       	ldd	r24, Y+3	; 0x03
    5546:	9c 81       	ldd	r25, Y+4	; 0x04
    5548:	28 1b       	sub	r18, r24
    554a:	39 0b       	sbc	r19, r25
    554c:	81 e0       	ldi	r24, 0x01	; 1
    554e:	90 e0       	ldi	r25, 0x00	; 0
    5550:	02 c0       	rjmp	.+4      	; 0x5556 <LCDByte+0xe2>
    5552:	88 0f       	add	r24, r24
    5554:	99 1f       	adc	r25, r25
    5556:	2a 95       	dec	r18
    5558:	e2 f7       	brpl	.-8      	; 0x5552 <LCDByte+0xde>
    555a:	28 2f       	mov	r18, r24
    555c:	ce 01       	movw	r24, r28
    555e:	87 55       	subi	r24, 0x57	; 87
    5560:	9f 4f       	sbci	r25, 0xFF	; 255
    5562:	fc 01       	movw	r30, r24
    5564:	80 81       	ld	r24, Z
    5566:	28 2b       	or	r18, r24
    5568:	ce 01       	movw	r24, r28
    556a:	87 55       	subi	r24, 0x57	; 87
    556c:	9f 4f       	sbci	r25, 0xFF	; 255
    556e:	fc 01       	movw	r30, r24
    5570:	20 83       	st	Z, r18
	for (int i=0; i<4; i++){
		if ((aux&(1<<i)) != 0){
			c|=(1<<(3-i));
		}
	}
	for (int i=4; i<8; i++){
    5572:	8b 81       	ldd	r24, Y+3	; 0x03
    5574:	9c 81       	ldd	r25, Y+4	; 0x04
    5576:	01 96       	adiw	r24, 0x01	; 1
    5578:	9c 83       	std	Y+4, r25	; 0x04
    557a:	8b 83       	std	Y+3, r24	; 0x03
    557c:	8b 81       	ldd	r24, Y+3	; 0x03
    557e:	9c 81       	ldd	r25, Y+4	; 0x04
    5580:	08 97       	sbiw	r24, 0x08	; 8
    5582:	8c f2       	brlt	.-94     	; 0x5526 <LCDByte+0xb2>
			c|=(1<<(11-i));
		}
	}
	#endif

	hn=c>>4;
    5584:	ce 01       	movw	r24, r28
    5586:	87 55       	subi	r24, 0x57	; 87
    5588:	9f 4f       	sbci	r25, 0xFF	; 255
    558a:	fc 01       	movw	r30, r24
    558c:	80 81       	ld	r24, Z
    558e:	82 95       	swap	r24
    5590:	8f 70       	andi	r24, 0x0F	; 15
    5592:	8e 83       	std	Y+6, r24	; 0x06
	ln=(c & 0x0F);
    5594:	ce 01       	movw	r24, r28
    5596:	87 55       	subi	r24, 0x57	; 87
    5598:	9f 4f       	sbci	r25, 0xFF	; 255
    559a:	fc 01       	movw	r30, r24
    559c:	80 81       	ld	r24, Z
    559e:	8f 70       	andi	r24, 0x0F	; 15
    55a0:	8f 83       	std	Y+7, r24	; 0x07

	if(isdata==0){
    55a2:	ce 01       	movw	r24, r28
    55a4:	86 55       	subi	r24, 0x56	; 86
    55a6:	9f 4f       	sbci	r25, 0xFF	; 255
    55a8:	fc 01       	movw	r30, r24
    55aa:	80 81       	ld	r24, Z
    55ac:	88 23       	and	r24, r24
    55ae:	51 f4       	brne	.+20     	; 0x55c4 <LCDByte+0x150>
		CLEAR_RS();
    55b0:	82 e3       	ldi	r24, 0x32	; 50
    55b2:	90 e0       	ldi	r25, 0x00	; 0
    55b4:	22 e3       	ldi	r18, 0x32	; 50
    55b6:	30 e0       	ldi	r19, 0x00	; 0
    55b8:	f9 01       	movw	r30, r18
    55ba:	20 81       	ld	r18, Z
    55bc:	2f 7b       	andi	r18, 0xBF	; 191
    55be:	fc 01       	movw	r30, r24
    55c0:	20 83       	st	Z, r18
    55c2:	09 c0       	rjmp	.+18     	; 0x55d6 <LCDByte+0x162>
	}
	else{
		SET_RS();
    55c4:	82 e3       	ldi	r24, 0x32	; 50
    55c6:	90 e0       	ldi	r25, 0x00	; 0
    55c8:	22 e3       	ldi	r18, 0x32	; 50
    55ca:	30 e0       	ldi	r19, 0x00	; 0
    55cc:	f9 01       	movw	r30, r18
    55ce:	20 81       	ld	r18, Z
    55d0:	20 64       	ori	r18, 0x40	; 64
    55d2:	fc 01       	movw	r30, r24
    55d4:	20 83       	st	Z, r18
    55d6:	80 e0       	ldi	r24, 0x00	; 0
    55d8:	90 e0       	ldi	r25, 0x00	; 0
    55da:	a0 e0       	ldi	r26, 0x00	; 0
    55dc:	bf e3       	ldi	r27, 0x3F	; 63
    55de:	89 87       	std	Y+9, r24	; 0x09
    55e0:	9a 87       	std	Y+10, r25	; 0x0a
    55e2:	ab 87       	std	Y+11, r26	; 0x0b
    55e4:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    55e6:	2b ea       	ldi	r18, 0xAB	; 171
    55e8:	3a ea       	ldi	r19, 0xAA	; 170
    55ea:	4a e2       	ldi	r20, 0x2A	; 42
    55ec:	50 e4       	ldi	r21, 0x40	; 64
    55ee:	69 85       	ldd	r22, Y+9	; 0x09
    55f0:	7a 85       	ldd	r23, Y+10	; 0x0a
    55f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    55f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    55f6:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    55fa:	dc 01       	movw	r26, r24
    55fc:	cb 01       	movw	r24, r22
    55fe:	8d 87       	std	Y+13, r24	; 0x0d
    5600:	9e 87       	std	Y+14, r25	; 0x0e
    5602:	af 87       	std	Y+15, r26	; 0x0f
    5604:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
    5606:	89 85       	ldd	r24, Y+9	; 0x09
    5608:	9a 85       	ldd	r25, Y+10	; 0x0a
    560a:	ab 85       	ldd	r26, Y+11	; 0x0b
    560c:	bc 85       	ldd	r27, Y+12	; 0x0c
    560e:	9c 01       	movw	r18, r24
    5610:	ad 01       	movw	r20, r26
    5612:	bc 01       	movw	r22, r24
    5614:	cd 01       	movw	r24, r26
    5616:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    561a:	dc 01       	movw	r26, r24
    561c:	cb 01       	movw	r24, r22
    561e:	89 8b       	std	Y+17, r24	; 0x11
    5620:	9a 8b       	std	Y+18, r25	; 0x12
    5622:	ab 8b       	std	Y+19, r26	; 0x13
    5624:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5626:	20 e0       	ldi	r18, 0x00	; 0
    5628:	30 e0       	ldi	r19, 0x00	; 0
    562a:	40 e8       	ldi	r20, 0x80	; 128
    562c:	5f e3       	ldi	r21, 0x3F	; 63
    562e:	6d 85       	ldd	r22, Y+13	; 0x0d
    5630:	7e 85       	ldd	r23, Y+14	; 0x0e
    5632:	8f 85       	ldd	r24, Y+15	; 0x0f
    5634:	98 89       	ldd	r25, Y+16	; 0x10
    5636:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    563a:	88 23       	and	r24, r24
    563c:	1c f4       	brge	.+6      	; 0x5644 <LCDByte+0x1d0>
		__ticks = 1;
    563e:	81 e0       	ldi	r24, 0x01	; 1
    5640:	8d 8b       	std	Y+21, r24	; 0x15
    5642:	b2 c0       	rjmp	.+356    	; 0x57a8 <LCDByte+0x334>
	else if (__tmp2 > 65535)
    5644:	20 e0       	ldi	r18, 0x00	; 0
    5646:	3f ef       	ldi	r19, 0xFF	; 255
    5648:	4f e7       	ldi	r20, 0x7F	; 127
    564a:	57 e4       	ldi	r21, 0x47	; 71
    564c:	69 89       	ldd	r22, Y+17	; 0x11
    564e:	7a 89       	ldd	r23, Y+18	; 0x12
    5650:	8b 89       	ldd	r24, Y+19	; 0x13
    5652:	9c 89       	ldd	r25, Y+20	; 0x14
    5654:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    5658:	18 16       	cp	r1, r24
    565a:	0c f0       	brlt	.+2      	; 0x565e <LCDByte+0x1ea>
    565c:	7b c0       	rjmp	.+246    	; 0x5754 <LCDByte+0x2e0>
	{
		_delay_ms(__us / 1000.0);
    565e:	20 e0       	ldi	r18, 0x00	; 0
    5660:	30 e0       	ldi	r19, 0x00	; 0
    5662:	4a e7       	ldi	r20, 0x7A	; 122
    5664:	54 e4       	ldi	r21, 0x44	; 68
    5666:	69 85       	ldd	r22, Y+9	; 0x09
    5668:	7a 85       	ldd	r23, Y+10	; 0x0a
    566a:	8b 85       	ldd	r24, Y+11	; 0x0b
    566c:	9c 85       	ldd	r25, Y+12	; 0x0c
    566e:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    5672:	dc 01       	movw	r26, r24
    5674:	cb 01       	movw	r24, r22
    5676:	8e 8b       	std	Y+22, r24	; 0x16
    5678:	9f 8b       	std	Y+23, r25	; 0x17
    567a:	a8 8f       	std	Y+24, r26	; 0x18
    567c:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    567e:	20 e0       	ldi	r18, 0x00	; 0
    5680:	30 e0       	ldi	r19, 0x00	; 0
    5682:	4a ef       	ldi	r20, 0xFA	; 250
    5684:	54 e4       	ldi	r21, 0x44	; 68
    5686:	6e 89       	ldd	r22, Y+22	; 0x16
    5688:	7f 89       	ldd	r23, Y+23	; 0x17
    568a:	88 8d       	ldd	r24, Y+24	; 0x18
    568c:	99 8d       	ldd	r25, Y+25	; 0x19
    568e:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    5692:	dc 01       	movw	r26, r24
    5694:	cb 01       	movw	r24, r22
    5696:	8a 8f       	std	Y+26, r24	; 0x1a
    5698:	9b 8f       	std	Y+27, r25	; 0x1b
    569a:	ac 8f       	std	Y+28, r26	; 0x1c
    569c:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
    569e:	20 e0       	ldi	r18, 0x00	; 0
    56a0:	30 e0       	ldi	r19, 0x00	; 0
    56a2:	40 e8       	ldi	r20, 0x80	; 128
    56a4:	5f e3       	ldi	r21, 0x3F	; 63
    56a6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    56a8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    56aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    56ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    56ae:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    56b2:	88 23       	and	r24, r24
    56b4:	2c f4       	brge	.+10     	; 0x56c0 <LCDByte+0x24c>
		__ticks = 1;
    56b6:	81 e0       	ldi	r24, 0x01	; 1
    56b8:	90 e0       	ldi	r25, 0x00	; 0
    56ba:	9f 8f       	std	Y+31, r25	; 0x1f
    56bc:	8e 8f       	std	Y+30, r24	; 0x1e
    56be:	3f c0       	rjmp	.+126    	; 0x573e <LCDByte+0x2ca>
	else if (__tmp > 65535)
    56c0:	20 e0       	ldi	r18, 0x00	; 0
    56c2:	3f ef       	ldi	r19, 0xFF	; 255
    56c4:	4f e7       	ldi	r20, 0x7F	; 127
    56c6:	57 e4       	ldi	r21, 0x47	; 71
    56c8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    56ca:	7b 8d       	ldd	r23, Y+27	; 0x1b
    56cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    56ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    56d0:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    56d4:	18 16       	cp	r1, r24
    56d6:	4c f5       	brge	.+82     	; 0x572a <LCDByte+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56d8:	20 e0       	ldi	r18, 0x00	; 0
    56da:	30 e0       	ldi	r19, 0x00	; 0
    56dc:	40 e2       	ldi	r20, 0x20	; 32
    56de:	51 e4       	ldi	r21, 0x41	; 65
    56e0:	6e 89       	ldd	r22, Y+22	; 0x16
    56e2:	7f 89       	ldd	r23, Y+23	; 0x17
    56e4:	88 8d       	ldd	r24, Y+24	; 0x18
    56e6:	99 8d       	ldd	r25, Y+25	; 0x19
    56e8:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    56ec:	dc 01       	movw	r26, r24
    56ee:	cb 01       	movw	r24, r22
    56f0:	bc 01       	movw	r22, r24
    56f2:	cd 01       	movw	r24, r26
    56f4:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    56f8:	dc 01       	movw	r26, r24
    56fa:	cb 01       	movw	r24, r22
    56fc:	9f 8f       	std	Y+31, r25	; 0x1f
    56fe:	8e 8f       	std	Y+30, r24	; 0x1e
    5700:	0f c0       	rjmp	.+30     	; 0x5720 <LCDByte+0x2ac>
    5702:	88 ec       	ldi	r24, 0xC8	; 200
    5704:	90 e0       	ldi	r25, 0x00	; 0
    5706:	99 a3       	std	Y+33, r25	; 0x21
    5708:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    570a:	88 a1       	ldd	r24, Y+32	; 0x20
    570c:	99 a1       	ldd	r25, Y+33	; 0x21
    570e:	01 97       	sbiw	r24, 0x01	; 1
    5710:	f1 f7       	brne	.-4      	; 0x570e <LCDByte+0x29a>
    5712:	99 a3       	std	Y+33, r25	; 0x21
    5714:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5716:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5718:	9f 8d       	ldd	r25, Y+31	; 0x1f
    571a:	01 97       	sbiw	r24, 0x01	; 1
    571c:	9f 8f       	std	Y+31, r25	; 0x1f
    571e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5720:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5722:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5724:	89 2b       	or	r24, r25
    5726:	69 f7       	brne	.-38     	; 0x5702 <LCDByte+0x28e>
    5728:	3f c0       	rjmp	.+126    	; 0x57a8 <LCDByte+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    572a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    572c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    572e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5730:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5732:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    5736:	dc 01       	movw	r26, r24
    5738:	cb 01       	movw	r24, r22
    573a:	9f 8f       	std	Y+31, r25	; 0x1f
    573c:	8e 8f       	std	Y+30, r24	; 0x1e
    573e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5740:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5742:	9b a3       	std	Y+35, r25	; 0x23
    5744:	8a a3       	std	Y+34, r24	; 0x22
    5746:	8a a1       	ldd	r24, Y+34	; 0x22
    5748:	9b a1       	ldd	r25, Y+35	; 0x23
    574a:	01 97       	sbiw	r24, 0x01	; 1
    574c:	f1 f7       	brne	.-4      	; 0x574a <LCDByte+0x2d6>
    574e:	9b a3       	std	Y+35, r25	; 0x23
    5750:	8a a3       	std	Y+34, r24	; 0x22
    5752:	2a c0       	rjmp	.+84     	; 0x57a8 <LCDByte+0x334>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    5754:	20 e0       	ldi	r18, 0x00	; 0
    5756:	30 e0       	ldi	r19, 0x00	; 0
    5758:	4f e7       	ldi	r20, 0x7F	; 127
    575a:	53 e4       	ldi	r21, 0x43	; 67
    575c:	6d 85       	ldd	r22, Y+13	; 0x0d
    575e:	7e 85       	ldd	r23, Y+14	; 0x0e
    5760:	8f 85       	ldd	r24, Y+15	; 0x0f
    5762:	98 89       	ldd	r25, Y+16	; 0x10
    5764:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    5768:	18 16       	cp	r1, r24
    576a:	ac f4       	brge	.+42     	; 0x5796 <LCDByte+0x322>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    576c:	69 89       	ldd	r22, Y+17	; 0x11
    576e:	7a 89       	ldd	r23, Y+18	; 0x12
    5770:	8b 89       	ldd	r24, Y+19	; 0x13
    5772:	9c 89       	ldd	r25, Y+20	; 0x14
    5774:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    5778:	dc 01       	movw	r26, r24
    577a:	cb 01       	movw	r24, r22
    577c:	9d a3       	std	Y+37, r25	; 0x25
    577e:	8c a3       	std	Y+36, r24	; 0x24
    5780:	8c a1       	ldd	r24, Y+36	; 0x24
    5782:	9d a1       	ldd	r25, Y+37	; 0x25
    5784:	9f a3       	std	Y+39, r25	; 0x27
    5786:	8e a3       	std	Y+38, r24	; 0x26
    5788:	8e a1       	ldd	r24, Y+38	; 0x26
    578a:	9f a1       	ldd	r25, Y+39	; 0x27
    578c:	01 97       	sbiw	r24, 0x01	; 1
    578e:	f1 f7       	brne	.-4      	; 0x578c <LCDByte+0x318>
    5790:	9f a3       	std	Y+39, r25	; 0x27
    5792:	8e a3       	std	Y+38, r24	; 0x26
    5794:	0f c0       	rjmp	.+30     	; 0x57b4 <LCDByte+0x340>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5796:	6d 85       	ldd	r22, Y+13	; 0x0d
    5798:	7e 85       	ldd	r23, Y+14	; 0x0e
    579a:	8f 85       	ldd	r24, Y+15	; 0x0f
    579c:	98 89       	ldd	r25, Y+16	; 0x10
    579e:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    57a2:	dc 01       	movw	r26, r24
    57a4:	cb 01       	movw	r24, r22
    57a6:	8d 8b       	std	Y+21, r24	; 0x15
    57a8:	8d 89       	ldd	r24, Y+21	; 0x15
    57aa:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    57ac:	88 a5       	ldd	r24, Y+40	; 0x28
    57ae:	8a 95       	dec	r24
    57b0:	f1 f7       	brne	.-4      	; 0x57ae <LCDByte+0x33a>
    57b2:	88 a7       	std	Y+40, r24	; 0x28
	}

	_delay_us(0.500);		//tAS

	SET_E();
    57b4:	85 e6       	ldi	r24, 0x65	; 101
    57b6:	90 e0       	ldi	r25, 0x00	; 0
    57b8:	25 e6       	ldi	r18, 0x65	; 101
    57ba:	30 e0       	ldi	r19, 0x00	; 0
    57bc:	f9 01       	movw	r30, r18
    57be:	20 81       	ld	r18, Z
    57c0:	20 61       	ori	r18, 0x10	; 16
    57c2:	fc 01       	movw	r30, r24
    57c4:	20 83       	st	Z, r18

	//Send high nibble
	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
    57c6:	85 e3       	ldi	r24, 0x35	; 53
    57c8:	90 e0       	ldi	r25, 0x00	; 0
    57ca:	fc 01       	movw	r30, r24
    57cc:	80 81       	ld	r24, Z
    57ce:	98 2f       	mov	r25, r24
    57d0:	90 7f       	andi	r25, 0xF0	; 240
    57d2:	8e 81       	ldd	r24, Y+6	; 0x06
    57d4:	89 2b       	or	r24, r25
    57d6:	88 87       	std	Y+8, r24	; 0x08
	LCD_DATA_PORT=temp;
    57d8:	85 e3       	ldi	r24, 0x35	; 53
    57da:	90 e0       	ldi	r25, 0x00	; 0
    57dc:	28 85       	ldd	r18, Y+8	; 0x08
    57de:	fc 01       	movw	r30, r24
    57e0:	20 83       	st	Z, r18
    57e2:	80 e0       	ldi	r24, 0x00	; 0
    57e4:	90 e0       	ldi	r25, 0x00	; 0
    57e6:	a0 e8       	ldi	r26, 0x80	; 128
    57e8:	bf e3       	ldi	r27, 0x3F	; 63
    57ea:	89 a7       	std	Y+41, r24	; 0x29
    57ec:	9a a7       	std	Y+42, r25	; 0x2a
    57ee:	ab a7       	std	Y+43, r26	; 0x2b
    57f0:	bc a7       	std	Y+44, r27	; 0x2c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    57f2:	2b ea       	ldi	r18, 0xAB	; 171
    57f4:	3a ea       	ldi	r19, 0xAA	; 170
    57f6:	4a e2       	ldi	r20, 0x2A	; 42
    57f8:	50 e4       	ldi	r21, 0x40	; 64
    57fa:	69 a5       	ldd	r22, Y+41	; 0x29
    57fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    57fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    5800:	9c a5       	ldd	r25, Y+44	; 0x2c
    5802:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    5806:	dc 01       	movw	r26, r24
    5808:	cb 01       	movw	r24, r22
    580a:	8d a7       	std	Y+45, r24	; 0x2d
    580c:	9e a7       	std	Y+46, r25	; 0x2e
    580e:	af a7       	std	Y+47, r26	; 0x2f
    5810:	b8 ab       	std	Y+48, r27	; 0x30
	__tmp2 = ((F_CPU) / 4e6) * __us;
    5812:	89 a5       	ldd	r24, Y+41	; 0x29
    5814:	9a a5       	ldd	r25, Y+42	; 0x2a
    5816:	ab a5       	ldd	r26, Y+43	; 0x2b
    5818:	bc a5       	ldd	r27, Y+44	; 0x2c
    581a:	9c 01       	movw	r18, r24
    581c:	ad 01       	movw	r20, r26
    581e:	bc 01       	movw	r22, r24
    5820:	cd 01       	movw	r24, r26
    5822:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    5826:	dc 01       	movw	r26, r24
    5828:	cb 01       	movw	r24, r22
    582a:	89 ab       	std	Y+49, r24	; 0x31
    582c:	9a ab       	std	Y+50, r25	; 0x32
    582e:	ab ab       	std	Y+51, r26	; 0x33
    5830:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5832:	20 e0       	ldi	r18, 0x00	; 0
    5834:	30 e0       	ldi	r19, 0x00	; 0
    5836:	40 e8       	ldi	r20, 0x80	; 128
    5838:	5f e3       	ldi	r21, 0x3F	; 63
    583a:	6d a5       	ldd	r22, Y+45	; 0x2d
    583c:	7e a5       	ldd	r23, Y+46	; 0x2e
    583e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5840:	98 a9       	ldd	r25, Y+48	; 0x30
    5842:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    5846:	88 23       	and	r24, r24
    5848:	1c f4       	brge	.+6      	; 0x5850 <LCDByte+0x3dc>
		__ticks = 1;
    584a:	81 e0       	ldi	r24, 0x01	; 1
    584c:	8d ab       	std	Y+53, r24	; 0x35
    584e:	de c0       	rjmp	.+444    	; 0x5a0c <LCDByte+0x598>
	else if (__tmp2 > 65535)
    5850:	20 e0       	ldi	r18, 0x00	; 0
    5852:	3f ef       	ldi	r19, 0xFF	; 255
    5854:	4f e7       	ldi	r20, 0x7F	; 127
    5856:	57 e4       	ldi	r21, 0x47	; 71
    5858:	69 a9       	ldd	r22, Y+49	; 0x31
    585a:	7a a9       	ldd	r23, Y+50	; 0x32
    585c:	8b a9       	ldd	r24, Y+51	; 0x33
    585e:	9c a9       	ldd	r25, Y+52	; 0x34
    5860:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    5864:	18 16       	cp	r1, r24
    5866:	0c f0       	brlt	.+2      	; 0x586a <LCDByte+0x3f6>
    5868:	93 c0       	rjmp	.+294    	; 0x5990 <LCDByte+0x51c>
	{
		_delay_ms(__us / 1000.0);
    586a:	20 e0       	ldi	r18, 0x00	; 0
    586c:	30 e0       	ldi	r19, 0x00	; 0
    586e:	4a e7       	ldi	r20, 0x7A	; 122
    5870:	54 e4       	ldi	r21, 0x44	; 68
    5872:	69 a5       	ldd	r22, Y+41	; 0x29
    5874:	7a a5       	ldd	r23, Y+42	; 0x2a
    5876:	8b a5       	ldd	r24, Y+43	; 0x2b
    5878:	9c a5       	ldd	r25, Y+44	; 0x2c
    587a:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    587e:	dc 01       	movw	r26, r24
    5880:	cb 01       	movw	r24, r22
    5882:	8e ab       	std	Y+54, r24	; 0x36
    5884:	9f ab       	std	Y+55, r25	; 0x37
    5886:	a8 af       	std	Y+56, r26	; 0x38
    5888:	b9 af       	std	Y+57, r27	; 0x39

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    588a:	20 e0       	ldi	r18, 0x00	; 0
    588c:	30 e0       	ldi	r19, 0x00	; 0
    588e:	4a ef       	ldi	r20, 0xFA	; 250
    5890:	54 e4       	ldi	r21, 0x44	; 68
    5892:	6e a9       	ldd	r22, Y+54	; 0x36
    5894:	7f a9       	ldd	r23, Y+55	; 0x37
    5896:	88 ad       	ldd	r24, Y+56	; 0x38
    5898:	99 ad       	ldd	r25, Y+57	; 0x39
    589a:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    589e:	dc 01       	movw	r26, r24
    58a0:	cb 01       	movw	r24, r22
    58a2:	8a af       	std	Y+58, r24	; 0x3a
    58a4:	9b af       	std	Y+59, r25	; 0x3b
    58a6:	ac af       	std	Y+60, r26	; 0x3c
    58a8:	bd af       	std	Y+61, r27	; 0x3d
	if (__tmp < 1.0)
    58aa:	20 e0       	ldi	r18, 0x00	; 0
    58ac:	30 e0       	ldi	r19, 0x00	; 0
    58ae:	40 e8       	ldi	r20, 0x80	; 128
    58b0:	5f e3       	ldi	r21, 0x3F	; 63
    58b2:	6a ad       	ldd	r22, Y+58	; 0x3a
    58b4:	7b ad       	ldd	r23, Y+59	; 0x3b
    58b6:	8c ad       	ldd	r24, Y+60	; 0x3c
    58b8:	9d ad       	ldd	r25, Y+61	; 0x3d
    58ba:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    58be:	88 23       	and	r24, r24
    58c0:	2c f4       	brge	.+10     	; 0x58cc <LCDByte+0x458>
		__ticks = 1;
    58c2:	81 e0       	ldi	r24, 0x01	; 1
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	9f af       	std	Y+63, r25	; 0x3f
    58c8:	8e af       	std	Y+62, r24	; 0x3e
    58ca:	4b c0       	rjmp	.+150    	; 0x5962 <LCDByte+0x4ee>
	else if (__tmp > 65535)
    58cc:	20 e0       	ldi	r18, 0x00	; 0
    58ce:	3f ef       	ldi	r19, 0xFF	; 255
    58d0:	4f e7       	ldi	r20, 0x7F	; 127
    58d2:	57 e4       	ldi	r21, 0x47	; 71
    58d4:	6a ad       	ldd	r22, Y+58	; 0x3a
    58d6:	7b ad       	ldd	r23, Y+59	; 0x3b
    58d8:	8c ad       	ldd	r24, Y+60	; 0x3c
    58da:	9d ad       	ldd	r25, Y+61	; 0x3d
    58dc:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    58e0:	18 16       	cp	r1, r24
    58e2:	ac f5       	brge	.+106    	; 0x594e <LCDByte+0x4da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58e4:	20 e0       	ldi	r18, 0x00	; 0
    58e6:	30 e0       	ldi	r19, 0x00	; 0
    58e8:	40 e2       	ldi	r20, 0x20	; 32
    58ea:	51 e4       	ldi	r21, 0x41	; 65
    58ec:	6e a9       	ldd	r22, Y+54	; 0x36
    58ee:	7f a9       	ldd	r23, Y+55	; 0x37
    58f0:	88 ad       	ldd	r24, Y+56	; 0x38
    58f2:	99 ad       	ldd	r25, Y+57	; 0x39
    58f4:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    58f8:	dc 01       	movw	r26, r24
    58fa:	cb 01       	movw	r24, r22
    58fc:	bc 01       	movw	r22, r24
    58fe:	cd 01       	movw	r24, r26
    5900:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    5904:	dc 01       	movw	r26, r24
    5906:	cb 01       	movw	r24, r22
    5908:	9f af       	std	Y+63, r25	; 0x3f
    590a:	8e af       	std	Y+62, r24	; 0x3e
    590c:	1b c0       	rjmp	.+54     	; 0x5944 <LCDByte+0x4d0>
    590e:	ce 01       	movw	r24, r28
    5910:	80 5c       	subi	r24, 0xC0	; 192
    5912:	9f 4f       	sbci	r25, 0xFF	; 255
    5914:	28 ec       	ldi	r18, 0xC8	; 200
    5916:	30 e0       	ldi	r19, 0x00	; 0
    5918:	fc 01       	movw	r30, r24
    591a:	31 83       	std	Z+1, r19	; 0x01
    591c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    591e:	ce 01       	movw	r24, r28
    5920:	80 5c       	subi	r24, 0xC0	; 192
    5922:	9f 4f       	sbci	r25, 0xFF	; 255
    5924:	fc 01       	movw	r30, r24
    5926:	80 81       	ld	r24, Z
    5928:	91 81       	ldd	r25, Z+1	; 0x01
    592a:	01 97       	sbiw	r24, 0x01	; 1
    592c:	f1 f7       	brne	.-4      	; 0x592a <LCDByte+0x4b6>
    592e:	9e 01       	movw	r18, r28
    5930:	20 5c       	subi	r18, 0xC0	; 192
    5932:	3f 4f       	sbci	r19, 0xFF	; 255
    5934:	f9 01       	movw	r30, r18
    5936:	91 83       	std	Z+1, r25	; 0x01
    5938:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    593a:	8e ad       	ldd	r24, Y+62	; 0x3e
    593c:	9f ad       	ldd	r25, Y+63	; 0x3f
    593e:	01 97       	sbiw	r24, 0x01	; 1
    5940:	9f af       	std	Y+63, r25	; 0x3f
    5942:	8e af       	std	Y+62, r24	; 0x3e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5944:	8e ad       	ldd	r24, Y+62	; 0x3e
    5946:	9f ad       	ldd	r25, Y+63	; 0x3f
    5948:	89 2b       	or	r24, r25
    594a:	09 f7       	brne	.-62     	; 0x590e <LCDByte+0x49a>
    594c:	5f c0       	rjmp	.+190    	; 0x5a0c <LCDByte+0x598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    594e:	6a ad       	ldd	r22, Y+58	; 0x3a
    5950:	7b ad       	ldd	r23, Y+59	; 0x3b
    5952:	8c ad       	ldd	r24, Y+60	; 0x3c
    5954:	9d ad       	ldd	r25, Y+61	; 0x3d
    5956:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    595a:	dc 01       	movw	r26, r24
    595c:	cb 01       	movw	r24, r22
    595e:	9f af       	std	Y+63, r25	; 0x3f
    5960:	8e af       	std	Y+62, r24	; 0x3e
    5962:	ce 01       	movw	r24, r28
    5964:	8e 5b       	subi	r24, 0xBE	; 190
    5966:	9f 4f       	sbci	r25, 0xFF	; 255
    5968:	2e ad       	ldd	r18, Y+62	; 0x3e
    596a:	3f ad       	ldd	r19, Y+63	; 0x3f
    596c:	fc 01       	movw	r30, r24
    596e:	31 83       	std	Z+1, r19	; 0x01
    5970:	20 83       	st	Z, r18
    5972:	ce 01       	movw	r24, r28
    5974:	8e 5b       	subi	r24, 0xBE	; 190
    5976:	9f 4f       	sbci	r25, 0xFF	; 255
    5978:	fc 01       	movw	r30, r24
    597a:	80 81       	ld	r24, Z
    597c:	91 81       	ldd	r25, Z+1	; 0x01
    597e:	01 97       	sbiw	r24, 0x01	; 1
    5980:	f1 f7       	brne	.-4      	; 0x597e <LCDByte+0x50a>
    5982:	9e 01       	movw	r18, r28
    5984:	2e 5b       	subi	r18, 0xBE	; 190
    5986:	3f 4f       	sbci	r19, 0xFF	; 255
    5988:	f9 01       	movw	r30, r18
    598a:	91 83       	std	Z+1, r25	; 0x01
    598c:	80 83       	st	Z, r24
    598e:	3e c0       	rjmp	.+124    	; 0x5a0c <LCDByte+0x598>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    5990:	20 e0       	ldi	r18, 0x00	; 0
    5992:	30 e0       	ldi	r19, 0x00	; 0
    5994:	4f e7       	ldi	r20, 0x7F	; 127
    5996:	53 e4       	ldi	r21, 0x43	; 67
    5998:	6d a5       	ldd	r22, Y+45	; 0x2d
    599a:	7e a5       	ldd	r23, Y+46	; 0x2e
    599c:	8f a5       	ldd	r24, Y+47	; 0x2f
    599e:	98 a9       	ldd	r25, Y+48	; 0x30
    59a0:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    59a4:	18 16       	cp	r1, r24
    59a6:	4c f5       	brge	.+82     	; 0x59fa <LCDByte+0x586>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    59a8:	8e 01       	movw	r16, r28
    59aa:	0c 5b       	subi	r16, 0xBC	; 188
    59ac:	1f 4f       	sbci	r17, 0xFF	; 255
    59ae:	69 a9       	ldd	r22, Y+49	; 0x31
    59b0:	7a a9       	ldd	r23, Y+50	; 0x32
    59b2:	8b a9       	ldd	r24, Y+51	; 0x33
    59b4:	9c a9       	ldd	r25, Y+52	; 0x34
    59b6:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    59ba:	dc 01       	movw	r26, r24
    59bc:	cb 01       	movw	r24, r22
    59be:	f8 01       	movw	r30, r16
    59c0:	91 83       	std	Z+1, r25	; 0x01
    59c2:	80 83       	st	Z, r24
    59c4:	ce 01       	movw	r24, r28
    59c6:	8a 5b       	subi	r24, 0xBA	; 186
    59c8:	9f 4f       	sbci	r25, 0xFF	; 255
    59ca:	9e 01       	movw	r18, r28
    59cc:	2c 5b       	subi	r18, 0xBC	; 188
    59ce:	3f 4f       	sbci	r19, 0xFF	; 255
    59d0:	f9 01       	movw	r30, r18
    59d2:	20 81       	ld	r18, Z
    59d4:	31 81       	ldd	r19, Z+1	; 0x01
    59d6:	fc 01       	movw	r30, r24
    59d8:	31 83       	std	Z+1, r19	; 0x01
    59da:	20 83       	st	Z, r18
    59dc:	ce 01       	movw	r24, r28
    59de:	8a 5b       	subi	r24, 0xBA	; 186
    59e0:	9f 4f       	sbci	r25, 0xFF	; 255
    59e2:	fc 01       	movw	r30, r24
    59e4:	80 81       	ld	r24, Z
    59e6:	91 81       	ldd	r25, Z+1	; 0x01
    59e8:	01 97       	sbiw	r24, 0x01	; 1
    59ea:	f1 f7       	brne	.-4      	; 0x59e8 <LCDByte+0x574>
    59ec:	9e 01       	movw	r18, r28
    59ee:	2a 5b       	subi	r18, 0xBA	; 186
    59f0:	3f 4f       	sbci	r19, 0xFF	; 255
    59f2:	f9 01       	movw	r30, r18
    59f4:	91 83       	std	Z+1, r25	; 0x01
    59f6:	80 83       	st	Z, r24
    59f8:	1c c0       	rjmp	.+56     	; 0x5a32 <LCDByte+0x5be>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    59fa:	6d a5       	ldd	r22, Y+45	; 0x2d
    59fc:	7e a5       	ldd	r23, Y+46	; 0x2e
    59fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a00:	98 a9       	ldd	r25, Y+48	; 0x30
    5a02:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    5a06:	dc 01       	movw	r26, r24
    5a08:	cb 01       	movw	r24, r22
    5a0a:	8d ab       	std	Y+53, r24	; 0x35
    5a0c:	ce 01       	movw	r24, r28
    5a0e:	88 5b       	subi	r24, 0xB8	; 184
    5a10:	9f 4f       	sbci	r25, 0xFF	; 255
    5a12:	2d a9       	ldd	r18, Y+53	; 0x35
    5a14:	fc 01       	movw	r30, r24
    5a16:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5a18:	ce 01       	movw	r24, r28
    5a1a:	88 5b       	subi	r24, 0xB8	; 184
    5a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a1e:	fc 01       	movw	r30, r24
    5a20:	80 81       	ld	r24, Z
    5a22:	28 2f       	mov	r18, r24
    5a24:	2a 95       	dec	r18
    5a26:	f1 f7       	brne	.-4      	; 0x5a24 <LCDByte+0x5b0>
    5a28:	ce 01       	movw	r24, r28
    5a2a:	88 5b       	subi	r24, 0xB8	; 184
    5a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a2e:	fc 01       	movw	r30, r24
    5a30:	20 83       	st	Z, r18

	_delay_us(1);			//tEH

	//Now data lines are stable pull E low for transmission
	CLEAR_E();
    5a32:	85 e6       	ldi	r24, 0x65	; 101
    5a34:	90 e0       	ldi	r25, 0x00	; 0
    5a36:	25 e6       	ldi	r18, 0x65	; 101
    5a38:	30 e0       	ldi	r19, 0x00	; 0
    5a3a:	f9 01       	movw	r30, r18
    5a3c:	20 81       	ld	r18, Z
    5a3e:	2f 7e       	andi	r18, 0xEF	; 239
    5a40:	fc 01       	movw	r30, r24
    5a42:	20 83       	st	Z, r18
    5a44:	9e 01       	movw	r18, r28
    5a46:	27 5b       	subi	r18, 0xB7	; 183
    5a48:	3f 4f       	sbci	r19, 0xFF	; 255
    5a4a:	80 e0       	ldi	r24, 0x00	; 0
    5a4c:	90 e0       	ldi	r25, 0x00	; 0
    5a4e:	a0 e8       	ldi	r26, 0x80	; 128
    5a50:	bf e3       	ldi	r27, 0x3F	; 63
    5a52:	f9 01       	movw	r30, r18
    5a54:	80 83       	st	Z, r24
    5a56:	91 83       	std	Z+1, r25	; 0x01
    5a58:	a2 83       	std	Z+2, r26	; 0x02
    5a5a:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    5a5c:	8e 01       	movw	r16, r28
    5a5e:	03 5b       	subi	r16, 0xB3	; 179
    5a60:	1f 4f       	sbci	r17, 0xFF	; 255
    5a62:	ce 01       	movw	r24, r28
    5a64:	87 5b       	subi	r24, 0xB7	; 183
    5a66:	9f 4f       	sbci	r25, 0xFF	; 255
    5a68:	2b ea       	ldi	r18, 0xAB	; 171
    5a6a:	3a ea       	ldi	r19, 0xAA	; 170
    5a6c:	4a e2       	ldi	r20, 0x2A	; 42
    5a6e:	50 e4       	ldi	r21, 0x40	; 64
    5a70:	fc 01       	movw	r30, r24
    5a72:	60 81       	ld	r22, Z
    5a74:	71 81       	ldd	r23, Z+1	; 0x01
    5a76:	82 81       	ldd	r24, Z+2	; 0x02
    5a78:	93 81       	ldd	r25, Z+3	; 0x03
    5a7a:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    5a7e:	dc 01       	movw	r26, r24
    5a80:	cb 01       	movw	r24, r22
    5a82:	f8 01       	movw	r30, r16
    5a84:	80 83       	st	Z, r24
    5a86:	91 83       	std	Z+1, r25	; 0x01
    5a88:	a2 83       	std	Z+2, r26	; 0x02
    5a8a:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    5a8c:	8e 01       	movw	r16, r28
    5a8e:	0f 5a       	subi	r16, 0xAF	; 175
    5a90:	1f 4f       	sbci	r17, 0xFF	; 255
    5a92:	ce 01       	movw	r24, r28
    5a94:	87 5b       	subi	r24, 0xB7	; 183
    5a96:	9f 4f       	sbci	r25, 0xFF	; 255
    5a98:	fc 01       	movw	r30, r24
    5a9a:	80 81       	ld	r24, Z
    5a9c:	91 81       	ldd	r25, Z+1	; 0x01
    5a9e:	a2 81       	ldd	r26, Z+2	; 0x02
    5aa0:	b3 81       	ldd	r27, Z+3	; 0x03
    5aa2:	9c 01       	movw	r18, r24
    5aa4:	ad 01       	movw	r20, r26
    5aa6:	bc 01       	movw	r22, r24
    5aa8:	cd 01       	movw	r24, r26
    5aaa:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    5aae:	dc 01       	movw	r26, r24
    5ab0:	cb 01       	movw	r24, r22
    5ab2:	f8 01       	movw	r30, r16
    5ab4:	80 83       	st	Z, r24
    5ab6:	91 83       	std	Z+1, r25	; 0x01
    5ab8:	a2 83       	std	Z+2, r26	; 0x02
    5aba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5abc:	ce 01       	movw	r24, r28
    5abe:	83 5b       	subi	r24, 0xB3	; 179
    5ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac2:	20 e0       	ldi	r18, 0x00	; 0
    5ac4:	30 e0       	ldi	r19, 0x00	; 0
    5ac6:	40 e8       	ldi	r20, 0x80	; 128
    5ac8:	5f e3       	ldi	r21, 0x3F	; 63
    5aca:	fc 01       	movw	r30, r24
    5acc:	60 81       	ld	r22, Z
    5ace:	71 81       	ldd	r23, Z+1	; 0x01
    5ad0:	82 81       	ldd	r24, Z+2	; 0x02
    5ad2:	93 81       	ldd	r25, Z+3	; 0x03
    5ad4:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    5ad8:	88 23       	and	r24, r24
    5ada:	3c f4       	brge	.+14     	; 0x5aea <LCDByte+0x676>
		__ticks = 1;
    5adc:	ce 01       	movw	r24, r28
    5ade:	8b 5a       	subi	r24, 0xAB	; 171
    5ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ae2:	21 e0       	ldi	r18, 0x01	; 1
    5ae4:	fc 01       	movw	r30, r24
    5ae6:	20 83       	st	Z, r18
    5ae8:	30 c1       	rjmp	.+608    	; 0x5d4a <LCDByte+0x8d6>
	else if (__tmp2 > 65535)
    5aea:	ce 01       	movw	r24, r28
    5aec:	8f 5a       	subi	r24, 0xAF	; 175
    5aee:	9f 4f       	sbci	r25, 0xFF	; 255
    5af0:	20 e0       	ldi	r18, 0x00	; 0
    5af2:	3f ef       	ldi	r19, 0xFF	; 255
    5af4:	4f e7       	ldi	r20, 0x7F	; 127
    5af6:	57 e4       	ldi	r21, 0x47	; 71
    5af8:	fc 01       	movw	r30, r24
    5afa:	60 81       	ld	r22, Z
    5afc:	71 81       	ldd	r23, Z+1	; 0x01
    5afe:	82 81       	ldd	r24, Z+2	; 0x02
    5b00:	93 81       	ldd	r25, Z+3	; 0x03
    5b02:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    5b06:	18 16       	cp	r1, r24
    5b08:	0c f0       	brlt	.+2      	; 0x5b0c <LCDByte+0x698>
    5b0a:	d1 c0       	rjmp	.+418    	; 0x5cae <LCDByte+0x83a>
	{
		_delay_ms(__us / 1000.0);
    5b0c:	ce 01       	movw	r24, r28
    5b0e:	87 5b       	subi	r24, 0xB7	; 183
    5b10:	9f 4f       	sbci	r25, 0xFF	; 255
    5b12:	20 e0       	ldi	r18, 0x00	; 0
    5b14:	30 e0       	ldi	r19, 0x00	; 0
    5b16:	4a e7       	ldi	r20, 0x7A	; 122
    5b18:	54 e4       	ldi	r21, 0x44	; 68
    5b1a:	fc 01       	movw	r30, r24
    5b1c:	60 81       	ld	r22, Z
    5b1e:	71 81       	ldd	r23, Z+1	; 0x01
    5b20:	82 81       	ldd	r24, Z+2	; 0x02
    5b22:	93 81       	ldd	r25, Z+3	; 0x03
    5b24:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    5b28:	dc 01       	movw	r26, r24
    5b2a:	cb 01       	movw	r24, r22
    5b2c:	9e 01       	movw	r18, r28
    5b2e:	2a 5a       	subi	r18, 0xAA	; 170
    5b30:	3f 4f       	sbci	r19, 0xFF	; 255
    5b32:	f9 01       	movw	r30, r18
    5b34:	80 83       	st	Z, r24
    5b36:	91 83       	std	Z+1, r25	; 0x01
    5b38:	a2 83       	std	Z+2, r26	; 0x02
    5b3a:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5b3c:	8e 01       	movw	r16, r28
    5b3e:	06 5a       	subi	r16, 0xA6	; 166
    5b40:	1f 4f       	sbci	r17, 0xFF	; 255
    5b42:	ce 01       	movw	r24, r28
    5b44:	8a 5a       	subi	r24, 0xAA	; 170
    5b46:	9f 4f       	sbci	r25, 0xFF	; 255
    5b48:	20 e0       	ldi	r18, 0x00	; 0
    5b4a:	30 e0       	ldi	r19, 0x00	; 0
    5b4c:	4a ef       	ldi	r20, 0xFA	; 250
    5b4e:	54 e4       	ldi	r21, 0x44	; 68
    5b50:	fc 01       	movw	r30, r24
    5b52:	60 81       	ld	r22, Z
    5b54:	71 81       	ldd	r23, Z+1	; 0x01
    5b56:	82 81       	ldd	r24, Z+2	; 0x02
    5b58:	93 81       	ldd	r25, Z+3	; 0x03
    5b5a:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    5b5e:	dc 01       	movw	r26, r24
    5b60:	cb 01       	movw	r24, r22
    5b62:	f8 01       	movw	r30, r16
    5b64:	80 83       	st	Z, r24
    5b66:	91 83       	std	Z+1, r25	; 0x01
    5b68:	a2 83       	std	Z+2, r26	; 0x02
    5b6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5b6c:	ce 01       	movw	r24, r28
    5b6e:	86 5a       	subi	r24, 0xA6	; 166
    5b70:	9f 4f       	sbci	r25, 0xFF	; 255
    5b72:	20 e0       	ldi	r18, 0x00	; 0
    5b74:	30 e0       	ldi	r19, 0x00	; 0
    5b76:	40 e8       	ldi	r20, 0x80	; 128
    5b78:	5f e3       	ldi	r21, 0x3F	; 63
    5b7a:	fc 01       	movw	r30, r24
    5b7c:	60 81       	ld	r22, Z
    5b7e:	71 81       	ldd	r23, Z+1	; 0x01
    5b80:	82 81       	ldd	r24, Z+2	; 0x02
    5b82:	93 81       	ldd	r25, Z+3	; 0x03
    5b84:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    5b88:	88 23       	and	r24, r24
    5b8a:	4c f4       	brge	.+18     	; 0x5b9e <LCDByte+0x72a>
		__ticks = 1;
    5b8c:	ce 01       	movw	r24, r28
    5b8e:	82 5a       	subi	r24, 0xA2	; 162
    5b90:	9f 4f       	sbci	r25, 0xFF	; 255
    5b92:	21 e0       	ldi	r18, 0x01	; 1
    5b94:	30 e0       	ldi	r19, 0x00	; 0
    5b96:	fc 01       	movw	r30, r24
    5b98:	31 83       	std	Z+1, r19	; 0x01
    5b9a:	20 83       	st	Z, r18
    5b9c:	6d c0       	rjmp	.+218    	; 0x5c78 <LCDByte+0x804>
	else if (__tmp > 65535)
    5b9e:	ce 01       	movw	r24, r28
    5ba0:	86 5a       	subi	r24, 0xA6	; 166
    5ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ba4:	20 e0       	ldi	r18, 0x00	; 0
    5ba6:	3f ef       	ldi	r19, 0xFF	; 255
    5ba8:	4f e7       	ldi	r20, 0x7F	; 127
    5baa:	57 e4       	ldi	r21, 0x47	; 71
    5bac:	fc 01       	movw	r30, r24
    5bae:	60 81       	ld	r22, Z
    5bb0:	71 81       	ldd	r23, Z+1	; 0x01
    5bb2:	82 81       	ldd	r24, Z+2	; 0x02
    5bb4:	93 81       	ldd	r25, Z+3	; 0x03
    5bb6:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    5bba:	18 16       	cp	r1, r24
    5bbc:	0c f0       	brlt	.+2      	; 0x5bc0 <LCDByte+0x74c>
    5bbe:	4a c0       	rjmp	.+148    	; 0x5c54 <LCDByte+0x7e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bc0:	ce 01       	movw	r24, r28
    5bc2:	8a 5a       	subi	r24, 0xAA	; 170
    5bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    5bc6:	20 e0       	ldi	r18, 0x00	; 0
    5bc8:	30 e0       	ldi	r19, 0x00	; 0
    5bca:	40 e2       	ldi	r20, 0x20	; 32
    5bcc:	51 e4       	ldi	r21, 0x41	; 65
    5bce:	fc 01       	movw	r30, r24
    5bd0:	60 81       	ld	r22, Z
    5bd2:	71 81       	ldd	r23, Z+1	; 0x01
    5bd4:	82 81       	ldd	r24, Z+2	; 0x02
    5bd6:	93 81       	ldd	r25, Z+3	; 0x03
    5bd8:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    5bdc:	dc 01       	movw	r26, r24
    5bde:	cb 01       	movw	r24, r22
    5be0:	8e 01       	movw	r16, r28
    5be2:	02 5a       	subi	r16, 0xA2	; 162
    5be4:	1f 4f       	sbci	r17, 0xFF	; 255
    5be6:	bc 01       	movw	r22, r24
    5be8:	cd 01       	movw	r24, r26
    5bea:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    5bee:	dc 01       	movw	r26, r24
    5bf0:	cb 01       	movw	r24, r22
    5bf2:	f8 01       	movw	r30, r16
    5bf4:	91 83       	std	Z+1, r25	; 0x01
    5bf6:	80 83       	st	Z, r24
    5bf8:	24 c0       	rjmp	.+72     	; 0x5c42 <LCDByte+0x7ce>
    5bfa:	ce 01       	movw	r24, r28
    5bfc:	80 5a       	subi	r24, 0xA0	; 160
    5bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    5c00:	28 ec       	ldi	r18, 0xC8	; 200
    5c02:	30 e0       	ldi	r19, 0x00	; 0
    5c04:	fc 01       	movw	r30, r24
    5c06:	31 83       	std	Z+1, r19	; 0x01
    5c08:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5c0a:	ce 01       	movw	r24, r28
    5c0c:	80 5a       	subi	r24, 0xA0	; 160
    5c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c10:	fc 01       	movw	r30, r24
    5c12:	80 81       	ld	r24, Z
    5c14:	91 81       	ldd	r25, Z+1	; 0x01
    5c16:	01 97       	sbiw	r24, 0x01	; 1
    5c18:	f1 f7       	brne	.-4      	; 0x5c16 <LCDByte+0x7a2>
    5c1a:	9e 01       	movw	r18, r28
    5c1c:	20 5a       	subi	r18, 0xA0	; 160
    5c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    5c20:	f9 01       	movw	r30, r18
    5c22:	91 83       	std	Z+1, r25	; 0x01
    5c24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c26:	ce 01       	movw	r24, r28
    5c28:	82 5a       	subi	r24, 0xA2	; 162
    5c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c2c:	9e 01       	movw	r18, r28
    5c2e:	22 5a       	subi	r18, 0xA2	; 162
    5c30:	3f 4f       	sbci	r19, 0xFF	; 255
    5c32:	f9 01       	movw	r30, r18
    5c34:	20 81       	ld	r18, Z
    5c36:	31 81       	ldd	r19, Z+1	; 0x01
    5c38:	21 50       	subi	r18, 0x01	; 1
    5c3a:	31 09       	sbc	r19, r1
    5c3c:	fc 01       	movw	r30, r24
    5c3e:	31 83       	std	Z+1, r19	; 0x01
    5c40:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c42:	ce 01       	movw	r24, r28
    5c44:	82 5a       	subi	r24, 0xA2	; 162
    5c46:	9f 4f       	sbci	r25, 0xFF	; 255
    5c48:	fc 01       	movw	r30, r24
    5c4a:	80 81       	ld	r24, Z
    5c4c:	91 81       	ldd	r25, Z+1	; 0x01
    5c4e:	89 2b       	or	r24, r25
    5c50:	a1 f6       	brne	.-88     	; 0x5bfa <LCDByte+0x786>
    5c52:	7b c0       	rjmp	.+246    	; 0x5d4a <LCDByte+0x8d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c54:	8e 01       	movw	r16, r28
    5c56:	02 5a       	subi	r16, 0xA2	; 162
    5c58:	1f 4f       	sbci	r17, 0xFF	; 255
    5c5a:	ce 01       	movw	r24, r28
    5c5c:	86 5a       	subi	r24, 0xA6	; 166
    5c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c60:	fc 01       	movw	r30, r24
    5c62:	60 81       	ld	r22, Z
    5c64:	71 81       	ldd	r23, Z+1	; 0x01
    5c66:	82 81       	ldd	r24, Z+2	; 0x02
    5c68:	93 81       	ldd	r25, Z+3	; 0x03
    5c6a:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    5c6e:	dc 01       	movw	r26, r24
    5c70:	cb 01       	movw	r24, r22
    5c72:	f8 01       	movw	r30, r16
    5c74:	91 83       	std	Z+1, r25	; 0x01
    5c76:	80 83       	st	Z, r24
    5c78:	ce 01       	movw	r24, r28
    5c7a:	8e 59       	subi	r24, 0x9E	; 158
    5c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c7e:	9e 01       	movw	r18, r28
    5c80:	22 5a       	subi	r18, 0xA2	; 162
    5c82:	3f 4f       	sbci	r19, 0xFF	; 255
    5c84:	f9 01       	movw	r30, r18
    5c86:	20 81       	ld	r18, Z
    5c88:	31 81       	ldd	r19, Z+1	; 0x01
    5c8a:	fc 01       	movw	r30, r24
    5c8c:	31 83       	std	Z+1, r19	; 0x01
    5c8e:	20 83       	st	Z, r18
    5c90:	ce 01       	movw	r24, r28
    5c92:	8e 59       	subi	r24, 0x9E	; 158
    5c94:	9f 4f       	sbci	r25, 0xFF	; 255
    5c96:	fc 01       	movw	r30, r24
    5c98:	80 81       	ld	r24, Z
    5c9a:	91 81       	ldd	r25, Z+1	; 0x01
    5c9c:	01 97       	sbiw	r24, 0x01	; 1
    5c9e:	f1 f7       	brne	.-4      	; 0x5c9c <LCDByte+0x828>
    5ca0:	9e 01       	movw	r18, r28
    5ca2:	2e 59       	subi	r18, 0x9E	; 158
    5ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ca6:	f9 01       	movw	r30, r18
    5ca8:	91 83       	std	Z+1, r25	; 0x01
    5caa:	80 83       	st	Z, r24
    5cac:	4e c0       	rjmp	.+156    	; 0x5d4a <LCDByte+0x8d6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    5cae:	ce 01       	movw	r24, r28
    5cb0:	83 5b       	subi	r24, 0xB3	; 179
    5cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    5cb4:	20 e0       	ldi	r18, 0x00	; 0
    5cb6:	30 e0       	ldi	r19, 0x00	; 0
    5cb8:	4f e7       	ldi	r20, 0x7F	; 127
    5cba:	53 e4       	ldi	r21, 0x43	; 67
    5cbc:	fc 01       	movw	r30, r24
    5cbe:	60 81       	ld	r22, Z
    5cc0:	71 81       	ldd	r23, Z+1	; 0x01
    5cc2:	82 81       	ldd	r24, Z+2	; 0x02
    5cc4:	93 81       	ldd	r25, Z+3	; 0x03
    5cc6:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    5cca:	18 16       	cp	r1, r24
    5ccc:	6c f5       	brge	.+90     	; 0x5d28 <LCDByte+0x8b4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    5cce:	8e 01       	movw	r16, r28
    5cd0:	0c 59       	subi	r16, 0x9C	; 156
    5cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    5cd4:	ce 01       	movw	r24, r28
    5cd6:	8f 5a       	subi	r24, 0xAF	; 175
    5cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    5cda:	fc 01       	movw	r30, r24
    5cdc:	60 81       	ld	r22, Z
    5cde:	71 81       	ldd	r23, Z+1	; 0x01
    5ce0:	82 81       	ldd	r24, Z+2	; 0x02
    5ce2:	93 81       	ldd	r25, Z+3	; 0x03
    5ce4:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    5ce8:	dc 01       	movw	r26, r24
    5cea:	cb 01       	movw	r24, r22
    5cec:	f8 01       	movw	r30, r16
    5cee:	91 83       	std	Z+1, r25	; 0x01
    5cf0:	80 83       	st	Z, r24
    5cf2:	ce 01       	movw	r24, r28
    5cf4:	8a 59       	subi	r24, 0x9A	; 154
    5cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    5cf8:	9e 01       	movw	r18, r28
    5cfa:	2c 59       	subi	r18, 0x9C	; 156
    5cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    5cfe:	f9 01       	movw	r30, r18
    5d00:	20 81       	ld	r18, Z
    5d02:	31 81       	ldd	r19, Z+1	; 0x01
    5d04:	fc 01       	movw	r30, r24
    5d06:	31 83       	std	Z+1, r19	; 0x01
    5d08:	20 83       	st	Z, r18
    5d0a:	ce 01       	movw	r24, r28
    5d0c:	8a 59       	subi	r24, 0x9A	; 154
    5d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d10:	fc 01       	movw	r30, r24
    5d12:	80 81       	ld	r24, Z
    5d14:	91 81       	ldd	r25, Z+1	; 0x01
    5d16:	01 97       	sbiw	r24, 0x01	; 1
    5d18:	f1 f7       	brne	.-4      	; 0x5d16 <LCDByte+0x8a2>
    5d1a:	9e 01       	movw	r18, r28
    5d1c:	2a 59       	subi	r18, 0x9A	; 154
    5d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d20:	f9 01       	movw	r30, r18
    5d22:	91 83       	std	Z+1, r25	; 0x01
    5d24:	80 83       	st	Z, r24
    5d26:	28 c0       	rjmp	.+80     	; 0x5d78 <LCDByte+0x904>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5d28:	8e 01       	movw	r16, r28
    5d2a:	0b 5a       	subi	r16, 0xAB	; 171
    5d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    5d2e:	ce 01       	movw	r24, r28
    5d30:	83 5b       	subi	r24, 0xB3	; 179
    5d32:	9f 4f       	sbci	r25, 0xFF	; 255
    5d34:	fc 01       	movw	r30, r24
    5d36:	60 81       	ld	r22, Z
    5d38:	71 81       	ldd	r23, Z+1	; 0x01
    5d3a:	82 81       	ldd	r24, Z+2	; 0x02
    5d3c:	93 81       	ldd	r25, Z+3	; 0x03
    5d3e:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    5d42:	dc 01       	movw	r26, r24
    5d44:	cb 01       	movw	r24, r22
    5d46:	f8 01       	movw	r30, r16
    5d48:	80 83       	st	Z, r24
    5d4a:	ce 01       	movw	r24, r28
    5d4c:	88 59       	subi	r24, 0x98	; 152
    5d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d50:	9e 01       	movw	r18, r28
    5d52:	2b 5a       	subi	r18, 0xAB	; 171
    5d54:	3f 4f       	sbci	r19, 0xFF	; 255
    5d56:	f9 01       	movw	r30, r18
    5d58:	20 81       	ld	r18, Z
    5d5a:	fc 01       	movw	r30, r24
    5d5c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5d5e:	ce 01       	movw	r24, r28
    5d60:	88 59       	subi	r24, 0x98	; 152
    5d62:	9f 4f       	sbci	r25, 0xFF	; 255
    5d64:	fc 01       	movw	r30, r24
    5d66:	80 81       	ld	r24, Z
    5d68:	28 2f       	mov	r18, r24
    5d6a:	2a 95       	dec	r18
    5d6c:	f1 f7       	brne	.-4      	; 0x5d6a <LCDByte+0x8f6>
    5d6e:	ce 01       	movw	r24, r28
    5d70:	88 59       	subi	r24, 0x98	; 152
    5d72:	9f 4f       	sbci	r25, 0xFF	; 255
    5d74:	fc 01       	movw	r30, r24
    5d76:	20 83       	st	Z, r18

	_delay_us(1);

	//Send the lower nibble
	SET_E();
    5d78:	85 e6       	ldi	r24, 0x65	; 101
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
    5d7c:	25 e6       	ldi	r18, 0x65	; 101
    5d7e:	30 e0       	ldi	r19, 0x00	; 0
    5d80:	f9 01       	movw	r30, r18
    5d82:	20 81       	ld	r18, Z
    5d84:	20 61       	ori	r18, 0x10	; 16
    5d86:	fc 01       	movw	r30, r24
    5d88:	20 83       	st	Z, r18

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
    5d8a:	85 e3       	ldi	r24, 0x35	; 53
    5d8c:	90 e0       	ldi	r25, 0x00	; 0
    5d8e:	fc 01       	movw	r30, r24
    5d90:	80 81       	ld	r24, Z
    5d92:	98 2f       	mov	r25, r24
    5d94:	90 7f       	andi	r25, 0xF0	; 240
    5d96:	8f 81       	ldd	r24, Y+7	; 0x07
    5d98:	89 2b       	or	r24, r25
    5d9a:	88 87       	std	Y+8, r24	; 0x08

	LCD_DATA_PORT=temp;
    5d9c:	85 e3       	ldi	r24, 0x35	; 53
    5d9e:	90 e0       	ldi	r25, 0x00	; 0
    5da0:	28 85       	ldd	r18, Y+8	; 0x08
    5da2:	fc 01       	movw	r30, r24
    5da4:	20 83       	st	Z, r18
    5da6:	9e 01       	movw	r18, r28
    5da8:	27 59       	subi	r18, 0x97	; 151
    5daa:	3f 4f       	sbci	r19, 0xFF	; 255
    5dac:	80 e0       	ldi	r24, 0x00	; 0
    5dae:	90 e0       	ldi	r25, 0x00	; 0
    5db0:	a0 e8       	ldi	r26, 0x80	; 128
    5db2:	bf e3       	ldi	r27, 0x3F	; 63
    5db4:	f9 01       	movw	r30, r18
    5db6:	80 83       	st	Z, r24
    5db8:	91 83       	std	Z+1, r25	; 0x01
    5dba:	a2 83       	std	Z+2, r26	; 0x02
    5dbc:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    5dbe:	8e 01       	movw	r16, r28
    5dc0:	03 59       	subi	r16, 0x93	; 147
    5dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    5dc4:	ce 01       	movw	r24, r28
    5dc6:	87 59       	subi	r24, 0x97	; 151
    5dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dca:	2b ea       	ldi	r18, 0xAB	; 171
    5dcc:	3a ea       	ldi	r19, 0xAA	; 170
    5dce:	4a e2       	ldi	r20, 0x2A	; 42
    5dd0:	50 e4       	ldi	r21, 0x40	; 64
    5dd2:	fc 01       	movw	r30, r24
    5dd4:	60 81       	ld	r22, Z
    5dd6:	71 81       	ldd	r23, Z+1	; 0x01
    5dd8:	82 81       	ldd	r24, Z+2	; 0x02
    5dda:	93 81       	ldd	r25, Z+3	; 0x03
    5ddc:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    5de0:	dc 01       	movw	r26, r24
    5de2:	cb 01       	movw	r24, r22
    5de4:	f8 01       	movw	r30, r16
    5de6:	80 83       	st	Z, r24
    5de8:	91 83       	std	Z+1, r25	; 0x01
    5dea:	a2 83       	std	Z+2, r26	; 0x02
    5dec:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    5dee:	8e 01       	movw	r16, r28
    5df0:	0f 58       	subi	r16, 0x8F	; 143
    5df2:	1f 4f       	sbci	r17, 0xFF	; 255
    5df4:	ce 01       	movw	r24, r28
    5df6:	87 59       	subi	r24, 0x97	; 151
    5df8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dfa:	fc 01       	movw	r30, r24
    5dfc:	80 81       	ld	r24, Z
    5dfe:	91 81       	ldd	r25, Z+1	; 0x01
    5e00:	a2 81       	ldd	r26, Z+2	; 0x02
    5e02:	b3 81       	ldd	r27, Z+3	; 0x03
    5e04:	9c 01       	movw	r18, r24
    5e06:	ad 01       	movw	r20, r26
    5e08:	bc 01       	movw	r22, r24
    5e0a:	cd 01       	movw	r24, r26
    5e0c:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    5e10:	dc 01       	movw	r26, r24
    5e12:	cb 01       	movw	r24, r22
    5e14:	f8 01       	movw	r30, r16
    5e16:	80 83       	st	Z, r24
    5e18:	91 83       	std	Z+1, r25	; 0x01
    5e1a:	a2 83       	std	Z+2, r26	; 0x02
    5e1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5e1e:	ce 01       	movw	r24, r28
    5e20:	83 59       	subi	r24, 0x93	; 147
    5e22:	9f 4f       	sbci	r25, 0xFF	; 255
    5e24:	20 e0       	ldi	r18, 0x00	; 0
    5e26:	30 e0       	ldi	r19, 0x00	; 0
    5e28:	40 e8       	ldi	r20, 0x80	; 128
    5e2a:	5f e3       	ldi	r21, 0x3F	; 63
    5e2c:	fc 01       	movw	r30, r24
    5e2e:	60 81       	ld	r22, Z
    5e30:	71 81       	ldd	r23, Z+1	; 0x01
    5e32:	82 81       	ldd	r24, Z+2	; 0x02
    5e34:	93 81       	ldd	r25, Z+3	; 0x03
    5e36:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    5e3a:	88 23       	and	r24, r24
    5e3c:	3c f4       	brge	.+14     	; 0x5e4c <LCDByte+0x9d8>
		__ticks = 1;
    5e3e:	ce 01       	movw	r24, r28
    5e40:	8b 58       	subi	r24, 0x8B	; 139
    5e42:	9f 4f       	sbci	r25, 0xFF	; 255
    5e44:	21 e0       	ldi	r18, 0x01	; 1
    5e46:	fc 01       	movw	r30, r24
    5e48:	20 83       	st	Z, r18
    5e4a:	30 c1       	rjmp	.+608    	; 0x60ac <LCDByte+0xc38>
	else if (__tmp2 > 65535)
    5e4c:	ce 01       	movw	r24, r28
    5e4e:	8f 58       	subi	r24, 0x8F	; 143
    5e50:	9f 4f       	sbci	r25, 0xFF	; 255
    5e52:	20 e0       	ldi	r18, 0x00	; 0
    5e54:	3f ef       	ldi	r19, 0xFF	; 255
    5e56:	4f e7       	ldi	r20, 0x7F	; 127
    5e58:	57 e4       	ldi	r21, 0x47	; 71
    5e5a:	fc 01       	movw	r30, r24
    5e5c:	60 81       	ld	r22, Z
    5e5e:	71 81       	ldd	r23, Z+1	; 0x01
    5e60:	82 81       	ldd	r24, Z+2	; 0x02
    5e62:	93 81       	ldd	r25, Z+3	; 0x03
    5e64:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    5e68:	18 16       	cp	r1, r24
    5e6a:	0c f0       	brlt	.+2      	; 0x5e6e <LCDByte+0x9fa>
    5e6c:	d1 c0       	rjmp	.+418    	; 0x6010 <LCDByte+0xb9c>
	{
		_delay_ms(__us / 1000.0);
    5e6e:	ce 01       	movw	r24, r28
    5e70:	87 59       	subi	r24, 0x97	; 151
    5e72:	9f 4f       	sbci	r25, 0xFF	; 255
    5e74:	20 e0       	ldi	r18, 0x00	; 0
    5e76:	30 e0       	ldi	r19, 0x00	; 0
    5e78:	4a e7       	ldi	r20, 0x7A	; 122
    5e7a:	54 e4       	ldi	r21, 0x44	; 68
    5e7c:	fc 01       	movw	r30, r24
    5e7e:	60 81       	ld	r22, Z
    5e80:	71 81       	ldd	r23, Z+1	; 0x01
    5e82:	82 81       	ldd	r24, Z+2	; 0x02
    5e84:	93 81       	ldd	r25, Z+3	; 0x03
    5e86:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    5e8a:	dc 01       	movw	r26, r24
    5e8c:	cb 01       	movw	r24, r22
    5e8e:	9e 01       	movw	r18, r28
    5e90:	2a 58       	subi	r18, 0x8A	; 138
    5e92:	3f 4f       	sbci	r19, 0xFF	; 255
    5e94:	f9 01       	movw	r30, r18
    5e96:	80 83       	st	Z, r24
    5e98:	91 83       	std	Z+1, r25	; 0x01
    5e9a:	a2 83       	std	Z+2, r26	; 0x02
    5e9c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5e9e:	8e 01       	movw	r16, r28
    5ea0:	06 58       	subi	r16, 0x86	; 134
    5ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ea4:	ce 01       	movw	r24, r28
    5ea6:	8a 58       	subi	r24, 0x8A	; 138
    5ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    5eaa:	20 e0       	ldi	r18, 0x00	; 0
    5eac:	30 e0       	ldi	r19, 0x00	; 0
    5eae:	4a ef       	ldi	r20, 0xFA	; 250
    5eb0:	54 e4       	ldi	r21, 0x44	; 68
    5eb2:	fc 01       	movw	r30, r24
    5eb4:	60 81       	ld	r22, Z
    5eb6:	71 81       	ldd	r23, Z+1	; 0x01
    5eb8:	82 81       	ldd	r24, Z+2	; 0x02
    5eba:	93 81       	ldd	r25, Z+3	; 0x03
    5ebc:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    5ec0:	dc 01       	movw	r26, r24
    5ec2:	cb 01       	movw	r24, r22
    5ec4:	f8 01       	movw	r30, r16
    5ec6:	80 83       	st	Z, r24
    5ec8:	91 83       	std	Z+1, r25	; 0x01
    5eca:	a2 83       	std	Z+2, r26	; 0x02
    5ecc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5ece:	ce 01       	movw	r24, r28
    5ed0:	86 58       	subi	r24, 0x86	; 134
    5ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ed4:	20 e0       	ldi	r18, 0x00	; 0
    5ed6:	30 e0       	ldi	r19, 0x00	; 0
    5ed8:	40 e8       	ldi	r20, 0x80	; 128
    5eda:	5f e3       	ldi	r21, 0x3F	; 63
    5edc:	fc 01       	movw	r30, r24
    5ede:	60 81       	ld	r22, Z
    5ee0:	71 81       	ldd	r23, Z+1	; 0x01
    5ee2:	82 81       	ldd	r24, Z+2	; 0x02
    5ee4:	93 81       	ldd	r25, Z+3	; 0x03
    5ee6:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    5eea:	88 23       	and	r24, r24
    5eec:	4c f4       	brge	.+18     	; 0x5f00 <LCDByte+0xa8c>
		__ticks = 1;
    5eee:	ce 01       	movw	r24, r28
    5ef0:	82 58       	subi	r24, 0x82	; 130
    5ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ef4:	21 e0       	ldi	r18, 0x01	; 1
    5ef6:	30 e0       	ldi	r19, 0x00	; 0
    5ef8:	fc 01       	movw	r30, r24
    5efa:	31 83       	std	Z+1, r19	; 0x01
    5efc:	20 83       	st	Z, r18
    5efe:	6d c0       	rjmp	.+218    	; 0x5fda <LCDByte+0xb66>
	else if (__tmp > 65535)
    5f00:	ce 01       	movw	r24, r28
    5f02:	86 58       	subi	r24, 0x86	; 134
    5f04:	9f 4f       	sbci	r25, 0xFF	; 255
    5f06:	20 e0       	ldi	r18, 0x00	; 0
    5f08:	3f ef       	ldi	r19, 0xFF	; 255
    5f0a:	4f e7       	ldi	r20, 0x7F	; 127
    5f0c:	57 e4       	ldi	r21, 0x47	; 71
    5f0e:	fc 01       	movw	r30, r24
    5f10:	60 81       	ld	r22, Z
    5f12:	71 81       	ldd	r23, Z+1	; 0x01
    5f14:	82 81       	ldd	r24, Z+2	; 0x02
    5f16:	93 81       	ldd	r25, Z+3	; 0x03
    5f18:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    5f1c:	18 16       	cp	r1, r24
    5f1e:	0c f0       	brlt	.+2      	; 0x5f22 <LCDByte+0xaae>
    5f20:	4a c0       	rjmp	.+148    	; 0x5fb6 <LCDByte+0xb42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f22:	ce 01       	movw	r24, r28
    5f24:	8a 58       	subi	r24, 0x8A	; 138
    5f26:	9f 4f       	sbci	r25, 0xFF	; 255
    5f28:	20 e0       	ldi	r18, 0x00	; 0
    5f2a:	30 e0       	ldi	r19, 0x00	; 0
    5f2c:	40 e2       	ldi	r20, 0x20	; 32
    5f2e:	51 e4       	ldi	r21, 0x41	; 65
    5f30:	fc 01       	movw	r30, r24
    5f32:	60 81       	ld	r22, Z
    5f34:	71 81       	ldd	r23, Z+1	; 0x01
    5f36:	82 81       	ldd	r24, Z+2	; 0x02
    5f38:	93 81       	ldd	r25, Z+3	; 0x03
    5f3a:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    5f3e:	dc 01       	movw	r26, r24
    5f40:	cb 01       	movw	r24, r22
    5f42:	8e 01       	movw	r16, r28
    5f44:	02 58       	subi	r16, 0x82	; 130
    5f46:	1f 4f       	sbci	r17, 0xFF	; 255
    5f48:	bc 01       	movw	r22, r24
    5f4a:	cd 01       	movw	r24, r26
    5f4c:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    5f50:	dc 01       	movw	r26, r24
    5f52:	cb 01       	movw	r24, r22
    5f54:	f8 01       	movw	r30, r16
    5f56:	91 83       	std	Z+1, r25	; 0x01
    5f58:	80 83       	st	Z, r24
    5f5a:	24 c0       	rjmp	.+72     	; 0x5fa4 <LCDByte+0xb30>
    5f5c:	ce 01       	movw	r24, r28
    5f5e:	80 58       	subi	r24, 0x80	; 128
    5f60:	9f 4f       	sbci	r25, 0xFF	; 255
    5f62:	28 ec       	ldi	r18, 0xC8	; 200
    5f64:	30 e0       	ldi	r19, 0x00	; 0
    5f66:	fc 01       	movw	r30, r24
    5f68:	31 83       	std	Z+1, r19	; 0x01
    5f6a:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5f6c:	ce 01       	movw	r24, r28
    5f6e:	80 58       	subi	r24, 0x80	; 128
    5f70:	9f 4f       	sbci	r25, 0xFF	; 255
    5f72:	fc 01       	movw	r30, r24
    5f74:	80 81       	ld	r24, Z
    5f76:	91 81       	ldd	r25, Z+1	; 0x01
    5f78:	01 97       	sbiw	r24, 0x01	; 1
    5f7a:	f1 f7       	brne	.-4      	; 0x5f78 <LCDByte+0xb04>
    5f7c:	9e 01       	movw	r18, r28
    5f7e:	20 58       	subi	r18, 0x80	; 128
    5f80:	3f 4f       	sbci	r19, 0xFF	; 255
    5f82:	f9 01       	movw	r30, r18
    5f84:	91 83       	std	Z+1, r25	; 0x01
    5f86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f88:	ce 01       	movw	r24, r28
    5f8a:	82 58       	subi	r24, 0x82	; 130
    5f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    5f8e:	9e 01       	movw	r18, r28
    5f90:	22 58       	subi	r18, 0x82	; 130
    5f92:	3f 4f       	sbci	r19, 0xFF	; 255
    5f94:	f9 01       	movw	r30, r18
    5f96:	20 81       	ld	r18, Z
    5f98:	31 81       	ldd	r19, Z+1	; 0x01
    5f9a:	21 50       	subi	r18, 0x01	; 1
    5f9c:	31 09       	sbc	r19, r1
    5f9e:	fc 01       	movw	r30, r24
    5fa0:	31 83       	std	Z+1, r19	; 0x01
    5fa2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fa4:	ce 01       	movw	r24, r28
    5fa6:	82 58       	subi	r24, 0x82	; 130
    5fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    5faa:	fc 01       	movw	r30, r24
    5fac:	80 81       	ld	r24, Z
    5fae:	91 81       	ldd	r25, Z+1	; 0x01
    5fb0:	89 2b       	or	r24, r25
    5fb2:	a1 f6       	brne	.-88     	; 0x5f5c <LCDByte+0xae8>
    5fb4:	7b c0       	rjmp	.+246    	; 0x60ac <LCDByte+0xc38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fb6:	8e 01       	movw	r16, r28
    5fb8:	02 58       	subi	r16, 0x82	; 130
    5fba:	1f 4f       	sbci	r17, 0xFF	; 255
    5fbc:	ce 01       	movw	r24, r28
    5fbe:	86 58       	subi	r24, 0x86	; 134
    5fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    5fc2:	fc 01       	movw	r30, r24
    5fc4:	60 81       	ld	r22, Z
    5fc6:	71 81       	ldd	r23, Z+1	; 0x01
    5fc8:	82 81       	ldd	r24, Z+2	; 0x02
    5fca:	93 81       	ldd	r25, Z+3	; 0x03
    5fcc:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    5fd0:	dc 01       	movw	r26, r24
    5fd2:	cb 01       	movw	r24, r22
    5fd4:	f8 01       	movw	r30, r16
    5fd6:	91 83       	std	Z+1, r25	; 0x01
    5fd8:	80 83       	st	Z, r24
    5fda:	ce 01       	movw	r24, r28
    5fdc:	8e 57       	subi	r24, 0x7E	; 126
    5fde:	9f 4f       	sbci	r25, 0xFF	; 255
    5fe0:	9e 01       	movw	r18, r28
    5fe2:	22 58       	subi	r18, 0x82	; 130
    5fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    5fe6:	f9 01       	movw	r30, r18
    5fe8:	20 81       	ld	r18, Z
    5fea:	31 81       	ldd	r19, Z+1	; 0x01
    5fec:	fc 01       	movw	r30, r24
    5fee:	31 83       	std	Z+1, r19	; 0x01
    5ff0:	20 83       	st	Z, r18
    5ff2:	ce 01       	movw	r24, r28
    5ff4:	8e 57       	subi	r24, 0x7E	; 126
    5ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ff8:	fc 01       	movw	r30, r24
    5ffa:	80 81       	ld	r24, Z
    5ffc:	91 81       	ldd	r25, Z+1	; 0x01
    5ffe:	01 97       	sbiw	r24, 0x01	; 1
    6000:	f1 f7       	brne	.-4      	; 0x5ffe <LCDByte+0xb8a>
    6002:	9e 01       	movw	r18, r28
    6004:	2e 57       	subi	r18, 0x7E	; 126
    6006:	3f 4f       	sbci	r19, 0xFF	; 255
    6008:	f9 01       	movw	r30, r18
    600a:	91 83       	std	Z+1, r25	; 0x01
    600c:	80 83       	st	Z, r24
    600e:	4e c0       	rjmp	.+156    	; 0x60ac <LCDByte+0xc38>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    6010:	ce 01       	movw	r24, r28
    6012:	83 59       	subi	r24, 0x93	; 147
    6014:	9f 4f       	sbci	r25, 0xFF	; 255
    6016:	20 e0       	ldi	r18, 0x00	; 0
    6018:	30 e0       	ldi	r19, 0x00	; 0
    601a:	4f e7       	ldi	r20, 0x7F	; 127
    601c:	53 e4       	ldi	r21, 0x43	; 67
    601e:	fc 01       	movw	r30, r24
    6020:	60 81       	ld	r22, Z
    6022:	71 81       	ldd	r23, Z+1	; 0x01
    6024:	82 81       	ldd	r24, Z+2	; 0x02
    6026:	93 81       	ldd	r25, Z+3	; 0x03
    6028:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    602c:	18 16       	cp	r1, r24
    602e:	6c f5       	brge	.+90     	; 0x608a <LCDByte+0xc16>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    6030:	8e 01       	movw	r16, r28
    6032:	0c 57       	subi	r16, 0x7C	; 124
    6034:	1f 4f       	sbci	r17, 0xFF	; 255
    6036:	ce 01       	movw	r24, r28
    6038:	8f 58       	subi	r24, 0x8F	; 143
    603a:	9f 4f       	sbci	r25, 0xFF	; 255
    603c:	fc 01       	movw	r30, r24
    603e:	60 81       	ld	r22, Z
    6040:	71 81       	ldd	r23, Z+1	; 0x01
    6042:	82 81       	ldd	r24, Z+2	; 0x02
    6044:	93 81       	ldd	r25, Z+3	; 0x03
    6046:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    604a:	dc 01       	movw	r26, r24
    604c:	cb 01       	movw	r24, r22
    604e:	f8 01       	movw	r30, r16
    6050:	91 83       	std	Z+1, r25	; 0x01
    6052:	80 83       	st	Z, r24
    6054:	ce 01       	movw	r24, r28
    6056:	8a 57       	subi	r24, 0x7A	; 122
    6058:	9f 4f       	sbci	r25, 0xFF	; 255
    605a:	9e 01       	movw	r18, r28
    605c:	2c 57       	subi	r18, 0x7C	; 124
    605e:	3f 4f       	sbci	r19, 0xFF	; 255
    6060:	f9 01       	movw	r30, r18
    6062:	20 81       	ld	r18, Z
    6064:	31 81       	ldd	r19, Z+1	; 0x01
    6066:	fc 01       	movw	r30, r24
    6068:	31 83       	std	Z+1, r19	; 0x01
    606a:	20 83       	st	Z, r18
    606c:	ce 01       	movw	r24, r28
    606e:	8a 57       	subi	r24, 0x7A	; 122
    6070:	9f 4f       	sbci	r25, 0xFF	; 255
    6072:	fc 01       	movw	r30, r24
    6074:	80 81       	ld	r24, Z
    6076:	91 81       	ldd	r25, Z+1	; 0x01
    6078:	01 97       	sbiw	r24, 0x01	; 1
    607a:	f1 f7       	brne	.-4      	; 0x6078 <LCDByte+0xc04>
    607c:	9e 01       	movw	r18, r28
    607e:	2a 57       	subi	r18, 0x7A	; 122
    6080:	3f 4f       	sbci	r19, 0xFF	; 255
    6082:	f9 01       	movw	r30, r18
    6084:	91 83       	std	Z+1, r25	; 0x01
    6086:	80 83       	st	Z, r24
    6088:	28 c0       	rjmp	.+80     	; 0x60da <LCDByte+0xc66>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    608a:	8e 01       	movw	r16, r28
    608c:	0b 58       	subi	r16, 0x8B	; 139
    608e:	1f 4f       	sbci	r17, 0xFF	; 255
    6090:	ce 01       	movw	r24, r28
    6092:	83 59       	subi	r24, 0x93	; 147
    6094:	9f 4f       	sbci	r25, 0xFF	; 255
    6096:	fc 01       	movw	r30, r24
    6098:	60 81       	ld	r22, Z
    609a:	71 81       	ldd	r23, Z+1	; 0x01
    609c:	82 81       	ldd	r24, Z+2	; 0x02
    609e:	93 81       	ldd	r25, Z+3	; 0x03
    60a0:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    60a4:	dc 01       	movw	r26, r24
    60a6:	cb 01       	movw	r24, r22
    60a8:	f8 01       	movw	r30, r16
    60aa:	80 83       	st	Z, r24
    60ac:	ce 01       	movw	r24, r28
    60ae:	88 57       	subi	r24, 0x78	; 120
    60b0:	9f 4f       	sbci	r25, 0xFF	; 255
    60b2:	9e 01       	movw	r18, r28
    60b4:	2b 58       	subi	r18, 0x8B	; 139
    60b6:	3f 4f       	sbci	r19, 0xFF	; 255
    60b8:	f9 01       	movw	r30, r18
    60ba:	20 81       	ld	r18, Z
    60bc:	fc 01       	movw	r30, r24
    60be:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    60c0:	ce 01       	movw	r24, r28
    60c2:	88 57       	subi	r24, 0x78	; 120
    60c4:	9f 4f       	sbci	r25, 0xFF	; 255
    60c6:	fc 01       	movw	r30, r24
    60c8:	80 81       	ld	r24, Z
    60ca:	28 2f       	mov	r18, r24
    60cc:	2a 95       	dec	r18
    60ce:	f1 f7       	brne	.-4      	; 0x60cc <LCDByte+0xc58>
    60d0:	ce 01       	movw	r24, r28
    60d2:	88 57       	subi	r24, 0x78	; 120
    60d4:	9f 4f       	sbci	r25, 0xFF	; 255
    60d6:	fc 01       	movw	r30, r24
    60d8:	20 83       	st	Z, r18

	_delay_us(1);			//tEH

	//SEND
	CLEAR_E();
    60da:	85 e6       	ldi	r24, 0x65	; 101
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	25 e6       	ldi	r18, 0x65	; 101
    60e0:	30 e0       	ldi	r19, 0x00	; 0
    60e2:	f9 01       	movw	r30, r18
    60e4:	20 81       	ld	r18, Z
    60e6:	2f 7e       	andi	r18, 0xEF	; 239
    60e8:	fc 01       	movw	r30, r24
    60ea:	20 83       	st	Z, r18
    60ec:	9e 01       	movw	r18, r28
    60ee:	27 57       	subi	r18, 0x77	; 119
    60f0:	3f 4f       	sbci	r19, 0xFF	; 255
    60f2:	80 e0       	ldi	r24, 0x00	; 0
    60f4:	90 e0       	ldi	r25, 0x00	; 0
    60f6:	a0 e8       	ldi	r26, 0x80	; 128
    60f8:	bf e3       	ldi	r27, 0x3F	; 63
    60fa:	f9 01       	movw	r30, r18
    60fc:	80 83       	st	Z, r24
    60fe:	91 83       	std	Z+1, r25	; 0x01
    6100:	a2 83       	std	Z+2, r26	; 0x02
    6102:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    6104:	8e 01       	movw	r16, r28
    6106:	03 57       	subi	r16, 0x73	; 115
    6108:	1f 4f       	sbci	r17, 0xFF	; 255
    610a:	ce 01       	movw	r24, r28
    610c:	87 57       	subi	r24, 0x77	; 119
    610e:	9f 4f       	sbci	r25, 0xFF	; 255
    6110:	2b ea       	ldi	r18, 0xAB	; 171
    6112:	3a ea       	ldi	r19, 0xAA	; 170
    6114:	4a e2       	ldi	r20, 0x2A	; 42
    6116:	50 e4       	ldi	r21, 0x40	; 64
    6118:	fc 01       	movw	r30, r24
    611a:	60 81       	ld	r22, Z
    611c:	71 81       	ldd	r23, Z+1	; 0x01
    611e:	82 81       	ldd	r24, Z+2	; 0x02
    6120:	93 81       	ldd	r25, Z+3	; 0x03
    6122:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    6126:	dc 01       	movw	r26, r24
    6128:	cb 01       	movw	r24, r22
    612a:	f8 01       	movw	r30, r16
    612c:	80 83       	st	Z, r24
    612e:	91 83       	std	Z+1, r25	; 0x01
    6130:	a2 83       	std	Z+2, r26	; 0x02
    6132:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    6134:	8e 01       	movw	r16, r28
    6136:	0f 56       	subi	r16, 0x6F	; 111
    6138:	1f 4f       	sbci	r17, 0xFF	; 255
    613a:	ce 01       	movw	r24, r28
    613c:	87 57       	subi	r24, 0x77	; 119
    613e:	9f 4f       	sbci	r25, 0xFF	; 255
    6140:	fc 01       	movw	r30, r24
    6142:	80 81       	ld	r24, Z
    6144:	91 81       	ldd	r25, Z+1	; 0x01
    6146:	a2 81       	ldd	r26, Z+2	; 0x02
    6148:	b3 81       	ldd	r27, Z+3	; 0x03
    614a:	9c 01       	movw	r18, r24
    614c:	ad 01       	movw	r20, r26
    614e:	bc 01       	movw	r22, r24
    6150:	cd 01       	movw	r24, r26
    6152:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    6156:	dc 01       	movw	r26, r24
    6158:	cb 01       	movw	r24, r22
    615a:	f8 01       	movw	r30, r16
    615c:	80 83       	st	Z, r24
    615e:	91 83       	std	Z+1, r25	; 0x01
    6160:	a2 83       	std	Z+2, r26	; 0x02
    6162:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6164:	ce 01       	movw	r24, r28
    6166:	83 57       	subi	r24, 0x73	; 115
    6168:	9f 4f       	sbci	r25, 0xFF	; 255
    616a:	20 e0       	ldi	r18, 0x00	; 0
    616c:	30 e0       	ldi	r19, 0x00	; 0
    616e:	40 e8       	ldi	r20, 0x80	; 128
    6170:	5f e3       	ldi	r21, 0x3F	; 63
    6172:	fc 01       	movw	r30, r24
    6174:	60 81       	ld	r22, Z
    6176:	71 81       	ldd	r23, Z+1	; 0x01
    6178:	82 81       	ldd	r24, Z+2	; 0x02
    617a:	93 81       	ldd	r25, Z+3	; 0x03
    617c:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    6180:	88 23       	and	r24, r24
    6182:	3c f4       	brge	.+14     	; 0x6192 <LCDByte+0xd1e>
		__ticks = 1;
    6184:	ce 01       	movw	r24, r28
    6186:	8b 56       	subi	r24, 0x6B	; 107
    6188:	9f 4f       	sbci	r25, 0xFF	; 255
    618a:	21 e0       	ldi	r18, 0x01	; 1
    618c:	fc 01       	movw	r30, r24
    618e:	20 83       	st	Z, r18
    6190:	30 c1       	rjmp	.+608    	; 0x63f2 <LCDByte+0xf7e>
	else if (__tmp2 > 65535)
    6192:	ce 01       	movw	r24, r28
    6194:	8f 56       	subi	r24, 0x6F	; 111
    6196:	9f 4f       	sbci	r25, 0xFF	; 255
    6198:	20 e0       	ldi	r18, 0x00	; 0
    619a:	3f ef       	ldi	r19, 0xFF	; 255
    619c:	4f e7       	ldi	r20, 0x7F	; 127
    619e:	57 e4       	ldi	r21, 0x47	; 71
    61a0:	fc 01       	movw	r30, r24
    61a2:	60 81       	ld	r22, Z
    61a4:	71 81       	ldd	r23, Z+1	; 0x01
    61a6:	82 81       	ldd	r24, Z+2	; 0x02
    61a8:	93 81       	ldd	r25, Z+3	; 0x03
    61aa:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    61ae:	18 16       	cp	r1, r24
    61b0:	0c f0       	brlt	.+2      	; 0x61b4 <LCDByte+0xd40>
    61b2:	d1 c0       	rjmp	.+418    	; 0x6356 <LCDByte+0xee2>
	{
		_delay_ms(__us / 1000.0);
    61b4:	ce 01       	movw	r24, r28
    61b6:	87 57       	subi	r24, 0x77	; 119
    61b8:	9f 4f       	sbci	r25, 0xFF	; 255
    61ba:	20 e0       	ldi	r18, 0x00	; 0
    61bc:	30 e0       	ldi	r19, 0x00	; 0
    61be:	4a e7       	ldi	r20, 0x7A	; 122
    61c0:	54 e4       	ldi	r21, 0x44	; 68
    61c2:	fc 01       	movw	r30, r24
    61c4:	60 81       	ld	r22, Z
    61c6:	71 81       	ldd	r23, Z+1	; 0x01
    61c8:	82 81       	ldd	r24, Z+2	; 0x02
    61ca:	93 81       	ldd	r25, Z+3	; 0x03
    61cc:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    61d0:	dc 01       	movw	r26, r24
    61d2:	cb 01       	movw	r24, r22
    61d4:	9e 01       	movw	r18, r28
    61d6:	2a 56       	subi	r18, 0x6A	; 106
    61d8:	3f 4f       	sbci	r19, 0xFF	; 255
    61da:	f9 01       	movw	r30, r18
    61dc:	80 83       	st	Z, r24
    61de:	91 83       	std	Z+1, r25	; 0x01
    61e0:	a2 83       	std	Z+2, r26	; 0x02
    61e2:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    61e4:	8e 01       	movw	r16, r28
    61e6:	06 56       	subi	r16, 0x66	; 102
    61e8:	1f 4f       	sbci	r17, 0xFF	; 255
    61ea:	ce 01       	movw	r24, r28
    61ec:	8a 56       	subi	r24, 0x6A	; 106
    61ee:	9f 4f       	sbci	r25, 0xFF	; 255
    61f0:	20 e0       	ldi	r18, 0x00	; 0
    61f2:	30 e0       	ldi	r19, 0x00	; 0
    61f4:	4a ef       	ldi	r20, 0xFA	; 250
    61f6:	54 e4       	ldi	r21, 0x44	; 68
    61f8:	fc 01       	movw	r30, r24
    61fa:	60 81       	ld	r22, Z
    61fc:	71 81       	ldd	r23, Z+1	; 0x01
    61fe:	82 81       	ldd	r24, Z+2	; 0x02
    6200:	93 81       	ldd	r25, Z+3	; 0x03
    6202:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    6206:	dc 01       	movw	r26, r24
    6208:	cb 01       	movw	r24, r22
    620a:	f8 01       	movw	r30, r16
    620c:	80 83       	st	Z, r24
    620e:	91 83       	std	Z+1, r25	; 0x01
    6210:	a2 83       	std	Z+2, r26	; 0x02
    6212:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6214:	ce 01       	movw	r24, r28
    6216:	86 56       	subi	r24, 0x66	; 102
    6218:	9f 4f       	sbci	r25, 0xFF	; 255
    621a:	20 e0       	ldi	r18, 0x00	; 0
    621c:	30 e0       	ldi	r19, 0x00	; 0
    621e:	40 e8       	ldi	r20, 0x80	; 128
    6220:	5f e3       	ldi	r21, 0x3F	; 63
    6222:	fc 01       	movw	r30, r24
    6224:	60 81       	ld	r22, Z
    6226:	71 81       	ldd	r23, Z+1	; 0x01
    6228:	82 81       	ldd	r24, Z+2	; 0x02
    622a:	93 81       	ldd	r25, Z+3	; 0x03
    622c:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    6230:	88 23       	and	r24, r24
    6232:	4c f4       	brge	.+18     	; 0x6246 <LCDByte+0xdd2>
		__ticks = 1;
    6234:	ce 01       	movw	r24, r28
    6236:	82 56       	subi	r24, 0x62	; 98
    6238:	9f 4f       	sbci	r25, 0xFF	; 255
    623a:	21 e0       	ldi	r18, 0x01	; 1
    623c:	30 e0       	ldi	r19, 0x00	; 0
    623e:	fc 01       	movw	r30, r24
    6240:	31 83       	std	Z+1, r19	; 0x01
    6242:	20 83       	st	Z, r18
    6244:	6d c0       	rjmp	.+218    	; 0x6320 <LCDByte+0xeac>
	else if (__tmp > 65535)
    6246:	ce 01       	movw	r24, r28
    6248:	86 56       	subi	r24, 0x66	; 102
    624a:	9f 4f       	sbci	r25, 0xFF	; 255
    624c:	20 e0       	ldi	r18, 0x00	; 0
    624e:	3f ef       	ldi	r19, 0xFF	; 255
    6250:	4f e7       	ldi	r20, 0x7F	; 127
    6252:	57 e4       	ldi	r21, 0x47	; 71
    6254:	fc 01       	movw	r30, r24
    6256:	60 81       	ld	r22, Z
    6258:	71 81       	ldd	r23, Z+1	; 0x01
    625a:	82 81       	ldd	r24, Z+2	; 0x02
    625c:	93 81       	ldd	r25, Z+3	; 0x03
    625e:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    6262:	18 16       	cp	r1, r24
    6264:	0c f0       	brlt	.+2      	; 0x6268 <LCDByte+0xdf4>
    6266:	4a c0       	rjmp	.+148    	; 0x62fc <LCDByte+0xe88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6268:	ce 01       	movw	r24, r28
    626a:	8a 56       	subi	r24, 0x6A	; 106
    626c:	9f 4f       	sbci	r25, 0xFF	; 255
    626e:	20 e0       	ldi	r18, 0x00	; 0
    6270:	30 e0       	ldi	r19, 0x00	; 0
    6272:	40 e2       	ldi	r20, 0x20	; 32
    6274:	51 e4       	ldi	r21, 0x41	; 65
    6276:	fc 01       	movw	r30, r24
    6278:	60 81       	ld	r22, Z
    627a:	71 81       	ldd	r23, Z+1	; 0x01
    627c:	82 81       	ldd	r24, Z+2	; 0x02
    627e:	93 81       	ldd	r25, Z+3	; 0x03
    6280:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    6284:	dc 01       	movw	r26, r24
    6286:	cb 01       	movw	r24, r22
    6288:	8e 01       	movw	r16, r28
    628a:	02 56       	subi	r16, 0x62	; 98
    628c:	1f 4f       	sbci	r17, 0xFF	; 255
    628e:	bc 01       	movw	r22, r24
    6290:	cd 01       	movw	r24, r26
    6292:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    6296:	dc 01       	movw	r26, r24
    6298:	cb 01       	movw	r24, r22
    629a:	f8 01       	movw	r30, r16
    629c:	91 83       	std	Z+1, r25	; 0x01
    629e:	80 83       	st	Z, r24
    62a0:	24 c0       	rjmp	.+72     	; 0x62ea <LCDByte+0xe76>
    62a2:	ce 01       	movw	r24, r28
    62a4:	80 56       	subi	r24, 0x60	; 96
    62a6:	9f 4f       	sbci	r25, 0xFF	; 255
    62a8:	28 ec       	ldi	r18, 0xC8	; 200
    62aa:	30 e0       	ldi	r19, 0x00	; 0
    62ac:	fc 01       	movw	r30, r24
    62ae:	31 83       	std	Z+1, r19	; 0x01
    62b0:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    62b2:	ce 01       	movw	r24, r28
    62b4:	80 56       	subi	r24, 0x60	; 96
    62b6:	9f 4f       	sbci	r25, 0xFF	; 255
    62b8:	fc 01       	movw	r30, r24
    62ba:	80 81       	ld	r24, Z
    62bc:	91 81       	ldd	r25, Z+1	; 0x01
    62be:	01 97       	sbiw	r24, 0x01	; 1
    62c0:	f1 f7       	brne	.-4      	; 0x62be <LCDByte+0xe4a>
    62c2:	9e 01       	movw	r18, r28
    62c4:	20 56       	subi	r18, 0x60	; 96
    62c6:	3f 4f       	sbci	r19, 0xFF	; 255
    62c8:	f9 01       	movw	r30, r18
    62ca:	91 83       	std	Z+1, r25	; 0x01
    62cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62ce:	ce 01       	movw	r24, r28
    62d0:	82 56       	subi	r24, 0x62	; 98
    62d2:	9f 4f       	sbci	r25, 0xFF	; 255
    62d4:	9e 01       	movw	r18, r28
    62d6:	22 56       	subi	r18, 0x62	; 98
    62d8:	3f 4f       	sbci	r19, 0xFF	; 255
    62da:	f9 01       	movw	r30, r18
    62dc:	20 81       	ld	r18, Z
    62de:	31 81       	ldd	r19, Z+1	; 0x01
    62e0:	21 50       	subi	r18, 0x01	; 1
    62e2:	31 09       	sbc	r19, r1
    62e4:	fc 01       	movw	r30, r24
    62e6:	31 83       	std	Z+1, r19	; 0x01
    62e8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62ea:	ce 01       	movw	r24, r28
    62ec:	82 56       	subi	r24, 0x62	; 98
    62ee:	9f 4f       	sbci	r25, 0xFF	; 255
    62f0:	fc 01       	movw	r30, r24
    62f2:	80 81       	ld	r24, Z
    62f4:	91 81       	ldd	r25, Z+1	; 0x01
    62f6:	89 2b       	or	r24, r25
    62f8:	a1 f6       	brne	.-88     	; 0x62a2 <LCDByte+0xe2e>
    62fa:	7b c0       	rjmp	.+246    	; 0x63f2 <LCDByte+0xf7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62fc:	8e 01       	movw	r16, r28
    62fe:	02 56       	subi	r16, 0x62	; 98
    6300:	1f 4f       	sbci	r17, 0xFF	; 255
    6302:	ce 01       	movw	r24, r28
    6304:	86 56       	subi	r24, 0x66	; 102
    6306:	9f 4f       	sbci	r25, 0xFF	; 255
    6308:	fc 01       	movw	r30, r24
    630a:	60 81       	ld	r22, Z
    630c:	71 81       	ldd	r23, Z+1	; 0x01
    630e:	82 81       	ldd	r24, Z+2	; 0x02
    6310:	93 81       	ldd	r25, Z+3	; 0x03
    6312:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    6316:	dc 01       	movw	r26, r24
    6318:	cb 01       	movw	r24, r22
    631a:	f8 01       	movw	r30, r16
    631c:	91 83       	std	Z+1, r25	; 0x01
    631e:	80 83       	st	Z, r24
    6320:	ce 01       	movw	r24, r28
    6322:	8e 55       	subi	r24, 0x5E	; 94
    6324:	9f 4f       	sbci	r25, 0xFF	; 255
    6326:	9e 01       	movw	r18, r28
    6328:	22 56       	subi	r18, 0x62	; 98
    632a:	3f 4f       	sbci	r19, 0xFF	; 255
    632c:	f9 01       	movw	r30, r18
    632e:	20 81       	ld	r18, Z
    6330:	31 81       	ldd	r19, Z+1	; 0x01
    6332:	fc 01       	movw	r30, r24
    6334:	31 83       	std	Z+1, r19	; 0x01
    6336:	20 83       	st	Z, r18
    6338:	ce 01       	movw	r24, r28
    633a:	8e 55       	subi	r24, 0x5E	; 94
    633c:	9f 4f       	sbci	r25, 0xFF	; 255
    633e:	fc 01       	movw	r30, r24
    6340:	80 81       	ld	r24, Z
    6342:	91 81       	ldd	r25, Z+1	; 0x01
    6344:	01 97       	sbiw	r24, 0x01	; 1
    6346:	f1 f7       	brne	.-4      	; 0x6344 <LCDByte+0xed0>
    6348:	9e 01       	movw	r18, r28
    634a:	2e 55       	subi	r18, 0x5E	; 94
    634c:	3f 4f       	sbci	r19, 0xFF	; 255
    634e:	f9 01       	movw	r30, r18
    6350:	91 83       	std	Z+1, r25	; 0x01
    6352:	80 83       	st	Z, r24
    6354:	4e c0       	rjmp	.+156    	; 0x63f2 <LCDByte+0xf7e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    6356:	ce 01       	movw	r24, r28
    6358:	83 57       	subi	r24, 0x73	; 115
    635a:	9f 4f       	sbci	r25, 0xFF	; 255
    635c:	20 e0       	ldi	r18, 0x00	; 0
    635e:	30 e0       	ldi	r19, 0x00	; 0
    6360:	4f e7       	ldi	r20, 0x7F	; 127
    6362:	53 e4       	ldi	r21, 0x43	; 67
    6364:	fc 01       	movw	r30, r24
    6366:	60 81       	ld	r22, Z
    6368:	71 81       	ldd	r23, Z+1	; 0x01
    636a:	82 81       	ldd	r24, Z+2	; 0x02
    636c:	93 81       	ldd	r25, Z+3	; 0x03
    636e:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    6372:	18 16       	cp	r1, r24
    6374:	6c f5       	brge	.+90     	; 0x63d0 <LCDByte+0xf5c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    6376:	8e 01       	movw	r16, r28
    6378:	0c 55       	subi	r16, 0x5C	; 92
    637a:	1f 4f       	sbci	r17, 0xFF	; 255
    637c:	ce 01       	movw	r24, r28
    637e:	8f 56       	subi	r24, 0x6F	; 111
    6380:	9f 4f       	sbci	r25, 0xFF	; 255
    6382:	fc 01       	movw	r30, r24
    6384:	60 81       	ld	r22, Z
    6386:	71 81       	ldd	r23, Z+1	; 0x01
    6388:	82 81       	ldd	r24, Z+2	; 0x02
    638a:	93 81       	ldd	r25, Z+3	; 0x03
    638c:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    6390:	dc 01       	movw	r26, r24
    6392:	cb 01       	movw	r24, r22
    6394:	f8 01       	movw	r30, r16
    6396:	91 83       	std	Z+1, r25	; 0x01
    6398:	80 83       	st	Z, r24
    639a:	ce 01       	movw	r24, r28
    639c:	8a 55       	subi	r24, 0x5A	; 90
    639e:	9f 4f       	sbci	r25, 0xFF	; 255
    63a0:	9e 01       	movw	r18, r28
    63a2:	2c 55       	subi	r18, 0x5C	; 92
    63a4:	3f 4f       	sbci	r19, 0xFF	; 255
    63a6:	f9 01       	movw	r30, r18
    63a8:	20 81       	ld	r18, Z
    63aa:	31 81       	ldd	r19, Z+1	; 0x01
    63ac:	fc 01       	movw	r30, r24
    63ae:	31 83       	std	Z+1, r19	; 0x01
    63b0:	20 83       	st	Z, r18
    63b2:	ce 01       	movw	r24, r28
    63b4:	8a 55       	subi	r24, 0x5A	; 90
    63b6:	9f 4f       	sbci	r25, 0xFF	; 255
    63b8:	fc 01       	movw	r30, r24
    63ba:	80 81       	ld	r24, Z
    63bc:	91 81       	ldd	r25, Z+1	; 0x01
    63be:	01 97       	sbiw	r24, 0x01	; 1
    63c0:	f1 f7       	brne	.-4      	; 0x63be <LCDByte+0xf4a>
    63c2:	9e 01       	movw	r18, r28
    63c4:	2a 55       	subi	r18, 0x5A	; 90
    63c6:	3f 4f       	sbci	r19, 0xFF	; 255
    63c8:	f9 01       	movw	r30, r18
    63ca:	91 83       	std	Z+1, r25	; 0x01
    63cc:	80 83       	st	Z, r24
    63ce:	28 c0       	rjmp	.+80     	; 0x6420 <LCDByte+0xfac>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    63d0:	8e 01       	movw	r16, r28
    63d2:	0b 56       	subi	r16, 0x6B	; 107
    63d4:	1f 4f       	sbci	r17, 0xFF	; 255
    63d6:	ce 01       	movw	r24, r28
    63d8:	83 57       	subi	r24, 0x73	; 115
    63da:	9f 4f       	sbci	r25, 0xFF	; 255
    63dc:	fc 01       	movw	r30, r24
    63de:	60 81       	ld	r22, Z
    63e0:	71 81       	ldd	r23, Z+1	; 0x01
    63e2:	82 81       	ldd	r24, Z+2	; 0x02
    63e4:	93 81       	ldd	r25, Z+3	; 0x03
    63e6:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    63ea:	dc 01       	movw	r26, r24
    63ec:	cb 01       	movw	r24, r22
    63ee:	f8 01       	movw	r30, r16
    63f0:	80 83       	st	Z, r24
    63f2:	ce 01       	movw	r24, r28
    63f4:	88 55       	subi	r24, 0x58	; 88
    63f6:	9f 4f       	sbci	r25, 0xFF	; 255
    63f8:	9e 01       	movw	r18, r28
    63fa:	2b 56       	subi	r18, 0x6B	; 107
    63fc:	3f 4f       	sbci	r19, 0xFF	; 255
    63fe:	f9 01       	movw	r30, r18
    6400:	20 81       	ld	r18, Z
    6402:	fc 01       	movw	r30, r24
    6404:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6406:	ce 01       	movw	r24, r28
    6408:	88 55       	subi	r24, 0x58	; 88
    640a:	9f 4f       	sbci	r25, 0xFF	; 255
    640c:	fc 01       	movw	r30, r24
    640e:	80 81       	ld	r24, Z
    6410:	28 2f       	mov	r18, r24
    6412:	2a 95       	dec	r18
    6414:	f1 f7       	brne	.-4      	; 0x6412 <LCDByte+0xf9e>
    6416:	ce 01       	movw	r24, r28
    6418:	88 55       	subi	r24, 0x58	; 88
    641a:	9f 4f       	sbci	r25, 0xFF	; 255
    641c:	fc 01       	movw	r30, r24
    641e:	20 83       	st	Z, r18

	_delay_us(1);			//tEL

	LCDBusyLoop();
    6420:	0e 94 1e 32 	call	0x643c	; 0x643c <LCDBusyLoop>
}
    6424:	c6 55       	subi	r28, 0x56	; 86
    6426:	df 4f       	sbci	r29, 0xFF	; 255
    6428:	0f b6       	in	r0, 0x3f	; 63
    642a:	f8 94       	cli
    642c:	de bf       	out	0x3e, r29	; 62
    642e:	0f be       	out	0x3f, r0	; 63
    6430:	cd bf       	out	0x3d, r28	; 61
    6432:	df 91       	pop	r29
    6434:	cf 91       	pop	r28
    6436:	1f 91       	pop	r17
    6438:	0f 91       	pop	r16
    643a:	08 95       	ret

0000643c <LCDBusyLoop>:

/***********************************************************
 * Espera que el LCD este libre
 ***********************************************************/
void LCDBusyLoop(){
    643c:	0f 93       	push	r16
    643e:	1f 93       	push	r17
    6440:	cf 93       	push	r28
    6442:	df 93       	push	r29
    6444:	cd b7       	in	r28, 0x3d	; 61
    6446:	de b7       	in	r29, 0x3e	; 62
    6448:	ce 5e       	subi	r28, 0xEE	; 238
    644a:	d1 09       	sbc	r29, r1
    644c:	0f b6       	in	r0, 0x3f	; 63
    644e:	f8 94       	cli
    6450:	de bf       	out	0x3e, r29	; 62
    6452:	0f be       	out	0x3f, r0	; 63
    6454:	cd bf       	out	0x3d, r28	; 61
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;
    6456:	19 82       	std	Y+1, r1	; 0x01

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
    6458:	84 e3       	ldi	r24, 0x34	; 52
    645a:	90 e0       	ldi	r25, 0x00	; 0
    645c:	24 e3       	ldi	r18, 0x34	; 52
    645e:	30 e0       	ldi	r19, 0x00	; 0
    6460:	f9 01       	movw	r30, r18
    6462:	20 81       	ld	r18, Z
    6464:	20 7f       	andi	r18, 0xF0	; 240
    6466:	fc 01       	movw	r30, r24
    6468:	20 83       	st	Z, r18

	//change LCD mode
	SET_RW();		//Read mode
    646a:	82 e3       	ldi	r24, 0x32	; 50
    646c:	90 e0       	ldi	r25, 0x00	; 0
    646e:	22 e3       	ldi	r18, 0x32	; 50
    6470:	30 e0       	ldi	r19, 0x00	; 0
    6472:	f9 01       	movw	r30, r18
    6474:	20 81       	ld	r18, Z
    6476:	20 68       	ori	r18, 0x80	; 128
    6478:	fc 01       	movw	r30, r24
    647a:	20 83       	st	Z, r18
	CLEAR_RS();		//Read status
    647c:	82 e3       	ldi	r24, 0x32	; 50
    647e:	90 e0       	ldi	r25, 0x00	; 0
    6480:	22 e3       	ldi	r18, 0x32	; 50
    6482:	30 e0       	ldi	r19, 0x00	; 0
    6484:	f9 01       	movw	r30, r18
    6486:	20 81       	ld	r18, Z
    6488:	2f 7b       	andi	r18, 0xBF	; 191
    648a:	fc 01       	movw	r30, r24
    648c:	20 83       	st	Z, r18
    648e:	80 e0       	ldi	r24, 0x00	; 0
    6490:	90 e0       	ldi	r25, 0x00	; 0
    6492:	a0 e0       	ldi	r26, 0x00	; 0
    6494:	bf e3       	ldi	r27, 0x3F	; 63
    6496:	89 87       	std	Y+9, r24	; 0x09
    6498:	9a 87       	std	Y+10, r25	; 0x0a
    649a:	ab 87       	std	Y+11, r26	; 0x0b
    649c:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    649e:	2b ea       	ldi	r18, 0xAB	; 171
    64a0:	3a ea       	ldi	r19, 0xAA	; 170
    64a2:	4a e2       	ldi	r20, 0x2A	; 42
    64a4:	50 e4       	ldi	r21, 0x40	; 64
    64a6:	69 85       	ldd	r22, Y+9	; 0x09
    64a8:	7a 85       	ldd	r23, Y+10	; 0x0a
    64aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    64ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    64ae:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    64b2:	dc 01       	movw	r26, r24
    64b4:	cb 01       	movw	r24, r22
    64b6:	8d 87       	std	Y+13, r24	; 0x0d
    64b8:	9e 87       	std	Y+14, r25	; 0x0e
    64ba:	af 87       	std	Y+15, r26	; 0x0f
    64bc:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
    64be:	89 85       	ldd	r24, Y+9	; 0x09
    64c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    64c2:	ab 85       	ldd	r26, Y+11	; 0x0b
    64c4:	bc 85       	ldd	r27, Y+12	; 0x0c
    64c6:	9c 01       	movw	r18, r24
    64c8:	ad 01       	movw	r20, r26
    64ca:	bc 01       	movw	r22, r24
    64cc:	cd 01       	movw	r24, r26
    64ce:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    64d2:	dc 01       	movw	r26, r24
    64d4:	cb 01       	movw	r24, r22
    64d6:	89 8b       	std	Y+17, r24	; 0x11
    64d8:	9a 8b       	std	Y+18, r25	; 0x12
    64da:	ab 8b       	std	Y+19, r26	; 0x13
    64dc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    64de:	20 e0       	ldi	r18, 0x00	; 0
    64e0:	30 e0       	ldi	r19, 0x00	; 0
    64e2:	40 e8       	ldi	r20, 0x80	; 128
    64e4:	5f e3       	ldi	r21, 0x3F	; 63
    64e6:	6d 85       	ldd	r22, Y+13	; 0x0d
    64e8:	7e 85       	ldd	r23, Y+14	; 0x0e
    64ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    64ec:	98 89       	ldd	r25, Y+16	; 0x10
    64ee:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    64f2:	88 23       	and	r24, r24
    64f4:	1c f4       	brge	.+6      	; 0x64fc <LCDBusyLoop+0xc0>
		__ticks = 1;
    64f6:	81 e0       	ldi	r24, 0x01	; 1
    64f8:	8d 8b       	std	Y+21, r24	; 0x15
    64fa:	b2 c0       	rjmp	.+356    	; 0x6660 <LCDBusyLoop+0x224>
	else if (__tmp2 > 65535)
    64fc:	20 e0       	ldi	r18, 0x00	; 0
    64fe:	3f ef       	ldi	r19, 0xFF	; 255
    6500:	4f e7       	ldi	r20, 0x7F	; 127
    6502:	57 e4       	ldi	r21, 0x47	; 71
    6504:	69 89       	ldd	r22, Y+17	; 0x11
    6506:	7a 89       	ldd	r23, Y+18	; 0x12
    6508:	8b 89       	ldd	r24, Y+19	; 0x13
    650a:	9c 89       	ldd	r25, Y+20	; 0x14
    650c:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    6510:	18 16       	cp	r1, r24
    6512:	0c f0       	brlt	.+2      	; 0x6516 <LCDBusyLoop+0xda>
    6514:	7b c0       	rjmp	.+246    	; 0x660c <LCDBusyLoop+0x1d0>
	{
		_delay_ms(__us / 1000.0);
    6516:	20 e0       	ldi	r18, 0x00	; 0
    6518:	30 e0       	ldi	r19, 0x00	; 0
    651a:	4a e7       	ldi	r20, 0x7A	; 122
    651c:	54 e4       	ldi	r21, 0x44	; 68
    651e:	69 85       	ldd	r22, Y+9	; 0x09
    6520:	7a 85       	ldd	r23, Y+10	; 0x0a
    6522:	8b 85       	ldd	r24, Y+11	; 0x0b
    6524:	9c 85       	ldd	r25, Y+12	; 0x0c
    6526:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    652a:	dc 01       	movw	r26, r24
    652c:	cb 01       	movw	r24, r22
    652e:	8e 8b       	std	Y+22, r24	; 0x16
    6530:	9f 8b       	std	Y+23, r25	; 0x17
    6532:	a8 8f       	std	Y+24, r26	; 0x18
    6534:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6536:	20 e0       	ldi	r18, 0x00	; 0
    6538:	30 e0       	ldi	r19, 0x00	; 0
    653a:	4a ef       	ldi	r20, 0xFA	; 250
    653c:	54 e4       	ldi	r21, 0x44	; 68
    653e:	6e 89       	ldd	r22, Y+22	; 0x16
    6540:	7f 89       	ldd	r23, Y+23	; 0x17
    6542:	88 8d       	ldd	r24, Y+24	; 0x18
    6544:	99 8d       	ldd	r25, Y+25	; 0x19
    6546:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    654a:	dc 01       	movw	r26, r24
    654c:	cb 01       	movw	r24, r22
    654e:	8a 8f       	std	Y+26, r24	; 0x1a
    6550:	9b 8f       	std	Y+27, r25	; 0x1b
    6552:	ac 8f       	std	Y+28, r26	; 0x1c
    6554:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
    6556:	20 e0       	ldi	r18, 0x00	; 0
    6558:	30 e0       	ldi	r19, 0x00	; 0
    655a:	40 e8       	ldi	r20, 0x80	; 128
    655c:	5f e3       	ldi	r21, 0x3F	; 63
    655e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    6560:	7b 8d       	ldd	r23, Y+27	; 0x1b
    6562:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6564:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6566:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    656a:	88 23       	and	r24, r24
    656c:	2c f4       	brge	.+10     	; 0x6578 <LCDBusyLoop+0x13c>
		__ticks = 1;
    656e:	81 e0       	ldi	r24, 0x01	; 1
    6570:	90 e0       	ldi	r25, 0x00	; 0
    6572:	9f 8f       	std	Y+31, r25	; 0x1f
    6574:	8e 8f       	std	Y+30, r24	; 0x1e
    6576:	3f c0       	rjmp	.+126    	; 0x65f6 <LCDBusyLoop+0x1ba>
	else if (__tmp > 65535)
    6578:	20 e0       	ldi	r18, 0x00	; 0
    657a:	3f ef       	ldi	r19, 0xFF	; 255
    657c:	4f e7       	ldi	r20, 0x7F	; 127
    657e:	57 e4       	ldi	r21, 0x47	; 71
    6580:	6a 8d       	ldd	r22, Y+26	; 0x1a
    6582:	7b 8d       	ldd	r23, Y+27	; 0x1b
    6584:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6586:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6588:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    658c:	18 16       	cp	r1, r24
    658e:	4c f5       	brge	.+82     	; 0x65e2 <LCDBusyLoop+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6590:	20 e0       	ldi	r18, 0x00	; 0
    6592:	30 e0       	ldi	r19, 0x00	; 0
    6594:	40 e2       	ldi	r20, 0x20	; 32
    6596:	51 e4       	ldi	r21, 0x41	; 65
    6598:	6e 89       	ldd	r22, Y+22	; 0x16
    659a:	7f 89       	ldd	r23, Y+23	; 0x17
    659c:	88 8d       	ldd	r24, Y+24	; 0x18
    659e:	99 8d       	ldd	r25, Y+25	; 0x19
    65a0:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    65a4:	dc 01       	movw	r26, r24
    65a6:	cb 01       	movw	r24, r22
    65a8:	bc 01       	movw	r22, r24
    65aa:	cd 01       	movw	r24, r26
    65ac:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    65b0:	dc 01       	movw	r26, r24
    65b2:	cb 01       	movw	r24, r22
    65b4:	9f 8f       	std	Y+31, r25	; 0x1f
    65b6:	8e 8f       	std	Y+30, r24	; 0x1e
    65b8:	0f c0       	rjmp	.+30     	; 0x65d8 <LCDBusyLoop+0x19c>
    65ba:	88 ec       	ldi	r24, 0xC8	; 200
    65bc:	90 e0       	ldi	r25, 0x00	; 0
    65be:	99 a3       	std	Y+33, r25	; 0x21
    65c0:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    65c2:	88 a1       	ldd	r24, Y+32	; 0x20
    65c4:	99 a1       	ldd	r25, Y+33	; 0x21
    65c6:	01 97       	sbiw	r24, 0x01	; 1
    65c8:	f1 f7       	brne	.-4      	; 0x65c6 <LCDBusyLoop+0x18a>
    65ca:	99 a3       	std	Y+33, r25	; 0x21
    65cc:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    65d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    65d2:	01 97       	sbiw	r24, 0x01	; 1
    65d4:	9f 8f       	std	Y+31, r25	; 0x1f
    65d6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    65da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    65dc:	89 2b       	or	r24, r25
    65de:	69 f7       	brne	.-38     	; 0x65ba <LCDBusyLoop+0x17e>
    65e0:	3f c0       	rjmp	.+126    	; 0x6660 <LCDBusyLoop+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65e2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    65e4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    65e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    65e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    65ea:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    65ee:	dc 01       	movw	r26, r24
    65f0:	cb 01       	movw	r24, r22
    65f2:	9f 8f       	std	Y+31, r25	; 0x1f
    65f4:	8e 8f       	std	Y+30, r24	; 0x1e
    65f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    65f8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    65fa:	9b a3       	std	Y+35, r25	; 0x23
    65fc:	8a a3       	std	Y+34, r24	; 0x22
    65fe:	8a a1       	ldd	r24, Y+34	; 0x22
    6600:	9b a1       	ldd	r25, Y+35	; 0x23
    6602:	01 97       	sbiw	r24, 0x01	; 1
    6604:	f1 f7       	brne	.-4      	; 0x6602 <LCDBusyLoop+0x1c6>
    6606:	9b a3       	std	Y+35, r25	; 0x23
    6608:	8a a3       	std	Y+34, r24	; 0x22
    660a:	2a c0       	rjmp	.+84     	; 0x6660 <LCDBusyLoop+0x224>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    660c:	20 e0       	ldi	r18, 0x00	; 0
    660e:	30 e0       	ldi	r19, 0x00	; 0
    6610:	4f e7       	ldi	r20, 0x7F	; 127
    6612:	53 e4       	ldi	r21, 0x43	; 67
    6614:	6d 85       	ldd	r22, Y+13	; 0x0d
    6616:	7e 85       	ldd	r23, Y+14	; 0x0e
    6618:	8f 85       	ldd	r24, Y+15	; 0x0f
    661a:	98 89       	ldd	r25, Y+16	; 0x10
    661c:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    6620:	18 16       	cp	r1, r24
    6622:	ac f4       	brge	.+42     	; 0x664e <LCDBusyLoop+0x212>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    6624:	69 89       	ldd	r22, Y+17	; 0x11
    6626:	7a 89       	ldd	r23, Y+18	; 0x12
    6628:	8b 89       	ldd	r24, Y+19	; 0x13
    662a:	9c 89       	ldd	r25, Y+20	; 0x14
    662c:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    6630:	dc 01       	movw	r26, r24
    6632:	cb 01       	movw	r24, r22
    6634:	9d a3       	std	Y+37, r25	; 0x25
    6636:	8c a3       	std	Y+36, r24	; 0x24
    6638:	8c a1       	ldd	r24, Y+36	; 0x24
    663a:	9d a1       	ldd	r25, Y+37	; 0x25
    663c:	9f a3       	std	Y+39, r25	; 0x27
    663e:	8e a3       	std	Y+38, r24	; 0x26
    6640:	8e a1       	ldd	r24, Y+38	; 0x26
    6642:	9f a1       	ldd	r25, Y+39	; 0x27
    6644:	01 97       	sbiw	r24, 0x01	; 1
    6646:	f1 f7       	brne	.-4      	; 0x6644 <LCDBusyLoop+0x208>
    6648:	9f a3       	std	Y+39, r25	; 0x27
    664a:	8e a3       	std	Y+38, r24	; 0x26
    664c:	0f c0       	rjmp	.+30     	; 0x666c <LCDBusyLoop+0x230>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    664e:	6d 85       	ldd	r22, Y+13	; 0x0d
    6650:	7e 85       	ldd	r23, Y+14	; 0x0e
    6652:	8f 85       	ldd	r24, Y+15	; 0x0f
    6654:	98 89       	ldd	r25, Y+16	; 0x10
    6656:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    665a:	dc 01       	movw	r26, r24
    665c:	cb 01       	movw	r24, r22
    665e:	8d 8b       	std	Y+21, r24	; 0x15
    6660:	8d 89       	ldd	r24, Y+21	; 0x15
    6662:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6664:	88 a5       	ldd	r24, Y+40	; 0x28
    6666:	8a 95       	dec	r24
    6668:	f1 f7       	brne	.-4      	; 0x6666 <LCDBusyLoop+0x22a>
    666a:	88 a7       	std	Y+40, r24	; 0x28
	_delay_us(0.5);		//tAS

	
	do{

		SET_E();
    666c:	85 e6       	ldi	r24, 0x65	; 101
    666e:	90 e0       	ldi	r25, 0x00	; 0
    6670:	25 e6       	ldi	r18, 0x65	; 101
    6672:	30 e0       	ldi	r19, 0x00	; 0
    6674:	f9 01       	movw	r30, r18
    6676:	20 81       	ld	r18, Z
    6678:	20 61       	ori	r18, 0x10	; 16
    667a:	fc 01       	movw	r30, r24
    667c:	20 83       	st	Z, r18
    667e:	80 e0       	ldi	r24, 0x00	; 0
    6680:	90 e0       	ldi	r25, 0x00	; 0
    6682:	a0 e0       	ldi	r26, 0x00	; 0
    6684:	bf e3       	ldi	r27, 0x3F	; 63
    6686:	89 a7       	std	Y+41, r24	; 0x29
    6688:	9a a7       	std	Y+42, r25	; 0x2a
    668a:	ab a7       	std	Y+43, r26	; 0x2b
    668c:	bc a7       	std	Y+44, r27	; 0x2c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    668e:	2b ea       	ldi	r18, 0xAB	; 171
    6690:	3a ea       	ldi	r19, 0xAA	; 170
    6692:	4a e2       	ldi	r20, 0x2A	; 42
    6694:	50 e4       	ldi	r21, 0x40	; 64
    6696:	69 a5       	ldd	r22, Y+41	; 0x29
    6698:	7a a5       	ldd	r23, Y+42	; 0x2a
    669a:	8b a5       	ldd	r24, Y+43	; 0x2b
    669c:	9c a5       	ldd	r25, Y+44	; 0x2c
    669e:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    66a2:	dc 01       	movw	r26, r24
    66a4:	cb 01       	movw	r24, r22
    66a6:	8d a7       	std	Y+45, r24	; 0x2d
    66a8:	9e a7       	std	Y+46, r25	; 0x2e
    66aa:	af a7       	std	Y+47, r26	; 0x2f
    66ac:	b8 ab       	std	Y+48, r27	; 0x30
	__tmp2 = ((F_CPU) / 4e6) * __us;
    66ae:	89 a5       	ldd	r24, Y+41	; 0x29
    66b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    66b2:	ab a5       	ldd	r26, Y+43	; 0x2b
    66b4:	bc a5       	ldd	r27, Y+44	; 0x2c
    66b6:	9c 01       	movw	r18, r24
    66b8:	ad 01       	movw	r20, r26
    66ba:	bc 01       	movw	r22, r24
    66bc:	cd 01       	movw	r24, r26
    66be:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    66c2:	dc 01       	movw	r26, r24
    66c4:	cb 01       	movw	r24, r22
    66c6:	89 ab       	std	Y+49, r24	; 0x31
    66c8:	9a ab       	std	Y+50, r25	; 0x32
    66ca:	ab ab       	std	Y+51, r26	; 0x33
    66cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    66ce:	20 e0       	ldi	r18, 0x00	; 0
    66d0:	30 e0       	ldi	r19, 0x00	; 0
    66d2:	40 e8       	ldi	r20, 0x80	; 128
    66d4:	5f e3       	ldi	r21, 0x3F	; 63
    66d6:	6d a5       	ldd	r22, Y+45	; 0x2d
    66d8:	7e a5       	ldd	r23, Y+46	; 0x2e
    66da:	8f a5       	ldd	r24, Y+47	; 0x2f
    66dc:	98 a9       	ldd	r25, Y+48	; 0x30
    66de:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    66e2:	88 23       	and	r24, r24
    66e4:	1c f4       	brge	.+6      	; 0x66ec <LCDBusyLoop+0x2b0>
		__ticks = 1;
    66e6:	81 e0       	ldi	r24, 0x01	; 1
    66e8:	8d ab       	std	Y+53, r24	; 0x35
    66ea:	ea c0       	rjmp	.+468    	; 0x68c0 <LCDBusyLoop+0x484>
	else if (__tmp2 > 65535)
    66ec:	20 e0       	ldi	r18, 0x00	; 0
    66ee:	3f ef       	ldi	r19, 0xFF	; 255
    66f0:	4f e7       	ldi	r20, 0x7F	; 127
    66f2:	57 e4       	ldi	r21, 0x47	; 71
    66f4:	69 a9       	ldd	r22, Y+49	; 0x31
    66f6:	7a a9       	ldd	r23, Y+50	; 0x32
    66f8:	8b a9       	ldd	r24, Y+51	; 0x33
    66fa:	9c a9       	ldd	r25, Y+52	; 0x34
    66fc:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    6700:	18 16       	cp	r1, r24
    6702:	0c f0       	brlt	.+2      	; 0x6706 <LCDBusyLoop+0x2ca>
    6704:	9f c0       	rjmp	.+318    	; 0x6844 <LCDBusyLoop+0x408>
	{
		_delay_ms(__us / 1000.0);
    6706:	20 e0       	ldi	r18, 0x00	; 0
    6708:	30 e0       	ldi	r19, 0x00	; 0
    670a:	4a e7       	ldi	r20, 0x7A	; 122
    670c:	54 e4       	ldi	r21, 0x44	; 68
    670e:	69 a5       	ldd	r22, Y+41	; 0x29
    6710:	7a a5       	ldd	r23, Y+42	; 0x2a
    6712:	8b a5       	ldd	r24, Y+43	; 0x2b
    6714:	9c a5       	ldd	r25, Y+44	; 0x2c
    6716:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    671a:	dc 01       	movw	r26, r24
    671c:	cb 01       	movw	r24, r22
    671e:	8e ab       	std	Y+54, r24	; 0x36
    6720:	9f ab       	std	Y+55, r25	; 0x37
    6722:	a8 af       	std	Y+56, r26	; 0x38
    6724:	b9 af       	std	Y+57, r27	; 0x39

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6726:	20 e0       	ldi	r18, 0x00	; 0
    6728:	30 e0       	ldi	r19, 0x00	; 0
    672a:	4a ef       	ldi	r20, 0xFA	; 250
    672c:	54 e4       	ldi	r21, 0x44	; 68
    672e:	6e a9       	ldd	r22, Y+54	; 0x36
    6730:	7f a9       	ldd	r23, Y+55	; 0x37
    6732:	88 ad       	ldd	r24, Y+56	; 0x38
    6734:	99 ad       	ldd	r25, Y+57	; 0x39
    6736:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    673a:	dc 01       	movw	r26, r24
    673c:	cb 01       	movw	r24, r22
    673e:	8a af       	std	Y+58, r24	; 0x3a
    6740:	9b af       	std	Y+59, r25	; 0x3b
    6742:	ac af       	std	Y+60, r26	; 0x3c
    6744:	bd af       	std	Y+61, r27	; 0x3d
	if (__tmp < 1.0)
    6746:	20 e0       	ldi	r18, 0x00	; 0
    6748:	30 e0       	ldi	r19, 0x00	; 0
    674a:	40 e8       	ldi	r20, 0x80	; 128
    674c:	5f e3       	ldi	r21, 0x3F	; 63
    674e:	6a ad       	ldd	r22, Y+58	; 0x3a
    6750:	7b ad       	ldd	r23, Y+59	; 0x3b
    6752:	8c ad       	ldd	r24, Y+60	; 0x3c
    6754:	9d ad       	ldd	r25, Y+61	; 0x3d
    6756:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    675a:	88 23       	and	r24, r24
    675c:	2c f4       	brge	.+10     	; 0x6768 <LCDBusyLoop+0x32c>
		__ticks = 1;
    675e:	81 e0       	ldi	r24, 0x01	; 1
    6760:	90 e0       	ldi	r25, 0x00	; 0
    6762:	9f af       	std	Y+63, r25	; 0x3f
    6764:	8e af       	std	Y+62, r24	; 0x3e
    6766:	51 c0       	rjmp	.+162    	; 0x680a <LCDBusyLoop+0x3ce>
	else if (__tmp > 65535)
    6768:	20 e0       	ldi	r18, 0x00	; 0
    676a:	3f ef       	ldi	r19, 0xFF	; 255
    676c:	4f e7       	ldi	r20, 0x7F	; 127
    676e:	57 e4       	ldi	r21, 0x47	; 71
    6770:	6a ad       	ldd	r22, Y+58	; 0x3a
    6772:	7b ad       	ldd	r23, Y+59	; 0x3b
    6774:	8c ad       	ldd	r24, Y+60	; 0x3c
    6776:	9d ad       	ldd	r25, Y+61	; 0x3d
    6778:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    677c:	18 16       	cp	r1, r24
    677e:	dc f5       	brge	.+118    	; 0x67f6 <LCDBusyLoop+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6780:	20 e0       	ldi	r18, 0x00	; 0
    6782:	30 e0       	ldi	r19, 0x00	; 0
    6784:	40 e2       	ldi	r20, 0x20	; 32
    6786:	51 e4       	ldi	r21, 0x41	; 65
    6788:	6e a9       	ldd	r22, Y+54	; 0x36
    678a:	7f a9       	ldd	r23, Y+55	; 0x37
    678c:	88 ad       	ldd	r24, Y+56	; 0x38
    678e:	99 ad       	ldd	r25, Y+57	; 0x39
    6790:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    6794:	dc 01       	movw	r26, r24
    6796:	cb 01       	movw	r24, r22
    6798:	bc 01       	movw	r22, r24
    679a:	cd 01       	movw	r24, r26
    679c:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    67a0:	dc 01       	movw	r26, r24
    67a2:	cb 01       	movw	r24, r22
    67a4:	9f af       	std	Y+63, r25	; 0x3f
    67a6:	8e af       	std	Y+62, r24	; 0x3e
    67a8:	1b c0       	rjmp	.+54     	; 0x67e0 <LCDBusyLoop+0x3a4>
    67aa:	ce 01       	movw	r24, r28
    67ac:	80 5c       	subi	r24, 0xC0	; 192
    67ae:	9f 4f       	sbci	r25, 0xFF	; 255
    67b0:	28 ec       	ldi	r18, 0xC8	; 200
    67b2:	30 e0       	ldi	r19, 0x00	; 0
    67b4:	fc 01       	movw	r30, r24
    67b6:	31 83       	std	Z+1, r19	; 0x01
    67b8:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    67ba:	ce 01       	movw	r24, r28
    67bc:	80 5c       	subi	r24, 0xC0	; 192
    67be:	9f 4f       	sbci	r25, 0xFF	; 255
    67c0:	fc 01       	movw	r30, r24
    67c2:	80 81       	ld	r24, Z
    67c4:	91 81       	ldd	r25, Z+1	; 0x01
    67c6:	01 97       	sbiw	r24, 0x01	; 1
    67c8:	f1 f7       	brne	.-4      	; 0x67c6 <LCDBusyLoop+0x38a>
    67ca:	9e 01       	movw	r18, r28
    67cc:	20 5c       	subi	r18, 0xC0	; 192
    67ce:	3f 4f       	sbci	r19, 0xFF	; 255
    67d0:	f9 01       	movw	r30, r18
    67d2:	91 83       	std	Z+1, r25	; 0x01
    67d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    67d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    67da:	01 97       	sbiw	r24, 0x01	; 1
    67dc:	9f af       	std	Y+63, r25	; 0x3f
    67de:	8e af       	std	Y+62, r24	; 0x3e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    67e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    67e4:	89 2b       	or	r24, r25
    67e6:	09 f7       	brne	.-62     	; 0x67aa <LCDBusyLoop+0x36e>
    67e8:	ce 01       	movw	r24, r28
    67ea:	87 5b       	subi	r24, 0xB7	; 183
    67ec:	9f 4f       	sbci	r25, 0xFF	; 255
    67ee:	fc 01       	movw	r30, r24
    67f0:	80 81       	ld	r24, Z
    67f2:	8d ab       	std	Y+53, r24	; 0x35
    67f4:	65 c0       	rjmp	.+202    	; 0x68c0 <LCDBusyLoop+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67f6:	6a ad       	ldd	r22, Y+58	; 0x3a
    67f8:	7b ad       	ldd	r23, Y+59	; 0x3b
    67fa:	8c ad       	ldd	r24, Y+60	; 0x3c
    67fc:	9d ad       	ldd	r25, Y+61	; 0x3d
    67fe:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    6802:	dc 01       	movw	r26, r24
    6804:	cb 01       	movw	r24, r22
    6806:	9f af       	std	Y+63, r25	; 0x3f
    6808:	8e af       	std	Y+62, r24	; 0x3e
    680a:	ce 01       	movw	r24, r28
    680c:	8e 5b       	subi	r24, 0xBE	; 190
    680e:	9f 4f       	sbci	r25, 0xFF	; 255
    6810:	2e ad       	ldd	r18, Y+62	; 0x3e
    6812:	3f ad       	ldd	r19, Y+63	; 0x3f
    6814:	fc 01       	movw	r30, r24
    6816:	31 83       	std	Z+1, r19	; 0x01
    6818:	20 83       	st	Z, r18
    681a:	ce 01       	movw	r24, r28
    681c:	8e 5b       	subi	r24, 0xBE	; 190
    681e:	9f 4f       	sbci	r25, 0xFF	; 255
    6820:	fc 01       	movw	r30, r24
    6822:	80 81       	ld	r24, Z
    6824:	91 81       	ldd	r25, Z+1	; 0x01
    6826:	01 97       	sbiw	r24, 0x01	; 1
    6828:	f1 f7       	brne	.-4      	; 0x6826 <LCDBusyLoop+0x3ea>
    682a:	9e 01       	movw	r18, r28
    682c:	2e 5b       	subi	r18, 0xBE	; 190
    682e:	3f 4f       	sbci	r19, 0xFF	; 255
    6830:	f9 01       	movw	r30, r18
    6832:	91 83       	std	Z+1, r25	; 0x01
    6834:	80 83       	st	Z, r24
    6836:	ce 01       	movw	r24, r28
    6838:	87 5b       	subi	r24, 0xB7	; 183
    683a:	9f 4f       	sbci	r25, 0xFF	; 255
    683c:	fc 01       	movw	r30, r24
    683e:	80 81       	ld	r24, Z
    6840:	8d ab       	std	Y+53, r24	; 0x35
    6842:	3e c0       	rjmp	.+124    	; 0x68c0 <LCDBusyLoop+0x484>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    6844:	20 e0       	ldi	r18, 0x00	; 0
    6846:	30 e0       	ldi	r19, 0x00	; 0
    6848:	4f e7       	ldi	r20, 0x7F	; 127
    684a:	53 e4       	ldi	r21, 0x43	; 67
    684c:	6d a5       	ldd	r22, Y+45	; 0x2d
    684e:	7e a5       	ldd	r23, Y+46	; 0x2e
    6850:	8f a5       	ldd	r24, Y+47	; 0x2f
    6852:	98 a9       	ldd	r25, Y+48	; 0x30
    6854:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    6858:	18 16       	cp	r1, r24
    685a:	4c f5       	brge	.+82     	; 0x68ae <LCDBusyLoop+0x472>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    685c:	8e 01       	movw	r16, r28
    685e:	0c 5b       	subi	r16, 0xBC	; 188
    6860:	1f 4f       	sbci	r17, 0xFF	; 255
    6862:	69 a9       	ldd	r22, Y+49	; 0x31
    6864:	7a a9       	ldd	r23, Y+50	; 0x32
    6866:	8b a9       	ldd	r24, Y+51	; 0x33
    6868:	9c a9       	ldd	r25, Y+52	; 0x34
    686a:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    686e:	dc 01       	movw	r26, r24
    6870:	cb 01       	movw	r24, r22
    6872:	f8 01       	movw	r30, r16
    6874:	91 83       	std	Z+1, r25	; 0x01
    6876:	80 83       	st	Z, r24
    6878:	ce 01       	movw	r24, r28
    687a:	8a 5b       	subi	r24, 0xBA	; 186
    687c:	9f 4f       	sbci	r25, 0xFF	; 255
    687e:	9e 01       	movw	r18, r28
    6880:	2c 5b       	subi	r18, 0xBC	; 188
    6882:	3f 4f       	sbci	r19, 0xFF	; 255
    6884:	f9 01       	movw	r30, r18
    6886:	20 81       	ld	r18, Z
    6888:	31 81       	ldd	r19, Z+1	; 0x01
    688a:	fc 01       	movw	r30, r24
    688c:	31 83       	std	Z+1, r19	; 0x01
    688e:	20 83       	st	Z, r18
    6890:	ce 01       	movw	r24, r28
    6892:	8a 5b       	subi	r24, 0xBA	; 186
    6894:	9f 4f       	sbci	r25, 0xFF	; 255
    6896:	fc 01       	movw	r30, r24
    6898:	80 81       	ld	r24, Z
    689a:	91 81       	ldd	r25, Z+1	; 0x01
    689c:	01 97       	sbiw	r24, 0x01	; 1
    689e:	f1 f7       	brne	.-4      	; 0x689c <LCDBusyLoop+0x460>
    68a0:	9e 01       	movw	r18, r28
    68a2:	2a 5b       	subi	r18, 0xBA	; 186
    68a4:	3f 4f       	sbci	r19, 0xFF	; 255
    68a6:	f9 01       	movw	r30, r18
    68a8:	91 83       	std	Z+1, r25	; 0x01
    68aa:	80 83       	st	Z, r24
    68ac:	1c c0       	rjmp	.+56     	; 0x68e6 <LCDBusyLoop+0x4aa>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    68ae:	6d a5       	ldd	r22, Y+45	; 0x2d
    68b0:	7e a5       	ldd	r23, Y+46	; 0x2e
    68b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    68b4:	98 a9       	ldd	r25, Y+48	; 0x30
    68b6:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    68ba:	dc 01       	movw	r26, r24
    68bc:	cb 01       	movw	r24, r22
    68be:	8d ab       	std	Y+53, r24	; 0x35
    68c0:	ce 01       	movw	r24, r28
    68c2:	88 5b       	subi	r24, 0xB8	; 184
    68c4:	9f 4f       	sbci	r25, 0xFF	; 255
    68c6:	2d a9       	ldd	r18, Y+53	; 0x35
    68c8:	fc 01       	movw	r30, r24
    68ca:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    68cc:	ce 01       	movw	r24, r28
    68ce:	88 5b       	subi	r24, 0xB8	; 184
    68d0:	9f 4f       	sbci	r25, 0xFF	; 255
    68d2:	fc 01       	movw	r30, r24
    68d4:	80 81       	ld	r24, Z
    68d6:	28 2f       	mov	r18, r24
    68d8:	2a 95       	dec	r18
    68da:	f1 f7       	brne	.-4      	; 0x68d8 <LCDBusyLoop+0x49c>
    68dc:	ce 01       	movw	r24, r28
    68de:	88 5b       	subi	r24, 0xB8	; 184
    68e0:	9f 4f       	sbci	r25, 0xFF	; 255
    68e2:	fc 01       	movw	r30, r24
    68e4:	20 83       	st	Z, r18

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
    68e6:	83 e3       	ldi	r24, 0x33	; 51
    68e8:	90 e0       	ldi	r25, 0x00	; 0
    68ea:	fc 01       	movw	r30, r24
    68ec:	80 81       	ld	r24, Z
    68ee:	89 83       	std	Y+1, r24	; 0x01
		status=status<<4;
    68f0:	89 81       	ldd	r24, Y+1	; 0x01
    68f2:	82 95       	swap	r24
    68f4:	80 7f       	andi	r24, 0xF0	; 240
    68f6:	89 83       	std	Y+1, r24	; 0x01
    68f8:	9e 01       	movw	r18, r28
    68fa:	26 5b       	subi	r18, 0xB6	; 182
    68fc:	3f 4f       	sbci	r19, 0xFF	; 255
    68fe:	80 e0       	ldi	r24, 0x00	; 0
    6900:	90 e0       	ldi	r25, 0x00	; 0
    6902:	a0 e0       	ldi	r26, 0x00	; 0
    6904:	bf e3       	ldi	r27, 0x3F	; 63
    6906:	f9 01       	movw	r30, r18
    6908:	80 83       	st	Z, r24
    690a:	91 83       	std	Z+1, r25	; 0x01
    690c:	a2 83       	std	Z+2, r26	; 0x02
    690e:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    6910:	8e 01       	movw	r16, r28
    6912:	02 5b       	subi	r16, 0xB2	; 178
    6914:	1f 4f       	sbci	r17, 0xFF	; 255
    6916:	ce 01       	movw	r24, r28
    6918:	86 5b       	subi	r24, 0xB6	; 182
    691a:	9f 4f       	sbci	r25, 0xFF	; 255
    691c:	2b ea       	ldi	r18, 0xAB	; 171
    691e:	3a ea       	ldi	r19, 0xAA	; 170
    6920:	4a e2       	ldi	r20, 0x2A	; 42
    6922:	50 e4       	ldi	r21, 0x40	; 64
    6924:	fc 01       	movw	r30, r24
    6926:	60 81       	ld	r22, Z
    6928:	71 81       	ldd	r23, Z+1	; 0x01
    692a:	82 81       	ldd	r24, Z+2	; 0x02
    692c:	93 81       	ldd	r25, Z+3	; 0x03
    692e:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    6932:	dc 01       	movw	r26, r24
    6934:	cb 01       	movw	r24, r22
    6936:	f8 01       	movw	r30, r16
    6938:	80 83       	st	Z, r24
    693a:	91 83       	std	Z+1, r25	; 0x01
    693c:	a2 83       	std	Z+2, r26	; 0x02
    693e:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    6940:	8e 01       	movw	r16, r28
    6942:	0e 5a       	subi	r16, 0xAE	; 174
    6944:	1f 4f       	sbci	r17, 0xFF	; 255
    6946:	ce 01       	movw	r24, r28
    6948:	86 5b       	subi	r24, 0xB6	; 182
    694a:	9f 4f       	sbci	r25, 0xFF	; 255
    694c:	fc 01       	movw	r30, r24
    694e:	80 81       	ld	r24, Z
    6950:	91 81       	ldd	r25, Z+1	; 0x01
    6952:	a2 81       	ldd	r26, Z+2	; 0x02
    6954:	b3 81       	ldd	r27, Z+3	; 0x03
    6956:	9c 01       	movw	r18, r24
    6958:	ad 01       	movw	r20, r26
    695a:	bc 01       	movw	r22, r24
    695c:	cd 01       	movw	r24, r26
    695e:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    6962:	dc 01       	movw	r26, r24
    6964:	cb 01       	movw	r24, r22
    6966:	f8 01       	movw	r30, r16
    6968:	80 83       	st	Z, r24
    696a:	91 83       	std	Z+1, r25	; 0x01
    696c:	a2 83       	std	Z+2, r26	; 0x02
    696e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6970:	ce 01       	movw	r24, r28
    6972:	82 5b       	subi	r24, 0xB2	; 178
    6974:	9f 4f       	sbci	r25, 0xFF	; 255
    6976:	20 e0       	ldi	r18, 0x00	; 0
    6978:	30 e0       	ldi	r19, 0x00	; 0
    697a:	40 e8       	ldi	r20, 0x80	; 128
    697c:	5f e3       	ldi	r21, 0x3F	; 63
    697e:	fc 01       	movw	r30, r24
    6980:	60 81       	ld	r22, Z
    6982:	71 81       	ldd	r23, Z+1	; 0x01
    6984:	82 81       	ldd	r24, Z+2	; 0x02
    6986:	93 81       	ldd	r25, Z+3	; 0x03
    6988:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    698c:	88 23       	and	r24, r24
    698e:	3c f4       	brge	.+14     	; 0x699e <LCDBusyLoop+0x562>
		__ticks = 1;
    6990:	ce 01       	movw	r24, r28
    6992:	8a 5a       	subi	r24, 0xAA	; 170
    6994:	9f 4f       	sbci	r25, 0xFF	; 255
    6996:	21 e0       	ldi	r18, 0x01	; 1
    6998:	fc 01       	movw	r30, r24
    699a:	20 83       	st	Z, r18
    699c:	44 c1       	rjmp	.+648    	; 0x6c26 <LCDBusyLoop+0x7ea>
	else if (__tmp2 > 65535)
    699e:	ce 01       	movw	r24, r28
    69a0:	8e 5a       	subi	r24, 0xAE	; 174
    69a2:	9f 4f       	sbci	r25, 0xFF	; 255
    69a4:	20 e0       	ldi	r18, 0x00	; 0
    69a6:	3f ef       	ldi	r19, 0xFF	; 255
    69a8:	4f e7       	ldi	r20, 0x7F	; 127
    69aa:	57 e4       	ldi	r21, 0x47	; 71
    69ac:	fc 01       	movw	r30, r24
    69ae:	60 81       	ld	r22, Z
    69b0:	71 81       	ldd	r23, Z+1	; 0x01
    69b2:	82 81       	ldd	r24, Z+2	; 0x02
    69b4:	93 81       	ldd	r25, Z+3	; 0x03
    69b6:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    69ba:	18 16       	cp	r1, r24
    69bc:	0c f0       	brlt	.+2      	; 0x69c0 <LCDBusyLoop+0x584>
    69be:	e5 c0       	rjmp	.+458    	; 0x6b8a <LCDBusyLoop+0x74e>
	{
		_delay_ms(__us / 1000.0);
    69c0:	ce 01       	movw	r24, r28
    69c2:	86 5b       	subi	r24, 0xB6	; 182
    69c4:	9f 4f       	sbci	r25, 0xFF	; 255
    69c6:	20 e0       	ldi	r18, 0x00	; 0
    69c8:	30 e0       	ldi	r19, 0x00	; 0
    69ca:	4a e7       	ldi	r20, 0x7A	; 122
    69cc:	54 e4       	ldi	r21, 0x44	; 68
    69ce:	fc 01       	movw	r30, r24
    69d0:	60 81       	ld	r22, Z
    69d2:	71 81       	ldd	r23, Z+1	; 0x01
    69d4:	82 81       	ldd	r24, Z+2	; 0x02
    69d6:	93 81       	ldd	r25, Z+3	; 0x03
    69d8:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    69dc:	dc 01       	movw	r26, r24
    69de:	cb 01       	movw	r24, r22
    69e0:	9e 01       	movw	r18, r28
    69e2:	29 5a       	subi	r18, 0xA9	; 169
    69e4:	3f 4f       	sbci	r19, 0xFF	; 255
    69e6:	f9 01       	movw	r30, r18
    69e8:	80 83       	st	Z, r24
    69ea:	91 83       	std	Z+1, r25	; 0x01
    69ec:	a2 83       	std	Z+2, r26	; 0x02
    69ee:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    69f0:	8e 01       	movw	r16, r28
    69f2:	05 5a       	subi	r16, 0xA5	; 165
    69f4:	1f 4f       	sbci	r17, 0xFF	; 255
    69f6:	ce 01       	movw	r24, r28
    69f8:	89 5a       	subi	r24, 0xA9	; 169
    69fa:	9f 4f       	sbci	r25, 0xFF	; 255
    69fc:	20 e0       	ldi	r18, 0x00	; 0
    69fe:	30 e0       	ldi	r19, 0x00	; 0
    6a00:	4a ef       	ldi	r20, 0xFA	; 250
    6a02:	54 e4       	ldi	r21, 0x44	; 68
    6a04:	fc 01       	movw	r30, r24
    6a06:	60 81       	ld	r22, Z
    6a08:	71 81       	ldd	r23, Z+1	; 0x01
    6a0a:	82 81       	ldd	r24, Z+2	; 0x02
    6a0c:	93 81       	ldd	r25, Z+3	; 0x03
    6a0e:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    6a12:	dc 01       	movw	r26, r24
    6a14:	cb 01       	movw	r24, r22
    6a16:	f8 01       	movw	r30, r16
    6a18:	80 83       	st	Z, r24
    6a1a:	91 83       	std	Z+1, r25	; 0x01
    6a1c:	a2 83       	std	Z+2, r26	; 0x02
    6a1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6a20:	ce 01       	movw	r24, r28
    6a22:	85 5a       	subi	r24, 0xA5	; 165
    6a24:	9f 4f       	sbci	r25, 0xFF	; 255
    6a26:	20 e0       	ldi	r18, 0x00	; 0
    6a28:	30 e0       	ldi	r19, 0x00	; 0
    6a2a:	40 e8       	ldi	r20, 0x80	; 128
    6a2c:	5f e3       	ldi	r21, 0x3F	; 63
    6a2e:	fc 01       	movw	r30, r24
    6a30:	60 81       	ld	r22, Z
    6a32:	71 81       	ldd	r23, Z+1	; 0x01
    6a34:	82 81       	ldd	r24, Z+2	; 0x02
    6a36:	93 81       	ldd	r25, Z+3	; 0x03
    6a38:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    6a3c:	88 23       	and	r24, r24
    6a3e:	4c f4       	brge	.+18     	; 0x6a52 <LCDBusyLoop+0x616>
		__ticks = 1;
    6a40:	ce 01       	movw	r24, r28
    6a42:	81 5a       	subi	r24, 0xA1	; 161
    6a44:	9f 4f       	sbci	r25, 0xFF	; 255
    6a46:	21 e0       	ldi	r18, 0x01	; 1
    6a48:	30 e0       	ldi	r19, 0x00	; 0
    6a4a:	fc 01       	movw	r30, r24
    6a4c:	31 83       	std	Z+1, r19	; 0x01
    6a4e:	20 83       	st	Z, r18
    6a50:	77 c0       	rjmp	.+238    	; 0x6b40 <LCDBusyLoop+0x704>
	else if (__tmp > 65535)
    6a52:	ce 01       	movw	r24, r28
    6a54:	85 5a       	subi	r24, 0xA5	; 165
    6a56:	9f 4f       	sbci	r25, 0xFF	; 255
    6a58:	20 e0       	ldi	r18, 0x00	; 0
    6a5a:	3f ef       	ldi	r19, 0xFF	; 255
    6a5c:	4f e7       	ldi	r20, 0x7F	; 127
    6a5e:	57 e4       	ldi	r21, 0x47	; 71
    6a60:	fc 01       	movw	r30, r24
    6a62:	60 81       	ld	r22, Z
    6a64:	71 81       	ldd	r23, Z+1	; 0x01
    6a66:	82 81       	ldd	r24, Z+2	; 0x02
    6a68:	93 81       	ldd	r25, Z+3	; 0x03
    6a6a:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    6a6e:	18 16       	cp	r1, r24
    6a70:	0c f0       	brlt	.+2      	; 0x6a74 <LCDBusyLoop+0x638>
    6a72:	54 c0       	rjmp	.+168    	; 0x6b1c <LCDBusyLoop+0x6e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a74:	ce 01       	movw	r24, r28
    6a76:	89 5a       	subi	r24, 0xA9	; 169
    6a78:	9f 4f       	sbci	r25, 0xFF	; 255
    6a7a:	20 e0       	ldi	r18, 0x00	; 0
    6a7c:	30 e0       	ldi	r19, 0x00	; 0
    6a7e:	40 e2       	ldi	r20, 0x20	; 32
    6a80:	51 e4       	ldi	r21, 0x41	; 65
    6a82:	fc 01       	movw	r30, r24
    6a84:	60 81       	ld	r22, Z
    6a86:	71 81       	ldd	r23, Z+1	; 0x01
    6a88:	82 81       	ldd	r24, Z+2	; 0x02
    6a8a:	93 81       	ldd	r25, Z+3	; 0x03
    6a8c:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    6a90:	dc 01       	movw	r26, r24
    6a92:	cb 01       	movw	r24, r22
    6a94:	8e 01       	movw	r16, r28
    6a96:	01 5a       	subi	r16, 0xA1	; 161
    6a98:	1f 4f       	sbci	r17, 0xFF	; 255
    6a9a:	bc 01       	movw	r22, r24
    6a9c:	cd 01       	movw	r24, r26
    6a9e:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    6aa2:	dc 01       	movw	r26, r24
    6aa4:	cb 01       	movw	r24, r22
    6aa6:	f8 01       	movw	r30, r16
    6aa8:	91 83       	std	Z+1, r25	; 0x01
    6aaa:	80 83       	st	Z, r24
    6aac:	24 c0       	rjmp	.+72     	; 0x6af6 <LCDBusyLoop+0x6ba>
    6aae:	ce 01       	movw	r24, r28
    6ab0:	8f 59       	subi	r24, 0x9F	; 159
    6ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ab4:	28 ec       	ldi	r18, 0xC8	; 200
    6ab6:	30 e0       	ldi	r19, 0x00	; 0
    6ab8:	fc 01       	movw	r30, r24
    6aba:	31 83       	std	Z+1, r19	; 0x01
    6abc:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6abe:	ce 01       	movw	r24, r28
    6ac0:	8f 59       	subi	r24, 0x9F	; 159
    6ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ac4:	fc 01       	movw	r30, r24
    6ac6:	80 81       	ld	r24, Z
    6ac8:	91 81       	ldd	r25, Z+1	; 0x01
    6aca:	01 97       	sbiw	r24, 0x01	; 1
    6acc:	f1 f7       	brne	.-4      	; 0x6aca <LCDBusyLoop+0x68e>
    6ace:	9e 01       	movw	r18, r28
    6ad0:	2f 59       	subi	r18, 0x9F	; 159
    6ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ad4:	f9 01       	movw	r30, r18
    6ad6:	91 83       	std	Z+1, r25	; 0x01
    6ad8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ada:	ce 01       	movw	r24, r28
    6adc:	81 5a       	subi	r24, 0xA1	; 161
    6ade:	9f 4f       	sbci	r25, 0xFF	; 255
    6ae0:	9e 01       	movw	r18, r28
    6ae2:	21 5a       	subi	r18, 0xA1	; 161
    6ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ae6:	f9 01       	movw	r30, r18
    6ae8:	20 81       	ld	r18, Z
    6aea:	31 81       	ldd	r19, Z+1	; 0x01
    6aec:	21 50       	subi	r18, 0x01	; 1
    6aee:	31 09       	sbc	r19, r1
    6af0:	fc 01       	movw	r30, r24
    6af2:	31 83       	std	Z+1, r19	; 0x01
    6af4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6af6:	ce 01       	movw	r24, r28
    6af8:	81 5a       	subi	r24, 0xA1	; 161
    6afa:	9f 4f       	sbci	r25, 0xFF	; 255
    6afc:	fc 01       	movw	r30, r24
    6afe:	80 81       	ld	r24, Z
    6b00:	91 81       	ldd	r25, Z+1	; 0x01
    6b02:	89 2b       	or	r24, r25
    6b04:	a1 f6       	brne	.-88     	; 0x6aae <LCDBusyLoop+0x672>
    6b06:	ce 01       	movw	r24, r28
    6b08:	8a 5a       	subi	r24, 0xAA	; 170
    6b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    6b0c:	9e 01       	movw	r18, r28
    6b0e:	26 59       	subi	r18, 0x96	; 150
    6b10:	3f 4f       	sbci	r19, 0xFF	; 255
    6b12:	f9 01       	movw	r30, r18
    6b14:	20 81       	ld	r18, Z
    6b16:	fc 01       	movw	r30, r24
    6b18:	20 83       	st	Z, r18
    6b1a:	85 c0       	rjmp	.+266    	; 0x6c26 <LCDBusyLoop+0x7ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b1c:	8e 01       	movw	r16, r28
    6b1e:	01 5a       	subi	r16, 0xA1	; 161
    6b20:	1f 4f       	sbci	r17, 0xFF	; 255
    6b22:	ce 01       	movw	r24, r28
    6b24:	85 5a       	subi	r24, 0xA5	; 165
    6b26:	9f 4f       	sbci	r25, 0xFF	; 255
    6b28:	fc 01       	movw	r30, r24
    6b2a:	60 81       	ld	r22, Z
    6b2c:	71 81       	ldd	r23, Z+1	; 0x01
    6b2e:	82 81       	ldd	r24, Z+2	; 0x02
    6b30:	93 81       	ldd	r25, Z+3	; 0x03
    6b32:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    6b36:	dc 01       	movw	r26, r24
    6b38:	cb 01       	movw	r24, r22
    6b3a:	f8 01       	movw	r30, r16
    6b3c:	91 83       	std	Z+1, r25	; 0x01
    6b3e:	80 83       	st	Z, r24
    6b40:	ce 01       	movw	r24, r28
    6b42:	8d 59       	subi	r24, 0x9D	; 157
    6b44:	9f 4f       	sbci	r25, 0xFF	; 255
    6b46:	9e 01       	movw	r18, r28
    6b48:	21 5a       	subi	r18, 0xA1	; 161
    6b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    6b4c:	f9 01       	movw	r30, r18
    6b4e:	20 81       	ld	r18, Z
    6b50:	31 81       	ldd	r19, Z+1	; 0x01
    6b52:	fc 01       	movw	r30, r24
    6b54:	31 83       	std	Z+1, r19	; 0x01
    6b56:	20 83       	st	Z, r18
    6b58:	ce 01       	movw	r24, r28
    6b5a:	8d 59       	subi	r24, 0x9D	; 157
    6b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    6b5e:	fc 01       	movw	r30, r24
    6b60:	80 81       	ld	r24, Z
    6b62:	91 81       	ldd	r25, Z+1	; 0x01
    6b64:	01 97       	sbiw	r24, 0x01	; 1
    6b66:	f1 f7       	brne	.-4      	; 0x6b64 <LCDBusyLoop+0x728>
    6b68:	9e 01       	movw	r18, r28
    6b6a:	2d 59       	subi	r18, 0x9D	; 157
    6b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    6b6e:	f9 01       	movw	r30, r18
    6b70:	91 83       	std	Z+1, r25	; 0x01
    6b72:	80 83       	st	Z, r24
    6b74:	ce 01       	movw	r24, r28
    6b76:	8a 5a       	subi	r24, 0xAA	; 170
    6b78:	9f 4f       	sbci	r25, 0xFF	; 255
    6b7a:	9e 01       	movw	r18, r28
    6b7c:	26 59       	subi	r18, 0x96	; 150
    6b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    6b80:	f9 01       	movw	r30, r18
    6b82:	20 81       	ld	r18, Z
    6b84:	fc 01       	movw	r30, r24
    6b86:	20 83       	st	Z, r18
    6b88:	4e c0       	rjmp	.+156    	; 0x6c26 <LCDBusyLoop+0x7ea>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    6b8a:	ce 01       	movw	r24, r28
    6b8c:	82 5b       	subi	r24, 0xB2	; 178
    6b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    6b90:	20 e0       	ldi	r18, 0x00	; 0
    6b92:	30 e0       	ldi	r19, 0x00	; 0
    6b94:	4f e7       	ldi	r20, 0x7F	; 127
    6b96:	53 e4       	ldi	r21, 0x43	; 67
    6b98:	fc 01       	movw	r30, r24
    6b9a:	60 81       	ld	r22, Z
    6b9c:	71 81       	ldd	r23, Z+1	; 0x01
    6b9e:	82 81       	ldd	r24, Z+2	; 0x02
    6ba0:	93 81       	ldd	r25, Z+3	; 0x03
    6ba2:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    6ba6:	18 16       	cp	r1, r24
    6ba8:	6c f5       	brge	.+90     	; 0x6c04 <LCDBusyLoop+0x7c8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    6baa:	8e 01       	movw	r16, r28
    6bac:	0b 59       	subi	r16, 0x9B	; 155
    6bae:	1f 4f       	sbci	r17, 0xFF	; 255
    6bb0:	ce 01       	movw	r24, r28
    6bb2:	8e 5a       	subi	r24, 0xAE	; 174
    6bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    6bb6:	fc 01       	movw	r30, r24
    6bb8:	60 81       	ld	r22, Z
    6bba:	71 81       	ldd	r23, Z+1	; 0x01
    6bbc:	82 81       	ldd	r24, Z+2	; 0x02
    6bbe:	93 81       	ldd	r25, Z+3	; 0x03
    6bc0:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    6bc4:	dc 01       	movw	r26, r24
    6bc6:	cb 01       	movw	r24, r22
    6bc8:	f8 01       	movw	r30, r16
    6bca:	91 83       	std	Z+1, r25	; 0x01
    6bcc:	80 83       	st	Z, r24
    6bce:	ce 01       	movw	r24, r28
    6bd0:	89 59       	subi	r24, 0x99	; 153
    6bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    6bd4:	9e 01       	movw	r18, r28
    6bd6:	2b 59       	subi	r18, 0x9B	; 155
    6bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    6bda:	f9 01       	movw	r30, r18
    6bdc:	20 81       	ld	r18, Z
    6bde:	31 81       	ldd	r19, Z+1	; 0x01
    6be0:	fc 01       	movw	r30, r24
    6be2:	31 83       	std	Z+1, r19	; 0x01
    6be4:	20 83       	st	Z, r18
    6be6:	ce 01       	movw	r24, r28
    6be8:	89 59       	subi	r24, 0x99	; 153
    6bea:	9f 4f       	sbci	r25, 0xFF	; 255
    6bec:	fc 01       	movw	r30, r24
    6bee:	80 81       	ld	r24, Z
    6bf0:	91 81       	ldd	r25, Z+1	; 0x01
    6bf2:	01 97       	sbiw	r24, 0x01	; 1
    6bf4:	f1 f7       	brne	.-4      	; 0x6bf2 <LCDBusyLoop+0x7b6>
    6bf6:	9e 01       	movw	r18, r28
    6bf8:	29 59       	subi	r18, 0x99	; 153
    6bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    6bfc:	f9 01       	movw	r30, r18
    6bfe:	91 83       	std	Z+1, r25	; 0x01
    6c00:	80 83       	st	Z, r24
    6c02:	28 c0       	rjmp	.+80     	; 0x6c54 <LCDBusyLoop+0x818>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6c04:	8e 01       	movw	r16, r28
    6c06:	0a 5a       	subi	r16, 0xAA	; 170
    6c08:	1f 4f       	sbci	r17, 0xFF	; 255
    6c0a:	ce 01       	movw	r24, r28
    6c0c:	82 5b       	subi	r24, 0xB2	; 178
    6c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    6c10:	fc 01       	movw	r30, r24
    6c12:	60 81       	ld	r22, Z
    6c14:	71 81       	ldd	r23, Z+1	; 0x01
    6c16:	82 81       	ldd	r24, Z+2	; 0x02
    6c18:	93 81       	ldd	r25, Z+3	; 0x03
    6c1a:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    6c1e:	dc 01       	movw	r26, r24
    6c20:	cb 01       	movw	r24, r22
    6c22:	f8 01       	movw	r30, r16
    6c24:	80 83       	st	Z, r24
    6c26:	ce 01       	movw	r24, r28
    6c28:	87 59       	subi	r24, 0x97	; 151
    6c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    6c2c:	9e 01       	movw	r18, r28
    6c2e:	2a 5a       	subi	r18, 0xAA	; 170
    6c30:	3f 4f       	sbci	r19, 0xFF	; 255
    6c32:	f9 01       	movw	r30, r18
    6c34:	20 81       	ld	r18, Z
    6c36:	fc 01       	movw	r30, r24
    6c38:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6c3a:	ce 01       	movw	r24, r28
    6c3c:	87 59       	subi	r24, 0x97	; 151
    6c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    6c40:	fc 01       	movw	r30, r24
    6c42:	80 81       	ld	r24, Z
    6c44:	28 2f       	mov	r18, r24
    6c46:	2a 95       	dec	r18
    6c48:	f1 f7       	brne	.-4      	; 0x6c46 <LCDBusyLoop+0x80a>
    6c4a:	ce 01       	movw	r24, r28
    6c4c:	87 59       	subi	r24, 0x97	; 151
    6c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    6c50:	fc 01       	movw	r30, r24
    6c52:	20 83       	st	Z, r18

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
    6c54:	85 e6       	ldi	r24, 0x65	; 101
    6c56:	90 e0       	ldi	r25, 0x00	; 0
    6c58:	25 e6       	ldi	r18, 0x65	; 101
    6c5a:	30 e0       	ldi	r19, 0x00	; 0
    6c5c:	f9 01       	movw	r30, r18
    6c5e:	20 81       	ld	r18, Z
    6c60:	2f 7e       	andi	r18, 0xEF	; 239
    6c62:	fc 01       	movw	r30, r24
    6c64:	20 83       	st	Z, r18
    6c66:	9e 01       	movw	r18, r28
    6c68:	25 59       	subi	r18, 0x95	; 149
    6c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    6c6c:	80 e0       	ldi	r24, 0x00	; 0
    6c6e:	90 e0       	ldi	r25, 0x00	; 0
    6c70:	a0 e8       	ldi	r26, 0x80	; 128
    6c72:	bf e3       	ldi	r27, 0x3F	; 63
    6c74:	f9 01       	movw	r30, r18
    6c76:	80 83       	st	Z, r24
    6c78:	91 83       	std	Z+1, r25	; 0x01
    6c7a:	a2 83       	std	Z+2, r26	; 0x02
    6c7c:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    6c7e:	8e 01       	movw	r16, r28
    6c80:	01 59       	subi	r16, 0x91	; 145
    6c82:	1f 4f       	sbci	r17, 0xFF	; 255
    6c84:	ce 01       	movw	r24, r28
    6c86:	85 59       	subi	r24, 0x95	; 149
    6c88:	9f 4f       	sbci	r25, 0xFF	; 255
    6c8a:	2b ea       	ldi	r18, 0xAB	; 171
    6c8c:	3a ea       	ldi	r19, 0xAA	; 170
    6c8e:	4a e2       	ldi	r20, 0x2A	; 42
    6c90:	50 e4       	ldi	r21, 0x40	; 64
    6c92:	fc 01       	movw	r30, r24
    6c94:	60 81       	ld	r22, Z
    6c96:	71 81       	ldd	r23, Z+1	; 0x01
    6c98:	82 81       	ldd	r24, Z+2	; 0x02
    6c9a:	93 81       	ldd	r25, Z+3	; 0x03
    6c9c:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    6ca0:	dc 01       	movw	r26, r24
    6ca2:	cb 01       	movw	r24, r22
    6ca4:	f8 01       	movw	r30, r16
    6ca6:	80 83       	st	Z, r24
    6ca8:	91 83       	std	Z+1, r25	; 0x01
    6caa:	a2 83       	std	Z+2, r26	; 0x02
    6cac:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    6cae:	8e 01       	movw	r16, r28
    6cb0:	0d 58       	subi	r16, 0x8D	; 141
    6cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    6cb4:	ce 01       	movw	r24, r28
    6cb6:	85 59       	subi	r24, 0x95	; 149
    6cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    6cba:	fc 01       	movw	r30, r24
    6cbc:	80 81       	ld	r24, Z
    6cbe:	91 81       	ldd	r25, Z+1	; 0x01
    6cc0:	a2 81       	ldd	r26, Z+2	; 0x02
    6cc2:	b3 81       	ldd	r27, Z+3	; 0x03
    6cc4:	9c 01       	movw	r18, r24
    6cc6:	ad 01       	movw	r20, r26
    6cc8:	bc 01       	movw	r22, r24
    6cca:	cd 01       	movw	r24, r26
    6ccc:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    6cd0:	dc 01       	movw	r26, r24
    6cd2:	cb 01       	movw	r24, r22
    6cd4:	f8 01       	movw	r30, r16
    6cd6:	80 83       	st	Z, r24
    6cd8:	91 83       	std	Z+1, r25	; 0x01
    6cda:	a2 83       	std	Z+2, r26	; 0x02
    6cdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6cde:	ce 01       	movw	r24, r28
    6ce0:	81 59       	subi	r24, 0x91	; 145
    6ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ce4:	20 e0       	ldi	r18, 0x00	; 0
    6ce6:	30 e0       	ldi	r19, 0x00	; 0
    6ce8:	40 e8       	ldi	r20, 0x80	; 128
    6cea:	5f e3       	ldi	r21, 0x3F	; 63
    6cec:	fc 01       	movw	r30, r24
    6cee:	60 81       	ld	r22, Z
    6cf0:	71 81       	ldd	r23, Z+1	; 0x01
    6cf2:	82 81       	ldd	r24, Z+2	; 0x02
    6cf4:	93 81       	ldd	r25, Z+3	; 0x03
    6cf6:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    6cfa:	88 23       	and	r24, r24
    6cfc:	3c f4       	brge	.+14     	; 0x6d0c <LCDBusyLoop+0x8d0>
		__ticks = 1;
    6cfe:	ce 01       	movw	r24, r28
    6d00:	89 58       	subi	r24, 0x89	; 137
    6d02:	9f 4f       	sbci	r25, 0xFF	; 255
    6d04:	21 e0       	ldi	r18, 0x01	; 1
    6d06:	fc 01       	movw	r30, r24
    6d08:	20 83       	st	Z, r18
    6d0a:	44 c1       	rjmp	.+648    	; 0x6f94 <LCDBusyLoop+0xb58>
	else if (__tmp2 > 65535)
    6d0c:	ce 01       	movw	r24, r28
    6d0e:	8d 58       	subi	r24, 0x8D	; 141
    6d10:	9f 4f       	sbci	r25, 0xFF	; 255
    6d12:	20 e0       	ldi	r18, 0x00	; 0
    6d14:	3f ef       	ldi	r19, 0xFF	; 255
    6d16:	4f e7       	ldi	r20, 0x7F	; 127
    6d18:	57 e4       	ldi	r21, 0x47	; 71
    6d1a:	fc 01       	movw	r30, r24
    6d1c:	60 81       	ld	r22, Z
    6d1e:	71 81       	ldd	r23, Z+1	; 0x01
    6d20:	82 81       	ldd	r24, Z+2	; 0x02
    6d22:	93 81       	ldd	r25, Z+3	; 0x03
    6d24:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    6d28:	18 16       	cp	r1, r24
    6d2a:	0c f0       	brlt	.+2      	; 0x6d2e <LCDBusyLoop+0x8f2>
    6d2c:	e5 c0       	rjmp	.+458    	; 0x6ef8 <LCDBusyLoop+0xabc>
	{
		_delay_ms(__us / 1000.0);
    6d2e:	ce 01       	movw	r24, r28
    6d30:	85 59       	subi	r24, 0x95	; 149
    6d32:	9f 4f       	sbci	r25, 0xFF	; 255
    6d34:	20 e0       	ldi	r18, 0x00	; 0
    6d36:	30 e0       	ldi	r19, 0x00	; 0
    6d38:	4a e7       	ldi	r20, 0x7A	; 122
    6d3a:	54 e4       	ldi	r21, 0x44	; 68
    6d3c:	fc 01       	movw	r30, r24
    6d3e:	60 81       	ld	r22, Z
    6d40:	71 81       	ldd	r23, Z+1	; 0x01
    6d42:	82 81       	ldd	r24, Z+2	; 0x02
    6d44:	93 81       	ldd	r25, Z+3	; 0x03
    6d46:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    6d4a:	dc 01       	movw	r26, r24
    6d4c:	cb 01       	movw	r24, r22
    6d4e:	9e 01       	movw	r18, r28
    6d50:	28 58       	subi	r18, 0x88	; 136
    6d52:	3f 4f       	sbci	r19, 0xFF	; 255
    6d54:	f9 01       	movw	r30, r18
    6d56:	80 83       	st	Z, r24
    6d58:	91 83       	std	Z+1, r25	; 0x01
    6d5a:	a2 83       	std	Z+2, r26	; 0x02
    6d5c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6d5e:	8e 01       	movw	r16, r28
    6d60:	04 58       	subi	r16, 0x84	; 132
    6d62:	1f 4f       	sbci	r17, 0xFF	; 255
    6d64:	ce 01       	movw	r24, r28
    6d66:	88 58       	subi	r24, 0x88	; 136
    6d68:	9f 4f       	sbci	r25, 0xFF	; 255
    6d6a:	20 e0       	ldi	r18, 0x00	; 0
    6d6c:	30 e0       	ldi	r19, 0x00	; 0
    6d6e:	4a ef       	ldi	r20, 0xFA	; 250
    6d70:	54 e4       	ldi	r21, 0x44	; 68
    6d72:	fc 01       	movw	r30, r24
    6d74:	60 81       	ld	r22, Z
    6d76:	71 81       	ldd	r23, Z+1	; 0x01
    6d78:	82 81       	ldd	r24, Z+2	; 0x02
    6d7a:	93 81       	ldd	r25, Z+3	; 0x03
    6d7c:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    6d80:	dc 01       	movw	r26, r24
    6d82:	cb 01       	movw	r24, r22
    6d84:	f8 01       	movw	r30, r16
    6d86:	80 83       	st	Z, r24
    6d88:	91 83       	std	Z+1, r25	; 0x01
    6d8a:	a2 83       	std	Z+2, r26	; 0x02
    6d8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6d8e:	ce 01       	movw	r24, r28
    6d90:	84 58       	subi	r24, 0x84	; 132
    6d92:	9f 4f       	sbci	r25, 0xFF	; 255
    6d94:	20 e0       	ldi	r18, 0x00	; 0
    6d96:	30 e0       	ldi	r19, 0x00	; 0
    6d98:	40 e8       	ldi	r20, 0x80	; 128
    6d9a:	5f e3       	ldi	r21, 0x3F	; 63
    6d9c:	fc 01       	movw	r30, r24
    6d9e:	60 81       	ld	r22, Z
    6da0:	71 81       	ldd	r23, Z+1	; 0x01
    6da2:	82 81       	ldd	r24, Z+2	; 0x02
    6da4:	93 81       	ldd	r25, Z+3	; 0x03
    6da6:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    6daa:	88 23       	and	r24, r24
    6dac:	4c f4       	brge	.+18     	; 0x6dc0 <LCDBusyLoop+0x984>
		__ticks = 1;
    6dae:	ce 01       	movw	r24, r28
    6db0:	80 58       	subi	r24, 0x80	; 128
    6db2:	9f 4f       	sbci	r25, 0xFF	; 255
    6db4:	21 e0       	ldi	r18, 0x01	; 1
    6db6:	30 e0       	ldi	r19, 0x00	; 0
    6db8:	fc 01       	movw	r30, r24
    6dba:	31 83       	std	Z+1, r19	; 0x01
    6dbc:	20 83       	st	Z, r18
    6dbe:	77 c0       	rjmp	.+238    	; 0x6eae <LCDBusyLoop+0xa72>
	else if (__tmp > 65535)
    6dc0:	ce 01       	movw	r24, r28
    6dc2:	84 58       	subi	r24, 0x84	; 132
    6dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    6dc6:	20 e0       	ldi	r18, 0x00	; 0
    6dc8:	3f ef       	ldi	r19, 0xFF	; 255
    6dca:	4f e7       	ldi	r20, 0x7F	; 127
    6dcc:	57 e4       	ldi	r21, 0x47	; 71
    6dce:	fc 01       	movw	r30, r24
    6dd0:	60 81       	ld	r22, Z
    6dd2:	71 81       	ldd	r23, Z+1	; 0x01
    6dd4:	82 81       	ldd	r24, Z+2	; 0x02
    6dd6:	93 81       	ldd	r25, Z+3	; 0x03
    6dd8:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    6ddc:	18 16       	cp	r1, r24
    6dde:	0c f0       	brlt	.+2      	; 0x6de2 <LCDBusyLoop+0x9a6>
    6de0:	54 c0       	rjmp	.+168    	; 0x6e8a <LCDBusyLoop+0xa4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6de2:	ce 01       	movw	r24, r28
    6de4:	88 58       	subi	r24, 0x88	; 136
    6de6:	9f 4f       	sbci	r25, 0xFF	; 255
    6de8:	20 e0       	ldi	r18, 0x00	; 0
    6dea:	30 e0       	ldi	r19, 0x00	; 0
    6dec:	40 e2       	ldi	r20, 0x20	; 32
    6dee:	51 e4       	ldi	r21, 0x41	; 65
    6df0:	fc 01       	movw	r30, r24
    6df2:	60 81       	ld	r22, Z
    6df4:	71 81       	ldd	r23, Z+1	; 0x01
    6df6:	82 81       	ldd	r24, Z+2	; 0x02
    6df8:	93 81       	ldd	r25, Z+3	; 0x03
    6dfa:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    6dfe:	dc 01       	movw	r26, r24
    6e00:	cb 01       	movw	r24, r22
    6e02:	8e 01       	movw	r16, r28
    6e04:	00 58       	subi	r16, 0x80	; 128
    6e06:	1f 4f       	sbci	r17, 0xFF	; 255
    6e08:	bc 01       	movw	r22, r24
    6e0a:	cd 01       	movw	r24, r26
    6e0c:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    6e10:	dc 01       	movw	r26, r24
    6e12:	cb 01       	movw	r24, r22
    6e14:	f8 01       	movw	r30, r16
    6e16:	91 83       	std	Z+1, r25	; 0x01
    6e18:	80 83       	st	Z, r24
    6e1a:	24 c0       	rjmp	.+72     	; 0x6e64 <LCDBusyLoop+0xa28>
    6e1c:	ce 01       	movw	r24, r28
    6e1e:	8e 57       	subi	r24, 0x7E	; 126
    6e20:	9f 4f       	sbci	r25, 0xFF	; 255
    6e22:	28 ec       	ldi	r18, 0xC8	; 200
    6e24:	30 e0       	ldi	r19, 0x00	; 0
    6e26:	fc 01       	movw	r30, r24
    6e28:	31 83       	std	Z+1, r19	; 0x01
    6e2a:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6e2c:	ce 01       	movw	r24, r28
    6e2e:	8e 57       	subi	r24, 0x7E	; 126
    6e30:	9f 4f       	sbci	r25, 0xFF	; 255
    6e32:	fc 01       	movw	r30, r24
    6e34:	80 81       	ld	r24, Z
    6e36:	91 81       	ldd	r25, Z+1	; 0x01
    6e38:	01 97       	sbiw	r24, 0x01	; 1
    6e3a:	f1 f7       	brne	.-4      	; 0x6e38 <LCDBusyLoop+0x9fc>
    6e3c:	9e 01       	movw	r18, r28
    6e3e:	2e 57       	subi	r18, 0x7E	; 126
    6e40:	3f 4f       	sbci	r19, 0xFF	; 255
    6e42:	f9 01       	movw	r30, r18
    6e44:	91 83       	std	Z+1, r25	; 0x01
    6e46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e48:	ce 01       	movw	r24, r28
    6e4a:	80 58       	subi	r24, 0x80	; 128
    6e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e4e:	9e 01       	movw	r18, r28
    6e50:	20 58       	subi	r18, 0x80	; 128
    6e52:	3f 4f       	sbci	r19, 0xFF	; 255
    6e54:	f9 01       	movw	r30, r18
    6e56:	20 81       	ld	r18, Z
    6e58:	31 81       	ldd	r19, Z+1	; 0x01
    6e5a:	21 50       	subi	r18, 0x01	; 1
    6e5c:	31 09       	sbc	r19, r1
    6e5e:	fc 01       	movw	r30, r24
    6e60:	31 83       	std	Z+1, r19	; 0x01
    6e62:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e64:	ce 01       	movw	r24, r28
    6e66:	80 58       	subi	r24, 0x80	; 128
    6e68:	9f 4f       	sbci	r25, 0xFF	; 255
    6e6a:	fc 01       	movw	r30, r24
    6e6c:	80 81       	ld	r24, Z
    6e6e:	91 81       	ldd	r25, Z+1	; 0x01
    6e70:	89 2b       	or	r24, r25
    6e72:	a1 f6       	brne	.-88     	; 0x6e1c <LCDBusyLoop+0x9e0>
    6e74:	ce 01       	movw	r24, r28
    6e76:	89 58       	subi	r24, 0x89	; 137
    6e78:	9f 4f       	sbci	r25, 0xFF	; 255
    6e7a:	9e 01       	movw	r18, r28
    6e7c:	25 57       	subi	r18, 0x75	; 117
    6e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    6e80:	f9 01       	movw	r30, r18
    6e82:	20 81       	ld	r18, Z
    6e84:	fc 01       	movw	r30, r24
    6e86:	20 83       	st	Z, r18
    6e88:	85 c0       	rjmp	.+266    	; 0x6f94 <LCDBusyLoop+0xb58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e8a:	8e 01       	movw	r16, r28
    6e8c:	00 58       	subi	r16, 0x80	; 128
    6e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    6e90:	ce 01       	movw	r24, r28
    6e92:	84 58       	subi	r24, 0x84	; 132
    6e94:	9f 4f       	sbci	r25, 0xFF	; 255
    6e96:	fc 01       	movw	r30, r24
    6e98:	60 81       	ld	r22, Z
    6e9a:	71 81       	ldd	r23, Z+1	; 0x01
    6e9c:	82 81       	ldd	r24, Z+2	; 0x02
    6e9e:	93 81       	ldd	r25, Z+3	; 0x03
    6ea0:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    6ea4:	dc 01       	movw	r26, r24
    6ea6:	cb 01       	movw	r24, r22
    6ea8:	f8 01       	movw	r30, r16
    6eaa:	91 83       	std	Z+1, r25	; 0x01
    6eac:	80 83       	st	Z, r24
    6eae:	ce 01       	movw	r24, r28
    6eb0:	8c 57       	subi	r24, 0x7C	; 124
    6eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    6eb4:	9e 01       	movw	r18, r28
    6eb6:	20 58       	subi	r18, 0x80	; 128
    6eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    6eba:	f9 01       	movw	r30, r18
    6ebc:	20 81       	ld	r18, Z
    6ebe:	31 81       	ldd	r19, Z+1	; 0x01
    6ec0:	fc 01       	movw	r30, r24
    6ec2:	31 83       	std	Z+1, r19	; 0x01
    6ec4:	20 83       	st	Z, r18
    6ec6:	ce 01       	movw	r24, r28
    6ec8:	8c 57       	subi	r24, 0x7C	; 124
    6eca:	9f 4f       	sbci	r25, 0xFF	; 255
    6ecc:	fc 01       	movw	r30, r24
    6ece:	80 81       	ld	r24, Z
    6ed0:	91 81       	ldd	r25, Z+1	; 0x01
    6ed2:	01 97       	sbiw	r24, 0x01	; 1
    6ed4:	f1 f7       	brne	.-4      	; 0x6ed2 <LCDBusyLoop+0xa96>
    6ed6:	9e 01       	movw	r18, r28
    6ed8:	2c 57       	subi	r18, 0x7C	; 124
    6eda:	3f 4f       	sbci	r19, 0xFF	; 255
    6edc:	f9 01       	movw	r30, r18
    6ede:	91 83       	std	Z+1, r25	; 0x01
    6ee0:	80 83       	st	Z, r24
    6ee2:	ce 01       	movw	r24, r28
    6ee4:	89 58       	subi	r24, 0x89	; 137
    6ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ee8:	9e 01       	movw	r18, r28
    6eea:	25 57       	subi	r18, 0x75	; 117
    6eec:	3f 4f       	sbci	r19, 0xFF	; 255
    6eee:	f9 01       	movw	r30, r18
    6ef0:	20 81       	ld	r18, Z
    6ef2:	fc 01       	movw	r30, r24
    6ef4:	20 83       	st	Z, r18
    6ef6:	4e c0       	rjmp	.+156    	; 0x6f94 <LCDBusyLoop+0xb58>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    6ef8:	ce 01       	movw	r24, r28
    6efa:	81 59       	subi	r24, 0x91	; 145
    6efc:	9f 4f       	sbci	r25, 0xFF	; 255
    6efe:	20 e0       	ldi	r18, 0x00	; 0
    6f00:	30 e0       	ldi	r19, 0x00	; 0
    6f02:	4f e7       	ldi	r20, 0x7F	; 127
    6f04:	53 e4       	ldi	r21, 0x43	; 67
    6f06:	fc 01       	movw	r30, r24
    6f08:	60 81       	ld	r22, Z
    6f0a:	71 81       	ldd	r23, Z+1	; 0x01
    6f0c:	82 81       	ldd	r24, Z+2	; 0x02
    6f0e:	93 81       	ldd	r25, Z+3	; 0x03
    6f10:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    6f14:	18 16       	cp	r1, r24
    6f16:	6c f5       	brge	.+90     	; 0x6f72 <LCDBusyLoop+0xb36>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    6f18:	8e 01       	movw	r16, r28
    6f1a:	0a 57       	subi	r16, 0x7A	; 122
    6f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    6f1e:	ce 01       	movw	r24, r28
    6f20:	8d 58       	subi	r24, 0x8D	; 141
    6f22:	9f 4f       	sbci	r25, 0xFF	; 255
    6f24:	fc 01       	movw	r30, r24
    6f26:	60 81       	ld	r22, Z
    6f28:	71 81       	ldd	r23, Z+1	; 0x01
    6f2a:	82 81       	ldd	r24, Z+2	; 0x02
    6f2c:	93 81       	ldd	r25, Z+3	; 0x03
    6f2e:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    6f32:	dc 01       	movw	r26, r24
    6f34:	cb 01       	movw	r24, r22
    6f36:	f8 01       	movw	r30, r16
    6f38:	91 83       	std	Z+1, r25	; 0x01
    6f3a:	80 83       	st	Z, r24
    6f3c:	ce 01       	movw	r24, r28
    6f3e:	88 57       	subi	r24, 0x78	; 120
    6f40:	9f 4f       	sbci	r25, 0xFF	; 255
    6f42:	9e 01       	movw	r18, r28
    6f44:	2a 57       	subi	r18, 0x7A	; 122
    6f46:	3f 4f       	sbci	r19, 0xFF	; 255
    6f48:	f9 01       	movw	r30, r18
    6f4a:	20 81       	ld	r18, Z
    6f4c:	31 81       	ldd	r19, Z+1	; 0x01
    6f4e:	fc 01       	movw	r30, r24
    6f50:	31 83       	std	Z+1, r19	; 0x01
    6f52:	20 83       	st	Z, r18
    6f54:	ce 01       	movw	r24, r28
    6f56:	88 57       	subi	r24, 0x78	; 120
    6f58:	9f 4f       	sbci	r25, 0xFF	; 255
    6f5a:	fc 01       	movw	r30, r24
    6f5c:	80 81       	ld	r24, Z
    6f5e:	91 81       	ldd	r25, Z+1	; 0x01
    6f60:	01 97       	sbiw	r24, 0x01	; 1
    6f62:	f1 f7       	brne	.-4      	; 0x6f60 <LCDBusyLoop+0xb24>
    6f64:	9e 01       	movw	r18, r28
    6f66:	28 57       	subi	r18, 0x78	; 120
    6f68:	3f 4f       	sbci	r19, 0xFF	; 255
    6f6a:	f9 01       	movw	r30, r18
    6f6c:	91 83       	std	Z+1, r25	; 0x01
    6f6e:	80 83       	st	Z, r24
    6f70:	28 c0       	rjmp	.+80     	; 0x6fc2 <LCDBusyLoop+0xb86>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6f72:	8e 01       	movw	r16, r28
    6f74:	09 58       	subi	r16, 0x89	; 137
    6f76:	1f 4f       	sbci	r17, 0xFF	; 255
    6f78:	ce 01       	movw	r24, r28
    6f7a:	81 59       	subi	r24, 0x91	; 145
    6f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    6f7e:	fc 01       	movw	r30, r24
    6f80:	60 81       	ld	r22, Z
    6f82:	71 81       	ldd	r23, Z+1	; 0x01
    6f84:	82 81       	ldd	r24, Z+2	; 0x02
    6f86:	93 81       	ldd	r25, Z+3	; 0x03
    6f88:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    6f8c:	dc 01       	movw	r26, r24
    6f8e:	cb 01       	movw	r24, r22
    6f90:	f8 01       	movw	r30, r16
    6f92:	80 83       	st	Z, r24
    6f94:	ce 01       	movw	r24, r28
    6f96:	86 57       	subi	r24, 0x76	; 118
    6f98:	9f 4f       	sbci	r25, 0xFF	; 255
    6f9a:	9e 01       	movw	r18, r28
    6f9c:	29 58       	subi	r18, 0x89	; 137
    6f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    6fa0:	f9 01       	movw	r30, r18
    6fa2:	20 81       	ld	r18, Z
    6fa4:	fc 01       	movw	r30, r24
    6fa6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6fa8:	ce 01       	movw	r24, r28
    6faa:	86 57       	subi	r24, 0x76	; 118
    6fac:	9f 4f       	sbci	r25, 0xFF	; 255
    6fae:	fc 01       	movw	r30, r24
    6fb0:	80 81       	ld	r24, Z
    6fb2:	28 2f       	mov	r18, r24
    6fb4:	2a 95       	dec	r18
    6fb6:	f1 f7       	brne	.-4      	; 0x6fb4 <LCDBusyLoop+0xb78>
    6fb8:	ce 01       	movw	r24, r28
    6fba:	86 57       	subi	r24, 0x76	; 118
    6fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    6fbe:	fc 01       	movw	r30, r24
    6fc0:	20 83       	st	Z, r18
		_delay_us(1);	//tEL

		SET_E();
    6fc2:	85 e6       	ldi	r24, 0x65	; 101
    6fc4:	90 e0       	ldi	r25, 0x00	; 0
    6fc6:	25 e6       	ldi	r18, 0x65	; 101
    6fc8:	30 e0       	ldi	r19, 0x00	; 0
    6fca:	f9 01       	movw	r30, r18
    6fcc:	20 81       	ld	r18, Z
    6fce:	20 61       	ori	r18, 0x10	; 16
    6fd0:	fc 01       	movw	r30, r24
    6fd2:	20 83       	st	Z, r18
    6fd4:	9e 01       	movw	r18, r28
    6fd6:	24 57       	subi	r18, 0x74	; 116
    6fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    6fda:	80 e0       	ldi	r24, 0x00	; 0
    6fdc:	90 e0       	ldi	r25, 0x00	; 0
    6fde:	a0 e0       	ldi	r26, 0x00	; 0
    6fe0:	bf e3       	ldi	r27, 0x3F	; 63
    6fe2:	f9 01       	movw	r30, r18
    6fe4:	80 83       	st	Z, r24
    6fe6:	91 83       	std	Z+1, r25	; 0x01
    6fe8:	a2 83       	std	Z+2, r26	; 0x02
    6fea:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    6fec:	8e 01       	movw	r16, r28
    6fee:	00 57       	subi	r16, 0x70	; 112
    6ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    6ff2:	ce 01       	movw	r24, r28
    6ff4:	84 57       	subi	r24, 0x74	; 116
    6ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ff8:	2b ea       	ldi	r18, 0xAB	; 171
    6ffa:	3a ea       	ldi	r19, 0xAA	; 170
    6ffc:	4a e2       	ldi	r20, 0x2A	; 42
    6ffe:	50 e4       	ldi	r21, 0x40	; 64
    7000:	fc 01       	movw	r30, r24
    7002:	60 81       	ld	r22, Z
    7004:	71 81       	ldd	r23, Z+1	; 0x01
    7006:	82 81       	ldd	r24, Z+2	; 0x02
    7008:	93 81       	ldd	r25, Z+3	; 0x03
    700a:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    700e:	dc 01       	movw	r26, r24
    7010:	cb 01       	movw	r24, r22
    7012:	f8 01       	movw	r30, r16
    7014:	80 83       	st	Z, r24
    7016:	91 83       	std	Z+1, r25	; 0x01
    7018:	a2 83       	std	Z+2, r26	; 0x02
    701a:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    701c:	8e 01       	movw	r16, r28
    701e:	0c 56       	subi	r16, 0x6C	; 108
    7020:	1f 4f       	sbci	r17, 0xFF	; 255
    7022:	ce 01       	movw	r24, r28
    7024:	84 57       	subi	r24, 0x74	; 116
    7026:	9f 4f       	sbci	r25, 0xFF	; 255
    7028:	fc 01       	movw	r30, r24
    702a:	80 81       	ld	r24, Z
    702c:	91 81       	ldd	r25, Z+1	; 0x01
    702e:	a2 81       	ldd	r26, Z+2	; 0x02
    7030:	b3 81       	ldd	r27, Z+3	; 0x03
    7032:	9c 01       	movw	r18, r24
    7034:	ad 01       	movw	r20, r26
    7036:	bc 01       	movw	r22, r24
    7038:	cd 01       	movw	r24, r26
    703a:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    703e:	dc 01       	movw	r26, r24
    7040:	cb 01       	movw	r24, r22
    7042:	f8 01       	movw	r30, r16
    7044:	80 83       	st	Z, r24
    7046:	91 83       	std	Z+1, r25	; 0x01
    7048:	a2 83       	std	Z+2, r26	; 0x02
    704a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    704c:	ce 01       	movw	r24, r28
    704e:	80 57       	subi	r24, 0x70	; 112
    7050:	9f 4f       	sbci	r25, 0xFF	; 255
    7052:	20 e0       	ldi	r18, 0x00	; 0
    7054:	30 e0       	ldi	r19, 0x00	; 0
    7056:	40 e8       	ldi	r20, 0x80	; 128
    7058:	5f e3       	ldi	r21, 0x3F	; 63
    705a:	fc 01       	movw	r30, r24
    705c:	60 81       	ld	r22, Z
    705e:	71 81       	ldd	r23, Z+1	; 0x01
    7060:	82 81       	ldd	r24, Z+2	; 0x02
    7062:	93 81       	ldd	r25, Z+3	; 0x03
    7064:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    7068:	88 23       	and	r24, r24
    706a:	3c f4       	brge	.+14     	; 0x707a <LCDBusyLoop+0xc3e>
		__ticks = 1;
    706c:	ce 01       	movw	r24, r28
    706e:	88 56       	subi	r24, 0x68	; 104
    7070:	9f 4f       	sbci	r25, 0xFF	; 255
    7072:	21 e0       	ldi	r18, 0x01	; 1
    7074:	fc 01       	movw	r30, r24
    7076:	20 83       	st	Z, r18
    7078:	44 c1       	rjmp	.+648    	; 0x7302 <LCDBusyLoop+0xec6>
	else if (__tmp2 > 65535)
    707a:	ce 01       	movw	r24, r28
    707c:	8c 56       	subi	r24, 0x6C	; 108
    707e:	9f 4f       	sbci	r25, 0xFF	; 255
    7080:	20 e0       	ldi	r18, 0x00	; 0
    7082:	3f ef       	ldi	r19, 0xFF	; 255
    7084:	4f e7       	ldi	r20, 0x7F	; 127
    7086:	57 e4       	ldi	r21, 0x47	; 71
    7088:	fc 01       	movw	r30, r24
    708a:	60 81       	ld	r22, Z
    708c:	71 81       	ldd	r23, Z+1	; 0x01
    708e:	82 81       	ldd	r24, Z+2	; 0x02
    7090:	93 81       	ldd	r25, Z+3	; 0x03
    7092:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    7096:	18 16       	cp	r1, r24
    7098:	0c f0       	brlt	.+2      	; 0x709c <LCDBusyLoop+0xc60>
    709a:	e5 c0       	rjmp	.+458    	; 0x7266 <LCDBusyLoop+0xe2a>
	{
		_delay_ms(__us / 1000.0);
    709c:	ce 01       	movw	r24, r28
    709e:	84 57       	subi	r24, 0x74	; 116
    70a0:	9f 4f       	sbci	r25, 0xFF	; 255
    70a2:	20 e0       	ldi	r18, 0x00	; 0
    70a4:	30 e0       	ldi	r19, 0x00	; 0
    70a6:	4a e7       	ldi	r20, 0x7A	; 122
    70a8:	54 e4       	ldi	r21, 0x44	; 68
    70aa:	fc 01       	movw	r30, r24
    70ac:	60 81       	ld	r22, Z
    70ae:	71 81       	ldd	r23, Z+1	; 0x01
    70b0:	82 81       	ldd	r24, Z+2	; 0x02
    70b2:	93 81       	ldd	r25, Z+3	; 0x03
    70b4:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    70b8:	dc 01       	movw	r26, r24
    70ba:	cb 01       	movw	r24, r22
    70bc:	9e 01       	movw	r18, r28
    70be:	27 56       	subi	r18, 0x67	; 103
    70c0:	3f 4f       	sbci	r19, 0xFF	; 255
    70c2:	f9 01       	movw	r30, r18
    70c4:	80 83       	st	Z, r24
    70c6:	91 83       	std	Z+1, r25	; 0x01
    70c8:	a2 83       	std	Z+2, r26	; 0x02
    70ca:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    70cc:	8e 01       	movw	r16, r28
    70ce:	03 56       	subi	r16, 0x63	; 99
    70d0:	1f 4f       	sbci	r17, 0xFF	; 255
    70d2:	ce 01       	movw	r24, r28
    70d4:	87 56       	subi	r24, 0x67	; 103
    70d6:	9f 4f       	sbci	r25, 0xFF	; 255
    70d8:	20 e0       	ldi	r18, 0x00	; 0
    70da:	30 e0       	ldi	r19, 0x00	; 0
    70dc:	4a ef       	ldi	r20, 0xFA	; 250
    70de:	54 e4       	ldi	r21, 0x44	; 68
    70e0:	fc 01       	movw	r30, r24
    70e2:	60 81       	ld	r22, Z
    70e4:	71 81       	ldd	r23, Z+1	; 0x01
    70e6:	82 81       	ldd	r24, Z+2	; 0x02
    70e8:	93 81       	ldd	r25, Z+3	; 0x03
    70ea:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    70ee:	dc 01       	movw	r26, r24
    70f0:	cb 01       	movw	r24, r22
    70f2:	f8 01       	movw	r30, r16
    70f4:	80 83       	st	Z, r24
    70f6:	91 83       	std	Z+1, r25	; 0x01
    70f8:	a2 83       	std	Z+2, r26	; 0x02
    70fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    70fc:	ce 01       	movw	r24, r28
    70fe:	83 56       	subi	r24, 0x63	; 99
    7100:	9f 4f       	sbci	r25, 0xFF	; 255
    7102:	20 e0       	ldi	r18, 0x00	; 0
    7104:	30 e0       	ldi	r19, 0x00	; 0
    7106:	40 e8       	ldi	r20, 0x80	; 128
    7108:	5f e3       	ldi	r21, 0x3F	; 63
    710a:	fc 01       	movw	r30, r24
    710c:	60 81       	ld	r22, Z
    710e:	71 81       	ldd	r23, Z+1	; 0x01
    7110:	82 81       	ldd	r24, Z+2	; 0x02
    7112:	93 81       	ldd	r25, Z+3	; 0x03
    7114:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    7118:	88 23       	and	r24, r24
    711a:	4c f4       	brge	.+18     	; 0x712e <LCDBusyLoop+0xcf2>
		__ticks = 1;
    711c:	ce 01       	movw	r24, r28
    711e:	8f 55       	subi	r24, 0x5F	; 95
    7120:	9f 4f       	sbci	r25, 0xFF	; 255
    7122:	21 e0       	ldi	r18, 0x01	; 1
    7124:	30 e0       	ldi	r19, 0x00	; 0
    7126:	fc 01       	movw	r30, r24
    7128:	31 83       	std	Z+1, r19	; 0x01
    712a:	20 83       	st	Z, r18
    712c:	77 c0       	rjmp	.+238    	; 0x721c <LCDBusyLoop+0xde0>
	else if (__tmp > 65535)
    712e:	ce 01       	movw	r24, r28
    7130:	83 56       	subi	r24, 0x63	; 99
    7132:	9f 4f       	sbci	r25, 0xFF	; 255
    7134:	20 e0       	ldi	r18, 0x00	; 0
    7136:	3f ef       	ldi	r19, 0xFF	; 255
    7138:	4f e7       	ldi	r20, 0x7F	; 127
    713a:	57 e4       	ldi	r21, 0x47	; 71
    713c:	fc 01       	movw	r30, r24
    713e:	60 81       	ld	r22, Z
    7140:	71 81       	ldd	r23, Z+1	; 0x01
    7142:	82 81       	ldd	r24, Z+2	; 0x02
    7144:	93 81       	ldd	r25, Z+3	; 0x03
    7146:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    714a:	18 16       	cp	r1, r24
    714c:	0c f0       	brlt	.+2      	; 0x7150 <LCDBusyLoop+0xd14>
    714e:	54 c0       	rjmp	.+168    	; 0x71f8 <LCDBusyLoop+0xdbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7150:	ce 01       	movw	r24, r28
    7152:	87 56       	subi	r24, 0x67	; 103
    7154:	9f 4f       	sbci	r25, 0xFF	; 255
    7156:	20 e0       	ldi	r18, 0x00	; 0
    7158:	30 e0       	ldi	r19, 0x00	; 0
    715a:	40 e2       	ldi	r20, 0x20	; 32
    715c:	51 e4       	ldi	r21, 0x41	; 65
    715e:	fc 01       	movw	r30, r24
    7160:	60 81       	ld	r22, Z
    7162:	71 81       	ldd	r23, Z+1	; 0x01
    7164:	82 81       	ldd	r24, Z+2	; 0x02
    7166:	93 81       	ldd	r25, Z+3	; 0x03
    7168:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    716c:	dc 01       	movw	r26, r24
    716e:	cb 01       	movw	r24, r22
    7170:	8e 01       	movw	r16, r28
    7172:	0f 55       	subi	r16, 0x5F	; 95
    7174:	1f 4f       	sbci	r17, 0xFF	; 255
    7176:	bc 01       	movw	r22, r24
    7178:	cd 01       	movw	r24, r26
    717a:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    717e:	dc 01       	movw	r26, r24
    7180:	cb 01       	movw	r24, r22
    7182:	f8 01       	movw	r30, r16
    7184:	91 83       	std	Z+1, r25	; 0x01
    7186:	80 83       	st	Z, r24
    7188:	24 c0       	rjmp	.+72     	; 0x71d2 <LCDBusyLoop+0xd96>
    718a:	ce 01       	movw	r24, r28
    718c:	8d 55       	subi	r24, 0x5D	; 93
    718e:	9f 4f       	sbci	r25, 0xFF	; 255
    7190:	28 ec       	ldi	r18, 0xC8	; 200
    7192:	30 e0       	ldi	r19, 0x00	; 0
    7194:	fc 01       	movw	r30, r24
    7196:	31 83       	std	Z+1, r19	; 0x01
    7198:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    719a:	ce 01       	movw	r24, r28
    719c:	8d 55       	subi	r24, 0x5D	; 93
    719e:	9f 4f       	sbci	r25, 0xFF	; 255
    71a0:	fc 01       	movw	r30, r24
    71a2:	80 81       	ld	r24, Z
    71a4:	91 81       	ldd	r25, Z+1	; 0x01
    71a6:	01 97       	sbiw	r24, 0x01	; 1
    71a8:	f1 f7       	brne	.-4      	; 0x71a6 <LCDBusyLoop+0xd6a>
    71aa:	9e 01       	movw	r18, r28
    71ac:	2d 55       	subi	r18, 0x5D	; 93
    71ae:	3f 4f       	sbci	r19, 0xFF	; 255
    71b0:	f9 01       	movw	r30, r18
    71b2:	91 83       	std	Z+1, r25	; 0x01
    71b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    71b6:	ce 01       	movw	r24, r28
    71b8:	8f 55       	subi	r24, 0x5F	; 95
    71ba:	9f 4f       	sbci	r25, 0xFF	; 255
    71bc:	9e 01       	movw	r18, r28
    71be:	2f 55       	subi	r18, 0x5F	; 95
    71c0:	3f 4f       	sbci	r19, 0xFF	; 255
    71c2:	f9 01       	movw	r30, r18
    71c4:	20 81       	ld	r18, Z
    71c6:	31 81       	ldd	r19, Z+1	; 0x01
    71c8:	21 50       	subi	r18, 0x01	; 1
    71ca:	31 09       	sbc	r19, r1
    71cc:	fc 01       	movw	r30, r24
    71ce:	31 83       	std	Z+1, r19	; 0x01
    71d0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    71d2:	ce 01       	movw	r24, r28
    71d4:	8f 55       	subi	r24, 0x5F	; 95
    71d6:	9f 4f       	sbci	r25, 0xFF	; 255
    71d8:	fc 01       	movw	r30, r24
    71da:	80 81       	ld	r24, Z
    71dc:	91 81       	ldd	r25, Z+1	; 0x01
    71de:	89 2b       	or	r24, r25
    71e0:	a1 f6       	brne	.-88     	; 0x718a <LCDBusyLoop+0xd4e>
    71e2:	ce 01       	movw	r24, r28
    71e4:	88 56       	subi	r24, 0x68	; 104
    71e6:	9f 4f       	sbci	r25, 0xFF	; 255
    71e8:	9e 01       	movw	r18, r28
    71ea:	24 55       	subi	r18, 0x54	; 84
    71ec:	3f 4f       	sbci	r19, 0xFF	; 255
    71ee:	f9 01       	movw	r30, r18
    71f0:	20 81       	ld	r18, Z
    71f2:	fc 01       	movw	r30, r24
    71f4:	20 83       	st	Z, r18
    71f6:	85 c0       	rjmp	.+266    	; 0x7302 <LCDBusyLoop+0xec6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    71f8:	8e 01       	movw	r16, r28
    71fa:	0f 55       	subi	r16, 0x5F	; 95
    71fc:	1f 4f       	sbci	r17, 0xFF	; 255
    71fe:	ce 01       	movw	r24, r28
    7200:	83 56       	subi	r24, 0x63	; 99
    7202:	9f 4f       	sbci	r25, 0xFF	; 255
    7204:	fc 01       	movw	r30, r24
    7206:	60 81       	ld	r22, Z
    7208:	71 81       	ldd	r23, Z+1	; 0x01
    720a:	82 81       	ldd	r24, Z+2	; 0x02
    720c:	93 81       	ldd	r25, Z+3	; 0x03
    720e:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    7212:	dc 01       	movw	r26, r24
    7214:	cb 01       	movw	r24, r22
    7216:	f8 01       	movw	r30, r16
    7218:	91 83       	std	Z+1, r25	; 0x01
    721a:	80 83       	st	Z, r24
    721c:	ce 01       	movw	r24, r28
    721e:	8b 55       	subi	r24, 0x5B	; 91
    7220:	9f 4f       	sbci	r25, 0xFF	; 255
    7222:	9e 01       	movw	r18, r28
    7224:	2f 55       	subi	r18, 0x5F	; 95
    7226:	3f 4f       	sbci	r19, 0xFF	; 255
    7228:	f9 01       	movw	r30, r18
    722a:	20 81       	ld	r18, Z
    722c:	31 81       	ldd	r19, Z+1	; 0x01
    722e:	fc 01       	movw	r30, r24
    7230:	31 83       	std	Z+1, r19	; 0x01
    7232:	20 83       	st	Z, r18
    7234:	ce 01       	movw	r24, r28
    7236:	8b 55       	subi	r24, 0x5B	; 91
    7238:	9f 4f       	sbci	r25, 0xFF	; 255
    723a:	fc 01       	movw	r30, r24
    723c:	80 81       	ld	r24, Z
    723e:	91 81       	ldd	r25, Z+1	; 0x01
    7240:	01 97       	sbiw	r24, 0x01	; 1
    7242:	f1 f7       	brne	.-4      	; 0x7240 <LCDBusyLoop+0xe04>
    7244:	9e 01       	movw	r18, r28
    7246:	2b 55       	subi	r18, 0x5B	; 91
    7248:	3f 4f       	sbci	r19, 0xFF	; 255
    724a:	f9 01       	movw	r30, r18
    724c:	91 83       	std	Z+1, r25	; 0x01
    724e:	80 83       	st	Z, r24
    7250:	ce 01       	movw	r24, r28
    7252:	88 56       	subi	r24, 0x68	; 104
    7254:	9f 4f       	sbci	r25, 0xFF	; 255
    7256:	9e 01       	movw	r18, r28
    7258:	24 55       	subi	r18, 0x54	; 84
    725a:	3f 4f       	sbci	r19, 0xFF	; 255
    725c:	f9 01       	movw	r30, r18
    725e:	20 81       	ld	r18, Z
    7260:	fc 01       	movw	r30, r24
    7262:	20 83       	st	Z, r18
    7264:	4e c0       	rjmp	.+156    	; 0x7302 <LCDBusyLoop+0xec6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    7266:	ce 01       	movw	r24, r28
    7268:	80 57       	subi	r24, 0x70	; 112
    726a:	9f 4f       	sbci	r25, 0xFF	; 255
    726c:	20 e0       	ldi	r18, 0x00	; 0
    726e:	30 e0       	ldi	r19, 0x00	; 0
    7270:	4f e7       	ldi	r20, 0x7F	; 127
    7272:	53 e4       	ldi	r21, 0x43	; 67
    7274:	fc 01       	movw	r30, r24
    7276:	60 81       	ld	r22, Z
    7278:	71 81       	ldd	r23, Z+1	; 0x01
    727a:	82 81       	ldd	r24, Z+2	; 0x02
    727c:	93 81       	ldd	r25, Z+3	; 0x03
    727e:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    7282:	18 16       	cp	r1, r24
    7284:	6c f5       	brge	.+90     	; 0x72e0 <LCDBusyLoop+0xea4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    7286:	8e 01       	movw	r16, r28
    7288:	09 55       	subi	r16, 0x59	; 89
    728a:	1f 4f       	sbci	r17, 0xFF	; 255
    728c:	ce 01       	movw	r24, r28
    728e:	8c 56       	subi	r24, 0x6C	; 108
    7290:	9f 4f       	sbci	r25, 0xFF	; 255
    7292:	fc 01       	movw	r30, r24
    7294:	60 81       	ld	r22, Z
    7296:	71 81       	ldd	r23, Z+1	; 0x01
    7298:	82 81       	ldd	r24, Z+2	; 0x02
    729a:	93 81       	ldd	r25, Z+3	; 0x03
    729c:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    72a0:	dc 01       	movw	r26, r24
    72a2:	cb 01       	movw	r24, r22
    72a4:	f8 01       	movw	r30, r16
    72a6:	91 83       	std	Z+1, r25	; 0x01
    72a8:	80 83       	st	Z, r24
    72aa:	ce 01       	movw	r24, r28
    72ac:	87 55       	subi	r24, 0x57	; 87
    72ae:	9f 4f       	sbci	r25, 0xFF	; 255
    72b0:	9e 01       	movw	r18, r28
    72b2:	29 55       	subi	r18, 0x59	; 89
    72b4:	3f 4f       	sbci	r19, 0xFF	; 255
    72b6:	f9 01       	movw	r30, r18
    72b8:	20 81       	ld	r18, Z
    72ba:	31 81       	ldd	r19, Z+1	; 0x01
    72bc:	fc 01       	movw	r30, r24
    72be:	31 83       	std	Z+1, r19	; 0x01
    72c0:	20 83       	st	Z, r18
    72c2:	ce 01       	movw	r24, r28
    72c4:	87 55       	subi	r24, 0x57	; 87
    72c6:	9f 4f       	sbci	r25, 0xFF	; 255
    72c8:	fc 01       	movw	r30, r24
    72ca:	80 81       	ld	r24, Z
    72cc:	91 81       	ldd	r25, Z+1	; 0x01
    72ce:	01 97       	sbiw	r24, 0x01	; 1
    72d0:	f1 f7       	brne	.-4      	; 0x72ce <LCDBusyLoop+0xe92>
    72d2:	9e 01       	movw	r18, r28
    72d4:	27 55       	subi	r18, 0x57	; 87
    72d6:	3f 4f       	sbci	r19, 0xFF	; 255
    72d8:	f9 01       	movw	r30, r18
    72da:	91 83       	std	Z+1, r25	; 0x01
    72dc:	80 83       	st	Z, r24
    72de:	28 c0       	rjmp	.+80     	; 0x7330 <LCDBusyLoop+0xef4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    72e0:	8e 01       	movw	r16, r28
    72e2:	08 56       	subi	r16, 0x68	; 104
    72e4:	1f 4f       	sbci	r17, 0xFF	; 255
    72e6:	ce 01       	movw	r24, r28
    72e8:	80 57       	subi	r24, 0x70	; 112
    72ea:	9f 4f       	sbci	r25, 0xFF	; 255
    72ec:	fc 01       	movw	r30, r24
    72ee:	60 81       	ld	r22, Z
    72f0:	71 81       	ldd	r23, Z+1	; 0x01
    72f2:	82 81       	ldd	r24, Z+2	; 0x02
    72f4:	93 81       	ldd	r25, Z+3	; 0x03
    72f6:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    72fa:	dc 01       	movw	r26, r24
    72fc:	cb 01       	movw	r24, r22
    72fe:	f8 01       	movw	r30, r16
    7300:	80 83       	st	Z, r24
    7302:	ce 01       	movw	r24, r28
    7304:	85 55       	subi	r24, 0x55	; 85
    7306:	9f 4f       	sbci	r25, 0xFF	; 255
    7308:	9e 01       	movw	r18, r28
    730a:	28 56       	subi	r18, 0x68	; 104
    730c:	3f 4f       	sbci	r19, 0xFF	; 255
    730e:	f9 01       	movw	r30, r18
    7310:	20 81       	ld	r18, Z
    7312:	fc 01       	movw	r30, r24
    7314:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    7316:	ce 01       	movw	r24, r28
    7318:	85 55       	subi	r24, 0x55	; 85
    731a:	9f 4f       	sbci	r25, 0xFF	; 255
    731c:	fc 01       	movw	r30, r24
    731e:	80 81       	ld	r24, Z
    7320:	28 2f       	mov	r18, r24
    7322:	2a 95       	dec	r18
    7324:	f1 f7       	brne	.-4      	; 0x7322 <LCDBusyLoop+0xee6>
    7326:	ce 01       	movw	r24, r28
    7328:	85 55       	subi	r24, 0x55	; 85
    732a:	9f 4f       	sbci	r25, 0xFF	; 255
    732c:	fc 01       	movw	r30, r24
    732e:	20 83       	st	Z, r18
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
    7330:	83 e3       	ldi	r24, 0x33	; 51
    7332:	90 e0       	ldi	r25, 0x00	; 0
    7334:	fc 01       	movw	r30, r24
    7336:	80 81       	ld	r24, Z
    7338:	8e 83       	std	Y+6, r24	; 0x06
		temp&=0x0F;
    733a:	8e 81       	ldd	r24, Y+6	; 0x06
    733c:	8f 70       	andi	r24, 0x0F	; 15
    733e:	8e 83       	std	Y+6, r24	; 0x06

		status=status|temp;
    7340:	99 81       	ldd	r25, Y+1	; 0x01
    7342:	8e 81       	ldd	r24, Y+6	; 0x06
    7344:	89 2b       	or	r24, r25
    7346:	89 83       	std	Y+1, r24	; 0x01

		// si estan invertidos los pines de datos, invierto los bit dentro de los nibbles
		#ifdef LCD_DATA_INV
		char aux = status;
    7348:	89 81       	ldd	r24, Y+1	; 0x01
    734a:	8f 83       	std	Y+7, r24	; 0x07
		status=0;
    734c:	19 82       	std	Y+1, r1	; 0x01
		for (int i=0; i<4; i++){
    734e:	1b 82       	std	Y+3, r1	; 0x03
    7350:	1a 82       	std	Y+2, r1	; 0x02
    7352:	23 c0       	rjmp	.+70     	; 0x739a <LCDBusyLoop+0xf5e>
			if ((aux&(1<<i)) != 0){
    7354:	8f 81       	ldd	r24, Y+7	; 0x07
    7356:	88 2f       	mov	r24, r24
    7358:	90 e0       	ldi	r25, 0x00	; 0
    735a:	0a 80       	ldd	r0, Y+2	; 0x02
    735c:	02 c0       	rjmp	.+4      	; 0x7362 <LCDBusyLoop+0xf26>
    735e:	95 95       	asr	r25
    7360:	87 95       	ror	r24
    7362:	0a 94       	dec	r0
    7364:	e2 f7       	brpl	.-8      	; 0x735e <LCDBusyLoop+0xf22>
    7366:	81 70       	andi	r24, 0x01	; 1
    7368:	99 27       	eor	r25, r25
    736a:	89 2b       	or	r24, r25
    736c:	89 f0       	breq	.+34     	; 0x7390 <LCDBusyLoop+0xf54>
				status|=(1<<(3-i));
    736e:	23 e0       	ldi	r18, 0x03	; 3
    7370:	30 e0       	ldi	r19, 0x00	; 0
    7372:	8a 81       	ldd	r24, Y+2	; 0x02
    7374:	9b 81       	ldd	r25, Y+3	; 0x03
    7376:	28 1b       	sub	r18, r24
    7378:	39 0b       	sbc	r19, r25
    737a:	81 e0       	ldi	r24, 0x01	; 1
    737c:	90 e0       	ldi	r25, 0x00	; 0
    737e:	02 c0       	rjmp	.+4      	; 0x7384 <LCDBusyLoop+0xf48>
    7380:	88 0f       	add	r24, r24
    7382:	99 1f       	adc	r25, r25
    7384:	2a 95       	dec	r18
    7386:	e2 f7       	brpl	.-8      	; 0x7380 <LCDBusyLoop+0xf44>
    7388:	98 2f       	mov	r25, r24
    738a:	89 81       	ldd	r24, Y+1	; 0x01
    738c:	89 2b       	or	r24, r25
    738e:	89 83       	std	Y+1, r24	; 0x01

		// si estan invertidos los pines de datos, invierto los bit dentro de los nibbles
		#ifdef LCD_DATA_INV
		char aux = status;
		status=0;
		for (int i=0; i<4; i++){
    7390:	8a 81       	ldd	r24, Y+2	; 0x02
    7392:	9b 81       	ldd	r25, Y+3	; 0x03
    7394:	01 96       	adiw	r24, 0x01	; 1
    7396:	9b 83       	std	Y+3, r25	; 0x03
    7398:	8a 83       	std	Y+2, r24	; 0x02
    739a:	8a 81       	ldd	r24, Y+2	; 0x02
    739c:	9b 81       	ldd	r25, Y+3	; 0x03
    739e:	04 97       	sbiw	r24, 0x04	; 4
    73a0:	cc f2       	brlt	.-78     	; 0x7354 <LCDBusyLoop+0xf18>
			if ((aux&(1<<i)) != 0){
				status|=(1<<(3-i));
			}
		}
		for (int i=4; i<8; i++){
    73a2:	84 e0       	ldi	r24, 0x04	; 4
    73a4:	90 e0       	ldi	r25, 0x00	; 0
    73a6:	9d 83       	std	Y+5, r25	; 0x05
    73a8:	8c 83       	std	Y+4, r24	; 0x04
    73aa:	23 c0       	rjmp	.+70     	; 0x73f2 <LCDBusyLoop+0xfb6>
			if ((aux&(1<<i)) != 0){
    73ac:	8f 81       	ldd	r24, Y+7	; 0x07
    73ae:	88 2f       	mov	r24, r24
    73b0:	90 e0       	ldi	r25, 0x00	; 0
    73b2:	0c 80       	ldd	r0, Y+4	; 0x04
    73b4:	02 c0       	rjmp	.+4      	; 0x73ba <LCDBusyLoop+0xf7e>
    73b6:	95 95       	asr	r25
    73b8:	87 95       	ror	r24
    73ba:	0a 94       	dec	r0
    73bc:	e2 f7       	brpl	.-8      	; 0x73b6 <LCDBusyLoop+0xf7a>
    73be:	81 70       	andi	r24, 0x01	; 1
    73c0:	99 27       	eor	r25, r25
    73c2:	89 2b       	or	r24, r25
    73c4:	89 f0       	breq	.+34     	; 0x73e8 <LCDBusyLoop+0xfac>
				status|=(1<<(11-i));
    73c6:	2b e0       	ldi	r18, 0x0B	; 11
    73c8:	30 e0       	ldi	r19, 0x00	; 0
    73ca:	8c 81       	ldd	r24, Y+4	; 0x04
    73cc:	9d 81       	ldd	r25, Y+5	; 0x05
    73ce:	28 1b       	sub	r18, r24
    73d0:	39 0b       	sbc	r19, r25
    73d2:	81 e0       	ldi	r24, 0x01	; 1
    73d4:	90 e0       	ldi	r25, 0x00	; 0
    73d6:	02 c0       	rjmp	.+4      	; 0x73dc <LCDBusyLoop+0xfa0>
    73d8:	88 0f       	add	r24, r24
    73da:	99 1f       	adc	r25, r25
    73dc:	2a 95       	dec	r18
    73de:	e2 f7       	brpl	.-8      	; 0x73d8 <LCDBusyLoop+0xf9c>
    73e0:	98 2f       	mov	r25, r24
    73e2:	89 81       	ldd	r24, Y+1	; 0x01
    73e4:	89 2b       	or	r24, r25
    73e6:	89 83       	std	Y+1, r24	; 0x01
		for (int i=0; i<4; i++){
			if ((aux&(1<<i)) != 0){
				status|=(1<<(3-i));
			}
		}
		for (int i=4; i<8; i++){
    73e8:	8c 81       	ldd	r24, Y+4	; 0x04
    73ea:	9d 81       	ldd	r25, Y+5	; 0x05
    73ec:	01 96       	adiw	r24, 0x01	; 1
    73ee:	9d 83       	std	Y+5, r25	; 0x05
    73f0:	8c 83       	std	Y+4, r24	; 0x04
    73f2:	8c 81       	ldd	r24, Y+4	; 0x04
    73f4:	9d 81       	ldd	r25, Y+5	; 0x05
    73f6:	08 97       	sbiw	r24, 0x08	; 8
    73f8:	cc f2       	brlt	.-78     	; 0x73ac <LCDBusyLoop+0xf70>
				status|=(1<<(11-i));
			}
		}
		#endif

		busy=status & 0b10000000;
    73fa:	89 81       	ldd	r24, Y+1	; 0x01
    73fc:	80 78       	andi	r24, 0x80	; 128
    73fe:	88 87       	std	Y+8, r24	; 0x08
    7400:	9e 01       	movw	r18, r28
    7402:	23 55       	subi	r18, 0x53	; 83
    7404:	3f 4f       	sbci	r19, 0xFF	; 255
    7406:	80 e0       	ldi	r24, 0x00	; 0
    7408:	90 e0       	ldi	r25, 0x00	; 0
    740a:	a0 e0       	ldi	r26, 0x00	; 0
    740c:	bf e3       	ldi	r27, 0x3F	; 63
    740e:	f9 01       	movw	r30, r18
    7410:	80 83       	st	Z, r24
    7412:	91 83       	std	Z+1, r25	; 0x01
    7414:	a2 83       	std	Z+2, r26	; 0x02
    7416:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    7418:	8e 01       	movw	r16, r28
    741a:	0f 54       	subi	r16, 0x4F	; 79
    741c:	1f 4f       	sbci	r17, 0xFF	; 255
    741e:	ce 01       	movw	r24, r28
    7420:	83 55       	subi	r24, 0x53	; 83
    7422:	9f 4f       	sbci	r25, 0xFF	; 255
    7424:	2b ea       	ldi	r18, 0xAB	; 171
    7426:	3a ea       	ldi	r19, 0xAA	; 170
    7428:	4a e2       	ldi	r20, 0x2A	; 42
    742a:	50 e4       	ldi	r21, 0x40	; 64
    742c:	fc 01       	movw	r30, r24
    742e:	60 81       	ld	r22, Z
    7430:	71 81       	ldd	r23, Z+1	; 0x01
    7432:	82 81       	ldd	r24, Z+2	; 0x02
    7434:	93 81       	ldd	r25, Z+3	; 0x03
    7436:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    743a:	dc 01       	movw	r26, r24
    743c:	cb 01       	movw	r24, r22
    743e:	f8 01       	movw	r30, r16
    7440:	80 83       	st	Z, r24
    7442:	91 83       	std	Z+1, r25	; 0x01
    7444:	a2 83       	std	Z+2, r26	; 0x02
    7446:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    7448:	8e 01       	movw	r16, r28
    744a:	0b 54       	subi	r16, 0x4B	; 75
    744c:	1f 4f       	sbci	r17, 0xFF	; 255
    744e:	ce 01       	movw	r24, r28
    7450:	83 55       	subi	r24, 0x53	; 83
    7452:	9f 4f       	sbci	r25, 0xFF	; 255
    7454:	fc 01       	movw	r30, r24
    7456:	80 81       	ld	r24, Z
    7458:	91 81       	ldd	r25, Z+1	; 0x01
    745a:	a2 81       	ldd	r26, Z+2	; 0x02
    745c:	b3 81       	ldd	r27, Z+3	; 0x03
    745e:	9c 01       	movw	r18, r24
    7460:	ad 01       	movw	r20, r26
    7462:	bc 01       	movw	r22, r24
    7464:	cd 01       	movw	r24, r26
    7466:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    746a:	dc 01       	movw	r26, r24
    746c:	cb 01       	movw	r24, r22
    746e:	f8 01       	movw	r30, r16
    7470:	80 83       	st	Z, r24
    7472:	91 83       	std	Z+1, r25	; 0x01
    7474:	a2 83       	std	Z+2, r26	; 0x02
    7476:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7478:	ce 01       	movw	r24, r28
    747a:	8f 54       	subi	r24, 0x4F	; 79
    747c:	9f 4f       	sbci	r25, 0xFF	; 255
    747e:	20 e0       	ldi	r18, 0x00	; 0
    7480:	30 e0       	ldi	r19, 0x00	; 0
    7482:	40 e8       	ldi	r20, 0x80	; 128
    7484:	5f e3       	ldi	r21, 0x3F	; 63
    7486:	fc 01       	movw	r30, r24
    7488:	60 81       	ld	r22, Z
    748a:	71 81       	ldd	r23, Z+1	; 0x01
    748c:	82 81       	ldd	r24, Z+2	; 0x02
    748e:	93 81       	ldd	r25, Z+3	; 0x03
    7490:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    7494:	88 23       	and	r24, r24
    7496:	3c f4       	brge	.+14     	; 0x74a6 <LCDBusyLoop+0x106a>
		__ticks = 1;
    7498:	ce 01       	movw	r24, r28
    749a:	87 54       	subi	r24, 0x47	; 71
    749c:	9f 4f       	sbci	r25, 0xFF	; 255
    749e:	21 e0       	ldi	r18, 0x01	; 1
    74a0:	fc 01       	movw	r30, r24
    74a2:	20 83       	st	Z, r18
    74a4:	44 c1       	rjmp	.+648    	; 0x772e <LCDBusyLoop+0x12f2>
	else if (__tmp2 > 65535)
    74a6:	ce 01       	movw	r24, r28
    74a8:	8b 54       	subi	r24, 0x4B	; 75
    74aa:	9f 4f       	sbci	r25, 0xFF	; 255
    74ac:	20 e0       	ldi	r18, 0x00	; 0
    74ae:	3f ef       	ldi	r19, 0xFF	; 255
    74b0:	4f e7       	ldi	r20, 0x7F	; 127
    74b2:	57 e4       	ldi	r21, 0x47	; 71
    74b4:	fc 01       	movw	r30, r24
    74b6:	60 81       	ld	r22, Z
    74b8:	71 81       	ldd	r23, Z+1	; 0x01
    74ba:	82 81       	ldd	r24, Z+2	; 0x02
    74bc:	93 81       	ldd	r25, Z+3	; 0x03
    74be:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    74c2:	18 16       	cp	r1, r24
    74c4:	0c f0       	brlt	.+2      	; 0x74c8 <LCDBusyLoop+0x108c>
    74c6:	e5 c0       	rjmp	.+458    	; 0x7692 <LCDBusyLoop+0x1256>
	{
		_delay_ms(__us / 1000.0);
    74c8:	ce 01       	movw	r24, r28
    74ca:	83 55       	subi	r24, 0x53	; 83
    74cc:	9f 4f       	sbci	r25, 0xFF	; 255
    74ce:	20 e0       	ldi	r18, 0x00	; 0
    74d0:	30 e0       	ldi	r19, 0x00	; 0
    74d2:	4a e7       	ldi	r20, 0x7A	; 122
    74d4:	54 e4       	ldi	r21, 0x44	; 68
    74d6:	fc 01       	movw	r30, r24
    74d8:	60 81       	ld	r22, Z
    74da:	71 81       	ldd	r23, Z+1	; 0x01
    74dc:	82 81       	ldd	r24, Z+2	; 0x02
    74de:	93 81       	ldd	r25, Z+3	; 0x03
    74e0:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    74e4:	dc 01       	movw	r26, r24
    74e6:	cb 01       	movw	r24, r22
    74e8:	9e 01       	movw	r18, r28
    74ea:	26 54       	subi	r18, 0x46	; 70
    74ec:	3f 4f       	sbci	r19, 0xFF	; 255
    74ee:	f9 01       	movw	r30, r18
    74f0:	80 83       	st	Z, r24
    74f2:	91 83       	std	Z+1, r25	; 0x01
    74f4:	a2 83       	std	Z+2, r26	; 0x02
    74f6:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    74f8:	8e 01       	movw	r16, r28
    74fa:	02 54       	subi	r16, 0x42	; 66
    74fc:	1f 4f       	sbci	r17, 0xFF	; 255
    74fe:	ce 01       	movw	r24, r28
    7500:	86 54       	subi	r24, 0x46	; 70
    7502:	9f 4f       	sbci	r25, 0xFF	; 255
    7504:	20 e0       	ldi	r18, 0x00	; 0
    7506:	30 e0       	ldi	r19, 0x00	; 0
    7508:	4a ef       	ldi	r20, 0xFA	; 250
    750a:	54 e4       	ldi	r21, 0x44	; 68
    750c:	fc 01       	movw	r30, r24
    750e:	60 81       	ld	r22, Z
    7510:	71 81       	ldd	r23, Z+1	; 0x01
    7512:	82 81       	ldd	r24, Z+2	; 0x02
    7514:	93 81       	ldd	r25, Z+3	; 0x03
    7516:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    751a:	dc 01       	movw	r26, r24
    751c:	cb 01       	movw	r24, r22
    751e:	f8 01       	movw	r30, r16
    7520:	80 83       	st	Z, r24
    7522:	91 83       	std	Z+1, r25	; 0x01
    7524:	a2 83       	std	Z+2, r26	; 0x02
    7526:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7528:	ce 01       	movw	r24, r28
    752a:	82 54       	subi	r24, 0x42	; 66
    752c:	9f 4f       	sbci	r25, 0xFF	; 255
    752e:	20 e0       	ldi	r18, 0x00	; 0
    7530:	30 e0       	ldi	r19, 0x00	; 0
    7532:	40 e8       	ldi	r20, 0x80	; 128
    7534:	5f e3       	ldi	r21, 0x3F	; 63
    7536:	fc 01       	movw	r30, r24
    7538:	60 81       	ld	r22, Z
    753a:	71 81       	ldd	r23, Z+1	; 0x01
    753c:	82 81       	ldd	r24, Z+2	; 0x02
    753e:	93 81       	ldd	r25, Z+3	; 0x03
    7540:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    7544:	88 23       	and	r24, r24
    7546:	4c f4       	brge	.+18     	; 0x755a <LCDBusyLoop+0x111e>
		__ticks = 1;
    7548:	ce 01       	movw	r24, r28
    754a:	8e 53       	subi	r24, 0x3E	; 62
    754c:	9f 4f       	sbci	r25, 0xFF	; 255
    754e:	21 e0       	ldi	r18, 0x01	; 1
    7550:	30 e0       	ldi	r19, 0x00	; 0
    7552:	fc 01       	movw	r30, r24
    7554:	31 83       	std	Z+1, r19	; 0x01
    7556:	20 83       	st	Z, r18
    7558:	77 c0       	rjmp	.+238    	; 0x7648 <LCDBusyLoop+0x120c>
	else if (__tmp > 65535)
    755a:	ce 01       	movw	r24, r28
    755c:	82 54       	subi	r24, 0x42	; 66
    755e:	9f 4f       	sbci	r25, 0xFF	; 255
    7560:	20 e0       	ldi	r18, 0x00	; 0
    7562:	3f ef       	ldi	r19, 0xFF	; 255
    7564:	4f e7       	ldi	r20, 0x7F	; 127
    7566:	57 e4       	ldi	r21, 0x47	; 71
    7568:	fc 01       	movw	r30, r24
    756a:	60 81       	ld	r22, Z
    756c:	71 81       	ldd	r23, Z+1	; 0x01
    756e:	82 81       	ldd	r24, Z+2	; 0x02
    7570:	93 81       	ldd	r25, Z+3	; 0x03
    7572:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    7576:	18 16       	cp	r1, r24
    7578:	0c f0       	brlt	.+2      	; 0x757c <LCDBusyLoop+0x1140>
    757a:	54 c0       	rjmp	.+168    	; 0x7624 <LCDBusyLoop+0x11e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    757c:	ce 01       	movw	r24, r28
    757e:	86 54       	subi	r24, 0x46	; 70
    7580:	9f 4f       	sbci	r25, 0xFF	; 255
    7582:	20 e0       	ldi	r18, 0x00	; 0
    7584:	30 e0       	ldi	r19, 0x00	; 0
    7586:	40 e2       	ldi	r20, 0x20	; 32
    7588:	51 e4       	ldi	r21, 0x41	; 65
    758a:	fc 01       	movw	r30, r24
    758c:	60 81       	ld	r22, Z
    758e:	71 81       	ldd	r23, Z+1	; 0x01
    7590:	82 81       	ldd	r24, Z+2	; 0x02
    7592:	93 81       	ldd	r25, Z+3	; 0x03
    7594:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    7598:	dc 01       	movw	r26, r24
    759a:	cb 01       	movw	r24, r22
    759c:	8e 01       	movw	r16, r28
    759e:	0e 53       	subi	r16, 0x3E	; 62
    75a0:	1f 4f       	sbci	r17, 0xFF	; 255
    75a2:	bc 01       	movw	r22, r24
    75a4:	cd 01       	movw	r24, r26
    75a6:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    75aa:	dc 01       	movw	r26, r24
    75ac:	cb 01       	movw	r24, r22
    75ae:	f8 01       	movw	r30, r16
    75b0:	91 83       	std	Z+1, r25	; 0x01
    75b2:	80 83       	st	Z, r24
    75b4:	24 c0       	rjmp	.+72     	; 0x75fe <LCDBusyLoop+0x11c2>
    75b6:	ce 01       	movw	r24, r28
    75b8:	8c 53       	subi	r24, 0x3C	; 60
    75ba:	9f 4f       	sbci	r25, 0xFF	; 255
    75bc:	28 ec       	ldi	r18, 0xC8	; 200
    75be:	30 e0       	ldi	r19, 0x00	; 0
    75c0:	fc 01       	movw	r30, r24
    75c2:	31 83       	std	Z+1, r19	; 0x01
    75c4:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    75c6:	ce 01       	movw	r24, r28
    75c8:	8c 53       	subi	r24, 0x3C	; 60
    75ca:	9f 4f       	sbci	r25, 0xFF	; 255
    75cc:	fc 01       	movw	r30, r24
    75ce:	80 81       	ld	r24, Z
    75d0:	91 81       	ldd	r25, Z+1	; 0x01
    75d2:	01 97       	sbiw	r24, 0x01	; 1
    75d4:	f1 f7       	brne	.-4      	; 0x75d2 <LCDBusyLoop+0x1196>
    75d6:	9e 01       	movw	r18, r28
    75d8:	2c 53       	subi	r18, 0x3C	; 60
    75da:	3f 4f       	sbci	r19, 0xFF	; 255
    75dc:	f9 01       	movw	r30, r18
    75de:	91 83       	std	Z+1, r25	; 0x01
    75e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    75e2:	ce 01       	movw	r24, r28
    75e4:	8e 53       	subi	r24, 0x3E	; 62
    75e6:	9f 4f       	sbci	r25, 0xFF	; 255
    75e8:	9e 01       	movw	r18, r28
    75ea:	2e 53       	subi	r18, 0x3E	; 62
    75ec:	3f 4f       	sbci	r19, 0xFF	; 255
    75ee:	f9 01       	movw	r30, r18
    75f0:	20 81       	ld	r18, Z
    75f2:	31 81       	ldd	r19, Z+1	; 0x01
    75f4:	21 50       	subi	r18, 0x01	; 1
    75f6:	31 09       	sbc	r19, r1
    75f8:	fc 01       	movw	r30, r24
    75fa:	31 83       	std	Z+1, r19	; 0x01
    75fc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    75fe:	ce 01       	movw	r24, r28
    7600:	8e 53       	subi	r24, 0x3E	; 62
    7602:	9f 4f       	sbci	r25, 0xFF	; 255
    7604:	fc 01       	movw	r30, r24
    7606:	80 81       	ld	r24, Z
    7608:	91 81       	ldd	r25, Z+1	; 0x01
    760a:	89 2b       	or	r24, r25
    760c:	a1 f6       	brne	.-88     	; 0x75b6 <LCDBusyLoop+0x117a>
    760e:	ce 01       	movw	r24, r28
    7610:	87 54       	subi	r24, 0x47	; 71
    7612:	9f 4f       	sbci	r25, 0xFF	; 255
    7614:	9e 01       	movw	r18, r28
    7616:	23 53       	subi	r18, 0x33	; 51
    7618:	3f 4f       	sbci	r19, 0xFF	; 255
    761a:	f9 01       	movw	r30, r18
    761c:	20 81       	ld	r18, Z
    761e:	fc 01       	movw	r30, r24
    7620:	20 83       	st	Z, r18
    7622:	85 c0       	rjmp	.+266    	; 0x772e <LCDBusyLoop+0x12f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7624:	8e 01       	movw	r16, r28
    7626:	0e 53       	subi	r16, 0x3E	; 62
    7628:	1f 4f       	sbci	r17, 0xFF	; 255
    762a:	ce 01       	movw	r24, r28
    762c:	82 54       	subi	r24, 0x42	; 66
    762e:	9f 4f       	sbci	r25, 0xFF	; 255
    7630:	fc 01       	movw	r30, r24
    7632:	60 81       	ld	r22, Z
    7634:	71 81       	ldd	r23, Z+1	; 0x01
    7636:	82 81       	ldd	r24, Z+2	; 0x02
    7638:	93 81       	ldd	r25, Z+3	; 0x03
    763a:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    763e:	dc 01       	movw	r26, r24
    7640:	cb 01       	movw	r24, r22
    7642:	f8 01       	movw	r30, r16
    7644:	91 83       	std	Z+1, r25	; 0x01
    7646:	80 83       	st	Z, r24
    7648:	ce 01       	movw	r24, r28
    764a:	8a 53       	subi	r24, 0x3A	; 58
    764c:	9f 4f       	sbci	r25, 0xFF	; 255
    764e:	9e 01       	movw	r18, r28
    7650:	2e 53       	subi	r18, 0x3E	; 62
    7652:	3f 4f       	sbci	r19, 0xFF	; 255
    7654:	f9 01       	movw	r30, r18
    7656:	20 81       	ld	r18, Z
    7658:	31 81       	ldd	r19, Z+1	; 0x01
    765a:	fc 01       	movw	r30, r24
    765c:	31 83       	std	Z+1, r19	; 0x01
    765e:	20 83       	st	Z, r18
    7660:	ce 01       	movw	r24, r28
    7662:	8a 53       	subi	r24, 0x3A	; 58
    7664:	9f 4f       	sbci	r25, 0xFF	; 255
    7666:	fc 01       	movw	r30, r24
    7668:	80 81       	ld	r24, Z
    766a:	91 81       	ldd	r25, Z+1	; 0x01
    766c:	01 97       	sbiw	r24, 0x01	; 1
    766e:	f1 f7       	brne	.-4      	; 0x766c <LCDBusyLoop+0x1230>
    7670:	9e 01       	movw	r18, r28
    7672:	2a 53       	subi	r18, 0x3A	; 58
    7674:	3f 4f       	sbci	r19, 0xFF	; 255
    7676:	f9 01       	movw	r30, r18
    7678:	91 83       	std	Z+1, r25	; 0x01
    767a:	80 83       	st	Z, r24
    767c:	ce 01       	movw	r24, r28
    767e:	87 54       	subi	r24, 0x47	; 71
    7680:	9f 4f       	sbci	r25, 0xFF	; 255
    7682:	9e 01       	movw	r18, r28
    7684:	23 53       	subi	r18, 0x33	; 51
    7686:	3f 4f       	sbci	r19, 0xFF	; 255
    7688:	f9 01       	movw	r30, r18
    768a:	20 81       	ld	r18, Z
    768c:	fc 01       	movw	r30, r24
    768e:	20 83       	st	Z, r18
    7690:	4e c0       	rjmp	.+156    	; 0x772e <LCDBusyLoop+0x12f2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    7692:	ce 01       	movw	r24, r28
    7694:	8f 54       	subi	r24, 0x4F	; 79
    7696:	9f 4f       	sbci	r25, 0xFF	; 255
    7698:	20 e0       	ldi	r18, 0x00	; 0
    769a:	30 e0       	ldi	r19, 0x00	; 0
    769c:	4f e7       	ldi	r20, 0x7F	; 127
    769e:	53 e4       	ldi	r21, 0x43	; 67
    76a0:	fc 01       	movw	r30, r24
    76a2:	60 81       	ld	r22, Z
    76a4:	71 81       	ldd	r23, Z+1	; 0x01
    76a6:	82 81       	ldd	r24, Z+2	; 0x02
    76a8:	93 81       	ldd	r25, Z+3	; 0x03
    76aa:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    76ae:	18 16       	cp	r1, r24
    76b0:	6c f5       	brge	.+90     	; 0x770c <LCDBusyLoop+0x12d0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    76b2:	8e 01       	movw	r16, r28
    76b4:	08 53       	subi	r16, 0x38	; 56
    76b6:	1f 4f       	sbci	r17, 0xFF	; 255
    76b8:	ce 01       	movw	r24, r28
    76ba:	8b 54       	subi	r24, 0x4B	; 75
    76bc:	9f 4f       	sbci	r25, 0xFF	; 255
    76be:	fc 01       	movw	r30, r24
    76c0:	60 81       	ld	r22, Z
    76c2:	71 81       	ldd	r23, Z+1	; 0x01
    76c4:	82 81       	ldd	r24, Z+2	; 0x02
    76c6:	93 81       	ldd	r25, Z+3	; 0x03
    76c8:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    76cc:	dc 01       	movw	r26, r24
    76ce:	cb 01       	movw	r24, r22
    76d0:	f8 01       	movw	r30, r16
    76d2:	91 83       	std	Z+1, r25	; 0x01
    76d4:	80 83       	st	Z, r24
    76d6:	ce 01       	movw	r24, r28
    76d8:	86 53       	subi	r24, 0x36	; 54
    76da:	9f 4f       	sbci	r25, 0xFF	; 255
    76dc:	9e 01       	movw	r18, r28
    76de:	28 53       	subi	r18, 0x38	; 56
    76e0:	3f 4f       	sbci	r19, 0xFF	; 255
    76e2:	f9 01       	movw	r30, r18
    76e4:	20 81       	ld	r18, Z
    76e6:	31 81       	ldd	r19, Z+1	; 0x01
    76e8:	fc 01       	movw	r30, r24
    76ea:	31 83       	std	Z+1, r19	; 0x01
    76ec:	20 83       	st	Z, r18
    76ee:	ce 01       	movw	r24, r28
    76f0:	86 53       	subi	r24, 0x36	; 54
    76f2:	9f 4f       	sbci	r25, 0xFF	; 255
    76f4:	fc 01       	movw	r30, r24
    76f6:	80 81       	ld	r24, Z
    76f8:	91 81       	ldd	r25, Z+1	; 0x01
    76fa:	01 97       	sbiw	r24, 0x01	; 1
    76fc:	f1 f7       	brne	.-4      	; 0x76fa <LCDBusyLoop+0x12be>
    76fe:	9e 01       	movw	r18, r28
    7700:	26 53       	subi	r18, 0x36	; 54
    7702:	3f 4f       	sbci	r19, 0xFF	; 255
    7704:	f9 01       	movw	r30, r18
    7706:	91 83       	std	Z+1, r25	; 0x01
    7708:	80 83       	st	Z, r24
    770a:	28 c0       	rjmp	.+80     	; 0x775c <LCDBusyLoop+0x1320>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    770c:	8e 01       	movw	r16, r28
    770e:	07 54       	subi	r16, 0x47	; 71
    7710:	1f 4f       	sbci	r17, 0xFF	; 255
    7712:	ce 01       	movw	r24, r28
    7714:	8f 54       	subi	r24, 0x4F	; 79
    7716:	9f 4f       	sbci	r25, 0xFF	; 255
    7718:	fc 01       	movw	r30, r24
    771a:	60 81       	ld	r22, Z
    771c:	71 81       	ldd	r23, Z+1	; 0x01
    771e:	82 81       	ldd	r24, Z+2	; 0x02
    7720:	93 81       	ldd	r25, Z+3	; 0x03
    7722:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    7726:	dc 01       	movw	r26, r24
    7728:	cb 01       	movw	r24, r22
    772a:	f8 01       	movw	r30, r16
    772c:	80 83       	st	Z, r24
    772e:	ce 01       	movw	r24, r28
    7730:	84 53       	subi	r24, 0x34	; 52
    7732:	9f 4f       	sbci	r25, 0xFF	; 255
    7734:	9e 01       	movw	r18, r28
    7736:	27 54       	subi	r18, 0x47	; 71
    7738:	3f 4f       	sbci	r19, 0xFF	; 255
    773a:	f9 01       	movw	r30, r18
    773c:	20 81       	ld	r18, Z
    773e:	fc 01       	movw	r30, r24
    7740:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    7742:	ce 01       	movw	r24, r28
    7744:	84 53       	subi	r24, 0x34	; 52
    7746:	9f 4f       	sbci	r25, 0xFF	; 255
    7748:	fc 01       	movw	r30, r24
    774a:	80 81       	ld	r24, Z
    774c:	28 2f       	mov	r18, r24
    774e:	2a 95       	dec	r18
    7750:	f1 f7       	brne	.-4      	; 0x774e <LCDBusyLoop+0x1312>
    7752:	ce 01       	movw	r24, r28
    7754:	84 53       	subi	r24, 0x34	; 52
    7756:	9f 4f       	sbci	r25, 0xFF	; 255
    7758:	fc 01       	movw	r30, r24
    775a:	20 83       	st	Z, r18

		_delay_us(0.5);
		CLEAR_E();
    775c:	85 e6       	ldi	r24, 0x65	; 101
    775e:	90 e0       	ldi	r25, 0x00	; 0
    7760:	25 e6       	ldi	r18, 0x65	; 101
    7762:	30 e0       	ldi	r19, 0x00	; 0
    7764:	f9 01       	movw	r30, r18
    7766:	20 81       	ld	r18, Z
    7768:	2f 7e       	andi	r18, 0xEF	; 239
    776a:	fc 01       	movw	r30, r24
    776c:	20 83       	st	Z, r18
    776e:	9e 01       	movw	r18, r28
    7770:	22 53       	subi	r18, 0x32	; 50
    7772:	3f 4f       	sbci	r19, 0xFF	; 255
    7774:	80 e0       	ldi	r24, 0x00	; 0
    7776:	90 e0       	ldi	r25, 0x00	; 0
    7778:	a0 e8       	ldi	r26, 0x80	; 128
    777a:	bf e3       	ldi	r27, 0x3F	; 63
    777c:	f9 01       	movw	r30, r18
    777e:	80 83       	st	Z, r24
    7780:	91 83       	std	Z+1, r25	; 0x01
    7782:	a2 83       	std	Z+2, r26	; 0x02
    7784:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    7786:	8e 01       	movw	r16, r28
    7788:	0e 52       	subi	r16, 0x2E	; 46
    778a:	1f 4f       	sbci	r17, 0xFF	; 255
    778c:	ce 01       	movw	r24, r28
    778e:	82 53       	subi	r24, 0x32	; 50
    7790:	9f 4f       	sbci	r25, 0xFF	; 255
    7792:	2b ea       	ldi	r18, 0xAB	; 171
    7794:	3a ea       	ldi	r19, 0xAA	; 170
    7796:	4a e2       	ldi	r20, 0x2A	; 42
    7798:	50 e4       	ldi	r21, 0x40	; 64
    779a:	fc 01       	movw	r30, r24
    779c:	60 81       	ld	r22, Z
    779e:	71 81       	ldd	r23, Z+1	; 0x01
    77a0:	82 81       	ldd	r24, Z+2	; 0x02
    77a2:	93 81       	ldd	r25, Z+3	; 0x03
    77a4:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    77a8:	dc 01       	movw	r26, r24
    77aa:	cb 01       	movw	r24, r22
    77ac:	f8 01       	movw	r30, r16
    77ae:	80 83       	st	Z, r24
    77b0:	91 83       	std	Z+1, r25	; 0x01
    77b2:	a2 83       	std	Z+2, r26	; 0x02
    77b4:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    77b6:	8e 01       	movw	r16, r28
    77b8:	0a 52       	subi	r16, 0x2A	; 42
    77ba:	1f 4f       	sbci	r17, 0xFF	; 255
    77bc:	ce 01       	movw	r24, r28
    77be:	82 53       	subi	r24, 0x32	; 50
    77c0:	9f 4f       	sbci	r25, 0xFF	; 255
    77c2:	fc 01       	movw	r30, r24
    77c4:	80 81       	ld	r24, Z
    77c6:	91 81       	ldd	r25, Z+1	; 0x01
    77c8:	a2 81       	ldd	r26, Z+2	; 0x02
    77ca:	b3 81       	ldd	r27, Z+3	; 0x03
    77cc:	9c 01       	movw	r18, r24
    77ce:	ad 01       	movw	r20, r26
    77d0:	bc 01       	movw	r22, r24
    77d2:	cd 01       	movw	r24, r26
    77d4:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    77d8:	dc 01       	movw	r26, r24
    77da:	cb 01       	movw	r24, r22
    77dc:	f8 01       	movw	r30, r16
    77de:	80 83       	st	Z, r24
    77e0:	91 83       	std	Z+1, r25	; 0x01
    77e2:	a2 83       	std	Z+2, r26	; 0x02
    77e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    77e6:	ce 01       	movw	r24, r28
    77e8:	8e 52       	subi	r24, 0x2E	; 46
    77ea:	9f 4f       	sbci	r25, 0xFF	; 255
    77ec:	20 e0       	ldi	r18, 0x00	; 0
    77ee:	30 e0       	ldi	r19, 0x00	; 0
    77f0:	40 e8       	ldi	r20, 0x80	; 128
    77f2:	5f e3       	ldi	r21, 0x3F	; 63
    77f4:	fc 01       	movw	r30, r24
    77f6:	60 81       	ld	r22, Z
    77f8:	71 81       	ldd	r23, Z+1	; 0x01
    77fa:	82 81       	ldd	r24, Z+2	; 0x02
    77fc:	93 81       	ldd	r25, Z+3	; 0x03
    77fe:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    7802:	88 23       	and	r24, r24
    7804:	3c f4       	brge	.+14     	; 0x7814 <LCDBusyLoop+0x13d8>
		__ticks = 1;
    7806:	ce 01       	movw	r24, r28
    7808:	86 52       	subi	r24, 0x26	; 38
    780a:	9f 4f       	sbci	r25, 0xFF	; 255
    780c:	21 e0       	ldi	r18, 0x01	; 1
    780e:	fc 01       	movw	r30, r24
    7810:	20 83       	st	Z, r18
    7812:	44 c1       	rjmp	.+648    	; 0x7a9c <LCDBusyLoop+0x1660>
	else if (__tmp2 > 65535)
    7814:	ce 01       	movw	r24, r28
    7816:	8a 52       	subi	r24, 0x2A	; 42
    7818:	9f 4f       	sbci	r25, 0xFF	; 255
    781a:	20 e0       	ldi	r18, 0x00	; 0
    781c:	3f ef       	ldi	r19, 0xFF	; 255
    781e:	4f e7       	ldi	r20, 0x7F	; 127
    7820:	57 e4       	ldi	r21, 0x47	; 71
    7822:	fc 01       	movw	r30, r24
    7824:	60 81       	ld	r22, Z
    7826:	71 81       	ldd	r23, Z+1	; 0x01
    7828:	82 81       	ldd	r24, Z+2	; 0x02
    782a:	93 81       	ldd	r25, Z+3	; 0x03
    782c:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    7830:	18 16       	cp	r1, r24
    7832:	0c f0       	brlt	.+2      	; 0x7836 <LCDBusyLoop+0x13fa>
    7834:	e5 c0       	rjmp	.+458    	; 0x7a00 <LCDBusyLoop+0x15c4>
	{
		_delay_ms(__us / 1000.0);
    7836:	ce 01       	movw	r24, r28
    7838:	82 53       	subi	r24, 0x32	; 50
    783a:	9f 4f       	sbci	r25, 0xFF	; 255
    783c:	20 e0       	ldi	r18, 0x00	; 0
    783e:	30 e0       	ldi	r19, 0x00	; 0
    7840:	4a e7       	ldi	r20, 0x7A	; 122
    7842:	54 e4       	ldi	r21, 0x44	; 68
    7844:	fc 01       	movw	r30, r24
    7846:	60 81       	ld	r22, Z
    7848:	71 81       	ldd	r23, Z+1	; 0x01
    784a:	82 81       	ldd	r24, Z+2	; 0x02
    784c:	93 81       	ldd	r25, Z+3	; 0x03
    784e:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    7852:	dc 01       	movw	r26, r24
    7854:	cb 01       	movw	r24, r22
    7856:	9e 01       	movw	r18, r28
    7858:	25 52       	subi	r18, 0x25	; 37
    785a:	3f 4f       	sbci	r19, 0xFF	; 255
    785c:	f9 01       	movw	r30, r18
    785e:	80 83       	st	Z, r24
    7860:	91 83       	std	Z+1, r25	; 0x01
    7862:	a2 83       	std	Z+2, r26	; 0x02
    7864:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    7866:	8e 01       	movw	r16, r28
    7868:	01 52       	subi	r16, 0x21	; 33
    786a:	1f 4f       	sbci	r17, 0xFF	; 255
    786c:	ce 01       	movw	r24, r28
    786e:	85 52       	subi	r24, 0x25	; 37
    7870:	9f 4f       	sbci	r25, 0xFF	; 255
    7872:	20 e0       	ldi	r18, 0x00	; 0
    7874:	30 e0       	ldi	r19, 0x00	; 0
    7876:	4a ef       	ldi	r20, 0xFA	; 250
    7878:	54 e4       	ldi	r21, 0x44	; 68
    787a:	fc 01       	movw	r30, r24
    787c:	60 81       	ld	r22, Z
    787e:	71 81       	ldd	r23, Z+1	; 0x01
    7880:	82 81       	ldd	r24, Z+2	; 0x02
    7882:	93 81       	ldd	r25, Z+3	; 0x03
    7884:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    7888:	dc 01       	movw	r26, r24
    788a:	cb 01       	movw	r24, r22
    788c:	f8 01       	movw	r30, r16
    788e:	80 83       	st	Z, r24
    7890:	91 83       	std	Z+1, r25	; 0x01
    7892:	a2 83       	std	Z+2, r26	; 0x02
    7894:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7896:	ce 01       	movw	r24, r28
    7898:	81 52       	subi	r24, 0x21	; 33
    789a:	9f 4f       	sbci	r25, 0xFF	; 255
    789c:	20 e0       	ldi	r18, 0x00	; 0
    789e:	30 e0       	ldi	r19, 0x00	; 0
    78a0:	40 e8       	ldi	r20, 0x80	; 128
    78a2:	5f e3       	ldi	r21, 0x3F	; 63
    78a4:	fc 01       	movw	r30, r24
    78a6:	60 81       	ld	r22, Z
    78a8:	71 81       	ldd	r23, Z+1	; 0x01
    78aa:	82 81       	ldd	r24, Z+2	; 0x02
    78ac:	93 81       	ldd	r25, Z+3	; 0x03
    78ae:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    78b2:	88 23       	and	r24, r24
    78b4:	4c f4       	brge	.+18     	; 0x78c8 <LCDBusyLoop+0x148c>
		__ticks = 1;
    78b6:	ce 01       	movw	r24, r28
    78b8:	8d 51       	subi	r24, 0x1D	; 29
    78ba:	9f 4f       	sbci	r25, 0xFF	; 255
    78bc:	21 e0       	ldi	r18, 0x01	; 1
    78be:	30 e0       	ldi	r19, 0x00	; 0
    78c0:	fc 01       	movw	r30, r24
    78c2:	31 83       	std	Z+1, r19	; 0x01
    78c4:	20 83       	st	Z, r18
    78c6:	77 c0       	rjmp	.+238    	; 0x79b6 <LCDBusyLoop+0x157a>
	else if (__tmp > 65535)
    78c8:	ce 01       	movw	r24, r28
    78ca:	81 52       	subi	r24, 0x21	; 33
    78cc:	9f 4f       	sbci	r25, 0xFF	; 255
    78ce:	20 e0       	ldi	r18, 0x00	; 0
    78d0:	3f ef       	ldi	r19, 0xFF	; 255
    78d2:	4f e7       	ldi	r20, 0x7F	; 127
    78d4:	57 e4       	ldi	r21, 0x47	; 71
    78d6:	fc 01       	movw	r30, r24
    78d8:	60 81       	ld	r22, Z
    78da:	71 81       	ldd	r23, Z+1	; 0x01
    78dc:	82 81       	ldd	r24, Z+2	; 0x02
    78de:	93 81       	ldd	r25, Z+3	; 0x03
    78e0:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    78e4:	18 16       	cp	r1, r24
    78e6:	0c f0       	brlt	.+2      	; 0x78ea <LCDBusyLoop+0x14ae>
    78e8:	54 c0       	rjmp	.+168    	; 0x7992 <LCDBusyLoop+0x1556>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    78ea:	ce 01       	movw	r24, r28
    78ec:	85 52       	subi	r24, 0x25	; 37
    78ee:	9f 4f       	sbci	r25, 0xFF	; 255
    78f0:	20 e0       	ldi	r18, 0x00	; 0
    78f2:	30 e0       	ldi	r19, 0x00	; 0
    78f4:	40 e2       	ldi	r20, 0x20	; 32
    78f6:	51 e4       	ldi	r21, 0x41	; 65
    78f8:	fc 01       	movw	r30, r24
    78fa:	60 81       	ld	r22, Z
    78fc:	71 81       	ldd	r23, Z+1	; 0x01
    78fe:	82 81       	ldd	r24, Z+2	; 0x02
    7900:	93 81       	ldd	r25, Z+3	; 0x03
    7902:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    7906:	dc 01       	movw	r26, r24
    7908:	cb 01       	movw	r24, r22
    790a:	8e 01       	movw	r16, r28
    790c:	0d 51       	subi	r16, 0x1D	; 29
    790e:	1f 4f       	sbci	r17, 0xFF	; 255
    7910:	bc 01       	movw	r22, r24
    7912:	cd 01       	movw	r24, r26
    7914:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    7918:	dc 01       	movw	r26, r24
    791a:	cb 01       	movw	r24, r22
    791c:	f8 01       	movw	r30, r16
    791e:	91 83       	std	Z+1, r25	; 0x01
    7920:	80 83       	st	Z, r24
    7922:	24 c0       	rjmp	.+72     	; 0x796c <LCDBusyLoop+0x1530>
    7924:	ce 01       	movw	r24, r28
    7926:	8b 51       	subi	r24, 0x1B	; 27
    7928:	9f 4f       	sbci	r25, 0xFF	; 255
    792a:	28 ec       	ldi	r18, 0xC8	; 200
    792c:	30 e0       	ldi	r19, 0x00	; 0
    792e:	fc 01       	movw	r30, r24
    7930:	31 83       	std	Z+1, r19	; 0x01
    7932:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    7934:	ce 01       	movw	r24, r28
    7936:	8b 51       	subi	r24, 0x1B	; 27
    7938:	9f 4f       	sbci	r25, 0xFF	; 255
    793a:	fc 01       	movw	r30, r24
    793c:	80 81       	ld	r24, Z
    793e:	91 81       	ldd	r25, Z+1	; 0x01
    7940:	01 97       	sbiw	r24, 0x01	; 1
    7942:	f1 f7       	brne	.-4      	; 0x7940 <LCDBusyLoop+0x1504>
    7944:	9e 01       	movw	r18, r28
    7946:	2b 51       	subi	r18, 0x1B	; 27
    7948:	3f 4f       	sbci	r19, 0xFF	; 255
    794a:	f9 01       	movw	r30, r18
    794c:	91 83       	std	Z+1, r25	; 0x01
    794e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7950:	ce 01       	movw	r24, r28
    7952:	8d 51       	subi	r24, 0x1D	; 29
    7954:	9f 4f       	sbci	r25, 0xFF	; 255
    7956:	9e 01       	movw	r18, r28
    7958:	2d 51       	subi	r18, 0x1D	; 29
    795a:	3f 4f       	sbci	r19, 0xFF	; 255
    795c:	f9 01       	movw	r30, r18
    795e:	20 81       	ld	r18, Z
    7960:	31 81       	ldd	r19, Z+1	; 0x01
    7962:	21 50       	subi	r18, 0x01	; 1
    7964:	31 09       	sbc	r19, r1
    7966:	fc 01       	movw	r30, r24
    7968:	31 83       	std	Z+1, r19	; 0x01
    796a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    796c:	ce 01       	movw	r24, r28
    796e:	8d 51       	subi	r24, 0x1D	; 29
    7970:	9f 4f       	sbci	r25, 0xFF	; 255
    7972:	fc 01       	movw	r30, r24
    7974:	80 81       	ld	r24, Z
    7976:	91 81       	ldd	r25, Z+1	; 0x01
    7978:	89 2b       	or	r24, r25
    797a:	a1 f6       	brne	.-88     	; 0x7924 <LCDBusyLoop+0x14e8>
    797c:	ce 01       	movw	r24, r28
    797e:	86 52       	subi	r24, 0x26	; 38
    7980:	9f 4f       	sbci	r25, 0xFF	; 255
    7982:	9e 01       	movw	r18, r28
    7984:	22 51       	subi	r18, 0x12	; 18
    7986:	3f 4f       	sbci	r19, 0xFF	; 255
    7988:	f9 01       	movw	r30, r18
    798a:	20 81       	ld	r18, Z
    798c:	fc 01       	movw	r30, r24
    798e:	20 83       	st	Z, r18
    7990:	85 c0       	rjmp	.+266    	; 0x7a9c <LCDBusyLoop+0x1660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7992:	8e 01       	movw	r16, r28
    7994:	0d 51       	subi	r16, 0x1D	; 29
    7996:	1f 4f       	sbci	r17, 0xFF	; 255
    7998:	ce 01       	movw	r24, r28
    799a:	81 52       	subi	r24, 0x21	; 33
    799c:	9f 4f       	sbci	r25, 0xFF	; 255
    799e:	fc 01       	movw	r30, r24
    79a0:	60 81       	ld	r22, Z
    79a2:	71 81       	ldd	r23, Z+1	; 0x01
    79a4:	82 81       	ldd	r24, Z+2	; 0x02
    79a6:	93 81       	ldd	r25, Z+3	; 0x03
    79a8:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    79ac:	dc 01       	movw	r26, r24
    79ae:	cb 01       	movw	r24, r22
    79b0:	f8 01       	movw	r30, r16
    79b2:	91 83       	std	Z+1, r25	; 0x01
    79b4:	80 83       	st	Z, r24
    79b6:	ce 01       	movw	r24, r28
    79b8:	89 51       	subi	r24, 0x19	; 25
    79ba:	9f 4f       	sbci	r25, 0xFF	; 255
    79bc:	9e 01       	movw	r18, r28
    79be:	2d 51       	subi	r18, 0x1D	; 29
    79c0:	3f 4f       	sbci	r19, 0xFF	; 255
    79c2:	f9 01       	movw	r30, r18
    79c4:	20 81       	ld	r18, Z
    79c6:	31 81       	ldd	r19, Z+1	; 0x01
    79c8:	fc 01       	movw	r30, r24
    79ca:	31 83       	std	Z+1, r19	; 0x01
    79cc:	20 83       	st	Z, r18
    79ce:	ce 01       	movw	r24, r28
    79d0:	89 51       	subi	r24, 0x19	; 25
    79d2:	9f 4f       	sbci	r25, 0xFF	; 255
    79d4:	fc 01       	movw	r30, r24
    79d6:	80 81       	ld	r24, Z
    79d8:	91 81       	ldd	r25, Z+1	; 0x01
    79da:	01 97       	sbiw	r24, 0x01	; 1
    79dc:	f1 f7       	brne	.-4      	; 0x79da <LCDBusyLoop+0x159e>
    79de:	9e 01       	movw	r18, r28
    79e0:	29 51       	subi	r18, 0x19	; 25
    79e2:	3f 4f       	sbci	r19, 0xFF	; 255
    79e4:	f9 01       	movw	r30, r18
    79e6:	91 83       	std	Z+1, r25	; 0x01
    79e8:	80 83       	st	Z, r24
    79ea:	ce 01       	movw	r24, r28
    79ec:	86 52       	subi	r24, 0x26	; 38
    79ee:	9f 4f       	sbci	r25, 0xFF	; 255
    79f0:	9e 01       	movw	r18, r28
    79f2:	22 51       	subi	r18, 0x12	; 18
    79f4:	3f 4f       	sbci	r19, 0xFF	; 255
    79f6:	f9 01       	movw	r30, r18
    79f8:	20 81       	ld	r18, Z
    79fa:	fc 01       	movw	r30, r24
    79fc:	20 83       	st	Z, r18
    79fe:	4e c0       	rjmp	.+156    	; 0x7a9c <LCDBusyLoop+0x1660>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    7a00:	ce 01       	movw	r24, r28
    7a02:	8e 52       	subi	r24, 0x2E	; 46
    7a04:	9f 4f       	sbci	r25, 0xFF	; 255
    7a06:	20 e0       	ldi	r18, 0x00	; 0
    7a08:	30 e0       	ldi	r19, 0x00	; 0
    7a0a:	4f e7       	ldi	r20, 0x7F	; 127
    7a0c:	53 e4       	ldi	r21, 0x43	; 67
    7a0e:	fc 01       	movw	r30, r24
    7a10:	60 81       	ld	r22, Z
    7a12:	71 81       	ldd	r23, Z+1	; 0x01
    7a14:	82 81       	ldd	r24, Z+2	; 0x02
    7a16:	93 81       	ldd	r25, Z+3	; 0x03
    7a18:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    7a1c:	18 16       	cp	r1, r24
    7a1e:	6c f5       	brge	.+90     	; 0x7a7a <LCDBusyLoop+0x163e>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    7a20:	8e 01       	movw	r16, r28
    7a22:	07 51       	subi	r16, 0x17	; 23
    7a24:	1f 4f       	sbci	r17, 0xFF	; 255
    7a26:	ce 01       	movw	r24, r28
    7a28:	8a 52       	subi	r24, 0x2A	; 42
    7a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    7a2c:	fc 01       	movw	r30, r24
    7a2e:	60 81       	ld	r22, Z
    7a30:	71 81       	ldd	r23, Z+1	; 0x01
    7a32:	82 81       	ldd	r24, Z+2	; 0x02
    7a34:	93 81       	ldd	r25, Z+3	; 0x03
    7a36:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    7a3a:	dc 01       	movw	r26, r24
    7a3c:	cb 01       	movw	r24, r22
    7a3e:	f8 01       	movw	r30, r16
    7a40:	91 83       	std	Z+1, r25	; 0x01
    7a42:	80 83       	st	Z, r24
    7a44:	ce 01       	movw	r24, r28
    7a46:	85 51       	subi	r24, 0x15	; 21
    7a48:	9f 4f       	sbci	r25, 0xFF	; 255
    7a4a:	9e 01       	movw	r18, r28
    7a4c:	27 51       	subi	r18, 0x17	; 23
    7a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    7a50:	f9 01       	movw	r30, r18
    7a52:	20 81       	ld	r18, Z
    7a54:	31 81       	ldd	r19, Z+1	; 0x01
    7a56:	fc 01       	movw	r30, r24
    7a58:	31 83       	std	Z+1, r19	; 0x01
    7a5a:	20 83       	st	Z, r18
    7a5c:	ce 01       	movw	r24, r28
    7a5e:	85 51       	subi	r24, 0x15	; 21
    7a60:	9f 4f       	sbci	r25, 0xFF	; 255
    7a62:	fc 01       	movw	r30, r24
    7a64:	80 81       	ld	r24, Z
    7a66:	91 81       	ldd	r25, Z+1	; 0x01
    7a68:	01 97       	sbiw	r24, 0x01	; 1
    7a6a:	f1 f7       	brne	.-4      	; 0x7a68 <LCDBusyLoop+0x162c>
    7a6c:	9e 01       	movw	r18, r28
    7a6e:	25 51       	subi	r18, 0x15	; 21
    7a70:	3f 4f       	sbci	r19, 0xFF	; 255
    7a72:	f9 01       	movw	r30, r18
    7a74:	91 83       	std	Z+1, r25	; 0x01
    7a76:	80 83       	st	Z, r24
    7a78:	28 c0       	rjmp	.+80     	; 0x7aca <LCDBusyLoop+0x168e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    7a7a:	8e 01       	movw	r16, r28
    7a7c:	06 52       	subi	r16, 0x26	; 38
    7a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    7a80:	ce 01       	movw	r24, r28
    7a82:	8e 52       	subi	r24, 0x2E	; 46
    7a84:	9f 4f       	sbci	r25, 0xFF	; 255
    7a86:	fc 01       	movw	r30, r24
    7a88:	60 81       	ld	r22, Z
    7a8a:	71 81       	ldd	r23, Z+1	; 0x01
    7a8c:	82 81       	ldd	r24, Z+2	; 0x02
    7a8e:	93 81       	ldd	r25, Z+3	; 0x03
    7a90:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    7a94:	dc 01       	movw	r26, r24
    7a96:	cb 01       	movw	r24, r22
    7a98:	f8 01       	movw	r30, r16
    7a9a:	80 83       	st	Z, r24
    7a9c:	ce 01       	movw	r24, r28
    7a9e:	83 51       	subi	r24, 0x13	; 19
    7aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    7aa2:	9e 01       	movw	r18, r28
    7aa4:	26 52       	subi	r18, 0x26	; 38
    7aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    7aa8:	f9 01       	movw	r30, r18
    7aaa:	20 81       	ld	r18, Z
    7aac:	fc 01       	movw	r30, r24
    7aae:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    7ab0:	ce 01       	movw	r24, r28
    7ab2:	83 51       	subi	r24, 0x13	; 19
    7ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ab6:	fc 01       	movw	r30, r24
    7ab8:	80 81       	ld	r24, Z
    7aba:	28 2f       	mov	r18, r24
    7abc:	2a 95       	dec	r18
    7abe:	f1 f7       	brne	.-4      	; 0x7abc <LCDBusyLoop+0x1680>
    7ac0:	ce 01       	movw	r24, r28
    7ac2:	83 51       	subi	r24, 0x13	; 19
    7ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ac6:	fc 01       	movw	r30, r24
    7ac8:	20 83       	st	Z, r18
		_delay_us(1);	//tEL
	}
	while(busy);
    7aca:	88 85       	ldd	r24, Y+8	; 0x08
    7acc:	88 23       	and	r24, r24
    7ace:	11 f0       	breq	.+4      	; 0x7ad4 <LCDBusyLoop+0x1698>
    7ad0:	0c 94 36 33 	jmp	0x666c	; 0x666c <LCDBusyLoop+0x230>

	CLEAR_RW();		//write mode
    7ad4:	82 e3       	ldi	r24, 0x32	; 50
    7ad6:	90 e0       	ldi	r25, 0x00	; 0
    7ad8:	22 e3       	ldi	r18, 0x32	; 50
    7ada:	30 e0       	ldi	r19, 0x00	; 0
    7adc:	f9 01       	movw	r30, r18
    7ade:	20 81       	ld	r18, Z
    7ae0:	2f 77       	andi	r18, 0x7F	; 127
    7ae2:	fc 01       	movw	r30, r24
    7ae4:	20 83       	st	Z, r18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    7ae6:	84 e3       	ldi	r24, 0x34	; 52
    7ae8:	90 e0       	ldi	r25, 0x00	; 0
    7aea:	24 e3       	ldi	r18, 0x34	; 52
    7aec:	30 e0       	ldi	r19, 0x00	; 0
    7aee:	f9 01       	movw	r30, r18
    7af0:	20 81       	ld	r18, Z
    7af2:	2f 60       	ori	r18, 0x0F	; 15
    7af4:	fc 01       	movw	r30, r24
    7af6:	20 83       	st	Z, r18

}
    7af8:	c2 51       	subi	r28, 0x12	; 18
    7afa:	df 4f       	sbci	r29, 0xFF	; 255
    7afc:	0f b6       	in	r0, 0x3f	; 63
    7afe:	f8 94       	cli
    7b00:	de bf       	out	0x3e, r29	; 62
    7b02:	0f be       	out	0x3f, r0	; 63
    7b04:	cd bf       	out	0x3d, r28	; 61
    7b06:	df 91       	pop	r29
    7b08:	cf 91       	pop	r28
    7b0a:	1f 91       	pop	r17
    7b0c:	0f 91       	pop	r16
    7b0e:	08 95       	ret

00007b10 <LCDInit>:

/***********************************************************
 * Inicia el LCD
 ***********************************************************/
void LCDInit(uint8_t style){
    7b10:	0f 93       	push	r16
    7b12:	1f 93       	push	r17
    7b14:	cf 93       	push	r28
    7b16:	df 93       	push	r29
    7b18:	cd b7       	in	r28, 0x3d	; 61
    7b1a:	de b7       	in	r29, 0x3e	; 62
    7b1c:	c6 57       	subi	r28, 0x76	; 118
    7b1e:	d1 09       	sbc	r29, r1
    7b20:	0f b6       	in	r0, 0x3f	; 63
    7b22:	f8 94       	cli
    7b24:	de bf       	out	0x3e, r29	; 62
    7b26:	0f be       	out	0x3f, r0	; 63
    7b28:	cd bf       	out	0x3d, r28	; 61
    7b2a:	9e 01       	movw	r18, r28
    7b2c:	2a 58       	subi	r18, 0x8A	; 138
    7b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    7b30:	f9 01       	movw	r30, r18
    7b32:	80 83       	st	Z, r24
    7b34:	80 e0       	ldi	r24, 0x00	; 0
    7b36:	90 e0       	ldi	r25, 0x00	; 0
    7b38:	a0 ef       	ldi	r26, 0xF0	; 240
    7b3a:	b1 e4       	ldi	r27, 0x41	; 65
    7b3c:	88 87       	std	Y+8, r24	; 0x08
    7b3e:	99 87       	std	Y+9, r25	; 0x09
    7b40:	aa 87       	std	Y+10, r26	; 0x0a
    7b42:	bb 87       	std	Y+11, r27	; 0x0b

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    7b44:	20 e0       	ldi	r18, 0x00	; 0
    7b46:	30 e0       	ldi	r19, 0x00	; 0
    7b48:	4a ef       	ldi	r20, 0xFA	; 250
    7b4a:	54 e4       	ldi	r21, 0x44	; 68
    7b4c:	68 85       	ldd	r22, Y+8	; 0x08
    7b4e:	79 85       	ldd	r23, Y+9	; 0x09
    7b50:	8a 85       	ldd	r24, Y+10	; 0x0a
    7b52:	9b 85       	ldd	r25, Y+11	; 0x0b
    7b54:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    7b58:	dc 01       	movw	r26, r24
    7b5a:	cb 01       	movw	r24, r22
    7b5c:	8c 87       	std	Y+12, r24	; 0x0c
    7b5e:	9d 87       	std	Y+13, r25	; 0x0d
    7b60:	ae 87       	std	Y+14, r26	; 0x0e
    7b62:	bf 87       	std	Y+15, r27	; 0x0f
	if (__tmp < 1.0)
    7b64:	20 e0       	ldi	r18, 0x00	; 0
    7b66:	30 e0       	ldi	r19, 0x00	; 0
    7b68:	40 e8       	ldi	r20, 0x80	; 128
    7b6a:	5f e3       	ldi	r21, 0x3F	; 63
    7b6c:	6c 85       	ldd	r22, Y+12	; 0x0c
    7b6e:	7d 85       	ldd	r23, Y+13	; 0x0d
    7b70:	8e 85       	ldd	r24, Y+14	; 0x0e
    7b72:	9f 85       	ldd	r25, Y+15	; 0x0f
    7b74:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    7b78:	88 23       	and	r24, r24
    7b7a:	2c f4       	brge	.+10     	; 0x7b86 <LCDInit+0x76>
		__ticks = 1;
    7b7c:	81 e0       	ldi	r24, 0x01	; 1
    7b7e:	90 e0       	ldi	r25, 0x00	; 0
    7b80:	99 8b       	std	Y+17, r25	; 0x11
    7b82:	88 8b       	std	Y+16, r24	; 0x10
    7b84:	3f c0       	rjmp	.+126    	; 0x7c04 <LCDInit+0xf4>
	else if (__tmp > 65535)
    7b86:	20 e0       	ldi	r18, 0x00	; 0
    7b88:	3f ef       	ldi	r19, 0xFF	; 255
    7b8a:	4f e7       	ldi	r20, 0x7F	; 127
    7b8c:	57 e4       	ldi	r21, 0x47	; 71
    7b8e:	6c 85       	ldd	r22, Y+12	; 0x0c
    7b90:	7d 85       	ldd	r23, Y+13	; 0x0d
    7b92:	8e 85       	ldd	r24, Y+14	; 0x0e
    7b94:	9f 85       	ldd	r25, Y+15	; 0x0f
    7b96:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    7b9a:	18 16       	cp	r1, r24
    7b9c:	4c f5       	brge	.+82     	; 0x7bf0 <LCDInit+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7b9e:	20 e0       	ldi	r18, 0x00	; 0
    7ba0:	30 e0       	ldi	r19, 0x00	; 0
    7ba2:	40 e2       	ldi	r20, 0x20	; 32
    7ba4:	51 e4       	ldi	r21, 0x41	; 65
    7ba6:	68 85       	ldd	r22, Y+8	; 0x08
    7ba8:	79 85       	ldd	r23, Y+9	; 0x09
    7baa:	8a 85       	ldd	r24, Y+10	; 0x0a
    7bac:	9b 85       	ldd	r25, Y+11	; 0x0b
    7bae:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    7bb2:	dc 01       	movw	r26, r24
    7bb4:	cb 01       	movw	r24, r22
    7bb6:	bc 01       	movw	r22, r24
    7bb8:	cd 01       	movw	r24, r26
    7bba:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    7bbe:	dc 01       	movw	r26, r24
    7bc0:	cb 01       	movw	r24, r22
    7bc2:	99 8b       	std	Y+17, r25	; 0x11
    7bc4:	88 8b       	std	Y+16, r24	; 0x10
    7bc6:	0f c0       	rjmp	.+30     	; 0x7be6 <LCDInit+0xd6>
    7bc8:	88 ec       	ldi	r24, 0xC8	; 200
    7bca:	90 e0       	ldi	r25, 0x00	; 0
    7bcc:	9b 8b       	std	Y+19, r25	; 0x13
    7bce:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    7bd0:	8a 89       	ldd	r24, Y+18	; 0x12
    7bd2:	9b 89       	ldd	r25, Y+19	; 0x13
    7bd4:	01 97       	sbiw	r24, 0x01	; 1
    7bd6:	f1 f7       	brne	.-4      	; 0x7bd4 <LCDInit+0xc4>
    7bd8:	9b 8b       	std	Y+19, r25	; 0x13
    7bda:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7bdc:	88 89       	ldd	r24, Y+16	; 0x10
    7bde:	99 89       	ldd	r25, Y+17	; 0x11
    7be0:	01 97       	sbiw	r24, 0x01	; 1
    7be2:	99 8b       	std	Y+17, r25	; 0x11
    7be4:	88 8b       	std	Y+16, r24	; 0x10
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7be6:	88 89       	ldd	r24, Y+16	; 0x10
    7be8:	99 89       	ldd	r25, Y+17	; 0x11
    7bea:	89 2b       	or	r24, r25
    7bec:	69 f7       	brne	.-38     	; 0x7bc8 <LCDInit+0xb8>
    7bee:	14 c0       	rjmp	.+40     	; 0x7c18 <LCDInit+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7bf0:	6c 85       	ldd	r22, Y+12	; 0x0c
    7bf2:	7d 85       	ldd	r23, Y+13	; 0x0d
    7bf4:	8e 85       	ldd	r24, Y+14	; 0x0e
    7bf6:	9f 85       	ldd	r25, Y+15	; 0x0f
    7bf8:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    7bfc:	dc 01       	movw	r26, r24
    7bfe:	cb 01       	movw	r24, r22
    7c00:	99 8b       	std	Y+17, r25	; 0x11
    7c02:	88 8b       	std	Y+16, r24	; 0x10
    7c04:	88 89       	ldd	r24, Y+16	; 0x10
    7c06:	99 89       	ldd	r25, Y+17	; 0x11
    7c08:	9d 8b       	std	Y+21, r25	; 0x15
    7c0a:	8c 8b       	std	Y+20, r24	; 0x14
    7c0c:	8c 89       	ldd	r24, Y+20	; 0x14
    7c0e:	9d 89       	ldd	r25, Y+21	; 0x15
    7c10:	01 97       	sbiw	r24, 0x01	; 1
    7c12:	f1 f7       	brne	.-4      	; 0x7c10 <LCDInit+0x100>
    7c14:	9d 8b       	std	Y+21, r25	; 0x15
    7c16:	8c 8b       	std	Y+20, r24	; 0x14
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    7c18:	84 e3       	ldi	r24, 0x34	; 52
    7c1a:	90 e0       	ldi	r25, 0x00	; 0
    7c1c:	24 e3       	ldi	r18, 0x34	; 52
    7c1e:	30 e0       	ldi	r19, 0x00	; 0
    7c20:	f9 01       	movw	r30, r18
    7c22:	20 81       	ld	r18, Z
    7c24:	2f 60       	ori	r18, 0x0F	; 15
    7c26:	fc 01       	movw	r30, r24
    7c28:	20 83       	st	Z, r18
	LCD_E_DDR|=(1<<LCD_E_POS);
    7c2a:	84 e6       	ldi	r24, 0x64	; 100
    7c2c:	90 e0       	ldi	r25, 0x00	; 0
    7c2e:	24 e6       	ldi	r18, 0x64	; 100
    7c30:	30 e0       	ldi	r19, 0x00	; 0
    7c32:	f9 01       	movw	r30, r18
    7c34:	20 81       	ld	r18, Z
    7c36:	20 61       	ori	r18, 0x10	; 16
    7c38:	fc 01       	movw	r30, r24
    7c3a:	20 83       	st	Z, r18
	LCD_RS_DDR|=(1<<LCD_RS_POS);
    7c3c:	81 e3       	ldi	r24, 0x31	; 49
    7c3e:	90 e0       	ldi	r25, 0x00	; 0
    7c40:	21 e3       	ldi	r18, 0x31	; 49
    7c42:	30 e0       	ldi	r19, 0x00	; 0
    7c44:	f9 01       	movw	r30, r18
    7c46:	20 81       	ld	r18, Z
    7c48:	20 64       	ori	r18, 0x40	; 64
    7c4a:	fc 01       	movw	r30, r24
    7c4c:	20 83       	st	Z, r18
	LCD_RW_DDR|=(1<<LCD_RW_POS);
    7c4e:	81 e3       	ldi	r24, 0x31	; 49
    7c50:	90 e0       	ldi	r25, 0x00	; 0
    7c52:	21 e3       	ldi	r18, 0x31	; 49
    7c54:	30 e0       	ldi	r19, 0x00	; 0
    7c56:	f9 01       	movw	r30, r18
    7c58:	20 81       	ld	r18, Z
    7c5a:	20 68       	ori	r18, 0x80	; 128
    7c5c:	fc 01       	movw	r30, r24
    7c5e:	20 83       	st	Z, r18

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
    7c60:	85 e3       	ldi	r24, 0x35	; 53
    7c62:	90 e0       	ldi	r25, 0x00	; 0
    7c64:	25 e3       	ldi	r18, 0x35	; 53
    7c66:	30 e0       	ldi	r19, 0x00	; 0
    7c68:	f9 01       	movw	r30, r18
    7c6a:	20 81       	ld	r18, Z
    7c6c:	20 7f       	andi	r18, 0xF0	; 240
    7c6e:	fc 01       	movw	r30, r24
    7c70:	20 83       	st	Z, r18
	CLEAR_E();
    7c72:	85 e6       	ldi	r24, 0x65	; 101
    7c74:	90 e0       	ldi	r25, 0x00	; 0
    7c76:	25 e6       	ldi	r18, 0x65	; 101
    7c78:	30 e0       	ldi	r19, 0x00	; 0
    7c7a:	f9 01       	movw	r30, r18
    7c7c:	20 81       	ld	r18, Z
    7c7e:	2f 7e       	andi	r18, 0xEF	; 239
    7c80:	fc 01       	movw	r30, r24
    7c82:	20 83       	st	Z, r18
	CLEAR_RW();
    7c84:	82 e3       	ldi	r24, 0x32	; 50
    7c86:	90 e0       	ldi	r25, 0x00	; 0
    7c88:	22 e3       	ldi	r18, 0x32	; 50
    7c8a:	30 e0       	ldi	r19, 0x00	; 0
    7c8c:	f9 01       	movw	r30, r18
    7c8e:	20 81       	ld	r18, Z
    7c90:	2f 77       	andi	r18, 0x7F	; 127
    7c92:	fc 01       	movw	r30, r24
    7c94:	20 83       	st	Z, r18
	CLEAR_RS();
    7c96:	82 e3       	ldi	r24, 0x32	; 50
    7c98:	90 e0       	ldi	r25, 0x00	; 0
    7c9a:	22 e3       	ldi	r18, 0x32	; 50
    7c9c:	30 e0       	ldi	r19, 0x00	; 0
    7c9e:	f9 01       	movw	r30, r18
    7ca0:	20 81       	ld	r18, Z
    7ca2:	2f 7b       	andi	r18, 0xBF	; 191
    7ca4:	fc 01       	movw	r30, r24
    7ca6:	20 83       	st	Z, r18
    7ca8:	8a e9       	ldi	r24, 0x9A	; 154
    7caa:	99 e9       	ldi	r25, 0x99	; 153
    7cac:	a9 e9       	ldi	r26, 0x99	; 153
    7cae:	be e3       	ldi	r27, 0x3E	; 62
    7cb0:	8e 8b       	std	Y+22, r24	; 0x16
    7cb2:	9f 8b       	std	Y+23, r25	; 0x17
    7cb4:	a8 8f       	std	Y+24, r26	; 0x18
    7cb6:	b9 8f       	std	Y+25, r27	; 0x19
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    7cb8:	2b ea       	ldi	r18, 0xAB	; 171
    7cba:	3a ea       	ldi	r19, 0xAA	; 170
    7cbc:	4a e2       	ldi	r20, 0x2A	; 42
    7cbe:	50 e4       	ldi	r21, 0x40	; 64
    7cc0:	6e 89       	ldd	r22, Y+22	; 0x16
    7cc2:	7f 89       	ldd	r23, Y+23	; 0x17
    7cc4:	88 8d       	ldd	r24, Y+24	; 0x18
    7cc6:	99 8d       	ldd	r25, Y+25	; 0x19
    7cc8:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    7ccc:	dc 01       	movw	r26, r24
    7cce:	cb 01       	movw	r24, r22
    7cd0:	8a 8f       	std	Y+26, r24	; 0x1a
    7cd2:	9b 8f       	std	Y+27, r25	; 0x1b
    7cd4:	ac 8f       	std	Y+28, r26	; 0x1c
    7cd6:	bd 8f       	std	Y+29, r27	; 0x1d
	__tmp2 = ((F_CPU) / 4e6) * __us;
    7cd8:	8e 89       	ldd	r24, Y+22	; 0x16
    7cda:	9f 89       	ldd	r25, Y+23	; 0x17
    7cdc:	a8 8d       	ldd	r26, Y+24	; 0x18
    7cde:	b9 8d       	ldd	r27, Y+25	; 0x19
    7ce0:	9c 01       	movw	r18, r24
    7ce2:	ad 01       	movw	r20, r26
    7ce4:	bc 01       	movw	r22, r24
    7ce6:	cd 01       	movw	r24, r26
    7ce8:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    7cec:	dc 01       	movw	r26, r24
    7cee:	cb 01       	movw	r24, r22
    7cf0:	8e 8f       	std	Y+30, r24	; 0x1e
    7cf2:	9f 8f       	std	Y+31, r25	; 0x1f
    7cf4:	a8 a3       	std	Y+32, r26	; 0x20
    7cf6:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
    7cf8:	20 e0       	ldi	r18, 0x00	; 0
    7cfa:	30 e0       	ldi	r19, 0x00	; 0
    7cfc:	40 e8       	ldi	r20, 0x80	; 128
    7cfe:	5f e3       	ldi	r21, 0x3F	; 63
    7d00:	6a 8d       	ldd	r22, Y+26	; 0x1a
    7d02:	7b 8d       	ldd	r23, Y+27	; 0x1b
    7d04:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7d06:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7d08:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    7d0c:	88 23       	and	r24, r24
    7d0e:	1c f4       	brge	.+6      	; 0x7d16 <LCDInit+0x206>
		__ticks = 1;
    7d10:	81 e0       	ldi	r24, 0x01	; 1
    7d12:	8a a3       	std	Y+34, r24	; 0x22
    7d14:	b2 c0       	rjmp	.+356    	; 0x7e7a <LCDInit+0x36a>
	else if (__tmp2 > 65535)
    7d16:	20 e0       	ldi	r18, 0x00	; 0
    7d18:	3f ef       	ldi	r19, 0xFF	; 255
    7d1a:	4f e7       	ldi	r20, 0x7F	; 127
    7d1c:	57 e4       	ldi	r21, 0x47	; 71
    7d1e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    7d20:	7f 8d       	ldd	r23, Y+31	; 0x1f
    7d22:	88 a1       	ldd	r24, Y+32	; 0x20
    7d24:	99 a1       	ldd	r25, Y+33	; 0x21
    7d26:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    7d2a:	18 16       	cp	r1, r24
    7d2c:	0c f0       	brlt	.+2      	; 0x7d30 <LCDInit+0x220>
    7d2e:	7b c0       	rjmp	.+246    	; 0x7e26 <LCDInit+0x316>
	{
		_delay_ms(__us / 1000.0);
    7d30:	20 e0       	ldi	r18, 0x00	; 0
    7d32:	30 e0       	ldi	r19, 0x00	; 0
    7d34:	4a e7       	ldi	r20, 0x7A	; 122
    7d36:	54 e4       	ldi	r21, 0x44	; 68
    7d38:	6e 89       	ldd	r22, Y+22	; 0x16
    7d3a:	7f 89       	ldd	r23, Y+23	; 0x17
    7d3c:	88 8d       	ldd	r24, Y+24	; 0x18
    7d3e:	99 8d       	ldd	r25, Y+25	; 0x19
    7d40:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    7d44:	dc 01       	movw	r26, r24
    7d46:	cb 01       	movw	r24, r22
    7d48:	8b a3       	std	Y+35, r24	; 0x23
    7d4a:	9c a3       	std	Y+36, r25	; 0x24
    7d4c:	ad a3       	std	Y+37, r26	; 0x25
    7d4e:	be a3       	std	Y+38, r27	; 0x26

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    7d50:	20 e0       	ldi	r18, 0x00	; 0
    7d52:	30 e0       	ldi	r19, 0x00	; 0
    7d54:	4a ef       	ldi	r20, 0xFA	; 250
    7d56:	54 e4       	ldi	r21, 0x44	; 68
    7d58:	6b a1       	ldd	r22, Y+35	; 0x23
    7d5a:	7c a1       	ldd	r23, Y+36	; 0x24
    7d5c:	8d a1       	ldd	r24, Y+37	; 0x25
    7d5e:	9e a1       	ldd	r25, Y+38	; 0x26
    7d60:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    7d64:	dc 01       	movw	r26, r24
    7d66:	cb 01       	movw	r24, r22
    7d68:	8f a3       	std	Y+39, r24	; 0x27
    7d6a:	98 a7       	std	Y+40, r25	; 0x28
    7d6c:	a9 a7       	std	Y+41, r26	; 0x29
    7d6e:	ba a7       	std	Y+42, r27	; 0x2a
	if (__tmp < 1.0)
    7d70:	20 e0       	ldi	r18, 0x00	; 0
    7d72:	30 e0       	ldi	r19, 0x00	; 0
    7d74:	40 e8       	ldi	r20, 0x80	; 128
    7d76:	5f e3       	ldi	r21, 0x3F	; 63
    7d78:	6f a1       	ldd	r22, Y+39	; 0x27
    7d7a:	78 a5       	ldd	r23, Y+40	; 0x28
    7d7c:	89 a5       	ldd	r24, Y+41	; 0x29
    7d7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    7d80:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    7d84:	88 23       	and	r24, r24
    7d86:	2c f4       	brge	.+10     	; 0x7d92 <LCDInit+0x282>
		__ticks = 1;
    7d88:	81 e0       	ldi	r24, 0x01	; 1
    7d8a:	90 e0       	ldi	r25, 0x00	; 0
    7d8c:	9c a7       	std	Y+44, r25	; 0x2c
    7d8e:	8b a7       	std	Y+43, r24	; 0x2b
    7d90:	3f c0       	rjmp	.+126    	; 0x7e10 <LCDInit+0x300>
	else if (__tmp > 65535)
    7d92:	20 e0       	ldi	r18, 0x00	; 0
    7d94:	3f ef       	ldi	r19, 0xFF	; 255
    7d96:	4f e7       	ldi	r20, 0x7F	; 127
    7d98:	57 e4       	ldi	r21, 0x47	; 71
    7d9a:	6f a1       	ldd	r22, Y+39	; 0x27
    7d9c:	78 a5       	ldd	r23, Y+40	; 0x28
    7d9e:	89 a5       	ldd	r24, Y+41	; 0x29
    7da0:	9a a5       	ldd	r25, Y+42	; 0x2a
    7da2:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    7da6:	18 16       	cp	r1, r24
    7da8:	4c f5       	brge	.+82     	; 0x7dfc <LCDInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7daa:	20 e0       	ldi	r18, 0x00	; 0
    7dac:	30 e0       	ldi	r19, 0x00	; 0
    7dae:	40 e2       	ldi	r20, 0x20	; 32
    7db0:	51 e4       	ldi	r21, 0x41	; 65
    7db2:	6b a1       	ldd	r22, Y+35	; 0x23
    7db4:	7c a1       	ldd	r23, Y+36	; 0x24
    7db6:	8d a1       	ldd	r24, Y+37	; 0x25
    7db8:	9e a1       	ldd	r25, Y+38	; 0x26
    7dba:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    7dbe:	dc 01       	movw	r26, r24
    7dc0:	cb 01       	movw	r24, r22
    7dc2:	bc 01       	movw	r22, r24
    7dc4:	cd 01       	movw	r24, r26
    7dc6:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    7dca:	dc 01       	movw	r26, r24
    7dcc:	cb 01       	movw	r24, r22
    7dce:	9c a7       	std	Y+44, r25	; 0x2c
    7dd0:	8b a7       	std	Y+43, r24	; 0x2b
    7dd2:	0f c0       	rjmp	.+30     	; 0x7df2 <LCDInit+0x2e2>
    7dd4:	88 ec       	ldi	r24, 0xC8	; 200
    7dd6:	90 e0       	ldi	r25, 0x00	; 0
    7dd8:	9e a7       	std	Y+46, r25	; 0x2e
    7dda:	8d a7       	std	Y+45, r24	; 0x2d
    7ddc:	8d a5       	ldd	r24, Y+45	; 0x2d
    7dde:	9e a5       	ldd	r25, Y+46	; 0x2e
    7de0:	01 97       	sbiw	r24, 0x01	; 1
    7de2:	f1 f7       	brne	.-4      	; 0x7de0 <LCDInit+0x2d0>
    7de4:	9e a7       	std	Y+46, r25	; 0x2e
    7de6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7de8:	8b a5       	ldd	r24, Y+43	; 0x2b
    7dea:	9c a5       	ldd	r25, Y+44	; 0x2c
    7dec:	01 97       	sbiw	r24, 0x01	; 1
    7dee:	9c a7       	std	Y+44, r25	; 0x2c
    7df0:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7df2:	8b a5       	ldd	r24, Y+43	; 0x2b
    7df4:	9c a5       	ldd	r25, Y+44	; 0x2c
    7df6:	89 2b       	or	r24, r25
    7df8:	69 f7       	brne	.-38     	; 0x7dd4 <LCDInit+0x2c4>
    7dfa:	3f c0       	rjmp	.+126    	; 0x7e7a <LCDInit+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7dfc:	6f a1       	ldd	r22, Y+39	; 0x27
    7dfe:	78 a5       	ldd	r23, Y+40	; 0x28
    7e00:	89 a5       	ldd	r24, Y+41	; 0x29
    7e02:	9a a5       	ldd	r25, Y+42	; 0x2a
    7e04:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    7e08:	dc 01       	movw	r26, r24
    7e0a:	cb 01       	movw	r24, r22
    7e0c:	9c a7       	std	Y+44, r25	; 0x2c
    7e0e:	8b a7       	std	Y+43, r24	; 0x2b
    7e10:	8b a5       	ldd	r24, Y+43	; 0x2b
    7e12:	9c a5       	ldd	r25, Y+44	; 0x2c
    7e14:	98 ab       	std	Y+48, r25	; 0x30
    7e16:	8f a7       	std	Y+47, r24	; 0x2f
    7e18:	8f a5       	ldd	r24, Y+47	; 0x2f
    7e1a:	98 a9       	ldd	r25, Y+48	; 0x30
    7e1c:	01 97       	sbiw	r24, 0x01	; 1
    7e1e:	f1 f7       	brne	.-4      	; 0x7e1c <LCDInit+0x30c>
    7e20:	98 ab       	std	Y+48, r25	; 0x30
    7e22:	8f a7       	std	Y+47, r24	; 0x2f
    7e24:	2a c0       	rjmp	.+84     	; 0x7e7a <LCDInit+0x36a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    7e26:	20 e0       	ldi	r18, 0x00	; 0
    7e28:	30 e0       	ldi	r19, 0x00	; 0
    7e2a:	4f e7       	ldi	r20, 0x7F	; 127
    7e2c:	53 e4       	ldi	r21, 0x43	; 67
    7e2e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    7e30:	7b 8d       	ldd	r23, Y+27	; 0x1b
    7e32:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7e34:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7e36:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    7e3a:	18 16       	cp	r1, r24
    7e3c:	ac f4       	brge	.+42     	; 0x7e68 <LCDInit+0x358>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    7e3e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    7e40:	7f 8d       	ldd	r23, Y+31	; 0x1f
    7e42:	88 a1       	ldd	r24, Y+32	; 0x20
    7e44:	99 a1       	ldd	r25, Y+33	; 0x21
    7e46:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    7e4a:	dc 01       	movw	r26, r24
    7e4c:	cb 01       	movw	r24, r22
    7e4e:	9a ab       	std	Y+50, r25	; 0x32
    7e50:	89 ab       	std	Y+49, r24	; 0x31
    7e52:	89 a9       	ldd	r24, Y+49	; 0x31
    7e54:	9a a9       	ldd	r25, Y+50	; 0x32
    7e56:	9c ab       	std	Y+52, r25	; 0x34
    7e58:	8b ab       	std	Y+51, r24	; 0x33
    7e5a:	8b a9       	ldd	r24, Y+51	; 0x33
    7e5c:	9c a9       	ldd	r25, Y+52	; 0x34
    7e5e:	01 97       	sbiw	r24, 0x01	; 1
    7e60:	f1 f7       	brne	.-4      	; 0x7e5e <LCDInit+0x34e>
    7e62:	9c ab       	std	Y+52, r25	; 0x34
    7e64:	8b ab       	std	Y+51, r24	; 0x33
    7e66:	0f c0       	rjmp	.+30     	; 0x7e86 <LCDInit+0x376>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    7e68:	6a 8d       	ldd	r22, Y+26	; 0x1a
    7e6a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    7e6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7e6e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7e70:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    7e74:	dc 01       	movw	r26, r24
    7e76:	cb 01       	movw	r24, r22
    7e78:	8a a3       	std	Y+34, r24	; 0x22
    7e7a:	8a a1       	ldd	r24, Y+34	; 0x22
    7e7c:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    7e7e:	8d a9       	ldd	r24, Y+53	; 0x35
    7e80:	8a 95       	dec	r24
    7e82:	f1 f7       	brne	.-4      	; 0x7e80 <LCDInit+0x370>
    7e84:	8d ab       	std	Y+53, r24	; 0x35

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	char chData = 0b00000010;
    7e86:	82 e0       	ldi	r24, 0x02	; 2
    7e88:	89 83       	std	Y+1, r24	; 0x01

	// si estan invertidos los pines de datos, invierto los bit dentro de los nibbles
	#ifdef LCD_DATA_INV
	char aux = chData;
    7e8a:	89 81       	ldd	r24, Y+1	; 0x01
    7e8c:	8f 83       	std	Y+7, r24	; 0x07
	chData=0;
    7e8e:	19 82       	std	Y+1, r1	; 0x01
	for (int i=0; i<4; i++){
    7e90:	1b 82       	std	Y+3, r1	; 0x03
    7e92:	1a 82       	std	Y+2, r1	; 0x02
    7e94:	23 c0       	rjmp	.+70     	; 0x7edc <LCDInit+0x3cc>
		if ((aux&(1<<i)) != 0){
    7e96:	8f 81       	ldd	r24, Y+7	; 0x07
    7e98:	88 2f       	mov	r24, r24
    7e9a:	90 e0       	ldi	r25, 0x00	; 0
    7e9c:	0a 80       	ldd	r0, Y+2	; 0x02
    7e9e:	02 c0       	rjmp	.+4      	; 0x7ea4 <LCDInit+0x394>
    7ea0:	95 95       	asr	r25
    7ea2:	87 95       	ror	r24
    7ea4:	0a 94       	dec	r0
    7ea6:	e2 f7       	brpl	.-8      	; 0x7ea0 <LCDInit+0x390>
    7ea8:	81 70       	andi	r24, 0x01	; 1
    7eaa:	99 27       	eor	r25, r25
    7eac:	89 2b       	or	r24, r25
    7eae:	89 f0       	breq	.+34     	; 0x7ed2 <LCDInit+0x3c2>
			chData|=(1<<(3-i));
    7eb0:	23 e0       	ldi	r18, 0x03	; 3
    7eb2:	30 e0       	ldi	r19, 0x00	; 0
    7eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    7eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    7eb8:	28 1b       	sub	r18, r24
    7eba:	39 0b       	sbc	r19, r25
    7ebc:	81 e0       	ldi	r24, 0x01	; 1
    7ebe:	90 e0       	ldi	r25, 0x00	; 0
    7ec0:	02 c0       	rjmp	.+4      	; 0x7ec6 <LCDInit+0x3b6>
    7ec2:	88 0f       	add	r24, r24
    7ec4:	99 1f       	adc	r25, r25
    7ec6:	2a 95       	dec	r18
    7ec8:	e2 f7       	brpl	.-8      	; 0x7ec2 <LCDInit+0x3b2>
    7eca:	98 2f       	mov	r25, r24
    7ecc:	89 81       	ldd	r24, Y+1	; 0x01
    7ece:	89 2b       	or	r24, r25
    7ed0:	89 83       	std	Y+1, r24	; 0x01

	// si estan invertidos los pines de datos, invierto los bit dentro de los nibbles
	#ifdef LCD_DATA_INV
	char aux = chData;
	chData=0;
	for (int i=0; i<4; i++){
    7ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    7ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    7ed6:	01 96       	adiw	r24, 0x01	; 1
    7ed8:	9b 83       	std	Y+3, r25	; 0x03
    7eda:	8a 83       	std	Y+2, r24	; 0x02
    7edc:	8a 81       	ldd	r24, Y+2	; 0x02
    7ede:	9b 81       	ldd	r25, Y+3	; 0x03
    7ee0:	04 97       	sbiw	r24, 0x04	; 4
    7ee2:	cc f2       	brlt	.-78     	; 0x7e96 <LCDInit+0x386>
		if ((aux&(1<<i)) != 0){
			chData|=(1<<(3-i));
		}
	}
	for (int i=4; i<8; i++){
    7ee4:	84 e0       	ldi	r24, 0x04	; 4
    7ee6:	90 e0       	ldi	r25, 0x00	; 0
    7ee8:	9d 83       	std	Y+5, r25	; 0x05
    7eea:	8c 83       	std	Y+4, r24	; 0x04
    7eec:	23 c0       	rjmp	.+70     	; 0x7f34 <LCDInit+0x424>
		if ((aux&(1<<i)) != 0){
    7eee:	8f 81       	ldd	r24, Y+7	; 0x07
    7ef0:	88 2f       	mov	r24, r24
    7ef2:	90 e0       	ldi	r25, 0x00	; 0
    7ef4:	0c 80       	ldd	r0, Y+4	; 0x04
    7ef6:	02 c0       	rjmp	.+4      	; 0x7efc <LCDInit+0x3ec>
    7ef8:	95 95       	asr	r25
    7efa:	87 95       	ror	r24
    7efc:	0a 94       	dec	r0
    7efe:	e2 f7       	brpl	.-8      	; 0x7ef8 <LCDInit+0x3e8>
    7f00:	81 70       	andi	r24, 0x01	; 1
    7f02:	99 27       	eor	r25, r25
    7f04:	89 2b       	or	r24, r25
    7f06:	89 f0       	breq	.+34     	; 0x7f2a <LCDInit+0x41a>
			chData|=(1<<(11-i));
    7f08:	2b e0       	ldi	r18, 0x0B	; 11
    7f0a:	30 e0       	ldi	r19, 0x00	; 0
    7f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    7f0e:	9d 81       	ldd	r25, Y+5	; 0x05
    7f10:	28 1b       	sub	r18, r24
    7f12:	39 0b       	sbc	r19, r25
    7f14:	81 e0       	ldi	r24, 0x01	; 1
    7f16:	90 e0       	ldi	r25, 0x00	; 0
    7f18:	02 c0       	rjmp	.+4      	; 0x7f1e <LCDInit+0x40e>
    7f1a:	88 0f       	add	r24, r24
    7f1c:	99 1f       	adc	r25, r25
    7f1e:	2a 95       	dec	r18
    7f20:	e2 f7       	brpl	.-8      	; 0x7f1a <LCDInit+0x40a>
    7f22:	98 2f       	mov	r25, r24
    7f24:	89 81       	ldd	r24, Y+1	; 0x01
    7f26:	89 2b       	or	r24, r25
    7f28:	89 83       	std	Y+1, r24	; 0x01
	for (int i=0; i<4; i++){
		if ((aux&(1<<i)) != 0){
			chData|=(1<<(3-i));
		}
	}
	for (int i=4; i<8; i++){
    7f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    7f2c:	9d 81       	ldd	r25, Y+5	; 0x05
    7f2e:	01 96       	adiw	r24, 0x01	; 1
    7f30:	9d 83       	std	Y+5, r25	; 0x05
    7f32:	8c 83       	std	Y+4, r24	; 0x04
    7f34:	8c 81       	ldd	r24, Y+4	; 0x04
    7f36:	9d 81       	ldd	r25, Y+5	; 0x05
    7f38:	08 97       	sbiw	r24, 0x08	; 8
    7f3a:	cc f2       	brlt	.-78     	; 0x7eee <LCDInit+0x3de>
			chData|=(1<<(11-i));
		}
	}
	#endif

	SET_E();
    7f3c:	85 e6       	ldi	r24, 0x65	; 101
    7f3e:	90 e0       	ldi	r25, 0x00	; 0
    7f40:	25 e6       	ldi	r18, 0x65	; 101
    7f42:	30 e0       	ldi	r19, 0x00	; 0
    7f44:	f9 01       	movw	r30, r18
    7f46:	20 81       	ld	r18, Z
    7f48:	20 61       	ori	r18, 0x10	; 16
    7f4a:	fc 01       	movw	r30, r24
    7f4c:	20 83       	st	Z, r18
	LCD_DATA_PORT|=((chData)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
    7f4e:	85 e3       	ldi	r24, 0x35	; 53
    7f50:	90 e0       	ldi	r25, 0x00	; 0
    7f52:	25 e3       	ldi	r18, 0x35	; 53
    7f54:	30 e0       	ldi	r19, 0x00	; 0
    7f56:	f9 01       	movw	r30, r18
    7f58:	30 81       	ld	r19, Z
    7f5a:	29 81       	ldd	r18, Y+1	; 0x01
    7f5c:	23 2b       	or	r18, r19
    7f5e:	fc 01       	movw	r30, r24
    7f60:	20 83       	st	Z, r18
    7f62:	80 e0       	ldi	r24, 0x00	; 0
    7f64:	90 e0       	ldi	r25, 0x00	; 0
    7f66:	a0 e8       	ldi	r26, 0x80	; 128
    7f68:	bf e3       	ldi	r27, 0x3F	; 63
    7f6a:	8e ab       	std	Y+54, r24	; 0x36
    7f6c:	9f ab       	std	Y+55, r25	; 0x37
    7f6e:	a8 af       	std	Y+56, r26	; 0x38
    7f70:	b9 af       	std	Y+57, r27	; 0x39
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    7f72:	2b ea       	ldi	r18, 0xAB	; 171
    7f74:	3a ea       	ldi	r19, 0xAA	; 170
    7f76:	4a e2       	ldi	r20, 0x2A	; 42
    7f78:	50 e4       	ldi	r21, 0x40	; 64
    7f7a:	6e a9       	ldd	r22, Y+54	; 0x36
    7f7c:	7f a9       	ldd	r23, Y+55	; 0x37
    7f7e:	88 ad       	ldd	r24, Y+56	; 0x38
    7f80:	99 ad       	ldd	r25, Y+57	; 0x39
    7f82:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    7f86:	dc 01       	movw	r26, r24
    7f88:	cb 01       	movw	r24, r22
    7f8a:	8a af       	std	Y+58, r24	; 0x3a
    7f8c:	9b af       	std	Y+59, r25	; 0x3b
    7f8e:	ac af       	std	Y+60, r26	; 0x3c
    7f90:	bd af       	std	Y+61, r27	; 0x3d
	__tmp2 = ((F_CPU) / 4e6) * __us;
    7f92:	8e 01       	movw	r16, r28
    7f94:	02 5c       	subi	r16, 0xC2	; 194
    7f96:	1f 4f       	sbci	r17, 0xFF	; 255
    7f98:	8e a9       	ldd	r24, Y+54	; 0x36
    7f9a:	9f a9       	ldd	r25, Y+55	; 0x37
    7f9c:	a8 ad       	ldd	r26, Y+56	; 0x38
    7f9e:	b9 ad       	ldd	r27, Y+57	; 0x39
    7fa0:	9c 01       	movw	r18, r24
    7fa2:	ad 01       	movw	r20, r26
    7fa4:	bc 01       	movw	r22, r24
    7fa6:	cd 01       	movw	r24, r26
    7fa8:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    7fac:	dc 01       	movw	r26, r24
    7fae:	cb 01       	movw	r24, r22
    7fb0:	f8 01       	movw	r30, r16
    7fb2:	80 83       	st	Z, r24
    7fb4:	91 83       	std	Z+1, r25	; 0x01
    7fb6:	a2 83       	std	Z+2, r26	; 0x02
    7fb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7fba:	20 e0       	ldi	r18, 0x00	; 0
    7fbc:	30 e0       	ldi	r19, 0x00	; 0
    7fbe:	40 e8       	ldi	r20, 0x80	; 128
    7fc0:	5f e3       	ldi	r21, 0x3F	; 63
    7fc2:	6a ad       	ldd	r22, Y+58	; 0x3a
    7fc4:	7b ad       	ldd	r23, Y+59	; 0x3b
    7fc6:	8c ad       	ldd	r24, Y+60	; 0x3c
    7fc8:	9d ad       	ldd	r25, Y+61	; 0x3d
    7fca:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    7fce:	88 23       	and	r24, r24
    7fd0:	3c f4       	brge	.+14     	; 0x7fe0 <LCDInit+0x4d0>
		__ticks = 1;
    7fd2:	ce 01       	movw	r24, r28
    7fd4:	8e 5b       	subi	r24, 0xBE	; 190
    7fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    7fd8:	21 e0       	ldi	r18, 0x01	; 1
    7fda:	fc 01       	movw	r30, r24
    7fdc:	20 83       	st	Z, r18
    7fde:	22 c1       	rjmp	.+580    	; 0x8224 <LCDInit+0x714>
	else if (__tmp2 > 65535)
    7fe0:	ce 01       	movw	r24, r28
    7fe2:	ce 96       	adiw	r24, 0x3e	; 62
    7fe4:	20 e0       	ldi	r18, 0x00	; 0
    7fe6:	3f ef       	ldi	r19, 0xFF	; 255
    7fe8:	4f e7       	ldi	r20, 0x7F	; 127
    7fea:	57 e4       	ldi	r21, 0x47	; 71
    7fec:	fc 01       	movw	r30, r24
    7fee:	60 81       	ld	r22, Z
    7ff0:	71 81       	ldd	r23, Z+1	; 0x01
    7ff2:	82 81       	ldd	r24, Z+2	; 0x02
    7ff4:	93 81       	ldd	r25, Z+3	; 0x03
    7ff6:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    7ffa:	18 16       	cp	r1, r24
    7ffc:	0c f0       	brlt	.+2      	; 0x8000 <LCDInit+0x4f0>
    7ffe:	cd c0       	rjmp	.+410    	; 0x819a <LCDInit+0x68a>
	{
		_delay_ms(__us / 1000.0);
    8000:	20 e0       	ldi	r18, 0x00	; 0
    8002:	30 e0       	ldi	r19, 0x00	; 0
    8004:	4a e7       	ldi	r20, 0x7A	; 122
    8006:	54 e4       	ldi	r21, 0x44	; 68
    8008:	6e a9       	ldd	r22, Y+54	; 0x36
    800a:	7f a9       	ldd	r23, Y+55	; 0x37
    800c:	88 ad       	ldd	r24, Y+56	; 0x38
    800e:	99 ad       	ldd	r25, Y+57	; 0x39
    8010:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    8014:	dc 01       	movw	r26, r24
    8016:	cb 01       	movw	r24, r22
    8018:	9e 01       	movw	r18, r28
    801a:	2d 5b       	subi	r18, 0xBD	; 189
    801c:	3f 4f       	sbci	r19, 0xFF	; 255
    801e:	f9 01       	movw	r30, r18
    8020:	80 83       	st	Z, r24
    8022:	91 83       	std	Z+1, r25	; 0x01
    8024:	a2 83       	std	Z+2, r26	; 0x02
    8026:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    8028:	8e 01       	movw	r16, r28
    802a:	09 5b       	subi	r16, 0xB9	; 185
    802c:	1f 4f       	sbci	r17, 0xFF	; 255
    802e:	ce 01       	movw	r24, r28
    8030:	8d 5b       	subi	r24, 0xBD	; 189
    8032:	9f 4f       	sbci	r25, 0xFF	; 255
    8034:	20 e0       	ldi	r18, 0x00	; 0
    8036:	30 e0       	ldi	r19, 0x00	; 0
    8038:	4a ef       	ldi	r20, 0xFA	; 250
    803a:	54 e4       	ldi	r21, 0x44	; 68
    803c:	fc 01       	movw	r30, r24
    803e:	60 81       	ld	r22, Z
    8040:	71 81       	ldd	r23, Z+1	; 0x01
    8042:	82 81       	ldd	r24, Z+2	; 0x02
    8044:	93 81       	ldd	r25, Z+3	; 0x03
    8046:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    804a:	dc 01       	movw	r26, r24
    804c:	cb 01       	movw	r24, r22
    804e:	f8 01       	movw	r30, r16
    8050:	80 83       	st	Z, r24
    8052:	91 83       	std	Z+1, r25	; 0x01
    8054:	a2 83       	std	Z+2, r26	; 0x02
    8056:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8058:	ce 01       	movw	r24, r28
    805a:	89 5b       	subi	r24, 0xB9	; 185
    805c:	9f 4f       	sbci	r25, 0xFF	; 255
    805e:	20 e0       	ldi	r18, 0x00	; 0
    8060:	30 e0       	ldi	r19, 0x00	; 0
    8062:	40 e8       	ldi	r20, 0x80	; 128
    8064:	5f e3       	ldi	r21, 0x3F	; 63
    8066:	fc 01       	movw	r30, r24
    8068:	60 81       	ld	r22, Z
    806a:	71 81       	ldd	r23, Z+1	; 0x01
    806c:	82 81       	ldd	r24, Z+2	; 0x02
    806e:	93 81       	ldd	r25, Z+3	; 0x03
    8070:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    8074:	88 23       	and	r24, r24
    8076:	4c f4       	brge	.+18     	; 0x808a <LCDInit+0x57a>
		__ticks = 1;
    8078:	ce 01       	movw	r24, r28
    807a:	85 5b       	subi	r24, 0xB5	; 181
    807c:	9f 4f       	sbci	r25, 0xFF	; 255
    807e:	21 e0       	ldi	r18, 0x01	; 1
    8080:	30 e0       	ldi	r19, 0x00	; 0
    8082:	fc 01       	movw	r30, r24
    8084:	31 83       	std	Z+1, r19	; 0x01
    8086:	20 83       	st	Z, r18
    8088:	6d c0       	rjmp	.+218    	; 0x8164 <LCDInit+0x654>
	else if (__tmp > 65535)
    808a:	ce 01       	movw	r24, r28
    808c:	89 5b       	subi	r24, 0xB9	; 185
    808e:	9f 4f       	sbci	r25, 0xFF	; 255
    8090:	20 e0       	ldi	r18, 0x00	; 0
    8092:	3f ef       	ldi	r19, 0xFF	; 255
    8094:	4f e7       	ldi	r20, 0x7F	; 127
    8096:	57 e4       	ldi	r21, 0x47	; 71
    8098:	fc 01       	movw	r30, r24
    809a:	60 81       	ld	r22, Z
    809c:	71 81       	ldd	r23, Z+1	; 0x01
    809e:	82 81       	ldd	r24, Z+2	; 0x02
    80a0:	93 81       	ldd	r25, Z+3	; 0x03
    80a2:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    80a6:	18 16       	cp	r1, r24
    80a8:	0c f0       	brlt	.+2      	; 0x80ac <LCDInit+0x59c>
    80aa:	4a c0       	rjmp	.+148    	; 0x8140 <LCDInit+0x630>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    80ac:	ce 01       	movw	r24, r28
    80ae:	8d 5b       	subi	r24, 0xBD	; 189
    80b0:	9f 4f       	sbci	r25, 0xFF	; 255
    80b2:	20 e0       	ldi	r18, 0x00	; 0
    80b4:	30 e0       	ldi	r19, 0x00	; 0
    80b6:	40 e2       	ldi	r20, 0x20	; 32
    80b8:	51 e4       	ldi	r21, 0x41	; 65
    80ba:	fc 01       	movw	r30, r24
    80bc:	60 81       	ld	r22, Z
    80be:	71 81       	ldd	r23, Z+1	; 0x01
    80c0:	82 81       	ldd	r24, Z+2	; 0x02
    80c2:	93 81       	ldd	r25, Z+3	; 0x03
    80c4:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    80c8:	dc 01       	movw	r26, r24
    80ca:	cb 01       	movw	r24, r22
    80cc:	8e 01       	movw	r16, r28
    80ce:	05 5b       	subi	r16, 0xB5	; 181
    80d0:	1f 4f       	sbci	r17, 0xFF	; 255
    80d2:	bc 01       	movw	r22, r24
    80d4:	cd 01       	movw	r24, r26
    80d6:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    80da:	dc 01       	movw	r26, r24
    80dc:	cb 01       	movw	r24, r22
    80de:	f8 01       	movw	r30, r16
    80e0:	91 83       	std	Z+1, r25	; 0x01
    80e2:	80 83       	st	Z, r24
    80e4:	24 c0       	rjmp	.+72     	; 0x812e <LCDInit+0x61e>
    80e6:	ce 01       	movw	r24, r28
    80e8:	83 5b       	subi	r24, 0xB3	; 179
    80ea:	9f 4f       	sbci	r25, 0xFF	; 255
    80ec:	28 ec       	ldi	r18, 0xC8	; 200
    80ee:	30 e0       	ldi	r19, 0x00	; 0
    80f0:	fc 01       	movw	r30, r24
    80f2:	31 83       	std	Z+1, r19	; 0x01
    80f4:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    80f6:	ce 01       	movw	r24, r28
    80f8:	83 5b       	subi	r24, 0xB3	; 179
    80fa:	9f 4f       	sbci	r25, 0xFF	; 255
    80fc:	fc 01       	movw	r30, r24
    80fe:	80 81       	ld	r24, Z
    8100:	91 81       	ldd	r25, Z+1	; 0x01
    8102:	01 97       	sbiw	r24, 0x01	; 1
    8104:	f1 f7       	brne	.-4      	; 0x8102 <LCDInit+0x5f2>
    8106:	9e 01       	movw	r18, r28
    8108:	23 5b       	subi	r18, 0xB3	; 179
    810a:	3f 4f       	sbci	r19, 0xFF	; 255
    810c:	f9 01       	movw	r30, r18
    810e:	91 83       	std	Z+1, r25	; 0x01
    8110:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8112:	ce 01       	movw	r24, r28
    8114:	85 5b       	subi	r24, 0xB5	; 181
    8116:	9f 4f       	sbci	r25, 0xFF	; 255
    8118:	9e 01       	movw	r18, r28
    811a:	25 5b       	subi	r18, 0xB5	; 181
    811c:	3f 4f       	sbci	r19, 0xFF	; 255
    811e:	f9 01       	movw	r30, r18
    8120:	20 81       	ld	r18, Z
    8122:	31 81       	ldd	r19, Z+1	; 0x01
    8124:	21 50       	subi	r18, 0x01	; 1
    8126:	31 09       	sbc	r19, r1
    8128:	fc 01       	movw	r30, r24
    812a:	31 83       	std	Z+1, r19	; 0x01
    812c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    812e:	ce 01       	movw	r24, r28
    8130:	85 5b       	subi	r24, 0xB5	; 181
    8132:	9f 4f       	sbci	r25, 0xFF	; 255
    8134:	fc 01       	movw	r30, r24
    8136:	80 81       	ld	r24, Z
    8138:	91 81       	ldd	r25, Z+1	; 0x01
    813a:	89 2b       	or	r24, r25
    813c:	a1 f6       	brne	.-88     	; 0x80e6 <LCDInit+0x5d6>
    813e:	72 c0       	rjmp	.+228    	; 0x8224 <LCDInit+0x714>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8140:	8e 01       	movw	r16, r28
    8142:	05 5b       	subi	r16, 0xB5	; 181
    8144:	1f 4f       	sbci	r17, 0xFF	; 255
    8146:	ce 01       	movw	r24, r28
    8148:	89 5b       	subi	r24, 0xB9	; 185
    814a:	9f 4f       	sbci	r25, 0xFF	; 255
    814c:	fc 01       	movw	r30, r24
    814e:	60 81       	ld	r22, Z
    8150:	71 81       	ldd	r23, Z+1	; 0x01
    8152:	82 81       	ldd	r24, Z+2	; 0x02
    8154:	93 81       	ldd	r25, Z+3	; 0x03
    8156:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    815a:	dc 01       	movw	r26, r24
    815c:	cb 01       	movw	r24, r22
    815e:	f8 01       	movw	r30, r16
    8160:	91 83       	std	Z+1, r25	; 0x01
    8162:	80 83       	st	Z, r24
    8164:	ce 01       	movw	r24, r28
    8166:	81 5b       	subi	r24, 0xB1	; 177
    8168:	9f 4f       	sbci	r25, 0xFF	; 255
    816a:	9e 01       	movw	r18, r28
    816c:	25 5b       	subi	r18, 0xB5	; 181
    816e:	3f 4f       	sbci	r19, 0xFF	; 255
    8170:	f9 01       	movw	r30, r18
    8172:	20 81       	ld	r18, Z
    8174:	31 81       	ldd	r19, Z+1	; 0x01
    8176:	fc 01       	movw	r30, r24
    8178:	31 83       	std	Z+1, r19	; 0x01
    817a:	20 83       	st	Z, r18
    817c:	ce 01       	movw	r24, r28
    817e:	81 5b       	subi	r24, 0xB1	; 177
    8180:	9f 4f       	sbci	r25, 0xFF	; 255
    8182:	fc 01       	movw	r30, r24
    8184:	80 81       	ld	r24, Z
    8186:	91 81       	ldd	r25, Z+1	; 0x01
    8188:	01 97       	sbiw	r24, 0x01	; 1
    818a:	f1 f7       	brne	.-4      	; 0x8188 <LCDInit+0x678>
    818c:	9e 01       	movw	r18, r28
    818e:	21 5b       	subi	r18, 0xB1	; 177
    8190:	3f 4f       	sbci	r19, 0xFF	; 255
    8192:	f9 01       	movw	r30, r18
    8194:	91 83       	std	Z+1, r25	; 0x01
    8196:	80 83       	st	Z, r24
    8198:	45 c0       	rjmp	.+138    	; 0x8224 <LCDInit+0x714>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    819a:	20 e0       	ldi	r18, 0x00	; 0
    819c:	30 e0       	ldi	r19, 0x00	; 0
    819e:	4f e7       	ldi	r20, 0x7F	; 127
    81a0:	53 e4       	ldi	r21, 0x43	; 67
    81a2:	6a ad       	ldd	r22, Y+58	; 0x3a
    81a4:	7b ad       	ldd	r23, Y+59	; 0x3b
    81a6:	8c ad       	ldd	r24, Y+60	; 0x3c
    81a8:	9d ad       	ldd	r25, Y+61	; 0x3d
    81aa:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    81ae:	18 16       	cp	r1, r24
    81b0:	64 f5       	brge	.+88     	; 0x820a <LCDInit+0x6fa>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    81b2:	8e 01       	movw	r16, r28
    81b4:	0f 5a       	subi	r16, 0xAF	; 175
    81b6:	1f 4f       	sbci	r17, 0xFF	; 255
    81b8:	ce 01       	movw	r24, r28
    81ba:	ce 96       	adiw	r24, 0x3e	; 62
    81bc:	fc 01       	movw	r30, r24
    81be:	60 81       	ld	r22, Z
    81c0:	71 81       	ldd	r23, Z+1	; 0x01
    81c2:	82 81       	ldd	r24, Z+2	; 0x02
    81c4:	93 81       	ldd	r25, Z+3	; 0x03
    81c6:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    81ca:	dc 01       	movw	r26, r24
    81cc:	cb 01       	movw	r24, r22
    81ce:	f8 01       	movw	r30, r16
    81d0:	91 83       	std	Z+1, r25	; 0x01
    81d2:	80 83       	st	Z, r24
    81d4:	ce 01       	movw	r24, r28
    81d6:	8d 5a       	subi	r24, 0xAD	; 173
    81d8:	9f 4f       	sbci	r25, 0xFF	; 255
    81da:	9e 01       	movw	r18, r28
    81dc:	2f 5a       	subi	r18, 0xAF	; 175
    81de:	3f 4f       	sbci	r19, 0xFF	; 255
    81e0:	f9 01       	movw	r30, r18
    81e2:	20 81       	ld	r18, Z
    81e4:	31 81       	ldd	r19, Z+1	; 0x01
    81e6:	fc 01       	movw	r30, r24
    81e8:	31 83       	std	Z+1, r19	; 0x01
    81ea:	20 83       	st	Z, r18
    81ec:	ce 01       	movw	r24, r28
    81ee:	8d 5a       	subi	r24, 0xAD	; 173
    81f0:	9f 4f       	sbci	r25, 0xFF	; 255
    81f2:	fc 01       	movw	r30, r24
    81f4:	80 81       	ld	r24, Z
    81f6:	91 81       	ldd	r25, Z+1	; 0x01
    81f8:	01 97       	sbiw	r24, 0x01	; 1
    81fa:	f1 f7       	brne	.-4      	; 0x81f8 <LCDInit+0x6e8>
    81fc:	9e 01       	movw	r18, r28
    81fe:	2d 5a       	subi	r18, 0xAD	; 173
    8200:	3f 4f       	sbci	r19, 0xFF	; 255
    8202:	f9 01       	movw	r30, r18
    8204:	91 83       	std	Z+1, r25	; 0x01
    8206:	80 83       	st	Z, r24
    8208:	24 c0       	rjmp	.+72     	; 0x8252 <LCDInit+0x742>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    820a:	8e 01       	movw	r16, r28
    820c:	0e 5b       	subi	r16, 0xBE	; 190
    820e:	1f 4f       	sbci	r17, 0xFF	; 255
    8210:	6a ad       	ldd	r22, Y+58	; 0x3a
    8212:	7b ad       	ldd	r23, Y+59	; 0x3b
    8214:	8c ad       	ldd	r24, Y+60	; 0x3c
    8216:	9d ad       	ldd	r25, Y+61	; 0x3d
    8218:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    821c:	dc 01       	movw	r26, r24
    821e:	cb 01       	movw	r24, r22
    8220:	f8 01       	movw	r30, r16
    8222:	80 83       	st	Z, r24
    8224:	ce 01       	movw	r24, r28
    8226:	8b 5a       	subi	r24, 0xAB	; 171
    8228:	9f 4f       	sbci	r25, 0xFF	; 255
    822a:	9e 01       	movw	r18, r28
    822c:	2e 5b       	subi	r18, 0xBE	; 190
    822e:	3f 4f       	sbci	r19, 0xFF	; 255
    8230:	f9 01       	movw	r30, r18
    8232:	20 81       	ld	r18, Z
    8234:	fc 01       	movw	r30, r24
    8236:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    8238:	ce 01       	movw	r24, r28
    823a:	8b 5a       	subi	r24, 0xAB	; 171
    823c:	9f 4f       	sbci	r25, 0xFF	; 255
    823e:	fc 01       	movw	r30, r24
    8240:	80 81       	ld	r24, Z
    8242:	28 2f       	mov	r18, r24
    8244:	2a 95       	dec	r18
    8246:	f1 f7       	brne	.-4      	; 0x8244 <LCDInit+0x734>
    8248:	ce 01       	movw	r24, r28
    824a:	8b 5a       	subi	r24, 0xAB	; 171
    824c:	9f 4f       	sbci	r25, 0xFF	; 255
    824e:	fc 01       	movw	r30, r24
    8250:	20 83       	st	Z, r18
	_delay_us(1);
	CLEAR_E();
    8252:	85 e6       	ldi	r24, 0x65	; 101
    8254:	90 e0       	ldi	r25, 0x00	; 0
    8256:	25 e6       	ldi	r18, 0x65	; 101
    8258:	30 e0       	ldi	r19, 0x00	; 0
    825a:	f9 01       	movw	r30, r18
    825c:	20 81       	ld	r18, Z
    825e:	2f 7e       	andi	r18, 0xEF	; 239
    8260:	fc 01       	movw	r30, r24
    8262:	20 83       	st	Z, r18
    8264:	9e 01       	movw	r18, r28
    8266:	2a 5a       	subi	r18, 0xAA	; 170
    8268:	3f 4f       	sbci	r19, 0xFF	; 255
    826a:	80 e0       	ldi	r24, 0x00	; 0
    826c:	90 e0       	ldi	r25, 0x00	; 0
    826e:	a0 e8       	ldi	r26, 0x80	; 128
    8270:	bf e3       	ldi	r27, 0x3F	; 63
    8272:	f9 01       	movw	r30, r18
    8274:	80 83       	st	Z, r24
    8276:	91 83       	std	Z+1, r25	; 0x01
    8278:	a2 83       	std	Z+2, r26	; 0x02
    827a:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    827c:	8e 01       	movw	r16, r28
    827e:	06 5a       	subi	r16, 0xA6	; 166
    8280:	1f 4f       	sbci	r17, 0xFF	; 255
    8282:	ce 01       	movw	r24, r28
    8284:	8a 5a       	subi	r24, 0xAA	; 170
    8286:	9f 4f       	sbci	r25, 0xFF	; 255
    8288:	2b ea       	ldi	r18, 0xAB	; 171
    828a:	3a ea       	ldi	r19, 0xAA	; 170
    828c:	4a e2       	ldi	r20, 0x2A	; 42
    828e:	50 e4       	ldi	r21, 0x40	; 64
    8290:	fc 01       	movw	r30, r24
    8292:	60 81       	ld	r22, Z
    8294:	71 81       	ldd	r23, Z+1	; 0x01
    8296:	82 81       	ldd	r24, Z+2	; 0x02
    8298:	93 81       	ldd	r25, Z+3	; 0x03
    829a:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    829e:	dc 01       	movw	r26, r24
    82a0:	cb 01       	movw	r24, r22
    82a2:	f8 01       	movw	r30, r16
    82a4:	80 83       	st	Z, r24
    82a6:	91 83       	std	Z+1, r25	; 0x01
    82a8:	a2 83       	std	Z+2, r26	; 0x02
    82aa:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    82ac:	8e 01       	movw	r16, r28
    82ae:	02 5a       	subi	r16, 0xA2	; 162
    82b0:	1f 4f       	sbci	r17, 0xFF	; 255
    82b2:	ce 01       	movw	r24, r28
    82b4:	8a 5a       	subi	r24, 0xAA	; 170
    82b6:	9f 4f       	sbci	r25, 0xFF	; 255
    82b8:	fc 01       	movw	r30, r24
    82ba:	80 81       	ld	r24, Z
    82bc:	91 81       	ldd	r25, Z+1	; 0x01
    82be:	a2 81       	ldd	r26, Z+2	; 0x02
    82c0:	b3 81       	ldd	r27, Z+3	; 0x03
    82c2:	9c 01       	movw	r18, r24
    82c4:	ad 01       	movw	r20, r26
    82c6:	bc 01       	movw	r22, r24
    82c8:	cd 01       	movw	r24, r26
    82ca:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    82ce:	dc 01       	movw	r26, r24
    82d0:	cb 01       	movw	r24, r22
    82d2:	f8 01       	movw	r30, r16
    82d4:	80 83       	st	Z, r24
    82d6:	91 83       	std	Z+1, r25	; 0x01
    82d8:	a2 83       	std	Z+2, r26	; 0x02
    82da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    82dc:	ce 01       	movw	r24, r28
    82de:	86 5a       	subi	r24, 0xA6	; 166
    82e0:	9f 4f       	sbci	r25, 0xFF	; 255
    82e2:	20 e0       	ldi	r18, 0x00	; 0
    82e4:	30 e0       	ldi	r19, 0x00	; 0
    82e6:	40 e8       	ldi	r20, 0x80	; 128
    82e8:	5f e3       	ldi	r21, 0x3F	; 63
    82ea:	fc 01       	movw	r30, r24
    82ec:	60 81       	ld	r22, Z
    82ee:	71 81       	ldd	r23, Z+1	; 0x01
    82f0:	82 81       	ldd	r24, Z+2	; 0x02
    82f2:	93 81       	ldd	r25, Z+3	; 0x03
    82f4:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    82f8:	88 23       	and	r24, r24
    82fa:	3c f4       	brge	.+14     	; 0x830a <LCDInit+0x7fa>
		__ticks = 1;
    82fc:	ce 01       	movw	r24, r28
    82fe:	8e 59       	subi	r24, 0x9E	; 158
    8300:	9f 4f       	sbci	r25, 0xFF	; 255
    8302:	21 e0       	ldi	r18, 0x01	; 1
    8304:	fc 01       	movw	r30, r24
    8306:	20 83       	st	Z, r18
    8308:	30 c1       	rjmp	.+608    	; 0x856a <LCDInit+0xa5a>
	else if (__tmp2 > 65535)
    830a:	ce 01       	movw	r24, r28
    830c:	82 5a       	subi	r24, 0xA2	; 162
    830e:	9f 4f       	sbci	r25, 0xFF	; 255
    8310:	20 e0       	ldi	r18, 0x00	; 0
    8312:	3f ef       	ldi	r19, 0xFF	; 255
    8314:	4f e7       	ldi	r20, 0x7F	; 127
    8316:	57 e4       	ldi	r21, 0x47	; 71
    8318:	fc 01       	movw	r30, r24
    831a:	60 81       	ld	r22, Z
    831c:	71 81       	ldd	r23, Z+1	; 0x01
    831e:	82 81       	ldd	r24, Z+2	; 0x02
    8320:	93 81       	ldd	r25, Z+3	; 0x03
    8322:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    8326:	18 16       	cp	r1, r24
    8328:	0c f0       	brlt	.+2      	; 0x832c <LCDInit+0x81c>
    832a:	d1 c0       	rjmp	.+418    	; 0x84ce <LCDInit+0x9be>
	{
		_delay_ms(__us / 1000.0);
    832c:	ce 01       	movw	r24, r28
    832e:	8a 5a       	subi	r24, 0xAA	; 170
    8330:	9f 4f       	sbci	r25, 0xFF	; 255
    8332:	20 e0       	ldi	r18, 0x00	; 0
    8334:	30 e0       	ldi	r19, 0x00	; 0
    8336:	4a e7       	ldi	r20, 0x7A	; 122
    8338:	54 e4       	ldi	r21, 0x44	; 68
    833a:	fc 01       	movw	r30, r24
    833c:	60 81       	ld	r22, Z
    833e:	71 81       	ldd	r23, Z+1	; 0x01
    8340:	82 81       	ldd	r24, Z+2	; 0x02
    8342:	93 81       	ldd	r25, Z+3	; 0x03
    8344:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    8348:	dc 01       	movw	r26, r24
    834a:	cb 01       	movw	r24, r22
    834c:	9e 01       	movw	r18, r28
    834e:	2d 59       	subi	r18, 0x9D	; 157
    8350:	3f 4f       	sbci	r19, 0xFF	; 255
    8352:	f9 01       	movw	r30, r18
    8354:	80 83       	st	Z, r24
    8356:	91 83       	std	Z+1, r25	; 0x01
    8358:	a2 83       	std	Z+2, r26	; 0x02
    835a:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    835c:	8e 01       	movw	r16, r28
    835e:	09 59       	subi	r16, 0x99	; 153
    8360:	1f 4f       	sbci	r17, 0xFF	; 255
    8362:	ce 01       	movw	r24, r28
    8364:	8d 59       	subi	r24, 0x9D	; 157
    8366:	9f 4f       	sbci	r25, 0xFF	; 255
    8368:	20 e0       	ldi	r18, 0x00	; 0
    836a:	30 e0       	ldi	r19, 0x00	; 0
    836c:	4a ef       	ldi	r20, 0xFA	; 250
    836e:	54 e4       	ldi	r21, 0x44	; 68
    8370:	fc 01       	movw	r30, r24
    8372:	60 81       	ld	r22, Z
    8374:	71 81       	ldd	r23, Z+1	; 0x01
    8376:	82 81       	ldd	r24, Z+2	; 0x02
    8378:	93 81       	ldd	r25, Z+3	; 0x03
    837a:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    837e:	dc 01       	movw	r26, r24
    8380:	cb 01       	movw	r24, r22
    8382:	f8 01       	movw	r30, r16
    8384:	80 83       	st	Z, r24
    8386:	91 83       	std	Z+1, r25	; 0x01
    8388:	a2 83       	std	Z+2, r26	; 0x02
    838a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    838c:	ce 01       	movw	r24, r28
    838e:	89 59       	subi	r24, 0x99	; 153
    8390:	9f 4f       	sbci	r25, 0xFF	; 255
    8392:	20 e0       	ldi	r18, 0x00	; 0
    8394:	30 e0       	ldi	r19, 0x00	; 0
    8396:	40 e8       	ldi	r20, 0x80	; 128
    8398:	5f e3       	ldi	r21, 0x3F	; 63
    839a:	fc 01       	movw	r30, r24
    839c:	60 81       	ld	r22, Z
    839e:	71 81       	ldd	r23, Z+1	; 0x01
    83a0:	82 81       	ldd	r24, Z+2	; 0x02
    83a2:	93 81       	ldd	r25, Z+3	; 0x03
    83a4:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    83a8:	88 23       	and	r24, r24
    83aa:	4c f4       	brge	.+18     	; 0x83be <LCDInit+0x8ae>
		__ticks = 1;
    83ac:	ce 01       	movw	r24, r28
    83ae:	85 59       	subi	r24, 0x95	; 149
    83b0:	9f 4f       	sbci	r25, 0xFF	; 255
    83b2:	21 e0       	ldi	r18, 0x01	; 1
    83b4:	30 e0       	ldi	r19, 0x00	; 0
    83b6:	fc 01       	movw	r30, r24
    83b8:	31 83       	std	Z+1, r19	; 0x01
    83ba:	20 83       	st	Z, r18
    83bc:	6d c0       	rjmp	.+218    	; 0x8498 <LCDInit+0x988>
	else if (__tmp > 65535)
    83be:	ce 01       	movw	r24, r28
    83c0:	89 59       	subi	r24, 0x99	; 153
    83c2:	9f 4f       	sbci	r25, 0xFF	; 255
    83c4:	20 e0       	ldi	r18, 0x00	; 0
    83c6:	3f ef       	ldi	r19, 0xFF	; 255
    83c8:	4f e7       	ldi	r20, 0x7F	; 127
    83ca:	57 e4       	ldi	r21, 0x47	; 71
    83cc:	fc 01       	movw	r30, r24
    83ce:	60 81       	ld	r22, Z
    83d0:	71 81       	ldd	r23, Z+1	; 0x01
    83d2:	82 81       	ldd	r24, Z+2	; 0x02
    83d4:	93 81       	ldd	r25, Z+3	; 0x03
    83d6:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    83da:	18 16       	cp	r1, r24
    83dc:	0c f0       	brlt	.+2      	; 0x83e0 <LCDInit+0x8d0>
    83de:	4a c0       	rjmp	.+148    	; 0x8474 <LCDInit+0x964>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    83e0:	ce 01       	movw	r24, r28
    83e2:	8d 59       	subi	r24, 0x9D	; 157
    83e4:	9f 4f       	sbci	r25, 0xFF	; 255
    83e6:	20 e0       	ldi	r18, 0x00	; 0
    83e8:	30 e0       	ldi	r19, 0x00	; 0
    83ea:	40 e2       	ldi	r20, 0x20	; 32
    83ec:	51 e4       	ldi	r21, 0x41	; 65
    83ee:	fc 01       	movw	r30, r24
    83f0:	60 81       	ld	r22, Z
    83f2:	71 81       	ldd	r23, Z+1	; 0x01
    83f4:	82 81       	ldd	r24, Z+2	; 0x02
    83f6:	93 81       	ldd	r25, Z+3	; 0x03
    83f8:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    83fc:	dc 01       	movw	r26, r24
    83fe:	cb 01       	movw	r24, r22
    8400:	8e 01       	movw	r16, r28
    8402:	05 59       	subi	r16, 0x95	; 149
    8404:	1f 4f       	sbci	r17, 0xFF	; 255
    8406:	bc 01       	movw	r22, r24
    8408:	cd 01       	movw	r24, r26
    840a:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    840e:	dc 01       	movw	r26, r24
    8410:	cb 01       	movw	r24, r22
    8412:	f8 01       	movw	r30, r16
    8414:	91 83       	std	Z+1, r25	; 0x01
    8416:	80 83       	st	Z, r24
    8418:	24 c0       	rjmp	.+72     	; 0x8462 <LCDInit+0x952>
    841a:	ce 01       	movw	r24, r28
    841c:	83 59       	subi	r24, 0x93	; 147
    841e:	9f 4f       	sbci	r25, 0xFF	; 255
    8420:	28 ec       	ldi	r18, 0xC8	; 200
    8422:	30 e0       	ldi	r19, 0x00	; 0
    8424:	fc 01       	movw	r30, r24
    8426:	31 83       	std	Z+1, r19	; 0x01
    8428:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    842a:	ce 01       	movw	r24, r28
    842c:	83 59       	subi	r24, 0x93	; 147
    842e:	9f 4f       	sbci	r25, 0xFF	; 255
    8430:	fc 01       	movw	r30, r24
    8432:	80 81       	ld	r24, Z
    8434:	91 81       	ldd	r25, Z+1	; 0x01
    8436:	01 97       	sbiw	r24, 0x01	; 1
    8438:	f1 f7       	brne	.-4      	; 0x8436 <LCDInit+0x926>
    843a:	9e 01       	movw	r18, r28
    843c:	23 59       	subi	r18, 0x93	; 147
    843e:	3f 4f       	sbci	r19, 0xFF	; 255
    8440:	f9 01       	movw	r30, r18
    8442:	91 83       	std	Z+1, r25	; 0x01
    8444:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8446:	ce 01       	movw	r24, r28
    8448:	85 59       	subi	r24, 0x95	; 149
    844a:	9f 4f       	sbci	r25, 0xFF	; 255
    844c:	9e 01       	movw	r18, r28
    844e:	25 59       	subi	r18, 0x95	; 149
    8450:	3f 4f       	sbci	r19, 0xFF	; 255
    8452:	f9 01       	movw	r30, r18
    8454:	20 81       	ld	r18, Z
    8456:	31 81       	ldd	r19, Z+1	; 0x01
    8458:	21 50       	subi	r18, 0x01	; 1
    845a:	31 09       	sbc	r19, r1
    845c:	fc 01       	movw	r30, r24
    845e:	31 83       	std	Z+1, r19	; 0x01
    8460:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8462:	ce 01       	movw	r24, r28
    8464:	85 59       	subi	r24, 0x95	; 149
    8466:	9f 4f       	sbci	r25, 0xFF	; 255
    8468:	fc 01       	movw	r30, r24
    846a:	80 81       	ld	r24, Z
    846c:	91 81       	ldd	r25, Z+1	; 0x01
    846e:	89 2b       	or	r24, r25
    8470:	a1 f6       	brne	.-88     	; 0x841a <LCDInit+0x90a>
    8472:	7b c0       	rjmp	.+246    	; 0x856a <LCDInit+0xa5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8474:	8e 01       	movw	r16, r28
    8476:	05 59       	subi	r16, 0x95	; 149
    8478:	1f 4f       	sbci	r17, 0xFF	; 255
    847a:	ce 01       	movw	r24, r28
    847c:	89 59       	subi	r24, 0x99	; 153
    847e:	9f 4f       	sbci	r25, 0xFF	; 255
    8480:	fc 01       	movw	r30, r24
    8482:	60 81       	ld	r22, Z
    8484:	71 81       	ldd	r23, Z+1	; 0x01
    8486:	82 81       	ldd	r24, Z+2	; 0x02
    8488:	93 81       	ldd	r25, Z+3	; 0x03
    848a:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    848e:	dc 01       	movw	r26, r24
    8490:	cb 01       	movw	r24, r22
    8492:	f8 01       	movw	r30, r16
    8494:	91 83       	std	Z+1, r25	; 0x01
    8496:	80 83       	st	Z, r24
    8498:	ce 01       	movw	r24, r28
    849a:	81 59       	subi	r24, 0x91	; 145
    849c:	9f 4f       	sbci	r25, 0xFF	; 255
    849e:	9e 01       	movw	r18, r28
    84a0:	25 59       	subi	r18, 0x95	; 149
    84a2:	3f 4f       	sbci	r19, 0xFF	; 255
    84a4:	f9 01       	movw	r30, r18
    84a6:	20 81       	ld	r18, Z
    84a8:	31 81       	ldd	r19, Z+1	; 0x01
    84aa:	fc 01       	movw	r30, r24
    84ac:	31 83       	std	Z+1, r19	; 0x01
    84ae:	20 83       	st	Z, r18
    84b0:	ce 01       	movw	r24, r28
    84b2:	81 59       	subi	r24, 0x91	; 145
    84b4:	9f 4f       	sbci	r25, 0xFF	; 255
    84b6:	fc 01       	movw	r30, r24
    84b8:	80 81       	ld	r24, Z
    84ba:	91 81       	ldd	r25, Z+1	; 0x01
    84bc:	01 97       	sbiw	r24, 0x01	; 1
    84be:	f1 f7       	brne	.-4      	; 0x84bc <LCDInit+0x9ac>
    84c0:	9e 01       	movw	r18, r28
    84c2:	21 59       	subi	r18, 0x91	; 145
    84c4:	3f 4f       	sbci	r19, 0xFF	; 255
    84c6:	f9 01       	movw	r30, r18
    84c8:	91 83       	std	Z+1, r25	; 0x01
    84ca:	80 83       	st	Z, r24
    84cc:	4e c0       	rjmp	.+156    	; 0x856a <LCDInit+0xa5a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    84ce:	ce 01       	movw	r24, r28
    84d0:	86 5a       	subi	r24, 0xA6	; 166
    84d2:	9f 4f       	sbci	r25, 0xFF	; 255
    84d4:	20 e0       	ldi	r18, 0x00	; 0
    84d6:	30 e0       	ldi	r19, 0x00	; 0
    84d8:	4f e7       	ldi	r20, 0x7F	; 127
    84da:	53 e4       	ldi	r21, 0x43	; 67
    84dc:	fc 01       	movw	r30, r24
    84de:	60 81       	ld	r22, Z
    84e0:	71 81       	ldd	r23, Z+1	; 0x01
    84e2:	82 81       	ldd	r24, Z+2	; 0x02
    84e4:	93 81       	ldd	r25, Z+3	; 0x03
    84e6:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    84ea:	18 16       	cp	r1, r24
    84ec:	6c f5       	brge	.+90     	; 0x8548 <LCDInit+0xa38>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    84ee:	8e 01       	movw	r16, r28
    84f0:	0f 58       	subi	r16, 0x8F	; 143
    84f2:	1f 4f       	sbci	r17, 0xFF	; 255
    84f4:	ce 01       	movw	r24, r28
    84f6:	82 5a       	subi	r24, 0xA2	; 162
    84f8:	9f 4f       	sbci	r25, 0xFF	; 255
    84fa:	fc 01       	movw	r30, r24
    84fc:	60 81       	ld	r22, Z
    84fe:	71 81       	ldd	r23, Z+1	; 0x01
    8500:	82 81       	ldd	r24, Z+2	; 0x02
    8502:	93 81       	ldd	r25, Z+3	; 0x03
    8504:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    8508:	dc 01       	movw	r26, r24
    850a:	cb 01       	movw	r24, r22
    850c:	f8 01       	movw	r30, r16
    850e:	91 83       	std	Z+1, r25	; 0x01
    8510:	80 83       	st	Z, r24
    8512:	ce 01       	movw	r24, r28
    8514:	8d 58       	subi	r24, 0x8D	; 141
    8516:	9f 4f       	sbci	r25, 0xFF	; 255
    8518:	9e 01       	movw	r18, r28
    851a:	2f 58       	subi	r18, 0x8F	; 143
    851c:	3f 4f       	sbci	r19, 0xFF	; 255
    851e:	f9 01       	movw	r30, r18
    8520:	20 81       	ld	r18, Z
    8522:	31 81       	ldd	r19, Z+1	; 0x01
    8524:	fc 01       	movw	r30, r24
    8526:	31 83       	std	Z+1, r19	; 0x01
    8528:	20 83       	st	Z, r18
    852a:	ce 01       	movw	r24, r28
    852c:	8d 58       	subi	r24, 0x8D	; 141
    852e:	9f 4f       	sbci	r25, 0xFF	; 255
    8530:	fc 01       	movw	r30, r24
    8532:	80 81       	ld	r24, Z
    8534:	91 81       	ldd	r25, Z+1	; 0x01
    8536:	01 97       	sbiw	r24, 0x01	; 1
    8538:	f1 f7       	brne	.-4      	; 0x8536 <LCDInit+0xa26>
    853a:	9e 01       	movw	r18, r28
    853c:	2d 58       	subi	r18, 0x8D	; 141
    853e:	3f 4f       	sbci	r19, 0xFF	; 255
    8540:	f9 01       	movw	r30, r18
    8542:	91 83       	std	Z+1, r25	; 0x01
    8544:	80 83       	st	Z, r24
    8546:	28 c0       	rjmp	.+80     	; 0x8598 <LCDInit+0xa88>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    8548:	8e 01       	movw	r16, r28
    854a:	0e 59       	subi	r16, 0x9E	; 158
    854c:	1f 4f       	sbci	r17, 0xFF	; 255
    854e:	ce 01       	movw	r24, r28
    8550:	86 5a       	subi	r24, 0xA6	; 166
    8552:	9f 4f       	sbci	r25, 0xFF	; 255
    8554:	fc 01       	movw	r30, r24
    8556:	60 81       	ld	r22, Z
    8558:	71 81       	ldd	r23, Z+1	; 0x01
    855a:	82 81       	ldd	r24, Z+2	; 0x02
    855c:	93 81       	ldd	r25, Z+3	; 0x03
    855e:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
    8562:	dc 01       	movw	r26, r24
    8564:	cb 01       	movw	r24, r22
    8566:	f8 01       	movw	r30, r16
    8568:	80 83       	st	Z, r24
    856a:	ce 01       	movw	r24, r28
    856c:	8b 58       	subi	r24, 0x8B	; 139
    856e:	9f 4f       	sbci	r25, 0xFF	; 255
    8570:	9e 01       	movw	r18, r28
    8572:	2e 59       	subi	r18, 0x9E	; 158
    8574:	3f 4f       	sbci	r19, 0xFF	; 255
    8576:	f9 01       	movw	r30, r18
    8578:	20 81       	ld	r18, Z
    857a:	fc 01       	movw	r30, r24
    857c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    857e:	ce 01       	movw	r24, r28
    8580:	8b 58       	subi	r24, 0x8B	; 139
    8582:	9f 4f       	sbci	r25, 0xFF	; 255
    8584:	fc 01       	movw	r30, r24
    8586:	80 81       	ld	r24, Z
    8588:	28 2f       	mov	r18, r24
    858a:	2a 95       	dec	r18
    858c:	f1 f7       	brne	.-4      	; 0x858a <LCDInit+0xa7a>
    858e:	ce 01       	movw	r24, r28
    8590:	8b 58       	subi	r24, 0x8B	; 139
    8592:	9f 4f       	sbci	r25, 0xFF	; 255
    8594:	fc 01       	movw	r30, r24
    8596:	20 83       	st	Z, r18
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
    8598:	0e 94 1e 32 	call	0x643c	; 0x643c <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
    859c:	ce 01       	movw	r24, r28
    859e:	8a 58       	subi	r24, 0x8A	; 138
    85a0:	9f 4f       	sbci	r25, 0xFF	; 255
    85a2:	fc 01       	movw	r30, r24
    85a4:	80 81       	ld	r24, Z
    85a6:	8c 60       	ori	r24, 0x0C	; 12
    85a8:	60 e0       	ldi	r22, 0x00	; 0
    85aa:	0e 94 3a 2a 	call	0x5474	; 0x5474 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
    85ae:	60 e0       	ldi	r22, 0x00	; 0
    85b0:	88 e2       	ldi	r24, 0x28	; 40
    85b2:	0e 94 3a 2a 	call	0x5474	; 0x5474 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
    85b6:	60 e0       	ldi	r22, 0x00	; 0
    85b8:	80 e4       	ldi	r24, 0x40	; 64
    85ba:	0e 94 3a 2a 	call	0x5474	; 0x5474 <LCDByte>

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++){
    85be:	1e 82       	std	Y+6, r1	; 0x06
    85c0:	0d c0       	rjmp	.+26     	; 0x85dc <LCDInit+0xacc>
		LCDData(__cgram[__i]);
    85c2:	8e 81       	ldd	r24, Y+6	; 0x06
    85c4:	88 2f       	mov	r24, r24
    85c6:	90 e0       	ldi	r25, 0x00	; 0
    85c8:	80 50       	subi	r24, 0x00	; 0
    85ca:	9f 4f       	sbci	r25, 0xFF	; 255
    85cc:	fc 01       	movw	r30, r24
    85ce:	80 81       	ld	r24, Z
    85d0:	61 e0       	ldi	r22, 0x01	; 1
    85d2:	0e 94 3a 2a 	call	0x5474	; 0x5474 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++){
    85d6:	8e 81       	ldd	r24, Y+6	; 0x06
    85d8:	8f 5f       	subi	r24, 0xFF	; 255
    85da:	8e 83       	std	Y+6, r24	; 0x06
    85dc:	8e 81       	ldd	r24, Y+6	; 0x06
    85de:	80 34       	cpi	r24, 0x40	; 64
    85e0:	80 f3       	brcs	.-32     	; 0x85c2 <LCDInit+0xab2>
		LCDData(__cgram[__i]);
	}
	
	LCDGotoXY(0,0);
    85e2:	60 e0       	ldi	r22, 0x00	; 0
    85e4:	80 e0       	ldi	r24, 0x00	; 0
    85e6:	0e 94 d7 43 	call	0x87ae	; 0x87ae <LCDGotoXY>
}
    85ea:	ca 58       	subi	r28, 0x8A	; 138
    85ec:	df 4f       	sbci	r29, 0xFF	; 255
    85ee:	0f b6       	in	r0, 0x3f	; 63
    85f0:	f8 94       	cli
    85f2:	de bf       	out	0x3e, r29	; 62
    85f4:	0f be       	out	0x3f, r0	; 63
    85f6:	cd bf       	out	0x3d, r28	; 61
    85f8:	df 91       	pop	r29
    85fa:	cf 91       	pop	r28
    85fc:	1f 91       	pop	r17
    85fe:	0f 91       	pop	r16
    8600:	08 95       	ret

00008602 <LCDWriteString>:

/***********************************************************
 * Escribe un string en el LCD
 ***********************************************************/
void LCDWriteString(const char *msg){
    8602:	cf 93       	push	r28
    8604:	df 93       	push	r29
    8606:	00 d0       	rcall	.+0      	; 0x8608 <LCDWriteString+0x6>
    8608:	1f 92       	push	r1
    860a:	cd b7       	in	r28, 0x3d	; 61
    860c:	de b7       	in	r29, 0x3e	; 62
    860e:	9b 83       	std	Y+3, r25	; 0x03
    8610:	8a 83       	std	Y+2, r24	; 0x02
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
	while(*msg!='\0'){
    8612:	34 c0       	rjmp	.+104    	; 0x867c <LCDWriteString+0x7a>
		//Custom Char Support
		if(*msg=='%'){
    8614:	8a 81       	ldd	r24, Y+2	; 0x02
    8616:	9b 81       	ldd	r25, Y+3	; 0x03
    8618:	fc 01       	movw	r30, r24
    861a:	80 81       	ld	r24, Z
    861c:	85 32       	cpi	r24, 0x25	; 37
    861e:	11 f5       	brne	.+68     	; 0x8664 <LCDWriteString+0x62>
			msg++;
    8620:	8a 81       	ldd	r24, Y+2	; 0x02
    8622:	9b 81       	ldd	r25, Y+3	; 0x03
    8624:	01 96       	adiw	r24, 0x01	; 1
    8626:	9b 83       	std	Y+3, r25	; 0x03
    8628:	8a 83       	std	Y+2, r24	; 0x02
			int8_t cc=*msg-'0';
    862a:	8a 81       	ldd	r24, Y+2	; 0x02
    862c:	9b 81       	ldd	r25, Y+3	; 0x03
    862e:	fc 01       	movw	r30, r24
    8630:	80 81       	ld	r24, Z
    8632:	80 53       	subi	r24, 0x30	; 48
    8634:	89 83       	std	Y+1, r24	; 0x01

			if(cc>=0 && cc<=7){
    8636:	89 81       	ldd	r24, Y+1	; 0x01
    8638:	88 23       	and	r24, r24
    863a:	44 f0       	brlt	.+16     	; 0x864c <LCDWriteString+0x4a>
    863c:	89 81       	ldd	r24, Y+1	; 0x01
    863e:	88 30       	cpi	r24, 0x08	; 8
    8640:	2c f4       	brge	.+10     	; 0x864c <LCDWriteString+0x4a>
				LCDData(cc);
    8642:	89 81       	ldd	r24, Y+1	; 0x01
    8644:	61 e0       	ldi	r22, 0x01	; 1
    8646:	0e 94 3a 2a 	call	0x5474	; 0x5474 <LCDByte>
    864a:	13 c0       	rjmp	.+38     	; 0x8672 <LCDWriteString+0x70>
			}
			else{
				LCDData('%');
    864c:	61 e0       	ldi	r22, 0x01	; 1
    864e:	85 e2       	ldi	r24, 0x25	; 37
    8650:	0e 94 3a 2a 	call	0x5474	; 0x5474 <LCDByte>
				LCDData(*msg);
    8654:	8a 81       	ldd	r24, Y+2	; 0x02
    8656:	9b 81       	ldd	r25, Y+3	; 0x03
    8658:	fc 01       	movw	r30, r24
    865a:	80 81       	ld	r24, Z
    865c:	61 e0       	ldi	r22, 0x01	; 1
    865e:	0e 94 3a 2a 	call	0x5474	; 0x5474 <LCDByte>
    8662:	07 c0       	rjmp	.+14     	; 0x8672 <LCDWriteString+0x70>
			}
		}
		else{
			LCDData(*msg);
    8664:	8a 81       	ldd	r24, Y+2	; 0x02
    8666:	9b 81       	ldd	r25, Y+3	; 0x03
    8668:	fc 01       	movw	r30, r24
    866a:	80 81       	ld	r24, Z
    866c:	61 e0       	ldi	r22, 0x01	; 1
    866e:	0e 94 3a 2a 	call	0x5474	; 0x5474 <LCDByte>
		}
		msg++;
    8672:	8a 81       	ldd	r24, Y+2	; 0x02
    8674:	9b 81       	ldd	r25, Y+3	; 0x03
    8676:	01 96       	adiw	r24, 0x01	; 1
    8678:	9b 83       	std	Y+3, r25	; 0x03
    867a:	8a 83       	std	Y+2, r24	; 0x02
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
	while(*msg!='\0'){
    867c:	8a 81       	ldd	r24, Y+2	; 0x02
    867e:	9b 81       	ldd	r25, Y+3	; 0x03
    8680:	fc 01       	movw	r30, r24
    8682:	80 81       	ld	r24, Z
    8684:	88 23       	and	r24, r24
    8686:	31 f6       	brne	.-116    	; 0x8614 <LCDWriteString+0x12>
		else{
			LCDData(*msg);
		}
		msg++;
	}
}
    8688:	0f 90       	pop	r0
    868a:	0f 90       	pop	r0
    868c:	0f 90       	pop	r0
    868e:	df 91       	pop	r29
    8690:	cf 91       	pop	r28
    8692:	08 95       	ret

00008694 <LCDWriteInt>:

/***********************************************************
 * Escribe un integer al LCD
 ***********************************************************/
void LCDWriteInt(int val,unsigned int field_length){
    8694:	cf 93       	push	r28
    8696:	df 93       	push	r29
    8698:	cd b7       	in	r28, 0x3d	; 61
    869a:	de b7       	in	r29, 0x3e	; 62
    869c:	61 97       	sbiw	r28, 0x11	; 17
    869e:	0f b6       	in	r0, 0x3f	; 63
    86a0:	f8 94       	cli
    86a2:	de bf       	out	0x3e, r29	; 62
    86a4:	0f be       	out	0x3f, r0	; 63
    86a6:	cd bf       	out	0x3d, r28	; 61
    86a8:	9b 87       	std	Y+11, r25	; 0x0b
    86aa:	8a 87       	std	Y+10, r24	; 0x0a
    86ac:	7d 87       	std	Y+13, r23	; 0x0d
    86ae:	6c 87       	std	Y+12, r22	; 0x0c
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
    86b0:	25 e0       	ldi	r18, 0x05	; 5
    86b2:	ce 01       	movw	r24, r28
    86b4:	05 96       	adiw	r24, 0x05	; 5
    86b6:	fc 01       	movw	r30, r24
    86b8:	32 2f       	mov	r19, r18
    86ba:	11 92       	st	Z+, r1
    86bc:	3a 95       	dec	r19
    86be:	e9 f7       	brne	.-6      	; 0x86ba <LCDWriteInt+0x26>
	int i=4,j=0;
    86c0:	84 e0       	ldi	r24, 0x04	; 4
    86c2:	90 e0       	ldi	r25, 0x00	; 0
    86c4:	9a 83       	std	Y+2, r25	; 0x02
    86c6:	89 83       	std	Y+1, r24	; 0x01
    86c8:	1c 82       	std	Y+4, r1	; 0x04
    86ca:	1b 82       	std	Y+3, r1	; 0x03

	while(val){
    86cc:	20 c0       	rjmp	.+64     	; 0x870e <LCDWriteInt+0x7a>
		str[i]=val%10;
    86ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    86d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    86d2:	2a e0       	ldi	r18, 0x0A	; 10
    86d4:	30 e0       	ldi	r19, 0x00	; 0
    86d6:	b9 01       	movw	r22, r18
    86d8:	0e 94 32 81 	call	0x10264	; 0x10264 <__divmodhi4>
    86dc:	48 2f       	mov	r20, r24
    86de:	9e 01       	movw	r18, r28
    86e0:	2b 5f       	subi	r18, 0xFB	; 251
    86e2:	3f 4f       	sbci	r19, 0xFF	; 255
    86e4:	89 81       	ldd	r24, Y+1	; 0x01
    86e6:	9a 81       	ldd	r25, Y+2	; 0x02
    86e8:	82 0f       	add	r24, r18
    86ea:	93 1f       	adc	r25, r19
    86ec:	fc 01       	movw	r30, r24
    86ee:	40 83       	st	Z, r20
		val=val/10;
    86f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    86f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    86f4:	2a e0       	ldi	r18, 0x0A	; 10
    86f6:	30 e0       	ldi	r19, 0x00	; 0
    86f8:	b9 01       	movw	r22, r18
    86fa:	0e 94 32 81 	call	0x10264	; 0x10264 <__divmodhi4>
    86fe:	cb 01       	movw	r24, r22
    8700:	9b 87       	std	Y+11, r25	; 0x0b
    8702:	8a 87       	std	Y+10, r24	; 0x0a
		i--;
    8704:	89 81       	ldd	r24, Y+1	; 0x01
    8706:	9a 81       	ldd	r25, Y+2	; 0x02
    8708:	01 97       	sbiw	r24, 0x01	; 1
    870a:	9a 83       	std	Y+2, r25	; 0x02
    870c:	89 83       	std	Y+1, r24	; 0x01
	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;

	while(val){
    870e:	8a 85       	ldd	r24, Y+10	; 0x0a
    8710:	9b 85       	ldd	r25, Y+11	; 0x0b
    8712:	89 2b       	or	r24, r25
    8714:	e1 f6       	brne	.-72     	; 0x86ce <LCDWriteInt+0x3a>
		str[i]=val%10;
		val=val/10;
		i--;
	}

	if(field_length==-1){
    8716:	8c 85       	ldd	r24, Y+12	; 0x0c
    8718:	9d 85       	ldd	r25, Y+13	; 0x0d
    871a:	01 96       	adiw	r24, 0x01	; 1
    871c:	91 f4       	brne	.+36     	; 0x8742 <LCDWriteInt+0xae>
		while(str[j]==0){
    871e:	05 c0       	rjmp	.+10     	; 0x872a <LCDWriteInt+0x96>
			j++;
    8720:	8b 81       	ldd	r24, Y+3	; 0x03
    8722:	9c 81       	ldd	r25, Y+4	; 0x04
    8724:	01 96       	adiw	r24, 0x01	; 1
    8726:	9c 83       	std	Y+4, r25	; 0x04
    8728:	8b 83       	std	Y+3, r24	; 0x03
		val=val/10;
		i--;
	}

	if(field_length==-1){
		while(str[j]==0){
    872a:	9e 01       	movw	r18, r28
    872c:	2b 5f       	subi	r18, 0xFB	; 251
    872e:	3f 4f       	sbci	r19, 0xFF	; 255
    8730:	8b 81       	ldd	r24, Y+3	; 0x03
    8732:	9c 81       	ldd	r25, Y+4	; 0x04
    8734:	82 0f       	add	r24, r18
    8736:	93 1f       	adc	r25, r19
    8738:	fc 01       	movw	r30, r24
    873a:	80 81       	ld	r24, Z
    873c:	88 23       	and	r24, r24
    873e:	81 f3       	breq	.-32     	; 0x8720 <LCDWriteInt+0x8c>
    8740:	0a c0       	rjmp	.+20     	; 0x8756 <LCDWriteInt+0xc2>
			j++;
		}
	}
	else{
		j=5-field_length;
    8742:	25 e0       	ldi	r18, 0x05	; 5
    8744:	30 e0       	ldi	r19, 0x00	; 0
    8746:	8c 85       	ldd	r24, Y+12	; 0x0c
    8748:	9d 85       	ldd	r25, Y+13	; 0x0d
    874a:	a9 01       	movw	r20, r18
    874c:	48 1b       	sub	r20, r24
    874e:	59 0b       	sbc	r21, r25
    8750:	ca 01       	movw	r24, r20
    8752:	9c 83       	std	Y+4, r25	; 0x04
    8754:	8b 83       	std	Y+3, r24	; 0x03
	}

	if(val<0){
    8756:	8a 85       	ldd	r24, Y+10	; 0x0a
    8758:	9b 85       	ldd	r25, Y+11	; 0x0b
    875a:	99 23       	and	r25, r25
    875c:	24 f4       	brge	.+8      	; 0x8766 <LCDWriteInt+0xd2>
		LCDData('-');
    875e:	61 e0       	ldi	r22, 0x01	; 1
    8760:	8d e2       	ldi	r24, 0x2D	; 45
    8762:	0e 94 3a 2a 	call	0x5474	; 0x5474 <LCDByte>
	}

	for(i=j;i<5;i++){
    8766:	8b 81       	ldd	r24, Y+3	; 0x03
    8768:	9c 81       	ldd	r25, Y+4	; 0x04
    876a:	9a 83       	std	Y+2, r25	; 0x02
    876c:	89 83       	std	Y+1, r24	; 0x01
    876e:	12 c0       	rjmp	.+36     	; 0x8794 <LCDWriteInt+0x100>
		LCDData(48+str[i]);
    8770:	9e 01       	movw	r18, r28
    8772:	2b 5f       	subi	r18, 0xFB	; 251
    8774:	3f 4f       	sbci	r19, 0xFF	; 255
    8776:	89 81       	ldd	r24, Y+1	; 0x01
    8778:	9a 81       	ldd	r25, Y+2	; 0x02
    877a:	82 0f       	add	r24, r18
    877c:	93 1f       	adc	r25, r19
    877e:	fc 01       	movw	r30, r24
    8780:	80 81       	ld	r24, Z
    8782:	80 5d       	subi	r24, 0xD0	; 208
    8784:	61 e0       	ldi	r22, 0x01	; 1
    8786:	0e 94 3a 2a 	call	0x5474	; 0x5474 <LCDByte>

	if(val<0){
		LCDData('-');
	}

	for(i=j;i<5;i++){
    878a:	89 81       	ldd	r24, Y+1	; 0x01
    878c:	9a 81       	ldd	r25, Y+2	; 0x02
    878e:	01 96       	adiw	r24, 0x01	; 1
    8790:	9a 83       	std	Y+2, r25	; 0x02
    8792:	89 83       	std	Y+1, r24	; 0x01
    8794:	89 81       	ldd	r24, Y+1	; 0x01
    8796:	9a 81       	ldd	r25, Y+2	; 0x02
    8798:	05 97       	sbiw	r24, 0x05	; 5
    879a:	54 f3       	brlt	.-44     	; 0x8770 <LCDWriteInt+0xdc>
		LCDData(48+str[i]);
	}
}
    879c:	61 96       	adiw	r28, 0x11	; 17
    879e:	0f b6       	in	r0, 0x3f	; 63
    87a0:	f8 94       	cli
    87a2:	de bf       	out	0x3e, r29	; 62
    87a4:	0f be       	out	0x3f, r0	; 63
    87a6:	cd bf       	out	0x3d, r28	; 61
    87a8:	df 91       	pop	r29
    87aa:	cf 91       	pop	r28
    87ac:	08 95       	ret

000087ae <LCDGotoXY>:

/***********************************************************
 * Mueve el cursor a la posicion (x,y) en el LCD
 ***********************************************************/
void LCDGotoXY(uint8_t x,uint8_t y){
    87ae:	cf 93       	push	r28
    87b0:	df 93       	push	r29
    87b2:	00 d0       	rcall	.+0      	; 0x87b4 <LCDGotoXY+0x6>
    87b4:	cd b7       	in	r28, 0x3d	; 61
    87b6:	de b7       	in	r29, 0x3e	; 62
    87b8:	89 83       	std	Y+1, r24	; 0x01
    87ba:	6a 83       	std	Y+2, r22	; 0x02
	if(x>=20){
    87bc:	89 81       	ldd	r24, Y+1	; 0x01
    87be:	84 31       	cpi	r24, 0x14	; 20
    87c0:	08 f0       	brcs	.+2      	; 0x87c4 <LCDGotoXY+0x16>
		return;
    87c2:	23 c0       	rjmp	.+70     	; 0x880a <LCDGotoXY+0x5c>
	}

	#ifdef LCD_TYPE_204
	switch(y){
    87c4:	8a 81       	ldd	r24, Y+2	; 0x02
    87c6:	88 2f       	mov	r24, r24
    87c8:	90 e0       	ldi	r25, 0x00	; 0
    87ca:	81 30       	cpi	r24, 0x01	; 1
    87cc:	91 05       	cpc	r25, r1
    87ce:	49 f0       	breq	.+18     	; 0x87e2 <LCDGotoXY+0x34>
    87d0:	82 30       	cpi	r24, 0x02	; 2
    87d2:	91 05       	cpc	r25, r1
    87d4:	94 f0       	brlt	.+36     	; 0x87fa <LCDGotoXY+0x4c>
    87d6:	82 30       	cpi	r24, 0x02	; 2
    87d8:	91 05       	cpc	r25, r1
    87da:	39 f0       	breq	.+14     	; 0x87ea <LCDGotoXY+0x3c>
    87dc:	03 97       	sbiw	r24, 0x03	; 3
    87de:	49 f0       	breq	.+18     	; 0x87f2 <LCDGotoXY+0x44>
    87e0:	0d c0       	rjmp	.+26     	; 0x87fc <LCDGotoXY+0x4e>
		case 0:
			break;
		case 1:
			x|=0b01000000;
    87e2:	89 81       	ldd	r24, Y+1	; 0x01
    87e4:	80 64       	ori	r24, 0x40	; 64
    87e6:	89 83       	std	Y+1, r24	; 0x01
			break;
    87e8:	09 c0       	rjmp	.+18     	; 0x87fc <LCDGotoXY+0x4e>
		case 2:
			x+=0x14;
    87ea:	89 81       	ldd	r24, Y+1	; 0x01
    87ec:	8c 5e       	subi	r24, 0xEC	; 236
    87ee:	89 83       	std	Y+1, r24	; 0x01
			break;
    87f0:	05 c0       	rjmp	.+10     	; 0x87fc <LCDGotoXY+0x4e>
		case 3:
			x+=0x54;
    87f2:	89 81       	ldd	r24, Y+1	; 0x01
    87f4:	8c 5a       	subi	r24, 0xAC	; 172
    87f6:	89 83       	std	Y+1, r24	; 0x01
			break;
    87f8:	01 c0       	rjmp	.+2      	; 0x87fc <LCDGotoXY+0x4e>
	}

	#ifdef LCD_TYPE_204
	switch(y){
		case 0:
			break;
    87fa:	00 00       	nop
			x+=0x50;
			break;
	}
	#endif

	x|=0b10000000;
    87fc:	89 81       	ldd	r24, Y+1	; 0x01
    87fe:	80 68       	ori	r24, 0x80	; 128
    8800:	89 83       	std	Y+1, r24	; 0x01
  	LCDCmd(x);
    8802:	60 e0       	ldi	r22, 0x00	; 0
    8804:	89 81       	ldd	r24, Y+1	; 0x01
    8806:	0e 94 3a 2a 	call	0x5474	; 0x5474 <LCDByte>
}
    880a:	0f 90       	pop	r0
    880c:	0f 90       	pop	r0
    880e:	df 91       	pop	r29
    8810:	cf 91       	pop	r28
    8812:	08 95       	ret

00008814 <main>:
 *	donde se ejecutan las mismas. \n
 *	Además se inician diferentes perisféricos del uc que no se encuentran en \n
 *	diferentes máquinas de estado.
 */
 
int main (void) {
    8814:	cf 93       	push	r28
    8816:	df 93       	push	r29
    8818:	cd b7       	in	r28, 0x3d	; 61
    881a:	de b7       	in	r29, 0x3e	; 62
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    881c:	0f b6       	in	r0, 0x3f	; 63
    881e:	f8 94       	cli
    8820:	a8 95       	wdr
    8822:	81 b5       	in	r24, 0x21	; 33
    8824:	88 61       	ori	r24, 0x18	; 24
    8826:	81 bd       	out	0x21, r24	; 33
    8828:	11 bc       	out	0x21, r1	; 33
    882a:	0f be       	out	0x3f, r0	; 63
	wdt_disable();					/* por las dudas deshabilito el watchdog timer para el inicio de todo el programa */
	cli();							/* Deshabilito las interrupciones globales */
    882c:	f8 94       	cli

	Inicio_Puertos ();
    882e:	0e 94 a8 28 	call	0x5150	; 0x5150 <Inicio_Puertos>
	Inicio_Entradas();
    8832:	0e 94 d7 10 	call	0x21ae	; 0x21ae <Inicio_Entradas>
	Inicio_Timer0 ();				/* en modo CTC para que genere una interupción cada 1ms */
    8836:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <Inicio_Timer0>
	Inicio_USART_0 ();
    883a:	0e 94 00 0b 	call	0x1600	; 0x1600 <Inicio_USART_0>
	Inicio_ADC();
    883e:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <Inicio_ADC>
	Inicio_PWM_420mA();
    8842:	0e 94 3a 09 	call	0x1274	; 0x1274 <Inicio_PWM_420mA>
	Inicio_Alarmas();
    8846:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <Inicio_Alarmas>
	Carga_Configuracion_Desde_Eeprom();
    884a:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <Carga_Configuracion_Desde_Eeprom>
	Cargar_Valores_Rango_Por_Canal();
    884e:	0e 94 b2 4c 	call	0x9964	; 0x9964 <Cargar_Valores_Rango_Por_Canal>
	Inicio_Display();
    8852:	0e 94 11 15 	call	0x2a22	; 0x2a22 <Inicio_Display>
	Inicio_Buzzer();
    8856:	0e 94 1f 2a 	call	0x543e	; 0x543e <Inicio_Buzzer>

	sei();							/* habilito las interrupciones globales */
    885a:	78 94       	sei

	Pantalla_Presentacion_Display();
    885c:	0e 94 80 15 	call	0x2b00	; 0x2b00 <Pantalla_Presentacion_Display>
	Inicio_Terminal();
    8860:	0e 94 e2 7d 	call	0xfbc4	; 0xfbc4 <Inicio_Terminal>
				"out __SREG__,__tmp_reg__" "\n\t"
				"out %0, %2" "\n \t"
				: /* no outputs */
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    8864:	87 e0       	ldi	r24, 0x07	; 7
    8866:	87 70       	andi	r24, 0x07	; 7
    8868:	88 60       	ori	r24, 0x08	; 8
    886a:	98 2f       	mov	r25, r24
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    886c:	88 e1       	ldi	r24, 0x18	; 24
    886e:	0f b6       	in	r0, 0x3f	; 63
    8870:	f8 94       	cli
    8872:	a8 95       	wdr
    8874:	81 bd       	out	0x21, r24	; 33
    8876:	0f be       	out	0x3f, r0	; 63
    8878:	91 bd       	out	0x21, r25	; 33

	wdt_enable(WDTO_2S);			/* prendo el watchdog timer */

	while (1) {						/* ejecuto máquinas de estado */
		Recepcion_USART_0();
    887a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <Recepcion_USART_0>
//		Transmision_USART_0();
		Leer_Entradas();
    887e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <Leer_Entradas>
		Medicion_ADC();
    8882:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <Medicion_ADC>
		Actualizar_PWM_420mA();
    8886:	0e 94 8b 04 	call	0x916	; 0x916 <Actualizar_PWM_420mA>
		Actualizar_Display();
    888a:	0e 94 11 11 	call	0x2222	; 0x2222 <Actualizar_Display>
		Actualizar_Alarmas();
    888e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <Actualizar_Alarmas>
		Terminal();
    8892:	0e 94 ab 50 	call	0xa156	; 0xa156 <Terminal>

		wdt_reset();
    8896:	a8 95       	wdr
	}
    8898:	f0 cf       	rjmp	.-32     	; 0x887a <main+0x66>

0000889a <__vector_15>:
 *	Este timer genera una interrupción cada 1ms, en el se incrementan diferentes \n
 *	contadores de cada máquina de estados y se operan las valvulas servo o se modifican \n
 *	los tiempos de las PWM.
 */
 
ISR (TIMER0_COMP_vect) {
    889a:	1f 92       	push	r1
    889c:	0f 92       	push	r0
    889e:	00 90 5f 00 	lds	r0, 0x005F
    88a2:	0f 92       	push	r0
    88a4:	11 24       	eor	r1, r1
    88a6:	00 90 5b 00 	lds	r0, 0x005B
    88aa:	0f 92       	push	r0
    88ac:	ef 92       	push	r14
    88ae:	ff 92       	push	r15
    88b0:	0f 93       	push	r16
    88b2:	1f 93       	push	r17
    88b4:	2f 93       	push	r18
    88b6:	3f 93       	push	r19
    88b8:	4f 93       	push	r20
    88ba:	5f 93       	push	r21
    88bc:	6f 93       	push	r22
    88be:	7f 93       	push	r23
    88c0:	8f 93       	push	r24
    88c2:	9f 93       	push	r25
    88c4:	af 93       	push	r26
    88c6:	bf 93       	push	r27
    88c8:	ef 93       	push	r30
    88ca:	ff 93       	push	r31
    88cc:	cf 93       	push	r28
    88ce:	df 93       	push	r29
    88d0:	00 d0       	rcall	.+0      	; 0x88d2 <__vector_15+0x38>
    88d2:	00 d0       	rcall	.+0      	; 0x88d4 <__vector_15+0x3a>
    88d4:	cd b7       	in	r28, 0x3d	; 61
    88d6:	de b7       	in	r29, 0x3e	; 62
	/* gerea los pulsos para alimentar los conductimetros */
	TOGGLE_BIT(PULSOS_COND_PORT, PULSOS_COND);
    88d8:	88 e3       	ldi	r24, 0x38	; 56
    88da:	90 e0       	ldi	r25, 0x00	; 0
    88dc:	28 e3       	ldi	r18, 0x38	; 56
    88de:	30 e0       	ldi	r19, 0x00	; 0
    88e0:	f9 01       	movw	r30, r18
    88e2:	30 81       	ld	r19, Z
    88e4:	20 e8       	ldi	r18, 0x80	; 128
    88e6:	23 27       	eor	r18, r19
    88e8:	fc 01       	movw	r30, r24
    88ea:	20 83       	st	Z, r18

	/*------------------------------------------------------------------------------------*
	 * Contadores de operacion del buzzer
	 *------------------------------------------------------------------------------------*/
	if (ulContTiempoSilenciarAlarma != 0) {
    88ec:	80 91 29 04 	lds	r24, 0x0429
    88f0:	90 91 2a 04 	lds	r25, 0x042A
    88f4:	89 2b       	or	r24, r25
    88f6:	99 f0       	breq	.+38     	; 0x891e <__vector_15+0x84>
		ulContTiempoSilenciarAlarma--;
    88f8:	80 91 29 04 	lds	r24, 0x0429
    88fc:	90 91 2a 04 	lds	r25, 0x042A
    8900:	01 97       	sbiw	r24, 0x01	; 1
    8902:	90 93 2a 04 	sts	0x042A, r25
    8906:	80 93 29 04 	sts	0x0429, r24
		CLEAR_BIT(BUZZER_PORT, BUZZER);
    890a:	83 e2       	ldi	r24, 0x23	; 35
    890c:	90 e0       	ldi	r25, 0x00	; 0
    890e:	23 e2       	ldi	r18, 0x23	; 35
    8910:	30 e0       	ldi	r19, 0x00	; 0
    8912:	f9 01       	movw	r30, r18
    8914:	20 81       	ld	r18, Z
    8916:	27 7f       	andi	r18, 0xF7	; 247
    8918:	fc 01       	movw	r30, r24
    891a:	20 83       	st	Z, r18
    891c:	8e c0       	rjmp	.+284    	; 0x8a3a <__vector_15+0x1a0>
	}
	else {
		if (chBuzzerModo == BUZZER_CORTO) {
    891e:	80 91 e2 04 	lds	r24, 0x04E2
    8922:	84 30       	cpi	r24, 0x04	; 4
    8924:	51 f4       	brne	.+20     	; 0x893a <__vector_15+0xa0>
			uContBuzzerON = BUZZER_TIEMPO_ON_CORTO;
    8926:	8c e2       	ldi	r24, 0x2C	; 44
    8928:	91 e0       	ldi	r25, 0x01	; 1
    892a:	90 93 e6 04 	sts	0x04E6, r25
    892e:	80 93 e5 04 	sts	0x04E5, r24
			chBuzzerModo = BUZZER_OFF;
    8932:	81 e0       	ldi	r24, 0x01	; 1
    8934:	80 93 e2 04 	sts	0x04E2, r24
    8938:	24 c0       	rjmp	.+72     	; 0x8982 <__vector_15+0xe8>
		}
		else if (chBuzzerModo == BUZZER_LARGO) {
    893a:	80 91 e2 04 	lds	r24, 0x04E2
    893e:	83 30       	cpi	r24, 0x03	; 3
    8940:	51 f4       	brne	.+20     	; 0x8956 <__vector_15+0xbc>
			uContBuzzerON = BUZZER_TIEMPO_ON_LARGO;
    8942:	88 e8       	ldi	r24, 0x88	; 136
    8944:	93 e1       	ldi	r25, 0x13	; 19
    8946:	90 93 e6 04 	sts	0x04E6, r25
    894a:	80 93 e5 04 	sts	0x04E5, r24
			chBuzzerModo = BUZZER_OFF;
    894e:	81 e0       	ldi	r24, 0x01	; 1
    8950:	80 93 e2 04 	sts	0x04E2, r24
    8954:	16 c0       	rjmp	.+44     	; 0x8982 <__vector_15+0xe8>
		}
		else if ((chBuzzerModo == BUZZER_INTERMITENTE) && (uContBuzzerON == 0) && (uContBuzzerOFF == 0)){
    8956:	80 91 e2 04 	lds	r24, 0x04E2
    895a:	82 30       	cpi	r24, 0x02	; 2
    895c:	91 f4       	brne	.+36     	; 0x8982 <__vector_15+0xe8>
    895e:	80 91 e5 04 	lds	r24, 0x04E5
    8962:	90 91 e6 04 	lds	r25, 0x04E6
    8966:	89 2b       	or	r24, r25
    8968:	61 f4       	brne	.+24     	; 0x8982 <__vector_15+0xe8>
    896a:	80 91 e3 04 	lds	r24, 0x04E3
    896e:	90 91 e4 04 	lds	r25, 0x04E4
    8972:	89 2b       	or	r24, r25
    8974:	31 f4       	brne	.+12     	; 0x8982 <__vector_15+0xe8>
			uContBuzzerON = BUZZER_TIEMPO_ON;
    8976:	88 ee       	ldi	r24, 0xE8	; 232
    8978:	93 e0       	ldi	r25, 0x03	; 3
    897a:	90 93 e6 04 	sts	0x04E6, r25
    897e:	80 93 e5 04 	sts	0x04E5, r24
		}

		if (uContBuzzerON > 0){
    8982:	80 91 e5 04 	lds	r24, 0x04E5
    8986:	90 91 e6 04 	lds	r25, 0x04E6
    898a:	89 2b       	or	r24, r25
    898c:	21 f1       	breq	.+72     	; 0x89d6 <__vector_15+0x13c>
			SET_BIT(BUZZER_PORT, BUZZER);
    898e:	83 e2       	ldi	r24, 0x23	; 35
    8990:	90 e0       	ldi	r25, 0x00	; 0
    8992:	23 e2       	ldi	r18, 0x23	; 35
    8994:	30 e0       	ldi	r19, 0x00	; 0
    8996:	f9 01       	movw	r30, r18
    8998:	20 81       	ld	r18, Z
    899a:	28 60       	ori	r18, 0x08	; 8
    899c:	fc 01       	movw	r30, r24
    899e:	20 83       	st	Z, r18
			uContBuzzerON--;
    89a0:	80 91 e5 04 	lds	r24, 0x04E5
    89a4:	90 91 e6 04 	lds	r25, 0x04E6
    89a8:	01 97       	sbiw	r24, 0x01	; 1
    89aa:	90 93 e6 04 	sts	0x04E6, r25
    89ae:	80 93 e5 04 	sts	0x04E5, r24
			if ((uContBuzzerON == 0) && (chBuzzerModo == BUZZER_INTERMITENTE)){
    89b2:	80 91 e5 04 	lds	r24, 0x04E5
    89b6:	90 91 e6 04 	lds	r25, 0x04E6
    89ba:	89 2b       	or	r24, r25
    89bc:	09 f0       	breq	.+2      	; 0x89c0 <__vector_15+0x126>
    89be:	3d c0       	rjmp	.+122    	; 0x8a3a <__vector_15+0x1a0>
    89c0:	80 91 e2 04 	lds	r24, 0x04E2
    89c4:	82 30       	cpi	r24, 0x02	; 2
    89c6:	c9 f5       	brne	.+114    	; 0x8a3a <__vector_15+0x1a0>
				uContBuzzerOFF = BUZZER_TIEMPO_OFF;
    89c8:	80 e9       	ldi	r24, 0x90	; 144
    89ca:	91 e0       	ldi	r25, 0x01	; 1
    89cc:	90 93 e4 04 	sts	0x04E4, r25
    89d0:	80 93 e3 04 	sts	0x04E3, r24
    89d4:	32 c0       	rjmp	.+100    	; 0x8a3a <__vector_15+0x1a0>
			}
		}
		else if (uContBuzzerOFF > 0) {
    89d6:	80 91 e3 04 	lds	r24, 0x04E3
    89da:	90 91 e4 04 	lds	r25, 0x04E4
    89de:	89 2b       	or	r24, r25
    89e0:	19 f1       	breq	.+70     	; 0x8a28 <__vector_15+0x18e>
			CLEAR_BIT(BUZZER_PORT, BUZZER);
    89e2:	83 e2       	ldi	r24, 0x23	; 35
    89e4:	90 e0       	ldi	r25, 0x00	; 0
    89e6:	23 e2       	ldi	r18, 0x23	; 35
    89e8:	30 e0       	ldi	r19, 0x00	; 0
    89ea:	f9 01       	movw	r30, r18
    89ec:	20 81       	ld	r18, Z
    89ee:	27 7f       	andi	r18, 0xF7	; 247
    89f0:	fc 01       	movw	r30, r24
    89f2:	20 83       	st	Z, r18
			uContBuzzerOFF--;
    89f4:	80 91 e3 04 	lds	r24, 0x04E3
    89f8:	90 91 e4 04 	lds	r25, 0x04E4
    89fc:	01 97       	sbiw	r24, 0x01	; 1
    89fe:	90 93 e4 04 	sts	0x04E4, r25
    8a02:	80 93 e3 04 	sts	0x04E3, r24
			if ((uContBuzzerOFF == 0) && (chBuzzerModo == BUZZER_INTERMITENTE)){
    8a06:	80 91 e3 04 	lds	r24, 0x04E3
    8a0a:	90 91 e4 04 	lds	r25, 0x04E4
    8a0e:	89 2b       	or	r24, r25
    8a10:	a1 f4       	brne	.+40     	; 0x8a3a <__vector_15+0x1a0>
    8a12:	80 91 e2 04 	lds	r24, 0x04E2
    8a16:	82 30       	cpi	r24, 0x02	; 2
    8a18:	81 f4       	brne	.+32     	; 0x8a3a <__vector_15+0x1a0>
				uContBuzzerON = BUZZER_TIEMPO_ON;
    8a1a:	88 ee       	ldi	r24, 0xE8	; 232
    8a1c:	93 e0       	ldi	r25, 0x03	; 3
    8a1e:	90 93 e6 04 	sts	0x04E6, r25
    8a22:	80 93 e5 04 	sts	0x04E5, r24
    8a26:	09 c0       	rjmp	.+18     	; 0x8a3a <__vector_15+0x1a0>
			}
		}
		else{
			CLEAR_BIT(BUZZER_PORT, BUZZER);
    8a28:	83 e2       	ldi	r24, 0x23	; 35
    8a2a:	90 e0       	ldi	r25, 0x00	; 0
    8a2c:	23 e2       	ldi	r18, 0x23	; 35
    8a2e:	30 e0       	ldi	r19, 0x00	; 0
    8a30:	f9 01       	movw	r30, r18
    8a32:	20 81       	ld	r18, Z
    8a34:	27 7f       	andi	r18, 0xF7	; 247
    8a36:	fc 01       	movw	r30, r24
    8a38:	20 83       	st	Z, r18

	/*------------------------------------------------------------------------------------*
	 * Contadores de las máquinas de estado de entradas discretas
	 *------------------------------------------------------------------------------------*/
	/* Actualización del tiempo de integración y estado de las entradas discretas */
	if (uTiempoIntegracionEntradas < TIEMPO_INTEGRACION_ENTRADAS) {
    8a3a:	80 91 3b 04 	lds	r24, 0x043B
    8a3e:	90 91 3c 04 	lds	r25, 0x043C
    8a42:	c2 97       	sbiw	r24, 0x32	; 50
    8a44:	e0 f5       	brcc	.+120    	; 0x8abe <__vector_15+0x224>
		uTiempoIntegracionEntradas++;
    8a46:	80 91 3b 04 	lds	r24, 0x043B
    8a4a:	90 91 3c 04 	lds	r25, 0x043C
    8a4e:	01 96       	adiw	r24, 0x01	; 1
    8a50:	90 93 3c 04 	sts	0x043C, r25
    8a54:	80 93 3b 04 	sts	0x043B, r24
		for (int i=0; i<CANTIDAD_ENTRADAS; i++){
    8a58:	1a 82       	std	Y+2, r1	; 0x02
    8a5a:	19 82       	std	Y+1, r1	; 0x01
    8a5c:	2b c0       	rjmp	.+86     	; 0x8ab4 <__vector_15+0x21a>
			if ((uEstadoEntradasInstantaneas & (SET<<i))!=0){
    8a5e:	81 e0       	ldi	r24, 0x01	; 1
    8a60:	90 e0       	ldi	r25, 0x00	; 0
    8a62:	09 80       	ldd	r0, Y+1	; 0x01
    8a64:	02 c0       	rjmp	.+4      	; 0x8a6a <__vector_15+0x1d0>
    8a66:	88 0f       	add	r24, r24
    8a68:	99 1f       	adc	r25, r25
    8a6a:	0a 94       	dec	r0
    8a6c:	e2 f7       	brpl	.-8      	; 0x8a66 <__vector_15+0x1cc>
    8a6e:	9c 01       	movw	r18, r24
    8a70:	80 91 3f 04 	lds	r24, 0x043F
    8a74:	90 91 40 04 	lds	r25, 0x0440
    8a78:	82 23       	and	r24, r18
    8a7a:	93 23       	and	r25, r19
    8a7c:	89 2b       	or	r24, r25
    8a7e:	a9 f0       	breq	.+42     	; 0x8aaa <__vector_15+0x210>
				uValorIntegracionEntradas[i] ++;
    8a80:	89 81       	ldd	r24, Y+1	; 0x01
    8a82:	9a 81       	ldd	r25, Y+2	; 0x02
    8a84:	88 0f       	add	r24, r24
    8a86:	99 1f       	adc	r25, r25
    8a88:	8e 5c       	subi	r24, 0xCE	; 206
    8a8a:	9b 4f       	sbci	r25, 0xFB	; 251
    8a8c:	fc 01       	movw	r30, r24
    8a8e:	80 81       	ld	r24, Z
    8a90:	91 81       	ldd	r25, Z+1	; 0x01
    8a92:	9c 01       	movw	r18, r24
    8a94:	2f 5f       	subi	r18, 0xFF	; 255
    8a96:	3f 4f       	sbci	r19, 0xFF	; 255
    8a98:	89 81       	ldd	r24, Y+1	; 0x01
    8a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    8a9c:	88 0f       	add	r24, r24
    8a9e:	99 1f       	adc	r25, r25
    8aa0:	8e 5c       	subi	r24, 0xCE	; 206
    8aa2:	9b 4f       	sbci	r25, 0xFB	; 251
    8aa4:	fc 01       	movw	r30, r24
    8aa6:	31 83       	std	Z+1, r19	; 0x01
    8aa8:	20 83       	st	Z, r18
	 * Contadores de las máquinas de estado de entradas discretas
	 *------------------------------------------------------------------------------------*/
	/* Actualización del tiempo de integración y estado de las entradas discretas */
	if (uTiempoIntegracionEntradas < TIEMPO_INTEGRACION_ENTRADAS) {
		uTiempoIntegracionEntradas++;
		for (int i=0; i<CANTIDAD_ENTRADAS; i++){
    8aaa:	89 81       	ldd	r24, Y+1	; 0x01
    8aac:	9a 81       	ldd	r25, Y+2	; 0x02
    8aae:	01 96       	adiw	r24, 0x01	; 1
    8ab0:	9a 83       	std	Y+2, r25	; 0x02
    8ab2:	89 83       	std	Y+1, r24	; 0x01
    8ab4:	89 81       	ldd	r24, Y+1	; 0x01
    8ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    8ab8:	03 97       	sbiw	r24, 0x03	; 3
    8aba:	8c f2       	brlt	.-94     	; 0x8a5e <__vector_15+0x1c4>
    8abc:	af c0       	rjmp	.+350    	; 0x8c1c <__vector_15+0x382>
				uValorIntegracionEntradas[i] ++;
			}
		}
	}
	else {
		for(int i=0; i<CANTIDAD_ENTRADAS; i++){
    8abe:	1c 82       	std	Y+4, r1	; 0x04
    8ac0:	1b 82       	std	Y+3, r1	; 0x03
    8ac2:	a3 c0       	rjmp	.+326    	; 0x8c0a <__vector_15+0x370>
			if ((uValorIntegracionEntradas[i] >= VALOR_INTEGRACION_ENTRADAS) && ((uEstadoEntradas & (SET<<i)) == 0)) {
    8ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    8ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    8ac8:	88 0f       	add	r24, r24
    8aca:	99 1f       	adc	r25, r25
    8acc:	8e 5c       	subi	r24, 0xCE	; 206
    8ace:	9b 4f       	sbci	r25, 0xFB	; 251
    8ad0:	fc 01       	movw	r30, r24
    8ad2:	80 81       	ld	r24, Z
    8ad4:	91 81       	ldd	r25, Z+1	; 0x01
    8ad6:	4e 97       	sbiw	r24, 0x1e	; 30
    8ad8:	08 f4       	brcc	.+2      	; 0x8adc <__vector_15+0x242>
    8ada:	3e c0       	rjmp	.+124    	; 0x8b58 <__vector_15+0x2be>
    8adc:	81 e0       	ldi	r24, 0x01	; 1
    8ade:	90 e0       	ldi	r25, 0x00	; 0
    8ae0:	0b 80       	ldd	r0, Y+3	; 0x03
    8ae2:	02 c0       	rjmp	.+4      	; 0x8ae8 <__vector_15+0x24e>
    8ae4:	88 0f       	add	r24, r24
    8ae6:	99 1f       	adc	r25, r25
    8ae8:	0a 94       	dec	r0
    8aea:	e2 f7       	brpl	.-8      	; 0x8ae4 <__vector_15+0x24a>
    8aec:	9c 01       	movw	r18, r24
    8aee:	80 91 3d 04 	lds	r24, 0x043D
    8af2:	90 91 3e 04 	lds	r25, 0x043E
    8af6:	82 23       	and	r24, r18
    8af8:	93 23       	and	r25, r19
    8afa:	89 2b       	or	r24, r25
    8afc:	69 f5       	brne	.+90     	; 0x8b58 <__vector_15+0x2be>
				SET_BIT(uEstadoEntradas, i);
    8afe:	81 e0       	ldi	r24, 0x01	; 1
    8b00:	90 e0       	ldi	r25, 0x00	; 0
    8b02:	0b 80       	ldd	r0, Y+3	; 0x03
    8b04:	02 c0       	rjmp	.+4      	; 0x8b0a <__vector_15+0x270>
    8b06:	88 0f       	add	r24, r24
    8b08:	99 1f       	adc	r25, r25
    8b0a:	0a 94       	dec	r0
    8b0c:	e2 f7       	brpl	.-8      	; 0x8b06 <__vector_15+0x26c>
    8b0e:	9c 01       	movw	r18, r24
    8b10:	80 91 3d 04 	lds	r24, 0x043D
    8b14:	90 91 3e 04 	lds	r25, 0x043E
    8b18:	82 2b       	or	r24, r18
    8b1a:	93 2b       	or	r25, r19
    8b1c:	90 93 3e 04 	sts	0x043E, r25
    8b20:	80 93 3d 04 	sts	0x043D, r24
				SET_BIT(uFlagEntradasActivadas, i);
    8b24:	81 e0       	ldi	r24, 0x01	; 1
    8b26:	90 e0       	ldi	r25, 0x00	; 0
    8b28:	0b 80       	ldd	r0, Y+3	; 0x03
    8b2a:	02 c0       	rjmp	.+4      	; 0x8b30 <__vector_15+0x296>
    8b2c:	88 0f       	add	r24, r24
    8b2e:	99 1f       	adc	r25, r25
    8b30:	0a 94       	dec	r0
    8b32:	e2 f7       	brpl	.-8      	; 0x8b2c <__vector_15+0x292>
    8b34:	9c 01       	movw	r18, r24
    8b36:	80 91 42 04 	lds	r24, 0x0442
    8b3a:	90 91 43 04 	lds	r25, 0x0443
    8b3e:	82 2b       	or	r24, r18
    8b40:	93 2b       	or	r25, r19
    8b42:	90 93 43 04 	sts	0x0443, r25
    8b46:	80 93 42 04 	sts	0x0442, r24
				uTimeoutEntradas = TIMEOUT_ENTRADAS;
    8b4a:	80 e1       	ldi	r24, 0x10	; 16
    8b4c:	97 e2       	ldi	r25, 0x27	; 39
    8b4e:	90 93 46 04 	sts	0x0446, r25
    8b52:	80 93 45 04 	sts	0x0445, r24
    8b56:	4b c0       	rjmp	.+150    	; 0x8bee <__vector_15+0x354>
			}
			else if ((uValorIntegracionEntradas[i] < VALOR_INTEGRACION_ENTRADAS) && ((uEstadoEntradas & (SET<<i)) != 0)) {
    8b58:	8b 81       	ldd	r24, Y+3	; 0x03
    8b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    8b5c:	88 0f       	add	r24, r24
    8b5e:	99 1f       	adc	r25, r25
    8b60:	8e 5c       	subi	r24, 0xCE	; 206
    8b62:	9b 4f       	sbci	r25, 0xFB	; 251
    8b64:	fc 01       	movw	r30, r24
    8b66:	80 81       	ld	r24, Z
    8b68:	91 81       	ldd	r25, Z+1	; 0x01
    8b6a:	4e 97       	sbiw	r24, 0x1e	; 30
    8b6c:	08 f0       	brcs	.+2      	; 0x8b70 <__vector_15+0x2d6>
    8b6e:	3f c0       	rjmp	.+126    	; 0x8bee <__vector_15+0x354>
    8b70:	81 e0       	ldi	r24, 0x01	; 1
    8b72:	90 e0       	ldi	r25, 0x00	; 0
    8b74:	0b 80       	ldd	r0, Y+3	; 0x03
    8b76:	02 c0       	rjmp	.+4      	; 0x8b7c <__vector_15+0x2e2>
    8b78:	88 0f       	add	r24, r24
    8b7a:	99 1f       	adc	r25, r25
    8b7c:	0a 94       	dec	r0
    8b7e:	e2 f7       	brpl	.-8      	; 0x8b78 <__vector_15+0x2de>
    8b80:	9c 01       	movw	r18, r24
    8b82:	80 91 3d 04 	lds	r24, 0x043D
    8b86:	90 91 3e 04 	lds	r25, 0x043E
    8b8a:	82 23       	and	r24, r18
    8b8c:	93 23       	and	r25, r19
    8b8e:	89 2b       	or	r24, r25
    8b90:	71 f1       	breq	.+92     	; 0x8bee <__vector_15+0x354>
				CLEAR_BIT(uEstadoEntradas, i);
    8b92:	81 e0       	ldi	r24, 0x01	; 1
    8b94:	90 e0       	ldi	r25, 0x00	; 0
    8b96:	0b 80       	ldd	r0, Y+3	; 0x03
    8b98:	02 c0       	rjmp	.+4      	; 0x8b9e <__vector_15+0x304>
    8b9a:	88 0f       	add	r24, r24
    8b9c:	99 1f       	adc	r25, r25
    8b9e:	0a 94       	dec	r0
    8ba0:	e2 f7       	brpl	.-8      	; 0x8b9a <__vector_15+0x300>
    8ba2:	80 95       	com	r24
    8ba4:	90 95       	com	r25
    8ba6:	9c 01       	movw	r18, r24
    8ba8:	80 91 3d 04 	lds	r24, 0x043D
    8bac:	90 91 3e 04 	lds	r25, 0x043E
    8bb0:	82 23       	and	r24, r18
    8bb2:	93 23       	and	r25, r19
    8bb4:	90 93 3e 04 	sts	0x043E, r25
    8bb8:	80 93 3d 04 	sts	0x043D, r24
				SET_BIT(uFlagEntradasLiberadas, i);
    8bbc:	81 e0       	ldi	r24, 0x01	; 1
    8bbe:	90 e0       	ldi	r25, 0x00	; 0
    8bc0:	0b 80       	ldd	r0, Y+3	; 0x03
    8bc2:	02 c0       	rjmp	.+4      	; 0x8bc8 <__vector_15+0x32e>
    8bc4:	88 0f       	add	r24, r24
    8bc6:	99 1f       	adc	r25, r25
    8bc8:	0a 94       	dec	r0
    8bca:	e2 f7       	brpl	.-8      	; 0x8bc4 <__vector_15+0x32a>
    8bcc:	9c 01       	movw	r18, r24
    8bce:	80 91 39 04 	lds	r24, 0x0439
    8bd2:	90 91 3a 04 	lds	r25, 0x043A
    8bd6:	82 2b       	or	r24, r18
    8bd8:	93 2b       	or	r25, r19
    8bda:	90 93 3a 04 	sts	0x043A, r25
    8bde:	80 93 39 04 	sts	0x0439, r24
				uTimeoutEntradas = TIMEOUT_ENTRADAS;
    8be2:	80 e1       	ldi	r24, 0x10	; 16
    8be4:	97 e2       	ldi	r25, 0x27	; 39
    8be6:	90 93 46 04 	sts	0x0446, r25
    8bea:	80 93 45 04 	sts	0x0445, r24
			}
			uValorIntegracionEntradas[i] = 0;
    8bee:	8b 81       	ldd	r24, Y+3	; 0x03
    8bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    8bf2:	88 0f       	add	r24, r24
    8bf4:	99 1f       	adc	r25, r25
    8bf6:	8e 5c       	subi	r24, 0xCE	; 206
    8bf8:	9b 4f       	sbci	r25, 0xFB	; 251
    8bfa:	fc 01       	movw	r30, r24
    8bfc:	11 82       	std	Z+1, r1	; 0x01
    8bfe:	10 82       	st	Z, r1
				uValorIntegracionEntradas[i] ++;
			}
		}
	}
	else {
		for(int i=0; i<CANTIDAD_ENTRADAS; i++){
    8c00:	8b 81       	ldd	r24, Y+3	; 0x03
    8c02:	9c 81       	ldd	r25, Y+4	; 0x04
    8c04:	01 96       	adiw	r24, 0x01	; 1
    8c06:	9c 83       	std	Y+4, r25	; 0x04
    8c08:	8b 83       	std	Y+3, r24	; 0x03
    8c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    8c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    8c0e:	03 97       	sbiw	r24, 0x03	; 3
    8c10:	0c f4       	brge	.+2      	; 0x8c14 <__vector_15+0x37a>
    8c12:	58 cf       	rjmp	.-336    	; 0x8ac4 <__vector_15+0x22a>
				SET_BIT(uFlagEntradasLiberadas, i);
				uTimeoutEntradas = TIMEOUT_ENTRADAS;
			}
			uValorIntegracionEntradas[i] = 0;
		}
		uTiempoIntegracionEntradas = 0;
    8c14:	10 92 3c 04 	sts	0x043C, r1
    8c18:	10 92 3b 04 	sts	0x043B, r1
	}

	/* descuento del Tiemout del flag de las entradas discretas */
	if (uTimeoutEntradas > 0)
    8c1c:	80 91 45 04 	lds	r24, 0x0445
    8c20:	90 91 46 04 	lds	r25, 0x0446
    8c24:	89 2b       	or	r24, r25
    8c26:	49 f0       	breq	.+18     	; 0x8c3a <__vector_15+0x3a0>
		uTimeoutEntradas --;
    8c28:	80 91 45 04 	lds	r24, 0x0445
    8c2c:	90 91 46 04 	lds	r25, 0x0446
    8c30:	01 97       	sbiw	r24, 0x01	; 1
    8c32:	90 93 46 04 	sts	0x0446, r25
    8c36:	80 93 45 04 	sts	0x0445, r24

	/*------------------------------------------------------------------------------------*
	 * Contadores de las máquinas de estado de alarmas
	 *------------------------------------------------------------------------------------*/
	/* conductimetro 1 */
	if (flCond1valoruS > flValorAlarmaCond1){
    8c3a:	80 91 11 05 	lds	r24, 0x0511
    8c3e:	90 91 12 05 	lds	r25, 0x0512
    8c42:	a0 91 13 05 	lds	r26, 0x0513
    8c46:	b0 91 14 05 	lds	r27, 0x0514
    8c4a:	20 91 2c 04 	lds	r18, 0x042C
    8c4e:	30 91 2d 04 	lds	r19, 0x042D
    8c52:	40 91 2e 04 	lds	r20, 0x042E
    8c56:	50 91 2f 04 	lds	r21, 0x042F
    8c5a:	bc 01       	movw	r22, r24
    8c5c:	cd 01       	movw	r24, r26
    8c5e:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    8c62:	18 16       	cp	r1, r24
    8c64:	24 f5       	brge	.+72     	; 0x8cae <__vector_15+0x414>
		if (uContTiempoAlarmaCond1 < uTiempoAlarmaCond1 * TIMER0_A_SEGUNDOS){
    8c66:	80 91 1b 04 	lds	r24, 0x041B
    8c6a:	90 91 1c 04 	lds	r25, 0x041C
    8c6e:	7c 01       	movw	r14, r24
    8c70:	00 e0       	ldi	r16, 0x00	; 0
    8c72:	10 e0       	ldi	r17, 0x00	; 0
    8c74:	80 91 1d 04 	lds	r24, 0x041D
    8c78:	90 91 1e 04 	lds	r25, 0x041E
    8c7c:	9c 01       	movw	r18, r24
    8c7e:	40 e0       	ldi	r20, 0x00	; 0
    8c80:	50 e0       	ldi	r21, 0x00	; 0
    8c82:	88 ee       	ldi	r24, 0xE8	; 232
    8c84:	93 e0       	ldi	r25, 0x03	; 3
    8c86:	dc 01       	movw	r26, r24
    8c88:	0e 94 46 81 	call	0x1028c	; 0x1028c <__muluhisi3>
    8c8c:	dc 01       	movw	r26, r24
    8c8e:	cb 01       	movw	r24, r22
    8c90:	e8 16       	cp	r14, r24
    8c92:	f9 06       	cpc	r15, r25
    8c94:	0a 07       	cpc	r16, r26
    8c96:	1b 07       	cpc	r17, r27
    8c98:	c8 f4       	brcc	.+50     	; 0x8ccc <__vector_15+0x432>
			uContTiempoAlarmaCond1++;
    8c9a:	80 91 1b 04 	lds	r24, 0x041B
    8c9e:	90 91 1c 04 	lds	r25, 0x041C
    8ca2:	01 96       	adiw	r24, 0x01	; 1
    8ca4:	90 93 1c 04 	sts	0x041C, r25
    8ca8:	80 93 1b 04 	sts	0x041B, r24
    8cac:	0f c0       	rjmp	.+30     	; 0x8ccc <__vector_15+0x432>
		}
	}
	else {
		if (uContTiempoAlarmaCond1 > 0){
    8cae:	80 91 1b 04 	lds	r24, 0x041B
    8cb2:	90 91 1c 04 	lds	r25, 0x041C
    8cb6:	89 2b       	or	r24, r25
    8cb8:	49 f0       	breq	.+18     	; 0x8ccc <__vector_15+0x432>
			uContTiempoAlarmaCond1--;
    8cba:	80 91 1b 04 	lds	r24, 0x041B
    8cbe:	90 91 1c 04 	lds	r25, 0x041C
    8cc2:	01 97       	sbiw	r24, 0x01	; 1
    8cc4:	90 93 1c 04 	sts	0x041C, r25
    8cc8:	80 93 1b 04 	sts	0x041B, r24
		}
	}

	/* conductimetro 2 */
	if (flCond2valoruS > flValorAlarmaCond2){
    8ccc:	80 91 ed 04 	lds	r24, 0x04ED
    8cd0:	90 91 ee 04 	lds	r25, 0x04EE
    8cd4:	a0 91 ef 04 	lds	r26, 0x04EF
    8cd8:	b0 91 f0 04 	lds	r27, 0x04F0
    8cdc:	20 91 21 04 	lds	r18, 0x0421
    8ce0:	30 91 22 04 	lds	r19, 0x0422
    8ce4:	40 91 23 04 	lds	r20, 0x0423
    8ce8:	50 91 24 04 	lds	r21, 0x0424
    8cec:	bc 01       	movw	r22, r24
    8cee:	cd 01       	movw	r24, r26
    8cf0:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    8cf4:	18 16       	cp	r1, r24
    8cf6:	24 f5       	brge	.+72     	; 0x8d40 <__vector_15+0x4a6>
		if (uContTiempoAlarmaCond2 < uTiempoAlarmaCond2 * TIMER0_A_SEGUNDOS){
    8cf8:	80 91 25 04 	lds	r24, 0x0425
    8cfc:	90 91 26 04 	lds	r25, 0x0426
    8d00:	7c 01       	movw	r14, r24
    8d02:	00 e0       	ldi	r16, 0x00	; 0
    8d04:	10 e0       	ldi	r17, 0x00	; 0
    8d06:	80 91 30 04 	lds	r24, 0x0430
    8d0a:	90 91 31 04 	lds	r25, 0x0431
    8d0e:	9c 01       	movw	r18, r24
    8d10:	40 e0       	ldi	r20, 0x00	; 0
    8d12:	50 e0       	ldi	r21, 0x00	; 0
    8d14:	88 ee       	ldi	r24, 0xE8	; 232
    8d16:	93 e0       	ldi	r25, 0x03	; 3
    8d18:	dc 01       	movw	r26, r24
    8d1a:	0e 94 46 81 	call	0x1028c	; 0x1028c <__muluhisi3>
    8d1e:	dc 01       	movw	r26, r24
    8d20:	cb 01       	movw	r24, r22
    8d22:	e8 16       	cp	r14, r24
    8d24:	f9 06       	cpc	r15, r25
    8d26:	0a 07       	cpc	r16, r26
    8d28:	1b 07       	cpc	r17, r27
    8d2a:	c8 f4       	brcc	.+50     	; 0x8d5e <__vector_15+0x4c4>
			uContTiempoAlarmaCond2++;
    8d2c:	80 91 25 04 	lds	r24, 0x0425
    8d30:	90 91 26 04 	lds	r25, 0x0426
    8d34:	01 96       	adiw	r24, 0x01	; 1
    8d36:	90 93 26 04 	sts	0x0426, r25
    8d3a:	80 93 25 04 	sts	0x0425, r24
    8d3e:	0f c0       	rjmp	.+30     	; 0x8d5e <__vector_15+0x4c4>
		}
	}
	else {
		if (uContTiempoAlarmaCond2 > 0){
    8d40:	80 91 25 04 	lds	r24, 0x0425
    8d44:	90 91 26 04 	lds	r25, 0x0426
    8d48:	89 2b       	or	r24, r25
    8d4a:	49 f0       	breq	.+18     	; 0x8d5e <__vector_15+0x4c4>
			uContTiempoAlarmaCond2--;
    8d4c:	80 91 25 04 	lds	r24, 0x0425
    8d50:	90 91 26 04 	lds	r25, 0x0426
    8d54:	01 97       	sbiw	r24, 0x01	; 1
    8d56:	90 93 26 04 	sts	0x0426, r25
    8d5a:	80 93 25 04 	sts	0x0425, r24

	/*------------------------------------------------------------------------------------*
	 * Contadores de las máquinas de estado de Display
	 *------------------------------------------------------------------------------------*/
	/* contador para el refresco del display */
	if (uContDisplay != 0)
    8d5e:	80 91 47 04 	lds	r24, 0x0447
    8d62:	90 91 48 04 	lds	r25, 0x0448
    8d66:	89 2b       	or	r24, r25
    8d68:	49 f0       	breq	.+18     	; 0x8d7c <__vector_15+0x4e2>
		uContDisplay--;
    8d6a:	80 91 47 04 	lds	r24, 0x0447
    8d6e:	90 91 48 04 	lds	r25, 0x0448
    8d72:	01 97       	sbiw	r24, 0x01	; 1
    8d74:	90 93 48 04 	sts	0x0448, r25
    8d78:	80 93 47 04 	sts	0x0447, r24

	/* contador para el parpadeo del display */
	if (uContDisplayON > 0){
    8d7c:	80 91 49 04 	lds	r24, 0x0449
    8d80:	90 91 4a 04 	lds	r25, 0x044A
    8d84:	89 2b       	or	r24, r25
    8d86:	b1 f0       	breq	.+44     	; 0x8db4 <__vector_15+0x51a>
		uContDisplayON--;
    8d88:	80 91 49 04 	lds	r24, 0x0449
    8d8c:	90 91 4a 04 	lds	r25, 0x044A
    8d90:	01 97       	sbiw	r24, 0x01	; 1
    8d92:	90 93 4a 04 	sts	0x044A, r25
    8d96:	80 93 49 04 	sts	0x0449, r24
		if (uContDisplayON == 0){
    8d9a:	80 91 49 04 	lds	r24, 0x0449
    8d9e:	90 91 4a 04 	lds	r25, 0x044A
    8da2:	89 2b       	or	r24, r25
    8da4:	11 f5       	brne	.+68     	; 0x8dea <__vector_15+0x550>
			uContDisplayOFF = TIEMPO_DISPLAY_OFF;
    8da6:	84 ef       	ldi	r24, 0xF4	; 244
    8da8:	91 e0       	ldi	r25, 0x01	; 1
    8daa:	90 93 61 04 	sts	0x0461, r25
    8dae:	80 93 60 04 	sts	0x0460, r24
    8db2:	1b c0       	rjmp	.+54     	; 0x8dea <__vector_15+0x550>
		}
	}
	else if (uContDisplayOFF > 0) {
    8db4:	80 91 60 04 	lds	r24, 0x0460
    8db8:	90 91 61 04 	lds	r25, 0x0461
    8dbc:	89 2b       	or	r24, r25
    8dbe:	a9 f0       	breq	.+42     	; 0x8dea <__vector_15+0x550>
		uContDisplayOFF--;
    8dc0:	80 91 60 04 	lds	r24, 0x0460
    8dc4:	90 91 61 04 	lds	r25, 0x0461
    8dc8:	01 97       	sbiw	r24, 0x01	; 1
    8dca:	90 93 61 04 	sts	0x0461, r25
    8dce:	80 93 60 04 	sts	0x0460, r24
		if (uContDisplayOFF == 0){
    8dd2:	80 91 60 04 	lds	r24, 0x0460
    8dd6:	90 91 61 04 	lds	r25, 0x0461
    8dda:	89 2b       	or	r24, r25
    8ddc:	31 f4       	brne	.+12     	; 0x8dea <__vector_15+0x550>
			uContDisplayON = TIEMPO_DISPLAY_ON;
    8dde:	88 ee       	ldi	r24, 0xE8	; 232
    8de0:	93 e0       	ldi	r25, 0x03	; 3
    8de2:	90 93 4a 04 	sts	0x044A, r25
    8de6:	80 93 49 04 	sts	0x0449, r24

	/*------------------------------------------------------------------------------------*
	 * Contadores de las máquinas de estado de USART
	 *------------------------------------------------------------------------------------*/
	/* decremento del contador de tiempo para time out de espera de USART0 */
	if (uContTimeoutEsperaUSART0 != 0)
    8dea:	80 91 7f 02 	lds	r24, 0x027F
    8dee:	90 91 80 02 	lds	r25, 0x0280
    8df2:	89 2b       	or	r24, r25
    8df4:	49 f0       	breq	.+18     	; 0x8e08 <__vector_15+0x56e>
		uContTimeoutEsperaUSART0 --;
    8df6:	80 91 7f 02 	lds	r24, 0x027F
    8dfa:	90 91 80 02 	lds	r25, 0x0280
    8dfe:	01 97       	sbiw	r24, 0x01	; 1
    8e00:	90 93 80 02 	sts	0x0280, r25
    8e04:	80 93 7f 02 	sts	0x027F, r24

	/* decremento del contador de tiempo para time out de electura del buffer de recepcion */
	if (uContTimeoutLecturaRxUSART0 != 0)
    8e08:	80 91 4b 03 	lds	r24, 0x034B
    8e0c:	90 91 4c 03 	lds	r25, 0x034C
    8e10:	89 2b       	or	r24, r25
    8e12:	49 f0       	breq	.+18     	; 0x8e26 <__vector_15+0x58c>
		uContTimeoutLecturaRxUSART0 --;
    8e14:	80 91 4b 03 	lds	r24, 0x034B
    8e18:	90 91 4c 03 	lds	r25, 0x034C
    8e1c:	01 97       	sbiw	r24, 0x01	; 1
    8e1e:	90 93 4c 03 	sts	0x034C, r25
    8e22:	80 93 4b 03 	sts	0x034B, r24

	/* decremento del contador de tiempo para timeout de recepcion para cerrar el buffer */
	if (uContTimeoutRxUSART0 != 0)
    8e26:	80 91 4d 03 	lds	r24, 0x034D
    8e2a:	90 91 4e 03 	lds	r25, 0x034E
    8e2e:	89 2b       	or	r24, r25
    8e30:	49 f0       	breq	.+18     	; 0x8e44 <__vector_15+0x5aa>
		uContTimeoutRxUSART0 --;
    8e32:	80 91 4d 03 	lds	r24, 0x034D
    8e36:	90 91 4e 03 	lds	r25, 0x034E
    8e3a:	01 97       	sbiw	r24, 0x01	; 1
    8e3c:	90 93 4e 03 	sts	0x034E, r25
    8e40:	80 93 4d 03 	sts	0x034D, r24

	/* decremento del contador de tiempo para time out de envio del buffer de transmision */
	if (uContTimeoutTxUSART0 != 0)
    8e44:	80 91 4f 03 	lds	r24, 0x034F
    8e48:	90 91 50 03 	lds	r25, 0x0350
    8e4c:	89 2b       	or	r24, r25
    8e4e:	49 f0       	breq	.+18     	; 0x8e62 <__vector_15+0x5c8>
		uContTimeoutTxUSART0 --;
    8e50:	80 91 4f 03 	lds	r24, 0x034F
    8e54:	90 91 50 03 	lds	r25, 0x0350
    8e58:	01 97       	sbiw	r24, 0x01	; 1
    8e5a:	90 93 50 03 	sts	0x0350, r25
    8e5e:	80 93 4f 03 	sts	0x034F, r24
}
    8e62:	0f 90       	pop	r0
    8e64:	0f 90       	pop	r0
    8e66:	0f 90       	pop	r0
    8e68:	0f 90       	pop	r0
    8e6a:	df 91       	pop	r29
    8e6c:	cf 91       	pop	r28
    8e6e:	ff 91       	pop	r31
    8e70:	ef 91       	pop	r30
    8e72:	bf 91       	pop	r27
    8e74:	af 91       	pop	r26
    8e76:	9f 91       	pop	r25
    8e78:	8f 91       	pop	r24
    8e7a:	7f 91       	pop	r23
    8e7c:	6f 91       	pop	r22
    8e7e:	5f 91       	pop	r21
    8e80:	4f 91       	pop	r20
    8e82:	3f 91       	pop	r19
    8e84:	2f 91       	pop	r18
    8e86:	1f 91       	pop	r17
    8e88:	0f 91       	pop	r16
    8e8a:	ff 90       	pop	r15
    8e8c:	ef 90       	pop	r14
    8e8e:	0f 90       	pop	r0
    8e90:	00 92 5b 00 	sts	0x005B, r0
    8e94:	0f 90       	pop	r0
    8e96:	00 92 5f 00 	sts	0x005F, r0
    8e9a:	0f 90       	pop	r0
    8e9c:	1f 90       	pop	r1
    8e9e:	18 95       	reti

00008ea0 <__vector_default>:
 *	En caso de alguna falla en el codigo y se activa una interrupción no deseada, o sea \n
 *	que no tiene su vector con su rutina asociada, cae en este vector por defecto que no \n
 *	hace nada.
 */
 
ISR(__vector_default) {
    8ea0:	1f 92       	push	r1
    8ea2:	0f 92       	push	r0
    8ea4:	00 90 5f 00 	lds	r0, 0x005F
    8ea8:	0f 92       	push	r0
    8eaa:	11 24       	eor	r1, r1
    8eac:	cf 93       	push	r28
    8eae:	df 93       	push	r29
    8eb0:	cd b7       	in	r28, 0x3d	; 61
    8eb2:	de b7       	in	r29, 0x3e	; 62
}
    8eb4:	df 91       	pop	r29
    8eb6:	cf 91       	pop	r28
    8eb8:	0f 90       	pop	r0
    8eba:	00 92 5f 00 	sts	0x005F, r0
    8ebe:	0f 90       	pop	r0
    8ec0:	1f 90       	pop	r1
    8ec2:	18 95       	reti

00008ec4 <Medicion_ADC>:
extern char					chBufferTx_USART0[USART0_BUFFER_ZISE];	/* USART0.c, buffer de transmisión USART del uc */

/*****************************************************************************
* Maquina de estados del ADC
*****************************************************************************/
void Medicion_ADC(void) {
    8ec4:	cf 92       	push	r12
    8ec6:	df 92       	push	r13
    8ec8:	ef 92       	push	r14
    8eca:	ff 92       	push	r15
    8ecc:	0f 93       	push	r16
    8ece:	1f 93       	push	r17
    8ed0:	cf 93       	push	r28
    8ed2:	df 93       	push	r29
    8ed4:	cd b7       	in	r28, 0x3d	; 61
    8ed6:	de b7       	in	r29, 0x3e	; 62
    8ed8:	2e 97       	sbiw	r28, 0x0e	; 14
    8eda:	0f b6       	in	r0, 0x3f	; 63
    8edc:	f8 94       	cli
    8ede:	de bf       	out	0x3e, r29	; 62
    8ee0:	0f be       	out	0x3f, r0	; 63
    8ee2:	cd bf       	out	0x3d, r28	; 61
	switch (uchEstadoADC) {
    8ee4:	80 91 eb 04 	lds	r24, 0x04EB
    8ee8:	88 2f       	mov	r24, r24
    8eea:	90 e0       	ldi	r25, 0x00	; 0
    8eec:	82 30       	cpi	r24, 0x02	; 2
    8eee:	91 05       	cpc	r25, r1
    8ef0:	09 f4       	brne	.+2      	; 0x8ef4 <Medicion_ADC+0x30>
    8ef2:	49 c1       	rjmp	.+658    	; 0x9186 <Medicion_ADC+0x2c2>
    8ef4:	83 30       	cpi	r24, 0x03	; 3
    8ef6:	91 05       	cpc	r25, r1
    8ef8:	34 f4       	brge	.+12     	; 0x8f06 <Medicion_ADC+0x42>
    8efa:	00 97       	sbiw	r24, 0x00	; 0
    8efc:	61 f0       	breq	.+24     	; 0x8f16 <Medicion_ADC+0x52>
    8efe:	01 97       	sbiw	r24, 0x01	; 1
    8f00:	09 f4       	brne	.+2      	; 0x8f04 <Medicion_ADC+0x40>
    8f02:	a5 c0       	rjmp	.+330    	; 0x904e <Medicion_ADC+0x18a>
    8f04:	e1 c3       	rjmp	.+1986   	; 0x96c8 <Medicion_ADC+0x804>
    8f06:	83 30       	cpi	r24, 0x03	; 3
    8f08:	91 05       	cpc	r25, r1
    8f0a:	09 f4       	brne	.+2      	; 0x8f0e <Medicion_ADC+0x4a>
    8f0c:	29 c2       	rjmp	.+1106   	; 0x9360 <Medicion_ADC+0x49c>
    8f0e:	04 97       	sbiw	r24, 0x04	; 4
    8f10:	09 f4       	brne	.+2      	; 0x8f14 <Medicion_ADC+0x50>
    8f12:	13 c3       	rjmp	.+1574   	; 0x953a <Medicion_ADC+0x676>
    8f14:	d9 c3       	rjmp	.+1970   	; 0x96c8 <Medicion_ADC+0x804>

	case MEDICION_ADC0_PWM_420mA_2:
			if ((ADCSRA & (SET<<ADSC)) == 0) {													// si termino la conversio espero
    8f16:	86 e2       	ldi	r24, 0x26	; 38
    8f18:	90 e0       	ldi	r25, 0x00	; 0
    8f1a:	fc 01       	movw	r30, r24
    8f1c:	80 81       	ld	r24, Z
    8f1e:	88 2f       	mov	r24, r24
    8f20:	90 e0       	ldi	r25, 0x00	; 0
    8f22:	80 74       	andi	r24, 0x40	; 64
    8f24:	99 27       	eor	r25, r25
    8f26:	89 2b       	or	r24, r25
    8f28:	09 f0       	breq	.+2      	; 0x8f2c <Medicion_ADC+0x68>
    8f2a:	90 c0       	rjmp	.+288    	; 0x904c <Medicion_ADC+0x188>
				flPWM2valorMA = flPWM2valorMA + (((float)ADC / flPWM2aMA) - flPWM2valorMA) / uMuestrasADCpwm2;	// ago una media movil											// cargo el valor medido
    8f2c:	84 e2       	ldi	r24, 0x24	; 36
    8f2e:	90 e0       	ldi	r25, 0x00	; 0
    8f30:	fc 01       	movw	r30, r24
    8f32:	80 81       	ld	r24, Z
    8f34:	91 81       	ldd	r25, Z+1	; 0x01
    8f36:	cc 01       	movw	r24, r24
    8f38:	a0 e0       	ldi	r26, 0x00	; 0
    8f3a:	b0 e0       	ldi	r27, 0x00	; 0
    8f3c:	bc 01       	movw	r22, r24
    8f3e:	cd 01       	movw	r24, r26
    8f40:	0e 94 8e 82 	call	0x1051c	; 0x1051c <__floatunsisf>
    8f44:	7b 01       	movw	r14, r22
    8f46:	8c 01       	movw	r16, r24
    8f48:	80 91 97 05 	lds	r24, 0x0597
    8f4c:	90 91 98 05 	lds	r25, 0x0598
    8f50:	a0 91 99 05 	lds	r26, 0x0599
    8f54:	b0 91 9a 05 	lds	r27, 0x059A
    8f58:	9c 01       	movw	r18, r24
    8f5a:	ad 01       	movw	r20, r26
    8f5c:	c8 01       	movw	r24, r16
    8f5e:	b7 01       	movw	r22, r14
    8f60:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    8f64:	dc 01       	movw	r26, r24
    8f66:	cb 01       	movw	r24, r22
    8f68:	7c 01       	movw	r14, r24
    8f6a:	8d 01       	movw	r16, r26
    8f6c:	80 91 17 06 	lds	r24, 0x0617
    8f70:	90 91 18 06 	lds	r25, 0x0618
    8f74:	a0 91 19 06 	lds	r26, 0x0619
    8f78:	b0 91 1a 06 	lds	r27, 0x061A
    8f7c:	9c 01       	movw	r18, r24
    8f7e:	ad 01       	movw	r20, r26
    8f80:	c8 01       	movw	r24, r16
    8f82:	b7 01       	movw	r22, r14
    8f84:	0e 94 74 81 	call	0x102e8	; 0x102e8 <__subsf3>
    8f88:	dc 01       	movw	r26, r24
    8f8a:	cb 01       	movw	r24, r22
    8f8c:	6c 01       	movw	r12, r24
    8f8e:	7d 01       	movw	r14, r26
    8f90:	80 91 18 05 	lds	r24, 0x0518
    8f94:	90 91 19 05 	lds	r25, 0x0519
    8f98:	cc 01       	movw	r24, r24
    8f9a:	a0 e0       	ldi	r26, 0x00	; 0
    8f9c:	b0 e0       	ldi	r27, 0x00	; 0
    8f9e:	bc 01       	movw	r22, r24
    8fa0:	cd 01       	movw	r24, r26
    8fa2:	0e 94 8e 82 	call	0x1051c	; 0x1051c <__floatunsisf>
    8fa6:	dc 01       	movw	r26, r24
    8fa8:	cb 01       	movw	r24, r22
    8faa:	9c 01       	movw	r18, r24
    8fac:	ad 01       	movw	r20, r26
    8fae:	c7 01       	movw	r24, r14
    8fb0:	b6 01       	movw	r22, r12
    8fb2:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    8fb6:	dc 01       	movw	r26, r24
    8fb8:	cb 01       	movw	r24, r22
    8fba:	7c 01       	movw	r14, r24
    8fbc:	8d 01       	movw	r16, r26
    8fbe:	80 91 17 06 	lds	r24, 0x0617
    8fc2:	90 91 18 06 	lds	r25, 0x0618
    8fc6:	a0 91 19 06 	lds	r26, 0x0619
    8fca:	b0 91 1a 06 	lds	r27, 0x061A
    8fce:	9c 01       	movw	r18, r24
    8fd0:	ad 01       	movw	r20, r26
    8fd2:	c8 01       	movw	r24, r16
    8fd4:	b7 01       	movw	r22, r14
    8fd6:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    8fda:	dc 01       	movw	r26, r24
    8fdc:	cb 01       	movw	r24, r22
    8fde:	80 93 17 06 	sts	0x0617, r24
    8fe2:	90 93 18 06 	sts	0x0618, r25
    8fe6:	a0 93 19 06 	sts	0x0619, r26
    8fea:	b0 93 1a 06 	sts	0x061A, r27

				if (uContMuestrasADC < uMuestrasADCpwm2) {									// verifico si es el total de muesras a promediar
    8fee:	20 91 f1 04 	lds	r18, 0x04F1
    8ff2:	30 91 f2 04 	lds	r19, 0x04F2
    8ff6:	80 91 18 05 	lds	r24, 0x0518
    8ffa:	90 91 19 05 	lds	r25, 0x0519
    8ffe:	28 17       	cp	r18, r24
    9000:	39 07       	cpc	r19, r25
    9002:	50 f4       	brcc	.+20     	; 0x9018 <Medicion_ADC+0x154>
					uContMuestrasADC++;
    9004:	80 91 f1 04 	lds	r24, 0x04F1
    9008:	90 91 f2 04 	lds	r25, 0x04F2
    900c:	01 96       	adiw	r24, 0x01	; 1
    900e:	90 93 f2 04 	sts	0x04F2, r25
    9012:	80 93 f1 04 	sts	0x04F1, r24
    9016:	10 c0       	rjmp	.+32     	; 0x9038 <Medicion_ADC+0x174>
				}
				else {
					uContMuestrasADC=0;
    9018:	10 92 f2 04 	sts	0x04F2, r1
    901c:	10 92 f1 04 	sts	0x04F1, r1
					chValorNuevoPWM2 = SI;
    9020:	81 e0       	ldi	r24, 0x01	; 1
    9022:	80 93 fc 04 	sts	0x04FC, r24
					SW_Mux_ADC(ADC_2);														// cambio el mux
    9026:	82 e0       	ldi	r24, 0x02	; 2
    9028:	0e 94 76 4b 	call	0x96ec	; 0x96ec <SW_Mux_ADC>
					SW_Ref_ADC(ADC_REF_AVCC);												// fijo la referencia de tension de ADC
    902c:	80 e0       	ldi	r24, 0x00	; 0
    902e:	0e 94 26 4c 	call	0x984c	; 0x984c <SW_Ref_ADC>
					uchEstadoADC = MEDICION_ADC2_PWM_420mA_1;
    9032:	81 e0       	ldi	r24, 0x01	; 1
    9034:	80 93 eb 04 	sts	0x04EB, r24
				}
				SET_BIT(ADCSRA, ADSC);														// comienzo una nueva conversion normal
    9038:	86 e2       	ldi	r24, 0x26	; 38
    903a:	90 e0       	ldi	r25, 0x00	; 0
    903c:	26 e2       	ldi	r18, 0x26	; 38
    903e:	30 e0       	ldi	r19, 0x00	; 0
    9040:	f9 01       	movw	r30, r18
    9042:	20 81       	ld	r18, Z
    9044:	20 64       	ori	r18, 0x40	; 64
    9046:	fc 01       	movw	r30, r24
    9048:	20 83       	st	Z, r18
			}
			break;
    904a:	41 c3       	rjmp	.+1666   	; 0x96ce <Medicion_ADC+0x80a>
    904c:	40 c3       	rjmp	.+1664   	; 0x96ce <Medicion_ADC+0x80a>


	case MEDICION_ADC2_PWM_420mA_1:
			if ((ADCSRA & (SET<<ADSC)) == 0) {													// si no termino la conversio espero
    904e:	86 e2       	ldi	r24, 0x26	; 38
    9050:	90 e0       	ldi	r25, 0x00	; 0
    9052:	fc 01       	movw	r30, r24
    9054:	80 81       	ld	r24, Z
    9056:	88 2f       	mov	r24, r24
    9058:	90 e0       	ldi	r25, 0x00	; 0
    905a:	80 74       	andi	r24, 0x40	; 64
    905c:	99 27       	eor	r25, r25
    905e:	89 2b       	or	r24, r25
    9060:	09 f0       	breq	.+2      	; 0x9064 <Medicion_ADC+0x1a0>
    9062:	90 c0       	rjmp	.+288    	; 0x9184 <Medicion_ADC+0x2c0>
				flPWM1valorMA = flPWM1valorMA + (((float)ADC / flPWM1aMA) - flPWM1valorMA) / uMuestrasADCpwm1;	// ago una media movil											// cargo el valor medido
    9064:	84 e2       	ldi	r24, 0x24	; 36
    9066:	90 e0       	ldi	r25, 0x00	; 0
    9068:	fc 01       	movw	r30, r24
    906a:	80 81       	ld	r24, Z
    906c:	91 81       	ldd	r25, Z+1	; 0x01
    906e:	cc 01       	movw	r24, r24
    9070:	a0 e0       	ldi	r26, 0x00	; 0
    9072:	b0 e0       	ldi	r27, 0x00	; 0
    9074:	bc 01       	movw	r22, r24
    9076:	cd 01       	movw	r24, r26
    9078:	0e 94 8e 82 	call	0x1051c	; 0x1051c <__floatunsisf>
    907c:	7b 01       	movw	r14, r22
    907e:	8c 01       	movw	r16, r24
    9080:	80 91 09 05 	lds	r24, 0x0509
    9084:	90 91 0a 05 	lds	r25, 0x050A
    9088:	a0 91 0b 05 	lds	r26, 0x050B
    908c:	b0 91 0c 05 	lds	r27, 0x050C
    9090:	9c 01       	movw	r18, r24
    9092:	ad 01       	movw	r20, r26
    9094:	c8 01       	movw	r24, r16
    9096:	b7 01       	movw	r22, r14
    9098:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    909c:	dc 01       	movw	r26, r24
    909e:	cb 01       	movw	r24, r22
    90a0:	7c 01       	movw	r14, r24
    90a2:	8d 01       	movw	r16, r26
    90a4:	80 91 13 06 	lds	r24, 0x0613
    90a8:	90 91 14 06 	lds	r25, 0x0614
    90ac:	a0 91 15 06 	lds	r26, 0x0615
    90b0:	b0 91 16 06 	lds	r27, 0x0616
    90b4:	9c 01       	movw	r18, r24
    90b6:	ad 01       	movw	r20, r26
    90b8:	c8 01       	movw	r24, r16
    90ba:	b7 01       	movw	r22, r14
    90bc:	0e 94 74 81 	call	0x102e8	; 0x102e8 <__subsf3>
    90c0:	dc 01       	movw	r26, r24
    90c2:	cb 01       	movw	r24, r22
    90c4:	6c 01       	movw	r12, r24
    90c6:	7d 01       	movw	r14, r26
    90c8:	80 91 fd 04 	lds	r24, 0x04FD
    90cc:	90 91 fe 04 	lds	r25, 0x04FE
    90d0:	cc 01       	movw	r24, r24
    90d2:	a0 e0       	ldi	r26, 0x00	; 0
    90d4:	b0 e0       	ldi	r27, 0x00	; 0
    90d6:	bc 01       	movw	r22, r24
    90d8:	cd 01       	movw	r24, r26
    90da:	0e 94 8e 82 	call	0x1051c	; 0x1051c <__floatunsisf>
    90de:	dc 01       	movw	r26, r24
    90e0:	cb 01       	movw	r24, r22
    90e2:	9c 01       	movw	r18, r24
    90e4:	ad 01       	movw	r20, r26
    90e6:	c7 01       	movw	r24, r14
    90e8:	b6 01       	movw	r22, r12
    90ea:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    90ee:	dc 01       	movw	r26, r24
    90f0:	cb 01       	movw	r24, r22
    90f2:	7c 01       	movw	r14, r24
    90f4:	8d 01       	movw	r16, r26
    90f6:	80 91 13 06 	lds	r24, 0x0613
    90fa:	90 91 14 06 	lds	r25, 0x0614
    90fe:	a0 91 15 06 	lds	r26, 0x0615
    9102:	b0 91 16 06 	lds	r27, 0x0616
    9106:	9c 01       	movw	r18, r24
    9108:	ad 01       	movw	r20, r26
    910a:	c8 01       	movw	r24, r16
    910c:	b7 01       	movw	r22, r14
    910e:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    9112:	dc 01       	movw	r26, r24
    9114:	cb 01       	movw	r24, r22
    9116:	80 93 13 06 	sts	0x0613, r24
    911a:	90 93 14 06 	sts	0x0614, r25
    911e:	a0 93 15 06 	sts	0x0615, r26
    9122:	b0 93 16 06 	sts	0x0616, r27

				if (uContMuestrasADC < uMuestrasADCpwm1) {
    9126:	20 91 f1 04 	lds	r18, 0x04F1
    912a:	30 91 f2 04 	lds	r19, 0x04F2
    912e:	80 91 fd 04 	lds	r24, 0x04FD
    9132:	90 91 fe 04 	lds	r25, 0x04FE
    9136:	28 17       	cp	r18, r24
    9138:	39 07       	cpc	r19, r25
    913a:	50 f4       	brcc	.+20     	; 0x9150 <Medicion_ADC+0x28c>
					uContMuestrasADC++;
    913c:	80 91 f1 04 	lds	r24, 0x04F1
    9140:	90 91 f2 04 	lds	r25, 0x04F2
    9144:	01 96       	adiw	r24, 0x01	; 1
    9146:	90 93 f2 04 	sts	0x04F2, r25
    914a:	80 93 f1 04 	sts	0x04F1, r24
    914e:	10 c0       	rjmp	.+32     	; 0x9170 <Medicion_ADC+0x2ac>
				}
				else {
					uContMuestrasADC=0;
    9150:	10 92 f2 04 	sts	0x04F2, r1
    9154:	10 92 f1 04 	sts	0x04F1, r1
					chValorNuevoPWM1 = SI;
    9158:	81 e0       	ldi	r24, 0x01	; 1
    915a:	80 93 1a 05 	sts	0x051A, r24
					SW_Mux_ADC(ADC_6);														// cambio el mux
    915e:	86 e0       	ldi	r24, 0x06	; 6
    9160:	0e 94 76 4b 	call	0x96ec	; 0x96ec <SW_Mux_ADC>
					SW_Ref_ADC(ADC_REF_INTERNAL);											// fijo la referencia de tension de ADC
    9164:	81 e0       	ldi	r24, 0x01	; 1
    9166:	0e 94 26 4c 	call	0x984c	; 0x984c <SW_Ref_ADC>
					uchEstadoADC = MEDICION_ADC6_CONDUCT_2;
    916a:	82 e0       	ldi	r24, 0x02	; 2
    916c:	80 93 eb 04 	sts	0x04EB, r24
				}
				SET_BIT(ADCSRA, ADSC);														// comienzo una nueva conversion normal
    9170:	86 e2       	ldi	r24, 0x26	; 38
    9172:	90 e0       	ldi	r25, 0x00	; 0
    9174:	26 e2       	ldi	r18, 0x26	; 38
    9176:	30 e0       	ldi	r19, 0x00	; 0
    9178:	f9 01       	movw	r30, r18
    917a:	20 81       	ld	r18, Z
    917c:	20 64       	ori	r18, 0x40	; 64
    917e:	fc 01       	movw	r30, r24
    9180:	20 83       	st	Z, r18
			}
			break;
    9182:	a5 c2       	rjmp	.+1354   	; 0x96ce <Medicion_ADC+0x80a>
    9184:	a4 c2       	rjmp	.+1352   	; 0x96ce <Medicion_ADC+0x80a>


	case MEDICION_ADC6_CONDUCT_2:
			if ((ADCSRA & (SET<<ADSC)) == 0) {													// si no termino la conversio espero
    9186:	86 e2       	ldi	r24, 0x26	; 38
    9188:	90 e0       	ldi	r25, 0x00	; 0
    918a:	fc 01       	movw	r30, r24
    918c:	80 81       	ld	r24, Z
    918e:	88 2f       	mov	r24, r24
    9190:	90 e0       	ldi	r25, 0x00	; 0
    9192:	80 74       	andi	r24, 0x40	; 64
    9194:	99 27       	eor	r25, r25
    9196:	89 2b       	or	r24, r25
    9198:	09 f0       	breq	.+2      	; 0x919c <Medicion_ADC+0x2d8>
    919a:	e1 c0       	rjmp	.+450    	; 0x935e <Medicion_ADC+0x49a>
				uValorADCcond2 = ADC;
    919c:	84 e2       	ldi	r24, 0x24	; 36
    919e:	90 e0       	ldi	r25, 0x00	; 0
    91a0:	fc 01       	movw	r30, r24
    91a2:	80 81       	ld	r24, Z
    91a4:	91 81       	ldd	r25, Z+1	; 0x01
    91a6:	90 93 08 05 	sts	0x0508, r25
    91aa:	80 93 07 05 	sts	0x0507, r24
				float flAux;

				// correcion de linealidad
				int i=0;
    91ae:	1a 82       	std	Y+2, r1	; 0x02
    91b0:	19 82       	std	Y+1, r1	; 0x01
				while (uValorADCcond2 < uCuentasADCcorrLin[i]){
    91b2:	05 c0       	rjmp	.+10     	; 0x91be <Medicion_ADC+0x2fa>
					i++;
    91b4:	89 81       	ldd	r24, Y+1	; 0x01
    91b6:	9a 81       	ldd	r25, Y+2	; 0x02
    91b8:	01 96       	adiw	r24, 0x01	; 1
    91ba:	9a 83       	std	Y+2, r25	; 0x02
    91bc:	89 83       	std	Y+1, r24	; 0x01
				uValorADCcond2 = ADC;
				float flAux;

				// correcion de linealidad
				int i=0;
				while (uValorADCcond2 < uCuentasADCcorrLin[i]){
    91be:	89 81       	ldd	r24, Y+1	; 0x01
    91c0:	9a 81       	ldd	r25, Y+2	; 0x02
    91c2:	88 0f       	add	r24, r24
    91c4:	99 1f       	adc	r25, r25
    91c6:	8c 5c       	subi	r24, 0xCC	; 204
    91c8:	9d 4f       	sbci	r25, 0xFD	; 253
    91ca:	fc 01       	movw	r30, r24
    91cc:	20 81       	ld	r18, Z
    91ce:	31 81       	ldd	r19, Z+1	; 0x01
    91d0:	80 91 07 05 	lds	r24, 0x0507
    91d4:	90 91 08 05 	lds	r25, 0x0508
    91d8:	82 17       	cp	r24, r18
    91da:	93 07       	cpc	r25, r19
    91dc:	58 f3       	brcs	.-42     	; 0x91b4 <Medicion_ADC+0x2f0>
					i++;
				}
				flAux = (float)uValorADCcond2 * flCond2auS * flCond2Factor[i];
    91de:	80 91 07 05 	lds	r24, 0x0507
    91e2:	90 91 08 05 	lds	r25, 0x0508
    91e6:	cc 01       	movw	r24, r24
    91e8:	a0 e0       	ldi	r26, 0x00	; 0
    91ea:	b0 e0       	ldi	r27, 0x00	; 0
    91ec:	bc 01       	movw	r22, r24
    91ee:	cd 01       	movw	r24, r26
    91f0:	0e 94 8e 82 	call	0x1051c	; 0x1051c <__floatunsisf>
    91f4:	7b 01       	movw	r14, r22
    91f6:	8c 01       	movw	r16, r24
    91f8:	80 91 93 05 	lds	r24, 0x0593
    91fc:	90 91 94 05 	lds	r25, 0x0594
    9200:	a0 91 95 05 	lds	r26, 0x0595
    9204:	b0 91 96 05 	lds	r27, 0x0596
    9208:	9c 01       	movw	r18, r24
    920a:	ad 01       	movw	r20, r26
    920c:	c8 01       	movw	r24, r16
    920e:	b7 01       	movw	r22, r14
    9210:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    9214:	dc 01       	movw	r26, r24
    9216:	cb 01       	movw	r24, r22
    9218:	7c 01       	movw	r14, r24
    921a:	8d 01       	movw	r16, r26
    921c:	89 81       	ldd	r24, Y+1	; 0x01
    921e:	9a 81       	ldd	r25, Y+2	; 0x02
    9220:	88 0f       	add	r24, r24
    9222:	99 1f       	adc	r25, r25
    9224:	88 0f       	add	r24, r24
    9226:	99 1f       	adc	r25, r25
    9228:	85 56       	subi	r24, 0x65	; 101
    922a:	9a 4f       	sbci	r25, 0xFA	; 250
    922c:	fc 01       	movw	r30, r24
    922e:	80 81       	ld	r24, Z
    9230:	91 81       	ldd	r25, Z+1	; 0x01
    9232:	a2 81       	ldd	r26, Z+2	; 0x02
    9234:	b3 81       	ldd	r27, Z+3	; 0x03
    9236:	9c 01       	movw	r18, r24
    9238:	ad 01       	movw	r20, r26
    923a:	c8 01       	movw	r24, r16
    923c:	b7 01       	movw	r22, r14
    923e:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    9242:	dc 01       	movw	r26, r24
    9244:	cb 01       	movw	r24, r22
    9246:	8d 83       	std	Y+5, r24	; 0x05
    9248:	9e 83       	std	Y+6, r25	; 0x06
    924a:	af 83       	std	Y+7, r26	; 0x07
    924c:	b8 87       	std	Y+8, r27	; 0x08

				// correcion de cero
				flAux -= flOffsetCond2;
    924e:	80 91 03 05 	lds	r24, 0x0503
    9252:	90 91 04 05 	lds	r25, 0x0504
    9256:	a0 91 05 05 	lds	r26, 0x0505
    925a:	b0 91 06 05 	lds	r27, 0x0506
    925e:	9c 01       	movw	r18, r24
    9260:	ad 01       	movw	r20, r26
    9262:	6d 81       	ldd	r22, Y+5	; 0x05
    9264:	7e 81       	ldd	r23, Y+6	; 0x06
    9266:	8f 81       	ldd	r24, Y+7	; 0x07
    9268:	98 85       	ldd	r25, Y+8	; 0x08
    926a:	0e 94 74 81 	call	0x102e8	; 0x102e8 <__subsf3>
    926e:	dc 01       	movw	r26, r24
    9270:	cb 01       	movw	r24, r22
    9272:	8d 83       	std	Y+5, r24	; 0x05
    9274:	9e 83       	std	Y+6, r25	; 0x06
    9276:	af 83       	std	Y+7, r26	; 0x07
    9278:	b8 87       	std	Y+8, r27	; 0x08

				flCond2valoruS = flCond2valoruS + (flAux - flCond2valoruS) / uMuestrasADCcond2;	// hago una media movil											// cargo el valor medido
    927a:	80 91 ed 04 	lds	r24, 0x04ED
    927e:	90 91 ee 04 	lds	r25, 0x04EE
    9282:	a0 91 ef 04 	lds	r26, 0x04EF
    9286:	b0 91 f0 04 	lds	r27, 0x04F0
    928a:	9c 01       	movw	r18, r24
    928c:	ad 01       	movw	r20, r26
    928e:	6d 81       	ldd	r22, Y+5	; 0x05
    9290:	7e 81       	ldd	r23, Y+6	; 0x06
    9292:	8f 81       	ldd	r24, Y+7	; 0x07
    9294:	98 85       	ldd	r25, Y+8	; 0x08
    9296:	0e 94 74 81 	call	0x102e8	; 0x102e8 <__subsf3>
    929a:	dc 01       	movw	r26, r24
    929c:	cb 01       	movw	r24, r22
    929e:	6c 01       	movw	r12, r24
    92a0:	7d 01       	movw	r14, r26
    92a2:	80 91 f6 04 	lds	r24, 0x04F6
    92a6:	90 91 f7 04 	lds	r25, 0x04F7
    92aa:	cc 01       	movw	r24, r24
    92ac:	a0 e0       	ldi	r26, 0x00	; 0
    92ae:	b0 e0       	ldi	r27, 0x00	; 0
    92b0:	bc 01       	movw	r22, r24
    92b2:	cd 01       	movw	r24, r26
    92b4:	0e 94 8e 82 	call	0x1051c	; 0x1051c <__floatunsisf>
    92b8:	dc 01       	movw	r26, r24
    92ba:	cb 01       	movw	r24, r22
    92bc:	9c 01       	movw	r18, r24
    92be:	ad 01       	movw	r20, r26
    92c0:	c7 01       	movw	r24, r14
    92c2:	b6 01       	movw	r22, r12
    92c4:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    92c8:	dc 01       	movw	r26, r24
    92ca:	cb 01       	movw	r24, r22
    92cc:	7c 01       	movw	r14, r24
    92ce:	8d 01       	movw	r16, r26
    92d0:	80 91 ed 04 	lds	r24, 0x04ED
    92d4:	90 91 ee 04 	lds	r25, 0x04EE
    92d8:	a0 91 ef 04 	lds	r26, 0x04EF
    92dc:	b0 91 f0 04 	lds	r27, 0x04F0
    92e0:	9c 01       	movw	r18, r24
    92e2:	ad 01       	movw	r20, r26
    92e4:	c8 01       	movw	r24, r16
    92e6:	b7 01       	movw	r22, r14
    92e8:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    92ec:	dc 01       	movw	r26, r24
    92ee:	cb 01       	movw	r24, r22
    92f0:	80 93 ed 04 	sts	0x04ED, r24
    92f4:	90 93 ee 04 	sts	0x04EE, r25
    92f8:	a0 93 ef 04 	sts	0x04EF, r26
    92fc:	b0 93 f0 04 	sts	0x04F0, r27

				// control de cantifdad de muestras
				if (uContMuestrasADC < uMuestrasADCcond2) {
    9300:	20 91 f1 04 	lds	r18, 0x04F1
    9304:	30 91 f2 04 	lds	r19, 0x04F2
    9308:	80 91 f6 04 	lds	r24, 0x04F6
    930c:	90 91 f7 04 	lds	r25, 0x04F7
    9310:	28 17       	cp	r18, r24
    9312:	39 07       	cpc	r19, r25
    9314:	50 f4       	brcc	.+20     	; 0x932a <Medicion_ADC+0x466>
					uContMuestrasADC++;
    9316:	80 91 f1 04 	lds	r24, 0x04F1
    931a:	90 91 f2 04 	lds	r25, 0x04F2
    931e:	01 96       	adiw	r24, 0x01	; 1
    9320:	90 93 f2 04 	sts	0x04F2, r25
    9324:	80 93 f1 04 	sts	0x04F1, r24
    9328:	10 c0       	rjmp	.+32     	; 0x934a <Medicion_ADC+0x486>
				}
				else {
					uContMuestrasADC=0;
    932a:	10 92 f2 04 	sts	0x04F2, r1
    932e:	10 92 f1 04 	sts	0x04F1, r1
					chValorNuevoCond2 = SI;
    9332:	81 e0       	ldi	r24, 0x01	; 1
    9334:	80 93 17 05 	sts	0x0517, r24
					SW_Mux_ADC(ADC_7);														// cambio el mux
    9338:	87 e0       	ldi	r24, 0x07	; 7
    933a:	0e 94 76 4b 	call	0x96ec	; 0x96ec <SW_Mux_ADC>
					SW_Ref_ADC(ADC_REF_INTERNAL);											// fijo la referencia de tension de ADC
    933e:	81 e0       	ldi	r24, 0x01	; 1
    9340:	0e 94 26 4c 	call	0x984c	; 0x984c <SW_Ref_ADC>
					uchEstadoADC = MEDICION_ADC7_CONDUCT_1;
    9344:	83 e0       	ldi	r24, 0x03	; 3
    9346:	80 93 eb 04 	sts	0x04EB, r24
				}
				SET_BIT(ADCSRA, ADSC);														// comienzo una nueva conversion normal
    934a:	86 e2       	ldi	r24, 0x26	; 38
    934c:	90 e0       	ldi	r25, 0x00	; 0
    934e:	26 e2       	ldi	r18, 0x26	; 38
    9350:	30 e0       	ldi	r19, 0x00	; 0
    9352:	f9 01       	movw	r30, r18
    9354:	20 81       	ld	r18, Z
    9356:	20 64       	ori	r18, 0x40	; 64
    9358:	fc 01       	movw	r30, r24
    935a:	20 83       	st	Z, r18
			}
			break;
    935c:	b8 c1       	rjmp	.+880    	; 0x96ce <Medicion_ADC+0x80a>
    935e:	b7 c1       	rjmp	.+878    	; 0x96ce <Medicion_ADC+0x80a>


	case MEDICION_ADC7_CONDUCT_1:
			if ((ADCSRA & (SET<<ADSC)) == 0) {												// si no termino la conversio espero
    9360:	86 e2       	ldi	r24, 0x26	; 38
    9362:	90 e0       	ldi	r25, 0x00	; 0
    9364:	fc 01       	movw	r30, r24
    9366:	80 81       	ld	r24, Z
    9368:	88 2f       	mov	r24, r24
    936a:	90 e0       	ldi	r25, 0x00	; 0
    936c:	80 74       	andi	r24, 0x40	; 64
    936e:	99 27       	eor	r25, r25
    9370:	89 2b       	or	r24, r25
    9372:	09 f0       	breq	.+2      	; 0x9376 <Medicion_ADC+0x4b2>
    9374:	e1 c0       	rjmp	.+450    	; 0x9538 <Medicion_ADC+0x674>
				uValorADCcond1 = ADC;
    9376:	84 e2       	ldi	r24, 0x24	; 36
    9378:	90 e0       	ldi	r25, 0x00	; 0
    937a:	fc 01       	movw	r30, r24
    937c:	80 81       	ld	r24, Z
    937e:	91 81       	ldd	r25, Z+1	; 0x01
    9380:	90 93 f4 04 	sts	0x04F4, r25
    9384:	80 93 f3 04 	sts	0x04F3, r24
				float flAux;

				// correcion de linealidad
				int i=0;
    9388:	1c 82       	std	Y+4, r1	; 0x04
    938a:	1b 82       	std	Y+3, r1	; 0x03
				while (uValorADCcond1 < uCuentasADCcorrLin[i]){
    938c:	05 c0       	rjmp	.+10     	; 0x9398 <Medicion_ADC+0x4d4>
					i++;
    938e:	8b 81       	ldd	r24, Y+3	; 0x03
    9390:	9c 81       	ldd	r25, Y+4	; 0x04
    9392:	01 96       	adiw	r24, 0x01	; 1
    9394:	9c 83       	std	Y+4, r25	; 0x04
    9396:	8b 83       	std	Y+3, r24	; 0x03
				uValorADCcond1 = ADC;
				float flAux;

				// correcion de linealidad
				int i=0;
				while (uValorADCcond1 < uCuentasADCcorrLin[i]){
    9398:	8b 81       	ldd	r24, Y+3	; 0x03
    939a:	9c 81       	ldd	r25, Y+4	; 0x04
    939c:	88 0f       	add	r24, r24
    939e:	99 1f       	adc	r25, r25
    93a0:	8c 5c       	subi	r24, 0xCC	; 204
    93a2:	9d 4f       	sbci	r25, 0xFD	; 253
    93a4:	fc 01       	movw	r30, r24
    93a6:	20 81       	ld	r18, Z
    93a8:	31 81       	ldd	r19, Z+1	; 0x01
    93aa:	80 91 f3 04 	lds	r24, 0x04F3
    93ae:	90 91 f4 04 	lds	r25, 0x04F4
    93b2:	82 17       	cp	r24, r18
    93b4:	93 07       	cpc	r25, r19
    93b6:	58 f3       	brcs	.-42     	; 0x938e <Medicion_ADC+0x4ca>
					i++;
				}
				flAux = (float)uValorADCcond1 * flCond1auS * flCond1Factor[i];
    93b8:	80 91 f3 04 	lds	r24, 0x04F3
    93bc:	90 91 f4 04 	lds	r25, 0x04F4
    93c0:	cc 01       	movw	r24, r24
    93c2:	a0 e0       	ldi	r26, 0x00	; 0
    93c4:	b0 e0       	ldi	r27, 0x00	; 0
    93c6:	bc 01       	movw	r22, r24
    93c8:	cd 01       	movw	r24, r26
    93ca:	0e 94 8e 82 	call	0x1051c	; 0x1051c <__floatunsisf>
    93ce:	7b 01       	movw	r14, r22
    93d0:	8c 01       	movw	r16, r24
    93d2:	80 91 0d 05 	lds	r24, 0x050D
    93d6:	90 91 0e 05 	lds	r25, 0x050E
    93da:	a0 91 0f 05 	lds	r26, 0x050F
    93de:	b0 91 10 05 	lds	r27, 0x0510
    93e2:	9c 01       	movw	r18, r24
    93e4:	ad 01       	movw	r20, r26
    93e6:	c8 01       	movw	r24, r16
    93e8:	b7 01       	movw	r22, r14
    93ea:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    93ee:	dc 01       	movw	r26, r24
    93f0:	cb 01       	movw	r24, r22
    93f2:	7c 01       	movw	r14, r24
    93f4:	8d 01       	movw	r16, r26
    93f6:	8b 81       	ldd	r24, Y+3	; 0x03
    93f8:	9c 81       	ldd	r25, Y+4	; 0x04
    93fa:	88 0f       	add	r24, r24
    93fc:	99 1f       	adc	r25, r25
    93fe:	88 0f       	add	r24, r24
    9400:	99 1f       	adc	r25, r25
    9402:	85 5e       	subi	r24, 0xE5	; 229
    9404:	9a 4f       	sbci	r25, 0xFA	; 250
    9406:	fc 01       	movw	r30, r24
    9408:	80 81       	ld	r24, Z
    940a:	91 81       	ldd	r25, Z+1	; 0x01
    940c:	a2 81       	ldd	r26, Z+2	; 0x02
    940e:	b3 81       	ldd	r27, Z+3	; 0x03
    9410:	9c 01       	movw	r18, r24
    9412:	ad 01       	movw	r20, r26
    9414:	c8 01       	movw	r24, r16
    9416:	b7 01       	movw	r22, r14
    9418:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    941c:	dc 01       	movw	r26, r24
    941e:	cb 01       	movw	r24, r22
    9420:	89 87       	std	Y+9, r24	; 0x09
    9422:	9a 87       	std	Y+10, r25	; 0x0a
    9424:	ab 87       	std	Y+11, r26	; 0x0b
    9426:	bc 87       	std	Y+12, r27	; 0x0c

				// correcion de cero
				flAux -= flOffsetCond1;
    9428:	80 91 f8 04 	lds	r24, 0x04F8
    942c:	90 91 f9 04 	lds	r25, 0x04F9
    9430:	a0 91 fa 04 	lds	r26, 0x04FA
    9434:	b0 91 fb 04 	lds	r27, 0x04FB
    9438:	9c 01       	movw	r18, r24
    943a:	ad 01       	movw	r20, r26
    943c:	69 85       	ldd	r22, Y+9	; 0x09
    943e:	7a 85       	ldd	r23, Y+10	; 0x0a
    9440:	8b 85       	ldd	r24, Y+11	; 0x0b
    9442:	9c 85       	ldd	r25, Y+12	; 0x0c
    9444:	0e 94 74 81 	call	0x102e8	; 0x102e8 <__subsf3>
    9448:	dc 01       	movw	r26, r24
    944a:	cb 01       	movw	r24, r22
    944c:	89 87       	std	Y+9, r24	; 0x09
    944e:	9a 87       	std	Y+10, r25	; 0x0a
    9450:	ab 87       	std	Y+11, r26	; 0x0b
    9452:	bc 87       	std	Y+12, r27	; 0x0c

				flCond1valoruS = flCond1valoruS + (flAux - flCond1valoruS) / uMuestrasADCcond1;	// hago una media movil											// cargo el valor medido
    9454:	80 91 11 05 	lds	r24, 0x0511
    9458:	90 91 12 05 	lds	r25, 0x0512
    945c:	a0 91 13 05 	lds	r26, 0x0513
    9460:	b0 91 14 05 	lds	r27, 0x0514
    9464:	9c 01       	movw	r18, r24
    9466:	ad 01       	movw	r20, r26
    9468:	69 85       	ldd	r22, Y+9	; 0x09
    946a:	7a 85       	ldd	r23, Y+10	; 0x0a
    946c:	8b 85       	ldd	r24, Y+11	; 0x0b
    946e:	9c 85       	ldd	r25, Y+12	; 0x0c
    9470:	0e 94 74 81 	call	0x102e8	; 0x102e8 <__subsf3>
    9474:	dc 01       	movw	r26, r24
    9476:	cb 01       	movw	r24, r22
    9478:	6c 01       	movw	r12, r24
    947a:	7d 01       	movw	r14, r26
    947c:	80 91 01 05 	lds	r24, 0x0501
    9480:	90 91 02 05 	lds	r25, 0x0502
    9484:	cc 01       	movw	r24, r24
    9486:	a0 e0       	ldi	r26, 0x00	; 0
    9488:	b0 e0       	ldi	r27, 0x00	; 0
    948a:	bc 01       	movw	r22, r24
    948c:	cd 01       	movw	r24, r26
    948e:	0e 94 8e 82 	call	0x1051c	; 0x1051c <__floatunsisf>
    9492:	dc 01       	movw	r26, r24
    9494:	cb 01       	movw	r24, r22
    9496:	9c 01       	movw	r18, r24
    9498:	ad 01       	movw	r20, r26
    949a:	c7 01       	movw	r24, r14
    949c:	b6 01       	movw	r22, r12
    949e:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    94a2:	dc 01       	movw	r26, r24
    94a4:	cb 01       	movw	r24, r22
    94a6:	7c 01       	movw	r14, r24
    94a8:	8d 01       	movw	r16, r26
    94aa:	80 91 11 05 	lds	r24, 0x0511
    94ae:	90 91 12 05 	lds	r25, 0x0512
    94b2:	a0 91 13 05 	lds	r26, 0x0513
    94b6:	b0 91 14 05 	lds	r27, 0x0514
    94ba:	9c 01       	movw	r18, r24
    94bc:	ad 01       	movw	r20, r26
    94be:	c8 01       	movw	r24, r16
    94c0:	b7 01       	movw	r22, r14
    94c2:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    94c6:	dc 01       	movw	r26, r24
    94c8:	cb 01       	movw	r24, r22
    94ca:	80 93 11 05 	sts	0x0511, r24
    94ce:	90 93 12 05 	sts	0x0512, r25
    94d2:	a0 93 13 05 	sts	0x0513, r26
    94d6:	b0 93 14 05 	sts	0x0514, r27

				// control de cantifdad de muestras
				if (uContMuestrasADC < uMuestrasADCcond1) {
    94da:	20 91 f1 04 	lds	r18, 0x04F1
    94de:	30 91 f2 04 	lds	r19, 0x04F2
    94e2:	80 91 01 05 	lds	r24, 0x0501
    94e6:	90 91 02 05 	lds	r25, 0x0502
    94ea:	28 17       	cp	r18, r24
    94ec:	39 07       	cpc	r19, r25
    94ee:	50 f4       	brcc	.+20     	; 0x9504 <Medicion_ADC+0x640>
					uContMuestrasADC++;
    94f0:	80 91 f1 04 	lds	r24, 0x04F1
    94f4:	90 91 f2 04 	lds	r25, 0x04F2
    94f8:	01 96       	adiw	r24, 0x01	; 1
    94fa:	90 93 f2 04 	sts	0x04F2, r25
    94fe:	80 93 f1 04 	sts	0x04F1, r24
    9502:	10 c0       	rjmp	.+32     	; 0x9524 <Medicion_ADC+0x660>
				}
				else {
					uContMuestrasADC=0;
    9504:	10 92 f2 04 	sts	0x04F2, r1
    9508:	10 92 f1 04 	sts	0x04F1, r1
					chValorNuevoCond1 = SI;
    950c:	81 e0       	ldi	r24, 0x01	; 1
    950e:	80 93 f5 04 	sts	0x04F5, r24
					SW_Mux_ADC(ADC_0);														// cambio el mux
    9512:	80 e0       	ldi	r24, 0x00	; 0
    9514:	0e 94 76 4b 	call	0x96ec	; 0x96ec <SW_Mux_ADC>
					SW_Ref_ADC(ADC_REF_AVCC);												// fijo la referencia de tension de ADC
    9518:	80 e0       	ldi	r24, 0x00	; 0
    951a:	0e 94 26 4c 	call	0x984c	; 0x984c <SW_Ref_ADC>
					uchEstadoADC = IMPRIMIR_ADC;
    951e:	84 e0       	ldi	r24, 0x04	; 4
    9520:	80 93 eb 04 	sts	0x04EB, r24
				}
				SET_BIT(ADCSRA, ADSC);														// comienzo una nueva conversion normal
    9524:	86 e2       	ldi	r24, 0x26	; 38
    9526:	90 e0       	ldi	r25, 0x00	; 0
    9528:	26 e2       	ldi	r18, 0x26	; 38
    952a:	30 e0       	ldi	r19, 0x00	; 0
    952c:	f9 01       	movw	r30, r18
    952e:	20 81       	ld	r18, Z
    9530:	20 64       	ori	r18, 0x40	; 64
    9532:	fc 01       	movw	r30, r24
    9534:	20 83       	st	Z, r18
			}
			break;
    9536:	cb c0       	rjmp	.+406    	; 0x96ce <Medicion_ADC+0x80a>
    9538:	ca c0       	rjmp	.+404    	; 0x96ce <Medicion_ADC+0x80a>

	case IMPRIMIR_ADC:
		if (chADCprint == SI) {
    953a:	80 91 ec 04 	lds	r24, 0x04EC
    953e:	81 30       	cpi	r24, 0x01	; 1
    9540:	09 f0       	breq	.+2      	; 0x9544 <Medicion_ADC+0x680>
    9542:	bf c0       	rjmp	.+382    	; 0x96c2 <Medicion_ADC+0x7fe>
			int index = sprintf(chBufferTx_USART0, "\rI_CH1= ");
    9544:	89 e0       	ldi	r24, 0x09	; 9
    9546:	e7 ea       	ldi	r30, 0xA7	; 167
    9548:	f1 e0       	ldi	r31, 0x01	; 1
    954a:	a3 e5       	ldi	r26, 0x53	; 83
    954c:	b3 e0       	ldi	r27, 0x03	; 3
    954e:	01 90       	ld	r0, Z+
    9550:	0d 92       	st	X+, r0
    9552:	8a 95       	dec	r24
    9554:	e1 f7       	brne	.-8      	; 0x954e <Medicion_ADC+0x68a>
    9556:	88 e0       	ldi	r24, 0x08	; 8
    9558:	90 e0       	ldi	r25, 0x00	; 0
    955a:	9e 87       	std	Y+14, r25	; 0x0e
    955c:	8d 87       	std	Y+13, r24	; 0x0d
			dtostrf(flPWM1valorMA, 5, 2, chBufferTx_USART0+index);
    955e:	8d 85       	ldd	r24, Y+13	; 0x0d
    9560:	9e 85       	ldd	r25, Y+14	; 0x0e
    9562:	9c 01       	movw	r18, r24
    9564:	2d 5a       	subi	r18, 0xAD	; 173
    9566:	3c 4f       	sbci	r19, 0xFC	; 252
    9568:	80 91 13 06 	lds	r24, 0x0613
    956c:	90 91 14 06 	lds	r25, 0x0614
    9570:	a0 91 15 06 	lds	r26, 0x0615
    9574:	b0 91 16 06 	lds	r27, 0x0616
    9578:	89 01       	movw	r16, r18
    957a:	22 e0       	ldi	r18, 0x02	; 2
    957c:	45 e0       	ldi	r20, 0x05	; 5
    957e:	bc 01       	movw	r22, r24
    9580:	cd 01       	movw	r24, r26
    9582:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
			index += 5;
    9586:	8d 85       	ldd	r24, Y+13	; 0x0d
    9588:	9e 85       	ldd	r25, Y+14	; 0x0e
    958a:	05 96       	adiw	r24, 0x05	; 5
    958c:	9e 87       	std	Y+14, r25	; 0x0e
    958e:	8d 87       	std	Y+13, r24	; 0x0d
			index += sprintf(chBufferTx_USART0+index, "mA; I_CH2= ");
    9590:	8d 85       	ldd	r24, Y+13	; 0x0d
    9592:	9e 85       	ldd	r25, Y+14	; 0x0e
    9594:	8d 5a       	subi	r24, 0xAD	; 173
    9596:	9c 4f       	sbci	r25, 0xFC	; 252
    9598:	2c e0       	ldi	r18, 0x0C	; 12
    959a:	e0 eb       	ldi	r30, 0xB0	; 176
    959c:	f1 e0       	ldi	r31, 0x01	; 1
    959e:	dc 01       	movw	r26, r24
    95a0:	01 90       	ld	r0, Z+
    95a2:	0d 92       	st	X+, r0
    95a4:	2a 95       	dec	r18
    95a6:	e1 f7       	brne	.-8      	; 0x95a0 <Medicion_ADC+0x6dc>
    95a8:	8b e0       	ldi	r24, 0x0B	; 11
    95aa:	90 e0       	ldi	r25, 0x00	; 0
    95ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    95ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    95b0:	82 0f       	add	r24, r18
    95b2:	93 1f       	adc	r25, r19
    95b4:	9e 87       	std	Y+14, r25	; 0x0e
    95b6:	8d 87       	std	Y+13, r24	; 0x0d
			dtostrf(flPWM2valorMA, 5, 2, chBufferTx_USART0+index);
    95b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    95ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    95bc:	9c 01       	movw	r18, r24
    95be:	2d 5a       	subi	r18, 0xAD	; 173
    95c0:	3c 4f       	sbci	r19, 0xFC	; 252
    95c2:	80 91 17 06 	lds	r24, 0x0617
    95c6:	90 91 18 06 	lds	r25, 0x0618
    95ca:	a0 91 19 06 	lds	r26, 0x0619
    95ce:	b0 91 1a 06 	lds	r27, 0x061A
    95d2:	89 01       	movw	r16, r18
    95d4:	22 e0       	ldi	r18, 0x02	; 2
    95d6:	45 e0       	ldi	r20, 0x05	; 5
    95d8:	bc 01       	movw	r22, r24
    95da:	cd 01       	movw	r24, r26
    95dc:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
			index += 5;
    95e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    95e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    95e4:	05 96       	adiw	r24, 0x05	; 5
    95e6:	9e 87       	std	Y+14, r25	; 0x0e
    95e8:	8d 87       	std	Y+13, r24	; 0x0d
			index += sprintf(chBufferTx_USART0+index, "mA; COND_CH1= ");
    95ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    95ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    95ee:	8d 5a       	subi	r24, 0xAD	; 173
    95f0:	9c 4f       	sbci	r25, 0xFC	; 252
    95f2:	2f e0       	ldi	r18, 0x0F	; 15
    95f4:	ec eb       	ldi	r30, 0xBC	; 188
    95f6:	f1 e0       	ldi	r31, 0x01	; 1
    95f8:	dc 01       	movw	r26, r24
    95fa:	01 90       	ld	r0, Z+
    95fc:	0d 92       	st	X+, r0
    95fe:	2a 95       	dec	r18
    9600:	e1 f7       	brne	.-8      	; 0x95fa <Medicion_ADC+0x736>
    9602:	8e e0       	ldi	r24, 0x0E	; 14
    9604:	90 e0       	ldi	r25, 0x00	; 0
    9606:	2d 85       	ldd	r18, Y+13	; 0x0d
    9608:	3e 85       	ldd	r19, Y+14	; 0x0e
    960a:	82 0f       	add	r24, r18
    960c:	93 1f       	adc	r25, r19
    960e:	9e 87       	std	Y+14, r25	; 0x0e
    9610:	8d 87       	std	Y+13, r24	; 0x0d
			dtostrf(flCond1valoruS, 7, 2, chBufferTx_USART0+index);
    9612:	8d 85       	ldd	r24, Y+13	; 0x0d
    9614:	9e 85       	ldd	r25, Y+14	; 0x0e
    9616:	9c 01       	movw	r18, r24
    9618:	2d 5a       	subi	r18, 0xAD	; 173
    961a:	3c 4f       	sbci	r19, 0xFC	; 252
    961c:	80 91 11 05 	lds	r24, 0x0511
    9620:	90 91 12 05 	lds	r25, 0x0512
    9624:	a0 91 13 05 	lds	r26, 0x0513
    9628:	b0 91 14 05 	lds	r27, 0x0514
    962c:	89 01       	movw	r16, r18
    962e:	22 e0       	ldi	r18, 0x02	; 2
    9630:	47 e0       	ldi	r20, 0x07	; 7
    9632:	bc 01       	movw	r22, r24
    9634:	cd 01       	movw	r24, r26
    9636:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
			index += 7;
    963a:	8d 85       	ldd	r24, Y+13	; 0x0d
    963c:	9e 85       	ldd	r25, Y+14	; 0x0e
    963e:	07 96       	adiw	r24, 0x07	; 7
    9640:	9e 87       	std	Y+14, r25	; 0x0e
    9642:	8d 87       	std	Y+13, r24	; 0x0d
			index += sprintf(chBufferTx_USART0+index, "uS/cm; COND_CH2= ");
    9644:	8d 85       	ldd	r24, Y+13	; 0x0d
    9646:	9e 85       	ldd	r25, Y+14	; 0x0e
    9648:	8d 5a       	subi	r24, 0xAD	; 173
    964a:	9c 4f       	sbci	r25, 0xFC	; 252
    964c:	22 e1       	ldi	r18, 0x12	; 18
    964e:	eb ec       	ldi	r30, 0xCB	; 203
    9650:	f1 e0       	ldi	r31, 0x01	; 1
    9652:	dc 01       	movw	r26, r24
    9654:	01 90       	ld	r0, Z+
    9656:	0d 92       	st	X+, r0
    9658:	2a 95       	dec	r18
    965a:	e1 f7       	brne	.-8      	; 0x9654 <Medicion_ADC+0x790>
    965c:	81 e1       	ldi	r24, 0x11	; 17
    965e:	90 e0       	ldi	r25, 0x00	; 0
    9660:	2d 85       	ldd	r18, Y+13	; 0x0d
    9662:	3e 85       	ldd	r19, Y+14	; 0x0e
    9664:	82 0f       	add	r24, r18
    9666:	93 1f       	adc	r25, r19
    9668:	9e 87       	std	Y+14, r25	; 0x0e
    966a:	8d 87       	std	Y+13, r24	; 0x0d
			dtostrf(flCond2valoruS, 7, 2, chBufferTx_USART0+index);
    966c:	8d 85       	ldd	r24, Y+13	; 0x0d
    966e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9670:	9c 01       	movw	r18, r24
    9672:	2d 5a       	subi	r18, 0xAD	; 173
    9674:	3c 4f       	sbci	r19, 0xFC	; 252
    9676:	80 91 ed 04 	lds	r24, 0x04ED
    967a:	90 91 ee 04 	lds	r25, 0x04EE
    967e:	a0 91 ef 04 	lds	r26, 0x04EF
    9682:	b0 91 f0 04 	lds	r27, 0x04F0
    9686:	89 01       	movw	r16, r18
    9688:	22 e0       	ldi	r18, 0x02	; 2
    968a:	47 e0       	ldi	r20, 0x07	; 7
    968c:	bc 01       	movw	r22, r24
    968e:	cd 01       	movw	r24, r26
    9690:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
			index += 7;
    9694:	8d 85       	ldd	r24, Y+13	; 0x0d
    9696:	9e 85       	ldd	r25, Y+14	; 0x0e
    9698:	07 96       	adiw	r24, 0x07	; 7
    969a:	9e 87       	std	Y+14, r25	; 0x0e
    969c:	8d 87       	std	Y+13, r24	; 0x0d
			sprintf(chBufferTx_USART0+index, "uS/cm.");
    969e:	8d 85       	ldd	r24, Y+13	; 0x0d
    96a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    96a2:	8d 5a       	subi	r24, 0xAD	; 173
    96a4:	9c 4f       	sbci	r25, 0xFC	; 252
    96a6:	27 e0       	ldi	r18, 0x07	; 7
    96a8:	ed ed       	ldi	r30, 0xDD	; 221
    96aa:	f1 e0       	ldi	r31, 0x01	; 1
    96ac:	dc 01       	movw	r26, r24
    96ae:	01 90       	ld	r0, Z+
    96b0:	0d 92       	st	X+, r0
    96b2:	2a 95       	dec	r18
    96b4:	e1 f7       	brne	.-8      	; 0x96ae <Medicion_ADC+0x7ea>

			Transmitir_Buffer_USART0(chBufferTx_USART0, USART0_BUFFER_ZISE);
    96b6:	68 ec       	ldi	r22, 0xC8	; 200
    96b8:	70 e0       	ldi	r23, 0x00	; 0
    96ba:	83 e5       	ldi	r24, 0x53	; 83
    96bc:	93 e0       	ldi	r25, 0x03	; 3
    96be:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
		}
		uchEstadoADC = MEDICION_ADC0_PWM_420mA_2;
    96c2:	10 92 eb 04 	sts	0x04EB, r1
		break;
    96c6:	03 c0       	rjmp	.+6      	; 0x96ce <Medicion_ADC+0x80a>

		default:
			Inicio_ADC();
    96c8:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <Inicio_ADC>
			break;
    96cc:	00 00       	nop
	}
}
    96ce:	2e 96       	adiw	r28, 0x0e	; 14
    96d0:	0f b6       	in	r0, 0x3f	; 63
    96d2:	f8 94       	cli
    96d4:	de bf       	out	0x3e, r29	; 62
    96d6:	0f be       	out	0x3f, r0	; 63
    96d8:	cd bf       	out	0x3d, r28	; 61
    96da:	df 91       	pop	r29
    96dc:	cf 91       	pop	r28
    96de:	1f 91       	pop	r17
    96e0:	0f 91       	pop	r16
    96e2:	ff 90       	pop	r15
    96e4:	ef 90       	pop	r14
    96e6:	df 90       	pop	r13
    96e8:	cf 90       	pop	r12
    96ea:	08 95       	ret

000096ec <SW_Mux_ADC>:

/*****************************************************************************
* Funcion de inicio del ADC
*****************************************************************************/
void SW_Mux_ADC (char chCanal) {
    96ec:	cf 93       	push	r28
    96ee:	df 93       	push	r29
    96f0:	1f 92       	push	r1
    96f2:	cd b7       	in	r28, 0x3d	; 61
    96f4:	de b7       	in	r29, 0x3e	; 62
    96f6:	89 83       	std	Y+1, r24	; 0x01
	if (chCanal == ADC_0){
    96f8:	89 81       	ldd	r24, Y+1	; 0x01
    96fa:	88 23       	and	r24, r24
    96fc:	51 f4       	brne	.+20     	; 0x9712 <SW_Mux_ADC+0x26>
		ADMUX &= ~((SET<<MUX4)|(SET<<MUX3)|(SET<<MUX2)|(SET<<MUX1)|(SET<<MUX0));
    96fe:	87 e2       	ldi	r24, 0x27	; 39
    9700:	90 e0       	ldi	r25, 0x00	; 0
    9702:	27 e2       	ldi	r18, 0x27	; 39
    9704:	30 e0       	ldi	r19, 0x00	; 0
    9706:	f9 01       	movw	r30, r18
    9708:	20 81       	ld	r18, Z
    970a:	20 7e       	andi	r18, 0xE0	; 224
    970c:	fc 01       	movw	r30, r24
    970e:	20 83       	st	Z, r18
    9710:	99 c0       	rjmp	.+306    	; 0x9844 <SW_Mux_ADC+0x158>
//		ADMUX |= ((OFF<<MUX4)|(OFF<<MUX3)|(OFF<<MUX2)|(OFF<<MUX1)|(OFF<<MUX0));
	}
	else if (chCanal == ADC_1){
    9712:	89 81       	ldd	r24, Y+1	; 0x01
    9714:	81 30       	cpi	r24, 0x01	; 1
    9716:	99 f4       	brne	.+38     	; 0x973e <SW_Mux_ADC+0x52>
		ADMUX &= ~((SET<<MUX4)|(SET<<MUX3)|(SET<<MUX2)|(SET<<MUX1)|(SET<<MUX0));
    9718:	87 e2       	ldi	r24, 0x27	; 39
    971a:	90 e0       	ldi	r25, 0x00	; 0
    971c:	27 e2       	ldi	r18, 0x27	; 39
    971e:	30 e0       	ldi	r19, 0x00	; 0
    9720:	f9 01       	movw	r30, r18
    9722:	20 81       	ld	r18, Z
    9724:	20 7e       	andi	r18, 0xE0	; 224
    9726:	fc 01       	movw	r30, r24
    9728:	20 83       	st	Z, r18
		ADMUX |= ((OFF<<MUX4)|(OFF<<MUX3)|(OFF<<MUX2)|(OFF<<MUX1)|(SET<<MUX0));
    972a:	87 e2       	ldi	r24, 0x27	; 39
    972c:	90 e0       	ldi	r25, 0x00	; 0
    972e:	27 e2       	ldi	r18, 0x27	; 39
    9730:	30 e0       	ldi	r19, 0x00	; 0
    9732:	f9 01       	movw	r30, r18
    9734:	20 81       	ld	r18, Z
    9736:	21 60       	ori	r18, 0x01	; 1
    9738:	fc 01       	movw	r30, r24
    973a:	20 83       	st	Z, r18
    973c:	83 c0       	rjmp	.+262    	; 0x9844 <SW_Mux_ADC+0x158>
	}
	else if (chCanal == ADC_2){
    973e:	89 81       	ldd	r24, Y+1	; 0x01
    9740:	82 30       	cpi	r24, 0x02	; 2
    9742:	99 f4       	brne	.+38     	; 0x976a <SW_Mux_ADC+0x7e>
		ADMUX &= ~((SET<<MUX4)|(SET<<MUX3)|(SET<<MUX2)|(SET<<MUX1)|(SET<<MUX0));
    9744:	87 e2       	ldi	r24, 0x27	; 39
    9746:	90 e0       	ldi	r25, 0x00	; 0
    9748:	27 e2       	ldi	r18, 0x27	; 39
    974a:	30 e0       	ldi	r19, 0x00	; 0
    974c:	f9 01       	movw	r30, r18
    974e:	20 81       	ld	r18, Z
    9750:	20 7e       	andi	r18, 0xE0	; 224
    9752:	fc 01       	movw	r30, r24
    9754:	20 83       	st	Z, r18
		ADMUX |= ((OFF<<MUX4)|(OFF<<MUX3)|(OFF<<MUX2)|(SET<<MUX1)|(OFF<<MUX0));
    9756:	87 e2       	ldi	r24, 0x27	; 39
    9758:	90 e0       	ldi	r25, 0x00	; 0
    975a:	27 e2       	ldi	r18, 0x27	; 39
    975c:	30 e0       	ldi	r19, 0x00	; 0
    975e:	f9 01       	movw	r30, r18
    9760:	20 81       	ld	r18, Z
    9762:	22 60       	ori	r18, 0x02	; 2
    9764:	fc 01       	movw	r30, r24
    9766:	20 83       	st	Z, r18
    9768:	6d c0       	rjmp	.+218    	; 0x9844 <SW_Mux_ADC+0x158>
	}
	else if (chCanal == ADC_3){
    976a:	89 81       	ldd	r24, Y+1	; 0x01
    976c:	83 30       	cpi	r24, 0x03	; 3
    976e:	99 f4       	brne	.+38     	; 0x9796 <SW_Mux_ADC+0xaa>
		ADMUX &= ~((SET<<MUX4)|(SET<<MUX3)|(SET<<MUX2)|(SET<<MUX1)|(SET<<MUX0));
    9770:	87 e2       	ldi	r24, 0x27	; 39
    9772:	90 e0       	ldi	r25, 0x00	; 0
    9774:	27 e2       	ldi	r18, 0x27	; 39
    9776:	30 e0       	ldi	r19, 0x00	; 0
    9778:	f9 01       	movw	r30, r18
    977a:	20 81       	ld	r18, Z
    977c:	20 7e       	andi	r18, 0xE0	; 224
    977e:	fc 01       	movw	r30, r24
    9780:	20 83       	st	Z, r18
		ADMUX |= ((OFF<<MUX4)|(OFF<<MUX3)|(OFF<<MUX2)|(SET<<MUX1)|(SET<<MUX0));
    9782:	87 e2       	ldi	r24, 0x27	; 39
    9784:	90 e0       	ldi	r25, 0x00	; 0
    9786:	27 e2       	ldi	r18, 0x27	; 39
    9788:	30 e0       	ldi	r19, 0x00	; 0
    978a:	f9 01       	movw	r30, r18
    978c:	20 81       	ld	r18, Z
    978e:	23 60       	ori	r18, 0x03	; 3
    9790:	fc 01       	movw	r30, r24
    9792:	20 83       	st	Z, r18
    9794:	57 c0       	rjmp	.+174    	; 0x9844 <SW_Mux_ADC+0x158>
	}
	else if (chCanal == ADC_4){
    9796:	89 81       	ldd	r24, Y+1	; 0x01
    9798:	84 30       	cpi	r24, 0x04	; 4
    979a:	99 f4       	brne	.+38     	; 0x97c2 <SW_Mux_ADC+0xd6>
		ADMUX &= ~((SET<<MUX4)|(SET<<MUX3)|(SET<<MUX2)|(SET<<MUX1)|(SET<<MUX0));
    979c:	87 e2       	ldi	r24, 0x27	; 39
    979e:	90 e0       	ldi	r25, 0x00	; 0
    97a0:	27 e2       	ldi	r18, 0x27	; 39
    97a2:	30 e0       	ldi	r19, 0x00	; 0
    97a4:	f9 01       	movw	r30, r18
    97a6:	20 81       	ld	r18, Z
    97a8:	20 7e       	andi	r18, 0xE0	; 224
    97aa:	fc 01       	movw	r30, r24
    97ac:	20 83       	st	Z, r18
		ADMUX |= ((OFF<<MUX4)|(OFF<<MUX3)|(SET<<MUX2)|(OFF<<MUX1)|(OFF<<MUX0));
    97ae:	87 e2       	ldi	r24, 0x27	; 39
    97b0:	90 e0       	ldi	r25, 0x00	; 0
    97b2:	27 e2       	ldi	r18, 0x27	; 39
    97b4:	30 e0       	ldi	r19, 0x00	; 0
    97b6:	f9 01       	movw	r30, r18
    97b8:	20 81       	ld	r18, Z
    97ba:	24 60       	ori	r18, 0x04	; 4
    97bc:	fc 01       	movw	r30, r24
    97be:	20 83       	st	Z, r18
    97c0:	41 c0       	rjmp	.+130    	; 0x9844 <SW_Mux_ADC+0x158>
	}
	else if (chCanal == ADC_5){
    97c2:	89 81       	ldd	r24, Y+1	; 0x01
    97c4:	85 30       	cpi	r24, 0x05	; 5
    97c6:	99 f4       	brne	.+38     	; 0x97ee <SW_Mux_ADC+0x102>
		ADMUX &= ~((SET<<MUX4)|(SET<<MUX3)|(SET<<MUX2)|(SET<<MUX1)|(SET<<MUX0));
    97c8:	87 e2       	ldi	r24, 0x27	; 39
    97ca:	90 e0       	ldi	r25, 0x00	; 0
    97cc:	27 e2       	ldi	r18, 0x27	; 39
    97ce:	30 e0       	ldi	r19, 0x00	; 0
    97d0:	f9 01       	movw	r30, r18
    97d2:	20 81       	ld	r18, Z
    97d4:	20 7e       	andi	r18, 0xE0	; 224
    97d6:	fc 01       	movw	r30, r24
    97d8:	20 83       	st	Z, r18
		ADMUX |= ((OFF<<MUX4)|(OFF<<MUX3)|(SET<<MUX2)|(OFF<<MUX1)|(SET<<MUX0));
    97da:	87 e2       	ldi	r24, 0x27	; 39
    97dc:	90 e0       	ldi	r25, 0x00	; 0
    97de:	27 e2       	ldi	r18, 0x27	; 39
    97e0:	30 e0       	ldi	r19, 0x00	; 0
    97e2:	f9 01       	movw	r30, r18
    97e4:	20 81       	ld	r18, Z
    97e6:	25 60       	ori	r18, 0x05	; 5
    97e8:	fc 01       	movw	r30, r24
    97ea:	20 83       	st	Z, r18
    97ec:	2b c0       	rjmp	.+86     	; 0x9844 <SW_Mux_ADC+0x158>
	}
	else if (chCanal == ADC_6){
    97ee:	89 81       	ldd	r24, Y+1	; 0x01
    97f0:	86 30       	cpi	r24, 0x06	; 6
    97f2:	99 f4       	brne	.+38     	; 0x981a <SW_Mux_ADC+0x12e>
		ADMUX &= ~((SET<<MUX4)|(SET<<MUX3)|(SET<<MUX2)|(SET<<MUX1)|(SET<<MUX0));
    97f4:	87 e2       	ldi	r24, 0x27	; 39
    97f6:	90 e0       	ldi	r25, 0x00	; 0
    97f8:	27 e2       	ldi	r18, 0x27	; 39
    97fa:	30 e0       	ldi	r19, 0x00	; 0
    97fc:	f9 01       	movw	r30, r18
    97fe:	20 81       	ld	r18, Z
    9800:	20 7e       	andi	r18, 0xE0	; 224
    9802:	fc 01       	movw	r30, r24
    9804:	20 83       	st	Z, r18
		ADMUX |= ((OFF<<MUX4)|(OFF<<MUX3)|(SET<<MUX2)|(SET<<MUX1)|(OFF<<MUX0));
    9806:	87 e2       	ldi	r24, 0x27	; 39
    9808:	90 e0       	ldi	r25, 0x00	; 0
    980a:	27 e2       	ldi	r18, 0x27	; 39
    980c:	30 e0       	ldi	r19, 0x00	; 0
    980e:	f9 01       	movw	r30, r18
    9810:	20 81       	ld	r18, Z
    9812:	26 60       	ori	r18, 0x06	; 6
    9814:	fc 01       	movw	r30, r24
    9816:	20 83       	st	Z, r18
    9818:	15 c0       	rjmp	.+42     	; 0x9844 <SW_Mux_ADC+0x158>
	}
	else if (chCanal == ADC_7){
    981a:	89 81       	ldd	r24, Y+1	; 0x01
    981c:	87 30       	cpi	r24, 0x07	; 7
    981e:	91 f4       	brne	.+36     	; 0x9844 <SW_Mux_ADC+0x158>
		ADMUX &= ~((SET<<MUX4)|(SET<<MUX3)|(SET<<MUX2)|(SET<<MUX1)|(SET<<MUX0));
    9820:	87 e2       	ldi	r24, 0x27	; 39
    9822:	90 e0       	ldi	r25, 0x00	; 0
    9824:	27 e2       	ldi	r18, 0x27	; 39
    9826:	30 e0       	ldi	r19, 0x00	; 0
    9828:	f9 01       	movw	r30, r18
    982a:	20 81       	ld	r18, Z
    982c:	20 7e       	andi	r18, 0xE0	; 224
    982e:	fc 01       	movw	r30, r24
    9830:	20 83       	st	Z, r18
		ADMUX |= ((OFF<<MUX4)|(OFF<<MUX3)|(SET<<MUX2)|(SET<<MUX1)|(SET<<MUX0));
    9832:	87 e2       	ldi	r24, 0x27	; 39
    9834:	90 e0       	ldi	r25, 0x00	; 0
    9836:	27 e2       	ldi	r18, 0x27	; 39
    9838:	30 e0       	ldi	r19, 0x00	; 0
    983a:	f9 01       	movw	r30, r18
    983c:	20 81       	ld	r18, Z
    983e:	27 60       	ori	r18, 0x07	; 7
    9840:	fc 01       	movw	r30, r24
    9842:	20 83       	st	Z, r18
	}
}
    9844:	0f 90       	pop	r0
    9846:	df 91       	pop	r29
    9848:	cf 91       	pop	r28
    984a:	08 95       	ret

0000984c <SW_Ref_ADC>:

/*****************************************************************************
* Funcion de cambio de referencia del ADC
*****************************************************************************/
void SW_Ref_ADC (char chRef) {
    984c:	cf 93       	push	r28
    984e:	df 93       	push	r29
    9850:	1f 92       	push	r1
    9852:	cd b7       	in	r28, 0x3d	; 61
    9854:	de b7       	in	r29, 0x3e	; 62
    9856:	89 83       	std	Y+1, r24	; 0x01
	if (chRef == ADC_REF_AVCC){
    9858:	89 81       	ldd	r24, Y+1	; 0x01
    985a:	88 23       	and	r24, r24
    985c:	99 f4       	brne	.+38     	; 0x9884 <SW_Ref_ADC+0x38>
		CLEAR_BIT(ADMUX, REFS1);
    985e:	87 e2       	ldi	r24, 0x27	; 39
    9860:	90 e0       	ldi	r25, 0x00	; 0
    9862:	27 e2       	ldi	r18, 0x27	; 39
    9864:	30 e0       	ldi	r19, 0x00	; 0
    9866:	f9 01       	movw	r30, r18
    9868:	20 81       	ld	r18, Z
    986a:	2f 77       	andi	r18, 0x7F	; 127
    986c:	fc 01       	movw	r30, r24
    986e:	20 83       	st	Z, r18
		SET_BIT(ADMUX, REFS0);
    9870:	87 e2       	ldi	r24, 0x27	; 39
    9872:	90 e0       	ldi	r25, 0x00	; 0
    9874:	27 e2       	ldi	r18, 0x27	; 39
    9876:	30 e0       	ldi	r19, 0x00	; 0
    9878:	f9 01       	movw	r30, r18
    987a:	20 81       	ld	r18, Z
    987c:	20 64       	ori	r18, 0x40	; 64
    987e:	fc 01       	movw	r30, r24
    9880:	20 83       	st	Z, r18
    9882:	28 c0       	rjmp	.+80     	; 0x98d4 <SW_Ref_ADC+0x88>
	}
	else if (chRef == ADC_REF_INTERNAL){
    9884:	89 81       	ldd	r24, Y+1	; 0x01
    9886:	81 30       	cpi	r24, 0x01	; 1
    9888:	99 f4       	brne	.+38     	; 0x98b0 <SW_Ref_ADC+0x64>
		SET_BIT(ADMUX, REFS1);
    988a:	87 e2       	ldi	r24, 0x27	; 39
    988c:	90 e0       	ldi	r25, 0x00	; 0
    988e:	27 e2       	ldi	r18, 0x27	; 39
    9890:	30 e0       	ldi	r19, 0x00	; 0
    9892:	f9 01       	movw	r30, r18
    9894:	20 81       	ld	r18, Z
    9896:	20 68       	ori	r18, 0x80	; 128
    9898:	fc 01       	movw	r30, r24
    989a:	20 83       	st	Z, r18
		SET_BIT(ADMUX, REFS0);
    989c:	87 e2       	ldi	r24, 0x27	; 39
    989e:	90 e0       	ldi	r25, 0x00	; 0
    98a0:	27 e2       	ldi	r18, 0x27	; 39
    98a2:	30 e0       	ldi	r19, 0x00	; 0
    98a4:	f9 01       	movw	r30, r18
    98a6:	20 81       	ld	r18, Z
    98a8:	20 64       	ori	r18, 0x40	; 64
    98aa:	fc 01       	movw	r30, r24
    98ac:	20 83       	st	Z, r18
    98ae:	12 c0       	rjmp	.+36     	; 0x98d4 <SW_Ref_ADC+0x88>
	}
	else {
		CLEAR_BIT(ADMUX, REFS1);
    98b0:	87 e2       	ldi	r24, 0x27	; 39
    98b2:	90 e0       	ldi	r25, 0x00	; 0
    98b4:	27 e2       	ldi	r18, 0x27	; 39
    98b6:	30 e0       	ldi	r19, 0x00	; 0
    98b8:	f9 01       	movw	r30, r18
    98ba:	20 81       	ld	r18, Z
    98bc:	2f 77       	andi	r18, 0x7F	; 127
    98be:	fc 01       	movw	r30, r24
    98c0:	20 83       	st	Z, r18
		CLEAR_BIT(ADMUX, REFS0);
    98c2:	87 e2       	ldi	r24, 0x27	; 39
    98c4:	90 e0       	ldi	r25, 0x00	; 0
    98c6:	27 e2       	ldi	r18, 0x27	; 39
    98c8:	30 e0       	ldi	r19, 0x00	; 0
    98ca:	f9 01       	movw	r30, r18
    98cc:	20 81       	ld	r18, Z
    98ce:	2f 7b       	andi	r18, 0xBF	; 191
    98d0:	fc 01       	movw	r30, r24
    98d2:	20 83       	st	Z, r18
	}
}
    98d4:	0f 90       	pop	r0
    98d6:	df 91       	pop	r29
    98d8:	cf 91       	pop	r28
    98da:	08 95       	ret

000098dc <Inicio_ADC>:

/*****************************************************************************
* Funcion de inicio del ADC
*****************************************************************************/
void Inicio_ADC (void) {
    98dc:	cf 93       	push	r28
    98de:	df 93       	push	r29
    98e0:	cd b7       	in	r28, 0x3d	; 61
    98e2:	de b7       	in	r29, 0x3e	; 62
	// inicio el ADC en modo de conversión simple, con el preescaler en 128 y sin interrupción y referencia 2.56v interna.
	ADMUX = (OFF<<REFS1)|(SET<<REFS0)|(OFF<<ADLAR);							// externa AVCC
    98e4:	87 e2       	ldi	r24, 0x27	; 39
    98e6:	90 e0       	ldi	r25, 0x00	; 0
    98e8:	20 e4       	ldi	r18, 0x40	; 64
    98ea:	fc 01       	movw	r30, r24
    98ec:	20 83       	st	Z, r18
	SW_Mux_ADC(ADC_0);														// cambio el mux
    98ee:	80 e0       	ldi	r24, 0x00	; 0
    98f0:	0e 94 76 4b 	call	0x96ec	; 0x96ec <SW_Mux_ADC>
	ADCSRA = (ON<<ADEN)|(ON<<ADSC)|(OFF<<ADFR)|(SET<<ADIF)|(OFF<<ADIE)|(SET<<ADPS2)|(SET<<ADPS1)|(SET<<ADPS0);
    98f4:	86 e2       	ldi	r24, 0x26	; 38
    98f6:	90 e0       	ldi	r25, 0x00	; 0
    98f8:	27 ed       	ldi	r18, 0xD7	; 215
    98fa:	fc 01       	movw	r30, r24
    98fc:	20 83       	st	Z, r18

	flPWM1valorMA = 0;
    98fe:	10 92 13 06 	sts	0x0613, r1
    9902:	10 92 14 06 	sts	0x0614, r1
    9906:	10 92 15 06 	sts	0x0615, r1
    990a:	10 92 16 06 	sts	0x0616, r1
	flPWM2valorMA = 0;
    990e:	10 92 17 06 	sts	0x0617, r1
    9912:	10 92 18 06 	sts	0x0618, r1
    9916:	10 92 19 06 	sts	0x0619, r1
    991a:	10 92 1a 06 	sts	0x061A, r1
	flCond1valoruS = 0;
    991e:	10 92 11 05 	sts	0x0511, r1
    9922:	10 92 12 05 	sts	0x0512, r1
    9926:	10 92 13 05 	sts	0x0513, r1
    992a:	10 92 14 05 	sts	0x0514, r1
	flCond2valoruS = 0;
    992e:	10 92 ed 04 	sts	0x04ED, r1
    9932:	10 92 ee 04 	sts	0x04EE, r1
    9936:	10 92 ef 04 	sts	0x04EF, r1
    993a:	10 92 f0 04 	sts	0x04F0, r1

	uContMuestrasADC = 0;
    993e:	10 92 f2 04 	sts	0x04F2, r1
    9942:	10 92 f1 04 	sts	0x04F1, r1
	chADCprint = NO;
    9946:	10 92 ec 04 	sts	0x04EC, r1

	chValorNuevoPWM1=NO;
    994a:	10 92 1a 05 	sts	0x051A, r1
	chValorNuevoPWM2=NO;
    994e:	10 92 fc 04 	sts	0x04FC, r1
	chValorNuevoCond1=NO;
    9952:	10 92 f5 04 	sts	0x04F5, r1
	chValorNuevoCond2=NO;
    9956:	10 92 17 05 	sts	0x0517, r1

	uchEstadoADC = MEDICION_ADC0_PWM_420mA_2;
    995a:	10 92 eb 04 	sts	0x04EB, r1
}
    995e:	df 91       	pop	r29
    9960:	cf 91       	pop	r28
    9962:	08 95       	ret

00009964 <Cargar_Valores_Rango_Por_Canal>:

/*****************************************************************************
* Funcion de carga de los valores de correccion de linealidad
*****************************************************************************/
void Cargar_Valores_Rango_Por_Canal (void){
    9964:	cf 93       	push	r28
    9966:	df 93       	push	r29
    9968:	cd b7       	in	r28, 0x3d	; 61
    996a:	de b7       	in	r29, 0x3e	; 62
    996c:	c0 56       	subi	r28, 0x60	; 96
    996e:	d1 09       	sbc	r29, r1
    9970:	0f b6       	in	r0, 0x3f	; 63
    9972:	f8 94       	cli
    9974:	de bf       	out	0x3e, r29	; 62
    9976:	0f be       	out	0x3f, r0	; 63
    9978:	cd bf       	out	0x3d, r28	; 61
	// cargo los valores para la correccion de linealidad segun el rango para cada cond 1
	if (uRangoCond1 == COND_20_2500_G){
    997a:	80 91 e9 04 	lds	r24, 0x04E9
    997e:	90 91 ea 04 	lds	r25, 0x04EA
    9982:	01 97       	sbiw	r24, 0x01	; 1
    9984:	09 f0       	breq	.+2      	; 0x9988 <Cargar_Valores_Rango_Por_Canal+0x24>
    9986:	43 c0       	rjmp	.+134    	; 0x9a0e <Cargar_Valores_Rango_Por_Canal+0xaa>
		cond1MaxUs = COND202500G_MAX_US;
    9988:	84 ec       	ldi	r24, 0xC4	; 196
    998a:	99 e0       	ldi	r25, 0x09	; 9
    998c:	90 93 e8 04 	sts	0x04E8, r25
    9990:	80 93 e7 04 	sts	0x04E7, r24
		cond1MinUs = COND202500G_MIN_US;
    9994:	84 e1       	ldi	r24, 0x14	; 20
    9996:	90 e0       	ldi	r25, 0x00	; 0
    9998:	90 93 00 05 	sts	0x0500, r25
    999c:	80 93 ff 04 	sts	0x04FF, r24
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    99a0:	1a 82       	std	Y+2, r1	; 0x02
    99a2:	19 82       	std	Y+1, r1	; 0x01
    99a4:	2f c0       	rjmp	.+94     	; 0x9a04 <Cargar_Valores_Rango_Por_Canal+0xa0>
			flCond1Factor[i] = pgm_read_float(&Cond_20_2500_G_Factor[i]);
    99a6:	89 81       	ldd	r24, Y+1	; 0x01
    99a8:	9a 81       	ldd	r25, Y+2	; 0x02
    99aa:	88 0f       	add	r24, r24
    99ac:	99 1f       	adc	r25, r25
    99ae:	88 0f       	add	r24, r24
    99b0:	99 1f       	adc	r25, r25
    99b2:	8e 5c       	subi	r24, 0xCE	; 206
    99b4:	9c 4f       	sbci	r25, 0xFC	; 252
    99b6:	9a 8f       	std	Y+26, r25	; 0x1a
    99b8:	89 8f       	std	Y+25, r24	; 0x19
    99ba:	89 8d       	ldd	r24, Y+25	; 0x19
    99bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    99be:	9c 01       	movw	r18, r24
    99c0:	f9 01       	movw	r30, r18
    99c2:	85 91       	lpm	r24, Z+
    99c4:	95 91       	lpm	r25, Z+
    99c6:	a5 91       	lpm	r26, Z+
    99c8:	b4 91       	lpm	r27, Z
    99ca:	9f 01       	movw	r18, r30
    99cc:	8b 8f       	std	Y+27, r24	; 0x1b
    99ce:	9c 8f       	std	Y+28, r25	; 0x1c
    99d0:	ad 8f       	std	Y+29, r26	; 0x1d
    99d2:	be 8f       	std	Y+30, r27	; 0x1e
    99d4:	3a 8f       	std	Y+26, r19	; 0x1a
    99d6:	29 8f       	std	Y+25, r18	; 0x19
    99d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    99da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    99dc:	ad 8d       	ldd	r26, Y+29	; 0x1d
    99de:	be 8d       	ldd	r27, Y+30	; 0x1e
    99e0:	29 81       	ldd	r18, Y+1	; 0x01
    99e2:	3a 81       	ldd	r19, Y+2	; 0x02
    99e4:	22 0f       	add	r18, r18
    99e6:	33 1f       	adc	r19, r19
    99e8:	22 0f       	add	r18, r18
    99ea:	33 1f       	adc	r19, r19
    99ec:	25 5e       	subi	r18, 0xE5	; 229
    99ee:	3a 4f       	sbci	r19, 0xFA	; 250
    99f0:	f9 01       	movw	r30, r18
    99f2:	80 83       	st	Z, r24
    99f4:	91 83       	std	Z+1, r25	; 0x01
    99f6:	a2 83       	std	Z+2, r26	; 0x02
    99f8:	b3 83       	std	Z+3, r27	; 0x03
void Cargar_Valores_Rango_Por_Canal (void){
	// cargo los valores para la correccion de linealidad segun el rango para cada cond 1
	if (uRangoCond1 == COND_20_2500_G){
		cond1MaxUs = COND202500G_MAX_US;
		cond1MinUs = COND202500G_MIN_US;
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    99fa:	89 81       	ldd	r24, Y+1	; 0x01
    99fc:	9a 81       	ldd	r25, Y+2	; 0x02
    99fe:	01 96       	adiw	r24, 0x01	; 1
    9a00:	9a 83       	std	Y+2, r25	; 0x02
    9a02:	89 83       	std	Y+1, r24	; 0x01
    9a04:	89 81       	ldd	r24, Y+1	; 0x01
    9a06:	9a 81       	ldd	r25, Y+2	; 0x02
    9a08:	4e 97       	sbiw	r24, 0x1e	; 30
    9a0a:	6c f2       	brlt	.-102    	; 0x99a6 <Cargar_Valores_Rango_Por_Canal+0x42>
    9a0c:	6d c1       	rjmp	.+730    	; 0x9ce8 <Cargar_Valores_Rango_Por_Canal+0x384>
			flCond1Factor[i] = pgm_read_float(&Cond_20_2500_G_Factor[i]);
		}
	}
	else if (uRangoCond1 == COND_0_20_G){
    9a0e:	80 91 e9 04 	lds	r24, 0x04E9
    9a12:	90 91 ea 04 	lds	r25, 0x04EA
    9a16:	02 97       	sbiw	r24, 0x02	; 2
    9a18:	09 f0       	breq	.+2      	; 0x9a1c <Cargar_Valores_Rango_Por_Canal+0xb8>
    9a1a:	41 c0       	rjmp	.+130    	; 0x9a9e <Cargar_Valores_Rango_Por_Canal+0x13a>
		cond1MaxUs = COND020G_MAX_US;
    9a1c:	84 e1       	ldi	r24, 0x14	; 20
    9a1e:	90 e0       	ldi	r25, 0x00	; 0
    9a20:	90 93 e8 04 	sts	0x04E8, r25
    9a24:	80 93 e7 04 	sts	0x04E7, r24
		cond1MinUs = COND020G_MIN_US;
    9a28:	10 92 00 05 	sts	0x0500, r1
    9a2c:	10 92 ff 04 	sts	0x04FF, r1
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9a30:	1c 82       	std	Y+4, r1	; 0x04
    9a32:	1b 82       	std	Y+3, r1	; 0x03
    9a34:	2f c0       	rjmp	.+94     	; 0x9a94 <Cargar_Valores_Rango_Por_Canal+0x130>
			flCond1Factor[i] = pgm_read_float(&Cond_0_20_G_Factor[i]);
    9a36:	8b 81       	ldd	r24, Y+3	; 0x03
    9a38:	9c 81       	ldd	r25, Y+4	; 0x04
    9a3a:	88 0f       	add	r24, r24
    9a3c:	99 1f       	adc	r25, r25
    9a3e:	88 0f       	add	r24, r24
    9a40:	99 1f       	adc	r25, r25
    9a42:	8e 5b       	subi	r24, 0xBE	; 190
    9a44:	9d 4f       	sbci	r25, 0xFD	; 253
    9a46:	98 a3       	std	Y+32, r25	; 0x20
    9a48:	8f 8f       	std	Y+31, r24	; 0x1f
    9a4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9a4c:	98 a1       	ldd	r25, Y+32	; 0x20
    9a4e:	9c 01       	movw	r18, r24
    9a50:	f9 01       	movw	r30, r18
    9a52:	85 91       	lpm	r24, Z+
    9a54:	95 91       	lpm	r25, Z+
    9a56:	a5 91       	lpm	r26, Z+
    9a58:	b4 91       	lpm	r27, Z
    9a5a:	9f 01       	movw	r18, r30
    9a5c:	89 a3       	std	Y+33, r24	; 0x21
    9a5e:	9a a3       	std	Y+34, r25	; 0x22
    9a60:	ab a3       	std	Y+35, r26	; 0x23
    9a62:	bc a3       	std	Y+36, r27	; 0x24
    9a64:	38 a3       	std	Y+32, r19	; 0x20
    9a66:	2f 8f       	std	Y+31, r18	; 0x1f
    9a68:	89 a1       	ldd	r24, Y+33	; 0x21
    9a6a:	9a a1       	ldd	r25, Y+34	; 0x22
    9a6c:	ab a1       	ldd	r26, Y+35	; 0x23
    9a6e:	bc a1       	ldd	r27, Y+36	; 0x24
    9a70:	2b 81       	ldd	r18, Y+3	; 0x03
    9a72:	3c 81       	ldd	r19, Y+4	; 0x04
    9a74:	22 0f       	add	r18, r18
    9a76:	33 1f       	adc	r19, r19
    9a78:	22 0f       	add	r18, r18
    9a7a:	33 1f       	adc	r19, r19
    9a7c:	25 5e       	subi	r18, 0xE5	; 229
    9a7e:	3a 4f       	sbci	r19, 0xFA	; 250
    9a80:	f9 01       	movw	r30, r18
    9a82:	80 83       	st	Z, r24
    9a84:	91 83       	std	Z+1, r25	; 0x01
    9a86:	a2 83       	std	Z+2, r26	; 0x02
    9a88:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
	else if (uRangoCond1 == COND_0_20_G){
		cond1MaxUs = COND020G_MAX_US;
		cond1MinUs = COND020G_MIN_US;
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    9a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    9a8e:	01 96       	adiw	r24, 0x01	; 1
    9a90:	9c 83       	std	Y+4, r25	; 0x04
    9a92:	8b 83       	std	Y+3, r24	; 0x03
    9a94:	8b 81       	ldd	r24, Y+3	; 0x03
    9a96:	9c 81       	ldd	r25, Y+4	; 0x04
    9a98:	4e 97       	sbiw	r24, 0x1e	; 30
    9a9a:	6c f2       	brlt	.-102    	; 0x9a36 <Cargar_Valores_Rango_Por_Canal+0xd2>
    9a9c:	25 c1       	rjmp	.+586    	; 0x9ce8 <Cargar_Valores_Rango_Por_Canal+0x384>
			flCond1Factor[i] = pgm_read_float(&Cond_0_20_G_Factor[i]);
		}
	}
	else if (uRangoCond1 == COND_2_200_G){
    9a9e:	80 91 e9 04 	lds	r24, 0x04E9
    9aa2:	90 91 ea 04 	lds	r25, 0x04EA
    9aa6:	03 97       	sbiw	r24, 0x03	; 3
    9aa8:	09 f0       	breq	.+2      	; 0x9aac <Cargar_Valores_Rango_Por_Canal+0x148>
    9aaa:	43 c0       	rjmp	.+134    	; 0x9b32 <Cargar_Valores_Rango_Por_Canal+0x1ce>
		cond1MaxUs = COND2200G_MAX_US;
    9aac:	88 ec       	ldi	r24, 0xC8	; 200
    9aae:	90 e0       	ldi	r25, 0x00	; 0
    9ab0:	90 93 e8 04 	sts	0x04E8, r25
    9ab4:	80 93 e7 04 	sts	0x04E7, r24
		cond1MinUs = COND2200G_MIN_US;
    9ab8:	82 e0       	ldi	r24, 0x02	; 2
    9aba:	90 e0       	ldi	r25, 0x00	; 0
    9abc:	90 93 00 05 	sts	0x0500, r25
    9ac0:	80 93 ff 04 	sts	0x04FF, r24
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9ac4:	1e 82       	std	Y+6, r1	; 0x06
    9ac6:	1d 82       	std	Y+5, r1	; 0x05
    9ac8:	2f c0       	rjmp	.+94     	; 0x9b28 <Cargar_Valores_Rango_Por_Canal+0x1c4>
			flCond1Factor[i] = pgm_read_float(&Cond_2_200_G_Factor[i]);
    9aca:	8d 81       	ldd	r24, Y+5	; 0x05
    9acc:	9e 81       	ldd	r25, Y+6	; 0x06
    9ace:	88 0f       	add	r24, r24
    9ad0:	99 1f       	adc	r25, r25
    9ad2:	88 0f       	add	r24, r24
    9ad4:	99 1f       	adc	r25, r25
    9ad6:	86 54       	subi	r24, 0x46	; 70
    9ad8:	9d 4f       	sbci	r25, 0xFD	; 253
    9ada:	9e a3       	std	Y+38, r25	; 0x26
    9adc:	8d a3       	std	Y+37, r24	; 0x25
    9ade:	8d a1       	ldd	r24, Y+37	; 0x25
    9ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    9ae2:	9c 01       	movw	r18, r24
    9ae4:	f9 01       	movw	r30, r18
    9ae6:	85 91       	lpm	r24, Z+
    9ae8:	95 91       	lpm	r25, Z+
    9aea:	a5 91       	lpm	r26, Z+
    9aec:	b4 91       	lpm	r27, Z
    9aee:	9f 01       	movw	r18, r30
    9af0:	8f a3       	std	Y+39, r24	; 0x27
    9af2:	98 a7       	std	Y+40, r25	; 0x28
    9af4:	a9 a7       	std	Y+41, r26	; 0x29
    9af6:	ba a7       	std	Y+42, r27	; 0x2a
    9af8:	3e a3       	std	Y+38, r19	; 0x26
    9afa:	2d a3       	std	Y+37, r18	; 0x25
    9afc:	8f a1       	ldd	r24, Y+39	; 0x27
    9afe:	98 a5       	ldd	r25, Y+40	; 0x28
    9b00:	a9 a5       	ldd	r26, Y+41	; 0x29
    9b02:	ba a5       	ldd	r27, Y+42	; 0x2a
    9b04:	2d 81       	ldd	r18, Y+5	; 0x05
    9b06:	3e 81       	ldd	r19, Y+6	; 0x06
    9b08:	22 0f       	add	r18, r18
    9b0a:	33 1f       	adc	r19, r19
    9b0c:	22 0f       	add	r18, r18
    9b0e:	33 1f       	adc	r19, r19
    9b10:	25 5e       	subi	r18, 0xE5	; 229
    9b12:	3a 4f       	sbci	r19, 0xFA	; 250
    9b14:	f9 01       	movw	r30, r18
    9b16:	80 83       	st	Z, r24
    9b18:	91 83       	std	Z+1, r25	; 0x01
    9b1a:	a2 83       	std	Z+2, r26	; 0x02
    9b1c:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
	else if (uRangoCond1 == COND_2_200_G){
		cond1MaxUs = COND2200G_MAX_US;
		cond1MinUs = COND2200G_MIN_US;
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    9b20:	9e 81       	ldd	r25, Y+6	; 0x06
    9b22:	01 96       	adiw	r24, 0x01	; 1
    9b24:	9e 83       	std	Y+6, r25	; 0x06
    9b26:	8d 83       	std	Y+5, r24	; 0x05
    9b28:	8d 81       	ldd	r24, Y+5	; 0x05
    9b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    9b2c:	4e 97       	sbiw	r24, 0x1e	; 30
    9b2e:	6c f2       	brlt	.-102    	; 0x9aca <Cargar_Valores_Rango_Por_Canal+0x166>
    9b30:	db c0       	rjmp	.+438    	; 0x9ce8 <Cargar_Valores_Rango_Por_Canal+0x384>
			flCond1Factor[i] = pgm_read_float(&Cond_2_200_G_Factor[i]);
		}
	}
	else if (uRangoCond1 == COND_20_2500_C){
    9b32:	80 91 e9 04 	lds	r24, 0x04E9
    9b36:	90 91 ea 04 	lds	r25, 0x04EA
    9b3a:	04 97       	sbiw	r24, 0x04	; 4
    9b3c:	09 f0       	breq	.+2      	; 0x9b40 <Cargar_Valores_Rango_Por_Canal+0x1dc>
    9b3e:	43 c0       	rjmp	.+134    	; 0x9bc6 <Cargar_Valores_Rango_Por_Canal+0x262>
		cond1MaxUs = COND202500C_MAX_US;
    9b40:	84 ec       	ldi	r24, 0xC4	; 196
    9b42:	99 e0       	ldi	r25, 0x09	; 9
    9b44:	90 93 e8 04 	sts	0x04E8, r25
    9b48:	80 93 e7 04 	sts	0x04E7, r24
		cond1MinUs = COND202500C_MIN_US;
    9b4c:	84 e1       	ldi	r24, 0x14	; 20
    9b4e:	90 e0       	ldi	r25, 0x00	; 0
    9b50:	90 93 00 05 	sts	0x0500, r25
    9b54:	80 93 ff 04 	sts	0x04FF, r24
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9b58:	18 86       	std	Y+8, r1	; 0x08
    9b5a:	1f 82       	std	Y+7, r1	; 0x07
    9b5c:	2f c0       	rjmp	.+94     	; 0x9bbc <Cargar_Valores_Rango_Por_Canal+0x258>
			flCond1Factor[i] = pgm_read_float(&Cond_20_2500_C_Factor[i]);
    9b5e:	8f 81       	ldd	r24, Y+7	; 0x07
    9b60:	98 85       	ldd	r25, Y+8	; 0x08
    9b62:	88 0f       	add	r24, r24
    9b64:	99 1f       	adc	r25, r25
    9b66:	88 0f       	add	r24, r24
    9b68:	99 1f       	adc	r25, r25
    9b6a:	86 56       	subi	r24, 0x66	; 102
    9b6c:	9b 4f       	sbci	r25, 0xFB	; 251
    9b6e:	9c a7       	std	Y+44, r25	; 0x2c
    9b70:	8b a7       	std	Y+43, r24	; 0x2b
    9b72:	8b a5       	ldd	r24, Y+43	; 0x2b
    9b74:	9c a5       	ldd	r25, Y+44	; 0x2c
    9b76:	9c 01       	movw	r18, r24
    9b78:	f9 01       	movw	r30, r18
    9b7a:	85 91       	lpm	r24, Z+
    9b7c:	95 91       	lpm	r25, Z+
    9b7e:	a5 91       	lpm	r26, Z+
    9b80:	b4 91       	lpm	r27, Z
    9b82:	9f 01       	movw	r18, r30
    9b84:	8d a7       	std	Y+45, r24	; 0x2d
    9b86:	9e a7       	std	Y+46, r25	; 0x2e
    9b88:	af a7       	std	Y+47, r26	; 0x2f
    9b8a:	b8 ab       	std	Y+48, r27	; 0x30
    9b8c:	3c a7       	std	Y+44, r19	; 0x2c
    9b8e:	2b a7       	std	Y+43, r18	; 0x2b
    9b90:	8d a5       	ldd	r24, Y+45	; 0x2d
    9b92:	9e a5       	ldd	r25, Y+46	; 0x2e
    9b94:	af a5       	ldd	r26, Y+47	; 0x2f
    9b96:	b8 a9       	ldd	r27, Y+48	; 0x30
    9b98:	2f 81       	ldd	r18, Y+7	; 0x07
    9b9a:	38 85       	ldd	r19, Y+8	; 0x08
    9b9c:	22 0f       	add	r18, r18
    9b9e:	33 1f       	adc	r19, r19
    9ba0:	22 0f       	add	r18, r18
    9ba2:	33 1f       	adc	r19, r19
    9ba4:	25 5e       	subi	r18, 0xE5	; 229
    9ba6:	3a 4f       	sbci	r19, 0xFA	; 250
    9ba8:	f9 01       	movw	r30, r18
    9baa:	80 83       	st	Z, r24
    9bac:	91 83       	std	Z+1, r25	; 0x01
    9bae:	a2 83       	std	Z+2, r26	; 0x02
    9bb0:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
	else if (uRangoCond1 == COND_20_2500_C){
		cond1MaxUs = COND202500C_MAX_US;
		cond1MinUs = COND202500C_MIN_US;
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9bb2:	8f 81       	ldd	r24, Y+7	; 0x07
    9bb4:	98 85       	ldd	r25, Y+8	; 0x08
    9bb6:	01 96       	adiw	r24, 0x01	; 1
    9bb8:	98 87       	std	Y+8, r25	; 0x08
    9bba:	8f 83       	std	Y+7, r24	; 0x07
    9bbc:	8f 81       	ldd	r24, Y+7	; 0x07
    9bbe:	98 85       	ldd	r25, Y+8	; 0x08
    9bc0:	4e 97       	sbiw	r24, 0x1e	; 30
    9bc2:	6c f2       	brlt	.-102    	; 0x9b5e <Cargar_Valores_Rango_Por_Canal+0x1fa>
    9bc4:	91 c0       	rjmp	.+290    	; 0x9ce8 <Cargar_Valores_Rango_Por_Canal+0x384>
			flCond1Factor[i] = pgm_read_float(&Cond_20_2500_C_Factor[i]);
		}
	}
	else if (uRangoCond1 == COND_0_20_C){
    9bc6:	80 91 e9 04 	lds	r24, 0x04E9
    9bca:	90 91 ea 04 	lds	r25, 0x04EA
    9bce:	05 97       	sbiw	r24, 0x05	; 5
    9bd0:	09 f0       	breq	.+2      	; 0x9bd4 <Cargar_Valores_Rango_Por_Canal+0x270>
    9bd2:	41 c0       	rjmp	.+130    	; 0x9c56 <Cargar_Valores_Rango_Por_Canal+0x2f2>
		cond1MaxUs = COND020C_MAX_US;
    9bd4:	84 e1       	ldi	r24, 0x14	; 20
    9bd6:	90 e0       	ldi	r25, 0x00	; 0
    9bd8:	90 93 e8 04 	sts	0x04E8, r25
    9bdc:	80 93 e7 04 	sts	0x04E7, r24
		cond1MinUs = COND020C_MIN_US;
    9be0:	10 92 00 05 	sts	0x0500, r1
    9be4:	10 92 ff 04 	sts	0x04FF, r1
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9be8:	1a 86       	std	Y+10, r1	; 0x0a
    9bea:	19 86       	std	Y+9, r1	; 0x09
    9bec:	2f c0       	rjmp	.+94     	; 0x9c4c <Cargar_Valores_Rango_Por_Canal+0x2e8>
			flCond1Factor[i] = pgm_read_float(&Cond_0_20_C_Factor[i]);
    9bee:	89 85       	ldd	r24, Y+9	; 0x09
    9bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    9bf2:	88 0f       	add	r24, r24
    9bf4:	99 1f       	adc	r25, r25
    9bf6:	88 0f       	add	r24, r24
    9bf8:	99 1f       	adc	r25, r25
    9bfa:	86 55       	subi	r24, 0x56	; 86
    9bfc:	9c 4f       	sbci	r25, 0xFC	; 252
    9bfe:	9a ab       	std	Y+50, r25	; 0x32
    9c00:	89 ab       	std	Y+49, r24	; 0x31
    9c02:	89 a9       	ldd	r24, Y+49	; 0x31
    9c04:	9a a9       	ldd	r25, Y+50	; 0x32
    9c06:	9c 01       	movw	r18, r24
    9c08:	f9 01       	movw	r30, r18
    9c0a:	85 91       	lpm	r24, Z+
    9c0c:	95 91       	lpm	r25, Z+
    9c0e:	a5 91       	lpm	r26, Z+
    9c10:	b4 91       	lpm	r27, Z
    9c12:	9f 01       	movw	r18, r30
    9c14:	8b ab       	std	Y+51, r24	; 0x33
    9c16:	9c ab       	std	Y+52, r25	; 0x34
    9c18:	ad ab       	std	Y+53, r26	; 0x35
    9c1a:	be ab       	std	Y+54, r27	; 0x36
    9c1c:	3a ab       	std	Y+50, r19	; 0x32
    9c1e:	29 ab       	std	Y+49, r18	; 0x31
    9c20:	8b a9       	ldd	r24, Y+51	; 0x33
    9c22:	9c a9       	ldd	r25, Y+52	; 0x34
    9c24:	ad a9       	ldd	r26, Y+53	; 0x35
    9c26:	be a9       	ldd	r27, Y+54	; 0x36
    9c28:	29 85       	ldd	r18, Y+9	; 0x09
    9c2a:	3a 85       	ldd	r19, Y+10	; 0x0a
    9c2c:	22 0f       	add	r18, r18
    9c2e:	33 1f       	adc	r19, r19
    9c30:	22 0f       	add	r18, r18
    9c32:	33 1f       	adc	r19, r19
    9c34:	25 5e       	subi	r18, 0xE5	; 229
    9c36:	3a 4f       	sbci	r19, 0xFA	; 250
    9c38:	f9 01       	movw	r30, r18
    9c3a:	80 83       	st	Z, r24
    9c3c:	91 83       	std	Z+1, r25	; 0x01
    9c3e:	a2 83       	std	Z+2, r26	; 0x02
    9c40:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
	else if (uRangoCond1 == COND_0_20_C){
		cond1MaxUs = COND020C_MAX_US;
		cond1MinUs = COND020C_MIN_US;
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9c42:	89 85       	ldd	r24, Y+9	; 0x09
    9c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    9c46:	01 96       	adiw	r24, 0x01	; 1
    9c48:	9a 87       	std	Y+10, r25	; 0x0a
    9c4a:	89 87       	std	Y+9, r24	; 0x09
    9c4c:	89 85       	ldd	r24, Y+9	; 0x09
    9c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    9c50:	4e 97       	sbiw	r24, 0x1e	; 30
    9c52:	6c f2       	brlt	.-102    	; 0x9bee <Cargar_Valores_Rango_Por_Canal+0x28a>
    9c54:	49 c0       	rjmp	.+146    	; 0x9ce8 <Cargar_Valores_Rango_Por_Canal+0x384>
			flCond1Factor[i] = pgm_read_float(&Cond_0_20_C_Factor[i]);
		}
	}
	else if (uRangoCond1 == COND_2_200_C){
    9c56:	80 91 e9 04 	lds	r24, 0x04E9
    9c5a:	90 91 ea 04 	lds	r25, 0x04EA
    9c5e:	06 97       	sbiw	r24, 0x06	; 6
    9c60:	09 f0       	breq	.+2      	; 0x9c64 <Cargar_Valores_Rango_Por_Canal+0x300>
    9c62:	42 c0       	rjmp	.+132    	; 0x9ce8 <Cargar_Valores_Rango_Por_Canal+0x384>
		cond1MaxUs = COND2200C_MAX_US;
    9c64:	88 ec       	ldi	r24, 0xC8	; 200
    9c66:	90 e0       	ldi	r25, 0x00	; 0
    9c68:	90 93 e8 04 	sts	0x04E8, r25
    9c6c:	80 93 e7 04 	sts	0x04E7, r24
		cond1MinUs = COND2200C_MIN_US;
    9c70:	82 e0       	ldi	r24, 0x02	; 2
    9c72:	90 e0       	ldi	r25, 0x00	; 0
    9c74:	90 93 00 05 	sts	0x0500, r25
    9c78:	80 93 ff 04 	sts	0x04FF, r24
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9c7c:	1c 86       	std	Y+12, r1	; 0x0c
    9c7e:	1b 86       	std	Y+11, r1	; 0x0b
    9c80:	2f c0       	rjmp	.+94     	; 0x9ce0 <Cargar_Valores_Rango_Por_Canal+0x37c>
			flCond1Factor[i] = pgm_read_float(&Cond_2_200_C_Factor[i]);
    9c82:	8b 85       	ldd	r24, Y+11	; 0x0b
    9c84:	9c 85       	ldd	r25, Y+12	; 0x0c
    9c86:	88 0f       	add	r24, r24
    9c88:	99 1f       	adc	r25, r25
    9c8a:	88 0f       	add	r24, r24
    9c8c:	99 1f       	adc	r25, r25
    9c8e:	8e 5d       	subi	r24, 0xDE	; 222
    9c90:	9b 4f       	sbci	r25, 0xFB	; 251
    9c92:	98 af       	std	Y+56, r25	; 0x38
    9c94:	8f ab       	std	Y+55, r24	; 0x37
    9c96:	8f a9       	ldd	r24, Y+55	; 0x37
    9c98:	98 ad       	ldd	r25, Y+56	; 0x38
    9c9a:	9c 01       	movw	r18, r24
    9c9c:	f9 01       	movw	r30, r18
    9c9e:	85 91       	lpm	r24, Z+
    9ca0:	95 91       	lpm	r25, Z+
    9ca2:	a5 91       	lpm	r26, Z+
    9ca4:	b4 91       	lpm	r27, Z
    9ca6:	9f 01       	movw	r18, r30
    9ca8:	89 af       	std	Y+57, r24	; 0x39
    9caa:	9a af       	std	Y+58, r25	; 0x3a
    9cac:	ab af       	std	Y+59, r26	; 0x3b
    9cae:	bc af       	std	Y+60, r27	; 0x3c
    9cb0:	38 af       	std	Y+56, r19	; 0x38
    9cb2:	2f ab       	std	Y+55, r18	; 0x37
    9cb4:	89 ad       	ldd	r24, Y+57	; 0x39
    9cb6:	9a ad       	ldd	r25, Y+58	; 0x3a
    9cb8:	ab ad       	ldd	r26, Y+59	; 0x3b
    9cba:	bc ad       	ldd	r27, Y+60	; 0x3c
    9cbc:	2b 85       	ldd	r18, Y+11	; 0x0b
    9cbe:	3c 85       	ldd	r19, Y+12	; 0x0c
    9cc0:	22 0f       	add	r18, r18
    9cc2:	33 1f       	adc	r19, r19
    9cc4:	22 0f       	add	r18, r18
    9cc6:	33 1f       	adc	r19, r19
    9cc8:	25 5e       	subi	r18, 0xE5	; 229
    9cca:	3a 4f       	sbci	r19, 0xFA	; 250
    9ccc:	f9 01       	movw	r30, r18
    9cce:	80 83       	st	Z, r24
    9cd0:	91 83       	std	Z+1, r25	; 0x01
    9cd2:	a2 83       	std	Z+2, r26	; 0x02
    9cd4:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
	else if (uRangoCond1 == COND_2_200_C){
		cond1MaxUs = COND2200C_MAX_US;
		cond1MinUs = COND2200C_MIN_US;
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9cd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    9cd8:	9c 85       	ldd	r25, Y+12	; 0x0c
    9cda:	01 96       	adiw	r24, 0x01	; 1
    9cdc:	9c 87       	std	Y+12, r25	; 0x0c
    9cde:	8b 87       	std	Y+11, r24	; 0x0b
    9ce0:	8b 85       	ldd	r24, Y+11	; 0x0b
    9ce2:	9c 85       	ldd	r25, Y+12	; 0x0c
    9ce4:	4e 97       	sbiw	r24, 0x1e	; 30
    9ce6:	6c f2       	brlt	.-102    	; 0x9c82 <Cargar_Valores_Rango_Por_Canal+0x31e>
			flCond1Factor[i] = pgm_read_float(&Cond_2_200_C_Factor[i]);
		}
	}

	// cargo los valores para la correccion de linealidad segun el rango para cada cond 2
	if (uRangoCond2 == COND_20_2500_G){
    9ce8:	80 91 1d 06 	lds	r24, 0x061D
    9cec:	90 91 1e 06 	lds	r25, 0x061E
    9cf0:	01 97       	sbiw	r24, 0x01	; 1
    9cf2:	09 f0       	breq	.+2      	; 0x9cf6 <Cargar_Valores_Rango_Por_Canal+0x392>
    9cf4:	4b c0       	rjmp	.+150    	; 0x9d8c <Cargar_Valores_Rango_Por_Canal+0x428>
		cond2MaxUs = COND202500G_MAX_US;
    9cf6:	84 ec       	ldi	r24, 0xC4	; 196
    9cf8:	99 e0       	ldi	r25, 0x09	; 9
    9cfa:	90 93 1c 06 	sts	0x061C, r25
    9cfe:	80 93 1b 06 	sts	0x061B, r24
		cond2MinUs = COND202500G_MIN_US;
    9d02:	84 e1       	ldi	r24, 0x14	; 20
    9d04:	90 e0       	ldi	r25, 0x00	; 0
    9d06:	90 93 16 05 	sts	0x0516, r25
    9d0a:	80 93 15 05 	sts	0x0515, r24
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9d0e:	1e 86       	std	Y+14, r1	; 0x0e
    9d10:	1d 86       	std	Y+13, r1	; 0x0d
    9d12:	36 c0       	rjmp	.+108    	; 0x9d80 <Cargar_Valores_Rango_Por_Canal+0x41c>
			flCond2Factor[i] = pgm_read_float(&Cond_20_2500_G_Factor[i]);
    9d14:	8d 85       	ldd	r24, Y+13	; 0x0d
    9d16:	9e 85       	ldd	r25, Y+14	; 0x0e
    9d18:	88 0f       	add	r24, r24
    9d1a:	99 1f       	adc	r25, r25
    9d1c:	88 0f       	add	r24, r24
    9d1e:	99 1f       	adc	r25, r25
    9d20:	8e 5c       	subi	r24, 0xCE	; 206
    9d22:	9c 4f       	sbci	r25, 0xFC	; 252
    9d24:	9e af       	std	Y+62, r25	; 0x3e
    9d26:	8d af       	std	Y+61, r24	; 0x3d
    9d28:	8d ad       	ldd	r24, Y+61	; 0x3d
    9d2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    9d2c:	9c 01       	movw	r18, r24
    9d2e:	f9 01       	movw	r30, r18
    9d30:	85 91       	lpm	r24, Z+
    9d32:	95 91       	lpm	r25, Z+
    9d34:	a5 91       	lpm	r26, Z+
    9d36:	b4 91       	lpm	r27, Z
    9d38:	9f 01       	movw	r18, r30
    9d3a:	ae 01       	movw	r20, r28
    9d3c:	41 5c       	subi	r20, 0xC1	; 193
    9d3e:	5f 4f       	sbci	r21, 0xFF	; 255
    9d40:	fa 01       	movw	r30, r20
    9d42:	80 83       	st	Z, r24
    9d44:	91 83       	std	Z+1, r25	; 0x01
    9d46:	a2 83       	std	Z+2, r26	; 0x02
    9d48:	b3 83       	std	Z+3, r27	; 0x03
    9d4a:	3e af       	std	Y+62, r19	; 0x3e
    9d4c:	2d af       	std	Y+61, r18	; 0x3d
    9d4e:	ce 01       	movw	r24, r28
    9d50:	cf 96       	adiw	r24, 0x3f	; 63
    9d52:	fc 01       	movw	r30, r24
    9d54:	80 81       	ld	r24, Z
    9d56:	91 81       	ldd	r25, Z+1	; 0x01
    9d58:	a2 81       	ldd	r26, Z+2	; 0x02
    9d5a:	b3 81       	ldd	r27, Z+3	; 0x03
    9d5c:	2d 85       	ldd	r18, Y+13	; 0x0d
    9d5e:	3e 85       	ldd	r19, Y+14	; 0x0e
    9d60:	22 0f       	add	r18, r18
    9d62:	33 1f       	adc	r19, r19
    9d64:	22 0f       	add	r18, r18
    9d66:	33 1f       	adc	r19, r19
    9d68:	25 56       	subi	r18, 0x65	; 101
    9d6a:	3a 4f       	sbci	r19, 0xFA	; 250
    9d6c:	f9 01       	movw	r30, r18
    9d6e:	80 83       	st	Z, r24
    9d70:	91 83       	std	Z+1, r25	; 0x01
    9d72:	a2 83       	std	Z+2, r26	; 0x02
    9d74:	b3 83       	std	Z+3, r27	; 0x03

	// cargo los valores para la correccion de linealidad segun el rango para cada cond 2
	if (uRangoCond2 == COND_20_2500_G){
		cond2MaxUs = COND202500G_MAX_US;
		cond2MinUs = COND202500G_MIN_US;
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9d76:	8d 85       	ldd	r24, Y+13	; 0x0d
    9d78:	9e 85       	ldd	r25, Y+14	; 0x0e
    9d7a:	01 96       	adiw	r24, 0x01	; 1
    9d7c:	9e 87       	std	Y+14, r25	; 0x0e
    9d7e:	8d 87       	std	Y+13, r24	; 0x0d
    9d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    9d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    9d84:	4e 97       	sbiw	r24, 0x1e	; 30
    9d86:	0c f4       	brge	.+2      	; 0x9d8a <Cargar_Valores_Rango_Por_Canal+0x426>
    9d88:	c5 cf       	rjmp	.-118    	; 0x9d14 <Cargar_Valores_Rango_Por_Canal+0x3b0>
    9d8a:	db c1       	rjmp	.+950    	; 0xa142 <Cargar_Valores_Rango_Por_Canal+0x7de>
			flCond2Factor[i] = pgm_read_float(&Cond_20_2500_G_Factor[i]);
		}
	}
	else if (uRangoCond2 == COND_0_20_G){
    9d8c:	80 91 1d 06 	lds	r24, 0x061D
    9d90:	90 91 1e 06 	lds	r25, 0x061E
    9d94:	02 97       	sbiw	r24, 0x02	; 2
    9d96:	09 f0       	breq	.+2      	; 0x9d9a <Cargar_Valores_Rango_Por_Canal+0x436>
    9d98:	57 c0       	rjmp	.+174    	; 0x9e48 <Cargar_Valores_Rango_Por_Canal+0x4e4>
		cond2MaxUs = COND020G_MAX_US;
    9d9a:	84 e1       	ldi	r24, 0x14	; 20
    9d9c:	90 e0       	ldi	r25, 0x00	; 0
    9d9e:	90 93 1c 06 	sts	0x061C, r25
    9da2:	80 93 1b 06 	sts	0x061B, r24
		cond2MinUs = COND020G_MIN_US;
    9da6:	10 92 16 05 	sts	0x0516, r1
    9daa:	10 92 15 05 	sts	0x0515, r1
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9dae:	18 8a       	std	Y+16, r1	; 0x10
    9db0:	1f 86       	std	Y+15, r1	; 0x0f
    9db2:	44 c0       	rjmp	.+136    	; 0x9e3c <Cargar_Valores_Rango_Por_Canal+0x4d8>
			flCond2Factor[i] = pgm_read_float(&Cond_0_20_G_Factor[i]);
    9db4:	8f 85       	ldd	r24, Y+15	; 0x0f
    9db6:	98 89       	ldd	r25, Y+16	; 0x10
    9db8:	88 0f       	add	r24, r24
    9dba:	99 1f       	adc	r25, r25
    9dbc:	88 0f       	add	r24, r24
    9dbe:	99 1f       	adc	r25, r25
    9dc0:	9c 01       	movw	r18, r24
    9dc2:	2e 5b       	subi	r18, 0xBE	; 190
    9dc4:	3d 4f       	sbci	r19, 0xFD	; 253
    9dc6:	ce 01       	movw	r24, r28
    9dc8:	8d 5b       	subi	r24, 0xBD	; 189
    9dca:	9f 4f       	sbci	r25, 0xFF	; 255
    9dcc:	fc 01       	movw	r30, r24
    9dce:	31 83       	std	Z+1, r19	; 0x01
    9dd0:	20 83       	st	Z, r18
    9dd2:	ce 01       	movw	r24, r28
    9dd4:	8d 5b       	subi	r24, 0xBD	; 189
    9dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    9dd8:	fc 01       	movw	r30, r24
    9dda:	80 81       	ld	r24, Z
    9ddc:	91 81       	ldd	r25, Z+1	; 0x01
    9dde:	9c 01       	movw	r18, r24
    9de0:	f9 01       	movw	r30, r18
    9de2:	85 91       	lpm	r24, Z+
    9de4:	95 91       	lpm	r25, Z+
    9de6:	a5 91       	lpm	r26, Z+
    9de8:	b4 91       	lpm	r27, Z
    9dea:	9f 01       	movw	r18, r30
    9dec:	ae 01       	movw	r20, r28
    9dee:	4b 5b       	subi	r20, 0xBB	; 187
    9df0:	5f 4f       	sbci	r21, 0xFF	; 255
    9df2:	fa 01       	movw	r30, r20
    9df4:	80 83       	st	Z, r24
    9df6:	91 83       	std	Z+1, r25	; 0x01
    9df8:	a2 83       	std	Z+2, r26	; 0x02
    9dfa:	b3 83       	std	Z+3, r27	; 0x03
    9dfc:	ce 01       	movw	r24, r28
    9dfe:	8d 5b       	subi	r24, 0xBD	; 189
    9e00:	9f 4f       	sbci	r25, 0xFF	; 255
    9e02:	fc 01       	movw	r30, r24
    9e04:	31 83       	std	Z+1, r19	; 0x01
    9e06:	20 83       	st	Z, r18
    9e08:	ce 01       	movw	r24, r28
    9e0a:	8b 5b       	subi	r24, 0xBB	; 187
    9e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    9e0e:	fc 01       	movw	r30, r24
    9e10:	80 81       	ld	r24, Z
    9e12:	91 81       	ldd	r25, Z+1	; 0x01
    9e14:	a2 81       	ldd	r26, Z+2	; 0x02
    9e16:	b3 81       	ldd	r27, Z+3	; 0x03
    9e18:	2f 85       	ldd	r18, Y+15	; 0x0f
    9e1a:	38 89       	ldd	r19, Y+16	; 0x10
    9e1c:	22 0f       	add	r18, r18
    9e1e:	33 1f       	adc	r19, r19
    9e20:	22 0f       	add	r18, r18
    9e22:	33 1f       	adc	r19, r19
    9e24:	25 56       	subi	r18, 0x65	; 101
    9e26:	3a 4f       	sbci	r19, 0xFA	; 250
    9e28:	f9 01       	movw	r30, r18
    9e2a:	80 83       	st	Z, r24
    9e2c:	91 83       	std	Z+1, r25	; 0x01
    9e2e:	a2 83       	std	Z+2, r26	; 0x02
    9e30:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
	else if (uRangoCond2 == COND_0_20_G){
		cond2MaxUs = COND020G_MAX_US;
		cond2MinUs = COND020G_MIN_US;
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    9e34:	98 89       	ldd	r25, Y+16	; 0x10
    9e36:	01 96       	adiw	r24, 0x01	; 1
    9e38:	98 8b       	std	Y+16, r25	; 0x10
    9e3a:	8f 87       	std	Y+15, r24	; 0x0f
    9e3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    9e3e:	98 89       	ldd	r25, Y+16	; 0x10
    9e40:	4e 97       	sbiw	r24, 0x1e	; 30
    9e42:	0c f4       	brge	.+2      	; 0x9e46 <Cargar_Valores_Rango_Por_Canal+0x4e2>
    9e44:	b7 cf       	rjmp	.-146    	; 0x9db4 <Cargar_Valores_Rango_Por_Canal+0x450>
    9e46:	7d c1       	rjmp	.+762    	; 0xa142 <Cargar_Valores_Rango_Por_Canal+0x7de>
			flCond2Factor[i] = pgm_read_float(&Cond_0_20_G_Factor[i]);
		}
	}
	else if (uRangoCond2 == COND_2_200_G){
    9e48:	80 91 1d 06 	lds	r24, 0x061D
    9e4c:	90 91 1e 06 	lds	r25, 0x061E
    9e50:	03 97       	sbiw	r24, 0x03	; 3
    9e52:	09 f0       	breq	.+2      	; 0x9e56 <Cargar_Valores_Rango_Por_Canal+0x4f2>
    9e54:	59 c0       	rjmp	.+178    	; 0x9f08 <Cargar_Valores_Rango_Por_Canal+0x5a4>
		cond2MaxUs = COND2200G_MAX_US;
    9e56:	88 ec       	ldi	r24, 0xC8	; 200
    9e58:	90 e0       	ldi	r25, 0x00	; 0
    9e5a:	90 93 1c 06 	sts	0x061C, r25
    9e5e:	80 93 1b 06 	sts	0x061B, r24
		cond2MinUs = COND2200G_MIN_US;
    9e62:	82 e0       	ldi	r24, 0x02	; 2
    9e64:	90 e0       	ldi	r25, 0x00	; 0
    9e66:	90 93 16 05 	sts	0x0516, r25
    9e6a:	80 93 15 05 	sts	0x0515, r24
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9e6e:	1a 8a       	std	Y+18, r1	; 0x12
    9e70:	19 8a       	std	Y+17, r1	; 0x11
    9e72:	44 c0       	rjmp	.+136    	; 0x9efc <Cargar_Valores_Rango_Por_Canal+0x598>
			flCond2Factor[i] = pgm_read_float(&Cond_2_200_G_Factor[i]);
    9e74:	89 89       	ldd	r24, Y+17	; 0x11
    9e76:	9a 89       	ldd	r25, Y+18	; 0x12
    9e78:	88 0f       	add	r24, r24
    9e7a:	99 1f       	adc	r25, r25
    9e7c:	88 0f       	add	r24, r24
    9e7e:	99 1f       	adc	r25, r25
    9e80:	9c 01       	movw	r18, r24
    9e82:	26 54       	subi	r18, 0x46	; 70
    9e84:	3d 4f       	sbci	r19, 0xFD	; 253
    9e86:	ce 01       	movw	r24, r28
    9e88:	87 5b       	subi	r24, 0xB7	; 183
    9e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    9e8c:	fc 01       	movw	r30, r24
    9e8e:	31 83       	std	Z+1, r19	; 0x01
    9e90:	20 83       	st	Z, r18
    9e92:	ce 01       	movw	r24, r28
    9e94:	87 5b       	subi	r24, 0xB7	; 183
    9e96:	9f 4f       	sbci	r25, 0xFF	; 255
    9e98:	fc 01       	movw	r30, r24
    9e9a:	80 81       	ld	r24, Z
    9e9c:	91 81       	ldd	r25, Z+1	; 0x01
    9e9e:	9c 01       	movw	r18, r24
    9ea0:	f9 01       	movw	r30, r18
    9ea2:	85 91       	lpm	r24, Z+
    9ea4:	95 91       	lpm	r25, Z+
    9ea6:	a5 91       	lpm	r26, Z+
    9ea8:	b4 91       	lpm	r27, Z
    9eaa:	9f 01       	movw	r18, r30
    9eac:	ae 01       	movw	r20, r28
    9eae:	45 5b       	subi	r20, 0xB5	; 181
    9eb0:	5f 4f       	sbci	r21, 0xFF	; 255
    9eb2:	fa 01       	movw	r30, r20
    9eb4:	80 83       	st	Z, r24
    9eb6:	91 83       	std	Z+1, r25	; 0x01
    9eb8:	a2 83       	std	Z+2, r26	; 0x02
    9eba:	b3 83       	std	Z+3, r27	; 0x03
    9ebc:	ce 01       	movw	r24, r28
    9ebe:	87 5b       	subi	r24, 0xB7	; 183
    9ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    9ec2:	fc 01       	movw	r30, r24
    9ec4:	31 83       	std	Z+1, r19	; 0x01
    9ec6:	20 83       	st	Z, r18
    9ec8:	ce 01       	movw	r24, r28
    9eca:	85 5b       	subi	r24, 0xB5	; 181
    9ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    9ece:	fc 01       	movw	r30, r24
    9ed0:	80 81       	ld	r24, Z
    9ed2:	91 81       	ldd	r25, Z+1	; 0x01
    9ed4:	a2 81       	ldd	r26, Z+2	; 0x02
    9ed6:	b3 81       	ldd	r27, Z+3	; 0x03
    9ed8:	29 89       	ldd	r18, Y+17	; 0x11
    9eda:	3a 89       	ldd	r19, Y+18	; 0x12
    9edc:	22 0f       	add	r18, r18
    9ede:	33 1f       	adc	r19, r19
    9ee0:	22 0f       	add	r18, r18
    9ee2:	33 1f       	adc	r19, r19
    9ee4:	25 56       	subi	r18, 0x65	; 101
    9ee6:	3a 4f       	sbci	r19, 0xFA	; 250
    9ee8:	f9 01       	movw	r30, r18
    9eea:	80 83       	st	Z, r24
    9eec:	91 83       	std	Z+1, r25	; 0x01
    9eee:	a2 83       	std	Z+2, r26	; 0x02
    9ef0:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
	else if (uRangoCond2 == COND_2_200_G){
		cond2MaxUs = COND2200G_MAX_US;
		cond2MinUs = COND2200G_MIN_US;
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9ef2:	89 89       	ldd	r24, Y+17	; 0x11
    9ef4:	9a 89       	ldd	r25, Y+18	; 0x12
    9ef6:	01 96       	adiw	r24, 0x01	; 1
    9ef8:	9a 8b       	std	Y+18, r25	; 0x12
    9efa:	89 8b       	std	Y+17, r24	; 0x11
    9efc:	89 89       	ldd	r24, Y+17	; 0x11
    9efe:	9a 89       	ldd	r25, Y+18	; 0x12
    9f00:	4e 97       	sbiw	r24, 0x1e	; 30
    9f02:	0c f4       	brge	.+2      	; 0x9f06 <Cargar_Valores_Rango_Por_Canal+0x5a2>
    9f04:	b7 cf       	rjmp	.-146    	; 0x9e74 <Cargar_Valores_Rango_Por_Canal+0x510>
    9f06:	1d c1       	rjmp	.+570    	; 0xa142 <Cargar_Valores_Rango_Por_Canal+0x7de>
			flCond2Factor[i] = pgm_read_float(&Cond_2_200_G_Factor[i]);
		}
	}
	else if (uRangoCond2 == COND_20_2500_C){
    9f08:	80 91 1d 06 	lds	r24, 0x061D
    9f0c:	90 91 1e 06 	lds	r25, 0x061E
    9f10:	04 97       	sbiw	r24, 0x04	; 4
    9f12:	09 f0       	breq	.+2      	; 0x9f16 <Cargar_Valores_Rango_Por_Canal+0x5b2>
    9f14:	59 c0       	rjmp	.+178    	; 0x9fc8 <Cargar_Valores_Rango_Por_Canal+0x664>
		cond2MaxUs = COND202500C_MAX_US;
    9f16:	84 ec       	ldi	r24, 0xC4	; 196
    9f18:	99 e0       	ldi	r25, 0x09	; 9
    9f1a:	90 93 1c 06 	sts	0x061C, r25
    9f1e:	80 93 1b 06 	sts	0x061B, r24
		cond2MinUs = COND202500C_MIN_US;
    9f22:	84 e1       	ldi	r24, 0x14	; 20
    9f24:	90 e0       	ldi	r25, 0x00	; 0
    9f26:	90 93 16 05 	sts	0x0516, r25
    9f2a:	80 93 15 05 	sts	0x0515, r24
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9f2e:	1c 8a       	std	Y+20, r1	; 0x14
    9f30:	1b 8a       	std	Y+19, r1	; 0x13
    9f32:	44 c0       	rjmp	.+136    	; 0x9fbc <Cargar_Valores_Rango_Por_Canal+0x658>
			flCond2Factor[i] = pgm_read_float(&Cond_20_2500_C_Factor[i]);
    9f34:	8b 89       	ldd	r24, Y+19	; 0x13
    9f36:	9c 89       	ldd	r25, Y+20	; 0x14
    9f38:	88 0f       	add	r24, r24
    9f3a:	99 1f       	adc	r25, r25
    9f3c:	88 0f       	add	r24, r24
    9f3e:	99 1f       	adc	r25, r25
    9f40:	9c 01       	movw	r18, r24
    9f42:	26 56       	subi	r18, 0x66	; 102
    9f44:	3b 4f       	sbci	r19, 0xFB	; 251
    9f46:	ce 01       	movw	r24, r28
    9f48:	81 5b       	subi	r24, 0xB1	; 177
    9f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    9f4c:	fc 01       	movw	r30, r24
    9f4e:	31 83       	std	Z+1, r19	; 0x01
    9f50:	20 83       	st	Z, r18
    9f52:	ce 01       	movw	r24, r28
    9f54:	81 5b       	subi	r24, 0xB1	; 177
    9f56:	9f 4f       	sbci	r25, 0xFF	; 255
    9f58:	fc 01       	movw	r30, r24
    9f5a:	80 81       	ld	r24, Z
    9f5c:	91 81       	ldd	r25, Z+1	; 0x01
    9f5e:	9c 01       	movw	r18, r24
    9f60:	f9 01       	movw	r30, r18
    9f62:	85 91       	lpm	r24, Z+
    9f64:	95 91       	lpm	r25, Z+
    9f66:	a5 91       	lpm	r26, Z+
    9f68:	b4 91       	lpm	r27, Z
    9f6a:	9f 01       	movw	r18, r30
    9f6c:	ae 01       	movw	r20, r28
    9f6e:	4f 5a       	subi	r20, 0xAF	; 175
    9f70:	5f 4f       	sbci	r21, 0xFF	; 255
    9f72:	fa 01       	movw	r30, r20
    9f74:	80 83       	st	Z, r24
    9f76:	91 83       	std	Z+1, r25	; 0x01
    9f78:	a2 83       	std	Z+2, r26	; 0x02
    9f7a:	b3 83       	std	Z+3, r27	; 0x03
    9f7c:	ce 01       	movw	r24, r28
    9f7e:	81 5b       	subi	r24, 0xB1	; 177
    9f80:	9f 4f       	sbci	r25, 0xFF	; 255
    9f82:	fc 01       	movw	r30, r24
    9f84:	31 83       	std	Z+1, r19	; 0x01
    9f86:	20 83       	st	Z, r18
    9f88:	ce 01       	movw	r24, r28
    9f8a:	8f 5a       	subi	r24, 0xAF	; 175
    9f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    9f8e:	fc 01       	movw	r30, r24
    9f90:	80 81       	ld	r24, Z
    9f92:	91 81       	ldd	r25, Z+1	; 0x01
    9f94:	a2 81       	ldd	r26, Z+2	; 0x02
    9f96:	b3 81       	ldd	r27, Z+3	; 0x03
    9f98:	2b 89       	ldd	r18, Y+19	; 0x13
    9f9a:	3c 89       	ldd	r19, Y+20	; 0x14
    9f9c:	22 0f       	add	r18, r18
    9f9e:	33 1f       	adc	r19, r19
    9fa0:	22 0f       	add	r18, r18
    9fa2:	33 1f       	adc	r19, r19
    9fa4:	25 56       	subi	r18, 0x65	; 101
    9fa6:	3a 4f       	sbci	r19, 0xFA	; 250
    9fa8:	f9 01       	movw	r30, r18
    9faa:	80 83       	st	Z, r24
    9fac:	91 83       	std	Z+1, r25	; 0x01
    9fae:	a2 83       	std	Z+2, r26	; 0x02
    9fb0:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
	else if (uRangoCond2 == COND_20_2500_C){
		cond2MaxUs = COND202500C_MAX_US;
		cond2MinUs = COND202500C_MIN_US;
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9fb2:	8b 89       	ldd	r24, Y+19	; 0x13
    9fb4:	9c 89       	ldd	r25, Y+20	; 0x14
    9fb6:	01 96       	adiw	r24, 0x01	; 1
    9fb8:	9c 8b       	std	Y+20, r25	; 0x14
    9fba:	8b 8b       	std	Y+19, r24	; 0x13
    9fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    9fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    9fc0:	4e 97       	sbiw	r24, 0x1e	; 30
    9fc2:	0c f4       	brge	.+2      	; 0x9fc6 <Cargar_Valores_Rango_Por_Canal+0x662>
    9fc4:	b7 cf       	rjmp	.-146    	; 0x9f34 <Cargar_Valores_Rango_Por_Canal+0x5d0>
    9fc6:	bd c0       	rjmp	.+378    	; 0xa142 <Cargar_Valores_Rango_Por_Canal+0x7de>
			flCond2Factor[i] = pgm_read_float(&Cond_20_2500_C_Factor[i]);
		}
	}
	else if (uRangoCond2 == COND_0_20_C){
    9fc8:	80 91 1d 06 	lds	r24, 0x061D
    9fcc:	90 91 1e 06 	lds	r25, 0x061E
    9fd0:	05 97       	sbiw	r24, 0x05	; 5
    9fd2:	09 f0       	breq	.+2      	; 0x9fd6 <Cargar_Valores_Rango_Por_Canal+0x672>
    9fd4:	57 c0       	rjmp	.+174    	; 0xa084 <Cargar_Valores_Rango_Por_Canal+0x720>
		cond2MaxUs = COND020C_MAX_US;
    9fd6:	84 e1       	ldi	r24, 0x14	; 20
    9fd8:	90 e0       	ldi	r25, 0x00	; 0
    9fda:	90 93 1c 06 	sts	0x061C, r25
    9fde:	80 93 1b 06 	sts	0x061B, r24
		cond2MinUs = COND020C_MIN_US;
    9fe2:	10 92 16 05 	sts	0x0516, r1
    9fe6:	10 92 15 05 	sts	0x0515, r1
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    9fea:	1e 8a       	std	Y+22, r1	; 0x16
    9fec:	1d 8a       	std	Y+21, r1	; 0x15
    9fee:	44 c0       	rjmp	.+136    	; 0xa078 <Cargar_Valores_Rango_Por_Canal+0x714>
			flCond2Factor[i] = pgm_read_float(&Cond_0_20_C_Factor[i]);
    9ff0:	8d 89       	ldd	r24, Y+21	; 0x15
    9ff2:	9e 89       	ldd	r25, Y+22	; 0x16
    9ff4:	88 0f       	add	r24, r24
    9ff6:	99 1f       	adc	r25, r25
    9ff8:	88 0f       	add	r24, r24
    9ffa:	99 1f       	adc	r25, r25
    9ffc:	9c 01       	movw	r18, r24
    9ffe:	26 55       	subi	r18, 0x56	; 86
    a000:	3c 4f       	sbci	r19, 0xFC	; 252
    a002:	ce 01       	movw	r24, r28
    a004:	8b 5a       	subi	r24, 0xAB	; 171
    a006:	9f 4f       	sbci	r25, 0xFF	; 255
    a008:	fc 01       	movw	r30, r24
    a00a:	31 83       	std	Z+1, r19	; 0x01
    a00c:	20 83       	st	Z, r18
    a00e:	ce 01       	movw	r24, r28
    a010:	8b 5a       	subi	r24, 0xAB	; 171
    a012:	9f 4f       	sbci	r25, 0xFF	; 255
    a014:	fc 01       	movw	r30, r24
    a016:	80 81       	ld	r24, Z
    a018:	91 81       	ldd	r25, Z+1	; 0x01
    a01a:	9c 01       	movw	r18, r24
    a01c:	f9 01       	movw	r30, r18
    a01e:	85 91       	lpm	r24, Z+
    a020:	95 91       	lpm	r25, Z+
    a022:	a5 91       	lpm	r26, Z+
    a024:	b4 91       	lpm	r27, Z
    a026:	9f 01       	movw	r18, r30
    a028:	ae 01       	movw	r20, r28
    a02a:	49 5a       	subi	r20, 0xA9	; 169
    a02c:	5f 4f       	sbci	r21, 0xFF	; 255
    a02e:	fa 01       	movw	r30, r20
    a030:	80 83       	st	Z, r24
    a032:	91 83       	std	Z+1, r25	; 0x01
    a034:	a2 83       	std	Z+2, r26	; 0x02
    a036:	b3 83       	std	Z+3, r27	; 0x03
    a038:	ce 01       	movw	r24, r28
    a03a:	8b 5a       	subi	r24, 0xAB	; 171
    a03c:	9f 4f       	sbci	r25, 0xFF	; 255
    a03e:	fc 01       	movw	r30, r24
    a040:	31 83       	std	Z+1, r19	; 0x01
    a042:	20 83       	st	Z, r18
    a044:	ce 01       	movw	r24, r28
    a046:	89 5a       	subi	r24, 0xA9	; 169
    a048:	9f 4f       	sbci	r25, 0xFF	; 255
    a04a:	fc 01       	movw	r30, r24
    a04c:	80 81       	ld	r24, Z
    a04e:	91 81       	ldd	r25, Z+1	; 0x01
    a050:	a2 81       	ldd	r26, Z+2	; 0x02
    a052:	b3 81       	ldd	r27, Z+3	; 0x03
    a054:	2d 89       	ldd	r18, Y+21	; 0x15
    a056:	3e 89       	ldd	r19, Y+22	; 0x16
    a058:	22 0f       	add	r18, r18
    a05a:	33 1f       	adc	r19, r19
    a05c:	22 0f       	add	r18, r18
    a05e:	33 1f       	adc	r19, r19
    a060:	25 56       	subi	r18, 0x65	; 101
    a062:	3a 4f       	sbci	r19, 0xFA	; 250
    a064:	f9 01       	movw	r30, r18
    a066:	80 83       	st	Z, r24
    a068:	91 83       	std	Z+1, r25	; 0x01
    a06a:	a2 83       	std	Z+2, r26	; 0x02
    a06c:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
	else if (uRangoCond2 == COND_0_20_C){
		cond2MaxUs = COND020C_MAX_US;
		cond2MinUs = COND020C_MIN_US;
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    a06e:	8d 89       	ldd	r24, Y+21	; 0x15
    a070:	9e 89       	ldd	r25, Y+22	; 0x16
    a072:	01 96       	adiw	r24, 0x01	; 1
    a074:	9e 8b       	std	Y+22, r25	; 0x16
    a076:	8d 8b       	std	Y+21, r24	; 0x15
    a078:	8d 89       	ldd	r24, Y+21	; 0x15
    a07a:	9e 89       	ldd	r25, Y+22	; 0x16
    a07c:	4e 97       	sbiw	r24, 0x1e	; 30
    a07e:	0c f4       	brge	.+2      	; 0xa082 <Cargar_Valores_Rango_Por_Canal+0x71e>
    a080:	b7 cf       	rjmp	.-146    	; 0x9ff0 <Cargar_Valores_Rango_Por_Canal+0x68c>
    a082:	5f c0       	rjmp	.+190    	; 0xa142 <Cargar_Valores_Rango_Por_Canal+0x7de>
			flCond2Factor[i] = pgm_read_float(&Cond_0_20_C_Factor[i]);
		}
	}
	else if (uRangoCond2 == COND_2_200_C){
    a084:	80 91 1d 06 	lds	r24, 0x061D
    a088:	90 91 1e 06 	lds	r25, 0x061E
    a08c:	06 97       	sbiw	r24, 0x06	; 6
    a08e:	09 f0       	breq	.+2      	; 0xa092 <Cargar_Valores_Rango_Por_Canal+0x72e>
    a090:	58 c0       	rjmp	.+176    	; 0xa142 <Cargar_Valores_Rango_Por_Canal+0x7de>
		cond2MaxUs = COND2200C_MAX_US;
    a092:	88 ec       	ldi	r24, 0xC8	; 200
    a094:	90 e0       	ldi	r25, 0x00	; 0
    a096:	90 93 1c 06 	sts	0x061C, r25
    a09a:	80 93 1b 06 	sts	0x061B, r24
		cond2MinUs = COND2200C_MIN_US;
    a09e:	82 e0       	ldi	r24, 0x02	; 2
    a0a0:	90 e0       	ldi	r25, 0x00	; 0
    a0a2:	90 93 16 05 	sts	0x0516, r25
    a0a6:	80 93 15 05 	sts	0x0515, r24
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    a0aa:	18 8e       	std	Y+24, r1	; 0x18
    a0ac:	1f 8a       	std	Y+23, r1	; 0x17
    a0ae:	44 c0       	rjmp	.+136    	; 0xa138 <Cargar_Valores_Rango_Por_Canal+0x7d4>
			flCond2Factor[i] = pgm_read_float(&Cond_2_200_C_Factor[i]);
    a0b0:	8f 89       	ldd	r24, Y+23	; 0x17
    a0b2:	98 8d       	ldd	r25, Y+24	; 0x18
    a0b4:	88 0f       	add	r24, r24
    a0b6:	99 1f       	adc	r25, r25
    a0b8:	88 0f       	add	r24, r24
    a0ba:	99 1f       	adc	r25, r25
    a0bc:	9c 01       	movw	r18, r24
    a0be:	2e 5d       	subi	r18, 0xDE	; 222
    a0c0:	3b 4f       	sbci	r19, 0xFB	; 251
    a0c2:	ce 01       	movw	r24, r28
    a0c4:	85 5a       	subi	r24, 0xA5	; 165
    a0c6:	9f 4f       	sbci	r25, 0xFF	; 255
    a0c8:	fc 01       	movw	r30, r24
    a0ca:	31 83       	std	Z+1, r19	; 0x01
    a0cc:	20 83       	st	Z, r18
    a0ce:	ce 01       	movw	r24, r28
    a0d0:	85 5a       	subi	r24, 0xA5	; 165
    a0d2:	9f 4f       	sbci	r25, 0xFF	; 255
    a0d4:	fc 01       	movw	r30, r24
    a0d6:	80 81       	ld	r24, Z
    a0d8:	91 81       	ldd	r25, Z+1	; 0x01
    a0da:	9c 01       	movw	r18, r24
    a0dc:	f9 01       	movw	r30, r18
    a0de:	85 91       	lpm	r24, Z+
    a0e0:	95 91       	lpm	r25, Z+
    a0e2:	a5 91       	lpm	r26, Z+
    a0e4:	b4 91       	lpm	r27, Z
    a0e6:	9f 01       	movw	r18, r30
    a0e8:	ae 01       	movw	r20, r28
    a0ea:	43 5a       	subi	r20, 0xA3	; 163
    a0ec:	5f 4f       	sbci	r21, 0xFF	; 255
    a0ee:	fa 01       	movw	r30, r20
    a0f0:	80 83       	st	Z, r24
    a0f2:	91 83       	std	Z+1, r25	; 0x01
    a0f4:	a2 83       	std	Z+2, r26	; 0x02
    a0f6:	b3 83       	std	Z+3, r27	; 0x03
    a0f8:	ce 01       	movw	r24, r28
    a0fa:	85 5a       	subi	r24, 0xA5	; 165
    a0fc:	9f 4f       	sbci	r25, 0xFF	; 255
    a0fe:	fc 01       	movw	r30, r24
    a100:	31 83       	std	Z+1, r19	; 0x01
    a102:	20 83       	st	Z, r18
    a104:	ce 01       	movw	r24, r28
    a106:	83 5a       	subi	r24, 0xA3	; 163
    a108:	9f 4f       	sbci	r25, 0xFF	; 255
    a10a:	fc 01       	movw	r30, r24
    a10c:	80 81       	ld	r24, Z
    a10e:	91 81       	ldd	r25, Z+1	; 0x01
    a110:	a2 81       	ldd	r26, Z+2	; 0x02
    a112:	b3 81       	ldd	r27, Z+3	; 0x03
    a114:	2f 89       	ldd	r18, Y+23	; 0x17
    a116:	38 8d       	ldd	r19, Y+24	; 0x18
    a118:	22 0f       	add	r18, r18
    a11a:	33 1f       	adc	r19, r19
    a11c:	22 0f       	add	r18, r18
    a11e:	33 1f       	adc	r19, r19
    a120:	25 56       	subi	r18, 0x65	; 101
    a122:	3a 4f       	sbci	r19, 0xFA	; 250
    a124:	f9 01       	movw	r30, r18
    a126:	80 83       	st	Z, r24
    a128:	91 83       	std	Z+1, r25	; 0x01
    a12a:	a2 83       	std	Z+2, r26	; 0x02
    a12c:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
	else if (uRangoCond2 == COND_2_200_C){
		cond2MaxUs = COND2200C_MAX_US;
		cond2MinUs = COND2200C_MIN_US;
		for (int i=0; i<CANT_STEPS_CORR_LIN; i++){
    a12e:	8f 89       	ldd	r24, Y+23	; 0x17
    a130:	98 8d       	ldd	r25, Y+24	; 0x18
    a132:	01 96       	adiw	r24, 0x01	; 1
    a134:	98 8f       	std	Y+24, r25	; 0x18
    a136:	8f 8b       	std	Y+23, r24	; 0x17
    a138:	8f 89       	ldd	r24, Y+23	; 0x17
    a13a:	98 8d       	ldd	r25, Y+24	; 0x18
    a13c:	4e 97       	sbiw	r24, 0x1e	; 30
    a13e:	0c f4       	brge	.+2      	; 0xa142 <Cargar_Valores_Rango_Por_Canal+0x7de>
    a140:	b7 cf       	rjmp	.-146    	; 0xa0b0 <Cargar_Valores_Rango_Por_Canal+0x74c>
			flCond2Factor[i] = pgm_read_float(&Cond_2_200_C_Factor[i]);
		}
	}
}
    a142:	c0 5a       	subi	r28, 0xA0	; 160
    a144:	df 4f       	sbci	r29, 0xFF	; 255
    a146:	0f b6       	in	r0, 0x3f	; 63
    a148:	f8 94       	cli
    a14a:	de bf       	out	0x3e, r29	; 62
    a14c:	0f be       	out	0x3f, r0	; 63
    a14e:	cd bf       	out	0x3d, r28	; 61
    a150:	df 91       	pop	r29
    a152:	cf 91       	pop	r28
    a154:	08 95       	ret

0000a156 <Terminal>:

/************************************************************************
* Máquina de estados de recepción y transmision por terminal
************************************************************************/

void Terminal(void) {
    a156:	cf 92       	push	r12
    a158:	df 92       	push	r13
    a15a:	ef 92       	push	r14
    a15c:	ff 92       	push	r15
    a15e:	0f 93       	push	r16
    a160:	1f 93       	push	r17
    a162:	cf 93       	push	r28
    a164:	df 93       	push	r29
    a166:	cd b7       	in	r28, 0x3d	; 61
    a168:	de b7       	in	r29, 0x3e	; 62
    a16a:	62 97       	sbiw	r28, 0x12	; 18
    a16c:	0f b6       	in	r0, 0x3f	; 63
    a16e:	f8 94       	cli
    a170:	de bf       	out	0x3e, r29	; 62
    a172:	0f be       	out	0x3f, r0	; 63
    a174:	cd bf       	out	0x3d, r28	; 61
	switch (uchEstadoTerminal) {
    a176:	80 91 29 06 	lds	r24, 0x0629
    a17a:	88 2f       	mov	r24, r24
    a17c:	90 e0       	ldi	r25, 0x00	; 0
    a17e:	00 97       	sbiw	r24, 0x00	; 0
    a180:	21 f0       	breq	.+8      	; 0xa18a <Terminal+0x34>
    a182:	01 97       	sbiw	r24, 0x01	; 1
    a184:	b9 f0       	breq	.+46     	; 0xa1b4 <Terminal+0x5e>
    a186:	0c 94 40 7d 	jmp	0xfa80	; 0xfa80 <Terminal+0x592a>
		case TERMINAL_STANDBY:

			if (uchEstadoBufferRx_USART0 == LLENO) {		// si recibo desde el usuario
    a18a:	80 91 52 03 	lds	r24, 0x0352
    a18e:	81 30       	cpi	r24, 0x01	; 1
    a190:	79 f4       	brne	.+30     	; 0xa1b0 <Terminal+0x5a>
				String_a_Mayusculas (chBufferRx_USART0, USART0_BUFFER_ZISE);
    a192:	68 ec       	ldi	r22, 0xC8	; 200
    a194:	70 e0       	ldi	r23, 0x00	; 0
    a196:	81 e8       	ldi	r24, 0x81	; 129
    a198:	92 e0       	ldi	r25, 0x02	; 2
    a19a:	0e 94 ed 7f 	call	0xffda	; 0xffda <String_a_Mayusculas>
				auxIndexTerminal = 0;
    a19e:	10 92 2b 06 	sts	0x062B, r1
    a1a2:	10 92 2a 06 	sts	0x062A, r1
				uchEstadoTerminal = TERMINAL_PROCESO;
    a1a6:	81 e0       	ldi	r24, 0x01	; 1
    a1a8:	80 93 29 06 	sts	0x0629, r24
			}
			break;
    a1ac:	0c 94 4d 7d 	jmp	0xfa9a	; 0xfa9a <Terminal+0x5944>
    a1b0:	0c 94 4d 7d 	jmp	0xfa9a	; 0xfa9a <Terminal+0x5944>


		case TERMINAL_PROCESO:
			// chBufferRx_USART0 = INFO\0
			if (Detectar_Comando_Buffer_P(Comando_Info, chBufferRx_USART0)) {
    a1b4:	61 e8       	ldi	r22, 0x81	; 129
    a1b6:	72 e0       	ldi	r23, 0x02	; 2
    a1b8:	8b e7       	ldi	r24, 0x7B	; 123
    a1ba:	95 e0       	ldi	r25, 0x05	; 5
    a1bc:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    a1c0:	89 2b       	or	r24, r25
    a1c2:	41 f1       	breq	.+80     	; 0xa214 <Terminal+0xbe>
				sprintf(chBufferRx_USART0, "%S%s", (wchar_t*)Conductimetro_Info, chNumeroSerie);
    a1c4:	8f e1       	ldi	r24, 0x1F	; 31
    a1c6:	96 e0       	ldi	r25, 0x06	; 6
    a1c8:	89 2f       	mov	r24, r25
    a1ca:	8f 93       	push	r24
    a1cc:	8f e1       	ldi	r24, 0x1F	; 31
    a1ce:	96 e0       	ldi	r25, 0x06	; 6
    a1d0:	8f 93       	push	r24
    a1d2:	82 e1       	ldi	r24, 0x12	; 18
    a1d4:	95 e0       	ldi	r25, 0x05	; 5
    a1d6:	89 2f       	mov	r24, r25
    a1d8:	8f 93       	push	r24
    a1da:	82 e1       	ldi	r24, 0x12	; 18
    a1dc:	95 e0       	ldi	r25, 0x05	; 5
    a1de:	8f 93       	push	r24
    a1e0:	84 ee       	ldi	r24, 0xE4	; 228
    a1e2:	91 e0       	ldi	r25, 0x01	; 1
    a1e4:	89 2f       	mov	r24, r25
    a1e6:	8f 93       	push	r24
    a1e8:	84 ee       	ldi	r24, 0xE4	; 228
    a1ea:	91 e0       	ldi	r25, 0x01	; 1
    a1ec:	8f 93       	push	r24
    a1ee:	81 e8       	ldi	r24, 0x81	; 129
    a1f0:	92 e0       	ldi	r25, 0x02	; 2
    a1f2:	89 2f       	mov	r24, r25
    a1f4:	8f 93       	push	r24
    a1f6:	81 e8       	ldi	r24, 0x81	; 129
    a1f8:	92 e0       	ldi	r25, 0x02	; 2
    a1fa:	8f 93       	push	r24
    a1fc:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    a200:	8d b7       	in	r24, 0x3d	; 61
    a202:	9e b7       	in	r25, 0x3e	; 62
    a204:	08 96       	adiw	r24, 0x08	; 8
    a206:	0f b6       	in	r0, 0x3f	; 63
    a208:	f8 94       	cli
    a20a:	de bf       	out	0x3e, r29	; 62
    a20c:	0f be       	out	0x3f, r0	; 63
    a20e:	cd bf       	out	0x3d, r28	; 61
    a210:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
			}

			// chBufferRx_USART0 = SERIE xxxx.x\0
			else if (Detectar_Comando_Buffer_P(Comando_Serie, chBufferRx_USART0)) {
    a214:	61 e8       	ldi	r22, 0x81	; 129
    a216:	72 e0       	ldi	r23, 0x02	; 2
    a218:	87 ee       	ldi	r24, 0xE7	; 231
    a21a:	95 e0       	ldi	r25, 0x05	; 5
    a21c:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    a220:	89 2b       	or	r24, r25
    a222:	09 f4       	brne	.+2      	; 0xa226 <Terminal+0xd0>
    a224:	f3 c0       	rjmp	.+486    	; 0xa40c <Terminal+0x2b6>
				if ((*(chBufferRx_USART0+auxIndexTerminal) != '\0') && (*(chBufferRx_USART0+auxIndexTerminal) >= '!') && (*(chBufferRx_USART0+auxIndexTerminal) <= '}')) {
    a226:	80 91 2a 06 	lds	r24, 0x062A
    a22a:	90 91 2b 06 	lds	r25, 0x062B
    a22e:	8f 57       	subi	r24, 0x7F	; 127
    a230:	9d 4f       	sbci	r25, 0xFD	; 253
    a232:	fc 01       	movw	r30, r24
    a234:	80 81       	ld	r24, Z
    a236:	88 23       	and	r24, r24
    a238:	09 f4       	brne	.+2      	; 0xa23c <Terminal+0xe6>
    a23a:	c0 c0       	rjmp	.+384    	; 0xa3bc <Terminal+0x266>
    a23c:	80 91 2a 06 	lds	r24, 0x062A
    a240:	90 91 2b 06 	lds	r25, 0x062B
    a244:	8f 57       	subi	r24, 0x7F	; 127
    a246:	9d 4f       	sbci	r25, 0xFD	; 253
    a248:	fc 01       	movw	r30, r24
    a24a:	80 81       	ld	r24, Z
    a24c:	81 32       	cpi	r24, 0x21	; 33
    a24e:	08 f4       	brcc	.+2      	; 0xa252 <Terminal+0xfc>
    a250:	b5 c0       	rjmp	.+362    	; 0xa3bc <Terminal+0x266>
    a252:	80 91 2a 06 	lds	r24, 0x062A
    a256:	90 91 2b 06 	lds	r25, 0x062B
    a25a:	8f 57       	subi	r24, 0x7F	; 127
    a25c:	9d 4f       	sbci	r25, 0xFD	; 253
    a25e:	fc 01       	movw	r30, r24
    a260:	80 81       	ld	r24, Z
    a262:	8e 37       	cpi	r24, 0x7E	; 126
    a264:	08 f0       	brcs	.+2      	; 0xa268 <Terminal+0x112>
    a266:	aa c0       	rjmp	.+340    	; 0xa3bc <Terminal+0x266>
					int i=0;
    a268:	1a 82       	std	Y+2, r1	; 0x02
    a26a:	19 82       	std	Y+1, r1	; 0x01
					while ((*(chBufferRx_USART0+auxIndexTerminal+i) >= '!') && (*(chBufferRx_USART0+auxIndexTerminal+i) <= '}') && (i<NUMERO_SERIE_MAX_DIGITOS-1)) {
    a26c:	30 c0       	rjmp	.+96     	; 0xa2ce <Terminal+0x178>
						chNumeroSerie[i] = *(chBufferRx_USART0+auxIndexTerminal+i);
    a26e:	80 91 2a 06 	lds	r24, 0x062A
    a272:	90 91 2b 06 	lds	r25, 0x062B
    a276:	9c 01       	movw	r18, r24
    a278:	89 81       	ldd	r24, Y+1	; 0x01
    a27a:	9a 81       	ldd	r25, Y+2	; 0x02
    a27c:	82 0f       	add	r24, r18
    a27e:	93 1f       	adc	r25, r19
    a280:	8f 57       	subi	r24, 0x7F	; 127
    a282:	9d 4f       	sbci	r25, 0xFD	; 253
    a284:	fc 01       	movw	r30, r24
    a286:	20 81       	ld	r18, Z
    a288:	89 81       	ldd	r24, Y+1	; 0x01
    a28a:	9a 81       	ldd	r25, Y+2	; 0x02
    a28c:	81 5e       	subi	r24, 0xE1	; 225
    a28e:	99 4f       	sbci	r25, 0xF9	; 249
    a290:	fc 01       	movw	r30, r24
    a292:	20 83       	st	Z, r18
						Char_a_Eeprom (chNumeroSerie_Eeprom+i, chNumeroSerie+i);
    a294:	89 81       	ldd	r24, Y+1	; 0x01
    a296:	9a 81       	ldd	r25, Y+2	; 0x02
    a298:	9c 01       	movw	r18, r24
    a29a:	21 5e       	subi	r18, 0xE1	; 225
    a29c:	39 4f       	sbci	r19, 0xF9	; 249
    a29e:	89 81       	ldd	r24, Y+1	; 0x01
    a2a0:	9a 81       	ldd	r25, Y+2	; 0x02
    a2a2:	8a 59       	subi	r24, 0x9A	; 154
    a2a4:	9b 4f       	sbci	r25, 0xFB	; 251
    a2a6:	b9 01       	movw	r22, r18
    a2a8:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <Char_a_Eeprom>
						Char_a_Eeprom (chNumeroSerie_Eeprom_BK+i, chNumeroSerie+i);
    a2ac:	89 81       	ldd	r24, Y+1	; 0x01
    a2ae:	9a 81       	ldd	r25, Y+2	; 0x02
    a2b0:	9c 01       	movw	r18, r24
    a2b2:	21 5e       	subi	r18, 0xE1	; 225
    a2b4:	39 4f       	sbci	r19, 0xF9	; 249
    a2b6:	89 81       	ldd	r24, Y+1	; 0x01
    a2b8:	9a 81       	ldd	r25, Y+2	; 0x02
    a2ba:	8c 55       	subi	r24, 0x5C	; 92
    a2bc:	9b 4f       	sbci	r25, 0xFB	; 251
    a2be:	b9 01       	movw	r22, r18
    a2c0:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <Char_a_Eeprom>
						i++;
    a2c4:	89 81       	ldd	r24, Y+1	; 0x01
    a2c6:	9a 81       	ldd	r25, Y+2	; 0x02
    a2c8:	01 96       	adiw	r24, 0x01	; 1
    a2ca:	9a 83       	std	Y+2, r25	; 0x02
    a2cc:	89 83       	std	Y+1, r24	; 0x01

			// chBufferRx_USART0 = SERIE xxxx.x\0
			else if (Detectar_Comando_Buffer_P(Comando_Serie, chBufferRx_USART0)) {
				if ((*(chBufferRx_USART0+auxIndexTerminal) != '\0') && (*(chBufferRx_USART0+auxIndexTerminal) >= '!') && (*(chBufferRx_USART0+auxIndexTerminal) <= '}')) {
					int i=0;
					while ((*(chBufferRx_USART0+auxIndexTerminal+i) >= '!') && (*(chBufferRx_USART0+auxIndexTerminal+i) <= '}') && (i<NUMERO_SERIE_MAX_DIGITOS-1)) {
    a2ce:	80 91 2a 06 	lds	r24, 0x062A
    a2d2:	90 91 2b 06 	lds	r25, 0x062B
    a2d6:	9c 01       	movw	r18, r24
    a2d8:	89 81       	ldd	r24, Y+1	; 0x01
    a2da:	9a 81       	ldd	r25, Y+2	; 0x02
    a2dc:	82 0f       	add	r24, r18
    a2de:	93 1f       	adc	r25, r19
    a2e0:	8f 57       	subi	r24, 0x7F	; 127
    a2e2:	9d 4f       	sbci	r25, 0xFD	; 253
    a2e4:	fc 01       	movw	r30, r24
    a2e6:	80 81       	ld	r24, Z
    a2e8:	81 32       	cpi	r24, 0x21	; 33
    a2ea:	a0 f0       	brcs	.+40     	; 0xa314 <Terminal+0x1be>
    a2ec:	80 91 2a 06 	lds	r24, 0x062A
    a2f0:	90 91 2b 06 	lds	r25, 0x062B
    a2f4:	9c 01       	movw	r18, r24
    a2f6:	89 81       	ldd	r24, Y+1	; 0x01
    a2f8:	9a 81       	ldd	r25, Y+2	; 0x02
    a2fa:	82 0f       	add	r24, r18
    a2fc:	93 1f       	adc	r25, r19
    a2fe:	8f 57       	subi	r24, 0x7F	; 127
    a300:	9d 4f       	sbci	r25, 0xFD	; 253
    a302:	fc 01       	movw	r30, r24
    a304:	80 81       	ld	r24, Z
    a306:	8e 37       	cpi	r24, 0x7E	; 126
    a308:	28 f4       	brcc	.+10     	; 0xa314 <Terminal+0x1be>
    a30a:	89 81       	ldd	r24, Y+1	; 0x01
    a30c:	9a 81       	ldd	r25, Y+2	; 0x02
    a30e:	09 97       	sbiw	r24, 0x09	; 9
    a310:	0c f4       	brge	.+2      	; 0xa314 <Terminal+0x1be>
    a312:	ad cf       	rjmp	.-166    	; 0xa26e <Terminal+0x118>
						chNumeroSerie[i] = *(chBufferRx_USART0+auxIndexTerminal+i);
						Char_a_Eeprom (chNumeroSerie_Eeprom+i, chNumeroSerie+i);
						Char_a_Eeprom (chNumeroSerie_Eeprom_BK+i, chNumeroSerie+i);
						i++;
					}
					while (i<NUMERO_SERIE_MAX_DIGITOS) {
    a314:	23 c0       	rjmp	.+70     	; 0xa35c <Terminal+0x206>
						chNumeroSerie[i] = '\0';
    a316:	89 81       	ldd	r24, Y+1	; 0x01
    a318:	9a 81       	ldd	r25, Y+2	; 0x02
    a31a:	81 5e       	subi	r24, 0xE1	; 225
    a31c:	99 4f       	sbci	r25, 0xF9	; 249
    a31e:	fc 01       	movw	r30, r24
    a320:	10 82       	st	Z, r1
						Char_a_Eeprom (chNumeroSerie_Eeprom+i, chNumeroSerie+i);
    a322:	89 81       	ldd	r24, Y+1	; 0x01
    a324:	9a 81       	ldd	r25, Y+2	; 0x02
    a326:	9c 01       	movw	r18, r24
    a328:	21 5e       	subi	r18, 0xE1	; 225
    a32a:	39 4f       	sbci	r19, 0xF9	; 249
    a32c:	89 81       	ldd	r24, Y+1	; 0x01
    a32e:	9a 81       	ldd	r25, Y+2	; 0x02
    a330:	8a 59       	subi	r24, 0x9A	; 154
    a332:	9b 4f       	sbci	r25, 0xFB	; 251
    a334:	b9 01       	movw	r22, r18
    a336:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <Char_a_Eeprom>
						Char_a_Eeprom (chNumeroSerie_Eeprom_BK+i, chNumeroSerie+i);
    a33a:	89 81       	ldd	r24, Y+1	; 0x01
    a33c:	9a 81       	ldd	r25, Y+2	; 0x02
    a33e:	9c 01       	movw	r18, r24
    a340:	21 5e       	subi	r18, 0xE1	; 225
    a342:	39 4f       	sbci	r19, 0xF9	; 249
    a344:	89 81       	ldd	r24, Y+1	; 0x01
    a346:	9a 81       	ldd	r25, Y+2	; 0x02
    a348:	8c 55       	subi	r24, 0x5C	; 92
    a34a:	9b 4f       	sbci	r25, 0xFB	; 251
    a34c:	b9 01       	movw	r22, r18
    a34e:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <Char_a_Eeprom>
						i++;
    a352:	89 81       	ldd	r24, Y+1	; 0x01
    a354:	9a 81       	ldd	r25, Y+2	; 0x02
    a356:	01 96       	adiw	r24, 0x01	; 1
    a358:	9a 83       	std	Y+2, r25	; 0x02
    a35a:	89 83       	std	Y+1, r24	; 0x01
						chNumeroSerie[i] = *(chBufferRx_USART0+auxIndexTerminal+i);
						Char_a_Eeprom (chNumeroSerie_Eeprom+i, chNumeroSerie+i);
						Char_a_Eeprom (chNumeroSerie_Eeprom_BK+i, chNumeroSerie+i);
						i++;
					}
					while (i<NUMERO_SERIE_MAX_DIGITOS) {
    a35c:	89 81       	ldd	r24, Y+1	; 0x01
    a35e:	9a 81       	ldd	r25, Y+2	; 0x02
    a360:	0a 97       	sbiw	r24, 0x0a	; 10
    a362:	cc f2       	brlt	.-78     	; 0xa316 <Terminal+0x1c0>
						chNumeroSerie[i] = '\0';
						Char_a_Eeprom (chNumeroSerie_Eeprom+i, chNumeroSerie+i);
						Char_a_Eeprom (chNumeroSerie_Eeprom_BK+i, chNumeroSerie+i);
						i++;
					}
					Escribir_Checksum_Eeprom (GRUPO_SERIE);
    a364:	80 e0       	ldi	r24, 0x00	; 0
    a366:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %s", (wchar_t*)Comando_Serie, chNumeroSerie);
    a36a:	8f e1       	ldi	r24, 0x1F	; 31
    a36c:	96 e0       	ldi	r25, 0x06	; 6
    a36e:	89 2f       	mov	r24, r25
    a370:	8f 93       	push	r24
    a372:	8f e1       	ldi	r24, 0x1F	; 31
    a374:	96 e0       	ldi	r25, 0x06	; 6
    a376:	8f 93       	push	r24
    a378:	87 ee       	ldi	r24, 0xE7	; 231
    a37a:	95 e0       	ldi	r25, 0x05	; 5
    a37c:	89 2f       	mov	r24, r25
    a37e:	8f 93       	push	r24
    a380:	87 ee       	ldi	r24, 0xE7	; 231
    a382:	95 e0       	ldi	r25, 0x05	; 5
    a384:	8f 93       	push	r24
    a386:	89 ee       	ldi	r24, 0xE9	; 233
    a388:	91 e0       	ldi	r25, 0x01	; 1
    a38a:	89 2f       	mov	r24, r25
    a38c:	8f 93       	push	r24
    a38e:	89 ee       	ldi	r24, 0xE9	; 233
    a390:	91 e0       	ldi	r25, 0x01	; 1
    a392:	8f 93       	push	r24
    a394:	81 e8       	ldi	r24, 0x81	; 129
    a396:	92 e0       	ldi	r25, 0x02	; 2
    a398:	89 2f       	mov	r24, r25
    a39a:	8f 93       	push	r24
    a39c:	81 e8       	ldi	r24, 0x81	; 129
    a39e:	92 e0       	ldi	r25, 0x02	; 2
    a3a0:	8f 93       	push	r24
    a3a2:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    a3a6:	8d b7       	in	r24, 0x3d	; 61
    a3a8:	9e b7       	in	r25, 0x3e	; 62
    a3aa:	08 96       	adiw	r24, 0x08	; 8
    a3ac:	0f b6       	in	r0, 0x3f	; 63
    a3ae:	f8 94       	cli
    a3b0:	de bf       	out	0x3e, r29	; 62
    a3b2:	0f be       	out	0x3f, r0	; 63
    a3b4:	cd bf       	out	0x3d, r28	; 61
				sprintf(chBufferRx_USART0, "%S%s", (wchar_t*)Conductimetro_Info, chNumeroSerie);
			}

			// chBufferRx_USART0 = SERIE xxxx.x\0
			else if (Detectar_Comando_Buffer_P(Comando_Serie, chBufferRx_USART0)) {
				if ((*(chBufferRx_USART0+auxIndexTerminal) != '\0') && (*(chBufferRx_USART0+auxIndexTerminal) >= '!') && (*(chBufferRx_USART0+auxIndexTerminal) <= '}')) {
    a3b6:	00 00       	nop
    a3b8:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
					}
					Escribir_Checksum_Eeprom (GRUPO_SERIE);
					sprintf(chBufferRx_USART0, "%S: %s", (wchar_t*)Comando_Serie, chNumeroSerie);
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?'){
					sprintf(chBufferRx_USART0, "%S: %s", (wchar_t*)Comando_Serie, chNumeroSerie);
    a3bc:	8f e1       	ldi	r24, 0x1F	; 31
    a3be:	96 e0       	ldi	r25, 0x06	; 6
    a3c0:	89 2f       	mov	r24, r25
    a3c2:	8f 93       	push	r24
    a3c4:	8f e1       	ldi	r24, 0x1F	; 31
    a3c6:	96 e0       	ldi	r25, 0x06	; 6
    a3c8:	8f 93       	push	r24
    a3ca:	87 ee       	ldi	r24, 0xE7	; 231
    a3cc:	95 e0       	ldi	r25, 0x05	; 5
    a3ce:	89 2f       	mov	r24, r25
    a3d0:	8f 93       	push	r24
    a3d2:	87 ee       	ldi	r24, 0xE7	; 231
    a3d4:	95 e0       	ldi	r25, 0x05	; 5
    a3d6:	8f 93       	push	r24
    a3d8:	89 ee       	ldi	r24, 0xE9	; 233
    a3da:	91 e0       	ldi	r25, 0x01	; 1
    a3dc:	89 2f       	mov	r24, r25
    a3de:	8f 93       	push	r24
    a3e0:	89 ee       	ldi	r24, 0xE9	; 233
    a3e2:	91 e0       	ldi	r25, 0x01	; 1
    a3e4:	8f 93       	push	r24
    a3e6:	81 e8       	ldi	r24, 0x81	; 129
    a3e8:	92 e0       	ldi	r25, 0x02	; 2
    a3ea:	89 2f       	mov	r24, r25
    a3ec:	8f 93       	push	r24
    a3ee:	81 e8       	ldi	r24, 0x81	; 129
    a3f0:	92 e0       	ldi	r25, 0x02	; 2
    a3f2:	8f 93       	push	r24
    a3f4:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    a3f8:	ed b7       	in	r30, 0x3d	; 61
    a3fa:	fe b7       	in	r31, 0x3e	; 62
    a3fc:	38 96       	adiw	r30, 0x08	; 8
    a3fe:	0f b6       	in	r0, 0x3f	; 63
    a400:	f8 94       	cli
    a402:	de bf       	out	0x3e, r29	; 62
    a404:	0f be       	out	0x3f, r0	; 63
    a406:	cd bf       	out	0x3d, r28	; 61
    a408:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = RANGO COND 1 xxxx.x\0
			else if (Detectar_Comando_Buffer_P(Comando_Rango_1, chBufferRx_USART0)) {
    a40c:	61 e8       	ldi	r22, 0x81	; 129
    a40e:	72 e0       	ldi	r23, 0x02	; 2
    a410:	88 e0       	ldi	r24, 0x08	; 8
    a412:	97 e0       	ldi	r25, 0x07	; 7
    a414:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    a418:	89 2b       	or	r24, r25
    a41a:	09 f4       	brne	.+2      	; 0xa41e <Terminal+0x2c8>
    a41c:	68 c4       	rjmp	.+2256   	; 0xacee <Terminal+0xb98>
				if (Detectar_Comando_Buffer_P(MSG_Rango_0_20_C, chBufferRx_USART0+auxIndexTerminal)) {
    a41e:	80 91 2a 06 	lds	r24, 0x062A
    a422:	90 91 2b 06 	lds	r25, 0x062B
    a426:	8f 57       	subi	r24, 0x7F	; 127
    a428:	9d 4f       	sbci	r25, 0xFD	; 253
    a42a:	bc 01       	movw	r22, r24
    a42c:	86 ea       	ldi	r24, 0xA6	; 166
    a42e:	97 e0       	ldi	r25, 0x07	; 7
    a430:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    a434:	89 2b       	or	r24, r25
    a436:	09 f4       	brne	.+2      	; 0xa43a <Terminal+0x2e4>
    a438:	7a c0       	rjmp	.+244    	; 0xa52e <Terminal+0x3d8>
					uRangoCond1 = COND_0_20_C;
    a43a:	85 e0       	ldi	r24, 0x05	; 5
    a43c:	90 e0       	ldi	r25, 0x00	; 0
    a43e:	90 93 ea 04 	sts	0x04EA, r25
    a442:	80 93 e9 04 	sts	0x04E9, r24
					uMuestrasADCcond1 = DEFAULT_MUESTRAS_COND1;
    a446:	84 ef       	ldi	r24, 0xF4	; 244
    a448:	91 e0       	ldi	r25, 0x01	; 1
    a44a:	90 93 02 05 	sts	0x0502, r25
    a44e:	80 93 01 05 	sts	0x0501, r24
					flCond1auS = DEFAULT_COND020C_A_US;
    a452:	87 ee       	ldi	r24, 0xE7	; 231
    a454:	9d e1       	ldi	r25, 0x1D	; 29
    a456:	a7 ea       	ldi	r26, 0xA7	; 167
    a458:	bc e3       	ldi	r27, 0x3C	; 60
    a45a:	80 93 0d 05 	sts	0x050D, r24
    a45e:	90 93 0e 05 	sts	0x050E, r25
    a462:	a0 93 0f 05 	sts	0x050F, r26
    a466:	b0 93 10 05 	sts	0x0510, r27
					flOffsetCond1 = DEFAULT_COND020C_OFFSET;
    a46a:	10 92 f8 04 	sts	0x04F8, r1
    a46e:	10 92 f9 04 	sts	0x04F9, r1
    a472:	10 92 fa 04 	sts	0x04FA, r1
    a476:	10 92 fb 04 	sts	0x04FB, r1

					UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom, &uRangoCond1);
    a47a:	69 ee       	ldi	r22, 0xE9	; 233
    a47c:	74 e0       	ldi	r23, 0x04	; 4
    a47e:	84 e6       	ldi	r24, 0x64	; 100
    a480:	94 e0       	ldi	r25, 0x04	; 4
    a482:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom, &uMuestrasADCcond1);
    a486:	61 e0       	ldi	r22, 0x01	; 1
    a488:	75 e0       	ldi	r23, 0x05	; 5
    a48a:	8a e9       	ldi	r24, 0x9A	; 154
    a48c:	94 e0       	ldi	r25, 0x04	; 4
    a48e:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond1auS_Eeprom, &flCond1auS);
    a492:	6d e0       	ldi	r22, 0x0D	; 13
    a494:	75 e0       	ldi	r23, 0x05	; 5
    a496:	8e ed       	ldi	r24, 0xDE	; 222
    a498:	94 e0       	ldi	r25, 0x04	; 4
    a49a:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond1_Eeprom, &flOffsetCond1);
    a49e:	68 ef       	ldi	r22, 0xF8	; 248
    a4a0:	74 e0       	ldi	r23, 0x04	; 4
    a4a2:	80 ec       	ldi	r24, 0xC0	; 192
    a4a4:	94 e0       	ldi	r25, 0x04	; 4
    a4a6:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom_BK, &uRangoCond1);
    a4aa:	69 ee       	ldi	r22, 0xE9	; 233
    a4ac:	74 e0       	ldi	r23, 0x04	; 4
    a4ae:	82 e6       	ldi	r24, 0x62	; 98
    a4b0:	94 e0       	ldi	r25, 0x04	; 4
    a4b2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom_BK, &uMuestrasADCcond1);
    a4b6:	61 e0       	ldi	r22, 0x01	; 1
    a4b8:	75 e0       	ldi	r23, 0x05	; 5
    a4ba:	8a e8       	ldi	r24, 0x8A	; 138
    a4bc:	94 e0       	ldi	r25, 0x04	; 4
    a4be:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond1auS_Eeprom_BK, &flCond1auS);
    a4c2:	6d e0       	ldi	r22, 0x0D	; 13
    a4c4:	75 e0       	ldi	r23, 0x05	; 5
    a4c6:	8c eb       	ldi	r24, 0xBC	; 188
    a4c8:	94 e0       	ldi	r25, 0x04	; 4
    a4ca:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond1_Eeprom_BK, &flOffsetCond1);
    a4ce:	68 ef       	ldi	r22, 0xF8	; 248
    a4d0:	74 e0       	ldi	r23, 0x04	; 4
    a4d2:	86 ed       	ldi	r24, 0xD6	; 214
    a4d4:	94 e0       	ldi	r25, 0x04	; 4
    a4d6:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    a4da:	82 e0       	ldi	r24, 0x02	; 2
    a4dc:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_1, (wchar_t*)MSG_Rango_0_20_C);
    a4e0:	86 ea       	ldi	r24, 0xA6	; 166
    a4e2:	97 e0       	ldi	r25, 0x07	; 7
    a4e4:	89 2f       	mov	r24, r25
    a4e6:	8f 93       	push	r24
    a4e8:	86 ea       	ldi	r24, 0xA6	; 166
    a4ea:	97 e0       	ldi	r25, 0x07	; 7
    a4ec:	8f 93       	push	r24
    a4ee:	88 e0       	ldi	r24, 0x08	; 8
    a4f0:	97 e0       	ldi	r25, 0x07	; 7
    a4f2:	89 2f       	mov	r24, r25
    a4f4:	8f 93       	push	r24
    a4f6:	88 e0       	ldi	r24, 0x08	; 8
    a4f8:	97 e0       	ldi	r25, 0x07	; 7
    a4fa:	8f 93       	push	r24
    a4fc:	80 ef       	ldi	r24, 0xF0	; 240
    a4fe:	91 e0       	ldi	r25, 0x01	; 1
    a500:	89 2f       	mov	r24, r25
    a502:	8f 93       	push	r24
    a504:	80 ef       	ldi	r24, 0xF0	; 240
    a506:	91 e0       	ldi	r25, 0x01	; 1
    a508:	8f 93       	push	r24
    a50a:	81 e8       	ldi	r24, 0x81	; 129
    a50c:	92 e0       	ldi	r25, 0x02	; 2
    a50e:	89 2f       	mov	r24, r25
    a510:	8f 93       	push	r24
    a512:	81 e8       	ldi	r24, 0x81	; 129
    a514:	92 e0       	ldi	r25, 0x02	; 2
    a516:	8f 93       	push	r24
    a518:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    a51c:	8d b7       	in	r24, 0x3d	; 61
    a51e:	9e b7       	in	r25, 0x3e	; 62
    a520:	08 96       	adiw	r24, 0x08	; 8
    a522:	0f b6       	in	r0, 0x3f	; 63
    a524:	f8 94       	cli
    a526:	de bf       	out	0x3e, r29	; 62
    a528:	0f be       	out	0x3f, r0	; 63
    a52a:	cd bf       	out	0x3d, r28	; 61
    a52c:	dc c3       	rjmp	.+1976   	; 0xace6 <Terminal+0xb90>
				}
				else if (Detectar_Comando_Buffer_P(MSG_Rango_0_20_G, chBufferRx_USART0+auxIndexTerminal)) {
    a52e:	80 91 2a 06 	lds	r24, 0x062A
    a532:	90 91 2b 06 	lds	r25, 0x062B
    a536:	8f 57       	subi	r24, 0x7F	; 127
    a538:	9d 4f       	sbci	r25, 0xFD	; 253
    a53a:	bc 01       	movw	r22, r24
    a53c:	8f e9       	ldi	r24, 0x9F	; 159
    a53e:	97 e0       	ldi	r25, 0x07	; 7
    a540:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    a544:	89 2b       	or	r24, r25
    a546:	09 f4       	brne	.+2      	; 0xa54a <Terminal+0x3f4>
    a548:	7a c0       	rjmp	.+244    	; 0xa63e <Terminal+0x4e8>
					uRangoCond1 = COND_0_20_G;
    a54a:	82 e0       	ldi	r24, 0x02	; 2
    a54c:	90 e0       	ldi	r25, 0x00	; 0
    a54e:	90 93 ea 04 	sts	0x04EA, r25
    a552:	80 93 e9 04 	sts	0x04E9, r24
					uMuestrasADCcond1 = DEFAULT_MUESTRAS_COND1;
    a556:	84 ef       	ldi	r24, 0xF4	; 244
    a558:	91 e0       	ldi	r25, 0x01	; 1
    a55a:	90 93 02 05 	sts	0x0502, r25
    a55e:	80 93 01 05 	sts	0x0501, r24
					flCond1auS = DEFAULT_COND020G_A_US;
    a562:	8d e4       	ldi	r24, 0x4D	; 77
    a564:	95 e1       	ldi	r25, 0x15	; 21
    a566:	ac e8       	ldi	r26, 0x8C	; 140
    a568:	bc e3       	ldi	r27, 0x3C	; 60
    a56a:	80 93 0d 05 	sts	0x050D, r24
    a56e:	90 93 0e 05 	sts	0x050E, r25
    a572:	a0 93 0f 05 	sts	0x050F, r26
    a576:	b0 93 10 05 	sts	0x0510, r27
					flOffsetCond1 = DEFAULT_COND020G_OFFSET;
    a57a:	10 92 f8 04 	sts	0x04F8, r1
    a57e:	10 92 f9 04 	sts	0x04F9, r1
    a582:	10 92 fa 04 	sts	0x04FA, r1
    a586:	10 92 fb 04 	sts	0x04FB, r1

					UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom, &uRangoCond1);
    a58a:	69 ee       	ldi	r22, 0xE9	; 233
    a58c:	74 e0       	ldi	r23, 0x04	; 4
    a58e:	84 e6       	ldi	r24, 0x64	; 100
    a590:	94 e0       	ldi	r25, 0x04	; 4
    a592:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom, &uMuestrasADCcond1);
    a596:	61 e0       	ldi	r22, 0x01	; 1
    a598:	75 e0       	ldi	r23, 0x05	; 5
    a59a:	8a e9       	ldi	r24, 0x9A	; 154
    a59c:	94 e0       	ldi	r25, 0x04	; 4
    a59e:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond1auS_Eeprom, &flCond1auS);
    a5a2:	6d e0       	ldi	r22, 0x0D	; 13
    a5a4:	75 e0       	ldi	r23, 0x05	; 5
    a5a6:	8e ed       	ldi	r24, 0xDE	; 222
    a5a8:	94 e0       	ldi	r25, 0x04	; 4
    a5aa:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond1_Eeprom, &flOffsetCond1);
    a5ae:	68 ef       	ldi	r22, 0xF8	; 248
    a5b0:	74 e0       	ldi	r23, 0x04	; 4
    a5b2:	80 ec       	ldi	r24, 0xC0	; 192
    a5b4:	94 e0       	ldi	r25, 0x04	; 4
    a5b6:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom_BK, &uRangoCond1);
    a5ba:	69 ee       	ldi	r22, 0xE9	; 233
    a5bc:	74 e0       	ldi	r23, 0x04	; 4
    a5be:	82 e6       	ldi	r24, 0x62	; 98
    a5c0:	94 e0       	ldi	r25, 0x04	; 4
    a5c2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom_BK, &uMuestrasADCcond1);
    a5c6:	61 e0       	ldi	r22, 0x01	; 1
    a5c8:	75 e0       	ldi	r23, 0x05	; 5
    a5ca:	8a e8       	ldi	r24, 0x8A	; 138
    a5cc:	94 e0       	ldi	r25, 0x04	; 4
    a5ce:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond1auS_Eeprom_BK, &flCond1auS);
    a5d2:	6d e0       	ldi	r22, 0x0D	; 13
    a5d4:	75 e0       	ldi	r23, 0x05	; 5
    a5d6:	8c eb       	ldi	r24, 0xBC	; 188
    a5d8:	94 e0       	ldi	r25, 0x04	; 4
    a5da:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond1_Eeprom_BK, &flOffsetCond1);
    a5de:	68 ef       	ldi	r22, 0xF8	; 248
    a5e0:	74 e0       	ldi	r23, 0x04	; 4
    a5e2:	86 ed       	ldi	r24, 0xD6	; 214
    a5e4:	94 e0       	ldi	r25, 0x04	; 4
    a5e6:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    a5ea:	82 e0       	ldi	r24, 0x02	; 2
    a5ec:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_1, (wchar_t*)MSG_Rango_0_20_G);
    a5f0:	8f e9       	ldi	r24, 0x9F	; 159
    a5f2:	97 e0       	ldi	r25, 0x07	; 7
    a5f4:	89 2f       	mov	r24, r25
    a5f6:	8f 93       	push	r24
    a5f8:	8f e9       	ldi	r24, 0x9F	; 159
    a5fa:	97 e0       	ldi	r25, 0x07	; 7
    a5fc:	8f 93       	push	r24
    a5fe:	88 e0       	ldi	r24, 0x08	; 8
    a600:	97 e0       	ldi	r25, 0x07	; 7
    a602:	89 2f       	mov	r24, r25
    a604:	8f 93       	push	r24
    a606:	88 e0       	ldi	r24, 0x08	; 8
    a608:	97 e0       	ldi	r25, 0x07	; 7
    a60a:	8f 93       	push	r24
    a60c:	80 ef       	ldi	r24, 0xF0	; 240
    a60e:	91 e0       	ldi	r25, 0x01	; 1
    a610:	89 2f       	mov	r24, r25
    a612:	8f 93       	push	r24
    a614:	80 ef       	ldi	r24, 0xF0	; 240
    a616:	91 e0       	ldi	r25, 0x01	; 1
    a618:	8f 93       	push	r24
    a61a:	81 e8       	ldi	r24, 0x81	; 129
    a61c:	92 e0       	ldi	r25, 0x02	; 2
    a61e:	89 2f       	mov	r24, r25
    a620:	8f 93       	push	r24
    a622:	81 e8       	ldi	r24, 0x81	; 129
    a624:	92 e0       	ldi	r25, 0x02	; 2
    a626:	8f 93       	push	r24
    a628:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    a62c:	ed b7       	in	r30, 0x3d	; 61
    a62e:	fe b7       	in	r31, 0x3e	; 62
    a630:	38 96       	adiw	r30, 0x08	; 8
    a632:	0f b6       	in	r0, 0x3f	; 63
    a634:	f8 94       	cli
    a636:	de bf       	out	0x3e, r29	; 62
    a638:	0f be       	out	0x3f, r0	; 63
    a63a:	cd bf       	out	0x3d, r28	; 61
    a63c:	54 c3       	rjmp	.+1704   	; 0xace6 <Terminal+0xb90>
				}
				else if (Detectar_Comando_Buffer_P(MSG_Rango_2_200_C, chBufferRx_USART0+auxIndexTerminal)) {
    a63e:	80 91 2a 06 	lds	r24, 0x062A
    a642:	90 91 2b 06 	lds	r25, 0x062B
    a646:	8f 57       	subi	r24, 0x7F	; 127
    a648:	9d 4f       	sbci	r25, 0xFD	; 253
    a64a:	bc 01       	movw	r22, r24
    a64c:	85 eb       	ldi	r24, 0xB5	; 181
    a64e:	97 e0       	ldi	r25, 0x07	; 7
    a650:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    a654:	89 2b       	or	r24, r25
    a656:	09 f4       	brne	.+2      	; 0xa65a <Terminal+0x504>
    a658:	7a c0       	rjmp	.+244    	; 0xa74e <Terminal+0x5f8>
					uRangoCond1 = COND_2_200_C;
    a65a:	86 e0       	ldi	r24, 0x06	; 6
    a65c:	90 e0       	ldi	r25, 0x00	; 0
    a65e:	90 93 ea 04 	sts	0x04EA, r25
    a662:	80 93 e9 04 	sts	0x04E9, r24
					uMuestrasADCcond1 = DEFAULT_MUESTRAS_COND1;
    a666:	84 ef       	ldi	r24, 0xF4	; 244
    a668:	91 e0       	ldi	r25, 0x01	; 1
    a66a:	90 93 02 05 	sts	0x0502, r25
    a66e:	80 93 01 05 	sts	0x0501, r24
					flCond1auS = DEFAULT_COND2200C_A_US;
    a672:	83 e0       	ldi	r24, 0x03	; 3
    a674:	99 e0       	ldi	r25, 0x09	; 9
    a676:	aa e4       	ldi	r26, 0x4A	; 74
    a678:	be e3       	ldi	r27, 0x3E	; 62
    a67a:	80 93 0d 05 	sts	0x050D, r24
    a67e:	90 93 0e 05 	sts	0x050E, r25
    a682:	a0 93 0f 05 	sts	0x050F, r26
    a686:	b0 93 10 05 	sts	0x0510, r27
					flOffsetCond1 = DEFAULT_COND2200C_OFFSET;
    a68a:	10 92 f8 04 	sts	0x04F8, r1
    a68e:	10 92 f9 04 	sts	0x04F9, r1
    a692:	10 92 fa 04 	sts	0x04FA, r1
    a696:	10 92 fb 04 	sts	0x04FB, r1

					UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom, &uRangoCond1);
    a69a:	69 ee       	ldi	r22, 0xE9	; 233
    a69c:	74 e0       	ldi	r23, 0x04	; 4
    a69e:	84 e6       	ldi	r24, 0x64	; 100
    a6a0:	94 e0       	ldi	r25, 0x04	; 4
    a6a2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom, &uMuestrasADCcond1);
    a6a6:	61 e0       	ldi	r22, 0x01	; 1
    a6a8:	75 e0       	ldi	r23, 0x05	; 5
    a6aa:	8a e9       	ldi	r24, 0x9A	; 154
    a6ac:	94 e0       	ldi	r25, 0x04	; 4
    a6ae:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond1auS_Eeprom, &flCond1auS);
    a6b2:	6d e0       	ldi	r22, 0x0D	; 13
    a6b4:	75 e0       	ldi	r23, 0x05	; 5
    a6b6:	8e ed       	ldi	r24, 0xDE	; 222
    a6b8:	94 e0       	ldi	r25, 0x04	; 4
    a6ba:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond1_Eeprom, &flOffsetCond1);
    a6be:	68 ef       	ldi	r22, 0xF8	; 248
    a6c0:	74 e0       	ldi	r23, 0x04	; 4
    a6c2:	80 ec       	ldi	r24, 0xC0	; 192
    a6c4:	94 e0       	ldi	r25, 0x04	; 4
    a6c6:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom_BK, &uRangoCond1);
    a6ca:	69 ee       	ldi	r22, 0xE9	; 233
    a6cc:	74 e0       	ldi	r23, 0x04	; 4
    a6ce:	82 e6       	ldi	r24, 0x62	; 98
    a6d0:	94 e0       	ldi	r25, 0x04	; 4
    a6d2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom_BK, &uMuestrasADCcond1);
    a6d6:	61 e0       	ldi	r22, 0x01	; 1
    a6d8:	75 e0       	ldi	r23, 0x05	; 5
    a6da:	8a e8       	ldi	r24, 0x8A	; 138
    a6dc:	94 e0       	ldi	r25, 0x04	; 4
    a6de:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond1auS_Eeprom_BK, &flCond1auS);
    a6e2:	6d e0       	ldi	r22, 0x0D	; 13
    a6e4:	75 e0       	ldi	r23, 0x05	; 5
    a6e6:	8c eb       	ldi	r24, 0xBC	; 188
    a6e8:	94 e0       	ldi	r25, 0x04	; 4
    a6ea:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond1_Eeprom_BK, &flOffsetCond1);
    a6ee:	68 ef       	ldi	r22, 0xF8	; 248
    a6f0:	74 e0       	ldi	r23, 0x04	; 4
    a6f2:	86 ed       	ldi	r24, 0xD6	; 214
    a6f4:	94 e0       	ldi	r25, 0x04	; 4
    a6f6:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    a6fa:	82 e0       	ldi	r24, 0x02	; 2
    a6fc:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_1, (wchar_t*)MSG_Rango_2_200_C);
    a700:	85 eb       	ldi	r24, 0xB5	; 181
    a702:	97 e0       	ldi	r25, 0x07	; 7
    a704:	89 2f       	mov	r24, r25
    a706:	8f 93       	push	r24
    a708:	85 eb       	ldi	r24, 0xB5	; 181
    a70a:	97 e0       	ldi	r25, 0x07	; 7
    a70c:	8f 93       	push	r24
    a70e:	88 e0       	ldi	r24, 0x08	; 8
    a710:	97 e0       	ldi	r25, 0x07	; 7
    a712:	89 2f       	mov	r24, r25
    a714:	8f 93       	push	r24
    a716:	88 e0       	ldi	r24, 0x08	; 8
    a718:	97 e0       	ldi	r25, 0x07	; 7
    a71a:	8f 93       	push	r24
    a71c:	80 ef       	ldi	r24, 0xF0	; 240
    a71e:	91 e0       	ldi	r25, 0x01	; 1
    a720:	89 2f       	mov	r24, r25
    a722:	8f 93       	push	r24
    a724:	80 ef       	ldi	r24, 0xF0	; 240
    a726:	91 e0       	ldi	r25, 0x01	; 1
    a728:	8f 93       	push	r24
    a72a:	81 e8       	ldi	r24, 0x81	; 129
    a72c:	92 e0       	ldi	r25, 0x02	; 2
    a72e:	89 2f       	mov	r24, r25
    a730:	8f 93       	push	r24
    a732:	81 e8       	ldi	r24, 0x81	; 129
    a734:	92 e0       	ldi	r25, 0x02	; 2
    a736:	8f 93       	push	r24
    a738:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    a73c:	8d b7       	in	r24, 0x3d	; 61
    a73e:	9e b7       	in	r25, 0x3e	; 62
    a740:	08 96       	adiw	r24, 0x08	; 8
    a742:	0f b6       	in	r0, 0x3f	; 63
    a744:	f8 94       	cli
    a746:	de bf       	out	0x3e, r29	; 62
    a748:	0f be       	out	0x3f, r0	; 63
    a74a:	cd bf       	out	0x3d, r28	; 61
    a74c:	cc c2       	rjmp	.+1432   	; 0xace6 <Terminal+0xb90>
				}
				else if (Detectar_Comando_Buffer_P(MSG_Rango_2_200_G, chBufferRx_USART0+auxIndexTerminal)) {
    a74e:	80 91 2a 06 	lds	r24, 0x062A
    a752:	90 91 2b 06 	lds	r25, 0x062B
    a756:	8f 57       	subi	r24, 0x7F	; 127
    a758:	9d 4f       	sbci	r25, 0xFD	; 253
    a75a:	bc 01       	movw	r22, r24
    a75c:	8d ea       	ldi	r24, 0xAD	; 173
    a75e:	97 e0       	ldi	r25, 0x07	; 7
    a760:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    a764:	89 2b       	or	r24, r25
    a766:	09 f4       	brne	.+2      	; 0xa76a <Terminal+0x614>
    a768:	7a c0       	rjmp	.+244    	; 0xa85e <Terminal+0x708>
					uRangoCond1 = COND_2_200_G;
    a76a:	83 e0       	ldi	r24, 0x03	; 3
    a76c:	90 e0       	ldi	r25, 0x00	; 0
    a76e:	90 93 ea 04 	sts	0x04EA, r25
    a772:	80 93 e9 04 	sts	0x04E9, r24
					uMuestrasADCcond1 = DEFAULT_MUESTRAS_COND1;
    a776:	84 ef       	ldi	r24, 0xF4	; 244
    a778:	91 e0       	ldi	r25, 0x01	; 1
    a77a:	90 93 02 05 	sts	0x0502, r25
    a77e:	80 93 01 05 	sts	0x0501, r24
					flCond1auS = DEFAULT_COND2200G_A_US;
    a782:	89 e6       	ldi	r24, 0x69	; 105
    a784:	9f e6       	ldi	r25, 0x6F	; 111
    a786:	a0 e3       	ldi	r26, 0x30	; 48
    a788:	be e3       	ldi	r27, 0x3E	; 62
    a78a:	80 93 0d 05 	sts	0x050D, r24
    a78e:	90 93 0e 05 	sts	0x050E, r25
    a792:	a0 93 0f 05 	sts	0x050F, r26
    a796:	b0 93 10 05 	sts	0x0510, r27
					flOffsetCond1 = DEFAULT_COND2200G_OFFSET;
    a79a:	10 92 f8 04 	sts	0x04F8, r1
    a79e:	10 92 f9 04 	sts	0x04F9, r1
    a7a2:	10 92 fa 04 	sts	0x04FA, r1
    a7a6:	10 92 fb 04 	sts	0x04FB, r1

					UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom, &uRangoCond1);
    a7aa:	69 ee       	ldi	r22, 0xE9	; 233
    a7ac:	74 e0       	ldi	r23, 0x04	; 4
    a7ae:	84 e6       	ldi	r24, 0x64	; 100
    a7b0:	94 e0       	ldi	r25, 0x04	; 4
    a7b2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom, &uMuestrasADCcond1);
    a7b6:	61 e0       	ldi	r22, 0x01	; 1
    a7b8:	75 e0       	ldi	r23, 0x05	; 5
    a7ba:	8a e9       	ldi	r24, 0x9A	; 154
    a7bc:	94 e0       	ldi	r25, 0x04	; 4
    a7be:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond1auS_Eeprom, &flCond1auS);
    a7c2:	6d e0       	ldi	r22, 0x0D	; 13
    a7c4:	75 e0       	ldi	r23, 0x05	; 5
    a7c6:	8e ed       	ldi	r24, 0xDE	; 222
    a7c8:	94 e0       	ldi	r25, 0x04	; 4
    a7ca:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond1_Eeprom, &flOffsetCond1);
    a7ce:	68 ef       	ldi	r22, 0xF8	; 248
    a7d0:	74 e0       	ldi	r23, 0x04	; 4
    a7d2:	80 ec       	ldi	r24, 0xC0	; 192
    a7d4:	94 e0       	ldi	r25, 0x04	; 4
    a7d6:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom_BK, &uRangoCond1);
    a7da:	69 ee       	ldi	r22, 0xE9	; 233
    a7dc:	74 e0       	ldi	r23, 0x04	; 4
    a7de:	82 e6       	ldi	r24, 0x62	; 98
    a7e0:	94 e0       	ldi	r25, 0x04	; 4
    a7e2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom_BK, &uMuestrasADCcond1);
    a7e6:	61 e0       	ldi	r22, 0x01	; 1
    a7e8:	75 e0       	ldi	r23, 0x05	; 5
    a7ea:	8a e8       	ldi	r24, 0x8A	; 138
    a7ec:	94 e0       	ldi	r25, 0x04	; 4
    a7ee:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond1auS_Eeprom_BK, &flCond1auS);
    a7f2:	6d e0       	ldi	r22, 0x0D	; 13
    a7f4:	75 e0       	ldi	r23, 0x05	; 5
    a7f6:	8c eb       	ldi	r24, 0xBC	; 188
    a7f8:	94 e0       	ldi	r25, 0x04	; 4
    a7fa:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond1_Eeprom_BK, &flOffsetCond1);
    a7fe:	68 ef       	ldi	r22, 0xF8	; 248
    a800:	74 e0       	ldi	r23, 0x04	; 4
    a802:	86 ed       	ldi	r24, 0xD6	; 214
    a804:	94 e0       	ldi	r25, 0x04	; 4
    a806:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    a80a:	82 e0       	ldi	r24, 0x02	; 2
    a80c:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_1, (wchar_t*)MSG_Rango_2_200_G);
    a810:	8d ea       	ldi	r24, 0xAD	; 173
    a812:	97 e0       	ldi	r25, 0x07	; 7
    a814:	89 2f       	mov	r24, r25
    a816:	8f 93       	push	r24
    a818:	8d ea       	ldi	r24, 0xAD	; 173
    a81a:	97 e0       	ldi	r25, 0x07	; 7
    a81c:	8f 93       	push	r24
    a81e:	88 e0       	ldi	r24, 0x08	; 8
    a820:	97 e0       	ldi	r25, 0x07	; 7
    a822:	89 2f       	mov	r24, r25
    a824:	8f 93       	push	r24
    a826:	88 e0       	ldi	r24, 0x08	; 8
    a828:	97 e0       	ldi	r25, 0x07	; 7
    a82a:	8f 93       	push	r24
    a82c:	80 ef       	ldi	r24, 0xF0	; 240
    a82e:	91 e0       	ldi	r25, 0x01	; 1
    a830:	89 2f       	mov	r24, r25
    a832:	8f 93       	push	r24
    a834:	80 ef       	ldi	r24, 0xF0	; 240
    a836:	91 e0       	ldi	r25, 0x01	; 1
    a838:	8f 93       	push	r24
    a83a:	81 e8       	ldi	r24, 0x81	; 129
    a83c:	92 e0       	ldi	r25, 0x02	; 2
    a83e:	89 2f       	mov	r24, r25
    a840:	8f 93       	push	r24
    a842:	81 e8       	ldi	r24, 0x81	; 129
    a844:	92 e0       	ldi	r25, 0x02	; 2
    a846:	8f 93       	push	r24
    a848:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    a84c:	ed b7       	in	r30, 0x3d	; 61
    a84e:	fe b7       	in	r31, 0x3e	; 62
    a850:	38 96       	adiw	r30, 0x08	; 8
    a852:	0f b6       	in	r0, 0x3f	; 63
    a854:	f8 94       	cli
    a856:	de bf       	out	0x3e, r29	; 62
    a858:	0f be       	out	0x3f, r0	; 63
    a85a:	cd bf       	out	0x3d, r28	; 61
    a85c:	44 c2       	rjmp	.+1160   	; 0xace6 <Terminal+0xb90>
				}
				else if (Detectar_Comando_Buffer_P(MSG_Rango_20_2500_C, chBufferRx_USART0+auxIndexTerminal)) {
    a85e:	80 91 2a 06 	lds	r24, 0x062A
    a862:	90 91 2b 06 	lds	r25, 0x062B
    a866:	8f 57       	subi	r24, 0x7F	; 127
    a868:	9d 4f       	sbci	r25, 0xFD	; 253
    a86a:	bc 01       	movw	r22, r24
    a86c:	87 ec       	ldi	r24, 0xC7	; 199
    a86e:	97 e0       	ldi	r25, 0x07	; 7
    a870:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    a874:	89 2b       	or	r24, r25
    a876:	09 f4       	brne	.+2      	; 0xa87a <Terminal+0x724>
    a878:	7a c0       	rjmp	.+244    	; 0xa96e <Terminal+0x818>
					uRangoCond1 = COND_20_2500_C;
    a87a:	84 e0       	ldi	r24, 0x04	; 4
    a87c:	90 e0       	ldi	r25, 0x00	; 0
    a87e:	90 93 ea 04 	sts	0x04EA, r25
    a882:	80 93 e9 04 	sts	0x04E9, r24
					uMuestrasADCcond1 = DEFAULT_MUESTRAS_COND1;
    a886:	84 ef       	ldi	r24, 0xF4	; 244
    a888:	91 e0       	ldi	r25, 0x01	; 1
    a88a:	90 93 02 05 	sts	0x0502, r25
    a88e:	80 93 01 05 	sts	0x0501, r24
					flCond1auS = DEFAULT_COND202500C_A_US;
    a892:	87 ec       	ldi	r24, 0xC7	; 199
    a894:	9a eb       	ldi	r25, 0xBA	; 186
    a896:	a8 e2       	ldi	r26, 0x28	; 40
    a898:	b0 e4       	ldi	r27, 0x40	; 64
    a89a:	80 93 0d 05 	sts	0x050D, r24
    a89e:	90 93 0e 05 	sts	0x050E, r25
    a8a2:	a0 93 0f 05 	sts	0x050F, r26
    a8a6:	b0 93 10 05 	sts	0x0510, r27
					flOffsetCond1 = DEFAULT_COND202500C_OFFSET;
    a8aa:	10 92 f8 04 	sts	0x04F8, r1
    a8ae:	10 92 f9 04 	sts	0x04F9, r1
    a8b2:	10 92 fa 04 	sts	0x04FA, r1
    a8b6:	10 92 fb 04 	sts	0x04FB, r1

					UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom, &uRangoCond1);
    a8ba:	69 ee       	ldi	r22, 0xE9	; 233
    a8bc:	74 e0       	ldi	r23, 0x04	; 4
    a8be:	84 e6       	ldi	r24, 0x64	; 100
    a8c0:	94 e0       	ldi	r25, 0x04	; 4
    a8c2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom, &uMuestrasADCcond1);
    a8c6:	61 e0       	ldi	r22, 0x01	; 1
    a8c8:	75 e0       	ldi	r23, 0x05	; 5
    a8ca:	8a e9       	ldi	r24, 0x9A	; 154
    a8cc:	94 e0       	ldi	r25, 0x04	; 4
    a8ce:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond1auS_Eeprom, &flCond1auS);
    a8d2:	6d e0       	ldi	r22, 0x0D	; 13
    a8d4:	75 e0       	ldi	r23, 0x05	; 5
    a8d6:	8e ed       	ldi	r24, 0xDE	; 222
    a8d8:	94 e0       	ldi	r25, 0x04	; 4
    a8da:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond1_Eeprom, &flOffsetCond1);
    a8de:	68 ef       	ldi	r22, 0xF8	; 248
    a8e0:	74 e0       	ldi	r23, 0x04	; 4
    a8e2:	80 ec       	ldi	r24, 0xC0	; 192
    a8e4:	94 e0       	ldi	r25, 0x04	; 4
    a8e6:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom_BK, &uRangoCond1);
    a8ea:	69 ee       	ldi	r22, 0xE9	; 233
    a8ec:	74 e0       	ldi	r23, 0x04	; 4
    a8ee:	82 e6       	ldi	r24, 0x62	; 98
    a8f0:	94 e0       	ldi	r25, 0x04	; 4
    a8f2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom_BK, &uMuestrasADCcond1);
    a8f6:	61 e0       	ldi	r22, 0x01	; 1
    a8f8:	75 e0       	ldi	r23, 0x05	; 5
    a8fa:	8a e8       	ldi	r24, 0x8A	; 138
    a8fc:	94 e0       	ldi	r25, 0x04	; 4
    a8fe:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond1auS_Eeprom_BK, &flCond1auS);
    a902:	6d e0       	ldi	r22, 0x0D	; 13
    a904:	75 e0       	ldi	r23, 0x05	; 5
    a906:	8c eb       	ldi	r24, 0xBC	; 188
    a908:	94 e0       	ldi	r25, 0x04	; 4
    a90a:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond1_Eeprom_BK, &flOffsetCond1);
    a90e:	68 ef       	ldi	r22, 0xF8	; 248
    a910:	74 e0       	ldi	r23, 0x04	; 4
    a912:	86 ed       	ldi	r24, 0xD6	; 214
    a914:	94 e0       	ldi	r25, 0x04	; 4
    a916:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    a91a:	82 e0       	ldi	r24, 0x02	; 2
    a91c:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_1, (wchar_t*)MSG_Rango_20_2500_C);
    a920:	87 ec       	ldi	r24, 0xC7	; 199
    a922:	97 e0       	ldi	r25, 0x07	; 7
    a924:	89 2f       	mov	r24, r25
    a926:	8f 93       	push	r24
    a928:	87 ec       	ldi	r24, 0xC7	; 199
    a92a:	97 e0       	ldi	r25, 0x07	; 7
    a92c:	8f 93       	push	r24
    a92e:	88 e0       	ldi	r24, 0x08	; 8
    a930:	97 e0       	ldi	r25, 0x07	; 7
    a932:	89 2f       	mov	r24, r25
    a934:	8f 93       	push	r24
    a936:	88 e0       	ldi	r24, 0x08	; 8
    a938:	97 e0       	ldi	r25, 0x07	; 7
    a93a:	8f 93       	push	r24
    a93c:	80 ef       	ldi	r24, 0xF0	; 240
    a93e:	91 e0       	ldi	r25, 0x01	; 1
    a940:	89 2f       	mov	r24, r25
    a942:	8f 93       	push	r24
    a944:	80 ef       	ldi	r24, 0xF0	; 240
    a946:	91 e0       	ldi	r25, 0x01	; 1
    a948:	8f 93       	push	r24
    a94a:	81 e8       	ldi	r24, 0x81	; 129
    a94c:	92 e0       	ldi	r25, 0x02	; 2
    a94e:	89 2f       	mov	r24, r25
    a950:	8f 93       	push	r24
    a952:	81 e8       	ldi	r24, 0x81	; 129
    a954:	92 e0       	ldi	r25, 0x02	; 2
    a956:	8f 93       	push	r24
    a958:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    a95c:	8d b7       	in	r24, 0x3d	; 61
    a95e:	9e b7       	in	r25, 0x3e	; 62
    a960:	08 96       	adiw	r24, 0x08	; 8
    a962:	0f b6       	in	r0, 0x3f	; 63
    a964:	f8 94       	cli
    a966:	de bf       	out	0x3e, r29	; 62
    a968:	0f be       	out	0x3f, r0	; 63
    a96a:	cd bf       	out	0x3d, r28	; 61
    a96c:	bc c1       	rjmp	.+888    	; 0xace6 <Terminal+0xb90>
				}
				else if (Detectar_Comando_Buffer_P(MSG_Rango_20_2500_G, chBufferRx_USART0+auxIndexTerminal)) {
    a96e:	80 91 2a 06 	lds	r24, 0x062A
    a972:	90 91 2b 06 	lds	r25, 0x062B
    a976:	8f 57       	subi	r24, 0x7F	; 127
    a978:	9d 4f       	sbci	r25, 0xFD	; 253
    a97a:	bc 01       	movw	r22, r24
    a97c:	8d eb       	ldi	r24, 0xBD	; 189
    a97e:	97 e0       	ldi	r25, 0x07	; 7
    a980:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    a984:	89 2b       	or	r24, r25
    a986:	09 f4       	brne	.+2      	; 0xa98a <Terminal+0x834>
    a988:	7a c0       	rjmp	.+244    	; 0xaa7e <Terminal+0x928>
					uRangoCond1 = COND_20_2500_G;
    a98a:	81 e0       	ldi	r24, 0x01	; 1
    a98c:	90 e0       	ldi	r25, 0x00	; 0
    a98e:	90 93 ea 04 	sts	0x04EA, r25
    a992:	80 93 e9 04 	sts	0x04E9, r24
					uMuestrasADCcond1 = DEFAULT_MUESTRAS_COND1;
    a996:	84 ef       	ldi	r24, 0xF4	; 244
    a998:	91 e0       	ldi	r25, 0x01	; 1
    a99a:	90 93 02 05 	sts	0x0502, r25
    a99e:	80 93 01 05 	sts	0x0501, r24
					flCond1auS = DEFAULT_COND202500G_A_US;
    a9a2:	8c e9       	ldi	r24, 0x9C	; 156
    a9a4:	92 ea       	ldi	r25, 0xA2	; 162
    a9a6:	ab e0       	ldi	r26, 0x0B	; 11
    a9a8:	b0 e4       	ldi	r27, 0x40	; 64
    a9aa:	80 93 0d 05 	sts	0x050D, r24
    a9ae:	90 93 0e 05 	sts	0x050E, r25
    a9b2:	a0 93 0f 05 	sts	0x050F, r26
    a9b6:	b0 93 10 05 	sts	0x0510, r27
					flOffsetCond1 = DEFAULT_COND202500G_OFFSET;
    a9ba:	10 92 f8 04 	sts	0x04F8, r1
    a9be:	10 92 f9 04 	sts	0x04F9, r1
    a9c2:	10 92 fa 04 	sts	0x04FA, r1
    a9c6:	10 92 fb 04 	sts	0x04FB, r1

					UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom, &uRangoCond1);
    a9ca:	69 ee       	ldi	r22, 0xE9	; 233
    a9cc:	74 e0       	ldi	r23, 0x04	; 4
    a9ce:	84 e6       	ldi	r24, 0x64	; 100
    a9d0:	94 e0       	ldi	r25, 0x04	; 4
    a9d2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom, &uMuestrasADCcond1);
    a9d6:	61 e0       	ldi	r22, 0x01	; 1
    a9d8:	75 e0       	ldi	r23, 0x05	; 5
    a9da:	8a e9       	ldi	r24, 0x9A	; 154
    a9dc:	94 e0       	ldi	r25, 0x04	; 4
    a9de:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond1auS_Eeprom, &flCond1auS);
    a9e2:	6d e0       	ldi	r22, 0x0D	; 13
    a9e4:	75 e0       	ldi	r23, 0x05	; 5
    a9e6:	8e ed       	ldi	r24, 0xDE	; 222
    a9e8:	94 e0       	ldi	r25, 0x04	; 4
    a9ea:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond1_Eeprom, &flOffsetCond1);
    a9ee:	68 ef       	ldi	r22, 0xF8	; 248
    a9f0:	74 e0       	ldi	r23, 0x04	; 4
    a9f2:	80 ec       	ldi	r24, 0xC0	; 192
    a9f4:	94 e0       	ldi	r25, 0x04	; 4
    a9f6:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					UnsignedInt_a_Eeprom(&uRangoCond1_Eeprom_BK, &uRangoCond1);
    a9fa:	69 ee       	ldi	r22, 0xE9	; 233
    a9fc:	74 e0       	ldi	r23, 0x04	; 4
    a9fe:	82 e6       	ldi	r24, 0x62	; 98
    aa00:	94 e0       	ldi	r25, 0x04	; 4
    aa02:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom_BK, &uMuestrasADCcond1);
    aa06:	61 e0       	ldi	r22, 0x01	; 1
    aa08:	75 e0       	ldi	r23, 0x05	; 5
    aa0a:	8a e8       	ldi	r24, 0x8A	; 138
    aa0c:	94 e0       	ldi	r25, 0x04	; 4
    aa0e:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond1auS_Eeprom_BK, &flCond1auS);
    aa12:	6d e0       	ldi	r22, 0x0D	; 13
    aa14:	75 e0       	ldi	r23, 0x05	; 5
    aa16:	8c eb       	ldi	r24, 0xBC	; 188
    aa18:	94 e0       	ldi	r25, 0x04	; 4
    aa1a:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond1_Eeprom_BK, &flOffsetCond1);
    aa1e:	68 ef       	ldi	r22, 0xF8	; 248
    aa20:	74 e0       	ldi	r23, 0x04	; 4
    aa22:	86 ed       	ldi	r24, 0xD6	; 214
    aa24:	94 e0       	ldi	r25, 0x04	; 4
    aa26:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    aa2a:	82 e0       	ldi	r24, 0x02	; 2
    aa2c:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_1, (wchar_t*)MSG_Rango_20_2500_G);
    aa30:	8d eb       	ldi	r24, 0xBD	; 189
    aa32:	97 e0       	ldi	r25, 0x07	; 7
    aa34:	89 2f       	mov	r24, r25
    aa36:	8f 93       	push	r24
    aa38:	8d eb       	ldi	r24, 0xBD	; 189
    aa3a:	97 e0       	ldi	r25, 0x07	; 7
    aa3c:	8f 93       	push	r24
    aa3e:	88 e0       	ldi	r24, 0x08	; 8
    aa40:	97 e0       	ldi	r25, 0x07	; 7
    aa42:	89 2f       	mov	r24, r25
    aa44:	8f 93       	push	r24
    aa46:	88 e0       	ldi	r24, 0x08	; 8
    aa48:	97 e0       	ldi	r25, 0x07	; 7
    aa4a:	8f 93       	push	r24
    aa4c:	80 ef       	ldi	r24, 0xF0	; 240
    aa4e:	91 e0       	ldi	r25, 0x01	; 1
    aa50:	89 2f       	mov	r24, r25
    aa52:	8f 93       	push	r24
    aa54:	80 ef       	ldi	r24, 0xF0	; 240
    aa56:	91 e0       	ldi	r25, 0x01	; 1
    aa58:	8f 93       	push	r24
    aa5a:	81 e8       	ldi	r24, 0x81	; 129
    aa5c:	92 e0       	ldi	r25, 0x02	; 2
    aa5e:	89 2f       	mov	r24, r25
    aa60:	8f 93       	push	r24
    aa62:	81 e8       	ldi	r24, 0x81	; 129
    aa64:	92 e0       	ldi	r25, 0x02	; 2
    aa66:	8f 93       	push	r24
    aa68:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    aa6c:	ed b7       	in	r30, 0x3d	; 61
    aa6e:	fe b7       	in	r31, 0x3e	; 62
    aa70:	38 96       	adiw	r30, 0x08	; 8
    aa72:	0f b6       	in	r0, 0x3f	; 63
    aa74:	f8 94       	cli
    aa76:	de bf       	out	0x3e, r29	; 62
    aa78:	0f be       	out	0x3f, r0	; 63
    aa7a:	cd bf       	out	0x3d, r28	; 61
    aa7c:	34 c1       	rjmp	.+616    	; 0xace6 <Terminal+0xb90>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					if (uRangoCond1 == COND_0_20_C) {
    aa7e:	80 91 e9 04 	lds	r24, 0x04E9
    aa82:	90 91 ea 04 	lds	r25, 0x04EA
    aa86:	05 97       	sbiw	r24, 0x05	; 5
    aa88:	39 f5       	brne	.+78     	; 0xaad8 <Terminal+0x982>
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_1, (wchar_t*)MSG_Rango_0_20_C);
    aa8a:	86 ea       	ldi	r24, 0xA6	; 166
    aa8c:	97 e0       	ldi	r25, 0x07	; 7
    aa8e:	89 2f       	mov	r24, r25
    aa90:	8f 93       	push	r24
    aa92:	86 ea       	ldi	r24, 0xA6	; 166
    aa94:	97 e0       	ldi	r25, 0x07	; 7
    aa96:	8f 93       	push	r24
    aa98:	88 e0       	ldi	r24, 0x08	; 8
    aa9a:	97 e0       	ldi	r25, 0x07	; 7
    aa9c:	89 2f       	mov	r24, r25
    aa9e:	8f 93       	push	r24
    aaa0:	88 e0       	ldi	r24, 0x08	; 8
    aaa2:	97 e0       	ldi	r25, 0x07	; 7
    aaa4:	8f 93       	push	r24
    aaa6:	80 ef       	ldi	r24, 0xF0	; 240
    aaa8:	91 e0       	ldi	r25, 0x01	; 1
    aaaa:	89 2f       	mov	r24, r25
    aaac:	8f 93       	push	r24
    aaae:	80 ef       	ldi	r24, 0xF0	; 240
    aab0:	91 e0       	ldi	r25, 0x01	; 1
    aab2:	8f 93       	push	r24
    aab4:	81 e8       	ldi	r24, 0x81	; 129
    aab6:	92 e0       	ldi	r25, 0x02	; 2
    aab8:	89 2f       	mov	r24, r25
    aaba:	8f 93       	push	r24
    aabc:	81 e8       	ldi	r24, 0x81	; 129
    aabe:	92 e0       	ldi	r25, 0x02	; 2
    aac0:	8f 93       	push	r24
    aac2:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    aac6:	8d b7       	in	r24, 0x3d	; 61
    aac8:	9e b7       	in	r25, 0x3e	; 62
    aaca:	08 96       	adiw	r24, 0x08	; 8
    aacc:	0f b6       	in	r0, 0x3f	; 63
    aace:	f8 94       	cli
    aad0:	de bf       	out	0x3e, r29	; 62
    aad2:	0f be       	out	0x3f, r0	; 63
    aad4:	cd bf       	out	0x3d, r28	; 61
    aad6:	07 c1       	rjmp	.+526    	; 0xace6 <Terminal+0xb90>
					}
					else if (uRangoCond1 == COND_0_20_G) {
    aad8:	80 91 e9 04 	lds	r24, 0x04E9
    aadc:	90 91 ea 04 	lds	r25, 0x04EA
    aae0:	02 97       	sbiw	r24, 0x02	; 2
    aae2:	39 f5       	brne	.+78     	; 0xab32 <Terminal+0x9dc>
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_1, (wchar_t*)MSG_Rango_0_20_G);
    aae4:	8f e9       	ldi	r24, 0x9F	; 159
    aae6:	97 e0       	ldi	r25, 0x07	; 7
    aae8:	89 2f       	mov	r24, r25
    aaea:	8f 93       	push	r24
    aaec:	8f e9       	ldi	r24, 0x9F	; 159
    aaee:	97 e0       	ldi	r25, 0x07	; 7
    aaf0:	8f 93       	push	r24
    aaf2:	88 e0       	ldi	r24, 0x08	; 8
    aaf4:	97 e0       	ldi	r25, 0x07	; 7
    aaf6:	89 2f       	mov	r24, r25
    aaf8:	8f 93       	push	r24
    aafa:	88 e0       	ldi	r24, 0x08	; 8
    aafc:	97 e0       	ldi	r25, 0x07	; 7
    aafe:	8f 93       	push	r24
    ab00:	80 ef       	ldi	r24, 0xF0	; 240
    ab02:	91 e0       	ldi	r25, 0x01	; 1
    ab04:	89 2f       	mov	r24, r25
    ab06:	8f 93       	push	r24
    ab08:	80 ef       	ldi	r24, 0xF0	; 240
    ab0a:	91 e0       	ldi	r25, 0x01	; 1
    ab0c:	8f 93       	push	r24
    ab0e:	81 e8       	ldi	r24, 0x81	; 129
    ab10:	92 e0       	ldi	r25, 0x02	; 2
    ab12:	89 2f       	mov	r24, r25
    ab14:	8f 93       	push	r24
    ab16:	81 e8       	ldi	r24, 0x81	; 129
    ab18:	92 e0       	ldi	r25, 0x02	; 2
    ab1a:	8f 93       	push	r24
    ab1c:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    ab20:	ed b7       	in	r30, 0x3d	; 61
    ab22:	fe b7       	in	r31, 0x3e	; 62
    ab24:	38 96       	adiw	r30, 0x08	; 8
    ab26:	0f b6       	in	r0, 0x3f	; 63
    ab28:	f8 94       	cli
    ab2a:	de bf       	out	0x3e, r29	; 62
    ab2c:	0f be       	out	0x3f, r0	; 63
    ab2e:	cd bf       	out	0x3d, r28	; 61
    ab30:	da c0       	rjmp	.+436    	; 0xace6 <Terminal+0xb90>
					}
					else if (uRangoCond1 == COND_2_200_C) {
    ab32:	80 91 e9 04 	lds	r24, 0x04E9
    ab36:	90 91 ea 04 	lds	r25, 0x04EA
    ab3a:	06 97       	sbiw	r24, 0x06	; 6
    ab3c:	39 f5       	brne	.+78     	; 0xab8c <Terminal+0xa36>
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_1, (wchar_t*)MSG_Rango_2_200_C);
    ab3e:	85 eb       	ldi	r24, 0xB5	; 181
    ab40:	97 e0       	ldi	r25, 0x07	; 7
    ab42:	89 2f       	mov	r24, r25
    ab44:	8f 93       	push	r24
    ab46:	85 eb       	ldi	r24, 0xB5	; 181
    ab48:	97 e0       	ldi	r25, 0x07	; 7
    ab4a:	8f 93       	push	r24
    ab4c:	88 e0       	ldi	r24, 0x08	; 8
    ab4e:	97 e0       	ldi	r25, 0x07	; 7
    ab50:	89 2f       	mov	r24, r25
    ab52:	8f 93       	push	r24
    ab54:	88 e0       	ldi	r24, 0x08	; 8
    ab56:	97 e0       	ldi	r25, 0x07	; 7
    ab58:	8f 93       	push	r24
    ab5a:	80 ef       	ldi	r24, 0xF0	; 240
    ab5c:	91 e0       	ldi	r25, 0x01	; 1
    ab5e:	89 2f       	mov	r24, r25
    ab60:	8f 93       	push	r24
    ab62:	80 ef       	ldi	r24, 0xF0	; 240
    ab64:	91 e0       	ldi	r25, 0x01	; 1
    ab66:	8f 93       	push	r24
    ab68:	81 e8       	ldi	r24, 0x81	; 129
    ab6a:	92 e0       	ldi	r25, 0x02	; 2
    ab6c:	89 2f       	mov	r24, r25
    ab6e:	8f 93       	push	r24
    ab70:	81 e8       	ldi	r24, 0x81	; 129
    ab72:	92 e0       	ldi	r25, 0x02	; 2
    ab74:	8f 93       	push	r24
    ab76:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    ab7a:	8d b7       	in	r24, 0x3d	; 61
    ab7c:	9e b7       	in	r25, 0x3e	; 62
    ab7e:	08 96       	adiw	r24, 0x08	; 8
    ab80:	0f b6       	in	r0, 0x3f	; 63
    ab82:	f8 94       	cli
    ab84:	de bf       	out	0x3e, r29	; 62
    ab86:	0f be       	out	0x3f, r0	; 63
    ab88:	cd bf       	out	0x3d, r28	; 61
    ab8a:	ad c0       	rjmp	.+346    	; 0xace6 <Terminal+0xb90>
					}
					else if (uRangoCond1 == COND_2_200_G) {
    ab8c:	80 91 e9 04 	lds	r24, 0x04E9
    ab90:	90 91 ea 04 	lds	r25, 0x04EA
    ab94:	03 97       	sbiw	r24, 0x03	; 3
    ab96:	39 f5       	brne	.+78     	; 0xabe6 <Terminal+0xa90>
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_1, (wchar_t*)MSG_Rango_2_200_G);
    ab98:	8d ea       	ldi	r24, 0xAD	; 173
    ab9a:	97 e0       	ldi	r25, 0x07	; 7
    ab9c:	89 2f       	mov	r24, r25
    ab9e:	8f 93       	push	r24
    aba0:	8d ea       	ldi	r24, 0xAD	; 173
    aba2:	97 e0       	ldi	r25, 0x07	; 7
    aba4:	8f 93       	push	r24
    aba6:	88 e0       	ldi	r24, 0x08	; 8
    aba8:	97 e0       	ldi	r25, 0x07	; 7
    abaa:	89 2f       	mov	r24, r25
    abac:	8f 93       	push	r24
    abae:	88 e0       	ldi	r24, 0x08	; 8
    abb0:	97 e0       	ldi	r25, 0x07	; 7
    abb2:	8f 93       	push	r24
    abb4:	80 ef       	ldi	r24, 0xF0	; 240
    abb6:	91 e0       	ldi	r25, 0x01	; 1
    abb8:	89 2f       	mov	r24, r25
    abba:	8f 93       	push	r24
    abbc:	80 ef       	ldi	r24, 0xF0	; 240
    abbe:	91 e0       	ldi	r25, 0x01	; 1
    abc0:	8f 93       	push	r24
    abc2:	81 e8       	ldi	r24, 0x81	; 129
    abc4:	92 e0       	ldi	r25, 0x02	; 2
    abc6:	89 2f       	mov	r24, r25
    abc8:	8f 93       	push	r24
    abca:	81 e8       	ldi	r24, 0x81	; 129
    abcc:	92 e0       	ldi	r25, 0x02	; 2
    abce:	8f 93       	push	r24
    abd0:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    abd4:	ed b7       	in	r30, 0x3d	; 61
    abd6:	fe b7       	in	r31, 0x3e	; 62
    abd8:	38 96       	adiw	r30, 0x08	; 8
    abda:	0f b6       	in	r0, 0x3f	; 63
    abdc:	f8 94       	cli
    abde:	de bf       	out	0x3e, r29	; 62
    abe0:	0f be       	out	0x3f, r0	; 63
    abe2:	cd bf       	out	0x3d, r28	; 61
    abe4:	80 c0       	rjmp	.+256    	; 0xace6 <Terminal+0xb90>
					}
					else if (uRangoCond1 == COND_20_2500_C) {
    abe6:	80 91 e9 04 	lds	r24, 0x04E9
    abea:	90 91 ea 04 	lds	r25, 0x04EA
    abee:	04 97       	sbiw	r24, 0x04	; 4
    abf0:	39 f5       	brne	.+78     	; 0xac40 <Terminal+0xaea>
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_1, (wchar_t*)MSG_Rango_20_2500_C);
    abf2:	87 ec       	ldi	r24, 0xC7	; 199
    abf4:	97 e0       	ldi	r25, 0x07	; 7
    abf6:	89 2f       	mov	r24, r25
    abf8:	8f 93       	push	r24
    abfa:	87 ec       	ldi	r24, 0xC7	; 199
    abfc:	97 e0       	ldi	r25, 0x07	; 7
    abfe:	8f 93       	push	r24
    ac00:	88 e0       	ldi	r24, 0x08	; 8
    ac02:	97 e0       	ldi	r25, 0x07	; 7
    ac04:	89 2f       	mov	r24, r25
    ac06:	8f 93       	push	r24
    ac08:	88 e0       	ldi	r24, 0x08	; 8
    ac0a:	97 e0       	ldi	r25, 0x07	; 7
    ac0c:	8f 93       	push	r24
    ac0e:	80 ef       	ldi	r24, 0xF0	; 240
    ac10:	91 e0       	ldi	r25, 0x01	; 1
    ac12:	89 2f       	mov	r24, r25
    ac14:	8f 93       	push	r24
    ac16:	80 ef       	ldi	r24, 0xF0	; 240
    ac18:	91 e0       	ldi	r25, 0x01	; 1
    ac1a:	8f 93       	push	r24
    ac1c:	81 e8       	ldi	r24, 0x81	; 129
    ac1e:	92 e0       	ldi	r25, 0x02	; 2
    ac20:	89 2f       	mov	r24, r25
    ac22:	8f 93       	push	r24
    ac24:	81 e8       	ldi	r24, 0x81	; 129
    ac26:	92 e0       	ldi	r25, 0x02	; 2
    ac28:	8f 93       	push	r24
    ac2a:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    ac2e:	8d b7       	in	r24, 0x3d	; 61
    ac30:	9e b7       	in	r25, 0x3e	; 62
    ac32:	08 96       	adiw	r24, 0x08	; 8
    ac34:	0f b6       	in	r0, 0x3f	; 63
    ac36:	f8 94       	cli
    ac38:	de bf       	out	0x3e, r29	; 62
    ac3a:	0f be       	out	0x3f, r0	; 63
    ac3c:	cd bf       	out	0x3d, r28	; 61
    ac3e:	53 c0       	rjmp	.+166    	; 0xace6 <Terminal+0xb90>
					}
					else if (uRangoCond1 == COND_20_2500_G) {
    ac40:	80 91 e9 04 	lds	r24, 0x04E9
    ac44:	90 91 ea 04 	lds	r25, 0x04EA
    ac48:	01 97       	sbiw	r24, 0x01	; 1
    ac4a:	39 f5       	brne	.+78     	; 0xac9a <Terminal+0xb44>
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_1, (wchar_t*)MSG_Rango_20_2500_G);
    ac4c:	8d eb       	ldi	r24, 0xBD	; 189
    ac4e:	97 e0       	ldi	r25, 0x07	; 7
    ac50:	89 2f       	mov	r24, r25
    ac52:	8f 93       	push	r24
    ac54:	8d eb       	ldi	r24, 0xBD	; 189
    ac56:	97 e0       	ldi	r25, 0x07	; 7
    ac58:	8f 93       	push	r24
    ac5a:	88 e0       	ldi	r24, 0x08	; 8
    ac5c:	97 e0       	ldi	r25, 0x07	; 7
    ac5e:	89 2f       	mov	r24, r25
    ac60:	8f 93       	push	r24
    ac62:	88 e0       	ldi	r24, 0x08	; 8
    ac64:	97 e0       	ldi	r25, 0x07	; 7
    ac66:	8f 93       	push	r24
    ac68:	80 ef       	ldi	r24, 0xF0	; 240
    ac6a:	91 e0       	ldi	r25, 0x01	; 1
    ac6c:	89 2f       	mov	r24, r25
    ac6e:	8f 93       	push	r24
    ac70:	80 ef       	ldi	r24, 0xF0	; 240
    ac72:	91 e0       	ldi	r25, 0x01	; 1
    ac74:	8f 93       	push	r24
    ac76:	81 e8       	ldi	r24, 0x81	; 129
    ac78:	92 e0       	ldi	r25, 0x02	; 2
    ac7a:	89 2f       	mov	r24, r25
    ac7c:	8f 93       	push	r24
    ac7e:	81 e8       	ldi	r24, 0x81	; 129
    ac80:	92 e0       	ldi	r25, 0x02	; 2
    ac82:	8f 93       	push	r24
    ac84:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    ac88:	ed b7       	in	r30, 0x3d	; 61
    ac8a:	fe b7       	in	r31, 0x3e	; 62
    ac8c:	38 96       	adiw	r30, 0x08	; 8
    ac8e:	0f b6       	in	r0, 0x3f	; 63
    ac90:	f8 94       	cli
    ac92:	de bf       	out	0x3e, r29	; 62
    ac94:	0f be       	out	0x3f, r0	; 63
    ac96:	cd bf       	out	0x3d, r28	; 61
    ac98:	26 c0       	rjmp	.+76     	; 0xace6 <Terminal+0xb90>
					}
					else {
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_1, (wchar_t*)MSG_Error);
    ac9a:	89 e6       	ldi	r24, 0x69	; 105
    ac9c:	97 e0       	ldi	r25, 0x07	; 7
    ac9e:	89 2f       	mov	r24, r25
    aca0:	8f 93       	push	r24
    aca2:	89 e6       	ldi	r24, 0x69	; 105
    aca4:	97 e0       	ldi	r25, 0x07	; 7
    aca6:	8f 93       	push	r24
    aca8:	88 e0       	ldi	r24, 0x08	; 8
    acaa:	97 e0       	ldi	r25, 0x07	; 7
    acac:	89 2f       	mov	r24, r25
    acae:	8f 93       	push	r24
    acb0:	88 e0       	ldi	r24, 0x08	; 8
    acb2:	97 e0       	ldi	r25, 0x07	; 7
    acb4:	8f 93       	push	r24
    acb6:	80 ef       	ldi	r24, 0xF0	; 240
    acb8:	91 e0       	ldi	r25, 0x01	; 1
    acba:	89 2f       	mov	r24, r25
    acbc:	8f 93       	push	r24
    acbe:	80 ef       	ldi	r24, 0xF0	; 240
    acc0:	91 e0       	ldi	r25, 0x01	; 1
    acc2:	8f 93       	push	r24
    acc4:	81 e8       	ldi	r24, 0x81	; 129
    acc6:	92 e0       	ldi	r25, 0x02	; 2
    acc8:	89 2f       	mov	r24, r25
    acca:	8f 93       	push	r24
    accc:	81 e8       	ldi	r24, 0x81	; 129
    acce:	92 e0       	ldi	r25, 0x02	; 2
    acd0:	8f 93       	push	r24
    acd2:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    acd6:	8d b7       	in	r24, 0x3d	; 61
    acd8:	9e b7       	in	r25, 0x3e	; 62
    acda:	08 96       	adiw	r24, 0x08	; 8
    acdc:	0f b6       	in	r0, 0x3f	; 63
    acde:	f8 94       	cli
    ace0:	de bf       	out	0x3e, r29	; 62
    ace2:	0f be       	out	0x3f, r0	; 63
    ace4:	cd bf       	out	0x3d, r28	; 61
					}
				}
//				else {
//					sprintf(chBufferRx_USART0, "%S: %S %S", (wchar_t*)Comando_Rango_1, (wchar_t*)MSG_Parametro, (wchar_t*)MSG_Desconocido);
//				}
				Cargar_Valores_Rango_Por_Canal();
    ace6:	0e 94 b2 4c 	call	0x9964	; 0x9964 <Cargar_Valores_Rango_Por_Canal>
    acea:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
			}


			// chBufferRx_USART0 = RANGO COND 2 xxxx.x\0
			else if (Detectar_Comando_Buffer_P(Comando_Rango_2, chBufferRx_USART0)) {
    acee:	61 e8       	ldi	r22, 0x81	; 129
    acf0:	72 e0       	ldi	r23, 0x02	; 2
    acf2:	86 e1       	ldi	r24, 0x16	; 22
    acf4:	97 e0       	ldi	r25, 0x07	; 7
    acf6:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    acfa:	89 2b       	or	r24, r25
    acfc:	09 f4       	brne	.+2      	; 0xad00 <Terminal+0xbaa>
    acfe:	68 c4       	rjmp	.+2256   	; 0xb5d0 <Terminal+0x147a>
				if (Detectar_Comando_Buffer_P(MSG_Rango_0_20_C, chBufferRx_USART0+auxIndexTerminal)) {
    ad00:	80 91 2a 06 	lds	r24, 0x062A
    ad04:	90 91 2b 06 	lds	r25, 0x062B
    ad08:	8f 57       	subi	r24, 0x7F	; 127
    ad0a:	9d 4f       	sbci	r25, 0xFD	; 253
    ad0c:	bc 01       	movw	r22, r24
    ad0e:	86 ea       	ldi	r24, 0xA6	; 166
    ad10:	97 e0       	ldi	r25, 0x07	; 7
    ad12:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    ad16:	89 2b       	or	r24, r25
    ad18:	09 f4       	brne	.+2      	; 0xad1c <Terminal+0xbc6>
    ad1a:	7a c0       	rjmp	.+244    	; 0xae10 <Terminal+0xcba>
					uRangoCond2 = COND_0_20_C;
    ad1c:	85 e0       	ldi	r24, 0x05	; 5
    ad1e:	90 e0       	ldi	r25, 0x00	; 0
    ad20:	90 93 1e 06 	sts	0x061E, r25
    ad24:	80 93 1d 06 	sts	0x061D, r24
					uMuestrasADCcond2 = DEFAULT_MUESTRAS_COND2;
    ad28:	84 ef       	ldi	r24, 0xF4	; 244
    ad2a:	91 e0       	ldi	r25, 0x01	; 1
    ad2c:	90 93 f7 04 	sts	0x04F7, r25
    ad30:	80 93 f6 04 	sts	0x04F6, r24
					flCond2auS = DEFAULT_COND020C_A_US;
    ad34:	87 ee       	ldi	r24, 0xE7	; 231
    ad36:	9d e1       	ldi	r25, 0x1D	; 29
    ad38:	a7 ea       	ldi	r26, 0xA7	; 167
    ad3a:	bc e3       	ldi	r27, 0x3C	; 60
    ad3c:	80 93 93 05 	sts	0x0593, r24
    ad40:	90 93 94 05 	sts	0x0594, r25
    ad44:	a0 93 95 05 	sts	0x0595, r26
    ad48:	b0 93 96 05 	sts	0x0596, r27
					flOffsetCond2 = DEFAULT_COND020C_OFFSET;
    ad4c:	10 92 03 05 	sts	0x0503, r1
    ad50:	10 92 04 05 	sts	0x0504, r1
    ad54:	10 92 05 05 	sts	0x0505, r1
    ad58:	10 92 06 05 	sts	0x0506, r1

					UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom, &uRangoCond2);
    ad5c:	6d e1       	ldi	r22, 0x1D	; 29
    ad5e:	76 e0       	ldi	r23, 0x06	; 6
    ad60:	88 e9       	ldi	r24, 0x98	; 152
    ad62:	94 e0       	ldi	r25, 0x04	; 4
    ad64:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom, &uMuestrasADCcond2);
    ad68:	66 ef       	ldi	r22, 0xF6	; 246
    ad6a:	74 e0       	ldi	r23, 0x04	; 4
    ad6c:	88 ec       	ldi	r24, 0xC8	; 200
    ad6e:	94 e0       	ldi	r25, 0x04	; 4
    ad70:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond2auS_Eeprom, &flCond2auS);
    ad74:	63 e9       	ldi	r22, 0x93	; 147
    ad76:	75 e0       	ldi	r23, 0x05	; 5
    ad78:	84 e8       	ldi	r24, 0x84	; 132
    ad7a:	94 e0       	ldi	r25, 0x04	; 4
    ad7c:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond2_Eeprom, &flOffsetCond2);
    ad80:	63 e0       	ldi	r22, 0x03	; 3
    ad82:	75 e0       	ldi	r23, 0x05	; 5
    ad84:	80 ed       	ldi	r24, 0xD0	; 208
    ad86:	94 e0       	ldi	r25, 0x04	; 4
    ad88:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom_BK, &uRangoCond2);
    ad8c:	6d e1       	ldi	r22, 0x1D	; 29
    ad8e:	76 e0       	ldi	r23, 0x06	; 6
    ad90:	88 eb       	ldi	r24, 0xB8	; 184
    ad92:	94 e0       	ldi	r25, 0x04	; 4
    ad94:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom_BK, &uMuestrasADCcond2);
    ad98:	66 ef       	ldi	r22, 0xF6	; 246
    ad9a:	74 e0       	ldi	r23, 0x04	; 4
    ad9c:	8c e9       	ldi	r24, 0x9C	; 156
    ad9e:	94 e0       	ldi	r25, 0x04	; 4
    ada0:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond2auS_Eeprom_BK, &flCond2auS);
    ada4:	63 e9       	ldi	r22, 0x93	; 147
    ada6:	75 e0       	ldi	r23, 0x05	; 5
    ada8:	8c e8       	ldi	r24, 0x8C	; 140
    adaa:	94 e0       	ldi	r25, 0x04	; 4
    adac:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond2_Eeprom_BK, &flOffsetCond2);
    adb0:	63 e0       	ldi	r22, 0x03	; 3
    adb2:	75 e0       	ldi	r23, 0x05	; 5
    adb4:	86 e7       	ldi	r24, 0x76	; 118
    adb6:	94 e0       	ldi	r25, 0x04	; 4
    adb8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    adbc:	82 e0       	ldi	r24, 0x02	; 2
    adbe:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_2, (wchar_t*)MSG_Rango_0_20_C);
    adc2:	86 ea       	ldi	r24, 0xA6	; 166
    adc4:	97 e0       	ldi	r25, 0x07	; 7
    adc6:	89 2f       	mov	r24, r25
    adc8:	8f 93       	push	r24
    adca:	86 ea       	ldi	r24, 0xA6	; 166
    adcc:	97 e0       	ldi	r25, 0x07	; 7
    adce:	8f 93       	push	r24
    add0:	86 e1       	ldi	r24, 0x16	; 22
    add2:	97 e0       	ldi	r25, 0x07	; 7
    add4:	89 2f       	mov	r24, r25
    add6:	8f 93       	push	r24
    add8:	86 e1       	ldi	r24, 0x16	; 22
    adda:	97 e0       	ldi	r25, 0x07	; 7
    addc:	8f 93       	push	r24
    adde:	80 ef       	ldi	r24, 0xF0	; 240
    ade0:	91 e0       	ldi	r25, 0x01	; 1
    ade2:	89 2f       	mov	r24, r25
    ade4:	8f 93       	push	r24
    ade6:	80 ef       	ldi	r24, 0xF0	; 240
    ade8:	91 e0       	ldi	r25, 0x01	; 1
    adea:	8f 93       	push	r24
    adec:	81 e8       	ldi	r24, 0x81	; 129
    adee:	92 e0       	ldi	r25, 0x02	; 2
    adf0:	89 2f       	mov	r24, r25
    adf2:	8f 93       	push	r24
    adf4:	81 e8       	ldi	r24, 0x81	; 129
    adf6:	92 e0       	ldi	r25, 0x02	; 2
    adf8:	8f 93       	push	r24
    adfa:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    adfe:	ed b7       	in	r30, 0x3d	; 61
    ae00:	fe b7       	in	r31, 0x3e	; 62
    ae02:	38 96       	adiw	r30, 0x08	; 8
    ae04:	0f b6       	in	r0, 0x3f	; 63
    ae06:	f8 94       	cli
    ae08:	de bf       	out	0x3e, r29	; 62
    ae0a:	0f be       	out	0x3f, r0	; 63
    ae0c:	cd bf       	out	0x3d, r28	; 61
    ae0e:	dc c3       	rjmp	.+1976   	; 0xb5c8 <Terminal+0x1472>
				}
				else if (Detectar_Comando_Buffer_P(MSG_Rango_0_20_G, chBufferRx_USART0+auxIndexTerminal)) {
    ae10:	80 91 2a 06 	lds	r24, 0x062A
    ae14:	90 91 2b 06 	lds	r25, 0x062B
    ae18:	8f 57       	subi	r24, 0x7F	; 127
    ae1a:	9d 4f       	sbci	r25, 0xFD	; 253
    ae1c:	bc 01       	movw	r22, r24
    ae1e:	8f e9       	ldi	r24, 0x9F	; 159
    ae20:	97 e0       	ldi	r25, 0x07	; 7
    ae22:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    ae26:	89 2b       	or	r24, r25
    ae28:	09 f4       	brne	.+2      	; 0xae2c <Terminal+0xcd6>
    ae2a:	7a c0       	rjmp	.+244    	; 0xaf20 <Terminal+0xdca>
					uRangoCond2 = COND_0_20_G;
    ae2c:	82 e0       	ldi	r24, 0x02	; 2
    ae2e:	90 e0       	ldi	r25, 0x00	; 0
    ae30:	90 93 1e 06 	sts	0x061E, r25
    ae34:	80 93 1d 06 	sts	0x061D, r24
					uMuestrasADCcond2 = DEFAULT_MUESTRAS_COND2;
    ae38:	84 ef       	ldi	r24, 0xF4	; 244
    ae3a:	91 e0       	ldi	r25, 0x01	; 1
    ae3c:	90 93 f7 04 	sts	0x04F7, r25
    ae40:	80 93 f6 04 	sts	0x04F6, r24
					flCond2auS = DEFAULT_COND020G_A_US;
    ae44:	8d e4       	ldi	r24, 0x4D	; 77
    ae46:	95 e1       	ldi	r25, 0x15	; 21
    ae48:	ac e8       	ldi	r26, 0x8C	; 140
    ae4a:	bc e3       	ldi	r27, 0x3C	; 60
    ae4c:	80 93 93 05 	sts	0x0593, r24
    ae50:	90 93 94 05 	sts	0x0594, r25
    ae54:	a0 93 95 05 	sts	0x0595, r26
    ae58:	b0 93 96 05 	sts	0x0596, r27
					flOffsetCond2 = DEFAULT_COND020G_OFFSET;
    ae5c:	10 92 03 05 	sts	0x0503, r1
    ae60:	10 92 04 05 	sts	0x0504, r1
    ae64:	10 92 05 05 	sts	0x0505, r1
    ae68:	10 92 06 05 	sts	0x0506, r1

					UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom, &uRangoCond2);
    ae6c:	6d e1       	ldi	r22, 0x1D	; 29
    ae6e:	76 e0       	ldi	r23, 0x06	; 6
    ae70:	88 e9       	ldi	r24, 0x98	; 152
    ae72:	94 e0       	ldi	r25, 0x04	; 4
    ae74:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom, &uMuestrasADCcond2);
    ae78:	66 ef       	ldi	r22, 0xF6	; 246
    ae7a:	74 e0       	ldi	r23, 0x04	; 4
    ae7c:	88 ec       	ldi	r24, 0xC8	; 200
    ae7e:	94 e0       	ldi	r25, 0x04	; 4
    ae80:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond2auS_Eeprom, &flCond2auS);
    ae84:	63 e9       	ldi	r22, 0x93	; 147
    ae86:	75 e0       	ldi	r23, 0x05	; 5
    ae88:	84 e8       	ldi	r24, 0x84	; 132
    ae8a:	94 e0       	ldi	r25, 0x04	; 4
    ae8c:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond2_Eeprom, &flOffsetCond2);
    ae90:	63 e0       	ldi	r22, 0x03	; 3
    ae92:	75 e0       	ldi	r23, 0x05	; 5
    ae94:	80 ed       	ldi	r24, 0xD0	; 208
    ae96:	94 e0       	ldi	r25, 0x04	; 4
    ae98:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom_BK, &uRangoCond2);
    ae9c:	6d e1       	ldi	r22, 0x1D	; 29
    ae9e:	76 e0       	ldi	r23, 0x06	; 6
    aea0:	88 eb       	ldi	r24, 0xB8	; 184
    aea2:	94 e0       	ldi	r25, 0x04	; 4
    aea4:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom_BK, &uMuestrasADCcond2);
    aea8:	66 ef       	ldi	r22, 0xF6	; 246
    aeaa:	74 e0       	ldi	r23, 0x04	; 4
    aeac:	8c e9       	ldi	r24, 0x9C	; 156
    aeae:	94 e0       	ldi	r25, 0x04	; 4
    aeb0:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond2auS_Eeprom_BK, &flCond2auS);
    aeb4:	63 e9       	ldi	r22, 0x93	; 147
    aeb6:	75 e0       	ldi	r23, 0x05	; 5
    aeb8:	8c e8       	ldi	r24, 0x8C	; 140
    aeba:	94 e0       	ldi	r25, 0x04	; 4
    aebc:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond2_Eeprom_BK, &flOffsetCond2);
    aec0:	63 e0       	ldi	r22, 0x03	; 3
    aec2:	75 e0       	ldi	r23, 0x05	; 5
    aec4:	86 e7       	ldi	r24, 0x76	; 118
    aec6:	94 e0       	ldi	r25, 0x04	; 4
    aec8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    aecc:	82 e0       	ldi	r24, 0x02	; 2
    aece:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_2, (wchar_t*)MSG_Rango_0_20_G);
    aed2:	8f e9       	ldi	r24, 0x9F	; 159
    aed4:	97 e0       	ldi	r25, 0x07	; 7
    aed6:	89 2f       	mov	r24, r25
    aed8:	8f 93       	push	r24
    aeda:	8f e9       	ldi	r24, 0x9F	; 159
    aedc:	97 e0       	ldi	r25, 0x07	; 7
    aede:	8f 93       	push	r24
    aee0:	86 e1       	ldi	r24, 0x16	; 22
    aee2:	97 e0       	ldi	r25, 0x07	; 7
    aee4:	89 2f       	mov	r24, r25
    aee6:	8f 93       	push	r24
    aee8:	86 e1       	ldi	r24, 0x16	; 22
    aeea:	97 e0       	ldi	r25, 0x07	; 7
    aeec:	8f 93       	push	r24
    aeee:	80 ef       	ldi	r24, 0xF0	; 240
    aef0:	91 e0       	ldi	r25, 0x01	; 1
    aef2:	89 2f       	mov	r24, r25
    aef4:	8f 93       	push	r24
    aef6:	80 ef       	ldi	r24, 0xF0	; 240
    aef8:	91 e0       	ldi	r25, 0x01	; 1
    aefa:	8f 93       	push	r24
    aefc:	81 e8       	ldi	r24, 0x81	; 129
    aefe:	92 e0       	ldi	r25, 0x02	; 2
    af00:	89 2f       	mov	r24, r25
    af02:	8f 93       	push	r24
    af04:	81 e8       	ldi	r24, 0x81	; 129
    af06:	92 e0       	ldi	r25, 0x02	; 2
    af08:	8f 93       	push	r24
    af0a:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    af0e:	8d b7       	in	r24, 0x3d	; 61
    af10:	9e b7       	in	r25, 0x3e	; 62
    af12:	08 96       	adiw	r24, 0x08	; 8
    af14:	0f b6       	in	r0, 0x3f	; 63
    af16:	f8 94       	cli
    af18:	de bf       	out	0x3e, r29	; 62
    af1a:	0f be       	out	0x3f, r0	; 63
    af1c:	cd bf       	out	0x3d, r28	; 61
    af1e:	54 c3       	rjmp	.+1704   	; 0xb5c8 <Terminal+0x1472>
				}
				else if (Detectar_Comando_Buffer_P(MSG_Rango_2_200_C, chBufferRx_USART0+auxIndexTerminal)) {
    af20:	80 91 2a 06 	lds	r24, 0x062A
    af24:	90 91 2b 06 	lds	r25, 0x062B
    af28:	8f 57       	subi	r24, 0x7F	; 127
    af2a:	9d 4f       	sbci	r25, 0xFD	; 253
    af2c:	bc 01       	movw	r22, r24
    af2e:	85 eb       	ldi	r24, 0xB5	; 181
    af30:	97 e0       	ldi	r25, 0x07	; 7
    af32:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    af36:	89 2b       	or	r24, r25
    af38:	09 f4       	brne	.+2      	; 0xaf3c <Terminal+0xde6>
    af3a:	7a c0       	rjmp	.+244    	; 0xb030 <Terminal+0xeda>
					uRangoCond2 = COND_2_200_C;
    af3c:	86 e0       	ldi	r24, 0x06	; 6
    af3e:	90 e0       	ldi	r25, 0x00	; 0
    af40:	90 93 1e 06 	sts	0x061E, r25
    af44:	80 93 1d 06 	sts	0x061D, r24
					uMuestrasADCcond2 = DEFAULT_MUESTRAS_COND2;
    af48:	84 ef       	ldi	r24, 0xF4	; 244
    af4a:	91 e0       	ldi	r25, 0x01	; 1
    af4c:	90 93 f7 04 	sts	0x04F7, r25
    af50:	80 93 f6 04 	sts	0x04F6, r24
					flCond2auS = DEFAULT_COND2200C_A_US;
    af54:	83 e0       	ldi	r24, 0x03	; 3
    af56:	99 e0       	ldi	r25, 0x09	; 9
    af58:	aa e4       	ldi	r26, 0x4A	; 74
    af5a:	be e3       	ldi	r27, 0x3E	; 62
    af5c:	80 93 93 05 	sts	0x0593, r24
    af60:	90 93 94 05 	sts	0x0594, r25
    af64:	a0 93 95 05 	sts	0x0595, r26
    af68:	b0 93 96 05 	sts	0x0596, r27
					flOffsetCond2 = DEFAULT_COND2200C_OFFSET;
    af6c:	10 92 03 05 	sts	0x0503, r1
    af70:	10 92 04 05 	sts	0x0504, r1
    af74:	10 92 05 05 	sts	0x0505, r1
    af78:	10 92 06 05 	sts	0x0506, r1

					UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom, &uRangoCond2);
    af7c:	6d e1       	ldi	r22, 0x1D	; 29
    af7e:	76 e0       	ldi	r23, 0x06	; 6
    af80:	88 e9       	ldi	r24, 0x98	; 152
    af82:	94 e0       	ldi	r25, 0x04	; 4
    af84:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom, &uMuestrasADCcond2);
    af88:	66 ef       	ldi	r22, 0xF6	; 246
    af8a:	74 e0       	ldi	r23, 0x04	; 4
    af8c:	88 ec       	ldi	r24, 0xC8	; 200
    af8e:	94 e0       	ldi	r25, 0x04	; 4
    af90:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond2auS_Eeprom, &flCond2auS);
    af94:	63 e9       	ldi	r22, 0x93	; 147
    af96:	75 e0       	ldi	r23, 0x05	; 5
    af98:	84 e8       	ldi	r24, 0x84	; 132
    af9a:	94 e0       	ldi	r25, 0x04	; 4
    af9c:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond2_Eeprom, &flOffsetCond2);
    afa0:	63 e0       	ldi	r22, 0x03	; 3
    afa2:	75 e0       	ldi	r23, 0x05	; 5
    afa4:	80 ed       	ldi	r24, 0xD0	; 208
    afa6:	94 e0       	ldi	r25, 0x04	; 4
    afa8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom_BK, &uRangoCond2);
    afac:	6d e1       	ldi	r22, 0x1D	; 29
    afae:	76 e0       	ldi	r23, 0x06	; 6
    afb0:	88 eb       	ldi	r24, 0xB8	; 184
    afb2:	94 e0       	ldi	r25, 0x04	; 4
    afb4:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom_BK, &uMuestrasADCcond2);
    afb8:	66 ef       	ldi	r22, 0xF6	; 246
    afba:	74 e0       	ldi	r23, 0x04	; 4
    afbc:	8c e9       	ldi	r24, 0x9C	; 156
    afbe:	94 e0       	ldi	r25, 0x04	; 4
    afc0:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond2auS_Eeprom_BK, &flCond2auS);
    afc4:	63 e9       	ldi	r22, 0x93	; 147
    afc6:	75 e0       	ldi	r23, 0x05	; 5
    afc8:	8c e8       	ldi	r24, 0x8C	; 140
    afca:	94 e0       	ldi	r25, 0x04	; 4
    afcc:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond2_Eeprom_BK, &flOffsetCond2);
    afd0:	63 e0       	ldi	r22, 0x03	; 3
    afd2:	75 e0       	ldi	r23, 0x05	; 5
    afd4:	86 e7       	ldi	r24, 0x76	; 118
    afd6:	94 e0       	ldi	r25, 0x04	; 4
    afd8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    afdc:	82 e0       	ldi	r24, 0x02	; 2
    afde:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_2, (wchar_t*)MSG_Rango_2_200_C);
    afe2:	85 eb       	ldi	r24, 0xB5	; 181
    afe4:	97 e0       	ldi	r25, 0x07	; 7
    afe6:	89 2f       	mov	r24, r25
    afe8:	8f 93       	push	r24
    afea:	85 eb       	ldi	r24, 0xB5	; 181
    afec:	97 e0       	ldi	r25, 0x07	; 7
    afee:	8f 93       	push	r24
    aff0:	86 e1       	ldi	r24, 0x16	; 22
    aff2:	97 e0       	ldi	r25, 0x07	; 7
    aff4:	89 2f       	mov	r24, r25
    aff6:	8f 93       	push	r24
    aff8:	86 e1       	ldi	r24, 0x16	; 22
    affa:	97 e0       	ldi	r25, 0x07	; 7
    affc:	8f 93       	push	r24
    affe:	80 ef       	ldi	r24, 0xF0	; 240
    b000:	91 e0       	ldi	r25, 0x01	; 1
    b002:	89 2f       	mov	r24, r25
    b004:	8f 93       	push	r24
    b006:	80 ef       	ldi	r24, 0xF0	; 240
    b008:	91 e0       	ldi	r25, 0x01	; 1
    b00a:	8f 93       	push	r24
    b00c:	81 e8       	ldi	r24, 0x81	; 129
    b00e:	92 e0       	ldi	r25, 0x02	; 2
    b010:	89 2f       	mov	r24, r25
    b012:	8f 93       	push	r24
    b014:	81 e8       	ldi	r24, 0x81	; 129
    b016:	92 e0       	ldi	r25, 0x02	; 2
    b018:	8f 93       	push	r24
    b01a:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    b01e:	ed b7       	in	r30, 0x3d	; 61
    b020:	fe b7       	in	r31, 0x3e	; 62
    b022:	38 96       	adiw	r30, 0x08	; 8
    b024:	0f b6       	in	r0, 0x3f	; 63
    b026:	f8 94       	cli
    b028:	de bf       	out	0x3e, r29	; 62
    b02a:	0f be       	out	0x3f, r0	; 63
    b02c:	cd bf       	out	0x3d, r28	; 61
    b02e:	cc c2       	rjmp	.+1432   	; 0xb5c8 <Terminal+0x1472>
				}
				else if (Detectar_Comando_Buffer_P(MSG_Rango_2_200_G, chBufferRx_USART0+auxIndexTerminal)) {
    b030:	80 91 2a 06 	lds	r24, 0x062A
    b034:	90 91 2b 06 	lds	r25, 0x062B
    b038:	8f 57       	subi	r24, 0x7F	; 127
    b03a:	9d 4f       	sbci	r25, 0xFD	; 253
    b03c:	bc 01       	movw	r22, r24
    b03e:	8d ea       	ldi	r24, 0xAD	; 173
    b040:	97 e0       	ldi	r25, 0x07	; 7
    b042:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    b046:	89 2b       	or	r24, r25
    b048:	09 f4       	brne	.+2      	; 0xb04c <Terminal+0xef6>
    b04a:	7a c0       	rjmp	.+244    	; 0xb140 <Terminal+0xfea>
					uRangoCond2 = COND_2_200_G;
    b04c:	83 e0       	ldi	r24, 0x03	; 3
    b04e:	90 e0       	ldi	r25, 0x00	; 0
    b050:	90 93 1e 06 	sts	0x061E, r25
    b054:	80 93 1d 06 	sts	0x061D, r24
					uMuestrasADCcond2 = DEFAULT_MUESTRAS_COND2;
    b058:	84 ef       	ldi	r24, 0xF4	; 244
    b05a:	91 e0       	ldi	r25, 0x01	; 1
    b05c:	90 93 f7 04 	sts	0x04F7, r25
    b060:	80 93 f6 04 	sts	0x04F6, r24
					flCond2auS = DEFAULT_COND2200G_A_US;
    b064:	89 e6       	ldi	r24, 0x69	; 105
    b066:	9f e6       	ldi	r25, 0x6F	; 111
    b068:	a0 e3       	ldi	r26, 0x30	; 48
    b06a:	be e3       	ldi	r27, 0x3E	; 62
    b06c:	80 93 93 05 	sts	0x0593, r24
    b070:	90 93 94 05 	sts	0x0594, r25
    b074:	a0 93 95 05 	sts	0x0595, r26
    b078:	b0 93 96 05 	sts	0x0596, r27
					flOffsetCond2 = DEFAULT_COND2200G_OFFSET;
    b07c:	10 92 03 05 	sts	0x0503, r1
    b080:	10 92 04 05 	sts	0x0504, r1
    b084:	10 92 05 05 	sts	0x0505, r1
    b088:	10 92 06 05 	sts	0x0506, r1

					UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom, &uRangoCond2);
    b08c:	6d e1       	ldi	r22, 0x1D	; 29
    b08e:	76 e0       	ldi	r23, 0x06	; 6
    b090:	88 e9       	ldi	r24, 0x98	; 152
    b092:	94 e0       	ldi	r25, 0x04	; 4
    b094:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom, &uMuestrasADCcond2);
    b098:	66 ef       	ldi	r22, 0xF6	; 246
    b09a:	74 e0       	ldi	r23, 0x04	; 4
    b09c:	88 ec       	ldi	r24, 0xC8	; 200
    b09e:	94 e0       	ldi	r25, 0x04	; 4
    b0a0:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond2auS_Eeprom, &flCond2auS);
    b0a4:	63 e9       	ldi	r22, 0x93	; 147
    b0a6:	75 e0       	ldi	r23, 0x05	; 5
    b0a8:	84 e8       	ldi	r24, 0x84	; 132
    b0aa:	94 e0       	ldi	r25, 0x04	; 4
    b0ac:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond2_Eeprom, &flOffsetCond2);
    b0b0:	63 e0       	ldi	r22, 0x03	; 3
    b0b2:	75 e0       	ldi	r23, 0x05	; 5
    b0b4:	80 ed       	ldi	r24, 0xD0	; 208
    b0b6:	94 e0       	ldi	r25, 0x04	; 4
    b0b8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom_BK, &uRangoCond2);
    b0bc:	6d e1       	ldi	r22, 0x1D	; 29
    b0be:	76 e0       	ldi	r23, 0x06	; 6
    b0c0:	88 eb       	ldi	r24, 0xB8	; 184
    b0c2:	94 e0       	ldi	r25, 0x04	; 4
    b0c4:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom_BK, &uMuestrasADCcond2);
    b0c8:	66 ef       	ldi	r22, 0xF6	; 246
    b0ca:	74 e0       	ldi	r23, 0x04	; 4
    b0cc:	8c e9       	ldi	r24, 0x9C	; 156
    b0ce:	94 e0       	ldi	r25, 0x04	; 4
    b0d0:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond2auS_Eeprom_BK, &flCond2auS);
    b0d4:	63 e9       	ldi	r22, 0x93	; 147
    b0d6:	75 e0       	ldi	r23, 0x05	; 5
    b0d8:	8c e8       	ldi	r24, 0x8C	; 140
    b0da:	94 e0       	ldi	r25, 0x04	; 4
    b0dc:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond2_Eeprom_BK, &flOffsetCond2);
    b0e0:	63 e0       	ldi	r22, 0x03	; 3
    b0e2:	75 e0       	ldi	r23, 0x05	; 5
    b0e4:	86 e7       	ldi	r24, 0x76	; 118
    b0e6:	94 e0       	ldi	r25, 0x04	; 4
    b0e8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    b0ec:	82 e0       	ldi	r24, 0x02	; 2
    b0ee:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_2, (wchar_t*)MSG_Rango_2_200_G);
    b0f2:	8d ea       	ldi	r24, 0xAD	; 173
    b0f4:	97 e0       	ldi	r25, 0x07	; 7
    b0f6:	89 2f       	mov	r24, r25
    b0f8:	8f 93       	push	r24
    b0fa:	8d ea       	ldi	r24, 0xAD	; 173
    b0fc:	97 e0       	ldi	r25, 0x07	; 7
    b0fe:	8f 93       	push	r24
    b100:	86 e1       	ldi	r24, 0x16	; 22
    b102:	97 e0       	ldi	r25, 0x07	; 7
    b104:	89 2f       	mov	r24, r25
    b106:	8f 93       	push	r24
    b108:	86 e1       	ldi	r24, 0x16	; 22
    b10a:	97 e0       	ldi	r25, 0x07	; 7
    b10c:	8f 93       	push	r24
    b10e:	80 ef       	ldi	r24, 0xF0	; 240
    b110:	91 e0       	ldi	r25, 0x01	; 1
    b112:	89 2f       	mov	r24, r25
    b114:	8f 93       	push	r24
    b116:	80 ef       	ldi	r24, 0xF0	; 240
    b118:	91 e0       	ldi	r25, 0x01	; 1
    b11a:	8f 93       	push	r24
    b11c:	81 e8       	ldi	r24, 0x81	; 129
    b11e:	92 e0       	ldi	r25, 0x02	; 2
    b120:	89 2f       	mov	r24, r25
    b122:	8f 93       	push	r24
    b124:	81 e8       	ldi	r24, 0x81	; 129
    b126:	92 e0       	ldi	r25, 0x02	; 2
    b128:	8f 93       	push	r24
    b12a:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    b12e:	8d b7       	in	r24, 0x3d	; 61
    b130:	9e b7       	in	r25, 0x3e	; 62
    b132:	08 96       	adiw	r24, 0x08	; 8
    b134:	0f b6       	in	r0, 0x3f	; 63
    b136:	f8 94       	cli
    b138:	de bf       	out	0x3e, r29	; 62
    b13a:	0f be       	out	0x3f, r0	; 63
    b13c:	cd bf       	out	0x3d, r28	; 61
    b13e:	44 c2       	rjmp	.+1160   	; 0xb5c8 <Terminal+0x1472>
				}
				else if (Detectar_Comando_Buffer_P(MSG_Rango_20_2500_C, chBufferRx_USART0+auxIndexTerminal)) {
    b140:	80 91 2a 06 	lds	r24, 0x062A
    b144:	90 91 2b 06 	lds	r25, 0x062B
    b148:	8f 57       	subi	r24, 0x7F	; 127
    b14a:	9d 4f       	sbci	r25, 0xFD	; 253
    b14c:	bc 01       	movw	r22, r24
    b14e:	87 ec       	ldi	r24, 0xC7	; 199
    b150:	97 e0       	ldi	r25, 0x07	; 7
    b152:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    b156:	89 2b       	or	r24, r25
    b158:	09 f4       	brne	.+2      	; 0xb15c <Terminal+0x1006>
    b15a:	7a c0       	rjmp	.+244    	; 0xb250 <Terminal+0x10fa>
					uRangoCond2 = COND_20_2500_C;
    b15c:	84 e0       	ldi	r24, 0x04	; 4
    b15e:	90 e0       	ldi	r25, 0x00	; 0
    b160:	90 93 1e 06 	sts	0x061E, r25
    b164:	80 93 1d 06 	sts	0x061D, r24
					uMuestrasADCcond2 = DEFAULT_MUESTRAS_COND2;
    b168:	84 ef       	ldi	r24, 0xF4	; 244
    b16a:	91 e0       	ldi	r25, 0x01	; 1
    b16c:	90 93 f7 04 	sts	0x04F7, r25
    b170:	80 93 f6 04 	sts	0x04F6, r24
					flCond2auS = DEFAULT_COND202500C_A_US;
    b174:	87 ec       	ldi	r24, 0xC7	; 199
    b176:	9a eb       	ldi	r25, 0xBA	; 186
    b178:	a8 e2       	ldi	r26, 0x28	; 40
    b17a:	b0 e4       	ldi	r27, 0x40	; 64
    b17c:	80 93 93 05 	sts	0x0593, r24
    b180:	90 93 94 05 	sts	0x0594, r25
    b184:	a0 93 95 05 	sts	0x0595, r26
    b188:	b0 93 96 05 	sts	0x0596, r27
					flOffsetCond2 = DEFAULT_COND202500C_OFFSET;
    b18c:	10 92 03 05 	sts	0x0503, r1
    b190:	10 92 04 05 	sts	0x0504, r1
    b194:	10 92 05 05 	sts	0x0505, r1
    b198:	10 92 06 05 	sts	0x0506, r1

					UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom, &uRangoCond2);
    b19c:	6d e1       	ldi	r22, 0x1D	; 29
    b19e:	76 e0       	ldi	r23, 0x06	; 6
    b1a0:	88 e9       	ldi	r24, 0x98	; 152
    b1a2:	94 e0       	ldi	r25, 0x04	; 4
    b1a4:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom, &uMuestrasADCcond2);
    b1a8:	66 ef       	ldi	r22, 0xF6	; 246
    b1aa:	74 e0       	ldi	r23, 0x04	; 4
    b1ac:	88 ec       	ldi	r24, 0xC8	; 200
    b1ae:	94 e0       	ldi	r25, 0x04	; 4
    b1b0:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond2auS_Eeprom, &flCond2auS);
    b1b4:	63 e9       	ldi	r22, 0x93	; 147
    b1b6:	75 e0       	ldi	r23, 0x05	; 5
    b1b8:	84 e8       	ldi	r24, 0x84	; 132
    b1ba:	94 e0       	ldi	r25, 0x04	; 4
    b1bc:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond2_Eeprom, &flOffsetCond2);
    b1c0:	63 e0       	ldi	r22, 0x03	; 3
    b1c2:	75 e0       	ldi	r23, 0x05	; 5
    b1c4:	80 ed       	ldi	r24, 0xD0	; 208
    b1c6:	94 e0       	ldi	r25, 0x04	; 4
    b1c8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom_BK, &uRangoCond2);
    b1cc:	6d e1       	ldi	r22, 0x1D	; 29
    b1ce:	76 e0       	ldi	r23, 0x06	; 6
    b1d0:	88 eb       	ldi	r24, 0xB8	; 184
    b1d2:	94 e0       	ldi	r25, 0x04	; 4
    b1d4:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom_BK, &uMuestrasADCcond2);
    b1d8:	66 ef       	ldi	r22, 0xF6	; 246
    b1da:	74 e0       	ldi	r23, 0x04	; 4
    b1dc:	8c e9       	ldi	r24, 0x9C	; 156
    b1de:	94 e0       	ldi	r25, 0x04	; 4
    b1e0:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond2auS_Eeprom_BK, &flCond2auS);
    b1e4:	63 e9       	ldi	r22, 0x93	; 147
    b1e6:	75 e0       	ldi	r23, 0x05	; 5
    b1e8:	8c e8       	ldi	r24, 0x8C	; 140
    b1ea:	94 e0       	ldi	r25, 0x04	; 4
    b1ec:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond2_Eeprom_BK, &flOffsetCond2);
    b1f0:	63 e0       	ldi	r22, 0x03	; 3
    b1f2:	75 e0       	ldi	r23, 0x05	; 5
    b1f4:	86 e7       	ldi	r24, 0x76	; 118
    b1f6:	94 e0       	ldi	r25, 0x04	; 4
    b1f8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    b1fc:	82 e0       	ldi	r24, 0x02	; 2
    b1fe:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_2, (wchar_t*)MSG_Rango_20_2500_C);
    b202:	87 ec       	ldi	r24, 0xC7	; 199
    b204:	97 e0       	ldi	r25, 0x07	; 7
    b206:	89 2f       	mov	r24, r25
    b208:	8f 93       	push	r24
    b20a:	87 ec       	ldi	r24, 0xC7	; 199
    b20c:	97 e0       	ldi	r25, 0x07	; 7
    b20e:	8f 93       	push	r24
    b210:	86 e1       	ldi	r24, 0x16	; 22
    b212:	97 e0       	ldi	r25, 0x07	; 7
    b214:	89 2f       	mov	r24, r25
    b216:	8f 93       	push	r24
    b218:	86 e1       	ldi	r24, 0x16	; 22
    b21a:	97 e0       	ldi	r25, 0x07	; 7
    b21c:	8f 93       	push	r24
    b21e:	80 ef       	ldi	r24, 0xF0	; 240
    b220:	91 e0       	ldi	r25, 0x01	; 1
    b222:	89 2f       	mov	r24, r25
    b224:	8f 93       	push	r24
    b226:	80 ef       	ldi	r24, 0xF0	; 240
    b228:	91 e0       	ldi	r25, 0x01	; 1
    b22a:	8f 93       	push	r24
    b22c:	81 e8       	ldi	r24, 0x81	; 129
    b22e:	92 e0       	ldi	r25, 0x02	; 2
    b230:	89 2f       	mov	r24, r25
    b232:	8f 93       	push	r24
    b234:	81 e8       	ldi	r24, 0x81	; 129
    b236:	92 e0       	ldi	r25, 0x02	; 2
    b238:	8f 93       	push	r24
    b23a:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    b23e:	ed b7       	in	r30, 0x3d	; 61
    b240:	fe b7       	in	r31, 0x3e	; 62
    b242:	38 96       	adiw	r30, 0x08	; 8
    b244:	0f b6       	in	r0, 0x3f	; 63
    b246:	f8 94       	cli
    b248:	de bf       	out	0x3e, r29	; 62
    b24a:	0f be       	out	0x3f, r0	; 63
    b24c:	cd bf       	out	0x3d, r28	; 61
    b24e:	bc c1       	rjmp	.+888    	; 0xb5c8 <Terminal+0x1472>
				}
				else if (Detectar_Comando_Buffer_P(MSG_Rango_20_2500_G, chBufferRx_USART0+auxIndexTerminal)) {
    b250:	80 91 2a 06 	lds	r24, 0x062A
    b254:	90 91 2b 06 	lds	r25, 0x062B
    b258:	8f 57       	subi	r24, 0x7F	; 127
    b25a:	9d 4f       	sbci	r25, 0xFD	; 253
    b25c:	bc 01       	movw	r22, r24
    b25e:	8d eb       	ldi	r24, 0xBD	; 189
    b260:	97 e0       	ldi	r25, 0x07	; 7
    b262:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    b266:	89 2b       	or	r24, r25
    b268:	09 f4       	brne	.+2      	; 0xb26c <Terminal+0x1116>
    b26a:	7a c0       	rjmp	.+244    	; 0xb360 <Terminal+0x120a>
					uRangoCond2 = COND_20_2500_G;
    b26c:	81 e0       	ldi	r24, 0x01	; 1
    b26e:	90 e0       	ldi	r25, 0x00	; 0
    b270:	90 93 1e 06 	sts	0x061E, r25
    b274:	80 93 1d 06 	sts	0x061D, r24
					uMuestrasADCcond2 = DEFAULT_MUESTRAS_COND2;
    b278:	84 ef       	ldi	r24, 0xF4	; 244
    b27a:	91 e0       	ldi	r25, 0x01	; 1
    b27c:	90 93 f7 04 	sts	0x04F7, r25
    b280:	80 93 f6 04 	sts	0x04F6, r24
					flCond2auS = DEFAULT_COND202500G_A_US;
    b284:	8c e9       	ldi	r24, 0x9C	; 156
    b286:	92 ea       	ldi	r25, 0xA2	; 162
    b288:	ab e0       	ldi	r26, 0x0B	; 11
    b28a:	b0 e4       	ldi	r27, 0x40	; 64
    b28c:	80 93 93 05 	sts	0x0593, r24
    b290:	90 93 94 05 	sts	0x0594, r25
    b294:	a0 93 95 05 	sts	0x0595, r26
    b298:	b0 93 96 05 	sts	0x0596, r27
					flOffsetCond2 = DEFAULT_COND202500G_OFFSET;
    b29c:	10 92 03 05 	sts	0x0503, r1
    b2a0:	10 92 04 05 	sts	0x0504, r1
    b2a4:	10 92 05 05 	sts	0x0505, r1
    b2a8:	10 92 06 05 	sts	0x0506, r1

					UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom, &uRangoCond2);
    b2ac:	6d e1       	ldi	r22, 0x1D	; 29
    b2ae:	76 e0       	ldi	r23, 0x06	; 6
    b2b0:	88 e9       	ldi	r24, 0x98	; 152
    b2b2:	94 e0       	ldi	r25, 0x04	; 4
    b2b4:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom, &uMuestrasADCcond2);
    b2b8:	66 ef       	ldi	r22, 0xF6	; 246
    b2ba:	74 e0       	ldi	r23, 0x04	; 4
    b2bc:	88 ec       	ldi	r24, 0xC8	; 200
    b2be:	94 e0       	ldi	r25, 0x04	; 4
    b2c0:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond2auS_Eeprom, &flCond2auS);
    b2c4:	63 e9       	ldi	r22, 0x93	; 147
    b2c6:	75 e0       	ldi	r23, 0x05	; 5
    b2c8:	84 e8       	ldi	r24, 0x84	; 132
    b2ca:	94 e0       	ldi	r25, 0x04	; 4
    b2cc:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond2_Eeprom, &flOffsetCond2);
    b2d0:	63 e0       	ldi	r22, 0x03	; 3
    b2d2:	75 e0       	ldi	r23, 0x05	; 5
    b2d4:	80 ed       	ldi	r24, 0xD0	; 208
    b2d6:	94 e0       	ldi	r25, 0x04	; 4
    b2d8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					UnsignedInt_a_Eeprom(&uRangoCond2_Eeprom_BK, &uRangoCond2);
    b2dc:	6d e1       	ldi	r22, 0x1D	; 29
    b2de:	76 e0       	ldi	r23, 0x06	; 6
    b2e0:	88 eb       	ldi	r24, 0xB8	; 184
    b2e2:	94 e0       	ldi	r25, 0x04	; 4
    b2e4:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom_BK, &uMuestrasADCcond2);
    b2e8:	66 ef       	ldi	r22, 0xF6	; 246
    b2ea:	74 e0       	ldi	r23, 0x04	; 4
    b2ec:	8c e9       	ldi	r24, 0x9C	; 156
    b2ee:	94 e0       	ldi	r25, 0x04	; 4
    b2f0:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Float_a_Eeprom(&flCond2auS_Eeprom_BK, &flCond2auS);
    b2f4:	63 e9       	ldi	r22, 0x93	; 147
    b2f6:	75 e0       	ldi	r23, 0x05	; 5
    b2f8:	8c e8       	ldi	r24, 0x8C	; 140
    b2fa:	94 e0       	ldi	r25, 0x04	; 4
    b2fc:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond2_Eeprom_BK, &flOffsetCond2);
    b300:	63 e0       	ldi	r22, 0x03	; 3
    b302:	75 e0       	ldi	r23, 0x05	; 5
    b304:	86 e7       	ldi	r24, 0x76	; 118
    b306:	94 e0       	ldi	r25, 0x04	; 4
    b308:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    b30c:	82 e0       	ldi	r24, 0x02	; 2
    b30e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_2, (wchar_t*)MSG_Rango_20_2500_G);
    b312:	8d eb       	ldi	r24, 0xBD	; 189
    b314:	97 e0       	ldi	r25, 0x07	; 7
    b316:	89 2f       	mov	r24, r25
    b318:	8f 93       	push	r24
    b31a:	8d eb       	ldi	r24, 0xBD	; 189
    b31c:	97 e0       	ldi	r25, 0x07	; 7
    b31e:	8f 93       	push	r24
    b320:	86 e1       	ldi	r24, 0x16	; 22
    b322:	97 e0       	ldi	r25, 0x07	; 7
    b324:	89 2f       	mov	r24, r25
    b326:	8f 93       	push	r24
    b328:	86 e1       	ldi	r24, 0x16	; 22
    b32a:	97 e0       	ldi	r25, 0x07	; 7
    b32c:	8f 93       	push	r24
    b32e:	80 ef       	ldi	r24, 0xF0	; 240
    b330:	91 e0       	ldi	r25, 0x01	; 1
    b332:	89 2f       	mov	r24, r25
    b334:	8f 93       	push	r24
    b336:	80 ef       	ldi	r24, 0xF0	; 240
    b338:	91 e0       	ldi	r25, 0x01	; 1
    b33a:	8f 93       	push	r24
    b33c:	81 e8       	ldi	r24, 0x81	; 129
    b33e:	92 e0       	ldi	r25, 0x02	; 2
    b340:	89 2f       	mov	r24, r25
    b342:	8f 93       	push	r24
    b344:	81 e8       	ldi	r24, 0x81	; 129
    b346:	92 e0       	ldi	r25, 0x02	; 2
    b348:	8f 93       	push	r24
    b34a:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    b34e:	8d b7       	in	r24, 0x3d	; 61
    b350:	9e b7       	in	r25, 0x3e	; 62
    b352:	08 96       	adiw	r24, 0x08	; 8
    b354:	0f b6       	in	r0, 0x3f	; 63
    b356:	f8 94       	cli
    b358:	de bf       	out	0x3e, r29	; 62
    b35a:	0f be       	out	0x3f, r0	; 63
    b35c:	cd bf       	out	0x3d, r28	; 61
    b35e:	34 c1       	rjmp	.+616    	; 0xb5c8 <Terminal+0x1472>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					if (uRangoCond2 == COND_0_20_C) {
    b360:	80 91 1d 06 	lds	r24, 0x061D
    b364:	90 91 1e 06 	lds	r25, 0x061E
    b368:	05 97       	sbiw	r24, 0x05	; 5
    b36a:	39 f5       	brne	.+78     	; 0xb3ba <Terminal+0x1264>
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_2, (wchar_t*)MSG_Rango_0_20_C);
    b36c:	86 ea       	ldi	r24, 0xA6	; 166
    b36e:	97 e0       	ldi	r25, 0x07	; 7
    b370:	89 2f       	mov	r24, r25
    b372:	8f 93       	push	r24
    b374:	86 ea       	ldi	r24, 0xA6	; 166
    b376:	97 e0       	ldi	r25, 0x07	; 7
    b378:	8f 93       	push	r24
    b37a:	86 e1       	ldi	r24, 0x16	; 22
    b37c:	97 e0       	ldi	r25, 0x07	; 7
    b37e:	89 2f       	mov	r24, r25
    b380:	8f 93       	push	r24
    b382:	86 e1       	ldi	r24, 0x16	; 22
    b384:	97 e0       	ldi	r25, 0x07	; 7
    b386:	8f 93       	push	r24
    b388:	80 ef       	ldi	r24, 0xF0	; 240
    b38a:	91 e0       	ldi	r25, 0x01	; 1
    b38c:	89 2f       	mov	r24, r25
    b38e:	8f 93       	push	r24
    b390:	80 ef       	ldi	r24, 0xF0	; 240
    b392:	91 e0       	ldi	r25, 0x01	; 1
    b394:	8f 93       	push	r24
    b396:	81 e8       	ldi	r24, 0x81	; 129
    b398:	92 e0       	ldi	r25, 0x02	; 2
    b39a:	89 2f       	mov	r24, r25
    b39c:	8f 93       	push	r24
    b39e:	81 e8       	ldi	r24, 0x81	; 129
    b3a0:	92 e0       	ldi	r25, 0x02	; 2
    b3a2:	8f 93       	push	r24
    b3a4:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    b3a8:	ed b7       	in	r30, 0x3d	; 61
    b3aa:	fe b7       	in	r31, 0x3e	; 62
    b3ac:	38 96       	adiw	r30, 0x08	; 8
    b3ae:	0f b6       	in	r0, 0x3f	; 63
    b3b0:	f8 94       	cli
    b3b2:	de bf       	out	0x3e, r29	; 62
    b3b4:	0f be       	out	0x3f, r0	; 63
    b3b6:	cd bf       	out	0x3d, r28	; 61
    b3b8:	07 c1       	rjmp	.+526    	; 0xb5c8 <Terminal+0x1472>
					}
					else if (uRangoCond2 == COND_0_20_G) {
    b3ba:	80 91 1d 06 	lds	r24, 0x061D
    b3be:	90 91 1e 06 	lds	r25, 0x061E
    b3c2:	02 97       	sbiw	r24, 0x02	; 2
    b3c4:	39 f5       	brne	.+78     	; 0xb414 <Terminal+0x12be>
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_2, (wchar_t*)MSG_Rango_0_20_G);
    b3c6:	8f e9       	ldi	r24, 0x9F	; 159
    b3c8:	97 e0       	ldi	r25, 0x07	; 7
    b3ca:	89 2f       	mov	r24, r25
    b3cc:	8f 93       	push	r24
    b3ce:	8f e9       	ldi	r24, 0x9F	; 159
    b3d0:	97 e0       	ldi	r25, 0x07	; 7
    b3d2:	8f 93       	push	r24
    b3d4:	86 e1       	ldi	r24, 0x16	; 22
    b3d6:	97 e0       	ldi	r25, 0x07	; 7
    b3d8:	89 2f       	mov	r24, r25
    b3da:	8f 93       	push	r24
    b3dc:	86 e1       	ldi	r24, 0x16	; 22
    b3de:	97 e0       	ldi	r25, 0x07	; 7
    b3e0:	8f 93       	push	r24
    b3e2:	80 ef       	ldi	r24, 0xF0	; 240
    b3e4:	91 e0       	ldi	r25, 0x01	; 1
    b3e6:	89 2f       	mov	r24, r25
    b3e8:	8f 93       	push	r24
    b3ea:	80 ef       	ldi	r24, 0xF0	; 240
    b3ec:	91 e0       	ldi	r25, 0x01	; 1
    b3ee:	8f 93       	push	r24
    b3f0:	81 e8       	ldi	r24, 0x81	; 129
    b3f2:	92 e0       	ldi	r25, 0x02	; 2
    b3f4:	89 2f       	mov	r24, r25
    b3f6:	8f 93       	push	r24
    b3f8:	81 e8       	ldi	r24, 0x81	; 129
    b3fa:	92 e0       	ldi	r25, 0x02	; 2
    b3fc:	8f 93       	push	r24
    b3fe:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    b402:	8d b7       	in	r24, 0x3d	; 61
    b404:	9e b7       	in	r25, 0x3e	; 62
    b406:	08 96       	adiw	r24, 0x08	; 8
    b408:	0f b6       	in	r0, 0x3f	; 63
    b40a:	f8 94       	cli
    b40c:	de bf       	out	0x3e, r29	; 62
    b40e:	0f be       	out	0x3f, r0	; 63
    b410:	cd bf       	out	0x3d, r28	; 61
    b412:	da c0       	rjmp	.+436    	; 0xb5c8 <Terminal+0x1472>
					}
					else if (uRangoCond2 == COND_2_200_C) {
    b414:	80 91 1d 06 	lds	r24, 0x061D
    b418:	90 91 1e 06 	lds	r25, 0x061E
    b41c:	06 97       	sbiw	r24, 0x06	; 6
    b41e:	39 f5       	brne	.+78     	; 0xb46e <Terminal+0x1318>
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_2, (wchar_t*)MSG_Rango_2_200_C);
    b420:	85 eb       	ldi	r24, 0xB5	; 181
    b422:	97 e0       	ldi	r25, 0x07	; 7
    b424:	89 2f       	mov	r24, r25
    b426:	8f 93       	push	r24
    b428:	85 eb       	ldi	r24, 0xB5	; 181
    b42a:	97 e0       	ldi	r25, 0x07	; 7
    b42c:	8f 93       	push	r24
    b42e:	86 e1       	ldi	r24, 0x16	; 22
    b430:	97 e0       	ldi	r25, 0x07	; 7
    b432:	89 2f       	mov	r24, r25
    b434:	8f 93       	push	r24
    b436:	86 e1       	ldi	r24, 0x16	; 22
    b438:	97 e0       	ldi	r25, 0x07	; 7
    b43a:	8f 93       	push	r24
    b43c:	80 ef       	ldi	r24, 0xF0	; 240
    b43e:	91 e0       	ldi	r25, 0x01	; 1
    b440:	89 2f       	mov	r24, r25
    b442:	8f 93       	push	r24
    b444:	80 ef       	ldi	r24, 0xF0	; 240
    b446:	91 e0       	ldi	r25, 0x01	; 1
    b448:	8f 93       	push	r24
    b44a:	81 e8       	ldi	r24, 0x81	; 129
    b44c:	92 e0       	ldi	r25, 0x02	; 2
    b44e:	89 2f       	mov	r24, r25
    b450:	8f 93       	push	r24
    b452:	81 e8       	ldi	r24, 0x81	; 129
    b454:	92 e0       	ldi	r25, 0x02	; 2
    b456:	8f 93       	push	r24
    b458:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    b45c:	ed b7       	in	r30, 0x3d	; 61
    b45e:	fe b7       	in	r31, 0x3e	; 62
    b460:	38 96       	adiw	r30, 0x08	; 8
    b462:	0f b6       	in	r0, 0x3f	; 63
    b464:	f8 94       	cli
    b466:	de bf       	out	0x3e, r29	; 62
    b468:	0f be       	out	0x3f, r0	; 63
    b46a:	cd bf       	out	0x3d, r28	; 61
    b46c:	ad c0       	rjmp	.+346    	; 0xb5c8 <Terminal+0x1472>
					}
					else if (uRangoCond2 == COND_2_200_G) {
    b46e:	80 91 1d 06 	lds	r24, 0x061D
    b472:	90 91 1e 06 	lds	r25, 0x061E
    b476:	03 97       	sbiw	r24, 0x03	; 3
    b478:	39 f5       	brne	.+78     	; 0xb4c8 <Terminal+0x1372>
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_2, (wchar_t*)MSG_Rango_2_200_G);
    b47a:	8d ea       	ldi	r24, 0xAD	; 173
    b47c:	97 e0       	ldi	r25, 0x07	; 7
    b47e:	89 2f       	mov	r24, r25
    b480:	8f 93       	push	r24
    b482:	8d ea       	ldi	r24, 0xAD	; 173
    b484:	97 e0       	ldi	r25, 0x07	; 7
    b486:	8f 93       	push	r24
    b488:	86 e1       	ldi	r24, 0x16	; 22
    b48a:	97 e0       	ldi	r25, 0x07	; 7
    b48c:	89 2f       	mov	r24, r25
    b48e:	8f 93       	push	r24
    b490:	86 e1       	ldi	r24, 0x16	; 22
    b492:	97 e0       	ldi	r25, 0x07	; 7
    b494:	8f 93       	push	r24
    b496:	80 ef       	ldi	r24, 0xF0	; 240
    b498:	91 e0       	ldi	r25, 0x01	; 1
    b49a:	89 2f       	mov	r24, r25
    b49c:	8f 93       	push	r24
    b49e:	80 ef       	ldi	r24, 0xF0	; 240
    b4a0:	91 e0       	ldi	r25, 0x01	; 1
    b4a2:	8f 93       	push	r24
    b4a4:	81 e8       	ldi	r24, 0x81	; 129
    b4a6:	92 e0       	ldi	r25, 0x02	; 2
    b4a8:	89 2f       	mov	r24, r25
    b4aa:	8f 93       	push	r24
    b4ac:	81 e8       	ldi	r24, 0x81	; 129
    b4ae:	92 e0       	ldi	r25, 0x02	; 2
    b4b0:	8f 93       	push	r24
    b4b2:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    b4b6:	8d b7       	in	r24, 0x3d	; 61
    b4b8:	9e b7       	in	r25, 0x3e	; 62
    b4ba:	08 96       	adiw	r24, 0x08	; 8
    b4bc:	0f b6       	in	r0, 0x3f	; 63
    b4be:	f8 94       	cli
    b4c0:	de bf       	out	0x3e, r29	; 62
    b4c2:	0f be       	out	0x3f, r0	; 63
    b4c4:	cd bf       	out	0x3d, r28	; 61
    b4c6:	80 c0       	rjmp	.+256    	; 0xb5c8 <Terminal+0x1472>
					}
					else if (uRangoCond2 == COND_20_2500_C) {
    b4c8:	80 91 1d 06 	lds	r24, 0x061D
    b4cc:	90 91 1e 06 	lds	r25, 0x061E
    b4d0:	04 97       	sbiw	r24, 0x04	; 4
    b4d2:	39 f5       	brne	.+78     	; 0xb522 <Terminal+0x13cc>
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_2, (wchar_t*)MSG_Rango_20_2500_C);
    b4d4:	87 ec       	ldi	r24, 0xC7	; 199
    b4d6:	97 e0       	ldi	r25, 0x07	; 7
    b4d8:	89 2f       	mov	r24, r25
    b4da:	8f 93       	push	r24
    b4dc:	87 ec       	ldi	r24, 0xC7	; 199
    b4de:	97 e0       	ldi	r25, 0x07	; 7
    b4e0:	8f 93       	push	r24
    b4e2:	86 e1       	ldi	r24, 0x16	; 22
    b4e4:	97 e0       	ldi	r25, 0x07	; 7
    b4e6:	89 2f       	mov	r24, r25
    b4e8:	8f 93       	push	r24
    b4ea:	86 e1       	ldi	r24, 0x16	; 22
    b4ec:	97 e0       	ldi	r25, 0x07	; 7
    b4ee:	8f 93       	push	r24
    b4f0:	80 ef       	ldi	r24, 0xF0	; 240
    b4f2:	91 e0       	ldi	r25, 0x01	; 1
    b4f4:	89 2f       	mov	r24, r25
    b4f6:	8f 93       	push	r24
    b4f8:	80 ef       	ldi	r24, 0xF0	; 240
    b4fa:	91 e0       	ldi	r25, 0x01	; 1
    b4fc:	8f 93       	push	r24
    b4fe:	81 e8       	ldi	r24, 0x81	; 129
    b500:	92 e0       	ldi	r25, 0x02	; 2
    b502:	89 2f       	mov	r24, r25
    b504:	8f 93       	push	r24
    b506:	81 e8       	ldi	r24, 0x81	; 129
    b508:	92 e0       	ldi	r25, 0x02	; 2
    b50a:	8f 93       	push	r24
    b50c:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    b510:	ed b7       	in	r30, 0x3d	; 61
    b512:	fe b7       	in	r31, 0x3e	; 62
    b514:	38 96       	adiw	r30, 0x08	; 8
    b516:	0f b6       	in	r0, 0x3f	; 63
    b518:	f8 94       	cli
    b51a:	de bf       	out	0x3e, r29	; 62
    b51c:	0f be       	out	0x3f, r0	; 63
    b51e:	cd bf       	out	0x3d, r28	; 61
    b520:	53 c0       	rjmp	.+166    	; 0xb5c8 <Terminal+0x1472>
					}
					else if (uRangoCond2 == COND_20_2500_G) {
    b522:	80 91 1d 06 	lds	r24, 0x061D
    b526:	90 91 1e 06 	lds	r25, 0x061E
    b52a:	01 97       	sbiw	r24, 0x01	; 1
    b52c:	39 f5       	brne	.+78     	; 0xb57c <Terminal+0x1426>
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_2, (wchar_t*)MSG_Rango_20_2500_G);
    b52e:	8d eb       	ldi	r24, 0xBD	; 189
    b530:	97 e0       	ldi	r25, 0x07	; 7
    b532:	89 2f       	mov	r24, r25
    b534:	8f 93       	push	r24
    b536:	8d eb       	ldi	r24, 0xBD	; 189
    b538:	97 e0       	ldi	r25, 0x07	; 7
    b53a:	8f 93       	push	r24
    b53c:	86 e1       	ldi	r24, 0x16	; 22
    b53e:	97 e0       	ldi	r25, 0x07	; 7
    b540:	89 2f       	mov	r24, r25
    b542:	8f 93       	push	r24
    b544:	86 e1       	ldi	r24, 0x16	; 22
    b546:	97 e0       	ldi	r25, 0x07	; 7
    b548:	8f 93       	push	r24
    b54a:	80 ef       	ldi	r24, 0xF0	; 240
    b54c:	91 e0       	ldi	r25, 0x01	; 1
    b54e:	89 2f       	mov	r24, r25
    b550:	8f 93       	push	r24
    b552:	80 ef       	ldi	r24, 0xF0	; 240
    b554:	91 e0       	ldi	r25, 0x01	; 1
    b556:	8f 93       	push	r24
    b558:	81 e8       	ldi	r24, 0x81	; 129
    b55a:	92 e0       	ldi	r25, 0x02	; 2
    b55c:	89 2f       	mov	r24, r25
    b55e:	8f 93       	push	r24
    b560:	81 e8       	ldi	r24, 0x81	; 129
    b562:	92 e0       	ldi	r25, 0x02	; 2
    b564:	8f 93       	push	r24
    b566:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    b56a:	8d b7       	in	r24, 0x3d	; 61
    b56c:	9e b7       	in	r25, 0x3e	; 62
    b56e:	08 96       	adiw	r24, 0x08	; 8
    b570:	0f b6       	in	r0, 0x3f	; 63
    b572:	f8 94       	cli
    b574:	de bf       	out	0x3e, r29	; 62
    b576:	0f be       	out	0x3f, r0	; 63
    b578:	cd bf       	out	0x3d, r28	; 61
    b57a:	26 c0       	rjmp	.+76     	; 0xb5c8 <Terminal+0x1472>
					}
					else {
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Rango_2, (wchar_t*)MSG_Error);
    b57c:	89 e6       	ldi	r24, 0x69	; 105
    b57e:	97 e0       	ldi	r25, 0x07	; 7
    b580:	89 2f       	mov	r24, r25
    b582:	8f 93       	push	r24
    b584:	89 e6       	ldi	r24, 0x69	; 105
    b586:	97 e0       	ldi	r25, 0x07	; 7
    b588:	8f 93       	push	r24
    b58a:	86 e1       	ldi	r24, 0x16	; 22
    b58c:	97 e0       	ldi	r25, 0x07	; 7
    b58e:	89 2f       	mov	r24, r25
    b590:	8f 93       	push	r24
    b592:	86 e1       	ldi	r24, 0x16	; 22
    b594:	97 e0       	ldi	r25, 0x07	; 7
    b596:	8f 93       	push	r24
    b598:	80 ef       	ldi	r24, 0xF0	; 240
    b59a:	91 e0       	ldi	r25, 0x01	; 1
    b59c:	89 2f       	mov	r24, r25
    b59e:	8f 93       	push	r24
    b5a0:	80 ef       	ldi	r24, 0xF0	; 240
    b5a2:	91 e0       	ldi	r25, 0x01	; 1
    b5a4:	8f 93       	push	r24
    b5a6:	81 e8       	ldi	r24, 0x81	; 129
    b5a8:	92 e0       	ldi	r25, 0x02	; 2
    b5aa:	89 2f       	mov	r24, r25
    b5ac:	8f 93       	push	r24
    b5ae:	81 e8       	ldi	r24, 0x81	; 129
    b5b0:	92 e0       	ldi	r25, 0x02	; 2
    b5b2:	8f 93       	push	r24
    b5b4:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    b5b8:	ed b7       	in	r30, 0x3d	; 61
    b5ba:	fe b7       	in	r31, 0x3e	; 62
    b5bc:	38 96       	adiw	r30, 0x08	; 8
    b5be:	0f b6       	in	r0, 0x3f	; 63
    b5c0:	f8 94       	cli
    b5c2:	de bf       	out	0x3e, r29	; 62
    b5c4:	0f be       	out	0x3f, r0	; 63
    b5c6:	cd bf       	out	0x3d, r28	; 61
					}
				}
//				else {
//					sprintf(chBufferRx_USART0, "%S: %S %S", (wchar_t*)Comando_Rango_2, (wchar_t*)MSG_Parametro, (wchar_t*)MSG_Desconocido);
//				}
				Cargar_Valores_Rango_Por_Canal();
    b5c8:	0e 94 b2 4c 	call	0x9964	; 0x9964 <Cargar_Valores_Rango_Por_Canal>
    b5cc:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
			}


			// chBufferRx_USART0 = ALARMA 1 xxxx.x\0
			else if (Detectar_Comando_Buffer_P(Comando_Alarma_1, chBufferRx_USART0)) {
    b5d0:	61 e8       	ldi	r22, 0x81	; 129
    b5d2:	72 e0       	ldi	r23, 0x02	; 2
    b5d4:	8a e6       	ldi	r24, 0x6A	; 106
    b5d6:	96 e0       	ldi	r25, 0x06	; 6
    b5d8:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    b5dc:	89 2b       	or	r24, r25
    b5de:	09 f4       	brne	.+2      	; 0xb5e2 <Terminal+0x148c>
    b5e0:	06 c1       	rjmp	.+524    	; 0xb7ee <Terminal+0x1698>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    b5e2:	80 91 2a 06 	lds	r24, 0x062A
    b5e6:	90 91 2b 06 	lds	r25, 0x062B
    b5ea:	8f 57       	subi	r24, 0x7F	; 127
    b5ec:	9d 4f       	sbci	r25, 0xFD	; 253
    b5ee:	fc 01       	movw	r30, r24
    b5f0:	80 81       	ld	r24, Z
    b5f2:	80 33       	cpi	r24, 0x30	; 48
    b5f4:	08 f4       	brcc	.+2      	; 0xb5f8 <Terminal+0x14a2>
    b5f6:	c2 c0       	rjmp	.+388    	; 0xb77c <Terminal+0x1626>
    b5f8:	80 91 2a 06 	lds	r24, 0x062A
    b5fc:	90 91 2b 06 	lds	r25, 0x062B
    b600:	8f 57       	subi	r24, 0x7F	; 127
    b602:	9d 4f       	sbci	r25, 0xFD	; 253
    b604:	fc 01       	movw	r30, r24
    b606:	80 81       	ld	r24, Z
    b608:	8a 33       	cpi	r24, 0x3A	; 58
    b60a:	08 f0       	brcs	.+2      	; 0xb60e <Terminal+0x14b8>
    b60c:	b7 c0       	rjmp	.+366    	; 0xb77c <Terminal+0x1626>
					flValorAlarmaCond1 = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    b60e:	80 91 2a 06 	lds	r24, 0x062A
    b612:	90 91 2b 06 	lds	r25, 0x062B
    b616:	8f 57       	subi	r24, 0x7F	; 127
    b618:	9d 4f       	sbci	r25, 0xFD	; 253
    b61a:	68 ec       	ldi	r22, 0xC8	; 200
    b61c:	70 e0       	ldi	r23, 0x00	; 0
    b61e:	0e 94 5e 80 	call	0x100bc	; 0x100bc <From_String_to_Float>
    b622:	dc 01       	movw	r26, r24
    b624:	cb 01       	movw	r24, r22
    b626:	80 93 2c 04 	sts	0x042C, r24
    b62a:	90 93 2d 04 	sts	0x042D, r25
    b62e:	a0 93 2e 04 	sts	0x042E, r26
    b632:	b0 93 2f 04 	sts	0x042F, r27

					if (flValorAlarmaCond1 < cond1MinUs){
    b636:	80 91 ff 04 	lds	r24, 0x04FF
    b63a:	90 91 00 05 	lds	r25, 0x0500
    b63e:	09 2e       	mov	r0, r25
    b640:	00 0c       	add	r0, r0
    b642:	aa 0b       	sbc	r26, r26
    b644:	bb 0b       	sbc	r27, r27
    b646:	bc 01       	movw	r22, r24
    b648:	cd 01       	movw	r24, r26
    b64a:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    b64e:	7b 01       	movw	r14, r22
    b650:	8c 01       	movw	r16, r24
    b652:	80 91 2c 04 	lds	r24, 0x042C
    b656:	90 91 2d 04 	lds	r25, 0x042D
    b65a:	a0 91 2e 04 	lds	r26, 0x042E
    b65e:	b0 91 2f 04 	lds	r27, 0x042F
    b662:	9c 01       	movw	r18, r24
    b664:	ad 01       	movw	r20, r26
    b666:	c8 01       	movw	r24, r16
    b668:	b7 01       	movw	r22, r14
    b66a:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    b66e:	18 16       	cp	r1, r24
    b670:	4c f4       	brge	.+18     	; 0xb684 <Terminal+0x152e>
						flValorAlarmaCond1 = 0;					// apago la alarma
    b672:	10 92 2c 04 	sts	0x042C, r1
    b676:	10 92 2d 04 	sts	0x042D, r1
    b67a:	10 92 2e 04 	sts	0x042E, r1
    b67e:	10 92 2f 04 	sts	0x042F, r1
    b682:	34 c0       	rjmp	.+104    	; 0xb6ec <Terminal+0x1596>
					}
					else if (flValorAlarmaCond1 > cond1MaxUs){
    b684:	80 91 e7 04 	lds	r24, 0x04E7
    b688:	90 91 e8 04 	lds	r25, 0x04E8
    b68c:	09 2e       	mov	r0, r25
    b68e:	00 0c       	add	r0, r0
    b690:	aa 0b       	sbc	r26, r26
    b692:	bb 0b       	sbc	r27, r27
    b694:	bc 01       	movw	r22, r24
    b696:	cd 01       	movw	r24, r26
    b698:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    b69c:	7b 01       	movw	r14, r22
    b69e:	8c 01       	movw	r16, r24
    b6a0:	80 91 2c 04 	lds	r24, 0x042C
    b6a4:	90 91 2d 04 	lds	r25, 0x042D
    b6a8:	a0 91 2e 04 	lds	r26, 0x042E
    b6ac:	b0 91 2f 04 	lds	r27, 0x042F
    b6b0:	9c 01       	movw	r18, r24
    b6b2:	ad 01       	movw	r20, r26
    b6b4:	c8 01       	movw	r24, r16
    b6b6:	b7 01       	movw	r22, r14
    b6b8:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    b6bc:	88 23       	and	r24, r24
    b6be:	b4 f4       	brge	.+44     	; 0xb6ec <Terminal+0x1596>
						flValorAlarmaCond1 = cond1MaxUs;
    b6c0:	80 91 e7 04 	lds	r24, 0x04E7
    b6c4:	90 91 e8 04 	lds	r25, 0x04E8
    b6c8:	09 2e       	mov	r0, r25
    b6ca:	00 0c       	add	r0, r0
    b6cc:	aa 0b       	sbc	r26, r26
    b6ce:	bb 0b       	sbc	r27, r27
    b6d0:	bc 01       	movw	r22, r24
    b6d2:	cd 01       	movw	r24, r26
    b6d4:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    b6d8:	dc 01       	movw	r26, r24
    b6da:	cb 01       	movw	r24, r22
    b6dc:	80 93 2c 04 	sts	0x042C, r24
    b6e0:	90 93 2d 04 	sts	0x042D, r25
    b6e4:	a0 93 2e 04 	sts	0x042E, r26
    b6e8:	b0 93 2f 04 	sts	0x042F, r27
					}
					Float_a_Eeprom(&flValorAlarmaCond1_Eeprom, &flValorAlarmaCond1);
    b6ec:	6c e2       	ldi	r22, 0x2C	; 44
    b6ee:	74 e0       	ldi	r23, 0x04	; 4
    b6f0:	8c e7       	ldi	r24, 0x7C	; 124
    b6f2:	94 e0       	ldi	r25, 0x04	; 4
    b6f4:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flValorAlarmaCond1_Eeprom_BK, &flValorAlarmaCond1);
    b6f8:	6c e2       	ldi	r22, 0x2C	; 44
    b6fa:	74 e0       	ldi	r23, 0x04	; 4
    b6fc:	80 e8       	ldi	r24, 0x80	; 128
    b6fe:	94 e0       	ldi	r25, 0x04	; 4
    b700:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ALARMAS);
    b704:	81 e0       	ldi	r24, 0x01	; 1
    b706:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Alarma_1);
    b70a:	8a e6       	ldi	r24, 0x6A	; 106
    b70c:	96 e0       	ldi	r25, 0x06	; 6
    b70e:	89 2f       	mov	r24, r25
    b710:	8f 93       	push	r24
    b712:	8a e6       	ldi	r24, 0x6A	; 106
    b714:	96 e0       	ldi	r25, 0x06	; 6
    b716:	8f 93       	push	r24
    b718:	87 ef       	ldi	r24, 0xF7	; 247
    b71a:	91 e0       	ldi	r25, 0x01	; 1
    b71c:	89 2f       	mov	r24, r25
    b71e:	8f 93       	push	r24
    b720:	87 ef       	ldi	r24, 0xF7	; 247
    b722:	91 e0       	ldi	r25, 0x01	; 1
    b724:	8f 93       	push	r24
    b726:	81 e8       	ldi	r24, 0x81	; 129
    b728:	92 e0       	ldi	r25, 0x02	; 2
    b72a:	89 2f       	mov	r24, r25
    b72c:	8f 93       	push	r24
    b72e:	81 e8       	ldi	r24, 0x81	; 129
    b730:	92 e0       	ldi	r25, 0x02	; 2
    b732:	8f 93       	push	r24
    b734:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    b738:	0f 90       	pop	r0
    b73a:	0f 90       	pop	r0
    b73c:	0f 90       	pop	r0
    b73e:	0f 90       	pop	r0
    b740:	0f 90       	pop	r0
    b742:	0f 90       	pop	r0
    b744:	90 93 2b 06 	sts	0x062B, r25
    b748:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flValorAlarmaCond1, 6, 1, chBufferRx_USART0+auxIndexTerminal);
    b74c:	80 91 2a 06 	lds	r24, 0x062A
    b750:	90 91 2b 06 	lds	r25, 0x062B
    b754:	9c 01       	movw	r18, r24
    b756:	2f 57       	subi	r18, 0x7F	; 127
    b758:	3d 4f       	sbci	r19, 0xFD	; 253
    b75a:	80 91 2c 04 	lds	r24, 0x042C
    b75e:	90 91 2d 04 	lds	r25, 0x042D
    b762:	a0 91 2e 04 	lds	r26, 0x042E
    b766:	b0 91 2f 04 	lds	r27, 0x042F
    b76a:	89 01       	movw	r16, r18
    b76c:	21 e0       	ldi	r18, 0x01	; 1
    b76e:	46 e0       	ldi	r20, 0x06	; 6
    b770:	bc 01       	movw	r22, r24
    b772:	cd 01       	movw	r24, r26
    b774:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    b778:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Alarma_1);
    b77c:	8a e6       	ldi	r24, 0x6A	; 106
    b77e:	96 e0       	ldi	r25, 0x06	; 6
    b780:	89 2f       	mov	r24, r25
    b782:	8f 93       	push	r24
    b784:	8a e6       	ldi	r24, 0x6A	; 106
    b786:	96 e0       	ldi	r25, 0x06	; 6
    b788:	8f 93       	push	r24
    b78a:	87 ef       	ldi	r24, 0xF7	; 247
    b78c:	91 e0       	ldi	r25, 0x01	; 1
    b78e:	89 2f       	mov	r24, r25
    b790:	8f 93       	push	r24
    b792:	87 ef       	ldi	r24, 0xF7	; 247
    b794:	91 e0       	ldi	r25, 0x01	; 1
    b796:	8f 93       	push	r24
    b798:	81 e8       	ldi	r24, 0x81	; 129
    b79a:	92 e0       	ldi	r25, 0x02	; 2
    b79c:	89 2f       	mov	r24, r25
    b79e:	8f 93       	push	r24
    b7a0:	81 e8       	ldi	r24, 0x81	; 129
    b7a2:	92 e0       	ldi	r25, 0x02	; 2
    b7a4:	8f 93       	push	r24
    b7a6:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    b7aa:	0f 90       	pop	r0
    b7ac:	0f 90       	pop	r0
    b7ae:	0f 90       	pop	r0
    b7b0:	0f 90       	pop	r0
    b7b2:	0f 90       	pop	r0
    b7b4:	0f 90       	pop	r0
    b7b6:	90 93 2b 06 	sts	0x062B, r25
    b7ba:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flValorAlarmaCond1, 6, 1, chBufferRx_USART0+auxIndexTerminal);
    b7be:	80 91 2a 06 	lds	r24, 0x062A
    b7c2:	90 91 2b 06 	lds	r25, 0x062B
    b7c6:	9c 01       	movw	r18, r24
    b7c8:	2f 57       	subi	r18, 0x7F	; 127
    b7ca:	3d 4f       	sbci	r19, 0xFD	; 253
    b7cc:	80 91 2c 04 	lds	r24, 0x042C
    b7d0:	90 91 2d 04 	lds	r25, 0x042D
    b7d4:	a0 91 2e 04 	lds	r26, 0x042E
    b7d8:	b0 91 2f 04 	lds	r27, 0x042F
    b7dc:	89 01       	movw	r16, r18
    b7de:	21 e0       	ldi	r18, 0x01	; 1
    b7e0:	46 e0       	ldi	r20, 0x06	; 6
    b7e2:	bc 01       	movw	r22, r24
    b7e4:	cd 01       	movw	r24, r26
    b7e6:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    b7ea:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = ALARMA 2 xx.xx\0
			else if (Detectar_Comando_Buffer_P(Comando_Alarma_2, chBufferRx_USART0)) {
    b7ee:	61 e8       	ldi	r22, 0x81	; 129
    b7f0:	72 e0       	ldi	r23, 0x02	; 2
    b7f2:	84 e7       	ldi	r24, 0x74	; 116
    b7f4:	96 e0       	ldi	r25, 0x06	; 6
    b7f6:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    b7fa:	89 2b       	or	r24, r25
    b7fc:	09 f4       	brne	.+2      	; 0xb800 <Terminal+0x16aa>
    b7fe:	06 c1       	rjmp	.+524    	; 0xba0c <Terminal+0x18b6>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    b800:	80 91 2a 06 	lds	r24, 0x062A
    b804:	90 91 2b 06 	lds	r25, 0x062B
    b808:	8f 57       	subi	r24, 0x7F	; 127
    b80a:	9d 4f       	sbci	r25, 0xFD	; 253
    b80c:	fc 01       	movw	r30, r24
    b80e:	80 81       	ld	r24, Z
    b810:	80 33       	cpi	r24, 0x30	; 48
    b812:	08 f4       	brcc	.+2      	; 0xb816 <Terminal+0x16c0>
    b814:	c2 c0       	rjmp	.+388    	; 0xb99a <Terminal+0x1844>
    b816:	80 91 2a 06 	lds	r24, 0x062A
    b81a:	90 91 2b 06 	lds	r25, 0x062B
    b81e:	8f 57       	subi	r24, 0x7F	; 127
    b820:	9d 4f       	sbci	r25, 0xFD	; 253
    b822:	fc 01       	movw	r30, r24
    b824:	80 81       	ld	r24, Z
    b826:	8a 33       	cpi	r24, 0x3A	; 58
    b828:	08 f0       	brcs	.+2      	; 0xb82c <Terminal+0x16d6>
    b82a:	b7 c0       	rjmp	.+366    	; 0xb99a <Terminal+0x1844>
					flValorAlarmaCond2 = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    b82c:	80 91 2a 06 	lds	r24, 0x062A
    b830:	90 91 2b 06 	lds	r25, 0x062B
    b834:	8f 57       	subi	r24, 0x7F	; 127
    b836:	9d 4f       	sbci	r25, 0xFD	; 253
    b838:	68 ec       	ldi	r22, 0xC8	; 200
    b83a:	70 e0       	ldi	r23, 0x00	; 0
    b83c:	0e 94 5e 80 	call	0x100bc	; 0x100bc <From_String_to_Float>
    b840:	dc 01       	movw	r26, r24
    b842:	cb 01       	movw	r24, r22
    b844:	80 93 21 04 	sts	0x0421, r24
    b848:	90 93 22 04 	sts	0x0422, r25
    b84c:	a0 93 23 04 	sts	0x0423, r26
    b850:	b0 93 24 04 	sts	0x0424, r27

					if (flValorAlarmaCond2 < cond2MinUs){
    b854:	80 91 15 05 	lds	r24, 0x0515
    b858:	90 91 16 05 	lds	r25, 0x0516
    b85c:	09 2e       	mov	r0, r25
    b85e:	00 0c       	add	r0, r0
    b860:	aa 0b       	sbc	r26, r26
    b862:	bb 0b       	sbc	r27, r27
    b864:	bc 01       	movw	r22, r24
    b866:	cd 01       	movw	r24, r26
    b868:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    b86c:	7b 01       	movw	r14, r22
    b86e:	8c 01       	movw	r16, r24
    b870:	80 91 21 04 	lds	r24, 0x0421
    b874:	90 91 22 04 	lds	r25, 0x0422
    b878:	a0 91 23 04 	lds	r26, 0x0423
    b87c:	b0 91 24 04 	lds	r27, 0x0424
    b880:	9c 01       	movw	r18, r24
    b882:	ad 01       	movw	r20, r26
    b884:	c8 01       	movw	r24, r16
    b886:	b7 01       	movw	r22, r14
    b888:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    b88c:	18 16       	cp	r1, r24
    b88e:	4c f4       	brge	.+18     	; 0xb8a2 <Terminal+0x174c>
						flValorAlarmaCond2 = 0;					// apago la alarma
    b890:	10 92 21 04 	sts	0x0421, r1
    b894:	10 92 22 04 	sts	0x0422, r1
    b898:	10 92 23 04 	sts	0x0423, r1
    b89c:	10 92 24 04 	sts	0x0424, r1
    b8a0:	34 c0       	rjmp	.+104    	; 0xb90a <Terminal+0x17b4>
					}
					else if (flValorAlarmaCond2 > cond2MaxUs){
    b8a2:	80 91 1b 06 	lds	r24, 0x061B
    b8a6:	90 91 1c 06 	lds	r25, 0x061C
    b8aa:	09 2e       	mov	r0, r25
    b8ac:	00 0c       	add	r0, r0
    b8ae:	aa 0b       	sbc	r26, r26
    b8b0:	bb 0b       	sbc	r27, r27
    b8b2:	bc 01       	movw	r22, r24
    b8b4:	cd 01       	movw	r24, r26
    b8b6:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    b8ba:	7b 01       	movw	r14, r22
    b8bc:	8c 01       	movw	r16, r24
    b8be:	80 91 21 04 	lds	r24, 0x0421
    b8c2:	90 91 22 04 	lds	r25, 0x0422
    b8c6:	a0 91 23 04 	lds	r26, 0x0423
    b8ca:	b0 91 24 04 	lds	r27, 0x0424
    b8ce:	9c 01       	movw	r18, r24
    b8d0:	ad 01       	movw	r20, r26
    b8d2:	c8 01       	movw	r24, r16
    b8d4:	b7 01       	movw	r22, r14
    b8d6:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    b8da:	88 23       	and	r24, r24
    b8dc:	b4 f4       	brge	.+44     	; 0xb90a <Terminal+0x17b4>
						flValorAlarmaCond2 = cond2MaxUs;
    b8de:	80 91 1b 06 	lds	r24, 0x061B
    b8e2:	90 91 1c 06 	lds	r25, 0x061C
    b8e6:	09 2e       	mov	r0, r25
    b8e8:	00 0c       	add	r0, r0
    b8ea:	aa 0b       	sbc	r26, r26
    b8ec:	bb 0b       	sbc	r27, r27
    b8ee:	bc 01       	movw	r22, r24
    b8f0:	cd 01       	movw	r24, r26
    b8f2:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    b8f6:	dc 01       	movw	r26, r24
    b8f8:	cb 01       	movw	r24, r22
    b8fa:	80 93 21 04 	sts	0x0421, r24
    b8fe:	90 93 22 04 	sts	0x0422, r25
    b902:	a0 93 23 04 	sts	0x0423, r26
    b906:	b0 93 24 04 	sts	0x0424, r27
					}
					Float_a_Eeprom(&flValorAlarmaCond2_Eeprom, &flValorAlarmaCond2);
    b90a:	61 e2       	ldi	r22, 0x21	; 33
    b90c:	74 e0       	ldi	r23, 0x04	; 4
    b90e:	82 e9       	ldi	r24, 0x92	; 146
    b910:	94 e0       	ldi	r25, 0x04	; 4
    b912:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flValorAlarmaCond2_Eeprom_BK, &flValorAlarmaCond2);
    b916:	61 e2       	ldi	r22, 0x21	; 33
    b918:	74 e0       	ldi	r23, 0x04	; 4
    b91a:	8e e9       	ldi	r24, 0x9E	; 158
    b91c:	94 e0       	ldi	r25, 0x04	; 4
    b91e:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ALARMAS);
    b922:	81 e0       	ldi	r24, 0x01	; 1
    b924:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Alarma_2);
    b928:	84 e7       	ldi	r24, 0x74	; 116
    b92a:	96 e0       	ldi	r25, 0x06	; 6
    b92c:	89 2f       	mov	r24, r25
    b92e:	8f 93       	push	r24
    b930:	84 e7       	ldi	r24, 0x74	; 116
    b932:	96 e0       	ldi	r25, 0x06	; 6
    b934:	8f 93       	push	r24
    b936:	87 ef       	ldi	r24, 0xF7	; 247
    b938:	91 e0       	ldi	r25, 0x01	; 1
    b93a:	89 2f       	mov	r24, r25
    b93c:	8f 93       	push	r24
    b93e:	87 ef       	ldi	r24, 0xF7	; 247
    b940:	91 e0       	ldi	r25, 0x01	; 1
    b942:	8f 93       	push	r24
    b944:	81 e8       	ldi	r24, 0x81	; 129
    b946:	92 e0       	ldi	r25, 0x02	; 2
    b948:	89 2f       	mov	r24, r25
    b94a:	8f 93       	push	r24
    b94c:	81 e8       	ldi	r24, 0x81	; 129
    b94e:	92 e0       	ldi	r25, 0x02	; 2
    b950:	8f 93       	push	r24
    b952:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    b956:	0f 90       	pop	r0
    b958:	0f 90       	pop	r0
    b95a:	0f 90       	pop	r0
    b95c:	0f 90       	pop	r0
    b95e:	0f 90       	pop	r0
    b960:	0f 90       	pop	r0
    b962:	90 93 2b 06 	sts	0x062B, r25
    b966:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flValorAlarmaCond2, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    b96a:	80 91 2a 06 	lds	r24, 0x062A
    b96e:	90 91 2b 06 	lds	r25, 0x062B
    b972:	9c 01       	movw	r18, r24
    b974:	2f 57       	subi	r18, 0x7F	; 127
    b976:	3d 4f       	sbci	r19, 0xFD	; 253
    b978:	80 91 21 04 	lds	r24, 0x0421
    b97c:	90 91 22 04 	lds	r25, 0x0422
    b980:	a0 91 23 04 	lds	r26, 0x0423
    b984:	b0 91 24 04 	lds	r27, 0x0424
    b988:	89 01       	movw	r16, r18
    b98a:	22 e0       	ldi	r18, 0x02	; 2
    b98c:	45 e0       	ldi	r20, 0x05	; 5
    b98e:	bc 01       	movw	r22, r24
    b990:	cd 01       	movw	r24, r26
    b992:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    b996:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Alarma_2);
    b99a:	84 e7       	ldi	r24, 0x74	; 116
    b99c:	96 e0       	ldi	r25, 0x06	; 6
    b99e:	89 2f       	mov	r24, r25
    b9a0:	8f 93       	push	r24
    b9a2:	84 e7       	ldi	r24, 0x74	; 116
    b9a4:	96 e0       	ldi	r25, 0x06	; 6
    b9a6:	8f 93       	push	r24
    b9a8:	87 ef       	ldi	r24, 0xF7	; 247
    b9aa:	91 e0       	ldi	r25, 0x01	; 1
    b9ac:	89 2f       	mov	r24, r25
    b9ae:	8f 93       	push	r24
    b9b0:	87 ef       	ldi	r24, 0xF7	; 247
    b9b2:	91 e0       	ldi	r25, 0x01	; 1
    b9b4:	8f 93       	push	r24
    b9b6:	81 e8       	ldi	r24, 0x81	; 129
    b9b8:	92 e0       	ldi	r25, 0x02	; 2
    b9ba:	89 2f       	mov	r24, r25
    b9bc:	8f 93       	push	r24
    b9be:	81 e8       	ldi	r24, 0x81	; 129
    b9c0:	92 e0       	ldi	r25, 0x02	; 2
    b9c2:	8f 93       	push	r24
    b9c4:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    b9c8:	0f 90       	pop	r0
    b9ca:	0f 90       	pop	r0
    b9cc:	0f 90       	pop	r0
    b9ce:	0f 90       	pop	r0
    b9d0:	0f 90       	pop	r0
    b9d2:	0f 90       	pop	r0
    b9d4:	90 93 2b 06 	sts	0x062B, r25
    b9d8:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flValorAlarmaCond2, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    b9dc:	80 91 2a 06 	lds	r24, 0x062A
    b9e0:	90 91 2b 06 	lds	r25, 0x062B
    b9e4:	9c 01       	movw	r18, r24
    b9e6:	2f 57       	subi	r18, 0x7F	; 127
    b9e8:	3d 4f       	sbci	r19, 0xFD	; 253
    b9ea:	80 91 21 04 	lds	r24, 0x0421
    b9ee:	90 91 22 04 	lds	r25, 0x0422
    b9f2:	a0 91 23 04 	lds	r26, 0x0423
    b9f6:	b0 91 24 04 	lds	r27, 0x0424
    b9fa:	89 01       	movw	r16, r18
    b9fc:	22 e0       	ldi	r18, 0x02	; 2
    b9fe:	45 e0       	ldi	r20, 0x05	; 5
    ba00:	bc 01       	movw	r22, r24
    ba02:	cd 01       	movw	r24, r26
    ba04:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    ba08:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = AUTOCAL COND 1 xx.xx\0
			else if (Detectar_Comando_Buffer_P(Comando_Autocal_Cond_1, chBufferRx_USART0)) {
    ba0c:	61 e8       	ldi	r22, 0x81	; 129
    ba0e:	72 e0       	ldi	r23, 0x02	; 2
    ba10:	8a ec       	ldi	r24, 0xCA	; 202
    ba12:	96 e0       	ldi	r25, 0x06	; 6
    ba14:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    ba18:	89 2b       	or	r24, r25
    ba1a:	09 f4       	brne	.+2      	; 0xba1e <Terminal+0x18c8>
    ba1c:	9c c3       	rjmp	.+1848   	; 0xc156 <Terminal+0x2000>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    ba1e:	80 91 2a 06 	lds	r24, 0x062A
    ba22:	90 91 2b 06 	lds	r25, 0x062B
    ba26:	8f 57       	subi	r24, 0x7F	; 127
    ba28:	9d 4f       	sbci	r25, 0xFD	; 253
    ba2a:	fc 01       	movw	r30, r24
    ba2c:	80 81       	ld	r24, Z
    ba2e:	80 33       	cpi	r24, 0x30	; 48
    ba30:	08 f4       	brcc	.+2      	; 0xba34 <Terminal+0x18de>
    ba32:	fd c1       	rjmp	.+1018   	; 0xbe2e <Terminal+0x1cd8>
    ba34:	80 91 2a 06 	lds	r24, 0x062A
    ba38:	90 91 2b 06 	lds	r25, 0x062B
    ba3c:	8f 57       	subi	r24, 0x7F	; 127
    ba3e:	9d 4f       	sbci	r25, 0xFD	; 253
    ba40:	fc 01       	movw	r30, r24
    ba42:	80 81       	ld	r24, Z
    ba44:	8a 33       	cpi	r24, 0x3A	; 58
    ba46:	08 f0       	brcs	.+2      	; 0xba4a <Terminal+0x18f4>
    ba48:	f2 c1       	rjmp	.+996    	; 0xbe2e <Terminal+0x1cd8>
					float flValorReal = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    ba4a:	80 91 2a 06 	lds	r24, 0x062A
    ba4e:	90 91 2b 06 	lds	r25, 0x062B
    ba52:	8f 57       	subi	r24, 0x7F	; 127
    ba54:	9d 4f       	sbci	r25, 0xFD	; 253
    ba56:	68 ec       	ldi	r22, 0xC8	; 200
    ba58:	70 e0       	ldi	r23, 0x00	; 0
    ba5a:	0e 94 5e 80 	call	0x100bc	; 0x100bc <From_String_to_Float>
    ba5e:	dc 01       	movw	r26, r24
    ba60:	cb 01       	movw	r24, r22
    ba62:	8b 83       	std	Y+3, r24	; 0x03
    ba64:	9c 83       	std	Y+4, r25	; 0x04
    ba66:	ad 83       	std	Y+5, r26	; 0x05
    ba68:	be 83       	std	Y+6, r27	; 0x06

					if (flValorReal == 0) {
    ba6a:	20 e0       	ldi	r18, 0x00	; 0
    ba6c:	30 e0       	ldi	r19, 0x00	; 0
    ba6e:	a9 01       	movw	r20, r18
    ba70:	6b 81       	ldd	r22, Y+3	; 0x03
    ba72:	7c 81       	ldd	r23, Y+4	; 0x04
    ba74:	8d 81       	ldd	r24, Y+5	; 0x05
    ba76:	9e 81       	ldd	r25, Y+6	; 0x06
    ba78:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    ba7c:	88 23       	and	r24, r24
    ba7e:	09 f0       	breq	.+2      	; 0xba82 <Terminal+0x192c>
    ba80:	a0 c0       	rjmp	.+320    	; 0xbbc2 <Terminal+0x1a6c>
						flOffsetCond1 = flCond1valoruS;
    ba82:	80 91 11 05 	lds	r24, 0x0511
    ba86:	90 91 12 05 	lds	r25, 0x0512
    ba8a:	a0 91 13 05 	lds	r26, 0x0513
    ba8e:	b0 91 14 05 	lds	r27, 0x0514
    ba92:	80 93 f8 04 	sts	0x04F8, r24
    ba96:	90 93 f9 04 	sts	0x04F9, r25
    ba9a:	a0 93 fa 04 	sts	0x04FA, r26
    ba9e:	b0 93 fb 04 	sts	0x04FB, r27

						Float_a_Eeprom(&flOffsetCond1_Eeprom, &flOffsetCond1);
    baa2:	68 ef       	ldi	r22, 0xF8	; 248
    baa4:	74 e0       	ldi	r23, 0x04	; 4
    baa6:	80 ec       	ldi	r24, 0xC0	; 192
    baa8:	94 e0       	ldi	r25, 0x04	; 4
    baaa:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
						Float_a_Eeprom(&flOffsetCond1_Eeprom_BK, &flOffsetCond1);
    baae:	68 ef       	ldi	r22, 0xF8	; 248
    bab0:	74 e0       	ldi	r23, 0x04	; 4
    bab2:	86 ed       	ldi	r24, 0xD6	; 214
    bab4:	94 e0       	ldi	r25, 0x04	; 4
    bab6:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
						Escribir_Checksum_Eeprom (GRUPO_ADC);
    baba:	82 e0       	ldi	r24, 0x02	; 2
    babc:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

						auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Autocal_Cond_1);
    bac0:	8a ec       	ldi	r24, 0xCA	; 202
    bac2:	96 e0       	ldi	r25, 0x06	; 6
    bac4:	89 2f       	mov	r24, r25
    bac6:	8f 93       	push	r24
    bac8:	8a ec       	ldi	r24, 0xCA	; 202
    baca:	96 e0       	ldi	r25, 0x06	; 6
    bacc:	8f 93       	push	r24
    bace:	87 ef       	ldi	r24, 0xF7	; 247
    bad0:	91 e0       	ldi	r25, 0x01	; 1
    bad2:	89 2f       	mov	r24, r25
    bad4:	8f 93       	push	r24
    bad6:	87 ef       	ldi	r24, 0xF7	; 247
    bad8:	91 e0       	ldi	r25, 0x01	; 1
    bada:	8f 93       	push	r24
    badc:	81 e8       	ldi	r24, 0x81	; 129
    bade:	92 e0       	ldi	r25, 0x02	; 2
    bae0:	89 2f       	mov	r24, r25
    bae2:	8f 93       	push	r24
    bae4:	81 e8       	ldi	r24, 0x81	; 129
    bae6:	92 e0       	ldi	r25, 0x02	; 2
    bae8:	8f 93       	push	r24
    baea:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    baee:	0f 90       	pop	r0
    baf0:	0f 90       	pop	r0
    baf2:	0f 90       	pop	r0
    baf4:	0f 90       	pop	r0
    baf6:	0f 90       	pop	r0
    baf8:	0f 90       	pop	r0
    bafa:	90 93 2b 06 	sts	0x062B, r25
    bafe:	80 93 2a 06 	sts	0x062A, r24
						dtostrf(flCond1auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    bb02:	80 91 2a 06 	lds	r24, 0x062A
    bb06:	90 91 2b 06 	lds	r25, 0x062B
    bb0a:	9c 01       	movw	r18, r24
    bb0c:	2f 57       	subi	r18, 0x7F	; 127
    bb0e:	3d 4f       	sbci	r19, 0xFD	; 253
    bb10:	80 91 0d 05 	lds	r24, 0x050D
    bb14:	90 91 0e 05 	lds	r25, 0x050E
    bb18:	a0 91 0f 05 	lds	r26, 0x050F
    bb1c:	b0 91 10 05 	lds	r27, 0x0510
    bb20:	89 01       	movw	r16, r18
    bb22:	24 e0       	ldi	r18, 0x04	; 4
    bb24:	47 e0       	ldi	r20, 0x07	; 7
    bb26:	bc 01       	movw	r22, r24
    bb28:	cd 01       	movw	r24, r26
    bb2a:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
						auxIndexTerminal += 7;
    bb2e:	80 91 2a 06 	lds	r24, 0x062A
    bb32:	90 91 2b 06 	lds	r25, 0x062B
    bb36:	07 96       	adiw	r24, 0x07	; 7
    bb38:	90 93 2b 06 	sts	0x062B, r25
    bb3c:	80 93 2a 06 	sts	0x062A, r24
						auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    bb40:	80 91 2a 06 	lds	r24, 0x062A
    bb44:	90 91 2b 06 	lds	r25, 0x062B
    bb48:	8f 57       	subi	r24, 0x7F	; 127
    bb4a:	9d 4f       	sbci	r25, 0xFD	; 253
    bb4c:	27 e9       	ldi	r18, 0x97	; 151
    bb4e:	37 e0       	ldi	r19, 0x07	; 7
    bb50:	23 2f       	mov	r18, r19
    bb52:	2f 93       	push	r18
    bb54:	27 e9       	ldi	r18, 0x97	; 151
    bb56:	37 e0       	ldi	r19, 0x07	; 7
    bb58:	2f 93       	push	r18
    bb5a:	2c ef       	ldi	r18, 0xFC	; 252
    bb5c:	31 e0       	ldi	r19, 0x01	; 1
    bb5e:	23 2f       	mov	r18, r19
    bb60:	2f 93       	push	r18
    bb62:	2c ef       	ldi	r18, 0xFC	; 252
    bb64:	31 e0       	ldi	r19, 0x01	; 1
    bb66:	2f 93       	push	r18
    bb68:	29 2f       	mov	r18, r25
    bb6a:	2f 93       	push	r18
    bb6c:	8f 93       	push	r24
    bb6e:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    bb72:	0f 90       	pop	r0
    bb74:	0f 90       	pop	r0
    bb76:	0f 90       	pop	r0
    bb78:	0f 90       	pop	r0
    bb7a:	0f 90       	pop	r0
    bb7c:	0f 90       	pop	r0
    bb7e:	9c 01       	movw	r18, r24
    bb80:	80 91 2a 06 	lds	r24, 0x062A
    bb84:	90 91 2b 06 	lds	r25, 0x062B
    bb88:	82 0f       	add	r24, r18
    bb8a:	93 1f       	adc	r25, r19
    bb8c:	90 93 2b 06 	sts	0x062B, r25
    bb90:	80 93 2a 06 	sts	0x062A, r24
						dtostrf(flOffsetCond1, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    bb94:	80 91 2a 06 	lds	r24, 0x062A
    bb98:	90 91 2b 06 	lds	r25, 0x062B
    bb9c:	9c 01       	movw	r18, r24
    bb9e:	2f 57       	subi	r18, 0x7F	; 127
    bba0:	3d 4f       	sbci	r19, 0xFD	; 253
    bba2:	80 91 f8 04 	lds	r24, 0x04F8
    bba6:	90 91 f9 04 	lds	r25, 0x04F9
    bbaa:	a0 91 fa 04 	lds	r26, 0x04FA
    bbae:	b0 91 fb 04 	lds	r27, 0x04FB
    bbb2:	89 01       	movw	r16, r18
    bbb4:	22 e0       	ldi	r18, 0x02	; 2
    bbb6:	45 e0       	ldi	r20, 0x05	; 5
    bbb8:	bc 01       	movw	r22, r24
    bbba:	cd 01       	movw	r24, r26
    bbbc:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    bbc0:	35 c1       	rjmp	.+618    	; 0xbe2c <Terminal+0x1cd6>
					}
					else if ((flValorReal > cond1MinUs) && (flValorReal < cond1MaxUs)){
    bbc2:	80 91 ff 04 	lds	r24, 0x04FF
    bbc6:	90 91 00 05 	lds	r25, 0x0500
    bbca:	09 2e       	mov	r0, r25
    bbcc:	00 0c       	add	r0, r0
    bbce:	aa 0b       	sbc	r26, r26
    bbd0:	bb 0b       	sbc	r27, r27
    bbd2:	bc 01       	movw	r22, r24
    bbd4:	cd 01       	movw	r24, r26
    bbd6:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    bbda:	dc 01       	movw	r26, r24
    bbdc:	cb 01       	movw	r24, r22
    bbde:	2b 81       	ldd	r18, Y+3	; 0x03
    bbe0:	3c 81       	ldd	r19, Y+4	; 0x04
    bbe2:	4d 81       	ldd	r20, Y+5	; 0x05
    bbe4:	5e 81       	ldd	r21, Y+6	; 0x06
    bbe6:	bc 01       	movw	r22, r24
    bbe8:	cd 01       	movw	r24, r26
    bbea:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    bbee:	88 23       	and	r24, r24
    bbf0:	0c f0       	brlt	.+2      	; 0xbbf4 <Terminal+0x1a9e>
    bbf2:	f5 c0       	rjmp	.+490    	; 0xbdde <Terminal+0x1c88>
    bbf4:	80 91 e7 04 	lds	r24, 0x04E7
    bbf8:	90 91 e8 04 	lds	r25, 0x04E8
    bbfc:	09 2e       	mov	r0, r25
    bbfe:	00 0c       	add	r0, r0
    bc00:	aa 0b       	sbc	r26, r26
    bc02:	bb 0b       	sbc	r27, r27
    bc04:	bc 01       	movw	r22, r24
    bc06:	cd 01       	movw	r24, r26
    bc08:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    bc0c:	dc 01       	movw	r26, r24
    bc0e:	cb 01       	movw	r24, r22
    bc10:	2b 81       	ldd	r18, Y+3	; 0x03
    bc12:	3c 81       	ldd	r19, Y+4	; 0x04
    bc14:	4d 81       	ldd	r20, Y+5	; 0x05
    bc16:	5e 81       	ldd	r21, Y+6	; 0x06
    bc18:	bc 01       	movw	r22, r24
    bc1a:	cd 01       	movw	r24, r26
    bc1c:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    bc20:	18 16       	cp	r1, r24
    bc22:	0c f0       	brlt	.+2      	; 0xbc26 <Terminal+0x1ad0>
    bc24:	dc c0       	rjmp	.+440    	; 0xbdde <Terminal+0x1c88>
						flCond1auS *= (flValorReal+flOffsetCond1)/(flCond1valoruS+flOffsetCond1);
    bc26:	80 91 f8 04 	lds	r24, 0x04F8
    bc2a:	90 91 f9 04 	lds	r25, 0x04F9
    bc2e:	a0 91 fa 04 	lds	r26, 0x04FA
    bc32:	b0 91 fb 04 	lds	r27, 0x04FB
    bc36:	2b 81       	ldd	r18, Y+3	; 0x03
    bc38:	3c 81       	ldd	r19, Y+4	; 0x04
    bc3a:	4d 81       	ldd	r20, Y+5	; 0x05
    bc3c:	5e 81       	ldd	r21, Y+6	; 0x06
    bc3e:	bc 01       	movw	r22, r24
    bc40:	cd 01       	movw	r24, r26
    bc42:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    bc46:	dc 01       	movw	r26, r24
    bc48:	cb 01       	movw	r24, r22
    bc4a:	6c 01       	movw	r12, r24
    bc4c:	7d 01       	movw	r14, r26
    bc4e:	80 91 11 05 	lds	r24, 0x0511
    bc52:	90 91 12 05 	lds	r25, 0x0512
    bc56:	a0 91 13 05 	lds	r26, 0x0513
    bc5a:	b0 91 14 05 	lds	r27, 0x0514
    bc5e:	20 91 f8 04 	lds	r18, 0x04F8
    bc62:	30 91 f9 04 	lds	r19, 0x04F9
    bc66:	40 91 fa 04 	lds	r20, 0x04FA
    bc6a:	50 91 fb 04 	lds	r21, 0x04FB
    bc6e:	bc 01       	movw	r22, r24
    bc70:	cd 01       	movw	r24, r26
    bc72:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    bc76:	dc 01       	movw	r26, r24
    bc78:	cb 01       	movw	r24, r22
    bc7a:	9c 01       	movw	r18, r24
    bc7c:	ad 01       	movw	r20, r26
    bc7e:	c7 01       	movw	r24, r14
    bc80:	b6 01       	movw	r22, r12
    bc82:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    bc86:	dc 01       	movw	r26, r24
    bc88:	cb 01       	movw	r24, r22
    bc8a:	7c 01       	movw	r14, r24
    bc8c:	8d 01       	movw	r16, r26
    bc8e:	80 91 0d 05 	lds	r24, 0x050D
    bc92:	90 91 0e 05 	lds	r25, 0x050E
    bc96:	a0 91 0f 05 	lds	r26, 0x050F
    bc9a:	b0 91 10 05 	lds	r27, 0x0510
    bc9e:	9c 01       	movw	r18, r24
    bca0:	ad 01       	movw	r20, r26
    bca2:	c8 01       	movw	r24, r16
    bca4:	b7 01       	movw	r22, r14
    bca6:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    bcaa:	dc 01       	movw	r26, r24
    bcac:	cb 01       	movw	r24, r22
    bcae:	80 93 0d 05 	sts	0x050D, r24
    bcb2:	90 93 0e 05 	sts	0x050E, r25
    bcb6:	a0 93 0f 05 	sts	0x050F, r26
    bcba:	b0 93 10 05 	sts	0x0510, r27

						Float_a_Eeprom(&flCond1auS_Eeprom, &flCond1auS);
    bcbe:	6d e0       	ldi	r22, 0x0D	; 13
    bcc0:	75 e0       	ldi	r23, 0x05	; 5
    bcc2:	8e ed       	ldi	r24, 0xDE	; 222
    bcc4:	94 e0       	ldi	r25, 0x04	; 4
    bcc6:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
						Float_a_Eeprom(&flCond1auS_Eeprom_BK, &flCond1auS);
    bcca:	6d e0       	ldi	r22, 0x0D	; 13
    bccc:	75 e0       	ldi	r23, 0x05	; 5
    bcce:	8c eb       	ldi	r24, 0xBC	; 188
    bcd0:	94 e0       	ldi	r25, 0x04	; 4
    bcd2:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
						Escribir_Checksum_Eeprom (GRUPO_ADC);
    bcd6:	82 e0       	ldi	r24, 0x02	; 2
    bcd8:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

						auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Autocal_Cond_1);
    bcdc:	8a ec       	ldi	r24, 0xCA	; 202
    bcde:	96 e0       	ldi	r25, 0x06	; 6
    bce0:	89 2f       	mov	r24, r25
    bce2:	8f 93       	push	r24
    bce4:	8a ec       	ldi	r24, 0xCA	; 202
    bce6:	96 e0       	ldi	r25, 0x06	; 6
    bce8:	8f 93       	push	r24
    bcea:	87 ef       	ldi	r24, 0xF7	; 247
    bcec:	91 e0       	ldi	r25, 0x01	; 1
    bcee:	89 2f       	mov	r24, r25
    bcf0:	8f 93       	push	r24
    bcf2:	87 ef       	ldi	r24, 0xF7	; 247
    bcf4:	91 e0       	ldi	r25, 0x01	; 1
    bcf6:	8f 93       	push	r24
    bcf8:	81 e8       	ldi	r24, 0x81	; 129
    bcfa:	92 e0       	ldi	r25, 0x02	; 2
    bcfc:	89 2f       	mov	r24, r25
    bcfe:	8f 93       	push	r24
    bd00:	81 e8       	ldi	r24, 0x81	; 129
    bd02:	92 e0       	ldi	r25, 0x02	; 2
    bd04:	8f 93       	push	r24
    bd06:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    bd0a:	0f 90       	pop	r0
    bd0c:	0f 90       	pop	r0
    bd0e:	0f 90       	pop	r0
    bd10:	0f 90       	pop	r0
    bd12:	0f 90       	pop	r0
    bd14:	0f 90       	pop	r0
    bd16:	90 93 2b 06 	sts	0x062B, r25
    bd1a:	80 93 2a 06 	sts	0x062A, r24
						dtostrf(flCond1auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    bd1e:	80 91 2a 06 	lds	r24, 0x062A
    bd22:	90 91 2b 06 	lds	r25, 0x062B
    bd26:	9c 01       	movw	r18, r24
    bd28:	2f 57       	subi	r18, 0x7F	; 127
    bd2a:	3d 4f       	sbci	r19, 0xFD	; 253
    bd2c:	80 91 0d 05 	lds	r24, 0x050D
    bd30:	90 91 0e 05 	lds	r25, 0x050E
    bd34:	a0 91 0f 05 	lds	r26, 0x050F
    bd38:	b0 91 10 05 	lds	r27, 0x0510
    bd3c:	89 01       	movw	r16, r18
    bd3e:	24 e0       	ldi	r18, 0x04	; 4
    bd40:	47 e0       	ldi	r20, 0x07	; 7
    bd42:	bc 01       	movw	r22, r24
    bd44:	cd 01       	movw	r24, r26
    bd46:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
						auxIndexTerminal += 7;
    bd4a:	80 91 2a 06 	lds	r24, 0x062A
    bd4e:	90 91 2b 06 	lds	r25, 0x062B
    bd52:	07 96       	adiw	r24, 0x07	; 7
    bd54:	90 93 2b 06 	sts	0x062B, r25
    bd58:	80 93 2a 06 	sts	0x062A, r24
						auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    bd5c:	80 91 2a 06 	lds	r24, 0x062A
    bd60:	90 91 2b 06 	lds	r25, 0x062B
    bd64:	8f 57       	subi	r24, 0x7F	; 127
    bd66:	9d 4f       	sbci	r25, 0xFD	; 253
    bd68:	27 e9       	ldi	r18, 0x97	; 151
    bd6a:	37 e0       	ldi	r19, 0x07	; 7
    bd6c:	23 2f       	mov	r18, r19
    bd6e:	2f 93       	push	r18
    bd70:	27 e9       	ldi	r18, 0x97	; 151
    bd72:	37 e0       	ldi	r19, 0x07	; 7
    bd74:	2f 93       	push	r18
    bd76:	2c ef       	ldi	r18, 0xFC	; 252
    bd78:	31 e0       	ldi	r19, 0x01	; 1
    bd7a:	23 2f       	mov	r18, r19
    bd7c:	2f 93       	push	r18
    bd7e:	2c ef       	ldi	r18, 0xFC	; 252
    bd80:	31 e0       	ldi	r19, 0x01	; 1
    bd82:	2f 93       	push	r18
    bd84:	29 2f       	mov	r18, r25
    bd86:	2f 93       	push	r18
    bd88:	8f 93       	push	r24
    bd8a:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    bd8e:	0f 90       	pop	r0
    bd90:	0f 90       	pop	r0
    bd92:	0f 90       	pop	r0
    bd94:	0f 90       	pop	r0
    bd96:	0f 90       	pop	r0
    bd98:	0f 90       	pop	r0
    bd9a:	9c 01       	movw	r18, r24
    bd9c:	80 91 2a 06 	lds	r24, 0x062A
    bda0:	90 91 2b 06 	lds	r25, 0x062B
    bda4:	82 0f       	add	r24, r18
    bda6:	93 1f       	adc	r25, r19
    bda8:	90 93 2b 06 	sts	0x062B, r25
    bdac:	80 93 2a 06 	sts	0x062A, r24
						dtostrf(flOffsetCond1, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    bdb0:	80 91 2a 06 	lds	r24, 0x062A
    bdb4:	90 91 2b 06 	lds	r25, 0x062B
    bdb8:	9c 01       	movw	r18, r24
    bdba:	2f 57       	subi	r18, 0x7F	; 127
    bdbc:	3d 4f       	sbci	r19, 0xFD	; 253
    bdbe:	80 91 f8 04 	lds	r24, 0x04F8
    bdc2:	90 91 f9 04 	lds	r25, 0x04F9
    bdc6:	a0 91 fa 04 	lds	r26, 0x04FA
    bdca:	b0 91 fb 04 	lds	r27, 0x04FB
    bdce:	89 01       	movw	r16, r18
    bdd0:	22 e0       	ldi	r18, 0x02	; 2
    bdd2:	45 e0       	ldi	r20, 0x05	; 5
    bdd4:	bc 01       	movw	r22, r24
    bdd6:	cd 01       	movw	r24, r26
    bdd8:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    bddc:	27 c0       	rjmp	.+78     	; 0xbe2c <Terminal+0x1cd6>
					}
					else{
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Autocal_Cond_1, (wchar_t*)MSG_FueraDeRango);
    bdde:	87 e8       	ldi	r24, 0x87	; 135
    bde0:	97 e0       	ldi	r25, 0x07	; 7
    bde2:	89 2f       	mov	r24, r25
    bde4:	8f 93       	push	r24
    bde6:	87 e8       	ldi	r24, 0x87	; 135
    bde8:	97 e0       	ldi	r25, 0x07	; 7
    bdea:	8f 93       	push	r24
    bdec:	8a ec       	ldi	r24, 0xCA	; 202
    bdee:	96 e0       	ldi	r25, 0x06	; 6
    bdf0:	89 2f       	mov	r24, r25
    bdf2:	8f 93       	push	r24
    bdf4:	8a ec       	ldi	r24, 0xCA	; 202
    bdf6:	96 e0       	ldi	r25, 0x06	; 6
    bdf8:	8f 93       	push	r24
    bdfa:	80 ef       	ldi	r24, 0xF0	; 240
    bdfc:	91 e0       	ldi	r25, 0x01	; 1
    bdfe:	89 2f       	mov	r24, r25
    be00:	8f 93       	push	r24
    be02:	80 ef       	ldi	r24, 0xF0	; 240
    be04:	91 e0       	ldi	r25, 0x01	; 1
    be06:	8f 93       	push	r24
    be08:	81 e8       	ldi	r24, 0x81	; 129
    be0a:	92 e0       	ldi	r25, 0x02	; 2
    be0c:	89 2f       	mov	r24, r25
    be0e:	8f 93       	push	r24
    be10:	81 e8       	ldi	r24, 0x81	; 129
    be12:	92 e0       	ldi	r25, 0x02	; 2
    be14:	8f 93       	push	r24
    be16:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    be1a:	8d b7       	in	r24, 0x3d	; 61
    be1c:	9e b7       	in	r25, 0x3e	; 62
    be1e:	08 96       	adiw	r24, 0x08	; 8
    be20:	0f b6       	in	r0, 0x3f	; 63
    be22:	f8 94       	cli
    be24:	de bf       	out	0x3e, r29	; 62
    be26:	0f be       	out	0x3f, r0	; 63
    be28:	cd bf       	out	0x3d, r28	; 61
			}


			// chBufferRx_USART0 = AUTOCAL COND 1 xx.xx\0
			else if (Detectar_Comando_Buffer_P(Comando_Autocal_Cond_1, chBufferRx_USART0)) {
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    be2a:	93 c1       	rjmp	.+806    	; 0xc152 <Terminal+0x1ffc>
    be2c:	92 c1       	rjmp	.+804    	; 0xc152 <Terminal+0x1ffc>
					}
					else{
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Autocal_Cond_1, (wchar_t*)MSG_FueraDeRango);
					}
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    be2e:	80 91 2a 06 	lds	r24, 0x062A
    be32:	90 91 2b 06 	lds	r25, 0x062B
    be36:	8f 57       	subi	r24, 0x7F	; 127
    be38:	9d 4f       	sbci	r25, 0xFD	; 253
    be3a:	bc 01       	movw	r22, r24
    be3c:	80 ee       	ldi	r24, 0xE0	; 224
    be3e:	95 e0       	ldi	r25, 0x05	; 5
    be40:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    be44:	89 2b       	or	r24, r25
    be46:	09 f4       	brne	.+2      	; 0xbe4a <Terminal+0x1cf4>
    be48:	02 c1       	rjmp	.+516    	; 0xc04e <Terminal+0x1ef8>
					if (uRangoCond1 == COND_20_2500_G){
    be4a:	80 91 e9 04 	lds	r24, 0x04E9
    be4e:	90 91 ea 04 	lds	r25, 0x04EA
    be52:	01 97       	sbiw	r24, 0x01	; 1
    be54:	69 f4       	brne	.+26     	; 0xbe70 <Terminal+0x1d1a>
						flCond1auS = DEFAULT_COND202500G_A_US;
    be56:	8c e9       	ldi	r24, 0x9C	; 156
    be58:	92 ea       	ldi	r25, 0xA2	; 162
    be5a:	ab e0       	ldi	r26, 0x0B	; 11
    be5c:	b0 e4       	ldi	r27, 0x40	; 64
    be5e:	80 93 0d 05 	sts	0x050D, r24
    be62:	90 93 0e 05 	sts	0x050E, r25
    be66:	a0 93 0f 05 	sts	0x050F, r26
    be6a:	b0 93 10 05 	sts	0x0510, r27
    be6e:	5e c0       	rjmp	.+188    	; 0xbf2c <Terminal+0x1dd6>
					}
					else if (uRangoCond1 == COND_0_20_G){
    be70:	80 91 e9 04 	lds	r24, 0x04E9
    be74:	90 91 ea 04 	lds	r25, 0x04EA
    be78:	02 97       	sbiw	r24, 0x02	; 2
    be7a:	69 f4       	brne	.+26     	; 0xbe96 <Terminal+0x1d40>
						flCond1auS = DEFAULT_COND020G_A_US;
    be7c:	8d e4       	ldi	r24, 0x4D	; 77
    be7e:	95 e1       	ldi	r25, 0x15	; 21
    be80:	ac e8       	ldi	r26, 0x8C	; 140
    be82:	bc e3       	ldi	r27, 0x3C	; 60
    be84:	80 93 0d 05 	sts	0x050D, r24
    be88:	90 93 0e 05 	sts	0x050E, r25
    be8c:	a0 93 0f 05 	sts	0x050F, r26
    be90:	b0 93 10 05 	sts	0x0510, r27
    be94:	4b c0       	rjmp	.+150    	; 0xbf2c <Terminal+0x1dd6>
					}
					else if (uRangoCond1 == COND_2_200_G){
    be96:	80 91 e9 04 	lds	r24, 0x04E9
    be9a:	90 91 ea 04 	lds	r25, 0x04EA
    be9e:	03 97       	sbiw	r24, 0x03	; 3
    bea0:	69 f4       	brne	.+26     	; 0xbebc <Terminal+0x1d66>
						flCond1auS = DEFAULT_COND2200G_A_US;
    bea2:	89 e6       	ldi	r24, 0x69	; 105
    bea4:	9f e6       	ldi	r25, 0x6F	; 111
    bea6:	a0 e3       	ldi	r26, 0x30	; 48
    bea8:	be e3       	ldi	r27, 0x3E	; 62
    beaa:	80 93 0d 05 	sts	0x050D, r24
    beae:	90 93 0e 05 	sts	0x050E, r25
    beb2:	a0 93 0f 05 	sts	0x050F, r26
    beb6:	b0 93 10 05 	sts	0x0510, r27
    beba:	38 c0       	rjmp	.+112    	; 0xbf2c <Terminal+0x1dd6>
					}
					else if (uRangoCond1 == COND_20_2500_C){
    bebc:	80 91 e9 04 	lds	r24, 0x04E9
    bec0:	90 91 ea 04 	lds	r25, 0x04EA
    bec4:	04 97       	sbiw	r24, 0x04	; 4
    bec6:	69 f4       	brne	.+26     	; 0xbee2 <Terminal+0x1d8c>
						flCond1auS = DEFAULT_COND202500C_A_US;
    bec8:	87 ec       	ldi	r24, 0xC7	; 199
    beca:	9a eb       	ldi	r25, 0xBA	; 186
    becc:	a8 e2       	ldi	r26, 0x28	; 40
    bece:	b0 e4       	ldi	r27, 0x40	; 64
    bed0:	80 93 0d 05 	sts	0x050D, r24
    bed4:	90 93 0e 05 	sts	0x050E, r25
    bed8:	a0 93 0f 05 	sts	0x050F, r26
    bedc:	b0 93 10 05 	sts	0x0510, r27
    bee0:	25 c0       	rjmp	.+74     	; 0xbf2c <Terminal+0x1dd6>
					}
					else if (uRangoCond1 == COND_0_20_C){
    bee2:	80 91 e9 04 	lds	r24, 0x04E9
    bee6:	90 91 ea 04 	lds	r25, 0x04EA
    beea:	05 97       	sbiw	r24, 0x05	; 5
    beec:	69 f4       	brne	.+26     	; 0xbf08 <Terminal+0x1db2>
						flCond1auS = DEFAULT_COND020C_A_US;
    beee:	87 ee       	ldi	r24, 0xE7	; 231
    bef0:	9d e1       	ldi	r25, 0x1D	; 29
    bef2:	a7 ea       	ldi	r26, 0xA7	; 167
    bef4:	bc e3       	ldi	r27, 0x3C	; 60
    bef6:	80 93 0d 05 	sts	0x050D, r24
    befa:	90 93 0e 05 	sts	0x050E, r25
    befe:	a0 93 0f 05 	sts	0x050F, r26
    bf02:	b0 93 10 05 	sts	0x0510, r27
    bf06:	12 c0       	rjmp	.+36     	; 0xbf2c <Terminal+0x1dd6>
					}
					else if (uRangoCond1 == COND_2_200_C){
    bf08:	80 91 e9 04 	lds	r24, 0x04E9
    bf0c:	90 91 ea 04 	lds	r25, 0x04EA
    bf10:	06 97       	sbiw	r24, 0x06	; 6
    bf12:	61 f4       	brne	.+24     	; 0xbf2c <Terminal+0x1dd6>
						flCond1auS = DEFAULT_COND2200C_A_US;
    bf14:	83 e0       	ldi	r24, 0x03	; 3
    bf16:	99 e0       	ldi	r25, 0x09	; 9
    bf18:	aa e4       	ldi	r26, 0x4A	; 74
    bf1a:	be e3       	ldi	r27, 0x3E	; 62
    bf1c:	80 93 0d 05 	sts	0x050D, r24
    bf20:	90 93 0e 05 	sts	0x050E, r25
    bf24:	a0 93 0f 05 	sts	0x050F, r26
    bf28:	b0 93 10 05 	sts	0x0510, r27
					}

					Float_a_Eeprom(&flCond1auS_Eeprom, &flCond1auS);
    bf2c:	6d e0       	ldi	r22, 0x0D	; 13
    bf2e:	75 e0       	ldi	r23, 0x05	; 5
    bf30:	8e ed       	ldi	r24, 0xDE	; 222
    bf32:	94 e0       	ldi	r25, 0x04	; 4
    bf34:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flCond1auS_Eeprom_BK, &flCond1auS);
    bf38:	6d e0       	ldi	r22, 0x0D	; 13
    bf3a:	75 e0       	ldi	r23, 0x05	; 5
    bf3c:	8c eb       	ldi	r24, 0xBC	; 188
    bf3e:	94 e0       	ldi	r25, 0x04	; 4
    bf40:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    bf44:	82 e0       	ldi	r24, 0x02	; 2
    bf46:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Autocal_Cond_1);
    bf4a:	8a ec       	ldi	r24, 0xCA	; 202
    bf4c:	96 e0       	ldi	r25, 0x06	; 6
    bf4e:	89 2f       	mov	r24, r25
    bf50:	8f 93       	push	r24
    bf52:	8a ec       	ldi	r24, 0xCA	; 202
    bf54:	96 e0       	ldi	r25, 0x06	; 6
    bf56:	8f 93       	push	r24
    bf58:	87 ef       	ldi	r24, 0xF7	; 247
    bf5a:	91 e0       	ldi	r25, 0x01	; 1
    bf5c:	89 2f       	mov	r24, r25
    bf5e:	8f 93       	push	r24
    bf60:	87 ef       	ldi	r24, 0xF7	; 247
    bf62:	91 e0       	ldi	r25, 0x01	; 1
    bf64:	8f 93       	push	r24
    bf66:	81 e8       	ldi	r24, 0x81	; 129
    bf68:	92 e0       	ldi	r25, 0x02	; 2
    bf6a:	89 2f       	mov	r24, r25
    bf6c:	8f 93       	push	r24
    bf6e:	81 e8       	ldi	r24, 0x81	; 129
    bf70:	92 e0       	ldi	r25, 0x02	; 2
    bf72:	8f 93       	push	r24
    bf74:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    bf78:	0f 90       	pop	r0
    bf7a:	0f 90       	pop	r0
    bf7c:	0f 90       	pop	r0
    bf7e:	0f 90       	pop	r0
    bf80:	0f 90       	pop	r0
    bf82:	0f 90       	pop	r0
    bf84:	90 93 2b 06 	sts	0x062B, r25
    bf88:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond1auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    bf8c:	80 91 2a 06 	lds	r24, 0x062A
    bf90:	90 91 2b 06 	lds	r25, 0x062B
    bf94:	9c 01       	movw	r18, r24
    bf96:	2f 57       	subi	r18, 0x7F	; 127
    bf98:	3d 4f       	sbci	r19, 0xFD	; 253
    bf9a:	80 91 0d 05 	lds	r24, 0x050D
    bf9e:	90 91 0e 05 	lds	r25, 0x050E
    bfa2:	a0 91 0f 05 	lds	r26, 0x050F
    bfa6:	b0 91 10 05 	lds	r27, 0x0510
    bfaa:	89 01       	movw	r16, r18
    bfac:	24 e0       	ldi	r18, 0x04	; 4
    bfae:	47 e0       	ldi	r20, 0x07	; 7
    bfb0:	bc 01       	movw	r22, r24
    bfb2:	cd 01       	movw	r24, r26
    bfb4:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    bfb8:	80 91 2a 06 	lds	r24, 0x062A
    bfbc:	90 91 2b 06 	lds	r25, 0x062B
    bfc0:	07 96       	adiw	r24, 0x07	; 7
    bfc2:	90 93 2b 06 	sts	0x062B, r25
    bfc6:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    bfca:	80 91 2a 06 	lds	r24, 0x062A
    bfce:	90 91 2b 06 	lds	r25, 0x062B
    bfd2:	8f 57       	subi	r24, 0x7F	; 127
    bfd4:	9d 4f       	sbci	r25, 0xFD	; 253
    bfd6:	27 e9       	ldi	r18, 0x97	; 151
    bfd8:	37 e0       	ldi	r19, 0x07	; 7
    bfda:	23 2f       	mov	r18, r19
    bfdc:	2f 93       	push	r18
    bfde:	27 e9       	ldi	r18, 0x97	; 151
    bfe0:	37 e0       	ldi	r19, 0x07	; 7
    bfe2:	2f 93       	push	r18
    bfe4:	2c ef       	ldi	r18, 0xFC	; 252
    bfe6:	31 e0       	ldi	r19, 0x01	; 1
    bfe8:	23 2f       	mov	r18, r19
    bfea:	2f 93       	push	r18
    bfec:	2c ef       	ldi	r18, 0xFC	; 252
    bfee:	31 e0       	ldi	r19, 0x01	; 1
    bff0:	2f 93       	push	r18
    bff2:	29 2f       	mov	r18, r25
    bff4:	2f 93       	push	r18
    bff6:	8f 93       	push	r24
    bff8:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    bffc:	0f 90       	pop	r0
    bffe:	0f 90       	pop	r0
    c000:	0f 90       	pop	r0
    c002:	0f 90       	pop	r0
    c004:	0f 90       	pop	r0
    c006:	0f 90       	pop	r0
    c008:	9c 01       	movw	r18, r24
    c00a:	80 91 2a 06 	lds	r24, 0x062A
    c00e:	90 91 2b 06 	lds	r25, 0x062B
    c012:	82 0f       	add	r24, r18
    c014:	93 1f       	adc	r25, r19
    c016:	90 93 2b 06 	sts	0x062B, r25
    c01a:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond1, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    c01e:	80 91 2a 06 	lds	r24, 0x062A
    c022:	90 91 2b 06 	lds	r25, 0x062B
    c026:	9c 01       	movw	r18, r24
    c028:	2f 57       	subi	r18, 0x7F	; 127
    c02a:	3d 4f       	sbci	r19, 0xFD	; 253
    c02c:	80 91 f8 04 	lds	r24, 0x04F8
    c030:	90 91 f9 04 	lds	r25, 0x04F9
    c034:	a0 91 fa 04 	lds	r26, 0x04FA
    c038:	b0 91 fb 04 	lds	r27, 0x04FB
    c03c:	89 01       	movw	r16, r18
    c03e:	22 e0       	ldi	r18, 0x02	; 2
    c040:	45 e0       	ldi	r20, 0x05	; 5
    c042:	bc 01       	movw	r22, r24
    c044:	cd 01       	movw	r24, r26
    c046:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    c04a:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Autocal_Cond_1);
    c04e:	8a ec       	ldi	r24, 0xCA	; 202
    c050:	96 e0       	ldi	r25, 0x06	; 6
    c052:	89 2f       	mov	r24, r25
    c054:	8f 93       	push	r24
    c056:	8a ec       	ldi	r24, 0xCA	; 202
    c058:	96 e0       	ldi	r25, 0x06	; 6
    c05a:	8f 93       	push	r24
    c05c:	87 ef       	ldi	r24, 0xF7	; 247
    c05e:	91 e0       	ldi	r25, 0x01	; 1
    c060:	89 2f       	mov	r24, r25
    c062:	8f 93       	push	r24
    c064:	87 ef       	ldi	r24, 0xF7	; 247
    c066:	91 e0       	ldi	r25, 0x01	; 1
    c068:	8f 93       	push	r24
    c06a:	81 e8       	ldi	r24, 0x81	; 129
    c06c:	92 e0       	ldi	r25, 0x02	; 2
    c06e:	89 2f       	mov	r24, r25
    c070:	8f 93       	push	r24
    c072:	81 e8       	ldi	r24, 0x81	; 129
    c074:	92 e0       	ldi	r25, 0x02	; 2
    c076:	8f 93       	push	r24
    c078:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    c07c:	0f 90       	pop	r0
    c07e:	0f 90       	pop	r0
    c080:	0f 90       	pop	r0
    c082:	0f 90       	pop	r0
    c084:	0f 90       	pop	r0
    c086:	0f 90       	pop	r0
    c088:	90 93 2b 06 	sts	0x062B, r25
    c08c:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond1auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    c090:	80 91 2a 06 	lds	r24, 0x062A
    c094:	90 91 2b 06 	lds	r25, 0x062B
    c098:	9c 01       	movw	r18, r24
    c09a:	2f 57       	subi	r18, 0x7F	; 127
    c09c:	3d 4f       	sbci	r19, 0xFD	; 253
    c09e:	80 91 0d 05 	lds	r24, 0x050D
    c0a2:	90 91 0e 05 	lds	r25, 0x050E
    c0a6:	a0 91 0f 05 	lds	r26, 0x050F
    c0aa:	b0 91 10 05 	lds	r27, 0x0510
    c0ae:	89 01       	movw	r16, r18
    c0b0:	24 e0       	ldi	r18, 0x04	; 4
    c0b2:	47 e0       	ldi	r20, 0x07	; 7
    c0b4:	bc 01       	movw	r22, r24
    c0b6:	cd 01       	movw	r24, r26
    c0b8:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    c0bc:	80 91 2a 06 	lds	r24, 0x062A
    c0c0:	90 91 2b 06 	lds	r25, 0x062B
    c0c4:	07 96       	adiw	r24, 0x07	; 7
    c0c6:	90 93 2b 06 	sts	0x062B, r25
    c0ca:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    c0ce:	80 91 2a 06 	lds	r24, 0x062A
    c0d2:	90 91 2b 06 	lds	r25, 0x062B
    c0d6:	8f 57       	subi	r24, 0x7F	; 127
    c0d8:	9d 4f       	sbci	r25, 0xFD	; 253
    c0da:	27 e9       	ldi	r18, 0x97	; 151
    c0dc:	37 e0       	ldi	r19, 0x07	; 7
    c0de:	23 2f       	mov	r18, r19
    c0e0:	2f 93       	push	r18
    c0e2:	27 e9       	ldi	r18, 0x97	; 151
    c0e4:	37 e0       	ldi	r19, 0x07	; 7
    c0e6:	2f 93       	push	r18
    c0e8:	2c ef       	ldi	r18, 0xFC	; 252
    c0ea:	31 e0       	ldi	r19, 0x01	; 1
    c0ec:	23 2f       	mov	r18, r19
    c0ee:	2f 93       	push	r18
    c0f0:	2c ef       	ldi	r18, 0xFC	; 252
    c0f2:	31 e0       	ldi	r19, 0x01	; 1
    c0f4:	2f 93       	push	r18
    c0f6:	29 2f       	mov	r18, r25
    c0f8:	2f 93       	push	r18
    c0fa:	8f 93       	push	r24
    c0fc:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    c100:	0f 90       	pop	r0
    c102:	0f 90       	pop	r0
    c104:	0f 90       	pop	r0
    c106:	0f 90       	pop	r0
    c108:	0f 90       	pop	r0
    c10a:	0f 90       	pop	r0
    c10c:	9c 01       	movw	r18, r24
    c10e:	80 91 2a 06 	lds	r24, 0x062A
    c112:	90 91 2b 06 	lds	r25, 0x062B
    c116:	82 0f       	add	r24, r18
    c118:	93 1f       	adc	r25, r19
    c11a:	90 93 2b 06 	sts	0x062B, r25
    c11e:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond1, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    c122:	80 91 2a 06 	lds	r24, 0x062A
    c126:	90 91 2b 06 	lds	r25, 0x062B
    c12a:	9c 01       	movw	r18, r24
    c12c:	2f 57       	subi	r18, 0x7F	; 127
    c12e:	3d 4f       	sbci	r19, 0xFD	; 253
    c130:	80 91 f8 04 	lds	r24, 0x04F8
    c134:	90 91 f9 04 	lds	r25, 0x04F9
    c138:	a0 91 fa 04 	lds	r26, 0x04FA
    c13c:	b0 91 fb 04 	lds	r27, 0x04FB
    c140:	89 01       	movw	r16, r18
    c142:	22 e0       	ldi	r18, 0x02	; 2
    c144:	45 e0       	ldi	r20, 0x05	; 5
    c146:	bc 01       	movw	r22, r24
    c148:	cd 01       	movw	r24, r26
    c14a:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    c14e:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
    c152:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = CAL COND 1 xx.xx\0
			else if (Detectar_Comando_Buffer_P(Comando_Cal_Cond_1, chBufferRx_USART0)) {
    c156:	61 e8       	ldi	r22, 0x81	; 129
    c158:	72 e0       	ldi	r23, 0x02	; 2
    c15a:	84 e9       	ldi	r24, 0x94	; 148
    c15c:	96 e0       	ldi	r25, 0x06	; 6
    c15e:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    c162:	89 2b       	or	r24, r25
    c164:	09 f4       	brne	.+2      	; 0xc168 <Terminal+0x2012>
    c166:	4d c2       	rjmp	.+1178   	; 0xc602 <Terminal+0x24ac>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    c168:	80 91 2a 06 	lds	r24, 0x062A
    c16c:	90 91 2b 06 	lds	r25, 0x062B
    c170:	8f 57       	subi	r24, 0x7F	; 127
    c172:	9d 4f       	sbci	r25, 0xFD	; 253
    c174:	fc 01       	movw	r30, r24
    c176:	80 81       	ld	r24, Z
    c178:	80 33       	cpi	r24, 0x30	; 48
    c17a:	08 f4       	brcc	.+2      	; 0xc17e <Terminal+0x2028>
    c17c:	b0 c0       	rjmp	.+352    	; 0xc2de <Terminal+0x2188>
    c17e:	80 91 2a 06 	lds	r24, 0x062A
    c182:	90 91 2b 06 	lds	r25, 0x062B
    c186:	8f 57       	subi	r24, 0x7F	; 127
    c188:	9d 4f       	sbci	r25, 0xFD	; 253
    c18a:	fc 01       	movw	r30, r24
    c18c:	80 81       	ld	r24, Z
    c18e:	8a 33       	cpi	r24, 0x3A	; 58
    c190:	08 f0       	brcs	.+2      	; 0xc194 <Terminal+0x203e>
    c192:	a5 c0       	rjmp	.+330    	; 0xc2de <Terminal+0x2188>
					flCond1auS = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    c194:	80 91 2a 06 	lds	r24, 0x062A
    c198:	90 91 2b 06 	lds	r25, 0x062B
    c19c:	8f 57       	subi	r24, 0x7F	; 127
    c19e:	9d 4f       	sbci	r25, 0xFD	; 253
    c1a0:	68 ec       	ldi	r22, 0xC8	; 200
    c1a2:	70 e0       	ldi	r23, 0x00	; 0
    c1a4:	0e 94 5e 80 	call	0x100bc	; 0x100bc <From_String_to_Float>
    c1a8:	dc 01       	movw	r26, r24
    c1aa:	cb 01       	movw	r24, r22
    c1ac:	80 93 0d 05 	sts	0x050D, r24
    c1b0:	90 93 0e 05 	sts	0x050E, r25
    c1b4:	a0 93 0f 05 	sts	0x050F, r26
    c1b8:	b0 93 10 05 	sts	0x0510, r27

					Float_a_Eeprom(&flCond1auS_Eeprom, &flCond1auS);
    c1bc:	6d e0       	ldi	r22, 0x0D	; 13
    c1be:	75 e0       	ldi	r23, 0x05	; 5
    c1c0:	8e ed       	ldi	r24, 0xDE	; 222
    c1c2:	94 e0       	ldi	r25, 0x04	; 4
    c1c4:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flCond1auS_Eeprom_BK, &flCond1auS);
    c1c8:	6d e0       	ldi	r22, 0x0D	; 13
    c1ca:	75 e0       	ldi	r23, 0x05	; 5
    c1cc:	8c eb       	ldi	r24, 0xBC	; 188
    c1ce:	94 e0       	ldi	r25, 0x04	; 4
    c1d0:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    c1d4:	82 e0       	ldi	r24, 0x02	; 2
    c1d6:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_Cond_1);
    c1da:	84 e9       	ldi	r24, 0x94	; 148
    c1dc:	96 e0       	ldi	r25, 0x06	; 6
    c1de:	89 2f       	mov	r24, r25
    c1e0:	8f 93       	push	r24
    c1e2:	84 e9       	ldi	r24, 0x94	; 148
    c1e4:	96 e0       	ldi	r25, 0x06	; 6
    c1e6:	8f 93       	push	r24
    c1e8:	87 ef       	ldi	r24, 0xF7	; 247
    c1ea:	91 e0       	ldi	r25, 0x01	; 1
    c1ec:	89 2f       	mov	r24, r25
    c1ee:	8f 93       	push	r24
    c1f0:	87 ef       	ldi	r24, 0xF7	; 247
    c1f2:	91 e0       	ldi	r25, 0x01	; 1
    c1f4:	8f 93       	push	r24
    c1f6:	81 e8       	ldi	r24, 0x81	; 129
    c1f8:	92 e0       	ldi	r25, 0x02	; 2
    c1fa:	89 2f       	mov	r24, r25
    c1fc:	8f 93       	push	r24
    c1fe:	81 e8       	ldi	r24, 0x81	; 129
    c200:	92 e0       	ldi	r25, 0x02	; 2
    c202:	8f 93       	push	r24
    c204:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    c208:	0f 90       	pop	r0
    c20a:	0f 90       	pop	r0
    c20c:	0f 90       	pop	r0
    c20e:	0f 90       	pop	r0
    c210:	0f 90       	pop	r0
    c212:	0f 90       	pop	r0
    c214:	90 93 2b 06 	sts	0x062B, r25
    c218:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond1auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    c21c:	80 91 2a 06 	lds	r24, 0x062A
    c220:	90 91 2b 06 	lds	r25, 0x062B
    c224:	9c 01       	movw	r18, r24
    c226:	2f 57       	subi	r18, 0x7F	; 127
    c228:	3d 4f       	sbci	r19, 0xFD	; 253
    c22a:	80 91 0d 05 	lds	r24, 0x050D
    c22e:	90 91 0e 05 	lds	r25, 0x050E
    c232:	a0 91 0f 05 	lds	r26, 0x050F
    c236:	b0 91 10 05 	lds	r27, 0x0510
    c23a:	89 01       	movw	r16, r18
    c23c:	24 e0       	ldi	r18, 0x04	; 4
    c23e:	47 e0       	ldi	r20, 0x07	; 7
    c240:	bc 01       	movw	r22, r24
    c242:	cd 01       	movw	r24, r26
    c244:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    c248:	80 91 2a 06 	lds	r24, 0x062A
    c24c:	90 91 2b 06 	lds	r25, 0x062B
    c250:	07 96       	adiw	r24, 0x07	; 7
    c252:	90 93 2b 06 	sts	0x062B, r25
    c256:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    c25a:	80 91 2a 06 	lds	r24, 0x062A
    c25e:	90 91 2b 06 	lds	r25, 0x062B
    c262:	8f 57       	subi	r24, 0x7F	; 127
    c264:	9d 4f       	sbci	r25, 0xFD	; 253
    c266:	27 e9       	ldi	r18, 0x97	; 151
    c268:	37 e0       	ldi	r19, 0x07	; 7
    c26a:	23 2f       	mov	r18, r19
    c26c:	2f 93       	push	r18
    c26e:	27 e9       	ldi	r18, 0x97	; 151
    c270:	37 e0       	ldi	r19, 0x07	; 7
    c272:	2f 93       	push	r18
    c274:	2c ef       	ldi	r18, 0xFC	; 252
    c276:	31 e0       	ldi	r19, 0x01	; 1
    c278:	23 2f       	mov	r18, r19
    c27a:	2f 93       	push	r18
    c27c:	2c ef       	ldi	r18, 0xFC	; 252
    c27e:	31 e0       	ldi	r19, 0x01	; 1
    c280:	2f 93       	push	r18
    c282:	29 2f       	mov	r18, r25
    c284:	2f 93       	push	r18
    c286:	8f 93       	push	r24
    c288:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    c28c:	0f 90       	pop	r0
    c28e:	0f 90       	pop	r0
    c290:	0f 90       	pop	r0
    c292:	0f 90       	pop	r0
    c294:	0f 90       	pop	r0
    c296:	0f 90       	pop	r0
    c298:	9c 01       	movw	r18, r24
    c29a:	80 91 2a 06 	lds	r24, 0x062A
    c29e:	90 91 2b 06 	lds	r25, 0x062B
    c2a2:	82 0f       	add	r24, r18
    c2a4:	93 1f       	adc	r25, r19
    c2a6:	90 93 2b 06 	sts	0x062B, r25
    c2aa:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond1, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    c2ae:	80 91 2a 06 	lds	r24, 0x062A
    c2b2:	90 91 2b 06 	lds	r25, 0x062B
    c2b6:	9c 01       	movw	r18, r24
    c2b8:	2f 57       	subi	r18, 0x7F	; 127
    c2ba:	3d 4f       	sbci	r19, 0xFD	; 253
    c2bc:	80 91 f8 04 	lds	r24, 0x04F8
    c2c0:	90 91 f9 04 	lds	r25, 0x04F9
    c2c4:	a0 91 fa 04 	lds	r26, 0x04FA
    c2c8:	b0 91 fb 04 	lds	r27, 0x04FB
    c2cc:	89 01       	movw	r16, r18
    c2ce:	22 e0       	ldi	r18, 0x02	; 2
    c2d0:	45 e0       	ldi	r20, 0x05	; 5
    c2d2:	bc 01       	movw	r22, r24
    c2d4:	cd 01       	movw	r24, r26
    c2d6:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    c2da:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    c2de:	80 91 2a 06 	lds	r24, 0x062A
    c2e2:	90 91 2b 06 	lds	r25, 0x062B
    c2e6:	8f 57       	subi	r24, 0x7F	; 127
    c2e8:	9d 4f       	sbci	r25, 0xFD	; 253
    c2ea:	bc 01       	movw	r22, r24
    c2ec:	80 ee       	ldi	r24, 0xE0	; 224
    c2ee:	95 e0       	ldi	r25, 0x05	; 5
    c2f0:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    c2f4:	89 2b       	or	r24, r25
    c2f6:	09 f4       	brne	.+2      	; 0xc2fa <Terminal+0x21a4>
    c2f8:	02 c1       	rjmp	.+516    	; 0xc4fe <Terminal+0x23a8>
					if (uRangoCond1 == COND_20_2500_G){
    c2fa:	80 91 e9 04 	lds	r24, 0x04E9
    c2fe:	90 91 ea 04 	lds	r25, 0x04EA
    c302:	01 97       	sbiw	r24, 0x01	; 1
    c304:	69 f4       	brne	.+26     	; 0xc320 <Terminal+0x21ca>
						flCond1auS = DEFAULT_COND202500G_A_US;
    c306:	8c e9       	ldi	r24, 0x9C	; 156
    c308:	92 ea       	ldi	r25, 0xA2	; 162
    c30a:	ab e0       	ldi	r26, 0x0B	; 11
    c30c:	b0 e4       	ldi	r27, 0x40	; 64
    c30e:	80 93 0d 05 	sts	0x050D, r24
    c312:	90 93 0e 05 	sts	0x050E, r25
    c316:	a0 93 0f 05 	sts	0x050F, r26
    c31a:	b0 93 10 05 	sts	0x0510, r27
    c31e:	5e c0       	rjmp	.+188    	; 0xc3dc <Terminal+0x2286>
					}
					else if (uRangoCond1 == COND_0_20_G){
    c320:	80 91 e9 04 	lds	r24, 0x04E9
    c324:	90 91 ea 04 	lds	r25, 0x04EA
    c328:	02 97       	sbiw	r24, 0x02	; 2
    c32a:	69 f4       	brne	.+26     	; 0xc346 <Terminal+0x21f0>
						flCond1auS = DEFAULT_COND020G_A_US;
    c32c:	8d e4       	ldi	r24, 0x4D	; 77
    c32e:	95 e1       	ldi	r25, 0x15	; 21
    c330:	ac e8       	ldi	r26, 0x8C	; 140
    c332:	bc e3       	ldi	r27, 0x3C	; 60
    c334:	80 93 0d 05 	sts	0x050D, r24
    c338:	90 93 0e 05 	sts	0x050E, r25
    c33c:	a0 93 0f 05 	sts	0x050F, r26
    c340:	b0 93 10 05 	sts	0x0510, r27
    c344:	4b c0       	rjmp	.+150    	; 0xc3dc <Terminal+0x2286>
					}
					else if (uRangoCond1 == COND_2_200_G){
    c346:	80 91 e9 04 	lds	r24, 0x04E9
    c34a:	90 91 ea 04 	lds	r25, 0x04EA
    c34e:	03 97       	sbiw	r24, 0x03	; 3
    c350:	69 f4       	brne	.+26     	; 0xc36c <Terminal+0x2216>
						flCond1auS = DEFAULT_COND2200G_A_US;
    c352:	89 e6       	ldi	r24, 0x69	; 105
    c354:	9f e6       	ldi	r25, 0x6F	; 111
    c356:	a0 e3       	ldi	r26, 0x30	; 48
    c358:	be e3       	ldi	r27, 0x3E	; 62
    c35a:	80 93 0d 05 	sts	0x050D, r24
    c35e:	90 93 0e 05 	sts	0x050E, r25
    c362:	a0 93 0f 05 	sts	0x050F, r26
    c366:	b0 93 10 05 	sts	0x0510, r27
    c36a:	38 c0       	rjmp	.+112    	; 0xc3dc <Terminal+0x2286>
					}
					else if (uRangoCond1 == COND_20_2500_C){
    c36c:	80 91 e9 04 	lds	r24, 0x04E9
    c370:	90 91 ea 04 	lds	r25, 0x04EA
    c374:	04 97       	sbiw	r24, 0x04	; 4
    c376:	69 f4       	brne	.+26     	; 0xc392 <Terminal+0x223c>
						flCond1auS = DEFAULT_COND202500C_A_US;
    c378:	87 ec       	ldi	r24, 0xC7	; 199
    c37a:	9a eb       	ldi	r25, 0xBA	; 186
    c37c:	a8 e2       	ldi	r26, 0x28	; 40
    c37e:	b0 e4       	ldi	r27, 0x40	; 64
    c380:	80 93 0d 05 	sts	0x050D, r24
    c384:	90 93 0e 05 	sts	0x050E, r25
    c388:	a0 93 0f 05 	sts	0x050F, r26
    c38c:	b0 93 10 05 	sts	0x0510, r27
    c390:	25 c0       	rjmp	.+74     	; 0xc3dc <Terminal+0x2286>
					}
					else if (uRangoCond1 == COND_0_20_C){
    c392:	80 91 e9 04 	lds	r24, 0x04E9
    c396:	90 91 ea 04 	lds	r25, 0x04EA
    c39a:	05 97       	sbiw	r24, 0x05	; 5
    c39c:	69 f4       	brne	.+26     	; 0xc3b8 <Terminal+0x2262>
						flCond1auS = DEFAULT_COND020C_A_US;
    c39e:	87 ee       	ldi	r24, 0xE7	; 231
    c3a0:	9d e1       	ldi	r25, 0x1D	; 29
    c3a2:	a7 ea       	ldi	r26, 0xA7	; 167
    c3a4:	bc e3       	ldi	r27, 0x3C	; 60
    c3a6:	80 93 0d 05 	sts	0x050D, r24
    c3aa:	90 93 0e 05 	sts	0x050E, r25
    c3ae:	a0 93 0f 05 	sts	0x050F, r26
    c3b2:	b0 93 10 05 	sts	0x0510, r27
    c3b6:	12 c0       	rjmp	.+36     	; 0xc3dc <Terminal+0x2286>
					}
					else if (uRangoCond1 == COND_2_200_C){
    c3b8:	80 91 e9 04 	lds	r24, 0x04E9
    c3bc:	90 91 ea 04 	lds	r25, 0x04EA
    c3c0:	06 97       	sbiw	r24, 0x06	; 6
    c3c2:	61 f4       	brne	.+24     	; 0xc3dc <Terminal+0x2286>
						flCond1auS = DEFAULT_COND2200C_A_US;
    c3c4:	83 e0       	ldi	r24, 0x03	; 3
    c3c6:	99 e0       	ldi	r25, 0x09	; 9
    c3c8:	aa e4       	ldi	r26, 0x4A	; 74
    c3ca:	be e3       	ldi	r27, 0x3E	; 62
    c3cc:	80 93 0d 05 	sts	0x050D, r24
    c3d0:	90 93 0e 05 	sts	0x050E, r25
    c3d4:	a0 93 0f 05 	sts	0x050F, r26
    c3d8:	b0 93 10 05 	sts	0x0510, r27
					}

					Float_a_Eeprom(&flCond1auS_Eeprom, &flCond1auS);
    c3dc:	6d e0       	ldi	r22, 0x0D	; 13
    c3de:	75 e0       	ldi	r23, 0x05	; 5
    c3e0:	8e ed       	ldi	r24, 0xDE	; 222
    c3e2:	94 e0       	ldi	r25, 0x04	; 4
    c3e4:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flCond1auS_Eeprom_BK, &flCond1auS);
    c3e8:	6d e0       	ldi	r22, 0x0D	; 13
    c3ea:	75 e0       	ldi	r23, 0x05	; 5
    c3ec:	8c eb       	ldi	r24, 0xBC	; 188
    c3ee:	94 e0       	ldi	r25, 0x04	; 4
    c3f0:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    c3f4:	82 e0       	ldi	r24, 0x02	; 2
    c3f6:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_Cond_1);
    c3fa:	84 e9       	ldi	r24, 0x94	; 148
    c3fc:	96 e0       	ldi	r25, 0x06	; 6
    c3fe:	89 2f       	mov	r24, r25
    c400:	8f 93       	push	r24
    c402:	84 e9       	ldi	r24, 0x94	; 148
    c404:	96 e0       	ldi	r25, 0x06	; 6
    c406:	8f 93       	push	r24
    c408:	87 ef       	ldi	r24, 0xF7	; 247
    c40a:	91 e0       	ldi	r25, 0x01	; 1
    c40c:	89 2f       	mov	r24, r25
    c40e:	8f 93       	push	r24
    c410:	87 ef       	ldi	r24, 0xF7	; 247
    c412:	91 e0       	ldi	r25, 0x01	; 1
    c414:	8f 93       	push	r24
    c416:	81 e8       	ldi	r24, 0x81	; 129
    c418:	92 e0       	ldi	r25, 0x02	; 2
    c41a:	89 2f       	mov	r24, r25
    c41c:	8f 93       	push	r24
    c41e:	81 e8       	ldi	r24, 0x81	; 129
    c420:	92 e0       	ldi	r25, 0x02	; 2
    c422:	8f 93       	push	r24
    c424:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    c428:	0f 90       	pop	r0
    c42a:	0f 90       	pop	r0
    c42c:	0f 90       	pop	r0
    c42e:	0f 90       	pop	r0
    c430:	0f 90       	pop	r0
    c432:	0f 90       	pop	r0
    c434:	90 93 2b 06 	sts	0x062B, r25
    c438:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond1auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    c43c:	80 91 2a 06 	lds	r24, 0x062A
    c440:	90 91 2b 06 	lds	r25, 0x062B
    c444:	9c 01       	movw	r18, r24
    c446:	2f 57       	subi	r18, 0x7F	; 127
    c448:	3d 4f       	sbci	r19, 0xFD	; 253
    c44a:	80 91 0d 05 	lds	r24, 0x050D
    c44e:	90 91 0e 05 	lds	r25, 0x050E
    c452:	a0 91 0f 05 	lds	r26, 0x050F
    c456:	b0 91 10 05 	lds	r27, 0x0510
    c45a:	89 01       	movw	r16, r18
    c45c:	24 e0       	ldi	r18, 0x04	; 4
    c45e:	47 e0       	ldi	r20, 0x07	; 7
    c460:	bc 01       	movw	r22, r24
    c462:	cd 01       	movw	r24, r26
    c464:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    c468:	80 91 2a 06 	lds	r24, 0x062A
    c46c:	90 91 2b 06 	lds	r25, 0x062B
    c470:	07 96       	adiw	r24, 0x07	; 7
    c472:	90 93 2b 06 	sts	0x062B, r25
    c476:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    c47a:	80 91 2a 06 	lds	r24, 0x062A
    c47e:	90 91 2b 06 	lds	r25, 0x062B
    c482:	8f 57       	subi	r24, 0x7F	; 127
    c484:	9d 4f       	sbci	r25, 0xFD	; 253
    c486:	27 e9       	ldi	r18, 0x97	; 151
    c488:	37 e0       	ldi	r19, 0x07	; 7
    c48a:	23 2f       	mov	r18, r19
    c48c:	2f 93       	push	r18
    c48e:	27 e9       	ldi	r18, 0x97	; 151
    c490:	37 e0       	ldi	r19, 0x07	; 7
    c492:	2f 93       	push	r18
    c494:	2c ef       	ldi	r18, 0xFC	; 252
    c496:	31 e0       	ldi	r19, 0x01	; 1
    c498:	23 2f       	mov	r18, r19
    c49a:	2f 93       	push	r18
    c49c:	2c ef       	ldi	r18, 0xFC	; 252
    c49e:	31 e0       	ldi	r19, 0x01	; 1
    c4a0:	2f 93       	push	r18
    c4a2:	29 2f       	mov	r18, r25
    c4a4:	2f 93       	push	r18
    c4a6:	8f 93       	push	r24
    c4a8:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    c4ac:	0f 90       	pop	r0
    c4ae:	0f 90       	pop	r0
    c4b0:	0f 90       	pop	r0
    c4b2:	0f 90       	pop	r0
    c4b4:	0f 90       	pop	r0
    c4b6:	0f 90       	pop	r0
    c4b8:	9c 01       	movw	r18, r24
    c4ba:	80 91 2a 06 	lds	r24, 0x062A
    c4be:	90 91 2b 06 	lds	r25, 0x062B
    c4c2:	82 0f       	add	r24, r18
    c4c4:	93 1f       	adc	r25, r19
    c4c6:	90 93 2b 06 	sts	0x062B, r25
    c4ca:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond1, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    c4ce:	80 91 2a 06 	lds	r24, 0x062A
    c4d2:	90 91 2b 06 	lds	r25, 0x062B
    c4d6:	9c 01       	movw	r18, r24
    c4d8:	2f 57       	subi	r18, 0x7F	; 127
    c4da:	3d 4f       	sbci	r19, 0xFD	; 253
    c4dc:	80 91 f8 04 	lds	r24, 0x04F8
    c4e0:	90 91 f9 04 	lds	r25, 0x04F9
    c4e4:	a0 91 fa 04 	lds	r26, 0x04FA
    c4e8:	b0 91 fb 04 	lds	r27, 0x04FB
    c4ec:	89 01       	movw	r16, r18
    c4ee:	22 e0       	ldi	r18, 0x02	; 2
    c4f0:	45 e0       	ldi	r20, 0x05	; 5
    c4f2:	bc 01       	movw	r22, r24
    c4f4:	cd 01       	movw	r24, r26
    c4f6:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    c4fa:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_Cond_1);
    c4fe:	84 e9       	ldi	r24, 0x94	; 148
    c500:	96 e0       	ldi	r25, 0x06	; 6
    c502:	89 2f       	mov	r24, r25
    c504:	8f 93       	push	r24
    c506:	84 e9       	ldi	r24, 0x94	; 148
    c508:	96 e0       	ldi	r25, 0x06	; 6
    c50a:	8f 93       	push	r24
    c50c:	87 ef       	ldi	r24, 0xF7	; 247
    c50e:	91 e0       	ldi	r25, 0x01	; 1
    c510:	89 2f       	mov	r24, r25
    c512:	8f 93       	push	r24
    c514:	87 ef       	ldi	r24, 0xF7	; 247
    c516:	91 e0       	ldi	r25, 0x01	; 1
    c518:	8f 93       	push	r24
    c51a:	81 e8       	ldi	r24, 0x81	; 129
    c51c:	92 e0       	ldi	r25, 0x02	; 2
    c51e:	89 2f       	mov	r24, r25
    c520:	8f 93       	push	r24
    c522:	81 e8       	ldi	r24, 0x81	; 129
    c524:	92 e0       	ldi	r25, 0x02	; 2
    c526:	8f 93       	push	r24
    c528:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    c52c:	0f 90       	pop	r0
    c52e:	0f 90       	pop	r0
    c530:	0f 90       	pop	r0
    c532:	0f 90       	pop	r0
    c534:	0f 90       	pop	r0
    c536:	0f 90       	pop	r0
    c538:	90 93 2b 06 	sts	0x062B, r25
    c53c:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond1auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    c540:	80 91 2a 06 	lds	r24, 0x062A
    c544:	90 91 2b 06 	lds	r25, 0x062B
    c548:	9c 01       	movw	r18, r24
    c54a:	2f 57       	subi	r18, 0x7F	; 127
    c54c:	3d 4f       	sbci	r19, 0xFD	; 253
    c54e:	80 91 0d 05 	lds	r24, 0x050D
    c552:	90 91 0e 05 	lds	r25, 0x050E
    c556:	a0 91 0f 05 	lds	r26, 0x050F
    c55a:	b0 91 10 05 	lds	r27, 0x0510
    c55e:	89 01       	movw	r16, r18
    c560:	24 e0       	ldi	r18, 0x04	; 4
    c562:	47 e0       	ldi	r20, 0x07	; 7
    c564:	bc 01       	movw	r22, r24
    c566:	cd 01       	movw	r24, r26
    c568:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    c56c:	80 91 2a 06 	lds	r24, 0x062A
    c570:	90 91 2b 06 	lds	r25, 0x062B
    c574:	07 96       	adiw	r24, 0x07	; 7
    c576:	90 93 2b 06 	sts	0x062B, r25
    c57a:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    c57e:	80 91 2a 06 	lds	r24, 0x062A
    c582:	90 91 2b 06 	lds	r25, 0x062B
    c586:	8f 57       	subi	r24, 0x7F	; 127
    c588:	9d 4f       	sbci	r25, 0xFD	; 253
    c58a:	27 e9       	ldi	r18, 0x97	; 151
    c58c:	37 e0       	ldi	r19, 0x07	; 7
    c58e:	23 2f       	mov	r18, r19
    c590:	2f 93       	push	r18
    c592:	27 e9       	ldi	r18, 0x97	; 151
    c594:	37 e0       	ldi	r19, 0x07	; 7
    c596:	2f 93       	push	r18
    c598:	2c ef       	ldi	r18, 0xFC	; 252
    c59a:	31 e0       	ldi	r19, 0x01	; 1
    c59c:	23 2f       	mov	r18, r19
    c59e:	2f 93       	push	r18
    c5a0:	2c ef       	ldi	r18, 0xFC	; 252
    c5a2:	31 e0       	ldi	r19, 0x01	; 1
    c5a4:	2f 93       	push	r18
    c5a6:	29 2f       	mov	r18, r25
    c5a8:	2f 93       	push	r18
    c5aa:	8f 93       	push	r24
    c5ac:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    c5b0:	0f 90       	pop	r0
    c5b2:	0f 90       	pop	r0
    c5b4:	0f 90       	pop	r0
    c5b6:	0f 90       	pop	r0
    c5b8:	0f 90       	pop	r0
    c5ba:	0f 90       	pop	r0
    c5bc:	9c 01       	movw	r18, r24
    c5be:	80 91 2a 06 	lds	r24, 0x062A
    c5c2:	90 91 2b 06 	lds	r25, 0x062B
    c5c6:	82 0f       	add	r24, r18
    c5c8:	93 1f       	adc	r25, r19
    c5ca:	90 93 2b 06 	sts	0x062B, r25
    c5ce:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond1, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    c5d2:	80 91 2a 06 	lds	r24, 0x062A
    c5d6:	90 91 2b 06 	lds	r25, 0x062B
    c5da:	9c 01       	movw	r18, r24
    c5dc:	2f 57       	subi	r18, 0x7F	; 127
    c5de:	3d 4f       	sbci	r19, 0xFD	; 253
    c5e0:	80 91 f8 04 	lds	r24, 0x04F8
    c5e4:	90 91 f9 04 	lds	r25, 0x04F9
    c5e8:	a0 91 fa 04 	lds	r26, 0x04FA
    c5ec:	b0 91 fb 04 	lds	r27, 0x04FB
    c5f0:	89 01       	movw	r16, r18
    c5f2:	22 e0       	ldi	r18, 0x02	; 2
    c5f4:	45 e0       	ldi	r20, 0x05	; 5
    c5f6:	bc 01       	movw	r22, r24
    c5f8:	cd 01       	movw	r24, r26
    c5fa:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    c5fe:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = OFFSET COND 1 xx.xx\0
			else if (Detectar_Comando_Buffer_P(Comando_Offset_1, chBufferRx_USART0)) {
    c602:	61 e8       	ldi	r22, 0x81	; 129
    c604:	72 e0       	ldi	r23, 0x02	; 2
    c606:	8a ee       	ldi	r24, 0xEA	; 234
    c608:	96 e0       	ldi	r25, 0x06	; 6
    c60a:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    c60e:	89 2b       	or	r24, r25
    c610:	09 f4       	brne	.+2      	; 0xc614 <Terminal+0x24be>
    c612:	35 c2       	rjmp	.+1130   	; 0xca7e <Terminal+0x2928>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    c614:	80 91 2a 06 	lds	r24, 0x062A
    c618:	90 91 2b 06 	lds	r25, 0x062B
    c61c:	8f 57       	subi	r24, 0x7F	; 127
    c61e:	9d 4f       	sbci	r25, 0xFD	; 253
    c620:	fc 01       	movw	r30, r24
    c622:	80 81       	ld	r24, Z
    c624:	80 33       	cpi	r24, 0x30	; 48
    c626:	08 f4       	brcc	.+2      	; 0xc62a <Terminal+0x24d4>
    c628:	b0 c0       	rjmp	.+352    	; 0xc78a <Terminal+0x2634>
    c62a:	80 91 2a 06 	lds	r24, 0x062A
    c62e:	90 91 2b 06 	lds	r25, 0x062B
    c632:	8f 57       	subi	r24, 0x7F	; 127
    c634:	9d 4f       	sbci	r25, 0xFD	; 253
    c636:	fc 01       	movw	r30, r24
    c638:	80 81       	ld	r24, Z
    c63a:	8a 33       	cpi	r24, 0x3A	; 58
    c63c:	08 f0       	brcs	.+2      	; 0xc640 <Terminal+0x24ea>
    c63e:	a5 c0       	rjmp	.+330    	; 0xc78a <Terminal+0x2634>
					flOffsetCond1 = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    c640:	80 91 2a 06 	lds	r24, 0x062A
    c644:	90 91 2b 06 	lds	r25, 0x062B
    c648:	8f 57       	subi	r24, 0x7F	; 127
    c64a:	9d 4f       	sbci	r25, 0xFD	; 253
    c64c:	68 ec       	ldi	r22, 0xC8	; 200
    c64e:	70 e0       	ldi	r23, 0x00	; 0
    c650:	0e 94 5e 80 	call	0x100bc	; 0x100bc <From_String_to_Float>
    c654:	dc 01       	movw	r26, r24
    c656:	cb 01       	movw	r24, r22
    c658:	80 93 f8 04 	sts	0x04F8, r24
    c65c:	90 93 f9 04 	sts	0x04F9, r25
    c660:	a0 93 fa 04 	sts	0x04FA, r26
    c664:	b0 93 fb 04 	sts	0x04FB, r27

					Float_a_Eeprom(&flOffsetCond1_Eeprom, &flOffsetCond1);
    c668:	68 ef       	ldi	r22, 0xF8	; 248
    c66a:	74 e0       	ldi	r23, 0x04	; 4
    c66c:	80 ec       	ldi	r24, 0xC0	; 192
    c66e:	94 e0       	ldi	r25, 0x04	; 4
    c670:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond1_Eeprom_BK, &flOffsetCond1);
    c674:	68 ef       	ldi	r22, 0xF8	; 248
    c676:	74 e0       	ldi	r23, 0x04	; 4
    c678:	86 ed       	ldi	r24, 0xD6	; 214
    c67a:	94 e0       	ldi	r25, 0x04	; 4
    c67c:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    c680:	82 e0       	ldi	r24, 0x02	; 2
    c682:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_Cond_1);
    c686:	84 e9       	ldi	r24, 0x94	; 148
    c688:	96 e0       	ldi	r25, 0x06	; 6
    c68a:	89 2f       	mov	r24, r25
    c68c:	8f 93       	push	r24
    c68e:	84 e9       	ldi	r24, 0x94	; 148
    c690:	96 e0       	ldi	r25, 0x06	; 6
    c692:	8f 93       	push	r24
    c694:	87 ef       	ldi	r24, 0xF7	; 247
    c696:	91 e0       	ldi	r25, 0x01	; 1
    c698:	89 2f       	mov	r24, r25
    c69a:	8f 93       	push	r24
    c69c:	87 ef       	ldi	r24, 0xF7	; 247
    c69e:	91 e0       	ldi	r25, 0x01	; 1
    c6a0:	8f 93       	push	r24
    c6a2:	81 e8       	ldi	r24, 0x81	; 129
    c6a4:	92 e0       	ldi	r25, 0x02	; 2
    c6a6:	89 2f       	mov	r24, r25
    c6a8:	8f 93       	push	r24
    c6aa:	81 e8       	ldi	r24, 0x81	; 129
    c6ac:	92 e0       	ldi	r25, 0x02	; 2
    c6ae:	8f 93       	push	r24
    c6b0:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    c6b4:	0f 90       	pop	r0
    c6b6:	0f 90       	pop	r0
    c6b8:	0f 90       	pop	r0
    c6ba:	0f 90       	pop	r0
    c6bc:	0f 90       	pop	r0
    c6be:	0f 90       	pop	r0
    c6c0:	90 93 2b 06 	sts	0x062B, r25
    c6c4:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond1auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    c6c8:	80 91 2a 06 	lds	r24, 0x062A
    c6cc:	90 91 2b 06 	lds	r25, 0x062B
    c6d0:	9c 01       	movw	r18, r24
    c6d2:	2f 57       	subi	r18, 0x7F	; 127
    c6d4:	3d 4f       	sbci	r19, 0xFD	; 253
    c6d6:	80 91 0d 05 	lds	r24, 0x050D
    c6da:	90 91 0e 05 	lds	r25, 0x050E
    c6de:	a0 91 0f 05 	lds	r26, 0x050F
    c6e2:	b0 91 10 05 	lds	r27, 0x0510
    c6e6:	89 01       	movw	r16, r18
    c6e8:	24 e0       	ldi	r18, 0x04	; 4
    c6ea:	47 e0       	ldi	r20, 0x07	; 7
    c6ec:	bc 01       	movw	r22, r24
    c6ee:	cd 01       	movw	r24, r26
    c6f0:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    c6f4:	80 91 2a 06 	lds	r24, 0x062A
    c6f8:	90 91 2b 06 	lds	r25, 0x062B
    c6fc:	07 96       	adiw	r24, 0x07	; 7
    c6fe:	90 93 2b 06 	sts	0x062B, r25
    c702:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    c706:	80 91 2a 06 	lds	r24, 0x062A
    c70a:	90 91 2b 06 	lds	r25, 0x062B
    c70e:	8f 57       	subi	r24, 0x7F	; 127
    c710:	9d 4f       	sbci	r25, 0xFD	; 253
    c712:	27 e9       	ldi	r18, 0x97	; 151
    c714:	37 e0       	ldi	r19, 0x07	; 7
    c716:	23 2f       	mov	r18, r19
    c718:	2f 93       	push	r18
    c71a:	27 e9       	ldi	r18, 0x97	; 151
    c71c:	37 e0       	ldi	r19, 0x07	; 7
    c71e:	2f 93       	push	r18
    c720:	2c ef       	ldi	r18, 0xFC	; 252
    c722:	31 e0       	ldi	r19, 0x01	; 1
    c724:	23 2f       	mov	r18, r19
    c726:	2f 93       	push	r18
    c728:	2c ef       	ldi	r18, 0xFC	; 252
    c72a:	31 e0       	ldi	r19, 0x01	; 1
    c72c:	2f 93       	push	r18
    c72e:	29 2f       	mov	r18, r25
    c730:	2f 93       	push	r18
    c732:	8f 93       	push	r24
    c734:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    c738:	0f 90       	pop	r0
    c73a:	0f 90       	pop	r0
    c73c:	0f 90       	pop	r0
    c73e:	0f 90       	pop	r0
    c740:	0f 90       	pop	r0
    c742:	0f 90       	pop	r0
    c744:	9c 01       	movw	r18, r24
    c746:	80 91 2a 06 	lds	r24, 0x062A
    c74a:	90 91 2b 06 	lds	r25, 0x062B
    c74e:	82 0f       	add	r24, r18
    c750:	93 1f       	adc	r25, r19
    c752:	90 93 2b 06 	sts	0x062B, r25
    c756:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond1, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    c75a:	80 91 2a 06 	lds	r24, 0x062A
    c75e:	90 91 2b 06 	lds	r25, 0x062B
    c762:	9c 01       	movw	r18, r24
    c764:	2f 57       	subi	r18, 0x7F	; 127
    c766:	3d 4f       	sbci	r19, 0xFD	; 253
    c768:	80 91 f8 04 	lds	r24, 0x04F8
    c76c:	90 91 f9 04 	lds	r25, 0x04F9
    c770:	a0 91 fa 04 	lds	r26, 0x04FA
    c774:	b0 91 fb 04 	lds	r27, 0x04FB
    c778:	89 01       	movw	r16, r18
    c77a:	22 e0       	ldi	r18, 0x02	; 2
    c77c:	45 e0       	ldi	r20, 0x05	; 5
    c77e:	bc 01       	movw	r22, r24
    c780:	cd 01       	movw	r24, r26
    c782:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    c786:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    c78a:	80 91 2a 06 	lds	r24, 0x062A
    c78e:	90 91 2b 06 	lds	r25, 0x062B
    c792:	8f 57       	subi	r24, 0x7F	; 127
    c794:	9d 4f       	sbci	r25, 0xFD	; 253
    c796:	bc 01       	movw	r22, r24
    c798:	80 ee       	ldi	r24, 0xE0	; 224
    c79a:	95 e0       	ldi	r25, 0x05	; 5
    c79c:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    c7a0:	89 2b       	or	r24, r25
    c7a2:	09 f4       	brne	.+2      	; 0xc7a6 <Terminal+0x2650>
    c7a4:	ea c0       	rjmp	.+468    	; 0xc97a <Terminal+0x2824>
					if (uRangoCond1 == COND_20_2500_G){
    c7a6:	80 91 e9 04 	lds	r24, 0x04E9
    c7aa:	90 91 ea 04 	lds	r25, 0x04EA
    c7ae:	01 97       	sbiw	r24, 0x01	; 1
    c7b0:	49 f4       	brne	.+18     	; 0xc7c4 <Terminal+0x266e>
						flOffsetCond1 = DEFAULT_COND202500G_OFFSET;
    c7b2:	10 92 f8 04 	sts	0x04F8, r1
    c7b6:	10 92 f9 04 	sts	0x04F9, r1
    c7ba:	10 92 fa 04 	sts	0x04FA, r1
    c7be:	10 92 fb 04 	sts	0x04FB, r1
    c7c2:	4a c0       	rjmp	.+148    	; 0xc858 <Terminal+0x2702>
					}
					else if (uRangoCond1 == COND_0_20_G){
    c7c4:	80 91 e9 04 	lds	r24, 0x04E9
    c7c8:	90 91 ea 04 	lds	r25, 0x04EA
    c7cc:	02 97       	sbiw	r24, 0x02	; 2
    c7ce:	49 f4       	brne	.+18     	; 0xc7e2 <Terminal+0x268c>
						flOffsetCond1 = DEFAULT_COND020G_OFFSET;
    c7d0:	10 92 f8 04 	sts	0x04F8, r1
    c7d4:	10 92 f9 04 	sts	0x04F9, r1
    c7d8:	10 92 fa 04 	sts	0x04FA, r1
    c7dc:	10 92 fb 04 	sts	0x04FB, r1
    c7e0:	3b c0       	rjmp	.+118    	; 0xc858 <Terminal+0x2702>
					}
					else if (uRangoCond1 == COND_2_200_G){
    c7e2:	80 91 e9 04 	lds	r24, 0x04E9
    c7e6:	90 91 ea 04 	lds	r25, 0x04EA
    c7ea:	03 97       	sbiw	r24, 0x03	; 3
    c7ec:	49 f4       	brne	.+18     	; 0xc800 <Terminal+0x26aa>
						flOffsetCond1 = DEFAULT_COND2200G_OFFSET;
    c7ee:	10 92 f8 04 	sts	0x04F8, r1
    c7f2:	10 92 f9 04 	sts	0x04F9, r1
    c7f6:	10 92 fa 04 	sts	0x04FA, r1
    c7fa:	10 92 fb 04 	sts	0x04FB, r1
    c7fe:	2c c0       	rjmp	.+88     	; 0xc858 <Terminal+0x2702>
					}
					else if (uRangoCond1 == COND_20_2500_C){
    c800:	80 91 e9 04 	lds	r24, 0x04E9
    c804:	90 91 ea 04 	lds	r25, 0x04EA
    c808:	04 97       	sbiw	r24, 0x04	; 4
    c80a:	49 f4       	brne	.+18     	; 0xc81e <Terminal+0x26c8>
						flOffsetCond1 = DEFAULT_COND202500C_OFFSET;
    c80c:	10 92 f8 04 	sts	0x04F8, r1
    c810:	10 92 f9 04 	sts	0x04F9, r1
    c814:	10 92 fa 04 	sts	0x04FA, r1
    c818:	10 92 fb 04 	sts	0x04FB, r1
    c81c:	1d c0       	rjmp	.+58     	; 0xc858 <Terminal+0x2702>
					}
					else if (uRangoCond1 == COND_0_20_C){
    c81e:	80 91 e9 04 	lds	r24, 0x04E9
    c822:	90 91 ea 04 	lds	r25, 0x04EA
    c826:	05 97       	sbiw	r24, 0x05	; 5
    c828:	49 f4       	brne	.+18     	; 0xc83c <Terminal+0x26e6>
						flOffsetCond1 = DEFAULT_COND020C_OFFSET;
    c82a:	10 92 f8 04 	sts	0x04F8, r1
    c82e:	10 92 f9 04 	sts	0x04F9, r1
    c832:	10 92 fa 04 	sts	0x04FA, r1
    c836:	10 92 fb 04 	sts	0x04FB, r1
    c83a:	0e c0       	rjmp	.+28     	; 0xc858 <Terminal+0x2702>
					}
					else if (uRangoCond1 == COND_2_200_C){
    c83c:	80 91 e9 04 	lds	r24, 0x04E9
    c840:	90 91 ea 04 	lds	r25, 0x04EA
    c844:	06 97       	sbiw	r24, 0x06	; 6
    c846:	41 f4       	brne	.+16     	; 0xc858 <Terminal+0x2702>
						flOffsetCond1 = DEFAULT_COND2200C_OFFSET;
    c848:	10 92 f8 04 	sts	0x04F8, r1
    c84c:	10 92 f9 04 	sts	0x04F9, r1
    c850:	10 92 fa 04 	sts	0x04FA, r1
    c854:	10 92 fb 04 	sts	0x04FB, r1
					}

					Float_a_Eeprom(&flOffsetCond1_Eeprom, &flOffsetCond1);
    c858:	68 ef       	ldi	r22, 0xF8	; 248
    c85a:	74 e0       	ldi	r23, 0x04	; 4
    c85c:	80 ec       	ldi	r24, 0xC0	; 192
    c85e:	94 e0       	ldi	r25, 0x04	; 4
    c860:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond1_Eeprom_BK, &flOffsetCond1);
    c864:	68 ef       	ldi	r22, 0xF8	; 248
    c866:	74 e0       	ldi	r23, 0x04	; 4
    c868:	86 ed       	ldi	r24, 0xD6	; 214
    c86a:	94 e0       	ldi	r25, 0x04	; 4
    c86c:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    c870:	82 e0       	ldi	r24, 0x02	; 2
    c872:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_Cond_1);
    c876:	84 e9       	ldi	r24, 0x94	; 148
    c878:	96 e0       	ldi	r25, 0x06	; 6
    c87a:	89 2f       	mov	r24, r25
    c87c:	8f 93       	push	r24
    c87e:	84 e9       	ldi	r24, 0x94	; 148
    c880:	96 e0       	ldi	r25, 0x06	; 6
    c882:	8f 93       	push	r24
    c884:	87 ef       	ldi	r24, 0xF7	; 247
    c886:	91 e0       	ldi	r25, 0x01	; 1
    c888:	89 2f       	mov	r24, r25
    c88a:	8f 93       	push	r24
    c88c:	87 ef       	ldi	r24, 0xF7	; 247
    c88e:	91 e0       	ldi	r25, 0x01	; 1
    c890:	8f 93       	push	r24
    c892:	81 e8       	ldi	r24, 0x81	; 129
    c894:	92 e0       	ldi	r25, 0x02	; 2
    c896:	89 2f       	mov	r24, r25
    c898:	8f 93       	push	r24
    c89a:	81 e8       	ldi	r24, 0x81	; 129
    c89c:	92 e0       	ldi	r25, 0x02	; 2
    c89e:	8f 93       	push	r24
    c8a0:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    c8a4:	0f 90       	pop	r0
    c8a6:	0f 90       	pop	r0
    c8a8:	0f 90       	pop	r0
    c8aa:	0f 90       	pop	r0
    c8ac:	0f 90       	pop	r0
    c8ae:	0f 90       	pop	r0
    c8b0:	90 93 2b 06 	sts	0x062B, r25
    c8b4:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond1auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    c8b8:	80 91 2a 06 	lds	r24, 0x062A
    c8bc:	90 91 2b 06 	lds	r25, 0x062B
    c8c0:	9c 01       	movw	r18, r24
    c8c2:	2f 57       	subi	r18, 0x7F	; 127
    c8c4:	3d 4f       	sbci	r19, 0xFD	; 253
    c8c6:	80 91 0d 05 	lds	r24, 0x050D
    c8ca:	90 91 0e 05 	lds	r25, 0x050E
    c8ce:	a0 91 0f 05 	lds	r26, 0x050F
    c8d2:	b0 91 10 05 	lds	r27, 0x0510
    c8d6:	89 01       	movw	r16, r18
    c8d8:	24 e0       	ldi	r18, 0x04	; 4
    c8da:	47 e0       	ldi	r20, 0x07	; 7
    c8dc:	bc 01       	movw	r22, r24
    c8de:	cd 01       	movw	r24, r26
    c8e0:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    c8e4:	80 91 2a 06 	lds	r24, 0x062A
    c8e8:	90 91 2b 06 	lds	r25, 0x062B
    c8ec:	07 96       	adiw	r24, 0x07	; 7
    c8ee:	90 93 2b 06 	sts	0x062B, r25
    c8f2:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    c8f6:	80 91 2a 06 	lds	r24, 0x062A
    c8fa:	90 91 2b 06 	lds	r25, 0x062B
    c8fe:	8f 57       	subi	r24, 0x7F	; 127
    c900:	9d 4f       	sbci	r25, 0xFD	; 253
    c902:	27 e9       	ldi	r18, 0x97	; 151
    c904:	37 e0       	ldi	r19, 0x07	; 7
    c906:	23 2f       	mov	r18, r19
    c908:	2f 93       	push	r18
    c90a:	27 e9       	ldi	r18, 0x97	; 151
    c90c:	37 e0       	ldi	r19, 0x07	; 7
    c90e:	2f 93       	push	r18
    c910:	2c ef       	ldi	r18, 0xFC	; 252
    c912:	31 e0       	ldi	r19, 0x01	; 1
    c914:	23 2f       	mov	r18, r19
    c916:	2f 93       	push	r18
    c918:	2c ef       	ldi	r18, 0xFC	; 252
    c91a:	31 e0       	ldi	r19, 0x01	; 1
    c91c:	2f 93       	push	r18
    c91e:	29 2f       	mov	r18, r25
    c920:	2f 93       	push	r18
    c922:	8f 93       	push	r24
    c924:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    c928:	0f 90       	pop	r0
    c92a:	0f 90       	pop	r0
    c92c:	0f 90       	pop	r0
    c92e:	0f 90       	pop	r0
    c930:	0f 90       	pop	r0
    c932:	0f 90       	pop	r0
    c934:	9c 01       	movw	r18, r24
    c936:	80 91 2a 06 	lds	r24, 0x062A
    c93a:	90 91 2b 06 	lds	r25, 0x062B
    c93e:	82 0f       	add	r24, r18
    c940:	93 1f       	adc	r25, r19
    c942:	90 93 2b 06 	sts	0x062B, r25
    c946:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond1, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    c94a:	80 91 2a 06 	lds	r24, 0x062A
    c94e:	90 91 2b 06 	lds	r25, 0x062B
    c952:	9c 01       	movw	r18, r24
    c954:	2f 57       	subi	r18, 0x7F	; 127
    c956:	3d 4f       	sbci	r19, 0xFD	; 253
    c958:	80 91 f8 04 	lds	r24, 0x04F8
    c95c:	90 91 f9 04 	lds	r25, 0x04F9
    c960:	a0 91 fa 04 	lds	r26, 0x04FA
    c964:	b0 91 fb 04 	lds	r27, 0x04FB
    c968:	89 01       	movw	r16, r18
    c96a:	22 e0       	ldi	r18, 0x02	; 2
    c96c:	45 e0       	ldi	r20, 0x05	; 5
    c96e:	bc 01       	movw	r22, r24
    c970:	cd 01       	movw	r24, r26
    c972:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    c976:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_Cond_1);
    c97a:	84 e9       	ldi	r24, 0x94	; 148
    c97c:	96 e0       	ldi	r25, 0x06	; 6
    c97e:	89 2f       	mov	r24, r25
    c980:	8f 93       	push	r24
    c982:	84 e9       	ldi	r24, 0x94	; 148
    c984:	96 e0       	ldi	r25, 0x06	; 6
    c986:	8f 93       	push	r24
    c988:	87 ef       	ldi	r24, 0xF7	; 247
    c98a:	91 e0       	ldi	r25, 0x01	; 1
    c98c:	89 2f       	mov	r24, r25
    c98e:	8f 93       	push	r24
    c990:	87 ef       	ldi	r24, 0xF7	; 247
    c992:	91 e0       	ldi	r25, 0x01	; 1
    c994:	8f 93       	push	r24
    c996:	81 e8       	ldi	r24, 0x81	; 129
    c998:	92 e0       	ldi	r25, 0x02	; 2
    c99a:	89 2f       	mov	r24, r25
    c99c:	8f 93       	push	r24
    c99e:	81 e8       	ldi	r24, 0x81	; 129
    c9a0:	92 e0       	ldi	r25, 0x02	; 2
    c9a2:	8f 93       	push	r24
    c9a4:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    c9a8:	0f 90       	pop	r0
    c9aa:	0f 90       	pop	r0
    c9ac:	0f 90       	pop	r0
    c9ae:	0f 90       	pop	r0
    c9b0:	0f 90       	pop	r0
    c9b2:	0f 90       	pop	r0
    c9b4:	90 93 2b 06 	sts	0x062B, r25
    c9b8:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond1auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    c9bc:	80 91 2a 06 	lds	r24, 0x062A
    c9c0:	90 91 2b 06 	lds	r25, 0x062B
    c9c4:	9c 01       	movw	r18, r24
    c9c6:	2f 57       	subi	r18, 0x7F	; 127
    c9c8:	3d 4f       	sbci	r19, 0xFD	; 253
    c9ca:	80 91 0d 05 	lds	r24, 0x050D
    c9ce:	90 91 0e 05 	lds	r25, 0x050E
    c9d2:	a0 91 0f 05 	lds	r26, 0x050F
    c9d6:	b0 91 10 05 	lds	r27, 0x0510
    c9da:	89 01       	movw	r16, r18
    c9dc:	24 e0       	ldi	r18, 0x04	; 4
    c9de:	47 e0       	ldi	r20, 0x07	; 7
    c9e0:	bc 01       	movw	r22, r24
    c9e2:	cd 01       	movw	r24, r26
    c9e4:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    c9e8:	80 91 2a 06 	lds	r24, 0x062A
    c9ec:	90 91 2b 06 	lds	r25, 0x062B
    c9f0:	07 96       	adiw	r24, 0x07	; 7
    c9f2:	90 93 2b 06 	sts	0x062B, r25
    c9f6:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    c9fa:	80 91 2a 06 	lds	r24, 0x062A
    c9fe:	90 91 2b 06 	lds	r25, 0x062B
    ca02:	8f 57       	subi	r24, 0x7F	; 127
    ca04:	9d 4f       	sbci	r25, 0xFD	; 253
    ca06:	27 e9       	ldi	r18, 0x97	; 151
    ca08:	37 e0       	ldi	r19, 0x07	; 7
    ca0a:	23 2f       	mov	r18, r19
    ca0c:	2f 93       	push	r18
    ca0e:	27 e9       	ldi	r18, 0x97	; 151
    ca10:	37 e0       	ldi	r19, 0x07	; 7
    ca12:	2f 93       	push	r18
    ca14:	2c ef       	ldi	r18, 0xFC	; 252
    ca16:	31 e0       	ldi	r19, 0x01	; 1
    ca18:	23 2f       	mov	r18, r19
    ca1a:	2f 93       	push	r18
    ca1c:	2c ef       	ldi	r18, 0xFC	; 252
    ca1e:	31 e0       	ldi	r19, 0x01	; 1
    ca20:	2f 93       	push	r18
    ca22:	29 2f       	mov	r18, r25
    ca24:	2f 93       	push	r18
    ca26:	8f 93       	push	r24
    ca28:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    ca2c:	0f 90       	pop	r0
    ca2e:	0f 90       	pop	r0
    ca30:	0f 90       	pop	r0
    ca32:	0f 90       	pop	r0
    ca34:	0f 90       	pop	r0
    ca36:	0f 90       	pop	r0
    ca38:	9c 01       	movw	r18, r24
    ca3a:	80 91 2a 06 	lds	r24, 0x062A
    ca3e:	90 91 2b 06 	lds	r25, 0x062B
    ca42:	82 0f       	add	r24, r18
    ca44:	93 1f       	adc	r25, r19
    ca46:	90 93 2b 06 	sts	0x062B, r25
    ca4a:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond1, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    ca4e:	80 91 2a 06 	lds	r24, 0x062A
    ca52:	90 91 2b 06 	lds	r25, 0x062B
    ca56:	9c 01       	movw	r18, r24
    ca58:	2f 57       	subi	r18, 0x7F	; 127
    ca5a:	3d 4f       	sbci	r19, 0xFD	; 253
    ca5c:	80 91 f8 04 	lds	r24, 0x04F8
    ca60:	90 91 f9 04 	lds	r25, 0x04F9
    ca64:	a0 91 fa 04 	lds	r26, 0x04FA
    ca68:	b0 91 fb 04 	lds	r27, 0x04FB
    ca6c:	89 01       	movw	r16, r18
    ca6e:	22 e0       	ldi	r18, 0x02	; 2
    ca70:	45 e0       	ldi	r20, 0x05	; 5
    ca72:	bc 01       	movw	r22, r24
    ca74:	cd 01       	movw	r24, r26
    ca76:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    ca7a:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = OFFSET COND 2 xx.xx\0
			else if (Detectar_Comando_Buffer_P(Comando_Offset_2, chBufferRx_USART0)) {
    ca7e:	61 e8       	ldi	r22, 0x81	; 129
    ca80:	72 e0       	ldi	r23, 0x02	; 2
    ca82:	89 ef       	ldi	r24, 0xF9	; 249
    ca84:	96 e0       	ldi	r25, 0x06	; 6
    ca86:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    ca8a:	89 2b       	or	r24, r25
    ca8c:	09 f4       	brne	.+2      	; 0xca90 <Terminal+0x293a>
    ca8e:	35 c2       	rjmp	.+1130   	; 0xcefa <Terminal+0x2da4>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    ca90:	80 91 2a 06 	lds	r24, 0x062A
    ca94:	90 91 2b 06 	lds	r25, 0x062B
    ca98:	8f 57       	subi	r24, 0x7F	; 127
    ca9a:	9d 4f       	sbci	r25, 0xFD	; 253
    ca9c:	fc 01       	movw	r30, r24
    ca9e:	80 81       	ld	r24, Z
    caa0:	80 33       	cpi	r24, 0x30	; 48
    caa2:	08 f4       	brcc	.+2      	; 0xcaa6 <Terminal+0x2950>
    caa4:	b0 c0       	rjmp	.+352    	; 0xcc06 <Terminal+0x2ab0>
    caa6:	80 91 2a 06 	lds	r24, 0x062A
    caaa:	90 91 2b 06 	lds	r25, 0x062B
    caae:	8f 57       	subi	r24, 0x7F	; 127
    cab0:	9d 4f       	sbci	r25, 0xFD	; 253
    cab2:	fc 01       	movw	r30, r24
    cab4:	80 81       	ld	r24, Z
    cab6:	8a 33       	cpi	r24, 0x3A	; 58
    cab8:	08 f0       	brcs	.+2      	; 0xcabc <Terminal+0x2966>
    caba:	a5 c0       	rjmp	.+330    	; 0xcc06 <Terminal+0x2ab0>
					flOffsetCond2 = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    cabc:	80 91 2a 06 	lds	r24, 0x062A
    cac0:	90 91 2b 06 	lds	r25, 0x062B
    cac4:	8f 57       	subi	r24, 0x7F	; 127
    cac6:	9d 4f       	sbci	r25, 0xFD	; 253
    cac8:	68 ec       	ldi	r22, 0xC8	; 200
    caca:	70 e0       	ldi	r23, 0x00	; 0
    cacc:	0e 94 5e 80 	call	0x100bc	; 0x100bc <From_String_to_Float>
    cad0:	dc 01       	movw	r26, r24
    cad2:	cb 01       	movw	r24, r22
    cad4:	80 93 03 05 	sts	0x0503, r24
    cad8:	90 93 04 05 	sts	0x0504, r25
    cadc:	a0 93 05 05 	sts	0x0505, r26
    cae0:	b0 93 06 05 	sts	0x0506, r27

					Float_a_Eeprom(&flOffsetCond2_Eeprom, &flOffsetCond2);
    cae4:	63 e0       	ldi	r22, 0x03	; 3
    cae6:	75 e0       	ldi	r23, 0x05	; 5
    cae8:	80 ed       	ldi	r24, 0xD0	; 208
    caea:	94 e0       	ldi	r25, 0x04	; 4
    caec:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond2_Eeprom_BK, &flOffsetCond2);
    caf0:	63 e0       	ldi	r22, 0x03	; 3
    caf2:	75 e0       	ldi	r23, 0x05	; 5
    caf4:	86 e7       	ldi	r24, 0x76	; 118
    caf6:	94 e0       	ldi	r25, 0x04	; 4
    caf8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    cafc:	82 e0       	ldi	r24, 0x02	; 2
    cafe:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_Cond_2);
    cb02:	80 ea       	ldi	r24, 0xA0	; 160
    cb04:	96 e0       	ldi	r25, 0x06	; 6
    cb06:	89 2f       	mov	r24, r25
    cb08:	8f 93       	push	r24
    cb0a:	80 ea       	ldi	r24, 0xA0	; 160
    cb0c:	96 e0       	ldi	r25, 0x06	; 6
    cb0e:	8f 93       	push	r24
    cb10:	87 ef       	ldi	r24, 0xF7	; 247
    cb12:	91 e0       	ldi	r25, 0x01	; 1
    cb14:	89 2f       	mov	r24, r25
    cb16:	8f 93       	push	r24
    cb18:	87 ef       	ldi	r24, 0xF7	; 247
    cb1a:	91 e0       	ldi	r25, 0x01	; 1
    cb1c:	8f 93       	push	r24
    cb1e:	81 e8       	ldi	r24, 0x81	; 129
    cb20:	92 e0       	ldi	r25, 0x02	; 2
    cb22:	89 2f       	mov	r24, r25
    cb24:	8f 93       	push	r24
    cb26:	81 e8       	ldi	r24, 0x81	; 129
    cb28:	92 e0       	ldi	r25, 0x02	; 2
    cb2a:	8f 93       	push	r24
    cb2c:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    cb30:	0f 90       	pop	r0
    cb32:	0f 90       	pop	r0
    cb34:	0f 90       	pop	r0
    cb36:	0f 90       	pop	r0
    cb38:	0f 90       	pop	r0
    cb3a:	0f 90       	pop	r0
    cb3c:	90 93 2b 06 	sts	0x062B, r25
    cb40:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond2auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    cb44:	80 91 2a 06 	lds	r24, 0x062A
    cb48:	90 91 2b 06 	lds	r25, 0x062B
    cb4c:	9c 01       	movw	r18, r24
    cb4e:	2f 57       	subi	r18, 0x7F	; 127
    cb50:	3d 4f       	sbci	r19, 0xFD	; 253
    cb52:	80 91 93 05 	lds	r24, 0x0593
    cb56:	90 91 94 05 	lds	r25, 0x0594
    cb5a:	a0 91 95 05 	lds	r26, 0x0595
    cb5e:	b0 91 96 05 	lds	r27, 0x0596
    cb62:	89 01       	movw	r16, r18
    cb64:	24 e0       	ldi	r18, 0x04	; 4
    cb66:	47 e0       	ldi	r20, 0x07	; 7
    cb68:	bc 01       	movw	r22, r24
    cb6a:	cd 01       	movw	r24, r26
    cb6c:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    cb70:	80 91 2a 06 	lds	r24, 0x062A
    cb74:	90 91 2b 06 	lds	r25, 0x062B
    cb78:	07 96       	adiw	r24, 0x07	; 7
    cb7a:	90 93 2b 06 	sts	0x062B, r25
    cb7e:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    cb82:	80 91 2a 06 	lds	r24, 0x062A
    cb86:	90 91 2b 06 	lds	r25, 0x062B
    cb8a:	8f 57       	subi	r24, 0x7F	; 127
    cb8c:	9d 4f       	sbci	r25, 0xFD	; 253
    cb8e:	27 e9       	ldi	r18, 0x97	; 151
    cb90:	37 e0       	ldi	r19, 0x07	; 7
    cb92:	23 2f       	mov	r18, r19
    cb94:	2f 93       	push	r18
    cb96:	27 e9       	ldi	r18, 0x97	; 151
    cb98:	37 e0       	ldi	r19, 0x07	; 7
    cb9a:	2f 93       	push	r18
    cb9c:	2c ef       	ldi	r18, 0xFC	; 252
    cb9e:	31 e0       	ldi	r19, 0x01	; 1
    cba0:	23 2f       	mov	r18, r19
    cba2:	2f 93       	push	r18
    cba4:	2c ef       	ldi	r18, 0xFC	; 252
    cba6:	31 e0       	ldi	r19, 0x01	; 1
    cba8:	2f 93       	push	r18
    cbaa:	29 2f       	mov	r18, r25
    cbac:	2f 93       	push	r18
    cbae:	8f 93       	push	r24
    cbb0:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    cbb4:	0f 90       	pop	r0
    cbb6:	0f 90       	pop	r0
    cbb8:	0f 90       	pop	r0
    cbba:	0f 90       	pop	r0
    cbbc:	0f 90       	pop	r0
    cbbe:	0f 90       	pop	r0
    cbc0:	9c 01       	movw	r18, r24
    cbc2:	80 91 2a 06 	lds	r24, 0x062A
    cbc6:	90 91 2b 06 	lds	r25, 0x062B
    cbca:	82 0f       	add	r24, r18
    cbcc:	93 1f       	adc	r25, r19
    cbce:	90 93 2b 06 	sts	0x062B, r25
    cbd2:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond2, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    cbd6:	80 91 2a 06 	lds	r24, 0x062A
    cbda:	90 91 2b 06 	lds	r25, 0x062B
    cbde:	9c 01       	movw	r18, r24
    cbe0:	2f 57       	subi	r18, 0x7F	; 127
    cbe2:	3d 4f       	sbci	r19, 0xFD	; 253
    cbe4:	80 91 03 05 	lds	r24, 0x0503
    cbe8:	90 91 04 05 	lds	r25, 0x0504
    cbec:	a0 91 05 05 	lds	r26, 0x0505
    cbf0:	b0 91 06 05 	lds	r27, 0x0506
    cbf4:	89 01       	movw	r16, r18
    cbf6:	22 e0       	ldi	r18, 0x02	; 2
    cbf8:	45 e0       	ldi	r20, 0x05	; 5
    cbfa:	bc 01       	movw	r22, r24
    cbfc:	cd 01       	movw	r24, r26
    cbfe:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    cc02:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    cc06:	80 91 2a 06 	lds	r24, 0x062A
    cc0a:	90 91 2b 06 	lds	r25, 0x062B
    cc0e:	8f 57       	subi	r24, 0x7F	; 127
    cc10:	9d 4f       	sbci	r25, 0xFD	; 253
    cc12:	bc 01       	movw	r22, r24
    cc14:	80 ee       	ldi	r24, 0xE0	; 224
    cc16:	95 e0       	ldi	r25, 0x05	; 5
    cc18:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    cc1c:	89 2b       	or	r24, r25
    cc1e:	09 f4       	brne	.+2      	; 0xcc22 <Terminal+0x2acc>
    cc20:	ea c0       	rjmp	.+468    	; 0xcdf6 <Terminal+0x2ca0>
					if (uRangoCond2 == COND_20_2500_G){
    cc22:	80 91 1d 06 	lds	r24, 0x061D
    cc26:	90 91 1e 06 	lds	r25, 0x061E
    cc2a:	01 97       	sbiw	r24, 0x01	; 1
    cc2c:	49 f4       	brne	.+18     	; 0xcc40 <Terminal+0x2aea>
						flOffsetCond2 = DEFAULT_COND202500G_OFFSET;
    cc2e:	10 92 03 05 	sts	0x0503, r1
    cc32:	10 92 04 05 	sts	0x0504, r1
    cc36:	10 92 05 05 	sts	0x0505, r1
    cc3a:	10 92 06 05 	sts	0x0506, r1
    cc3e:	4a c0       	rjmp	.+148    	; 0xccd4 <Terminal+0x2b7e>
					}
					else if (uRangoCond2 == COND_0_20_G){
    cc40:	80 91 1d 06 	lds	r24, 0x061D
    cc44:	90 91 1e 06 	lds	r25, 0x061E
    cc48:	02 97       	sbiw	r24, 0x02	; 2
    cc4a:	49 f4       	brne	.+18     	; 0xcc5e <Terminal+0x2b08>
						flOffsetCond2 = DEFAULT_COND020G_OFFSET;
    cc4c:	10 92 03 05 	sts	0x0503, r1
    cc50:	10 92 04 05 	sts	0x0504, r1
    cc54:	10 92 05 05 	sts	0x0505, r1
    cc58:	10 92 06 05 	sts	0x0506, r1
    cc5c:	3b c0       	rjmp	.+118    	; 0xccd4 <Terminal+0x2b7e>
					}
					else if (uRangoCond2 == COND_2_200_G){
    cc5e:	80 91 1d 06 	lds	r24, 0x061D
    cc62:	90 91 1e 06 	lds	r25, 0x061E
    cc66:	03 97       	sbiw	r24, 0x03	; 3
    cc68:	49 f4       	brne	.+18     	; 0xcc7c <Terminal+0x2b26>
						flOffsetCond2 = DEFAULT_COND2200G_OFFSET;
    cc6a:	10 92 03 05 	sts	0x0503, r1
    cc6e:	10 92 04 05 	sts	0x0504, r1
    cc72:	10 92 05 05 	sts	0x0505, r1
    cc76:	10 92 06 05 	sts	0x0506, r1
    cc7a:	2c c0       	rjmp	.+88     	; 0xccd4 <Terminal+0x2b7e>
					}
					else if (uRangoCond2 == COND_20_2500_C){
    cc7c:	80 91 1d 06 	lds	r24, 0x061D
    cc80:	90 91 1e 06 	lds	r25, 0x061E
    cc84:	04 97       	sbiw	r24, 0x04	; 4
    cc86:	49 f4       	brne	.+18     	; 0xcc9a <Terminal+0x2b44>
						flOffsetCond2 = DEFAULT_COND202500C_OFFSET;
    cc88:	10 92 03 05 	sts	0x0503, r1
    cc8c:	10 92 04 05 	sts	0x0504, r1
    cc90:	10 92 05 05 	sts	0x0505, r1
    cc94:	10 92 06 05 	sts	0x0506, r1
    cc98:	1d c0       	rjmp	.+58     	; 0xccd4 <Terminal+0x2b7e>
					}
					else if (uRangoCond2 == COND_0_20_C){
    cc9a:	80 91 1d 06 	lds	r24, 0x061D
    cc9e:	90 91 1e 06 	lds	r25, 0x061E
    cca2:	05 97       	sbiw	r24, 0x05	; 5
    cca4:	49 f4       	brne	.+18     	; 0xccb8 <Terminal+0x2b62>
						flOffsetCond2 = DEFAULT_COND020C_OFFSET;
    cca6:	10 92 03 05 	sts	0x0503, r1
    ccaa:	10 92 04 05 	sts	0x0504, r1
    ccae:	10 92 05 05 	sts	0x0505, r1
    ccb2:	10 92 06 05 	sts	0x0506, r1
    ccb6:	0e c0       	rjmp	.+28     	; 0xccd4 <Terminal+0x2b7e>
					}
					else if (uRangoCond2 == COND_2_200_C){
    ccb8:	80 91 1d 06 	lds	r24, 0x061D
    ccbc:	90 91 1e 06 	lds	r25, 0x061E
    ccc0:	06 97       	sbiw	r24, 0x06	; 6
    ccc2:	41 f4       	brne	.+16     	; 0xccd4 <Terminal+0x2b7e>
						flOffsetCond2 = DEFAULT_COND2200C_OFFSET;
    ccc4:	10 92 03 05 	sts	0x0503, r1
    ccc8:	10 92 04 05 	sts	0x0504, r1
    cccc:	10 92 05 05 	sts	0x0505, r1
    ccd0:	10 92 06 05 	sts	0x0506, r1
					}

					Float_a_Eeprom(&flOffsetCond2_Eeprom, &flOffsetCond2);
    ccd4:	63 e0       	ldi	r22, 0x03	; 3
    ccd6:	75 e0       	ldi	r23, 0x05	; 5
    ccd8:	80 ed       	ldi	r24, 0xD0	; 208
    ccda:	94 e0       	ldi	r25, 0x04	; 4
    ccdc:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flOffsetCond2_Eeprom_BK, &flOffsetCond2);
    cce0:	63 e0       	ldi	r22, 0x03	; 3
    cce2:	75 e0       	ldi	r23, 0x05	; 5
    cce4:	86 e7       	ldi	r24, 0x76	; 118
    cce6:	94 e0       	ldi	r25, 0x04	; 4
    cce8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    ccec:	82 e0       	ldi	r24, 0x02	; 2
    ccee:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_Cond_2);
    ccf2:	80 ea       	ldi	r24, 0xA0	; 160
    ccf4:	96 e0       	ldi	r25, 0x06	; 6
    ccf6:	89 2f       	mov	r24, r25
    ccf8:	8f 93       	push	r24
    ccfa:	80 ea       	ldi	r24, 0xA0	; 160
    ccfc:	96 e0       	ldi	r25, 0x06	; 6
    ccfe:	8f 93       	push	r24
    cd00:	87 ef       	ldi	r24, 0xF7	; 247
    cd02:	91 e0       	ldi	r25, 0x01	; 1
    cd04:	89 2f       	mov	r24, r25
    cd06:	8f 93       	push	r24
    cd08:	87 ef       	ldi	r24, 0xF7	; 247
    cd0a:	91 e0       	ldi	r25, 0x01	; 1
    cd0c:	8f 93       	push	r24
    cd0e:	81 e8       	ldi	r24, 0x81	; 129
    cd10:	92 e0       	ldi	r25, 0x02	; 2
    cd12:	89 2f       	mov	r24, r25
    cd14:	8f 93       	push	r24
    cd16:	81 e8       	ldi	r24, 0x81	; 129
    cd18:	92 e0       	ldi	r25, 0x02	; 2
    cd1a:	8f 93       	push	r24
    cd1c:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    cd20:	0f 90       	pop	r0
    cd22:	0f 90       	pop	r0
    cd24:	0f 90       	pop	r0
    cd26:	0f 90       	pop	r0
    cd28:	0f 90       	pop	r0
    cd2a:	0f 90       	pop	r0
    cd2c:	90 93 2b 06 	sts	0x062B, r25
    cd30:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond2auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    cd34:	80 91 2a 06 	lds	r24, 0x062A
    cd38:	90 91 2b 06 	lds	r25, 0x062B
    cd3c:	9c 01       	movw	r18, r24
    cd3e:	2f 57       	subi	r18, 0x7F	; 127
    cd40:	3d 4f       	sbci	r19, 0xFD	; 253
    cd42:	80 91 93 05 	lds	r24, 0x0593
    cd46:	90 91 94 05 	lds	r25, 0x0594
    cd4a:	a0 91 95 05 	lds	r26, 0x0595
    cd4e:	b0 91 96 05 	lds	r27, 0x0596
    cd52:	89 01       	movw	r16, r18
    cd54:	24 e0       	ldi	r18, 0x04	; 4
    cd56:	47 e0       	ldi	r20, 0x07	; 7
    cd58:	bc 01       	movw	r22, r24
    cd5a:	cd 01       	movw	r24, r26
    cd5c:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    cd60:	80 91 2a 06 	lds	r24, 0x062A
    cd64:	90 91 2b 06 	lds	r25, 0x062B
    cd68:	07 96       	adiw	r24, 0x07	; 7
    cd6a:	90 93 2b 06 	sts	0x062B, r25
    cd6e:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    cd72:	80 91 2a 06 	lds	r24, 0x062A
    cd76:	90 91 2b 06 	lds	r25, 0x062B
    cd7a:	8f 57       	subi	r24, 0x7F	; 127
    cd7c:	9d 4f       	sbci	r25, 0xFD	; 253
    cd7e:	27 e9       	ldi	r18, 0x97	; 151
    cd80:	37 e0       	ldi	r19, 0x07	; 7
    cd82:	23 2f       	mov	r18, r19
    cd84:	2f 93       	push	r18
    cd86:	27 e9       	ldi	r18, 0x97	; 151
    cd88:	37 e0       	ldi	r19, 0x07	; 7
    cd8a:	2f 93       	push	r18
    cd8c:	2c ef       	ldi	r18, 0xFC	; 252
    cd8e:	31 e0       	ldi	r19, 0x01	; 1
    cd90:	23 2f       	mov	r18, r19
    cd92:	2f 93       	push	r18
    cd94:	2c ef       	ldi	r18, 0xFC	; 252
    cd96:	31 e0       	ldi	r19, 0x01	; 1
    cd98:	2f 93       	push	r18
    cd9a:	29 2f       	mov	r18, r25
    cd9c:	2f 93       	push	r18
    cd9e:	8f 93       	push	r24
    cda0:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    cda4:	0f 90       	pop	r0
    cda6:	0f 90       	pop	r0
    cda8:	0f 90       	pop	r0
    cdaa:	0f 90       	pop	r0
    cdac:	0f 90       	pop	r0
    cdae:	0f 90       	pop	r0
    cdb0:	9c 01       	movw	r18, r24
    cdb2:	80 91 2a 06 	lds	r24, 0x062A
    cdb6:	90 91 2b 06 	lds	r25, 0x062B
    cdba:	82 0f       	add	r24, r18
    cdbc:	93 1f       	adc	r25, r19
    cdbe:	90 93 2b 06 	sts	0x062B, r25
    cdc2:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond2, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    cdc6:	80 91 2a 06 	lds	r24, 0x062A
    cdca:	90 91 2b 06 	lds	r25, 0x062B
    cdce:	9c 01       	movw	r18, r24
    cdd0:	2f 57       	subi	r18, 0x7F	; 127
    cdd2:	3d 4f       	sbci	r19, 0xFD	; 253
    cdd4:	80 91 03 05 	lds	r24, 0x0503
    cdd8:	90 91 04 05 	lds	r25, 0x0504
    cddc:	a0 91 05 05 	lds	r26, 0x0505
    cde0:	b0 91 06 05 	lds	r27, 0x0506
    cde4:	89 01       	movw	r16, r18
    cde6:	22 e0       	ldi	r18, 0x02	; 2
    cde8:	45 e0       	ldi	r20, 0x05	; 5
    cdea:	bc 01       	movw	r22, r24
    cdec:	cd 01       	movw	r24, r26
    cdee:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    cdf2:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_Cond_2);
    cdf6:	80 ea       	ldi	r24, 0xA0	; 160
    cdf8:	96 e0       	ldi	r25, 0x06	; 6
    cdfa:	89 2f       	mov	r24, r25
    cdfc:	8f 93       	push	r24
    cdfe:	80 ea       	ldi	r24, 0xA0	; 160
    ce00:	96 e0       	ldi	r25, 0x06	; 6
    ce02:	8f 93       	push	r24
    ce04:	87 ef       	ldi	r24, 0xF7	; 247
    ce06:	91 e0       	ldi	r25, 0x01	; 1
    ce08:	89 2f       	mov	r24, r25
    ce0a:	8f 93       	push	r24
    ce0c:	87 ef       	ldi	r24, 0xF7	; 247
    ce0e:	91 e0       	ldi	r25, 0x01	; 1
    ce10:	8f 93       	push	r24
    ce12:	81 e8       	ldi	r24, 0x81	; 129
    ce14:	92 e0       	ldi	r25, 0x02	; 2
    ce16:	89 2f       	mov	r24, r25
    ce18:	8f 93       	push	r24
    ce1a:	81 e8       	ldi	r24, 0x81	; 129
    ce1c:	92 e0       	ldi	r25, 0x02	; 2
    ce1e:	8f 93       	push	r24
    ce20:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    ce24:	0f 90       	pop	r0
    ce26:	0f 90       	pop	r0
    ce28:	0f 90       	pop	r0
    ce2a:	0f 90       	pop	r0
    ce2c:	0f 90       	pop	r0
    ce2e:	0f 90       	pop	r0
    ce30:	90 93 2b 06 	sts	0x062B, r25
    ce34:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond2auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    ce38:	80 91 2a 06 	lds	r24, 0x062A
    ce3c:	90 91 2b 06 	lds	r25, 0x062B
    ce40:	9c 01       	movw	r18, r24
    ce42:	2f 57       	subi	r18, 0x7F	; 127
    ce44:	3d 4f       	sbci	r19, 0xFD	; 253
    ce46:	80 91 93 05 	lds	r24, 0x0593
    ce4a:	90 91 94 05 	lds	r25, 0x0594
    ce4e:	a0 91 95 05 	lds	r26, 0x0595
    ce52:	b0 91 96 05 	lds	r27, 0x0596
    ce56:	89 01       	movw	r16, r18
    ce58:	24 e0       	ldi	r18, 0x04	; 4
    ce5a:	47 e0       	ldi	r20, 0x07	; 7
    ce5c:	bc 01       	movw	r22, r24
    ce5e:	cd 01       	movw	r24, r26
    ce60:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    ce64:	80 91 2a 06 	lds	r24, 0x062A
    ce68:	90 91 2b 06 	lds	r25, 0x062B
    ce6c:	07 96       	adiw	r24, 0x07	; 7
    ce6e:	90 93 2b 06 	sts	0x062B, r25
    ce72:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    ce76:	80 91 2a 06 	lds	r24, 0x062A
    ce7a:	90 91 2b 06 	lds	r25, 0x062B
    ce7e:	8f 57       	subi	r24, 0x7F	; 127
    ce80:	9d 4f       	sbci	r25, 0xFD	; 253
    ce82:	27 e9       	ldi	r18, 0x97	; 151
    ce84:	37 e0       	ldi	r19, 0x07	; 7
    ce86:	23 2f       	mov	r18, r19
    ce88:	2f 93       	push	r18
    ce8a:	27 e9       	ldi	r18, 0x97	; 151
    ce8c:	37 e0       	ldi	r19, 0x07	; 7
    ce8e:	2f 93       	push	r18
    ce90:	2c ef       	ldi	r18, 0xFC	; 252
    ce92:	31 e0       	ldi	r19, 0x01	; 1
    ce94:	23 2f       	mov	r18, r19
    ce96:	2f 93       	push	r18
    ce98:	2c ef       	ldi	r18, 0xFC	; 252
    ce9a:	31 e0       	ldi	r19, 0x01	; 1
    ce9c:	2f 93       	push	r18
    ce9e:	29 2f       	mov	r18, r25
    cea0:	2f 93       	push	r18
    cea2:	8f 93       	push	r24
    cea4:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    cea8:	0f 90       	pop	r0
    ceaa:	0f 90       	pop	r0
    ceac:	0f 90       	pop	r0
    ceae:	0f 90       	pop	r0
    ceb0:	0f 90       	pop	r0
    ceb2:	0f 90       	pop	r0
    ceb4:	9c 01       	movw	r18, r24
    ceb6:	80 91 2a 06 	lds	r24, 0x062A
    ceba:	90 91 2b 06 	lds	r25, 0x062B
    cebe:	82 0f       	add	r24, r18
    cec0:	93 1f       	adc	r25, r19
    cec2:	90 93 2b 06 	sts	0x062B, r25
    cec6:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond2, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    ceca:	80 91 2a 06 	lds	r24, 0x062A
    cece:	90 91 2b 06 	lds	r25, 0x062B
    ced2:	9c 01       	movw	r18, r24
    ced4:	2f 57       	subi	r18, 0x7F	; 127
    ced6:	3d 4f       	sbci	r19, 0xFD	; 253
    ced8:	80 91 03 05 	lds	r24, 0x0503
    cedc:	90 91 04 05 	lds	r25, 0x0504
    cee0:	a0 91 05 05 	lds	r26, 0x0505
    cee4:	b0 91 06 05 	lds	r27, 0x0506
    cee8:	89 01       	movw	r16, r18
    ceea:	22 e0       	ldi	r18, 0x02	; 2
    ceec:	45 e0       	ldi	r20, 0x05	; 5
    ceee:	bc 01       	movw	r22, r24
    cef0:	cd 01       	movw	r24, r26
    cef2:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    cef6:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = AUTOCAL COND 2 xx.xx\0
			else if (Detectar_Comando_Buffer_P(Comando_Autocal_Cond_2, chBufferRx_USART0)) {
    cefa:	61 e8       	ldi	r22, 0x81	; 129
    cefc:	72 e0       	ldi	r23, 0x02	; 2
    cefe:	8a ed       	ldi	r24, 0xDA	; 218
    cf00:	96 e0       	ldi	r25, 0x06	; 6
    cf02:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    cf06:	89 2b       	or	r24, r25
    cf08:	09 f4       	brne	.+2      	; 0xcf0c <Terminal+0x2db6>
    cf0a:	9c c3       	rjmp	.+1848   	; 0xd644 <Terminal+0x34ee>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    cf0c:	80 91 2a 06 	lds	r24, 0x062A
    cf10:	90 91 2b 06 	lds	r25, 0x062B
    cf14:	8f 57       	subi	r24, 0x7F	; 127
    cf16:	9d 4f       	sbci	r25, 0xFD	; 253
    cf18:	fc 01       	movw	r30, r24
    cf1a:	80 81       	ld	r24, Z
    cf1c:	80 33       	cpi	r24, 0x30	; 48
    cf1e:	08 f4       	brcc	.+2      	; 0xcf22 <Terminal+0x2dcc>
    cf20:	fd c1       	rjmp	.+1018   	; 0xd31c <Terminal+0x31c6>
    cf22:	80 91 2a 06 	lds	r24, 0x062A
    cf26:	90 91 2b 06 	lds	r25, 0x062B
    cf2a:	8f 57       	subi	r24, 0x7F	; 127
    cf2c:	9d 4f       	sbci	r25, 0xFD	; 253
    cf2e:	fc 01       	movw	r30, r24
    cf30:	80 81       	ld	r24, Z
    cf32:	8a 33       	cpi	r24, 0x3A	; 58
    cf34:	08 f0       	brcs	.+2      	; 0xcf38 <Terminal+0x2de2>
    cf36:	f2 c1       	rjmp	.+996    	; 0xd31c <Terminal+0x31c6>
					float flValorReal = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    cf38:	80 91 2a 06 	lds	r24, 0x062A
    cf3c:	90 91 2b 06 	lds	r25, 0x062B
    cf40:	8f 57       	subi	r24, 0x7F	; 127
    cf42:	9d 4f       	sbci	r25, 0xFD	; 253
    cf44:	68 ec       	ldi	r22, 0xC8	; 200
    cf46:	70 e0       	ldi	r23, 0x00	; 0
    cf48:	0e 94 5e 80 	call	0x100bc	; 0x100bc <From_String_to_Float>
    cf4c:	dc 01       	movw	r26, r24
    cf4e:	cb 01       	movw	r24, r22
    cf50:	8f 83       	std	Y+7, r24	; 0x07
    cf52:	98 87       	std	Y+8, r25	; 0x08
    cf54:	a9 87       	std	Y+9, r26	; 0x09
    cf56:	ba 87       	std	Y+10, r27	; 0x0a

					if (flValorReal == 0) {
    cf58:	20 e0       	ldi	r18, 0x00	; 0
    cf5a:	30 e0       	ldi	r19, 0x00	; 0
    cf5c:	a9 01       	movw	r20, r18
    cf5e:	6f 81       	ldd	r22, Y+7	; 0x07
    cf60:	78 85       	ldd	r23, Y+8	; 0x08
    cf62:	89 85       	ldd	r24, Y+9	; 0x09
    cf64:	9a 85       	ldd	r25, Y+10	; 0x0a
    cf66:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    cf6a:	88 23       	and	r24, r24
    cf6c:	09 f0       	breq	.+2      	; 0xcf70 <Terminal+0x2e1a>
    cf6e:	a0 c0       	rjmp	.+320    	; 0xd0b0 <Terminal+0x2f5a>
						flOffsetCond2 = flCond2valoruS;
    cf70:	80 91 ed 04 	lds	r24, 0x04ED
    cf74:	90 91 ee 04 	lds	r25, 0x04EE
    cf78:	a0 91 ef 04 	lds	r26, 0x04EF
    cf7c:	b0 91 f0 04 	lds	r27, 0x04F0
    cf80:	80 93 03 05 	sts	0x0503, r24
    cf84:	90 93 04 05 	sts	0x0504, r25
    cf88:	a0 93 05 05 	sts	0x0505, r26
    cf8c:	b0 93 06 05 	sts	0x0506, r27

						Float_a_Eeprom(&flOffsetCond2_Eeprom, &flOffsetCond2);
    cf90:	63 e0       	ldi	r22, 0x03	; 3
    cf92:	75 e0       	ldi	r23, 0x05	; 5
    cf94:	80 ed       	ldi	r24, 0xD0	; 208
    cf96:	94 e0       	ldi	r25, 0x04	; 4
    cf98:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
						Float_a_Eeprom(&flOffsetCond2_Eeprom_BK, &flOffsetCond2);
    cf9c:	63 e0       	ldi	r22, 0x03	; 3
    cf9e:	75 e0       	ldi	r23, 0x05	; 5
    cfa0:	86 e7       	ldi	r24, 0x76	; 118
    cfa2:	94 e0       	ldi	r25, 0x04	; 4
    cfa4:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
						Escribir_Checksum_Eeprom (GRUPO_ADC);
    cfa8:	82 e0       	ldi	r24, 0x02	; 2
    cfaa:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

						auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Autocal_Cond_2);
    cfae:	8a ed       	ldi	r24, 0xDA	; 218
    cfb0:	96 e0       	ldi	r25, 0x06	; 6
    cfb2:	89 2f       	mov	r24, r25
    cfb4:	8f 93       	push	r24
    cfb6:	8a ed       	ldi	r24, 0xDA	; 218
    cfb8:	96 e0       	ldi	r25, 0x06	; 6
    cfba:	8f 93       	push	r24
    cfbc:	87 ef       	ldi	r24, 0xF7	; 247
    cfbe:	91 e0       	ldi	r25, 0x01	; 1
    cfc0:	89 2f       	mov	r24, r25
    cfc2:	8f 93       	push	r24
    cfc4:	87 ef       	ldi	r24, 0xF7	; 247
    cfc6:	91 e0       	ldi	r25, 0x01	; 1
    cfc8:	8f 93       	push	r24
    cfca:	81 e8       	ldi	r24, 0x81	; 129
    cfcc:	92 e0       	ldi	r25, 0x02	; 2
    cfce:	89 2f       	mov	r24, r25
    cfd0:	8f 93       	push	r24
    cfd2:	81 e8       	ldi	r24, 0x81	; 129
    cfd4:	92 e0       	ldi	r25, 0x02	; 2
    cfd6:	8f 93       	push	r24
    cfd8:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    cfdc:	0f 90       	pop	r0
    cfde:	0f 90       	pop	r0
    cfe0:	0f 90       	pop	r0
    cfe2:	0f 90       	pop	r0
    cfe4:	0f 90       	pop	r0
    cfe6:	0f 90       	pop	r0
    cfe8:	90 93 2b 06 	sts	0x062B, r25
    cfec:	80 93 2a 06 	sts	0x062A, r24
						dtostrf(flCond2auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    cff0:	80 91 2a 06 	lds	r24, 0x062A
    cff4:	90 91 2b 06 	lds	r25, 0x062B
    cff8:	9c 01       	movw	r18, r24
    cffa:	2f 57       	subi	r18, 0x7F	; 127
    cffc:	3d 4f       	sbci	r19, 0xFD	; 253
    cffe:	80 91 93 05 	lds	r24, 0x0593
    d002:	90 91 94 05 	lds	r25, 0x0594
    d006:	a0 91 95 05 	lds	r26, 0x0595
    d00a:	b0 91 96 05 	lds	r27, 0x0596
    d00e:	89 01       	movw	r16, r18
    d010:	24 e0       	ldi	r18, 0x04	; 4
    d012:	47 e0       	ldi	r20, 0x07	; 7
    d014:	bc 01       	movw	r22, r24
    d016:	cd 01       	movw	r24, r26
    d018:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
						auxIndexTerminal += 7;
    d01c:	80 91 2a 06 	lds	r24, 0x062A
    d020:	90 91 2b 06 	lds	r25, 0x062B
    d024:	07 96       	adiw	r24, 0x07	; 7
    d026:	90 93 2b 06 	sts	0x062B, r25
    d02a:	80 93 2a 06 	sts	0x062A, r24
						auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    d02e:	80 91 2a 06 	lds	r24, 0x062A
    d032:	90 91 2b 06 	lds	r25, 0x062B
    d036:	8f 57       	subi	r24, 0x7F	; 127
    d038:	9d 4f       	sbci	r25, 0xFD	; 253
    d03a:	27 e9       	ldi	r18, 0x97	; 151
    d03c:	37 e0       	ldi	r19, 0x07	; 7
    d03e:	23 2f       	mov	r18, r19
    d040:	2f 93       	push	r18
    d042:	27 e9       	ldi	r18, 0x97	; 151
    d044:	37 e0       	ldi	r19, 0x07	; 7
    d046:	2f 93       	push	r18
    d048:	2c ef       	ldi	r18, 0xFC	; 252
    d04a:	31 e0       	ldi	r19, 0x01	; 1
    d04c:	23 2f       	mov	r18, r19
    d04e:	2f 93       	push	r18
    d050:	2c ef       	ldi	r18, 0xFC	; 252
    d052:	31 e0       	ldi	r19, 0x01	; 1
    d054:	2f 93       	push	r18
    d056:	29 2f       	mov	r18, r25
    d058:	2f 93       	push	r18
    d05a:	8f 93       	push	r24
    d05c:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    d060:	0f 90       	pop	r0
    d062:	0f 90       	pop	r0
    d064:	0f 90       	pop	r0
    d066:	0f 90       	pop	r0
    d068:	0f 90       	pop	r0
    d06a:	0f 90       	pop	r0
    d06c:	9c 01       	movw	r18, r24
    d06e:	80 91 2a 06 	lds	r24, 0x062A
    d072:	90 91 2b 06 	lds	r25, 0x062B
    d076:	82 0f       	add	r24, r18
    d078:	93 1f       	adc	r25, r19
    d07a:	90 93 2b 06 	sts	0x062B, r25
    d07e:	80 93 2a 06 	sts	0x062A, r24
						dtostrf(flOffsetCond2, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    d082:	80 91 2a 06 	lds	r24, 0x062A
    d086:	90 91 2b 06 	lds	r25, 0x062B
    d08a:	9c 01       	movw	r18, r24
    d08c:	2f 57       	subi	r18, 0x7F	; 127
    d08e:	3d 4f       	sbci	r19, 0xFD	; 253
    d090:	80 91 03 05 	lds	r24, 0x0503
    d094:	90 91 04 05 	lds	r25, 0x0504
    d098:	a0 91 05 05 	lds	r26, 0x0505
    d09c:	b0 91 06 05 	lds	r27, 0x0506
    d0a0:	89 01       	movw	r16, r18
    d0a2:	22 e0       	ldi	r18, 0x02	; 2
    d0a4:	45 e0       	ldi	r20, 0x05	; 5
    d0a6:	bc 01       	movw	r22, r24
    d0a8:	cd 01       	movw	r24, r26
    d0aa:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    d0ae:	35 c1       	rjmp	.+618    	; 0xd31a <Terminal+0x31c4>
					}
					else if ((flValorReal > cond2MinUs) && (flValorReal < cond2MaxUs)){
    d0b0:	80 91 15 05 	lds	r24, 0x0515
    d0b4:	90 91 16 05 	lds	r25, 0x0516
    d0b8:	09 2e       	mov	r0, r25
    d0ba:	00 0c       	add	r0, r0
    d0bc:	aa 0b       	sbc	r26, r26
    d0be:	bb 0b       	sbc	r27, r27
    d0c0:	bc 01       	movw	r22, r24
    d0c2:	cd 01       	movw	r24, r26
    d0c4:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    d0c8:	dc 01       	movw	r26, r24
    d0ca:	cb 01       	movw	r24, r22
    d0cc:	2f 81       	ldd	r18, Y+7	; 0x07
    d0ce:	38 85       	ldd	r19, Y+8	; 0x08
    d0d0:	49 85       	ldd	r20, Y+9	; 0x09
    d0d2:	5a 85       	ldd	r21, Y+10	; 0x0a
    d0d4:	bc 01       	movw	r22, r24
    d0d6:	cd 01       	movw	r24, r26
    d0d8:	0e 94 e1 81 	call	0x103c2	; 0x103c2 <__cmpsf2>
    d0dc:	88 23       	and	r24, r24
    d0de:	0c f0       	brlt	.+2      	; 0xd0e2 <Terminal+0x2f8c>
    d0e0:	f5 c0       	rjmp	.+490    	; 0xd2cc <Terminal+0x3176>
    d0e2:	80 91 1b 06 	lds	r24, 0x061B
    d0e6:	90 91 1c 06 	lds	r25, 0x061C
    d0ea:	09 2e       	mov	r0, r25
    d0ec:	00 0c       	add	r0, r0
    d0ee:	aa 0b       	sbc	r26, r26
    d0f0:	bb 0b       	sbc	r27, r27
    d0f2:	bc 01       	movw	r22, r24
    d0f4:	cd 01       	movw	r24, r26
    d0f6:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
    d0fa:	dc 01       	movw	r26, r24
    d0fc:	cb 01       	movw	r24, r22
    d0fe:	2f 81       	ldd	r18, Y+7	; 0x07
    d100:	38 85       	ldd	r19, Y+8	; 0x08
    d102:	49 85       	ldd	r20, Y+9	; 0x09
    d104:	5a 85       	ldd	r21, Y+10	; 0x0a
    d106:	bc 01       	movw	r22, r24
    d108:	cd 01       	movw	r24, r26
    d10a:	0e 94 40 83 	call	0x10680	; 0x10680 <__gesf2>
    d10e:	18 16       	cp	r1, r24
    d110:	0c f0       	brlt	.+2      	; 0xd114 <Terminal+0x2fbe>
    d112:	dc c0       	rjmp	.+440    	; 0xd2cc <Terminal+0x3176>
						flCond2auS *= (flValorReal+flOffsetCond2)/(flCond2valoruS+flOffsetCond2);
    d114:	80 91 03 05 	lds	r24, 0x0503
    d118:	90 91 04 05 	lds	r25, 0x0504
    d11c:	a0 91 05 05 	lds	r26, 0x0505
    d120:	b0 91 06 05 	lds	r27, 0x0506
    d124:	2f 81       	ldd	r18, Y+7	; 0x07
    d126:	38 85       	ldd	r19, Y+8	; 0x08
    d128:	49 85       	ldd	r20, Y+9	; 0x09
    d12a:	5a 85       	ldd	r21, Y+10	; 0x0a
    d12c:	bc 01       	movw	r22, r24
    d12e:	cd 01       	movw	r24, r26
    d130:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    d134:	dc 01       	movw	r26, r24
    d136:	cb 01       	movw	r24, r22
    d138:	6c 01       	movw	r12, r24
    d13a:	7d 01       	movw	r14, r26
    d13c:	80 91 ed 04 	lds	r24, 0x04ED
    d140:	90 91 ee 04 	lds	r25, 0x04EE
    d144:	a0 91 ef 04 	lds	r26, 0x04EF
    d148:	b0 91 f0 04 	lds	r27, 0x04F0
    d14c:	20 91 03 05 	lds	r18, 0x0503
    d150:	30 91 04 05 	lds	r19, 0x0504
    d154:	40 91 05 05 	lds	r20, 0x0505
    d158:	50 91 06 05 	lds	r21, 0x0506
    d15c:	bc 01       	movw	r22, r24
    d15e:	cd 01       	movw	r24, r26
    d160:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
    d164:	dc 01       	movw	r26, r24
    d166:	cb 01       	movw	r24, r22
    d168:	9c 01       	movw	r18, r24
    d16a:	ad 01       	movw	r20, r26
    d16c:	c7 01       	movw	r24, r14
    d16e:	b6 01       	movw	r22, r12
    d170:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    d174:	dc 01       	movw	r26, r24
    d176:	cb 01       	movw	r24, r22
    d178:	7c 01       	movw	r14, r24
    d17a:	8d 01       	movw	r16, r26
    d17c:	80 91 93 05 	lds	r24, 0x0593
    d180:	90 91 94 05 	lds	r25, 0x0594
    d184:	a0 91 95 05 	lds	r26, 0x0595
    d188:	b0 91 96 05 	lds	r27, 0x0596
    d18c:	9c 01       	movw	r18, r24
    d18e:	ad 01       	movw	r20, r26
    d190:	c8 01       	movw	r24, r16
    d192:	b7 01       	movw	r22, r14
    d194:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    d198:	dc 01       	movw	r26, r24
    d19a:	cb 01       	movw	r24, r22
    d19c:	80 93 93 05 	sts	0x0593, r24
    d1a0:	90 93 94 05 	sts	0x0594, r25
    d1a4:	a0 93 95 05 	sts	0x0595, r26
    d1a8:	b0 93 96 05 	sts	0x0596, r27

						Float_a_Eeprom(&flCond2auS_Eeprom, &flCond2auS);
    d1ac:	63 e9       	ldi	r22, 0x93	; 147
    d1ae:	75 e0       	ldi	r23, 0x05	; 5
    d1b0:	84 e8       	ldi	r24, 0x84	; 132
    d1b2:	94 e0       	ldi	r25, 0x04	; 4
    d1b4:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
						Float_a_Eeprom(&flCond2auS_Eeprom_BK, &flCond2auS);
    d1b8:	63 e9       	ldi	r22, 0x93	; 147
    d1ba:	75 e0       	ldi	r23, 0x05	; 5
    d1bc:	8c e8       	ldi	r24, 0x8C	; 140
    d1be:	94 e0       	ldi	r25, 0x04	; 4
    d1c0:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
						Escribir_Checksum_Eeprom (GRUPO_ADC);
    d1c4:	82 e0       	ldi	r24, 0x02	; 2
    d1c6:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

						auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Autocal_Cond_2);
    d1ca:	8a ed       	ldi	r24, 0xDA	; 218
    d1cc:	96 e0       	ldi	r25, 0x06	; 6
    d1ce:	89 2f       	mov	r24, r25
    d1d0:	8f 93       	push	r24
    d1d2:	8a ed       	ldi	r24, 0xDA	; 218
    d1d4:	96 e0       	ldi	r25, 0x06	; 6
    d1d6:	8f 93       	push	r24
    d1d8:	87 ef       	ldi	r24, 0xF7	; 247
    d1da:	91 e0       	ldi	r25, 0x01	; 1
    d1dc:	89 2f       	mov	r24, r25
    d1de:	8f 93       	push	r24
    d1e0:	87 ef       	ldi	r24, 0xF7	; 247
    d1e2:	91 e0       	ldi	r25, 0x01	; 1
    d1e4:	8f 93       	push	r24
    d1e6:	81 e8       	ldi	r24, 0x81	; 129
    d1e8:	92 e0       	ldi	r25, 0x02	; 2
    d1ea:	89 2f       	mov	r24, r25
    d1ec:	8f 93       	push	r24
    d1ee:	81 e8       	ldi	r24, 0x81	; 129
    d1f0:	92 e0       	ldi	r25, 0x02	; 2
    d1f2:	8f 93       	push	r24
    d1f4:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    d1f8:	0f 90       	pop	r0
    d1fa:	0f 90       	pop	r0
    d1fc:	0f 90       	pop	r0
    d1fe:	0f 90       	pop	r0
    d200:	0f 90       	pop	r0
    d202:	0f 90       	pop	r0
    d204:	90 93 2b 06 	sts	0x062B, r25
    d208:	80 93 2a 06 	sts	0x062A, r24
						dtostrf(flCond2auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    d20c:	80 91 2a 06 	lds	r24, 0x062A
    d210:	90 91 2b 06 	lds	r25, 0x062B
    d214:	9c 01       	movw	r18, r24
    d216:	2f 57       	subi	r18, 0x7F	; 127
    d218:	3d 4f       	sbci	r19, 0xFD	; 253
    d21a:	80 91 93 05 	lds	r24, 0x0593
    d21e:	90 91 94 05 	lds	r25, 0x0594
    d222:	a0 91 95 05 	lds	r26, 0x0595
    d226:	b0 91 96 05 	lds	r27, 0x0596
    d22a:	89 01       	movw	r16, r18
    d22c:	24 e0       	ldi	r18, 0x04	; 4
    d22e:	47 e0       	ldi	r20, 0x07	; 7
    d230:	bc 01       	movw	r22, r24
    d232:	cd 01       	movw	r24, r26
    d234:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
						auxIndexTerminal += 7;
    d238:	80 91 2a 06 	lds	r24, 0x062A
    d23c:	90 91 2b 06 	lds	r25, 0x062B
    d240:	07 96       	adiw	r24, 0x07	; 7
    d242:	90 93 2b 06 	sts	0x062B, r25
    d246:	80 93 2a 06 	sts	0x062A, r24
						auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    d24a:	80 91 2a 06 	lds	r24, 0x062A
    d24e:	90 91 2b 06 	lds	r25, 0x062B
    d252:	8f 57       	subi	r24, 0x7F	; 127
    d254:	9d 4f       	sbci	r25, 0xFD	; 253
    d256:	27 e9       	ldi	r18, 0x97	; 151
    d258:	37 e0       	ldi	r19, 0x07	; 7
    d25a:	23 2f       	mov	r18, r19
    d25c:	2f 93       	push	r18
    d25e:	27 e9       	ldi	r18, 0x97	; 151
    d260:	37 e0       	ldi	r19, 0x07	; 7
    d262:	2f 93       	push	r18
    d264:	2c ef       	ldi	r18, 0xFC	; 252
    d266:	31 e0       	ldi	r19, 0x01	; 1
    d268:	23 2f       	mov	r18, r19
    d26a:	2f 93       	push	r18
    d26c:	2c ef       	ldi	r18, 0xFC	; 252
    d26e:	31 e0       	ldi	r19, 0x01	; 1
    d270:	2f 93       	push	r18
    d272:	29 2f       	mov	r18, r25
    d274:	2f 93       	push	r18
    d276:	8f 93       	push	r24
    d278:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    d27c:	0f 90       	pop	r0
    d27e:	0f 90       	pop	r0
    d280:	0f 90       	pop	r0
    d282:	0f 90       	pop	r0
    d284:	0f 90       	pop	r0
    d286:	0f 90       	pop	r0
    d288:	9c 01       	movw	r18, r24
    d28a:	80 91 2a 06 	lds	r24, 0x062A
    d28e:	90 91 2b 06 	lds	r25, 0x062B
    d292:	82 0f       	add	r24, r18
    d294:	93 1f       	adc	r25, r19
    d296:	90 93 2b 06 	sts	0x062B, r25
    d29a:	80 93 2a 06 	sts	0x062A, r24
						dtostrf(flOffsetCond2, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    d29e:	80 91 2a 06 	lds	r24, 0x062A
    d2a2:	90 91 2b 06 	lds	r25, 0x062B
    d2a6:	9c 01       	movw	r18, r24
    d2a8:	2f 57       	subi	r18, 0x7F	; 127
    d2aa:	3d 4f       	sbci	r19, 0xFD	; 253
    d2ac:	80 91 03 05 	lds	r24, 0x0503
    d2b0:	90 91 04 05 	lds	r25, 0x0504
    d2b4:	a0 91 05 05 	lds	r26, 0x0505
    d2b8:	b0 91 06 05 	lds	r27, 0x0506
    d2bc:	89 01       	movw	r16, r18
    d2be:	22 e0       	ldi	r18, 0x02	; 2
    d2c0:	45 e0       	ldi	r20, 0x05	; 5
    d2c2:	bc 01       	movw	r22, r24
    d2c4:	cd 01       	movw	r24, r26
    d2c6:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    d2ca:	27 c0       	rjmp	.+78     	; 0xd31a <Terminal+0x31c4>
					}
					else{
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Autocal_Cond_2, (wchar_t*)MSG_FueraDeRango);
    d2cc:	87 e8       	ldi	r24, 0x87	; 135
    d2ce:	97 e0       	ldi	r25, 0x07	; 7
    d2d0:	89 2f       	mov	r24, r25
    d2d2:	8f 93       	push	r24
    d2d4:	87 e8       	ldi	r24, 0x87	; 135
    d2d6:	97 e0       	ldi	r25, 0x07	; 7
    d2d8:	8f 93       	push	r24
    d2da:	8a ed       	ldi	r24, 0xDA	; 218
    d2dc:	96 e0       	ldi	r25, 0x06	; 6
    d2de:	89 2f       	mov	r24, r25
    d2e0:	8f 93       	push	r24
    d2e2:	8a ed       	ldi	r24, 0xDA	; 218
    d2e4:	96 e0       	ldi	r25, 0x06	; 6
    d2e6:	8f 93       	push	r24
    d2e8:	80 ef       	ldi	r24, 0xF0	; 240
    d2ea:	91 e0       	ldi	r25, 0x01	; 1
    d2ec:	89 2f       	mov	r24, r25
    d2ee:	8f 93       	push	r24
    d2f0:	80 ef       	ldi	r24, 0xF0	; 240
    d2f2:	91 e0       	ldi	r25, 0x01	; 1
    d2f4:	8f 93       	push	r24
    d2f6:	81 e8       	ldi	r24, 0x81	; 129
    d2f8:	92 e0       	ldi	r25, 0x02	; 2
    d2fa:	89 2f       	mov	r24, r25
    d2fc:	8f 93       	push	r24
    d2fe:	81 e8       	ldi	r24, 0x81	; 129
    d300:	92 e0       	ldi	r25, 0x02	; 2
    d302:	8f 93       	push	r24
    d304:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    d308:	8d b7       	in	r24, 0x3d	; 61
    d30a:	9e b7       	in	r25, 0x3e	; 62
    d30c:	08 96       	adiw	r24, 0x08	; 8
    d30e:	0f b6       	in	r0, 0x3f	; 63
    d310:	f8 94       	cli
    d312:	de bf       	out	0x3e, r29	; 62
    d314:	0f be       	out	0x3f, r0	; 63
    d316:	cd bf       	out	0x3d, r28	; 61
			}


			// chBufferRx_USART0 = AUTOCAL COND 2 xx.xx\0
			else if (Detectar_Comando_Buffer_P(Comando_Autocal_Cond_2, chBufferRx_USART0)) {
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    d318:	93 c1       	rjmp	.+806    	; 0xd640 <Terminal+0x34ea>
    d31a:	92 c1       	rjmp	.+804    	; 0xd640 <Terminal+0x34ea>
					}
					else{
						sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Autocal_Cond_2, (wchar_t*)MSG_FueraDeRango);
					}
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    d31c:	80 91 2a 06 	lds	r24, 0x062A
    d320:	90 91 2b 06 	lds	r25, 0x062B
    d324:	8f 57       	subi	r24, 0x7F	; 127
    d326:	9d 4f       	sbci	r25, 0xFD	; 253
    d328:	bc 01       	movw	r22, r24
    d32a:	80 ee       	ldi	r24, 0xE0	; 224
    d32c:	95 e0       	ldi	r25, 0x05	; 5
    d32e:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    d332:	89 2b       	or	r24, r25
    d334:	09 f4       	brne	.+2      	; 0xd338 <Terminal+0x31e2>
    d336:	02 c1       	rjmp	.+516    	; 0xd53c <Terminal+0x33e6>
					if (uRangoCond2 == COND_20_2500_G){
    d338:	80 91 1d 06 	lds	r24, 0x061D
    d33c:	90 91 1e 06 	lds	r25, 0x061E
    d340:	01 97       	sbiw	r24, 0x01	; 1
    d342:	69 f4       	brne	.+26     	; 0xd35e <Terminal+0x3208>
						flCond2auS = DEFAULT_COND202500G_A_US;
    d344:	8c e9       	ldi	r24, 0x9C	; 156
    d346:	92 ea       	ldi	r25, 0xA2	; 162
    d348:	ab e0       	ldi	r26, 0x0B	; 11
    d34a:	b0 e4       	ldi	r27, 0x40	; 64
    d34c:	80 93 93 05 	sts	0x0593, r24
    d350:	90 93 94 05 	sts	0x0594, r25
    d354:	a0 93 95 05 	sts	0x0595, r26
    d358:	b0 93 96 05 	sts	0x0596, r27
    d35c:	5e c0       	rjmp	.+188    	; 0xd41a <Terminal+0x32c4>
					}
					else if (uRangoCond2 == COND_0_20_G){
    d35e:	80 91 1d 06 	lds	r24, 0x061D
    d362:	90 91 1e 06 	lds	r25, 0x061E
    d366:	02 97       	sbiw	r24, 0x02	; 2
    d368:	69 f4       	brne	.+26     	; 0xd384 <Terminal+0x322e>
						flCond2auS = DEFAULT_COND020G_A_US;
    d36a:	8d e4       	ldi	r24, 0x4D	; 77
    d36c:	95 e1       	ldi	r25, 0x15	; 21
    d36e:	ac e8       	ldi	r26, 0x8C	; 140
    d370:	bc e3       	ldi	r27, 0x3C	; 60
    d372:	80 93 93 05 	sts	0x0593, r24
    d376:	90 93 94 05 	sts	0x0594, r25
    d37a:	a0 93 95 05 	sts	0x0595, r26
    d37e:	b0 93 96 05 	sts	0x0596, r27
    d382:	4b c0       	rjmp	.+150    	; 0xd41a <Terminal+0x32c4>
					}
					else if (uRangoCond2 == COND_2_200_G){
    d384:	80 91 1d 06 	lds	r24, 0x061D
    d388:	90 91 1e 06 	lds	r25, 0x061E
    d38c:	03 97       	sbiw	r24, 0x03	; 3
    d38e:	69 f4       	brne	.+26     	; 0xd3aa <Terminal+0x3254>
						flCond2auS = DEFAULT_COND2200G_A_US;
    d390:	89 e6       	ldi	r24, 0x69	; 105
    d392:	9f e6       	ldi	r25, 0x6F	; 111
    d394:	a0 e3       	ldi	r26, 0x30	; 48
    d396:	be e3       	ldi	r27, 0x3E	; 62
    d398:	80 93 93 05 	sts	0x0593, r24
    d39c:	90 93 94 05 	sts	0x0594, r25
    d3a0:	a0 93 95 05 	sts	0x0595, r26
    d3a4:	b0 93 96 05 	sts	0x0596, r27
    d3a8:	38 c0       	rjmp	.+112    	; 0xd41a <Terminal+0x32c4>
					}
					else if (uRangoCond2 == COND_20_2500_C){
    d3aa:	80 91 1d 06 	lds	r24, 0x061D
    d3ae:	90 91 1e 06 	lds	r25, 0x061E
    d3b2:	04 97       	sbiw	r24, 0x04	; 4
    d3b4:	69 f4       	brne	.+26     	; 0xd3d0 <Terminal+0x327a>
						flCond2auS = DEFAULT_COND202500C_A_US;
    d3b6:	87 ec       	ldi	r24, 0xC7	; 199
    d3b8:	9a eb       	ldi	r25, 0xBA	; 186
    d3ba:	a8 e2       	ldi	r26, 0x28	; 40
    d3bc:	b0 e4       	ldi	r27, 0x40	; 64
    d3be:	80 93 93 05 	sts	0x0593, r24
    d3c2:	90 93 94 05 	sts	0x0594, r25
    d3c6:	a0 93 95 05 	sts	0x0595, r26
    d3ca:	b0 93 96 05 	sts	0x0596, r27
    d3ce:	25 c0       	rjmp	.+74     	; 0xd41a <Terminal+0x32c4>
					}
					else if (uRangoCond2 == COND_0_20_C){
    d3d0:	80 91 1d 06 	lds	r24, 0x061D
    d3d4:	90 91 1e 06 	lds	r25, 0x061E
    d3d8:	05 97       	sbiw	r24, 0x05	; 5
    d3da:	69 f4       	brne	.+26     	; 0xd3f6 <Terminal+0x32a0>
						flCond2auS = DEFAULT_COND020C_A_US;
    d3dc:	87 ee       	ldi	r24, 0xE7	; 231
    d3de:	9d e1       	ldi	r25, 0x1D	; 29
    d3e0:	a7 ea       	ldi	r26, 0xA7	; 167
    d3e2:	bc e3       	ldi	r27, 0x3C	; 60
    d3e4:	80 93 93 05 	sts	0x0593, r24
    d3e8:	90 93 94 05 	sts	0x0594, r25
    d3ec:	a0 93 95 05 	sts	0x0595, r26
    d3f0:	b0 93 96 05 	sts	0x0596, r27
    d3f4:	12 c0       	rjmp	.+36     	; 0xd41a <Terminal+0x32c4>
					}
					else if (uRangoCond2 == COND_2_200_C){
    d3f6:	80 91 1d 06 	lds	r24, 0x061D
    d3fa:	90 91 1e 06 	lds	r25, 0x061E
    d3fe:	06 97       	sbiw	r24, 0x06	; 6
    d400:	61 f4       	brne	.+24     	; 0xd41a <Terminal+0x32c4>
						flCond2auS = DEFAULT_COND2200C_A_US;
    d402:	83 e0       	ldi	r24, 0x03	; 3
    d404:	99 e0       	ldi	r25, 0x09	; 9
    d406:	aa e4       	ldi	r26, 0x4A	; 74
    d408:	be e3       	ldi	r27, 0x3E	; 62
    d40a:	80 93 93 05 	sts	0x0593, r24
    d40e:	90 93 94 05 	sts	0x0594, r25
    d412:	a0 93 95 05 	sts	0x0595, r26
    d416:	b0 93 96 05 	sts	0x0596, r27
					}

					Float_a_Eeprom(&flCond2auS_Eeprom, &flCond2auS);
    d41a:	63 e9       	ldi	r22, 0x93	; 147
    d41c:	75 e0       	ldi	r23, 0x05	; 5
    d41e:	84 e8       	ldi	r24, 0x84	; 132
    d420:	94 e0       	ldi	r25, 0x04	; 4
    d422:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flCond2auS_Eeprom_BK, &flCond2auS);
    d426:	63 e9       	ldi	r22, 0x93	; 147
    d428:	75 e0       	ldi	r23, 0x05	; 5
    d42a:	8c e8       	ldi	r24, 0x8C	; 140
    d42c:	94 e0       	ldi	r25, 0x04	; 4
    d42e:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    d432:	82 e0       	ldi	r24, 0x02	; 2
    d434:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Autocal_Cond_2);
    d438:	8a ed       	ldi	r24, 0xDA	; 218
    d43a:	96 e0       	ldi	r25, 0x06	; 6
    d43c:	89 2f       	mov	r24, r25
    d43e:	8f 93       	push	r24
    d440:	8a ed       	ldi	r24, 0xDA	; 218
    d442:	96 e0       	ldi	r25, 0x06	; 6
    d444:	8f 93       	push	r24
    d446:	87 ef       	ldi	r24, 0xF7	; 247
    d448:	91 e0       	ldi	r25, 0x01	; 1
    d44a:	89 2f       	mov	r24, r25
    d44c:	8f 93       	push	r24
    d44e:	87 ef       	ldi	r24, 0xF7	; 247
    d450:	91 e0       	ldi	r25, 0x01	; 1
    d452:	8f 93       	push	r24
    d454:	81 e8       	ldi	r24, 0x81	; 129
    d456:	92 e0       	ldi	r25, 0x02	; 2
    d458:	89 2f       	mov	r24, r25
    d45a:	8f 93       	push	r24
    d45c:	81 e8       	ldi	r24, 0x81	; 129
    d45e:	92 e0       	ldi	r25, 0x02	; 2
    d460:	8f 93       	push	r24
    d462:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    d466:	0f 90       	pop	r0
    d468:	0f 90       	pop	r0
    d46a:	0f 90       	pop	r0
    d46c:	0f 90       	pop	r0
    d46e:	0f 90       	pop	r0
    d470:	0f 90       	pop	r0
    d472:	90 93 2b 06 	sts	0x062B, r25
    d476:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond2auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    d47a:	80 91 2a 06 	lds	r24, 0x062A
    d47e:	90 91 2b 06 	lds	r25, 0x062B
    d482:	9c 01       	movw	r18, r24
    d484:	2f 57       	subi	r18, 0x7F	; 127
    d486:	3d 4f       	sbci	r19, 0xFD	; 253
    d488:	80 91 93 05 	lds	r24, 0x0593
    d48c:	90 91 94 05 	lds	r25, 0x0594
    d490:	a0 91 95 05 	lds	r26, 0x0595
    d494:	b0 91 96 05 	lds	r27, 0x0596
    d498:	89 01       	movw	r16, r18
    d49a:	24 e0       	ldi	r18, 0x04	; 4
    d49c:	47 e0       	ldi	r20, 0x07	; 7
    d49e:	bc 01       	movw	r22, r24
    d4a0:	cd 01       	movw	r24, r26
    d4a2:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    d4a6:	80 91 2a 06 	lds	r24, 0x062A
    d4aa:	90 91 2b 06 	lds	r25, 0x062B
    d4ae:	07 96       	adiw	r24, 0x07	; 7
    d4b0:	90 93 2b 06 	sts	0x062B, r25
    d4b4:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    d4b8:	80 91 2a 06 	lds	r24, 0x062A
    d4bc:	90 91 2b 06 	lds	r25, 0x062B
    d4c0:	8f 57       	subi	r24, 0x7F	; 127
    d4c2:	9d 4f       	sbci	r25, 0xFD	; 253
    d4c4:	27 e9       	ldi	r18, 0x97	; 151
    d4c6:	37 e0       	ldi	r19, 0x07	; 7
    d4c8:	23 2f       	mov	r18, r19
    d4ca:	2f 93       	push	r18
    d4cc:	27 e9       	ldi	r18, 0x97	; 151
    d4ce:	37 e0       	ldi	r19, 0x07	; 7
    d4d0:	2f 93       	push	r18
    d4d2:	2c ef       	ldi	r18, 0xFC	; 252
    d4d4:	31 e0       	ldi	r19, 0x01	; 1
    d4d6:	23 2f       	mov	r18, r19
    d4d8:	2f 93       	push	r18
    d4da:	2c ef       	ldi	r18, 0xFC	; 252
    d4dc:	31 e0       	ldi	r19, 0x01	; 1
    d4de:	2f 93       	push	r18
    d4e0:	29 2f       	mov	r18, r25
    d4e2:	2f 93       	push	r18
    d4e4:	8f 93       	push	r24
    d4e6:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    d4ea:	0f 90       	pop	r0
    d4ec:	0f 90       	pop	r0
    d4ee:	0f 90       	pop	r0
    d4f0:	0f 90       	pop	r0
    d4f2:	0f 90       	pop	r0
    d4f4:	0f 90       	pop	r0
    d4f6:	9c 01       	movw	r18, r24
    d4f8:	80 91 2a 06 	lds	r24, 0x062A
    d4fc:	90 91 2b 06 	lds	r25, 0x062B
    d500:	82 0f       	add	r24, r18
    d502:	93 1f       	adc	r25, r19
    d504:	90 93 2b 06 	sts	0x062B, r25
    d508:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond2, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    d50c:	80 91 2a 06 	lds	r24, 0x062A
    d510:	90 91 2b 06 	lds	r25, 0x062B
    d514:	9c 01       	movw	r18, r24
    d516:	2f 57       	subi	r18, 0x7F	; 127
    d518:	3d 4f       	sbci	r19, 0xFD	; 253
    d51a:	80 91 03 05 	lds	r24, 0x0503
    d51e:	90 91 04 05 	lds	r25, 0x0504
    d522:	a0 91 05 05 	lds	r26, 0x0505
    d526:	b0 91 06 05 	lds	r27, 0x0506
    d52a:	89 01       	movw	r16, r18
    d52c:	22 e0       	ldi	r18, 0x02	; 2
    d52e:	45 e0       	ldi	r20, 0x05	; 5
    d530:	bc 01       	movw	r22, r24
    d532:	cd 01       	movw	r24, r26
    d534:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    d538:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Autocal_Cond_2);
    d53c:	8a ed       	ldi	r24, 0xDA	; 218
    d53e:	96 e0       	ldi	r25, 0x06	; 6
    d540:	89 2f       	mov	r24, r25
    d542:	8f 93       	push	r24
    d544:	8a ed       	ldi	r24, 0xDA	; 218
    d546:	96 e0       	ldi	r25, 0x06	; 6
    d548:	8f 93       	push	r24
    d54a:	87 ef       	ldi	r24, 0xF7	; 247
    d54c:	91 e0       	ldi	r25, 0x01	; 1
    d54e:	89 2f       	mov	r24, r25
    d550:	8f 93       	push	r24
    d552:	87 ef       	ldi	r24, 0xF7	; 247
    d554:	91 e0       	ldi	r25, 0x01	; 1
    d556:	8f 93       	push	r24
    d558:	81 e8       	ldi	r24, 0x81	; 129
    d55a:	92 e0       	ldi	r25, 0x02	; 2
    d55c:	89 2f       	mov	r24, r25
    d55e:	8f 93       	push	r24
    d560:	81 e8       	ldi	r24, 0x81	; 129
    d562:	92 e0       	ldi	r25, 0x02	; 2
    d564:	8f 93       	push	r24
    d566:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    d56a:	0f 90       	pop	r0
    d56c:	0f 90       	pop	r0
    d56e:	0f 90       	pop	r0
    d570:	0f 90       	pop	r0
    d572:	0f 90       	pop	r0
    d574:	0f 90       	pop	r0
    d576:	90 93 2b 06 	sts	0x062B, r25
    d57a:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond2auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    d57e:	80 91 2a 06 	lds	r24, 0x062A
    d582:	90 91 2b 06 	lds	r25, 0x062B
    d586:	9c 01       	movw	r18, r24
    d588:	2f 57       	subi	r18, 0x7F	; 127
    d58a:	3d 4f       	sbci	r19, 0xFD	; 253
    d58c:	80 91 93 05 	lds	r24, 0x0593
    d590:	90 91 94 05 	lds	r25, 0x0594
    d594:	a0 91 95 05 	lds	r26, 0x0595
    d598:	b0 91 96 05 	lds	r27, 0x0596
    d59c:	89 01       	movw	r16, r18
    d59e:	24 e0       	ldi	r18, 0x04	; 4
    d5a0:	47 e0       	ldi	r20, 0x07	; 7
    d5a2:	bc 01       	movw	r22, r24
    d5a4:	cd 01       	movw	r24, r26
    d5a6:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    d5aa:	80 91 2a 06 	lds	r24, 0x062A
    d5ae:	90 91 2b 06 	lds	r25, 0x062B
    d5b2:	07 96       	adiw	r24, 0x07	; 7
    d5b4:	90 93 2b 06 	sts	0x062B, r25
    d5b8:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    d5bc:	80 91 2a 06 	lds	r24, 0x062A
    d5c0:	90 91 2b 06 	lds	r25, 0x062B
    d5c4:	8f 57       	subi	r24, 0x7F	; 127
    d5c6:	9d 4f       	sbci	r25, 0xFD	; 253
    d5c8:	27 e9       	ldi	r18, 0x97	; 151
    d5ca:	37 e0       	ldi	r19, 0x07	; 7
    d5cc:	23 2f       	mov	r18, r19
    d5ce:	2f 93       	push	r18
    d5d0:	27 e9       	ldi	r18, 0x97	; 151
    d5d2:	37 e0       	ldi	r19, 0x07	; 7
    d5d4:	2f 93       	push	r18
    d5d6:	2c ef       	ldi	r18, 0xFC	; 252
    d5d8:	31 e0       	ldi	r19, 0x01	; 1
    d5da:	23 2f       	mov	r18, r19
    d5dc:	2f 93       	push	r18
    d5de:	2c ef       	ldi	r18, 0xFC	; 252
    d5e0:	31 e0       	ldi	r19, 0x01	; 1
    d5e2:	2f 93       	push	r18
    d5e4:	29 2f       	mov	r18, r25
    d5e6:	2f 93       	push	r18
    d5e8:	8f 93       	push	r24
    d5ea:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    d5ee:	0f 90       	pop	r0
    d5f0:	0f 90       	pop	r0
    d5f2:	0f 90       	pop	r0
    d5f4:	0f 90       	pop	r0
    d5f6:	0f 90       	pop	r0
    d5f8:	0f 90       	pop	r0
    d5fa:	9c 01       	movw	r18, r24
    d5fc:	80 91 2a 06 	lds	r24, 0x062A
    d600:	90 91 2b 06 	lds	r25, 0x062B
    d604:	82 0f       	add	r24, r18
    d606:	93 1f       	adc	r25, r19
    d608:	90 93 2b 06 	sts	0x062B, r25
    d60c:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond2, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    d610:	80 91 2a 06 	lds	r24, 0x062A
    d614:	90 91 2b 06 	lds	r25, 0x062B
    d618:	9c 01       	movw	r18, r24
    d61a:	2f 57       	subi	r18, 0x7F	; 127
    d61c:	3d 4f       	sbci	r19, 0xFD	; 253
    d61e:	80 91 03 05 	lds	r24, 0x0503
    d622:	90 91 04 05 	lds	r25, 0x0504
    d626:	a0 91 05 05 	lds	r26, 0x0505
    d62a:	b0 91 06 05 	lds	r27, 0x0506
    d62e:	89 01       	movw	r16, r18
    d630:	22 e0       	ldi	r18, 0x02	; 2
    d632:	45 e0       	ldi	r20, 0x05	; 5
    d634:	bc 01       	movw	r22, r24
    d636:	cd 01       	movw	r24, r26
    d638:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    d63c:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
    d640:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = CAL COND 2 xxxx.x\0
			else if (Detectar_Comando_Buffer_P(Comando_Cal_Cond_2, chBufferRx_USART0)) {
    d644:	61 e8       	ldi	r22, 0x81	; 129
    d646:	72 e0       	ldi	r23, 0x02	; 2
    d648:	80 ea       	ldi	r24, 0xA0	; 160
    d64a:	96 e0       	ldi	r25, 0x06	; 6
    d64c:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    d650:	89 2b       	or	r24, r25
    d652:	09 f4       	brne	.+2      	; 0xd656 <Terminal+0x3500>
    d654:	4d c2       	rjmp	.+1178   	; 0xdaf0 <Terminal+0x399a>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    d656:	80 91 2a 06 	lds	r24, 0x062A
    d65a:	90 91 2b 06 	lds	r25, 0x062B
    d65e:	8f 57       	subi	r24, 0x7F	; 127
    d660:	9d 4f       	sbci	r25, 0xFD	; 253
    d662:	fc 01       	movw	r30, r24
    d664:	80 81       	ld	r24, Z
    d666:	80 33       	cpi	r24, 0x30	; 48
    d668:	08 f4       	brcc	.+2      	; 0xd66c <Terminal+0x3516>
    d66a:	b0 c0       	rjmp	.+352    	; 0xd7cc <Terminal+0x3676>
    d66c:	80 91 2a 06 	lds	r24, 0x062A
    d670:	90 91 2b 06 	lds	r25, 0x062B
    d674:	8f 57       	subi	r24, 0x7F	; 127
    d676:	9d 4f       	sbci	r25, 0xFD	; 253
    d678:	fc 01       	movw	r30, r24
    d67a:	80 81       	ld	r24, Z
    d67c:	8a 33       	cpi	r24, 0x3A	; 58
    d67e:	08 f0       	brcs	.+2      	; 0xd682 <Terminal+0x352c>
    d680:	a5 c0       	rjmp	.+330    	; 0xd7cc <Terminal+0x3676>
					flCond2auS = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    d682:	80 91 2a 06 	lds	r24, 0x062A
    d686:	90 91 2b 06 	lds	r25, 0x062B
    d68a:	8f 57       	subi	r24, 0x7F	; 127
    d68c:	9d 4f       	sbci	r25, 0xFD	; 253
    d68e:	68 ec       	ldi	r22, 0xC8	; 200
    d690:	70 e0       	ldi	r23, 0x00	; 0
    d692:	0e 94 5e 80 	call	0x100bc	; 0x100bc <From_String_to_Float>
    d696:	dc 01       	movw	r26, r24
    d698:	cb 01       	movw	r24, r22
    d69a:	80 93 93 05 	sts	0x0593, r24
    d69e:	90 93 94 05 	sts	0x0594, r25
    d6a2:	a0 93 95 05 	sts	0x0595, r26
    d6a6:	b0 93 96 05 	sts	0x0596, r27

					Float_a_Eeprom(&flCond2auS_Eeprom, &flCond2auS);
    d6aa:	63 e9       	ldi	r22, 0x93	; 147
    d6ac:	75 e0       	ldi	r23, 0x05	; 5
    d6ae:	84 e8       	ldi	r24, 0x84	; 132
    d6b0:	94 e0       	ldi	r25, 0x04	; 4
    d6b2:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flCond2auS_Eeprom_BK, &flCond2auS);
    d6b6:	63 e9       	ldi	r22, 0x93	; 147
    d6b8:	75 e0       	ldi	r23, 0x05	; 5
    d6ba:	8c e8       	ldi	r24, 0x8C	; 140
    d6bc:	94 e0       	ldi	r25, 0x04	; 4
    d6be:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    d6c2:	82 e0       	ldi	r24, 0x02	; 2
    d6c4:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_Cond_2);
    d6c8:	80 ea       	ldi	r24, 0xA0	; 160
    d6ca:	96 e0       	ldi	r25, 0x06	; 6
    d6cc:	89 2f       	mov	r24, r25
    d6ce:	8f 93       	push	r24
    d6d0:	80 ea       	ldi	r24, 0xA0	; 160
    d6d2:	96 e0       	ldi	r25, 0x06	; 6
    d6d4:	8f 93       	push	r24
    d6d6:	87 ef       	ldi	r24, 0xF7	; 247
    d6d8:	91 e0       	ldi	r25, 0x01	; 1
    d6da:	89 2f       	mov	r24, r25
    d6dc:	8f 93       	push	r24
    d6de:	87 ef       	ldi	r24, 0xF7	; 247
    d6e0:	91 e0       	ldi	r25, 0x01	; 1
    d6e2:	8f 93       	push	r24
    d6e4:	81 e8       	ldi	r24, 0x81	; 129
    d6e6:	92 e0       	ldi	r25, 0x02	; 2
    d6e8:	89 2f       	mov	r24, r25
    d6ea:	8f 93       	push	r24
    d6ec:	81 e8       	ldi	r24, 0x81	; 129
    d6ee:	92 e0       	ldi	r25, 0x02	; 2
    d6f0:	8f 93       	push	r24
    d6f2:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    d6f6:	0f 90       	pop	r0
    d6f8:	0f 90       	pop	r0
    d6fa:	0f 90       	pop	r0
    d6fc:	0f 90       	pop	r0
    d6fe:	0f 90       	pop	r0
    d700:	0f 90       	pop	r0
    d702:	90 93 2b 06 	sts	0x062B, r25
    d706:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond2auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    d70a:	80 91 2a 06 	lds	r24, 0x062A
    d70e:	90 91 2b 06 	lds	r25, 0x062B
    d712:	9c 01       	movw	r18, r24
    d714:	2f 57       	subi	r18, 0x7F	; 127
    d716:	3d 4f       	sbci	r19, 0xFD	; 253
    d718:	80 91 93 05 	lds	r24, 0x0593
    d71c:	90 91 94 05 	lds	r25, 0x0594
    d720:	a0 91 95 05 	lds	r26, 0x0595
    d724:	b0 91 96 05 	lds	r27, 0x0596
    d728:	89 01       	movw	r16, r18
    d72a:	24 e0       	ldi	r18, 0x04	; 4
    d72c:	47 e0       	ldi	r20, 0x07	; 7
    d72e:	bc 01       	movw	r22, r24
    d730:	cd 01       	movw	r24, r26
    d732:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    d736:	80 91 2a 06 	lds	r24, 0x062A
    d73a:	90 91 2b 06 	lds	r25, 0x062B
    d73e:	07 96       	adiw	r24, 0x07	; 7
    d740:	90 93 2b 06 	sts	0x062B, r25
    d744:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    d748:	80 91 2a 06 	lds	r24, 0x062A
    d74c:	90 91 2b 06 	lds	r25, 0x062B
    d750:	8f 57       	subi	r24, 0x7F	; 127
    d752:	9d 4f       	sbci	r25, 0xFD	; 253
    d754:	27 e9       	ldi	r18, 0x97	; 151
    d756:	37 e0       	ldi	r19, 0x07	; 7
    d758:	23 2f       	mov	r18, r19
    d75a:	2f 93       	push	r18
    d75c:	27 e9       	ldi	r18, 0x97	; 151
    d75e:	37 e0       	ldi	r19, 0x07	; 7
    d760:	2f 93       	push	r18
    d762:	2c ef       	ldi	r18, 0xFC	; 252
    d764:	31 e0       	ldi	r19, 0x01	; 1
    d766:	23 2f       	mov	r18, r19
    d768:	2f 93       	push	r18
    d76a:	2c ef       	ldi	r18, 0xFC	; 252
    d76c:	31 e0       	ldi	r19, 0x01	; 1
    d76e:	2f 93       	push	r18
    d770:	29 2f       	mov	r18, r25
    d772:	2f 93       	push	r18
    d774:	8f 93       	push	r24
    d776:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    d77a:	0f 90       	pop	r0
    d77c:	0f 90       	pop	r0
    d77e:	0f 90       	pop	r0
    d780:	0f 90       	pop	r0
    d782:	0f 90       	pop	r0
    d784:	0f 90       	pop	r0
    d786:	9c 01       	movw	r18, r24
    d788:	80 91 2a 06 	lds	r24, 0x062A
    d78c:	90 91 2b 06 	lds	r25, 0x062B
    d790:	82 0f       	add	r24, r18
    d792:	93 1f       	adc	r25, r19
    d794:	90 93 2b 06 	sts	0x062B, r25
    d798:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond2, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    d79c:	80 91 2a 06 	lds	r24, 0x062A
    d7a0:	90 91 2b 06 	lds	r25, 0x062B
    d7a4:	9c 01       	movw	r18, r24
    d7a6:	2f 57       	subi	r18, 0x7F	; 127
    d7a8:	3d 4f       	sbci	r19, 0xFD	; 253
    d7aa:	80 91 03 05 	lds	r24, 0x0503
    d7ae:	90 91 04 05 	lds	r25, 0x0504
    d7b2:	a0 91 05 05 	lds	r26, 0x0505
    d7b6:	b0 91 06 05 	lds	r27, 0x0506
    d7ba:	89 01       	movw	r16, r18
    d7bc:	22 e0       	ldi	r18, 0x02	; 2
    d7be:	45 e0       	ldi	r20, 0x05	; 5
    d7c0:	bc 01       	movw	r22, r24
    d7c2:	cd 01       	movw	r24, r26
    d7c4:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    d7c8:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    d7cc:	80 91 2a 06 	lds	r24, 0x062A
    d7d0:	90 91 2b 06 	lds	r25, 0x062B
    d7d4:	8f 57       	subi	r24, 0x7F	; 127
    d7d6:	9d 4f       	sbci	r25, 0xFD	; 253
    d7d8:	bc 01       	movw	r22, r24
    d7da:	80 ee       	ldi	r24, 0xE0	; 224
    d7dc:	95 e0       	ldi	r25, 0x05	; 5
    d7de:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    d7e2:	89 2b       	or	r24, r25
    d7e4:	09 f4       	brne	.+2      	; 0xd7e8 <Terminal+0x3692>
    d7e6:	02 c1       	rjmp	.+516    	; 0xd9ec <Terminal+0x3896>
					if (uRangoCond2 == COND_20_2500_G){
    d7e8:	80 91 1d 06 	lds	r24, 0x061D
    d7ec:	90 91 1e 06 	lds	r25, 0x061E
    d7f0:	01 97       	sbiw	r24, 0x01	; 1
    d7f2:	69 f4       	brne	.+26     	; 0xd80e <Terminal+0x36b8>
						flCond2auS = DEFAULT_COND202500G_A_US;
    d7f4:	8c e9       	ldi	r24, 0x9C	; 156
    d7f6:	92 ea       	ldi	r25, 0xA2	; 162
    d7f8:	ab e0       	ldi	r26, 0x0B	; 11
    d7fa:	b0 e4       	ldi	r27, 0x40	; 64
    d7fc:	80 93 93 05 	sts	0x0593, r24
    d800:	90 93 94 05 	sts	0x0594, r25
    d804:	a0 93 95 05 	sts	0x0595, r26
    d808:	b0 93 96 05 	sts	0x0596, r27
    d80c:	5e c0       	rjmp	.+188    	; 0xd8ca <Terminal+0x3774>
					}
					else if (uRangoCond2 == COND_0_20_G){
    d80e:	80 91 1d 06 	lds	r24, 0x061D
    d812:	90 91 1e 06 	lds	r25, 0x061E
    d816:	02 97       	sbiw	r24, 0x02	; 2
    d818:	69 f4       	brne	.+26     	; 0xd834 <Terminal+0x36de>
						flCond2auS = DEFAULT_COND020G_A_US;
    d81a:	8d e4       	ldi	r24, 0x4D	; 77
    d81c:	95 e1       	ldi	r25, 0x15	; 21
    d81e:	ac e8       	ldi	r26, 0x8C	; 140
    d820:	bc e3       	ldi	r27, 0x3C	; 60
    d822:	80 93 93 05 	sts	0x0593, r24
    d826:	90 93 94 05 	sts	0x0594, r25
    d82a:	a0 93 95 05 	sts	0x0595, r26
    d82e:	b0 93 96 05 	sts	0x0596, r27
    d832:	4b c0       	rjmp	.+150    	; 0xd8ca <Terminal+0x3774>
					}
					else if (uRangoCond2 == COND_2_200_G){
    d834:	80 91 1d 06 	lds	r24, 0x061D
    d838:	90 91 1e 06 	lds	r25, 0x061E
    d83c:	03 97       	sbiw	r24, 0x03	; 3
    d83e:	69 f4       	brne	.+26     	; 0xd85a <Terminal+0x3704>
						flCond2auS = DEFAULT_COND2200G_A_US;
    d840:	89 e6       	ldi	r24, 0x69	; 105
    d842:	9f e6       	ldi	r25, 0x6F	; 111
    d844:	a0 e3       	ldi	r26, 0x30	; 48
    d846:	be e3       	ldi	r27, 0x3E	; 62
    d848:	80 93 93 05 	sts	0x0593, r24
    d84c:	90 93 94 05 	sts	0x0594, r25
    d850:	a0 93 95 05 	sts	0x0595, r26
    d854:	b0 93 96 05 	sts	0x0596, r27
    d858:	38 c0       	rjmp	.+112    	; 0xd8ca <Terminal+0x3774>
					}
					else if (uRangoCond2 == COND_20_2500_C){
    d85a:	80 91 1d 06 	lds	r24, 0x061D
    d85e:	90 91 1e 06 	lds	r25, 0x061E
    d862:	04 97       	sbiw	r24, 0x04	; 4
    d864:	69 f4       	brne	.+26     	; 0xd880 <Terminal+0x372a>
						flCond2auS = DEFAULT_COND202500C_A_US;
    d866:	87 ec       	ldi	r24, 0xC7	; 199
    d868:	9a eb       	ldi	r25, 0xBA	; 186
    d86a:	a8 e2       	ldi	r26, 0x28	; 40
    d86c:	b0 e4       	ldi	r27, 0x40	; 64
    d86e:	80 93 93 05 	sts	0x0593, r24
    d872:	90 93 94 05 	sts	0x0594, r25
    d876:	a0 93 95 05 	sts	0x0595, r26
    d87a:	b0 93 96 05 	sts	0x0596, r27
    d87e:	25 c0       	rjmp	.+74     	; 0xd8ca <Terminal+0x3774>
					}
					else if (uRangoCond2 == COND_0_20_C){
    d880:	80 91 1d 06 	lds	r24, 0x061D
    d884:	90 91 1e 06 	lds	r25, 0x061E
    d888:	05 97       	sbiw	r24, 0x05	; 5
    d88a:	69 f4       	brne	.+26     	; 0xd8a6 <Terminal+0x3750>
						flCond2auS = DEFAULT_COND020C_A_US;
    d88c:	87 ee       	ldi	r24, 0xE7	; 231
    d88e:	9d e1       	ldi	r25, 0x1D	; 29
    d890:	a7 ea       	ldi	r26, 0xA7	; 167
    d892:	bc e3       	ldi	r27, 0x3C	; 60
    d894:	80 93 93 05 	sts	0x0593, r24
    d898:	90 93 94 05 	sts	0x0594, r25
    d89c:	a0 93 95 05 	sts	0x0595, r26
    d8a0:	b0 93 96 05 	sts	0x0596, r27
    d8a4:	12 c0       	rjmp	.+36     	; 0xd8ca <Terminal+0x3774>
					}
					else if (uRangoCond2 == COND_2_200_C){
    d8a6:	80 91 1d 06 	lds	r24, 0x061D
    d8aa:	90 91 1e 06 	lds	r25, 0x061E
    d8ae:	06 97       	sbiw	r24, 0x06	; 6
    d8b0:	61 f4       	brne	.+24     	; 0xd8ca <Terminal+0x3774>
						flCond2auS = DEFAULT_COND2200C_A_US;
    d8b2:	83 e0       	ldi	r24, 0x03	; 3
    d8b4:	99 e0       	ldi	r25, 0x09	; 9
    d8b6:	aa e4       	ldi	r26, 0x4A	; 74
    d8b8:	be e3       	ldi	r27, 0x3E	; 62
    d8ba:	80 93 93 05 	sts	0x0593, r24
    d8be:	90 93 94 05 	sts	0x0594, r25
    d8c2:	a0 93 95 05 	sts	0x0595, r26
    d8c6:	b0 93 96 05 	sts	0x0596, r27
					}

					Float_a_Eeprom(&flCond2auS_Eeprom, &flCond2auS);
    d8ca:	63 e9       	ldi	r22, 0x93	; 147
    d8cc:	75 e0       	ldi	r23, 0x05	; 5
    d8ce:	84 e8       	ldi	r24, 0x84	; 132
    d8d0:	94 e0       	ldi	r25, 0x04	; 4
    d8d2:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flCond2auS_Eeprom_BK, &flCond2auS);
    d8d6:	63 e9       	ldi	r22, 0x93	; 147
    d8d8:	75 e0       	ldi	r23, 0x05	; 5
    d8da:	8c e8       	ldi	r24, 0x8C	; 140
    d8dc:	94 e0       	ldi	r25, 0x04	; 4
    d8de:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    d8e2:	82 e0       	ldi	r24, 0x02	; 2
    d8e4:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_Cond_2);
    d8e8:	80 ea       	ldi	r24, 0xA0	; 160
    d8ea:	96 e0       	ldi	r25, 0x06	; 6
    d8ec:	89 2f       	mov	r24, r25
    d8ee:	8f 93       	push	r24
    d8f0:	80 ea       	ldi	r24, 0xA0	; 160
    d8f2:	96 e0       	ldi	r25, 0x06	; 6
    d8f4:	8f 93       	push	r24
    d8f6:	87 ef       	ldi	r24, 0xF7	; 247
    d8f8:	91 e0       	ldi	r25, 0x01	; 1
    d8fa:	89 2f       	mov	r24, r25
    d8fc:	8f 93       	push	r24
    d8fe:	87 ef       	ldi	r24, 0xF7	; 247
    d900:	91 e0       	ldi	r25, 0x01	; 1
    d902:	8f 93       	push	r24
    d904:	81 e8       	ldi	r24, 0x81	; 129
    d906:	92 e0       	ldi	r25, 0x02	; 2
    d908:	89 2f       	mov	r24, r25
    d90a:	8f 93       	push	r24
    d90c:	81 e8       	ldi	r24, 0x81	; 129
    d90e:	92 e0       	ldi	r25, 0x02	; 2
    d910:	8f 93       	push	r24
    d912:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    d916:	0f 90       	pop	r0
    d918:	0f 90       	pop	r0
    d91a:	0f 90       	pop	r0
    d91c:	0f 90       	pop	r0
    d91e:	0f 90       	pop	r0
    d920:	0f 90       	pop	r0
    d922:	90 93 2b 06 	sts	0x062B, r25
    d926:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond2auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    d92a:	80 91 2a 06 	lds	r24, 0x062A
    d92e:	90 91 2b 06 	lds	r25, 0x062B
    d932:	9c 01       	movw	r18, r24
    d934:	2f 57       	subi	r18, 0x7F	; 127
    d936:	3d 4f       	sbci	r19, 0xFD	; 253
    d938:	80 91 93 05 	lds	r24, 0x0593
    d93c:	90 91 94 05 	lds	r25, 0x0594
    d940:	a0 91 95 05 	lds	r26, 0x0595
    d944:	b0 91 96 05 	lds	r27, 0x0596
    d948:	89 01       	movw	r16, r18
    d94a:	24 e0       	ldi	r18, 0x04	; 4
    d94c:	47 e0       	ldi	r20, 0x07	; 7
    d94e:	bc 01       	movw	r22, r24
    d950:	cd 01       	movw	r24, r26
    d952:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    d956:	80 91 2a 06 	lds	r24, 0x062A
    d95a:	90 91 2b 06 	lds	r25, 0x062B
    d95e:	07 96       	adiw	r24, 0x07	; 7
    d960:	90 93 2b 06 	sts	0x062B, r25
    d964:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    d968:	80 91 2a 06 	lds	r24, 0x062A
    d96c:	90 91 2b 06 	lds	r25, 0x062B
    d970:	8f 57       	subi	r24, 0x7F	; 127
    d972:	9d 4f       	sbci	r25, 0xFD	; 253
    d974:	27 e9       	ldi	r18, 0x97	; 151
    d976:	37 e0       	ldi	r19, 0x07	; 7
    d978:	23 2f       	mov	r18, r19
    d97a:	2f 93       	push	r18
    d97c:	27 e9       	ldi	r18, 0x97	; 151
    d97e:	37 e0       	ldi	r19, 0x07	; 7
    d980:	2f 93       	push	r18
    d982:	2c ef       	ldi	r18, 0xFC	; 252
    d984:	31 e0       	ldi	r19, 0x01	; 1
    d986:	23 2f       	mov	r18, r19
    d988:	2f 93       	push	r18
    d98a:	2c ef       	ldi	r18, 0xFC	; 252
    d98c:	31 e0       	ldi	r19, 0x01	; 1
    d98e:	2f 93       	push	r18
    d990:	29 2f       	mov	r18, r25
    d992:	2f 93       	push	r18
    d994:	8f 93       	push	r24
    d996:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    d99a:	0f 90       	pop	r0
    d99c:	0f 90       	pop	r0
    d99e:	0f 90       	pop	r0
    d9a0:	0f 90       	pop	r0
    d9a2:	0f 90       	pop	r0
    d9a4:	0f 90       	pop	r0
    d9a6:	9c 01       	movw	r18, r24
    d9a8:	80 91 2a 06 	lds	r24, 0x062A
    d9ac:	90 91 2b 06 	lds	r25, 0x062B
    d9b0:	82 0f       	add	r24, r18
    d9b2:	93 1f       	adc	r25, r19
    d9b4:	90 93 2b 06 	sts	0x062B, r25
    d9b8:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond2, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    d9bc:	80 91 2a 06 	lds	r24, 0x062A
    d9c0:	90 91 2b 06 	lds	r25, 0x062B
    d9c4:	9c 01       	movw	r18, r24
    d9c6:	2f 57       	subi	r18, 0x7F	; 127
    d9c8:	3d 4f       	sbci	r19, 0xFD	; 253
    d9ca:	80 91 03 05 	lds	r24, 0x0503
    d9ce:	90 91 04 05 	lds	r25, 0x0504
    d9d2:	a0 91 05 05 	lds	r26, 0x0505
    d9d6:	b0 91 06 05 	lds	r27, 0x0506
    d9da:	89 01       	movw	r16, r18
    d9dc:	22 e0       	ldi	r18, 0x02	; 2
    d9de:	45 e0       	ldi	r20, 0x05	; 5
    d9e0:	bc 01       	movw	r22, r24
    d9e2:	cd 01       	movw	r24, r26
    d9e4:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    d9e8:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_Cond_2);
    d9ec:	80 ea       	ldi	r24, 0xA0	; 160
    d9ee:	96 e0       	ldi	r25, 0x06	; 6
    d9f0:	89 2f       	mov	r24, r25
    d9f2:	8f 93       	push	r24
    d9f4:	80 ea       	ldi	r24, 0xA0	; 160
    d9f6:	96 e0       	ldi	r25, 0x06	; 6
    d9f8:	8f 93       	push	r24
    d9fa:	87 ef       	ldi	r24, 0xF7	; 247
    d9fc:	91 e0       	ldi	r25, 0x01	; 1
    d9fe:	89 2f       	mov	r24, r25
    da00:	8f 93       	push	r24
    da02:	87 ef       	ldi	r24, 0xF7	; 247
    da04:	91 e0       	ldi	r25, 0x01	; 1
    da06:	8f 93       	push	r24
    da08:	81 e8       	ldi	r24, 0x81	; 129
    da0a:	92 e0       	ldi	r25, 0x02	; 2
    da0c:	89 2f       	mov	r24, r25
    da0e:	8f 93       	push	r24
    da10:	81 e8       	ldi	r24, 0x81	; 129
    da12:	92 e0       	ldi	r25, 0x02	; 2
    da14:	8f 93       	push	r24
    da16:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    da1a:	0f 90       	pop	r0
    da1c:	0f 90       	pop	r0
    da1e:	0f 90       	pop	r0
    da20:	0f 90       	pop	r0
    da22:	0f 90       	pop	r0
    da24:	0f 90       	pop	r0
    da26:	90 93 2b 06 	sts	0x062B, r25
    da2a:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flCond2auS, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    da2e:	80 91 2a 06 	lds	r24, 0x062A
    da32:	90 91 2b 06 	lds	r25, 0x062B
    da36:	9c 01       	movw	r18, r24
    da38:	2f 57       	subi	r18, 0x7F	; 127
    da3a:	3d 4f       	sbci	r19, 0xFD	; 253
    da3c:	80 91 93 05 	lds	r24, 0x0593
    da40:	90 91 94 05 	lds	r25, 0x0594
    da44:	a0 91 95 05 	lds	r26, 0x0595
    da48:	b0 91 96 05 	lds	r27, 0x0596
    da4c:	89 01       	movw	r16, r18
    da4e:	24 e0       	ldi	r18, 0x04	; 4
    da50:	47 e0       	ldi	r20, 0x07	; 7
    da52:	bc 01       	movw	r22, r24
    da54:	cd 01       	movw	r24, r26
    da56:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
					auxIndexTerminal += 7;
    da5a:	80 91 2a 06 	lds	r24, 0x062A
    da5e:	90 91 2b 06 	lds	r25, 0x062B
    da62:	07 96       	adiw	r24, 0x07	; 7
    da64:	90 93 2b 06 	sts	0x062B, r25
    da68:	80 93 2a 06 	sts	0x062A, r24
					auxIndexTerminal += sprintf(chBufferRx_USART0+auxIndexTerminal, " ; %S: ", (wchar_t*)MSG_Offset);
    da6c:	80 91 2a 06 	lds	r24, 0x062A
    da70:	90 91 2b 06 	lds	r25, 0x062B
    da74:	8f 57       	subi	r24, 0x7F	; 127
    da76:	9d 4f       	sbci	r25, 0xFD	; 253
    da78:	27 e9       	ldi	r18, 0x97	; 151
    da7a:	37 e0       	ldi	r19, 0x07	; 7
    da7c:	23 2f       	mov	r18, r19
    da7e:	2f 93       	push	r18
    da80:	27 e9       	ldi	r18, 0x97	; 151
    da82:	37 e0       	ldi	r19, 0x07	; 7
    da84:	2f 93       	push	r18
    da86:	2c ef       	ldi	r18, 0xFC	; 252
    da88:	31 e0       	ldi	r19, 0x01	; 1
    da8a:	23 2f       	mov	r18, r19
    da8c:	2f 93       	push	r18
    da8e:	2c ef       	ldi	r18, 0xFC	; 252
    da90:	31 e0       	ldi	r19, 0x01	; 1
    da92:	2f 93       	push	r18
    da94:	29 2f       	mov	r18, r25
    da96:	2f 93       	push	r18
    da98:	8f 93       	push	r24
    da9a:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    da9e:	0f 90       	pop	r0
    daa0:	0f 90       	pop	r0
    daa2:	0f 90       	pop	r0
    daa4:	0f 90       	pop	r0
    daa6:	0f 90       	pop	r0
    daa8:	0f 90       	pop	r0
    daaa:	9c 01       	movw	r18, r24
    daac:	80 91 2a 06 	lds	r24, 0x062A
    dab0:	90 91 2b 06 	lds	r25, 0x062B
    dab4:	82 0f       	add	r24, r18
    dab6:	93 1f       	adc	r25, r19
    dab8:	90 93 2b 06 	sts	0x062B, r25
    dabc:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flOffsetCond2, 5, 2, chBufferRx_USART0+auxIndexTerminal);
    dac0:	80 91 2a 06 	lds	r24, 0x062A
    dac4:	90 91 2b 06 	lds	r25, 0x062B
    dac8:	9c 01       	movw	r18, r24
    daca:	2f 57       	subi	r18, 0x7F	; 127
    dacc:	3d 4f       	sbci	r19, 0xFD	; 253
    dace:	80 91 03 05 	lds	r24, 0x0503
    dad2:	90 91 04 05 	lds	r25, 0x0504
    dad6:	a0 91 05 05 	lds	r26, 0x0505
    dada:	b0 91 06 05 	lds	r27, 0x0506
    dade:	89 01       	movw	r16, r18
    dae0:	22 e0       	ldi	r18, 0x02	; 2
    dae2:	45 e0       	ldi	r20, 0x05	; 5
    dae4:	bc 01       	movw	r22, r24
    dae6:	cd 01       	movw	r24, r26
    dae8:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    daec:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = AUTOCAL PWM 1 xx.xx\0
			else if (Detectar_Comando_Buffer_P(Comando_Autocal_PWM_1, chBufferRx_USART0)) {
    daf0:	61 e8       	ldi	r22, 0x81	; 129
    daf2:	72 e0       	ldi	r23, 0x02	; 2
    daf4:	8c ea       	ldi	r24, 0xAC	; 172
    daf6:	96 e0       	ldi	r25, 0x06	; 6
    daf8:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    dafc:	89 2b       	or	r24, r25
    dafe:	09 f4       	brne	.+2      	; 0xdb02 <Terminal+0x39ac>
    db00:	36 c1       	rjmp	.+620    	; 0xdd6e <Terminal+0x3c18>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    db02:	80 91 2a 06 	lds	r24, 0x062A
    db06:	90 91 2b 06 	lds	r25, 0x062B
    db0a:	8f 57       	subi	r24, 0x7F	; 127
    db0c:	9d 4f       	sbci	r25, 0xFD	; 253
    db0e:	fc 01       	movw	r30, r24
    db10:	80 81       	ld	r24, Z
    db12:	80 33       	cpi	r24, 0x30	; 48
    db14:	08 f4       	brcc	.+2      	; 0xdb18 <Terminal+0x39c2>
    db16:	90 c0       	rjmp	.+288    	; 0xdc38 <Terminal+0x3ae2>
    db18:	80 91 2a 06 	lds	r24, 0x062A
    db1c:	90 91 2b 06 	lds	r25, 0x062B
    db20:	8f 57       	subi	r24, 0x7F	; 127
    db22:	9d 4f       	sbci	r25, 0xFD	; 253
    db24:	fc 01       	movw	r30, r24
    db26:	80 81       	ld	r24, Z
    db28:	8a 33       	cpi	r24, 0x3A	; 58
    db2a:	08 f0       	brcs	.+2      	; 0xdb2e <Terminal+0x39d8>
    db2c:	85 c0       	rjmp	.+266    	; 0xdc38 <Terminal+0x3ae2>
					float flValorReal = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    db2e:	80 91 2a 06 	lds	r24, 0x062A
    db32:	90 91 2b 06 	lds	r25, 0x062B
    db36:	8f 57       	subi	r24, 0x7F	; 127
    db38:	9d 4f       	sbci	r25, 0xFD	; 253
    db3a:	68 ec       	ldi	r22, 0xC8	; 200
    db3c:	70 e0       	ldi	r23, 0x00	; 0
    db3e:	0e 94 5e 80 	call	0x100bc	; 0x100bc <From_String_to_Float>
    db42:	dc 01       	movw	r26, r24
    db44:	cb 01       	movw	r24, r22
    db46:	8b 87       	std	Y+11, r24	; 0x0b
    db48:	9c 87       	std	Y+12, r25	; 0x0c
    db4a:	ad 87       	std	Y+13, r26	; 0x0d
    db4c:	be 87       	std	Y+14, r27	; 0x0e

//					if ((flValorReal > I_MIN_MA) && (flValorReal < I_MAX_MA)){
						flPWM1aMA *= flPWM1valorMA/flValorReal;
    db4e:	80 91 13 06 	lds	r24, 0x0613
    db52:	90 91 14 06 	lds	r25, 0x0614
    db56:	a0 91 15 06 	lds	r26, 0x0615
    db5a:	b0 91 16 06 	lds	r27, 0x0616
    db5e:	2b 85       	ldd	r18, Y+11	; 0x0b
    db60:	3c 85       	ldd	r19, Y+12	; 0x0c
    db62:	4d 85       	ldd	r20, Y+13	; 0x0d
    db64:	5e 85       	ldd	r21, Y+14	; 0x0e
    db66:	bc 01       	movw	r22, r24
    db68:	cd 01       	movw	r24, r26
    db6a:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    db6e:	dc 01       	movw	r26, r24
    db70:	cb 01       	movw	r24, r22
    db72:	7c 01       	movw	r14, r24
    db74:	8d 01       	movw	r16, r26
    db76:	80 91 09 05 	lds	r24, 0x0509
    db7a:	90 91 0a 05 	lds	r25, 0x050A
    db7e:	a0 91 0b 05 	lds	r26, 0x050B
    db82:	b0 91 0c 05 	lds	r27, 0x050C
    db86:	9c 01       	movw	r18, r24
    db88:	ad 01       	movw	r20, r26
    db8a:	c8 01       	movw	r24, r16
    db8c:	b7 01       	movw	r22, r14
    db8e:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    db92:	dc 01       	movw	r26, r24
    db94:	cb 01       	movw	r24, r22
    db96:	80 93 09 05 	sts	0x0509, r24
    db9a:	90 93 0a 05 	sts	0x050A, r25
    db9e:	a0 93 0b 05 	sts	0x050B, r26
    dba2:	b0 93 0c 05 	sts	0x050C, r27

						Float_a_Eeprom(&flPWM1aMA_Eeprom, &flPWM1aMA);
    dba6:	69 e0       	ldi	r22, 0x09	; 9
    dba8:	75 e0       	ldi	r23, 0x05	; 5
    dbaa:	80 e7       	ldi	r24, 0x70	; 112
    dbac:	94 e0       	ldi	r25, 0x04	; 4
    dbae:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
						Float_a_Eeprom(&flPWM1aMA_Eeprom_BK, &flPWM1aMA);
    dbb2:	69 e0       	ldi	r22, 0x09	; 9
    dbb4:	75 e0       	ldi	r23, 0x05	; 5
    dbb6:	8a ec       	ldi	r24, 0xCA	; 202
    dbb8:	94 e0       	ldi	r25, 0x04	; 4
    dbba:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
						Escribir_Checksum_Eeprom (GRUPO_ADC);
    dbbe:	82 e0       	ldi	r24, 0x02	; 2
    dbc0:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

						auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Autocal_PWM_1);
    dbc4:	8c ea       	ldi	r24, 0xAC	; 172
    dbc6:	96 e0       	ldi	r25, 0x06	; 6
    dbc8:	89 2f       	mov	r24, r25
    dbca:	8f 93       	push	r24
    dbcc:	8c ea       	ldi	r24, 0xAC	; 172
    dbce:	96 e0       	ldi	r25, 0x06	; 6
    dbd0:	8f 93       	push	r24
    dbd2:	87 ef       	ldi	r24, 0xF7	; 247
    dbd4:	91 e0       	ldi	r25, 0x01	; 1
    dbd6:	89 2f       	mov	r24, r25
    dbd8:	8f 93       	push	r24
    dbda:	87 ef       	ldi	r24, 0xF7	; 247
    dbdc:	91 e0       	ldi	r25, 0x01	; 1
    dbde:	8f 93       	push	r24
    dbe0:	81 e8       	ldi	r24, 0x81	; 129
    dbe2:	92 e0       	ldi	r25, 0x02	; 2
    dbe4:	89 2f       	mov	r24, r25
    dbe6:	8f 93       	push	r24
    dbe8:	81 e8       	ldi	r24, 0x81	; 129
    dbea:	92 e0       	ldi	r25, 0x02	; 2
    dbec:	8f 93       	push	r24
    dbee:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    dbf2:	0f 90       	pop	r0
    dbf4:	0f 90       	pop	r0
    dbf6:	0f 90       	pop	r0
    dbf8:	0f 90       	pop	r0
    dbfa:	0f 90       	pop	r0
    dbfc:	0f 90       	pop	r0
    dbfe:	90 93 2b 06 	sts	0x062B, r25
    dc02:	80 93 2a 06 	sts	0x062A, r24
						dtostrf(flPWM1aMA, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    dc06:	80 91 2a 06 	lds	r24, 0x062A
    dc0a:	90 91 2b 06 	lds	r25, 0x062B
    dc0e:	9c 01       	movw	r18, r24
    dc10:	2f 57       	subi	r18, 0x7F	; 127
    dc12:	3d 4f       	sbci	r19, 0xFD	; 253
    dc14:	80 91 09 05 	lds	r24, 0x0509
    dc18:	90 91 0a 05 	lds	r25, 0x050A
    dc1c:	a0 91 0b 05 	lds	r26, 0x050B
    dc20:	b0 91 0c 05 	lds	r27, 0x050C
    dc24:	89 01       	movw	r16, r18
    dc26:	24 e0       	ldi	r18, 0x04	; 4
    dc28:	47 e0       	ldi	r20, 0x07	; 7
    dc2a:	bc 01       	movw	r22, r24
    dc2c:	cd 01       	movw	r24, r26
    dc2e:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
			}


			// chBufferRx_USART0 = AUTOCAL PWM 1 xx.xx\0
			else if (Detectar_Comando_Buffer_P(Comando_Autocal_PWM_1, chBufferRx_USART0)) {
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    dc32:	00 00       	nop
    dc34:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//					}
//					else {
//						auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Autocal_PWM_1, (wchar_t*) MSG_FueraDeRango);
//					}
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    dc38:	80 91 2a 06 	lds	r24, 0x062A
    dc3c:	90 91 2b 06 	lds	r25, 0x062B
    dc40:	8f 57       	subi	r24, 0x7F	; 127
    dc42:	9d 4f       	sbci	r25, 0xFD	; 253
    dc44:	bc 01       	movw	r22, r24
    dc46:	80 ee       	ldi	r24, 0xE0	; 224
    dc48:	95 e0       	ldi	r25, 0x05	; 5
    dc4a:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    dc4e:	89 2b       	or	r24, r25
    dc50:	09 f4       	brne	.+2      	; 0xdc54 <Terminal+0x3afe>
    dc52:	54 c0       	rjmp	.+168    	; 0xdcfc <Terminal+0x3ba6>
					flPWM1aMA = DEFAULT_PWM1_A_MA;
    dc54:	8d ec       	ldi	r24, 0xCD	; 205
    dc56:	9c ec       	ldi	r25, 0xCC	; 204
    dc58:	ac e4       	ldi	r26, 0x4C	; 76
    dc5a:	b2 e4       	ldi	r27, 0x42	; 66
    dc5c:	80 93 09 05 	sts	0x0509, r24
    dc60:	90 93 0a 05 	sts	0x050A, r25
    dc64:	a0 93 0b 05 	sts	0x050B, r26
    dc68:	b0 93 0c 05 	sts	0x050C, r27

					Float_a_Eeprom(&flPWM1aMA_Eeprom, &flPWM1aMA);
    dc6c:	69 e0       	ldi	r22, 0x09	; 9
    dc6e:	75 e0       	ldi	r23, 0x05	; 5
    dc70:	80 e7       	ldi	r24, 0x70	; 112
    dc72:	94 e0       	ldi	r25, 0x04	; 4
    dc74:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flPWM1aMA_Eeprom_BK, &flPWM1aMA);
    dc78:	69 e0       	ldi	r22, 0x09	; 9
    dc7a:	75 e0       	ldi	r23, 0x05	; 5
    dc7c:	8a ec       	ldi	r24, 0xCA	; 202
    dc7e:	94 e0       	ldi	r25, 0x04	; 4
    dc80:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    dc84:	82 e0       	ldi	r24, 0x02	; 2
    dc86:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Autocal_PWM_1);
    dc8a:	8c ea       	ldi	r24, 0xAC	; 172
    dc8c:	96 e0       	ldi	r25, 0x06	; 6
    dc8e:	89 2f       	mov	r24, r25
    dc90:	8f 93       	push	r24
    dc92:	8c ea       	ldi	r24, 0xAC	; 172
    dc94:	96 e0       	ldi	r25, 0x06	; 6
    dc96:	8f 93       	push	r24
    dc98:	87 ef       	ldi	r24, 0xF7	; 247
    dc9a:	91 e0       	ldi	r25, 0x01	; 1
    dc9c:	89 2f       	mov	r24, r25
    dc9e:	8f 93       	push	r24
    dca0:	87 ef       	ldi	r24, 0xF7	; 247
    dca2:	91 e0       	ldi	r25, 0x01	; 1
    dca4:	8f 93       	push	r24
    dca6:	81 e8       	ldi	r24, 0x81	; 129
    dca8:	92 e0       	ldi	r25, 0x02	; 2
    dcaa:	89 2f       	mov	r24, r25
    dcac:	8f 93       	push	r24
    dcae:	81 e8       	ldi	r24, 0x81	; 129
    dcb0:	92 e0       	ldi	r25, 0x02	; 2
    dcb2:	8f 93       	push	r24
    dcb4:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    dcb8:	0f 90       	pop	r0
    dcba:	0f 90       	pop	r0
    dcbc:	0f 90       	pop	r0
    dcbe:	0f 90       	pop	r0
    dcc0:	0f 90       	pop	r0
    dcc2:	0f 90       	pop	r0
    dcc4:	90 93 2b 06 	sts	0x062B, r25
    dcc8:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flPWM1aMA, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    dccc:	80 91 2a 06 	lds	r24, 0x062A
    dcd0:	90 91 2b 06 	lds	r25, 0x062B
    dcd4:	9c 01       	movw	r18, r24
    dcd6:	2f 57       	subi	r18, 0x7F	; 127
    dcd8:	3d 4f       	sbci	r19, 0xFD	; 253
    dcda:	80 91 09 05 	lds	r24, 0x0509
    dcde:	90 91 0a 05 	lds	r25, 0x050A
    dce2:	a0 91 0b 05 	lds	r26, 0x050B
    dce6:	b0 91 0c 05 	lds	r27, 0x050C
    dcea:	89 01       	movw	r16, r18
    dcec:	24 e0       	ldi	r18, 0x04	; 4
    dcee:	47 e0       	ldi	r20, 0x07	; 7
    dcf0:	bc 01       	movw	r22, r24
    dcf2:	cd 01       	movw	r24, r26
    dcf4:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    dcf8:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Autocal_PWM_1);
    dcfc:	8c ea       	ldi	r24, 0xAC	; 172
    dcfe:	96 e0       	ldi	r25, 0x06	; 6
    dd00:	89 2f       	mov	r24, r25
    dd02:	8f 93       	push	r24
    dd04:	8c ea       	ldi	r24, 0xAC	; 172
    dd06:	96 e0       	ldi	r25, 0x06	; 6
    dd08:	8f 93       	push	r24
    dd0a:	87 ef       	ldi	r24, 0xF7	; 247
    dd0c:	91 e0       	ldi	r25, 0x01	; 1
    dd0e:	89 2f       	mov	r24, r25
    dd10:	8f 93       	push	r24
    dd12:	87 ef       	ldi	r24, 0xF7	; 247
    dd14:	91 e0       	ldi	r25, 0x01	; 1
    dd16:	8f 93       	push	r24
    dd18:	81 e8       	ldi	r24, 0x81	; 129
    dd1a:	92 e0       	ldi	r25, 0x02	; 2
    dd1c:	89 2f       	mov	r24, r25
    dd1e:	8f 93       	push	r24
    dd20:	81 e8       	ldi	r24, 0x81	; 129
    dd22:	92 e0       	ldi	r25, 0x02	; 2
    dd24:	8f 93       	push	r24
    dd26:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    dd2a:	0f 90       	pop	r0
    dd2c:	0f 90       	pop	r0
    dd2e:	0f 90       	pop	r0
    dd30:	0f 90       	pop	r0
    dd32:	0f 90       	pop	r0
    dd34:	0f 90       	pop	r0
    dd36:	90 93 2b 06 	sts	0x062B, r25
    dd3a:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flPWM1aMA, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    dd3e:	80 91 2a 06 	lds	r24, 0x062A
    dd42:	90 91 2b 06 	lds	r25, 0x062B
    dd46:	9c 01       	movw	r18, r24
    dd48:	2f 57       	subi	r18, 0x7F	; 127
    dd4a:	3d 4f       	sbci	r19, 0xFD	; 253
    dd4c:	80 91 09 05 	lds	r24, 0x0509
    dd50:	90 91 0a 05 	lds	r25, 0x050A
    dd54:	a0 91 0b 05 	lds	r26, 0x050B
    dd58:	b0 91 0c 05 	lds	r27, 0x050C
    dd5c:	89 01       	movw	r16, r18
    dd5e:	24 e0       	ldi	r18, 0x04	; 4
    dd60:	47 e0       	ldi	r20, 0x07	; 7
    dd62:	bc 01       	movw	r22, r24
    dd64:	cd 01       	movw	r24, r26
    dd66:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    dd6a:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = CAL PWM 1 xx.xx\0
			else if (Detectar_Comando_Buffer_P(Comando_Cal_PWM_1, chBufferRx_USART0)) {
    dd6e:	61 e8       	ldi	r22, 0x81	; 129
    dd70:	72 e0       	ldi	r23, 0x02	; 2
    dd72:	8e e7       	ldi	r24, 0x7E	; 126
    dd74:	96 e0       	ldi	r25, 0x06	; 6
    dd76:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    dd7a:	89 2b       	or	r24, r25
    dd7c:	09 f4       	brne	.+2      	; 0xdd80 <Terminal+0x3c2a>
    dd7e:	0d c1       	rjmp	.+538    	; 0xdf9a <Terminal+0x3e44>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    dd80:	80 91 2a 06 	lds	r24, 0x062A
    dd84:	90 91 2b 06 	lds	r25, 0x062B
    dd88:	8f 57       	subi	r24, 0x7F	; 127
    dd8a:	9d 4f       	sbci	r25, 0xFD	; 253
    dd8c:	fc 01       	movw	r30, r24
    dd8e:	80 81       	ld	r24, Z
    dd90:	80 33       	cpi	r24, 0x30	; 48
    dd92:	08 f4       	brcc	.+2      	; 0xdd96 <Terminal+0x3c40>
    dd94:	67 c0       	rjmp	.+206    	; 0xde64 <Terminal+0x3d0e>
    dd96:	80 91 2a 06 	lds	r24, 0x062A
    dd9a:	90 91 2b 06 	lds	r25, 0x062B
    dd9e:	8f 57       	subi	r24, 0x7F	; 127
    dda0:	9d 4f       	sbci	r25, 0xFD	; 253
    dda2:	fc 01       	movw	r30, r24
    dda4:	80 81       	ld	r24, Z
    dda6:	8a 33       	cpi	r24, 0x3A	; 58
    dda8:	08 f0       	brcs	.+2      	; 0xddac <Terminal+0x3c56>
    ddaa:	5c c0       	rjmp	.+184    	; 0xde64 <Terminal+0x3d0e>
					flPWM1aMA = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    ddac:	80 91 2a 06 	lds	r24, 0x062A
    ddb0:	90 91 2b 06 	lds	r25, 0x062B
    ddb4:	8f 57       	subi	r24, 0x7F	; 127
    ddb6:	9d 4f       	sbci	r25, 0xFD	; 253
    ddb8:	68 ec       	ldi	r22, 0xC8	; 200
    ddba:	70 e0       	ldi	r23, 0x00	; 0
    ddbc:	0e 94 5e 80 	call	0x100bc	; 0x100bc <From_String_to_Float>
    ddc0:	dc 01       	movw	r26, r24
    ddc2:	cb 01       	movw	r24, r22
    ddc4:	80 93 09 05 	sts	0x0509, r24
    ddc8:	90 93 0a 05 	sts	0x050A, r25
    ddcc:	a0 93 0b 05 	sts	0x050B, r26
    ddd0:	b0 93 0c 05 	sts	0x050C, r27

					Float_a_Eeprom(&flPWM1aMA_Eeprom, &flPWM1aMA);
    ddd4:	69 e0       	ldi	r22, 0x09	; 9
    ddd6:	75 e0       	ldi	r23, 0x05	; 5
    ddd8:	80 e7       	ldi	r24, 0x70	; 112
    ddda:	94 e0       	ldi	r25, 0x04	; 4
    dddc:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flPWM1aMA_Eeprom_BK, &flPWM1aMA);
    dde0:	69 e0       	ldi	r22, 0x09	; 9
    dde2:	75 e0       	ldi	r23, 0x05	; 5
    dde4:	8a ec       	ldi	r24, 0xCA	; 202
    dde6:	94 e0       	ldi	r25, 0x04	; 4
    dde8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    ddec:	82 e0       	ldi	r24, 0x02	; 2
    ddee:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_PWM_1);
    ddf2:	8e e7       	ldi	r24, 0x7E	; 126
    ddf4:	96 e0       	ldi	r25, 0x06	; 6
    ddf6:	89 2f       	mov	r24, r25
    ddf8:	8f 93       	push	r24
    ddfa:	8e e7       	ldi	r24, 0x7E	; 126
    ddfc:	96 e0       	ldi	r25, 0x06	; 6
    ddfe:	8f 93       	push	r24
    de00:	87 ef       	ldi	r24, 0xF7	; 247
    de02:	91 e0       	ldi	r25, 0x01	; 1
    de04:	89 2f       	mov	r24, r25
    de06:	8f 93       	push	r24
    de08:	87 ef       	ldi	r24, 0xF7	; 247
    de0a:	91 e0       	ldi	r25, 0x01	; 1
    de0c:	8f 93       	push	r24
    de0e:	81 e8       	ldi	r24, 0x81	; 129
    de10:	92 e0       	ldi	r25, 0x02	; 2
    de12:	89 2f       	mov	r24, r25
    de14:	8f 93       	push	r24
    de16:	81 e8       	ldi	r24, 0x81	; 129
    de18:	92 e0       	ldi	r25, 0x02	; 2
    de1a:	8f 93       	push	r24
    de1c:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    de20:	0f 90       	pop	r0
    de22:	0f 90       	pop	r0
    de24:	0f 90       	pop	r0
    de26:	0f 90       	pop	r0
    de28:	0f 90       	pop	r0
    de2a:	0f 90       	pop	r0
    de2c:	90 93 2b 06 	sts	0x062B, r25
    de30:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flPWM1aMA, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    de34:	80 91 2a 06 	lds	r24, 0x062A
    de38:	90 91 2b 06 	lds	r25, 0x062B
    de3c:	9c 01       	movw	r18, r24
    de3e:	2f 57       	subi	r18, 0x7F	; 127
    de40:	3d 4f       	sbci	r19, 0xFD	; 253
    de42:	80 91 09 05 	lds	r24, 0x0509
    de46:	90 91 0a 05 	lds	r25, 0x050A
    de4a:	a0 91 0b 05 	lds	r26, 0x050B
    de4e:	b0 91 0c 05 	lds	r27, 0x050C
    de52:	89 01       	movw	r16, r18
    de54:	24 e0       	ldi	r18, 0x04	; 4
    de56:	47 e0       	ldi	r20, 0x07	; 7
    de58:	bc 01       	movw	r22, r24
    de5a:	cd 01       	movw	r24, r26
    de5c:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    de60:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    de64:	80 91 2a 06 	lds	r24, 0x062A
    de68:	90 91 2b 06 	lds	r25, 0x062B
    de6c:	8f 57       	subi	r24, 0x7F	; 127
    de6e:	9d 4f       	sbci	r25, 0xFD	; 253
    de70:	bc 01       	movw	r22, r24
    de72:	80 ee       	ldi	r24, 0xE0	; 224
    de74:	95 e0       	ldi	r25, 0x05	; 5
    de76:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    de7a:	89 2b       	or	r24, r25
    de7c:	09 f4       	brne	.+2      	; 0xde80 <Terminal+0x3d2a>
    de7e:	54 c0       	rjmp	.+168    	; 0xdf28 <Terminal+0x3dd2>
					flPWM1aMA = DEFAULT_PWM1_A_MA;
    de80:	8d ec       	ldi	r24, 0xCD	; 205
    de82:	9c ec       	ldi	r25, 0xCC	; 204
    de84:	ac e4       	ldi	r26, 0x4C	; 76
    de86:	b2 e4       	ldi	r27, 0x42	; 66
    de88:	80 93 09 05 	sts	0x0509, r24
    de8c:	90 93 0a 05 	sts	0x050A, r25
    de90:	a0 93 0b 05 	sts	0x050B, r26
    de94:	b0 93 0c 05 	sts	0x050C, r27

					Float_a_Eeprom(&flPWM1aMA_Eeprom, &flPWM1aMA);
    de98:	69 e0       	ldi	r22, 0x09	; 9
    de9a:	75 e0       	ldi	r23, 0x05	; 5
    de9c:	80 e7       	ldi	r24, 0x70	; 112
    de9e:	94 e0       	ldi	r25, 0x04	; 4
    dea0:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flPWM1aMA_Eeprom_BK, &flPWM1aMA);
    dea4:	69 e0       	ldi	r22, 0x09	; 9
    dea6:	75 e0       	ldi	r23, 0x05	; 5
    dea8:	8a ec       	ldi	r24, 0xCA	; 202
    deaa:	94 e0       	ldi	r25, 0x04	; 4
    deac:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    deb0:	82 e0       	ldi	r24, 0x02	; 2
    deb2:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_PWM_1);
    deb6:	8e e7       	ldi	r24, 0x7E	; 126
    deb8:	96 e0       	ldi	r25, 0x06	; 6
    deba:	89 2f       	mov	r24, r25
    debc:	8f 93       	push	r24
    debe:	8e e7       	ldi	r24, 0x7E	; 126
    dec0:	96 e0       	ldi	r25, 0x06	; 6
    dec2:	8f 93       	push	r24
    dec4:	87 ef       	ldi	r24, 0xF7	; 247
    dec6:	91 e0       	ldi	r25, 0x01	; 1
    dec8:	89 2f       	mov	r24, r25
    deca:	8f 93       	push	r24
    decc:	87 ef       	ldi	r24, 0xF7	; 247
    dece:	91 e0       	ldi	r25, 0x01	; 1
    ded0:	8f 93       	push	r24
    ded2:	81 e8       	ldi	r24, 0x81	; 129
    ded4:	92 e0       	ldi	r25, 0x02	; 2
    ded6:	89 2f       	mov	r24, r25
    ded8:	8f 93       	push	r24
    deda:	81 e8       	ldi	r24, 0x81	; 129
    dedc:	92 e0       	ldi	r25, 0x02	; 2
    dede:	8f 93       	push	r24
    dee0:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    dee4:	0f 90       	pop	r0
    dee6:	0f 90       	pop	r0
    dee8:	0f 90       	pop	r0
    deea:	0f 90       	pop	r0
    deec:	0f 90       	pop	r0
    deee:	0f 90       	pop	r0
    def0:	90 93 2b 06 	sts	0x062B, r25
    def4:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flPWM1aMA, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    def8:	80 91 2a 06 	lds	r24, 0x062A
    defc:	90 91 2b 06 	lds	r25, 0x062B
    df00:	9c 01       	movw	r18, r24
    df02:	2f 57       	subi	r18, 0x7F	; 127
    df04:	3d 4f       	sbci	r19, 0xFD	; 253
    df06:	80 91 09 05 	lds	r24, 0x0509
    df0a:	90 91 0a 05 	lds	r25, 0x050A
    df0e:	a0 91 0b 05 	lds	r26, 0x050B
    df12:	b0 91 0c 05 	lds	r27, 0x050C
    df16:	89 01       	movw	r16, r18
    df18:	24 e0       	ldi	r18, 0x04	; 4
    df1a:	47 e0       	ldi	r20, 0x07	; 7
    df1c:	bc 01       	movw	r22, r24
    df1e:	cd 01       	movw	r24, r26
    df20:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    df24:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_PWM_1);
    df28:	8e e7       	ldi	r24, 0x7E	; 126
    df2a:	96 e0       	ldi	r25, 0x06	; 6
    df2c:	89 2f       	mov	r24, r25
    df2e:	8f 93       	push	r24
    df30:	8e e7       	ldi	r24, 0x7E	; 126
    df32:	96 e0       	ldi	r25, 0x06	; 6
    df34:	8f 93       	push	r24
    df36:	87 ef       	ldi	r24, 0xF7	; 247
    df38:	91 e0       	ldi	r25, 0x01	; 1
    df3a:	89 2f       	mov	r24, r25
    df3c:	8f 93       	push	r24
    df3e:	87 ef       	ldi	r24, 0xF7	; 247
    df40:	91 e0       	ldi	r25, 0x01	; 1
    df42:	8f 93       	push	r24
    df44:	81 e8       	ldi	r24, 0x81	; 129
    df46:	92 e0       	ldi	r25, 0x02	; 2
    df48:	89 2f       	mov	r24, r25
    df4a:	8f 93       	push	r24
    df4c:	81 e8       	ldi	r24, 0x81	; 129
    df4e:	92 e0       	ldi	r25, 0x02	; 2
    df50:	8f 93       	push	r24
    df52:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    df56:	0f 90       	pop	r0
    df58:	0f 90       	pop	r0
    df5a:	0f 90       	pop	r0
    df5c:	0f 90       	pop	r0
    df5e:	0f 90       	pop	r0
    df60:	0f 90       	pop	r0
    df62:	90 93 2b 06 	sts	0x062B, r25
    df66:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flPWM1aMA, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    df6a:	80 91 2a 06 	lds	r24, 0x062A
    df6e:	90 91 2b 06 	lds	r25, 0x062B
    df72:	9c 01       	movw	r18, r24
    df74:	2f 57       	subi	r18, 0x7F	; 127
    df76:	3d 4f       	sbci	r19, 0xFD	; 253
    df78:	80 91 09 05 	lds	r24, 0x0509
    df7c:	90 91 0a 05 	lds	r25, 0x050A
    df80:	a0 91 0b 05 	lds	r26, 0x050B
    df84:	b0 91 0c 05 	lds	r27, 0x050C
    df88:	89 01       	movw	r16, r18
    df8a:	24 e0       	ldi	r18, 0x04	; 4
    df8c:	47 e0       	ldi	r20, 0x07	; 7
    df8e:	bc 01       	movw	r22, r24
    df90:	cd 01       	movw	r24, r26
    df92:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    df96:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = AUTOCAL PWM 2 xx.xx\0
			else if (Detectar_Comando_Buffer_P(Comando_Autocal_PWM_2, chBufferRx_USART0)) {
    df9a:	61 e8       	ldi	r22, 0x81	; 129
    df9c:	72 e0       	ldi	r23, 0x02	; 2
    df9e:	8b eb       	ldi	r24, 0xBB	; 187
    dfa0:	96 e0       	ldi	r25, 0x06	; 6
    dfa2:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    dfa6:	89 2b       	or	r24, r25
    dfa8:	09 f4       	brne	.+2      	; 0xdfac <Terminal+0x3e56>
    dfaa:	41 c1       	rjmp	.+642    	; 0xe22e <Terminal+0x40d8>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) != '\0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    dfac:	80 91 2a 06 	lds	r24, 0x062A
    dfb0:	90 91 2b 06 	lds	r25, 0x062B
    dfb4:	8f 57       	subi	r24, 0x7F	; 127
    dfb6:	9d 4f       	sbci	r25, 0xFD	; 253
    dfb8:	fc 01       	movw	r30, r24
    dfba:	80 81       	ld	r24, Z
    dfbc:	80 33       	cpi	r24, 0x30	; 48
    dfbe:	08 f4       	brcc	.+2      	; 0xdfc2 <Terminal+0x3e6c>
    dfc0:	9b c0       	rjmp	.+310    	; 0xe0f8 <Terminal+0x3fa2>
    dfc2:	80 91 2a 06 	lds	r24, 0x062A
    dfc6:	90 91 2b 06 	lds	r25, 0x062B
    dfca:	8f 57       	subi	r24, 0x7F	; 127
    dfcc:	9d 4f       	sbci	r25, 0xFD	; 253
    dfce:	fc 01       	movw	r30, r24
    dfd0:	80 81       	ld	r24, Z
    dfd2:	88 23       	and	r24, r24
    dfd4:	09 f4       	brne	.+2      	; 0xdfd8 <Terminal+0x3e82>
    dfd6:	90 c0       	rjmp	.+288    	; 0xe0f8 <Terminal+0x3fa2>
    dfd8:	80 91 2a 06 	lds	r24, 0x062A
    dfdc:	90 91 2b 06 	lds	r25, 0x062B
    dfe0:	8f 57       	subi	r24, 0x7F	; 127
    dfe2:	9d 4f       	sbci	r25, 0xFD	; 253
    dfe4:	fc 01       	movw	r30, r24
    dfe6:	80 81       	ld	r24, Z
    dfe8:	8a 33       	cpi	r24, 0x3A	; 58
    dfea:	08 f0       	brcs	.+2      	; 0xdfee <Terminal+0x3e98>
    dfec:	85 c0       	rjmp	.+266    	; 0xe0f8 <Terminal+0x3fa2>
					float flValorReal = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    dfee:	80 91 2a 06 	lds	r24, 0x062A
    dff2:	90 91 2b 06 	lds	r25, 0x062B
    dff6:	8f 57       	subi	r24, 0x7F	; 127
    dff8:	9d 4f       	sbci	r25, 0xFD	; 253
    dffa:	68 ec       	ldi	r22, 0xC8	; 200
    dffc:	70 e0       	ldi	r23, 0x00	; 0
    dffe:	0e 94 5e 80 	call	0x100bc	; 0x100bc <From_String_to_Float>
    e002:	dc 01       	movw	r26, r24
    e004:	cb 01       	movw	r24, r22
    e006:	8f 87       	std	Y+15, r24	; 0x0f
    e008:	98 8b       	std	Y+16, r25	; 0x10
    e00a:	a9 8b       	std	Y+17, r26	; 0x11
    e00c:	ba 8b       	std	Y+18, r27	; 0x12

//					if ((flValorReal > I_MIN_MA) && (flValorReal < I_MAX_MA)){
						flPWM2aMA *= flPWM2valorMA/flValorReal;
    e00e:	80 91 17 06 	lds	r24, 0x0617
    e012:	90 91 18 06 	lds	r25, 0x0618
    e016:	a0 91 19 06 	lds	r26, 0x0619
    e01a:	b0 91 1a 06 	lds	r27, 0x061A
    e01e:	2f 85       	ldd	r18, Y+15	; 0x0f
    e020:	38 89       	ldd	r19, Y+16	; 0x10
    e022:	49 89       	ldd	r20, Y+17	; 0x11
    e024:	5a 89       	ldd	r21, Y+18	; 0x12
    e026:	bc 01       	movw	r22, r24
    e028:	cd 01       	movw	r24, r26
    e02a:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
    e02e:	dc 01       	movw	r26, r24
    e030:	cb 01       	movw	r24, r22
    e032:	7c 01       	movw	r14, r24
    e034:	8d 01       	movw	r16, r26
    e036:	80 91 97 05 	lds	r24, 0x0597
    e03a:	90 91 98 05 	lds	r25, 0x0598
    e03e:	a0 91 99 05 	lds	r26, 0x0599
    e042:	b0 91 9a 05 	lds	r27, 0x059A
    e046:	9c 01       	movw	r18, r24
    e048:	ad 01       	movw	r20, r26
    e04a:	c8 01       	movw	r24, r16
    e04c:	b7 01       	movw	r22, r14
    e04e:	0e 94 45 83 	call	0x1068a	; 0x1068a <__mulsf3>
    e052:	dc 01       	movw	r26, r24
    e054:	cb 01       	movw	r24, r22
    e056:	80 93 97 05 	sts	0x0597, r24
    e05a:	90 93 98 05 	sts	0x0598, r25
    e05e:	a0 93 99 05 	sts	0x0599, r26
    e062:	b0 93 9a 05 	sts	0x059A, r27

						Float_a_Eeprom(&flPWM2aMA_Eeprom, &flPWM2aMA);
    e066:	67 e9       	ldi	r22, 0x97	; 151
    e068:	75 e0       	ldi	r23, 0x05	; 5
    e06a:	8e ea       	ldi	r24, 0xAE	; 174
    e06c:	94 e0       	ldi	r25, 0x04	; 4
    e06e:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
						Float_a_Eeprom(&flPWM2aMA_Eeprom_BK, &flPWM2aMA);
    e072:	67 e9       	ldi	r22, 0x97	; 151
    e074:	75 e0       	ldi	r23, 0x05	; 5
    e076:	84 eb       	ldi	r24, 0xB4	; 180
    e078:	94 e0       	ldi	r25, 0x04	; 4
    e07a:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
						Escribir_Checksum_Eeprom (GRUPO_ADC);
    e07e:	82 e0       	ldi	r24, 0x02	; 2
    e080:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

						auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Autocal_PWM_2);
    e084:	8b eb       	ldi	r24, 0xBB	; 187
    e086:	96 e0       	ldi	r25, 0x06	; 6
    e088:	89 2f       	mov	r24, r25
    e08a:	8f 93       	push	r24
    e08c:	8b eb       	ldi	r24, 0xBB	; 187
    e08e:	96 e0       	ldi	r25, 0x06	; 6
    e090:	8f 93       	push	r24
    e092:	87 ef       	ldi	r24, 0xF7	; 247
    e094:	91 e0       	ldi	r25, 0x01	; 1
    e096:	89 2f       	mov	r24, r25
    e098:	8f 93       	push	r24
    e09a:	87 ef       	ldi	r24, 0xF7	; 247
    e09c:	91 e0       	ldi	r25, 0x01	; 1
    e09e:	8f 93       	push	r24
    e0a0:	81 e8       	ldi	r24, 0x81	; 129
    e0a2:	92 e0       	ldi	r25, 0x02	; 2
    e0a4:	89 2f       	mov	r24, r25
    e0a6:	8f 93       	push	r24
    e0a8:	81 e8       	ldi	r24, 0x81	; 129
    e0aa:	92 e0       	ldi	r25, 0x02	; 2
    e0ac:	8f 93       	push	r24
    e0ae:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    e0b2:	0f 90       	pop	r0
    e0b4:	0f 90       	pop	r0
    e0b6:	0f 90       	pop	r0
    e0b8:	0f 90       	pop	r0
    e0ba:	0f 90       	pop	r0
    e0bc:	0f 90       	pop	r0
    e0be:	90 93 2b 06 	sts	0x062B, r25
    e0c2:	80 93 2a 06 	sts	0x062A, r24
						dtostrf(flPWM2aMA, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    e0c6:	80 91 2a 06 	lds	r24, 0x062A
    e0ca:	90 91 2b 06 	lds	r25, 0x062B
    e0ce:	9c 01       	movw	r18, r24
    e0d0:	2f 57       	subi	r18, 0x7F	; 127
    e0d2:	3d 4f       	sbci	r19, 0xFD	; 253
    e0d4:	80 91 97 05 	lds	r24, 0x0597
    e0d8:	90 91 98 05 	lds	r25, 0x0598
    e0dc:	a0 91 99 05 	lds	r26, 0x0599
    e0e0:	b0 91 9a 05 	lds	r27, 0x059A
    e0e4:	89 01       	movw	r16, r18
    e0e6:	24 e0       	ldi	r18, 0x04	; 4
    e0e8:	47 e0       	ldi	r20, 0x07	; 7
    e0ea:	bc 01       	movw	r22, r24
    e0ec:	cd 01       	movw	r24, r26
    e0ee:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
			}


			// chBufferRx_USART0 = AUTOCAL PWM 2 xx.xx\0
			else if (Detectar_Comando_Buffer_P(Comando_Autocal_PWM_2, chBufferRx_USART0)) {
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) != '\0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    e0f2:	00 00       	nop
    e0f4:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//					}
//					else {
//						auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Autocal_PWM_2, (wchar_t*) MSG_FueraDeRango);
//					}
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    e0f8:	80 91 2a 06 	lds	r24, 0x062A
    e0fc:	90 91 2b 06 	lds	r25, 0x062B
    e100:	8f 57       	subi	r24, 0x7F	; 127
    e102:	9d 4f       	sbci	r25, 0xFD	; 253
    e104:	bc 01       	movw	r22, r24
    e106:	80 ee       	ldi	r24, 0xE0	; 224
    e108:	95 e0       	ldi	r25, 0x05	; 5
    e10a:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    e10e:	89 2b       	or	r24, r25
    e110:	09 f4       	brne	.+2      	; 0xe114 <Terminal+0x3fbe>
    e112:	54 c0       	rjmp	.+168    	; 0xe1bc <Terminal+0x4066>
					flPWM2aMA = DEFAULT_PWM2_A_MA;
    e114:	8d ec       	ldi	r24, 0xCD	; 205
    e116:	9c ec       	ldi	r25, 0xCC	; 204
    e118:	ac e4       	ldi	r26, 0x4C	; 76
    e11a:	b2 e4       	ldi	r27, 0x42	; 66
    e11c:	80 93 97 05 	sts	0x0597, r24
    e120:	90 93 98 05 	sts	0x0598, r25
    e124:	a0 93 99 05 	sts	0x0599, r26
    e128:	b0 93 9a 05 	sts	0x059A, r27

					Float_a_Eeprom(&flPWM2aMA_Eeprom, &flPWM2aMA);
    e12c:	67 e9       	ldi	r22, 0x97	; 151
    e12e:	75 e0       	ldi	r23, 0x05	; 5
    e130:	8e ea       	ldi	r24, 0xAE	; 174
    e132:	94 e0       	ldi	r25, 0x04	; 4
    e134:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flPWM2aMA_Eeprom_BK, &flPWM2aMA);
    e138:	67 e9       	ldi	r22, 0x97	; 151
    e13a:	75 e0       	ldi	r23, 0x05	; 5
    e13c:	84 eb       	ldi	r24, 0xB4	; 180
    e13e:	94 e0       	ldi	r25, 0x04	; 4
    e140:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    e144:	82 e0       	ldi	r24, 0x02	; 2
    e146:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Autocal_PWM_2);
    e14a:	8b eb       	ldi	r24, 0xBB	; 187
    e14c:	96 e0       	ldi	r25, 0x06	; 6
    e14e:	89 2f       	mov	r24, r25
    e150:	8f 93       	push	r24
    e152:	8b eb       	ldi	r24, 0xBB	; 187
    e154:	96 e0       	ldi	r25, 0x06	; 6
    e156:	8f 93       	push	r24
    e158:	87 ef       	ldi	r24, 0xF7	; 247
    e15a:	91 e0       	ldi	r25, 0x01	; 1
    e15c:	89 2f       	mov	r24, r25
    e15e:	8f 93       	push	r24
    e160:	87 ef       	ldi	r24, 0xF7	; 247
    e162:	91 e0       	ldi	r25, 0x01	; 1
    e164:	8f 93       	push	r24
    e166:	81 e8       	ldi	r24, 0x81	; 129
    e168:	92 e0       	ldi	r25, 0x02	; 2
    e16a:	89 2f       	mov	r24, r25
    e16c:	8f 93       	push	r24
    e16e:	81 e8       	ldi	r24, 0x81	; 129
    e170:	92 e0       	ldi	r25, 0x02	; 2
    e172:	8f 93       	push	r24
    e174:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    e178:	0f 90       	pop	r0
    e17a:	0f 90       	pop	r0
    e17c:	0f 90       	pop	r0
    e17e:	0f 90       	pop	r0
    e180:	0f 90       	pop	r0
    e182:	0f 90       	pop	r0
    e184:	90 93 2b 06 	sts	0x062B, r25
    e188:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flPWM2aMA, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    e18c:	80 91 2a 06 	lds	r24, 0x062A
    e190:	90 91 2b 06 	lds	r25, 0x062B
    e194:	9c 01       	movw	r18, r24
    e196:	2f 57       	subi	r18, 0x7F	; 127
    e198:	3d 4f       	sbci	r19, 0xFD	; 253
    e19a:	80 91 97 05 	lds	r24, 0x0597
    e19e:	90 91 98 05 	lds	r25, 0x0598
    e1a2:	a0 91 99 05 	lds	r26, 0x0599
    e1a6:	b0 91 9a 05 	lds	r27, 0x059A
    e1aa:	89 01       	movw	r16, r18
    e1ac:	24 e0       	ldi	r18, 0x04	; 4
    e1ae:	47 e0       	ldi	r20, 0x07	; 7
    e1b0:	bc 01       	movw	r22, r24
    e1b2:	cd 01       	movw	r24, r26
    e1b4:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    e1b8:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Autocal_PWM_2);
    e1bc:	8b eb       	ldi	r24, 0xBB	; 187
    e1be:	96 e0       	ldi	r25, 0x06	; 6
    e1c0:	89 2f       	mov	r24, r25
    e1c2:	8f 93       	push	r24
    e1c4:	8b eb       	ldi	r24, 0xBB	; 187
    e1c6:	96 e0       	ldi	r25, 0x06	; 6
    e1c8:	8f 93       	push	r24
    e1ca:	87 ef       	ldi	r24, 0xF7	; 247
    e1cc:	91 e0       	ldi	r25, 0x01	; 1
    e1ce:	89 2f       	mov	r24, r25
    e1d0:	8f 93       	push	r24
    e1d2:	87 ef       	ldi	r24, 0xF7	; 247
    e1d4:	91 e0       	ldi	r25, 0x01	; 1
    e1d6:	8f 93       	push	r24
    e1d8:	81 e8       	ldi	r24, 0x81	; 129
    e1da:	92 e0       	ldi	r25, 0x02	; 2
    e1dc:	89 2f       	mov	r24, r25
    e1de:	8f 93       	push	r24
    e1e0:	81 e8       	ldi	r24, 0x81	; 129
    e1e2:	92 e0       	ldi	r25, 0x02	; 2
    e1e4:	8f 93       	push	r24
    e1e6:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    e1ea:	0f 90       	pop	r0
    e1ec:	0f 90       	pop	r0
    e1ee:	0f 90       	pop	r0
    e1f0:	0f 90       	pop	r0
    e1f2:	0f 90       	pop	r0
    e1f4:	0f 90       	pop	r0
    e1f6:	90 93 2b 06 	sts	0x062B, r25
    e1fa:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flPWM2aMA, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    e1fe:	80 91 2a 06 	lds	r24, 0x062A
    e202:	90 91 2b 06 	lds	r25, 0x062B
    e206:	9c 01       	movw	r18, r24
    e208:	2f 57       	subi	r18, 0x7F	; 127
    e20a:	3d 4f       	sbci	r19, 0xFD	; 253
    e20c:	80 91 97 05 	lds	r24, 0x0597
    e210:	90 91 98 05 	lds	r25, 0x0598
    e214:	a0 91 99 05 	lds	r26, 0x0599
    e218:	b0 91 9a 05 	lds	r27, 0x059A
    e21c:	89 01       	movw	r16, r18
    e21e:	24 e0       	ldi	r18, 0x04	; 4
    e220:	47 e0       	ldi	r20, 0x07	; 7
    e222:	bc 01       	movw	r22, r24
    e224:	cd 01       	movw	r24, r26
    e226:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    e22a:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = CAL PWM 2 xx.xx\0
			else if (Detectar_Comando_Buffer_P(Comando_Cal_PWM_2, chBufferRx_USART0)) {
    e22e:	61 e8       	ldi	r22, 0x81	; 129
    e230:	72 e0       	ldi	r23, 0x02	; 2
    e232:	89 e8       	ldi	r24, 0x89	; 137
    e234:	96 e0       	ldi	r25, 0x06	; 6
    e236:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    e23a:	89 2b       	or	r24, r25
    e23c:	09 f4       	brne	.+2      	; 0xe240 <Terminal+0x40ea>
    e23e:	18 c1       	rjmp	.+560    	; 0xe470 <Terminal+0x431a>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) != '\0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    e240:	80 91 2a 06 	lds	r24, 0x062A
    e244:	90 91 2b 06 	lds	r25, 0x062B
    e248:	8f 57       	subi	r24, 0x7F	; 127
    e24a:	9d 4f       	sbci	r25, 0xFD	; 253
    e24c:	fc 01       	movw	r30, r24
    e24e:	80 81       	ld	r24, Z
    e250:	80 33       	cpi	r24, 0x30	; 48
    e252:	08 f4       	brcc	.+2      	; 0xe256 <Terminal+0x4100>
    e254:	72 c0       	rjmp	.+228    	; 0xe33a <Terminal+0x41e4>
    e256:	80 91 2a 06 	lds	r24, 0x062A
    e25a:	90 91 2b 06 	lds	r25, 0x062B
    e25e:	8f 57       	subi	r24, 0x7F	; 127
    e260:	9d 4f       	sbci	r25, 0xFD	; 253
    e262:	fc 01       	movw	r30, r24
    e264:	80 81       	ld	r24, Z
    e266:	88 23       	and	r24, r24
    e268:	09 f4       	brne	.+2      	; 0xe26c <Terminal+0x4116>
    e26a:	67 c0       	rjmp	.+206    	; 0xe33a <Terminal+0x41e4>
    e26c:	80 91 2a 06 	lds	r24, 0x062A
    e270:	90 91 2b 06 	lds	r25, 0x062B
    e274:	8f 57       	subi	r24, 0x7F	; 127
    e276:	9d 4f       	sbci	r25, 0xFD	; 253
    e278:	fc 01       	movw	r30, r24
    e27a:	80 81       	ld	r24, Z
    e27c:	8a 33       	cpi	r24, 0x3A	; 58
    e27e:	08 f0       	brcs	.+2      	; 0xe282 <Terminal+0x412c>
    e280:	5c c0       	rjmp	.+184    	; 0xe33a <Terminal+0x41e4>
					flPWM2aMA = From_String_to_Float(chBufferRx_USART0+auxIndexTerminal, USART0_BUFFER_ZISE);
    e282:	80 91 2a 06 	lds	r24, 0x062A
    e286:	90 91 2b 06 	lds	r25, 0x062B
    e28a:	8f 57       	subi	r24, 0x7F	; 127
    e28c:	9d 4f       	sbci	r25, 0xFD	; 253
    e28e:	68 ec       	ldi	r22, 0xC8	; 200
    e290:	70 e0       	ldi	r23, 0x00	; 0
    e292:	0e 94 5e 80 	call	0x100bc	; 0x100bc <From_String_to_Float>
    e296:	dc 01       	movw	r26, r24
    e298:	cb 01       	movw	r24, r22
    e29a:	80 93 97 05 	sts	0x0597, r24
    e29e:	90 93 98 05 	sts	0x0598, r25
    e2a2:	a0 93 99 05 	sts	0x0599, r26
    e2a6:	b0 93 9a 05 	sts	0x059A, r27

					Float_a_Eeprom(&flPWM2aMA_Eeprom, &flPWM2aMA);
    e2aa:	67 e9       	ldi	r22, 0x97	; 151
    e2ac:	75 e0       	ldi	r23, 0x05	; 5
    e2ae:	8e ea       	ldi	r24, 0xAE	; 174
    e2b0:	94 e0       	ldi	r25, 0x04	; 4
    e2b2:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flPWM2aMA_Eeprom_BK, &flPWM2aMA);
    e2b6:	67 e9       	ldi	r22, 0x97	; 151
    e2b8:	75 e0       	ldi	r23, 0x05	; 5
    e2ba:	84 eb       	ldi	r24, 0xB4	; 180
    e2bc:	94 e0       	ldi	r25, 0x04	; 4
    e2be:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    e2c2:	82 e0       	ldi	r24, 0x02	; 2
    e2c4:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_PWM_2);
    e2c8:	89 e8       	ldi	r24, 0x89	; 137
    e2ca:	96 e0       	ldi	r25, 0x06	; 6
    e2cc:	89 2f       	mov	r24, r25
    e2ce:	8f 93       	push	r24
    e2d0:	89 e8       	ldi	r24, 0x89	; 137
    e2d2:	96 e0       	ldi	r25, 0x06	; 6
    e2d4:	8f 93       	push	r24
    e2d6:	87 ef       	ldi	r24, 0xF7	; 247
    e2d8:	91 e0       	ldi	r25, 0x01	; 1
    e2da:	89 2f       	mov	r24, r25
    e2dc:	8f 93       	push	r24
    e2de:	87 ef       	ldi	r24, 0xF7	; 247
    e2e0:	91 e0       	ldi	r25, 0x01	; 1
    e2e2:	8f 93       	push	r24
    e2e4:	81 e8       	ldi	r24, 0x81	; 129
    e2e6:	92 e0       	ldi	r25, 0x02	; 2
    e2e8:	89 2f       	mov	r24, r25
    e2ea:	8f 93       	push	r24
    e2ec:	81 e8       	ldi	r24, 0x81	; 129
    e2ee:	92 e0       	ldi	r25, 0x02	; 2
    e2f0:	8f 93       	push	r24
    e2f2:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    e2f6:	0f 90       	pop	r0
    e2f8:	0f 90       	pop	r0
    e2fa:	0f 90       	pop	r0
    e2fc:	0f 90       	pop	r0
    e2fe:	0f 90       	pop	r0
    e300:	0f 90       	pop	r0
    e302:	90 93 2b 06 	sts	0x062B, r25
    e306:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flPWM2aMA, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    e30a:	80 91 2a 06 	lds	r24, 0x062A
    e30e:	90 91 2b 06 	lds	r25, 0x062B
    e312:	9c 01       	movw	r18, r24
    e314:	2f 57       	subi	r18, 0x7F	; 127
    e316:	3d 4f       	sbci	r19, 0xFD	; 253
    e318:	80 91 97 05 	lds	r24, 0x0597
    e31c:	90 91 98 05 	lds	r25, 0x0598
    e320:	a0 91 99 05 	lds	r26, 0x0599
    e324:	b0 91 9a 05 	lds	r27, 0x059A
    e328:	89 01       	movw	r16, r18
    e32a:	24 e0       	ldi	r18, 0x04	; 4
    e32c:	47 e0       	ldi	r20, 0x07	; 7
    e32e:	bc 01       	movw	r22, r24
    e330:	cd 01       	movw	r24, r26
    e332:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    e336:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    e33a:	80 91 2a 06 	lds	r24, 0x062A
    e33e:	90 91 2b 06 	lds	r25, 0x062B
    e342:	8f 57       	subi	r24, 0x7F	; 127
    e344:	9d 4f       	sbci	r25, 0xFD	; 253
    e346:	bc 01       	movw	r22, r24
    e348:	80 ee       	ldi	r24, 0xE0	; 224
    e34a:	95 e0       	ldi	r25, 0x05	; 5
    e34c:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    e350:	89 2b       	or	r24, r25
    e352:	09 f4       	brne	.+2      	; 0xe356 <Terminal+0x4200>
    e354:	54 c0       	rjmp	.+168    	; 0xe3fe <Terminal+0x42a8>
					flPWM2aMA = DEFAULT_PWM2_A_MA;
    e356:	8d ec       	ldi	r24, 0xCD	; 205
    e358:	9c ec       	ldi	r25, 0xCC	; 204
    e35a:	ac e4       	ldi	r26, 0x4C	; 76
    e35c:	b2 e4       	ldi	r27, 0x42	; 66
    e35e:	80 93 97 05 	sts	0x0597, r24
    e362:	90 93 98 05 	sts	0x0598, r25
    e366:	a0 93 99 05 	sts	0x0599, r26
    e36a:	b0 93 9a 05 	sts	0x059A, r27

					Float_a_Eeprom(&flPWM2aMA_Eeprom, &flPWM2aMA);
    e36e:	67 e9       	ldi	r22, 0x97	; 151
    e370:	75 e0       	ldi	r23, 0x05	; 5
    e372:	8e ea       	ldi	r24, 0xAE	; 174
    e374:	94 e0       	ldi	r25, 0x04	; 4
    e376:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Float_a_Eeprom(&flPWM2aMA_Eeprom_BK, &flPWM2aMA);
    e37a:	67 e9       	ldi	r22, 0x97	; 151
    e37c:	75 e0       	ldi	r23, 0x05	; 5
    e37e:	84 eb       	ldi	r24, 0xB4	; 180
    e380:	94 e0       	ldi	r25, 0x04	; 4
    e382:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <Float_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    e386:	82 e0       	ldi	r24, 0x02	; 2
    e388:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>

					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_PWM_2);
    e38c:	89 e8       	ldi	r24, 0x89	; 137
    e38e:	96 e0       	ldi	r25, 0x06	; 6
    e390:	89 2f       	mov	r24, r25
    e392:	8f 93       	push	r24
    e394:	89 e8       	ldi	r24, 0x89	; 137
    e396:	96 e0       	ldi	r25, 0x06	; 6
    e398:	8f 93       	push	r24
    e39a:	87 ef       	ldi	r24, 0xF7	; 247
    e39c:	91 e0       	ldi	r25, 0x01	; 1
    e39e:	89 2f       	mov	r24, r25
    e3a0:	8f 93       	push	r24
    e3a2:	87 ef       	ldi	r24, 0xF7	; 247
    e3a4:	91 e0       	ldi	r25, 0x01	; 1
    e3a6:	8f 93       	push	r24
    e3a8:	81 e8       	ldi	r24, 0x81	; 129
    e3aa:	92 e0       	ldi	r25, 0x02	; 2
    e3ac:	89 2f       	mov	r24, r25
    e3ae:	8f 93       	push	r24
    e3b0:	81 e8       	ldi	r24, 0x81	; 129
    e3b2:	92 e0       	ldi	r25, 0x02	; 2
    e3b4:	8f 93       	push	r24
    e3b6:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    e3ba:	0f 90       	pop	r0
    e3bc:	0f 90       	pop	r0
    e3be:	0f 90       	pop	r0
    e3c0:	0f 90       	pop	r0
    e3c2:	0f 90       	pop	r0
    e3c4:	0f 90       	pop	r0
    e3c6:	90 93 2b 06 	sts	0x062B, r25
    e3ca:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flPWM2aMA, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    e3ce:	80 91 2a 06 	lds	r24, 0x062A
    e3d2:	90 91 2b 06 	lds	r25, 0x062B
    e3d6:	9c 01       	movw	r18, r24
    e3d8:	2f 57       	subi	r18, 0x7F	; 127
    e3da:	3d 4f       	sbci	r19, 0xFD	; 253
    e3dc:	80 91 97 05 	lds	r24, 0x0597
    e3e0:	90 91 98 05 	lds	r25, 0x0598
    e3e4:	a0 91 99 05 	lds	r26, 0x0599
    e3e8:	b0 91 9a 05 	lds	r27, 0x059A
    e3ec:	89 01       	movw	r16, r18
    e3ee:	24 e0       	ldi	r18, 0x04	; 4
    e3f0:	47 e0       	ldi	r20, 0x07	; 7
    e3f2:	bc 01       	movw	r22, r24
    e3f4:	cd 01       	movw	r24, r26
    e3f6:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    e3fa:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					auxIndexTerminal = sprintf(chBufferRx_USART0, "%S: ", (wchar_t*)Comando_Cal_PWM_2);
    e3fe:	89 e8       	ldi	r24, 0x89	; 137
    e400:	96 e0       	ldi	r25, 0x06	; 6
    e402:	89 2f       	mov	r24, r25
    e404:	8f 93       	push	r24
    e406:	89 e8       	ldi	r24, 0x89	; 137
    e408:	96 e0       	ldi	r25, 0x06	; 6
    e40a:	8f 93       	push	r24
    e40c:	87 ef       	ldi	r24, 0xF7	; 247
    e40e:	91 e0       	ldi	r25, 0x01	; 1
    e410:	89 2f       	mov	r24, r25
    e412:	8f 93       	push	r24
    e414:	87 ef       	ldi	r24, 0xF7	; 247
    e416:	91 e0       	ldi	r25, 0x01	; 1
    e418:	8f 93       	push	r24
    e41a:	81 e8       	ldi	r24, 0x81	; 129
    e41c:	92 e0       	ldi	r25, 0x02	; 2
    e41e:	89 2f       	mov	r24, r25
    e420:	8f 93       	push	r24
    e422:	81 e8       	ldi	r24, 0x81	; 129
    e424:	92 e0       	ldi	r25, 0x02	; 2
    e426:	8f 93       	push	r24
    e428:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    e42c:	0f 90       	pop	r0
    e42e:	0f 90       	pop	r0
    e430:	0f 90       	pop	r0
    e432:	0f 90       	pop	r0
    e434:	0f 90       	pop	r0
    e436:	0f 90       	pop	r0
    e438:	90 93 2b 06 	sts	0x062B, r25
    e43c:	80 93 2a 06 	sts	0x062A, r24
					dtostrf(flPWM2aMA, 7, 4, chBufferRx_USART0+auxIndexTerminal);
    e440:	80 91 2a 06 	lds	r24, 0x062A
    e444:	90 91 2b 06 	lds	r25, 0x062B
    e448:	9c 01       	movw	r18, r24
    e44a:	2f 57       	subi	r18, 0x7F	; 127
    e44c:	3d 4f       	sbci	r19, 0xFD	; 253
    e44e:	80 91 97 05 	lds	r24, 0x0597
    e452:	90 91 98 05 	lds	r25, 0x0598
    e456:	a0 91 99 05 	lds	r26, 0x0599
    e45a:	b0 91 9a 05 	lds	r27, 0x059A
    e45e:	89 01       	movw	r16, r18
    e460:	24 e0       	ldi	r18, 0x04	; 4
    e462:	47 e0       	ldi	r20, 0x07	; 7
    e464:	bc 01       	movw	r22, r24
    e466:	cd 01       	movw	r24, r26
    e468:	0e 94 ff 83 	call	0x107fe	; 0x107fe <dtostrf>
    e46c:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = FILTRO PWM 1 xxxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Muestras_PWM_1, chBufferRx_USART0)) {
    e470:	61 e8       	ldi	r22, 0x81	; 129
    e472:	72 e0       	ldi	r23, 0x02	; 2
    e474:	8e ee       	ldi	r24, 0xEE	; 238
    e476:	95 e0       	ldi	r25, 0x05	; 5
    e478:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    e47c:	89 2b       	or	r24, r25
    e47e:	09 f4       	brne	.+2      	; 0xe482 <Terminal+0x432c>
    e480:	e5 c0       	rjmp	.+458    	; 0xe64c <Terminal+0x44f6>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    e482:	80 91 2a 06 	lds	r24, 0x062A
    e486:	90 91 2b 06 	lds	r25, 0x062B
    e48a:	8f 57       	subi	r24, 0x7F	; 127
    e48c:	9d 4f       	sbci	r25, 0xFD	; 253
    e48e:	fc 01       	movw	r30, r24
    e490:	80 81       	ld	r24, Z
    e492:	80 33       	cpi	r24, 0x30	; 48
    e494:	08 f4       	brcc	.+2      	; 0xe498 <Terminal+0x4342>
    e496:	68 c0       	rjmp	.+208    	; 0xe568 <Terminal+0x4412>
    e498:	80 91 2a 06 	lds	r24, 0x062A
    e49c:	90 91 2b 06 	lds	r25, 0x062B
    e4a0:	8f 57       	subi	r24, 0x7F	; 127
    e4a2:	9d 4f       	sbci	r25, 0xFD	; 253
    e4a4:	fc 01       	movw	r30, r24
    e4a6:	80 81       	ld	r24, Z
    e4a8:	8a 33       	cpi	r24, 0x3A	; 58
    e4aa:	08 f0       	brcs	.+2      	; 0xe4ae <Terminal+0x4358>
    e4ac:	5d c0       	rjmp	.+186    	; 0xe568 <Terminal+0x4412>
					uMuestrasADCpwm1 = atoi(chBufferRx_USART0+auxIndexTerminal);
    e4ae:	80 91 2a 06 	lds	r24, 0x062A
    e4b2:	90 91 2b 06 	lds	r25, 0x062B
    e4b6:	8f 57       	subi	r24, 0x7F	; 127
    e4b8:	9d 4f       	sbci	r25, 0xFD	; 253
    e4ba:	0e 94 1f 84 	call	0x1083e	; 0x1083e <atoi>
    e4be:	90 93 fe 04 	sts	0x04FE, r25
    e4c2:	80 93 fd 04 	sts	0x04FD, r24
					if (uMuestrasADCpwm1 < MINIMO_MUESTRAS_ADC){
    e4c6:	80 91 fd 04 	lds	r24, 0x04FD
    e4ca:	90 91 fe 04 	lds	r25, 0x04FE
    e4ce:	89 2b       	or	r24, r25
    e4d0:	39 f4       	brne	.+14     	; 0xe4e0 <Terminal+0x438a>
						uMuestrasADCpwm1 = MINIMO_MUESTRAS_ADC;
    e4d2:	81 e0       	ldi	r24, 0x01	; 1
    e4d4:	90 e0       	ldi	r25, 0x00	; 0
    e4d6:	90 93 fe 04 	sts	0x04FE, r25
    e4da:	80 93 fd 04 	sts	0x04FD, r24
    e4de:	0d c0       	rjmp	.+26     	; 0xe4fa <Terminal+0x43a4>
					}
					else if (uMuestrasADCpwm1 > MAXIMO_MUESTRAS_ADC){
    e4e0:	80 91 fd 04 	lds	r24, 0x04FD
    e4e4:	90 91 fe 04 	lds	r25, 0x04FE
    e4e8:	81 31       	cpi	r24, 0x11	; 17
    e4ea:	97 42       	sbci	r25, 0x27	; 39
    e4ec:	30 f0       	brcs	.+12     	; 0xe4fa <Terminal+0x43a4>
						uMuestrasADCpwm1 = MAXIMO_MUESTRAS_ADC;
    e4ee:	80 e1       	ldi	r24, 0x10	; 16
    e4f0:	97 e2       	ldi	r25, 0x27	; 39
    e4f2:	90 93 fe 04 	sts	0x04FE, r25
    e4f6:	80 93 fd 04 	sts	0x04FD, r24
					}
					UnsignedInt_a_Eeprom(&uMuestrasADCpwm1_Eeprom, &uMuestrasADCpwm1);
    e4fa:	6d ef       	ldi	r22, 0xFD	; 253
    e4fc:	74 e0       	ldi	r23, 0x04	; 4
    e4fe:	80 e9       	ldi	r24, 0x90	; 144
    e500:	94 e0       	ldi	r25, 0x04	; 4
    e502:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCpwm1_Eeprom_BK, &uMuestrasADCpwm1);
    e506:	6d ef       	ldi	r22, 0xFD	; 253
    e508:	74 e0       	ldi	r23, 0x04	; 4
    e50a:	84 ec       	ldi	r24, 0xC4	; 196
    e50c:	94 e0       	ldi	r25, 0x04	; 4
    e50e:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    e512:	82 e0       	ldi	r24, 0x02	; 2
    e514:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Muestras_PWM_1, uMuestrasADCpwm1);
    e518:	80 91 fd 04 	lds	r24, 0x04FD
    e51c:	90 91 fe 04 	lds	r25, 0x04FE
    e520:	29 2f       	mov	r18, r25
    e522:	2f 93       	push	r18
    e524:	8f 93       	push	r24
    e526:	8e ee       	ldi	r24, 0xEE	; 238
    e528:	95 e0       	ldi	r25, 0x05	; 5
    e52a:	89 2f       	mov	r24, r25
    e52c:	8f 93       	push	r24
    e52e:	8e ee       	ldi	r24, 0xEE	; 238
    e530:	95 e0       	ldi	r25, 0x05	; 5
    e532:	8f 93       	push	r24
    e534:	84 e0       	ldi	r24, 0x04	; 4
    e536:	92 e0       	ldi	r25, 0x02	; 2
    e538:	89 2f       	mov	r24, r25
    e53a:	8f 93       	push	r24
    e53c:	84 e0       	ldi	r24, 0x04	; 4
    e53e:	92 e0       	ldi	r25, 0x02	; 2
    e540:	8f 93       	push	r24
    e542:	81 e8       	ldi	r24, 0x81	; 129
    e544:	92 e0       	ldi	r25, 0x02	; 2
    e546:	89 2f       	mov	r24, r25
    e548:	8f 93       	push	r24
    e54a:	81 e8       	ldi	r24, 0x81	; 129
    e54c:	92 e0       	ldi	r25, 0x02	; 2
    e54e:	8f 93       	push	r24
    e550:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    e554:	8d b7       	in	r24, 0x3d	; 61
    e556:	9e b7       	in	r25, 0x3e	; 62
    e558:	08 96       	adiw	r24, 0x08	; 8
    e55a:	0f b6       	in	r0, 0x3f	; 63
    e55c:	f8 94       	cli
    e55e:	de bf       	out	0x3e, r29	; 62
    e560:	0f be       	out	0x3f, r0	; 63
    e562:	cd bf       	out	0x3d, r28	; 61
    e564:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    e568:	80 91 2a 06 	lds	r24, 0x062A
    e56c:	90 91 2b 06 	lds	r25, 0x062B
    e570:	8f 57       	subi	r24, 0x7F	; 127
    e572:	9d 4f       	sbci	r25, 0xFD	; 253
    e574:	bc 01       	movw	r22, r24
    e576:	80 ee       	ldi	r24, 0xE0	; 224
    e578:	95 e0       	ldi	r25, 0x05	; 5
    e57a:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    e57e:	89 2b       	or	r24, r25
    e580:	e9 f1       	breq	.+122    	; 0xe5fc <Terminal+0x44a6>
					uMuestrasADCpwm1 = DEFAULT_MUESTRAS_ADC_PWM1;
    e582:	84 ef       	ldi	r24, 0xF4	; 244
    e584:	91 e0       	ldi	r25, 0x01	; 1
    e586:	90 93 fe 04 	sts	0x04FE, r25
    e58a:	80 93 fd 04 	sts	0x04FD, r24

					UnsignedInt_a_Eeprom(&uMuestrasADCpwm1_Eeprom, &uMuestrasADCpwm1);
    e58e:	6d ef       	ldi	r22, 0xFD	; 253
    e590:	74 e0       	ldi	r23, 0x04	; 4
    e592:	80 e9       	ldi	r24, 0x90	; 144
    e594:	94 e0       	ldi	r25, 0x04	; 4
    e596:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCpwm1_Eeprom_BK, &uMuestrasADCpwm1);
    e59a:	6d ef       	ldi	r22, 0xFD	; 253
    e59c:	74 e0       	ldi	r23, 0x04	; 4
    e59e:	84 ec       	ldi	r24, 0xC4	; 196
    e5a0:	94 e0       	ldi	r25, 0x04	; 4
    e5a2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    e5a6:	82 e0       	ldi	r24, 0x02	; 2
    e5a8:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Muestras_PWM_1, uMuestrasADCpwm1);
    e5ac:	80 91 fd 04 	lds	r24, 0x04FD
    e5b0:	90 91 fe 04 	lds	r25, 0x04FE
    e5b4:	29 2f       	mov	r18, r25
    e5b6:	2f 93       	push	r18
    e5b8:	8f 93       	push	r24
    e5ba:	8e ee       	ldi	r24, 0xEE	; 238
    e5bc:	95 e0       	ldi	r25, 0x05	; 5
    e5be:	89 2f       	mov	r24, r25
    e5c0:	8f 93       	push	r24
    e5c2:	8e ee       	ldi	r24, 0xEE	; 238
    e5c4:	95 e0       	ldi	r25, 0x05	; 5
    e5c6:	8f 93       	push	r24
    e5c8:	84 e0       	ldi	r24, 0x04	; 4
    e5ca:	92 e0       	ldi	r25, 0x02	; 2
    e5cc:	89 2f       	mov	r24, r25
    e5ce:	8f 93       	push	r24
    e5d0:	84 e0       	ldi	r24, 0x04	; 4
    e5d2:	92 e0       	ldi	r25, 0x02	; 2
    e5d4:	8f 93       	push	r24
    e5d6:	81 e8       	ldi	r24, 0x81	; 129
    e5d8:	92 e0       	ldi	r25, 0x02	; 2
    e5da:	89 2f       	mov	r24, r25
    e5dc:	8f 93       	push	r24
    e5de:	81 e8       	ldi	r24, 0x81	; 129
    e5e0:	92 e0       	ldi	r25, 0x02	; 2
    e5e2:	8f 93       	push	r24
    e5e4:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    e5e8:	ed b7       	in	r30, 0x3d	; 61
    e5ea:	fe b7       	in	r31, 0x3e	; 62
    e5ec:	38 96       	adiw	r30, 0x08	; 8
    e5ee:	0f b6       	in	r0, 0x3f	; 63
    e5f0:	f8 94       	cli
    e5f2:	de bf       	out	0x3e, r29	; 62
    e5f4:	0f be       	out	0x3f, r0	; 63
    e5f6:	cd bf       	out	0x3d, r28	; 61
    e5f8:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Muestras_PWM_1, uMuestrasADCpwm1);
    e5fc:	80 91 fd 04 	lds	r24, 0x04FD
    e600:	90 91 fe 04 	lds	r25, 0x04FE
    e604:	29 2f       	mov	r18, r25
    e606:	2f 93       	push	r18
    e608:	8f 93       	push	r24
    e60a:	8e ee       	ldi	r24, 0xEE	; 238
    e60c:	95 e0       	ldi	r25, 0x05	; 5
    e60e:	89 2f       	mov	r24, r25
    e610:	8f 93       	push	r24
    e612:	8e ee       	ldi	r24, 0xEE	; 238
    e614:	95 e0       	ldi	r25, 0x05	; 5
    e616:	8f 93       	push	r24
    e618:	84 e0       	ldi	r24, 0x04	; 4
    e61a:	92 e0       	ldi	r25, 0x02	; 2
    e61c:	89 2f       	mov	r24, r25
    e61e:	8f 93       	push	r24
    e620:	84 e0       	ldi	r24, 0x04	; 4
    e622:	92 e0       	ldi	r25, 0x02	; 2
    e624:	8f 93       	push	r24
    e626:	81 e8       	ldi	r24, 0x81	; 129
    e628:	92 e0       	ldi	r25, 0x02	; 2
    e62a:	89 2f       	mov	r24, r25
    e62c:	8f 93       	push	r24
    e62e:	81 e8       	ldi	r24, 0x81	; 129
    e630:	92 e0       	ldi	r25, 0x02	; 2
    e632:	8f 93       	push	r24
    e634:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    e638:	8d b7       	in	r24, 0x3d	; 61
    e63a:	9e b7       	in	r25, 0x3e	; 62
    e63c:	08 96       	adiw	r24, 0x08	; 8
    e63e:	0f b6       	in	r0, 0x3f	; 63
    e640:	f8 94       	cli
    e642:	de bf       	out	0x3e, r29	; 62
    e644:	0f be       	out	0x3f, r0	; 63
    e646:	cd bf       	out	0x3d, r28	; 61
    e648:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = FILTRO PWM 2 xxxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Muestras_PWM_2, chBufferRx_USART0)) {
    e64c:	61 e8       	ldi	r22, 0x81	; 129
    e64e:	72 e0       	ldi	r23, 0x02	; 2
    e650:	8c ef       	ldi	r24, 0xFC	; 252
    e652:	95 e0       	ldi	r25, 0x05	; 5
    e654:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    e658:	89 2b       	or	r24, r25
    e65a:	09 f4       	brne	.+2      	; 0xe65e <Terminal+0x4508>
    e65c:	e5 c0       	rjmp	.+458    	; 0xe828 <Terminal+0x46d2>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    e65e:	80 91 2a 06 	lds	r24, 0x062A
    e662:	90 91 2b 06 	lds	r25, 0x062B
    e666:	8f 57       	subi	r24, 0x7F	; 127
    e668:	9d 4f       	sbci	r25, 0xFD	; 253
    e66a:	fc 01       	movw	r30, r24
    e66c:	80 81       	ld	r24, Z
    e66e:	80 33       	cpi	r24, 0x30	; 48
    e670:	08 f4       	brcc	.+2      	; 0xe674 <Terminal+0x451e>
    e672:	68 c0       	rjmp	.+208    	; 0xe744 <Terminal+0x45ee>
    e674:	80 91 2a 06 	lds	r24, 0x062A
    e678:	90 91 2b 06 	lds	r25, 0x062B
    e67c:	8f 57       	subi	r24, 0x7F	; 127
    e67e:	9d 4f       	sbci	r25, 0xFD	; 253
    e680:	fc 01       	movw	r30, r24
    e682:	80 81       	ld	r24, Z
    e684:	8a 33       	cpi	r24, 0x3A	; 58
    e686:	08 f0       	brcs	.+2      	; 0xe68a <Terminal+0x4534>
    e688:	5d c0       	rjmp	.+186    	; 0xe744 <Terminal+0x45ee>
					uMuestrasADCpwm2 = atoi(chBufferRx_USART0+auxIndexTerminal);
    e68a:	80 91 2a 06 	lds	r24, 0x062A
    e68e:	90 91 2b 06 	lds	r25, 0x062B
    e692:	8f 57       	subi	r24, 0x7F	; 127
    e694:	9d 4f       	sbci	r25, 0xFD	; 253
    e696:	0e 94 1f 84 	call	0x1083e	; 0x1083e <atoi>
    e69a:	90 93 19 05 	sts	0x0519, r25
    e69e:	80 93 18 05 	sts	0x0518, r24
					if (uMuestrasADCpwm2 < MINIMO_MUESTRAS_ADC){
    e6a2:	80 91 18 05 	lds	r24, 0x0518
    e6a6:	90 91 19 05 	lds	r25, 0x0519
    e6aa:	89 2b       	or	r24, r25
    e6ac:	39 f4       	brne	.+14     	; 0xe6bc <Terminal+0x4566>
						uMuestrasADCpwm2 = MINIMO_MUESTRAS_ADC;
    e6ae:	81 e0       	ldi	r24, 0x01	; 1
    e6b0:	90 e0       	ldi	r25, 0x00	; 0
    e6b2:	90 93 19 05 	sts	0x0519, r25
    e6b6:	80 93 18 05 	sts	0x0518, r24
    e6ba:	0d c0       	rjmp	.+26     	; 0xe6d6 <Terminal+0x4580>
					}
					else if (uMuestrasADCpwm2 > MAXIMO_MUESTRAS_ADC){
    e6bc:	80 91 18 05 	lds	r24, 0x0518
    e6c0:	90 91 19 05 	lds	r25, 0x0519
    e6c4:	81 31       	cpi	r24, 0x11	; 17
    e6c6:	97 42       	sbci	r25, 0x27	; 39
    e6c8:	30 f0       	brcs	.+12     	; 0xe6d6 <Terminal+0x4580>
						uMuestrasADCpwm2 = MAXIMO_MUESTRAS_ADC;
    e6ca:	80 e1       	ldi	r24, 0x10	; 16
    e6cc:	97 e2       	ldi	r25, 0x27	; 39
    e6ce:	90 93 19 05 	sts	0x0519, r25
    e6d2:	80 93 18 05 	sts	0x0518, r24
					}
					UnsignedInt_a_Eeprom(&uMuestrasADCpwm2_Eeprom, &uMuestrasADCpwm2);
    e6d6:	68 e1       	ldi	r22, 0x18	; 24
    e6d8:	75 e0       	ldi	r23, 0x05	; 5
    e6da:	84 e7       	ldi	r24, 0x74	; 116
    e6dc:	94 e0       	ldi	r25, 0x04	; 4
    e6de:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCpwm2_Eeprom_BK, &uMuestrasADCpwm2);
    e6e2:	68 e1       	ldi	r22, 0x18	; 24
    e6e4:	75 e0       	ldi	r23, 0x05	; 5
    e6e6:	86 e9       	ldi	r24, 0x96	; 150
    e6e8:	94 e0       	ldi	r25, 0x04	; 4
    e6ea:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    e6ee:	82 e0       	ldi	r24, 0x02	; 2
    e6f0:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Muestras_PWM_2, uMuestrasADCpwm2);
    e6f4:	80 91 18 05 	lds	r24, 0x0518
    e6f8:	90 91 19 05 	lds	r25, 0x0519
    e6fc:	29 2f       	mov	r18, r25
    e6fe:	2f 93       	push	r18
    e700:	8f 93       	push	r24
    e702:	8c ef       	ldi	r24, 0xFC	; 252
    e704:	95 e0       	ldi	r25, 0x05	; 5
    e706:	89 2f       	mov	r24, r25
    e708:	8f 93       	push	r24
    e70a:	8c ef       	ldi	r24, 0xFC	; 252
    e70c:	95 e0       	ldi	r25, 0x05	; 5
    e70e:	8f 93       	push	r24
    e710:	84 e0       	ldi	r24, 0x04	; 4
    e712:	92 e0       	ldi	r25, 0x02	; 2
    e714:	89 2f       	mov	r24, r25
    e716:	8f 93       	push	r24
    e718:	84 e0       	ldi	r24, 0x04	; 4
    e71a:	92 e0       	ldi	r25, 0x02	; 2
    e71c:	8f 93       	push	r24
    e71e:	81 e8       	ldi	r24, 0x81	; 129
    e720:	92 e0       	ldi	r25, 0x02	; 2
    e722:	89 2f       	mov	r24, r25
    e724:	8f 93       	push	r24
    e726:	81 e8       	ldi	r24, 0x81	; 129
    e728:	92 e0       	ldi	r25, 0x02	; 2
    e72a:	8f 93       	push	r24
    e72c:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    e730:	8d b7       	in	r24, 0x3d	; 61
    e732:	9e b7       	in	r25, 0x3e	; 62
    e734:	08 96       	adiw	r24, 0x08	; 8
    e736:	0f b6       	in	r0, 0x3f	; 63
    e738:	f8 94       	cli
    e73a:	de bf       	out	0x3e, r29	; 62
    e73c:	0f be       	out	0x3f, r0	; 63
    e73e:	cd bf       	out	0x3d, r28	; 61
    e740:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    e744:	80 91 2a 06 	lds	r24, 0x062A
    e748:	90 91 2b 06 	lds	r25, 0x062B
    e74c:	8f 57       	subi	r24, 0x7F	; 127
    e74e:	9d 4f       	sbci	r25, 0xFD	; 253
    e750:	bc 01       	movw	r22, r24
    e752:	80 ee       	ldi	r24, 0xE0	; 224
    e754:	95 e0       	ldi	r25, 0x05	; 5
    e756:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    e75a:	89 2b       	or	r24, r25
    e75c:	e9 f1       	breq	.+122    	; 0xe7d8 <Terminal+0x4682>
					uMuestrasADCpwm2 = DEFAULT_MUESTRAS_ADC_PWM2;
    e75e:	84 ef       	ldi	r24, 0xF4	; 244
    e760:	91 e0       	ldi	r25, 0x01	; 1
    e762:	90 93 19 05 	sts	0x0519, r25
    e766:	80 93 18 05 	sts	0x0518, r24

					UnsignedInt_a_Eeprom(&uMuestrasADCpwm2_Eeprom, &uMuestrasADCpwm2);
    e76a:	68 e1       	ldi	r22, 0x18	; 24
    e76c:	75 e0       	ldi	r23, 0x05	; 5
    e76e:	84 e7       	ldi	r24, 0x74	; 116
    e770:	94 e0       	ldi	r25, 0x04	; 4
    e772:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCpwm2_Eeprom_BK, &uMuestrasADCpwm2);
    e776:	68 e1       	ldi	r22, 0x18	; 24
    e778:	75 e0       	ldi	r23, 0x05	; 5
    e77a:	86 e9       	ldi	r24, 0x96	; 150
    e77c:	94 e0       	ldi	r25, 0x04	; 4
    e77e:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    e782:	82 e0       	ldi	r24, 0x02	; 2
    e784:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Muestras_PWM_2, uMuestrasADCpwm2);
    e788:	80 91 18 05 	lds	r24, 0x0518
    e78c:	90 91 19 05 	lds	r25, 0x0519
    e790:	29 2f       	mov	r18, r25
    e792:	2f 93       	push	r18
    e794:	8f 93       	push	r24
    e796:	8c ef       	ldi	r24, 0xFC	; 252
    e798:	95 e0       	ldi	r25, 0x05	; 5
    e79a:	89 2f       	mov	r24, r25
    e79c:	8f 93       	push	r24
    e79e:	8c ef       	ldi	r24, 0xFC	; 252
    e7a0:	95 e0       	ldi	r25, 0x05	; 5
    e7a2:	8f 93       	push	r24
    e7a4:	84 e0       	ldi	r24, 0x04	; 4
    e7a6:	92 e0       	ldi	r25, 0x02	; 2
    e7a8:	89 2f       	mov	r24, r25
    e7aa:	8f 93       	push	r24
    e7ac:	84 e0       	ldi	r24, 0x04	; 4
    e7ae:	92 e0       	ldi	r25, 0x02	; 2
    e7b0:	8f 93       	push	r24
    e7b2:	81 e8       	ldi	r24, 0x81	; 129
    e7b4:	92 e0       	ldi	r25, 0x02	; 2
    e7b6:	89 2f       	mov	r24, r25
    e7b8:	8f 93       	push	r24
    e7ba:	81 e8       	ldi	r24, 0x81	; 129
    e7bc:	92 e0       	ldi	r25, 0x02	; 2
    e7be:	8f 93       	push	r24
    e7c0:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    e7c4:	ed b7       	in	r30, 0x3d	; 61
    e7c6:	fe b7       	in	r31, 0x3e	; 62
    e7c8:	38 96       	adiw	r30, 0x08	; 8
    e7ca:	0f b6       	in	r0, 0x3f	; 63
    e7cc:	f8 94       	cli
    e7ce:	de bf       	out	0x3e, r29	; 62
    e7d0:	0f be       	out	0x3f, r0	; 63
    e7d2:	cd bf       	out	0x3d, r28	; 61
    e7d4:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Muestras_PWM_2, uMuestrasADCpwm2);
    e7d8:	80 91 18 05 	lds	r24, 0x0518
    e7dc:	90 91 19 05 	lds	r25, 0x0519
    e7e0:	29 2f       	mov	r18, r25
    e7e2:	2f 93       	push	r18
    e7e4:	8f 93       	push	r24
    e7e6:	8c ef       	ldi	r24, 0xFC	; 252
    e7e8:	95 e0       	ldi	r25, 0x05	; 5
    e7ea:	89 2f       	mov	r24, r25
    e7ec:	8f 93       	push	r24
    e7ee:	8c ef       	ldi	r24, 0xFC	; 252
    e7f0:	95 e0       	ldi	r25, 0x05	; 5
    e7f2:	8f 93       	push	r24
    e7f4:	84 e0       	ldi	r24, 0x04	; 4
    e7f6:	92 e0       	ldi	r25, 0x02	; 2
    e7f8:	89 2f       	mov	r24, r25
    e7fa:	8f 93       	push	r24
    e7fc:	84 e0       	ldi	r24, 0x04	; 4
    e7fe:	92 e0       	ldi	r25, 0x02	; 2
    e800:	8f 93       	push	r24
    e802:	81 e8       	ldi	r24, 0x81	; 129
    e804:	92 e0       	ldi	r25, 0x02	; 2
    e806:	89 2f       	mov	r24, r25
    e808:	8f 93       	push	r24
    e80a:	81 e8       	ldi	r24, 0x81	; 129
    e80c:	92 e0       	ldi	r25, 0x02	; 2
    e80e:	8f 93       	push	r24
    e810:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    e814:	8d b7       	in	r24, 0x3d	; 61
    e816:	9e b7       	in	r25, 0x3e	; 62
    e818:	08 96       	adiw	r24, 0x08	; 8
    e81a:	0f b6       	in	r0, 0x3f	; 63
    e81c:	f8 94       	cli
    e81e:	de bf       	out	0x3e, r29	; 62
    e820:	0f be       	out	0x3f, r0	; 63
    e822:	cd bf       	out	0x3d, r28	; 61
    e824:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = FILTRO COND 1 xxxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Muestras_Cond_1, chBufferRx_USART0)) {
    e828:	61 e8       	ldi	r22, 0x81	; 129
    e82a:	72 e0       	ldi	r23, 0x02	; 2
    e82c:	8a e0       	ldi	r24, 0x0A	; 10
    e82e:	96 e0       	ldi	r25, 0x06	; 6
    e830:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    e834:	89 2b       	or	r24, r25
    e836:	09 f4       	brne	.+2      	; 0xe83a <Terminal+0x46e4>
    e838:	e5 c0       	rjmp	.+458    	; 0xea04 <Terminal+0x48ae>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    e83a:	80 91 2a 06 	lds	r24, 0x062A
    e83e:	90 91 2b 06 	lds	r25, 0x062B
    e842:	8f 57       	subi	r24, 0x7F	; 127
    e844:	9d 4f       	sbci	r25, 0xFD	; 253
    e846:	fc 01       	movw	r30, r24
    e848:	80 81       	ld	r24, Z
    e84a:	80 33       	cpi	r24, 0x30	; 48
    e84c:	08 f4       	brcc	.+2      	; 0xe850 <Terminal+0x46fa>
    e84e:	68 c0       	rjmp	.+208    	; 0xe920 <Terminal+0x47ca>
    e850:	80 91 2a 06 	lds	r24, 0x062A
    e854:	90 91 2b 06 	lds	r25, 0x062B
    e858:	8f 57       	subi	r24, 0x7F	; 127
    e85a:	9d 4f       	sbci	r25, 0xFD	; 253
    e85c:	fc 01       	movw	r30, r24
    e85e:	80 81       	ld	r24, Z
    e860:	8a 33       	cpi	r24, 0x3A	; 58
    e862:	08 f0       	brcs	.+2      	; 0xe866 <Terminal+0x4710>
    e864:	5d c0       	rjmp	.+186    	; 0xe920 <Terminal+0x47ca>
					uMuestrasADCcond1 = atoi(chBufferRx_USART0+auxIndexTerminal);
    e866:	80 91 2a 06 	lds	r24, 0x062A
    e86a:	90 91 2b 06 	lds	r25, 0x062B
    e86e:	8f 57       	subi	r24, 0x7F	; 127
    e870:	9d 4f       	sbci	r25, 0xFD	; 253
    e872:	0e 94 1f 84 	call	0x1083e	; 0x1083e <atoi>
    e876:	90 93 02 05 	sts	0x0502, r25
    e87a:	80 93 01 05 	sts	0x0501, r24
					if (uMuestrasADCcond1 < MINIMO_MUESTRAS_ADC){
    e87e:	80 91 01 05 	lds	r24, 0x0501
    e882:	90 91 02 05 	lds	r25, 0x0502
    e886:	89 2b       	or	r24, r25
    e888:	39 f4       	brne	.+14     	; 0xe898 <Terminal+0x4742>
						uMuestrasADCcond1 = MINIMO_MUESTRAS_ADC;
    e88a:	81 e0       	ldi	r24, 0x01	; 1
    e88c:	90 e0       	ldi	r25, 0x00	; 0
    e88e:	90 93 02 05 	sts	0x0502, r25
    e892:	80 93 01 05 	sts	0x0501, r24
    e896:	0d c0       	rjmp	.+26     	; 0xe8b2 <Terminal+0x475c>
					}
					else if (uMuestrasADCcond1 > MAXIMO_MUESTRAS_ADC){
    e898:	80 91 01 05 	lds	r24, 0x0501
    e89c:	90 91 02 05 	lds	r25, 0x0502
    e8a0:	81 31       	cpi	r24, 0x11	; 17
    e8a2:	97 42       	sbci	r25, 0x27	; 39
    e8a4:	30 f0       	brcs	.+12     	; 0xe8b2 <Terminal+0x475c>
						uMuestrasADCcond1 = MAXIMO_MUESTRAS_ADC;
    e8a6:	80 e1       	ldi	r24, 0x10	; 16
    e8a8:	97 e2       	ldi	r25, 0x27	; 39
    e8aa:	90 93 02 05 	sts	0x0502, r25
    e8ae:	80 93 01 05 	sts	0x0501, r24
					}
					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom, &uMuestrasADCcond1);
    e8b2:	61 e0       	ldi	r22, 0x01	; 1
    e8b4:	75 e0       	ldi	r23, 0x05	; 5
    e8b6:	8a e9       	ldi	r24, 0x9A	; 154
    e8b8:	94 e0       	ldi	r25, 0x04	; 4
    e8ba:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom_BK, &uMuestrasADCcond1);
    e8be:	61 e0       	ldi	r22, 0x01	; 1
    e8c0:	75 e0       	ldi	r23, 0x05	; 5
    e8c2:	8a e8       	ldi	r24, 0x8A	; 138
    e8c4:	94 e0       	ldi	r25, 0x04	; 4
    e8c6:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    e8ca:	82 e0       	ldi	r24, 0x02	; 2
    e8cc:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Muestras_Cond_1, uMuestrasADCcond1);
    e8d0:	80 91 01 05 	lds	r24, 0x0501
    e8d4:	90 91 02 05 	lds	r25, 0x0502
    e8d8:	29 2f       	mov	r18, r25
    e8da:	2f 93       	push	r18
    e8dc:	8f 93       	push	r24
    e8de:	8a e0       	ldi	r24, 0x0A	; 10
    e8e0:	96 e0       	ldi	r25, 0x06	; 6
    e8e2:	89 2f       	mov	r24, r25
    e8e4:	8f 93       	push	r24
    e8e6:	8a e0       	ldi	r24, 0x0A	; 10
    e8e8:	96 e0       	ldi	r25, 0x06	; 6
    e8ea:	8f 93       	push	r24
    e8ec:	84 e0       	ldi	r24, 0x04	; 4
    e8ee:	92 e0       	ldi	r25, 0x02	; 2
    e8f0:	89 2f       	mov	r24, r25
    e8f2:	8f 93       	push	r24
    e8f4:	84 e0       	ldi	r24, 0x04	; 4
    e8f6:	92 e0       	ldi	r25, 0x02	; 2
    e8f8:	8f 93       	push	r24
    e8fa:	81 e8       	ldi	r24, 0x81	; 129
    e8fc:	92 e0       	ldi	r25, 0x02	; 2
    e8fe:	89 2f       	mov	r24, r25
    e900:	8f 93       	push	r24
    e902:	81 e8       	ldi	r24, 0x81	; 129
    e904:	92 e0       	ldi	r25, 0x02	; 2
    e906:	8f 93       	push	r24
    e908:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    e90c:	8d b7       	in	r24, 0x3d	; 61
    e90e:	9e b7       	in	r25, 0x3e	; 62
    e910:	08 96       	adiw	r24, 0x08	; 8
    e912:	0f b6       	in	r0, 0x3f	; 63
    e914:	f8 94       	cli
    e916:	de bf       	out	0x3e, r29	; 62
    e918:	0f be       	out	0x3f, r0	; 63
    e91a:	cd bf       	out	0x3d, r28	; 61
    e91c:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    e920:	80 91 2a 06 	lds	r24, 0x062A
    e924:	90 91 2b 06 	lds	r25, 0x062B
    e928:	8f 57       	subi	r24, 0x7F	; 127
    e92a:	9d 4f       	sbci	r25, 0xFD	; 253
    e92c:	bc 01       	movw	r22, r24
    e92e:	80 ee       	ldi	r24, 0xE0	; 224
    e930:	95 e0       	ldi	r25, 0x05	; 5
    e932:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    e936:	89 2b       	or	r24, r25
    e938:	e9 f1       	breq	.+122    	; 0xe9b4 <Terminal+0x485e>
					uMuestrasADCcond1 = DEFAULT_MUESTRAS_COND1;
    e93a:	84 ef       	ldi	r24, 0xF4	; 244
    e93c:	91 e0       	ldi	r25, 0x01	; 1
    e93e:	90 93 02 05 	sts	0x0502, r25
    e942:	80 93 01 05 	sts	0x0501, r24

					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom, &uMuestrasADCcond1);
    e946:	61 e0       	ldi	r22, 0x01	; 1
    e948:	75 e0       	ldi	r23, 0x05	; 5
    e94a:	8a e9       	ldi	r24, 0x9A	; 154
    e94c:	94 e0       	ldi	r25, 0x04	; 4
    e94e:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond1_Eeprom_BK, &uMuestrasADCcond1);
    e952:	61 e0       	ldi	r22, 0x01	; 1
    e954:	75 e0       	ldi	r23, 0x05	; 5
    e956:	8a e8       	ldi	r24, 0x8A	; 138
    e958:	94 e0       	ldi	r25, 0x04	; 4
    e95a:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    e95e:	82 e0       	ldi	r24, 0x02	; 2
    e960:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Muestras_Cond_1, uMuestrasADCcond1);
    e964:	80 91 01 05 	lds	r24, 0x0501
    e968:	90 91 02 05 	lds	r25, 0x0502
    e96c:	29 2f       	mov	r18, r25
    e96e:	2f 93       	push	r18
    e970:	8f 93       	push	r24
    e972:	8a e0       	ldi	r24, 0x0A	; 10
    e974:	96 e0       	ldi	r25, 0x06	; 6
    e976:	89 2f       	mov	r24, r25
    e978:	8f 93       	push	r24
    e97a:	8a e0       	ldi	r24, 0x0A	; 10
    e97c:	96 e0       	ldi	r25, 0x06	; 6
    e97e:	8f 93       	push	r24
    e980:	84 e0       	ldi	r24, 0x04	; 4
    e982:	92 e0       	ldi	r25, 0x02	; 2
    e984:	89 2f       	mov	r24, r25
    e986:	8f 93       	push	r24
    e988:	84 e0       	ldi	r24, 0x04	; 4
    e98a:	92 e0       	ldi	r25, 0x02	; 2
    e98c:	8f 93       	push	r24
    e98e:	81 e8       	ldi	r24, 0x81	; 129
    e990:	92 e0       	ldi	r25, 0x02	; 2
    e992:	89 2f       	mov	r24, r25
    e994:	8f 93       	push	r24
    e996:	81 e8       	ldi	r24, 0x81	; 129
    e998:	92 e0       	ldi	r25, 0x02	; 2
    e99a:	8f 93       	push	r24
    e99c:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    e9a0:	ed b7       	in	r30, 0x3d	; 61
    e9a2:	fe b7       	in	r31, 0x3e	; 62
    e9a4:	38 96       	adiw	r30, 0x08	; 8
    e9a6:	0f b6       	in	r0, 0x3f	; 63
    e9a8:	f8 94       	cli
    e9aa:	de bf       	out	0x3e, r29	; 62
    e9ac:	0f be       	out	0x3f, r0	; 63
    e9ae:	cd bf       	out	0x3d, r28	; 61
    e9b0:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Muestras_Cond_1, uMuestrasADCcond1);
    e9b4:	80 91 01 05 	lds	r24, 0x0501
    e9b8:	90 91 02 05 	lds	r25, 0x0502
    e9bc:	29 2f       	mov	r18, r25
    e9be:	2f 93       	push	r18
    e9c0:	8f 93       	push	r24
    e9c2:	8a e0       	ldi	r24, 0x0A	; 10
    e9c4:	96 e0       	ldi	r25, 0x06	; 6
    e9c6:	89 2f       	mov	r24, r25
    e9c8:	8f 93       	push	r24
    e9ca:	8a e0       	ldi	r24, 0x0A	; 10
    e9cc:	96 e0       	ldi	r25, 0x06	; 6
    e9ce:	8f 93       	push	r24
    e9d0:	84 e0       	ldi	r24, 0x04	; 4
    e9d2:	92 e0       	ldi	r25, 0x02	; 2
    e9d4:	89 2f       	mov	r24, r25
    e9d6:	8f 93       	push	r24
    e9d8:	84 e0       	ldi	r24, 0x04	; 4
    e9da:	92 e0       	ldi	r25, 0x02	; 2
    e9dc:	8f 93       	push	r24
    e9de:	81 e8       	ldi	r24, 0x81	; 129
    e9e0:	92 e0       	ldi	r25, 0x02	; 2
    e9e2:	89 2f       	mov	r24, r25
    e9e4:	8f 93       	push	r24
    e9e6:	81 e8       	ldi	r24, 0x81	; 129
    e9e8:	92 e0       	ldi	r25, 0x02	; 2
    e9ea:	8f 93       	push	r24
    e9ec:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    e9f0:	8d b7       	in	r24, 0x3d	; 61
    e9f2:	9e b7       	in	r25, 0x3e	; 62
    e9f4:	08 96       	adiw	r24, 0x08	; 8
    e9f6:	0f b6       	in	r0, 0x3f	; 63
    e9f8:	f8 94       	cli
    e9fa:	de bf       	out	0x3e, r29	; 62
    e9fc:	0f be       	out	0x3f, r0	; 63
    e9fe:	cd bf       	out	0x3d, r28	; 61
    ea00:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = FILTRO COND 2 xxxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Muestras_Cond_2, chBufferRx_USART0)) {
    ea04:	61 e8       	ldi	r22, 0x81	; 129
    ea06:	72 e0       	ldi	r23, 0x02	; 2
    ea08:	89 e1       	ldi	r24, 0x19	; 25
    ea0a:	96 e0       	ldi	r25, 0x06	; 6
    ea0c:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    ea10:	89 2b       	or	r24, r25
    ea12:	09 f4       	brne	.+2      	; 0xea16 <Terminal+0x48c0>
    ea14:	e3 c0       	rjmp	.+454    	; 0xebdc <Terminal+0x4a86>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    ea16:	80 91 2a 06 	lds	r24, 0x062A
    ea1a:	90 91 2b 06 	lds	r25, 0x062B
    ea1e:	8f 57       	subi	r24, 0x7F	; 127
    ea20:	9d 4f       	sbci	r25, 0xFD	; 253
    ea22:	fc 01       	movw	r30, r24
    ea24:	80 81       	ld	r24, Z
    ea26:	80 33       	cpi	r24, 0x30	; 48
    ea28:	08 f4       	brcc	.+2      	; 0xea2c <Terminal+0x48d6>
    ea2a:	68 c0       	rjmp	.+208    	; 0xeafc <Terminal+0x49a6>
    ea2c:	80 91 2a 06 	lds	r24, 0x062A
    ea30:	90 91 2b 06 	lds	r25, 0x062B
    ea34:	8f 57       	subi	r24, 0x7F	; 127
    ea36:	9d 4f       	sbci	r25, 0xFD	; 253
    ea38:	fc 01       	movw	r30, r24
    ea3a:	80 81       	ld	r24, Z
    ea3c:	8a 33       	cpi	r24, 0x3A	; 58
    ea3e:	08 f0       	brcs	.+2      	; 0xea42 <Terminal+0x48ec>
    ea40:	5d c0       	rjmp	.+186    	; 0xeafc <Terminal+0x49a6>
					uMuestrasADCcond2 = atoi(chBufferRx_USART0+auxIndexTerminal);
    ea42:	80 91 2a 06 	lds	r24, 0x062A
    ea46:	90 91 2b 06 	lds	r25, 0x062B
    ea4a:	8f 57       	subi	r24, 0x7F	; 127
    ea4c:	9d 4f       	sbci	r25, 0xFD	; 253
    ea4e:	0e 94 1f 84 	call	0x1083e	; 0x1083e <atoi>
    ea52:	90 93 f7 04 	sts	0x04F7, r25
    ea56:	80 93 f6 04 	sts	0x04F6, r24
					if (uMuestrasADCcond2 < MINIMO_MUESTRAS_ADC){
    ea5a:	80 91 f6 04 	lds	r24, 0x04F6
    ea5e:	90 91 f7 04 	lds	r25, 0x04F7
    ea62:	89 2b       	or	r24, r25
    ea64:	39 f4       	brne	.+14     	; 0xea74 <Terminal+0x491e>
						uMuestrasADCcond2 = MINIMO_MUESTRAS_ADC;
    ea66:	81 e0       	ldi	r24, 0x01	; 1
    ea68:	90 e0       	ldi	r25, 0x00	; 0
    ea6a:	90 93 f7 04 	sts	0x04F7, r25
    ea6e:	80 93 f6 04 	sts	0x04F6, r24
    ea72:	0d c0       	rjmp	.+26     	; 0xea8e <Terminal+0x4938>
					}
					else if (uMuestrasADCcond2 > MAXIMO_MUESTRAS_ADC){
    ea74:	80 91 f6 04 	lds	r24, 0x04F6
    ea78:	90 91 f7 04 	lds	r25, 0x04F7
    ea7c:	81 31       	cpi	r24, 0x11	; 17
    ea7e:	97 42       	sbci	r25, 0x27	; 39
    ea80:	30 f0       	brcs	.+12     	; 0xea8e <Terminal+0x4938>
						uMuestrasADCcond2 = MAXIMO_MUESTRAS_ADC;
    ea82:	80 e1       	ldi	r24, 0x10	; 16
    ea84:	97 e2       	ldi	r25, 0x27	; 39
    ea86:	90 93 f7 04 	sts	0x04F7, r25
    ea8a:	80 93 f6 04 	sts	0x04F6, r24
					}
					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom, &uMuestrasADCcond2);
    ea8e:	66 ef       	ldi	r22, 0xF6	; 246
    ea90:	74 e0       	ldi	r23, 0x04	; 4
    ea92:	88 ec       	ldi	r24, 0xC8	; 200
    ea94:	94 e0       	ldi	r25, 0x04	; 4
    ea96:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom_BK, &uMuestrasADCcond2);
    ea9a:	66 ef       	ldi	r22, 0xF6	; 246
    ea9c:	74 e0       	ldi	r23, 0x04	; 4
    ea9e:	8c e9       	ldi	r24, 0x9C	; 156
    eaa0:	94 e0       	ldi	r25, 0x04	; 4
    eaa2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    eaa6:	82 e0       	ldi	r24, 0x02	; 2
    eaa8:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Muestras_Cond_2, uMuestrasADCcond2);
    eaac:	80 91 f6 04 	lds	r24, 0x04F6
    eab0:	90 91 f7 04 	lds	r25, 0x04F7
    eab4:	29 2f       	mov	r18, r25
    eab6:	2f 93       	push	r18
    eab8:	8f 93       	push	r24
    eaba:	89 e1       	ldi	r24, 0x19	; 25
    eabc:	96 e0       	ldi	r25, 0x06	; 6
    eabe:	89 2f       	mov	r24, r25
    eac0:	8f 93       	push	r24
    eac2:	89 e1       	ldi	r24, 0x19	; 25
    eac4:	96 e0       	ldi	r25, 0x06	; 6
    eac6:	8f 93       	push	r24
    eac8:	84 e0       	ldi	r24, 0x04	; 4
    eaca:	92 e0       	ldi	r25, 0x02	; 2
    eacc:	89 2f       	mov	r24, r25
    eace:	8f 93       	push	r24
    ead0:	84 e0       	ldi	r24, 0x04	; 4
    ead2:	92 e0       	ldi	r25, 0x02	; 2
    ead4:	8f 93       	push	r24
    ead6:	81 e8       	ldi	r24, 0x81	; 129
    ead8:	92 e0       	ldi	r25, 0x02	; 2
    eada:	89 2f       	mov	r24, r25
    eadc:	8f 93       	push	r24
    eade:	81 e8       	ldi	r24, 0x81	; 129
    eae0:	92 e0       	ldi	r25, 0x02	; 2
    eae2:	8f 93       	push	r24
    eae4:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    eae8:	8d b7       	in	r24, 0x3d	; 61
    eaea:	9e b7       	in	r25, 0x3e	; 62
    eaec:	08 96       	adiw	r24, 0x08	; 8
    eaee:	0f b6       	in	r0, 0x3f	; 63
    eaf0:	f8 94       	cli
    eaf2:	de bf       	out	0x3e, r29	; 62
    eaf4:	0f be       	out	0x3f, r0	; 63
    eaf6:	cd bf       	out	0x3d, r28	; 61
    eaf8:	0c 94 2d 7d 	jmp	0xfa5a	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    eafc:	80 91 2a 06 	lds	r24, 0x062A
    eb00:	90 91 2b 06 	lds	r25, 0x062B
    eb04:	8f 57       	subi	r24, 0x7F	; 127
    eb06:	9d 4f       	sbci	r25, 0xFD	; 253
    eb08:	bc 01       	movw	r22, r24
    eb0a:	80 ee       	ldi	r24, 0xE0	; 224
    eb0c:	95 e0       	ldi	r25, 0x05	; 5
    eb0e:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    eb12:	89 2b       	or	r24, r25
    eb14:	e1 f1       	breq	.+120    	; 0xeb8e <Terminal+0x4a38>
					uMuestrasADCcond2 = DEFAULT_MUESTRAS_COND2;
    eb16:	84 ef       	ldi	r24, 0xF4	; 244
    eb18:	91 e0       	ldi	r25, 0x01	; 1
    eb1a:	90 93 f7 04 	sts	0x04F7, r25
    eb1e:	80 93 f6 04 	sts	0x04F6, r24

					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom, &uMuestrasADCcond2);
    eb22:	66 ef       	ldi	r22, 0xF6	; 246
    eb24:	74 e0       	ldi	r23, 0x04	; 4
    eb26:	88 ec       	ldi	r24, 0xC8	; 200
    eb28:	94 e0       	ldi	r25, 0x04	; 4
    eb2a:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uMuestrasADCcond2_Eeprom_BK, &uMuestrasADCcond2);
    eb2e:	66 ef       	ldi	r22, 0xF6	; 246
    eb30:	74 e0       	ldi	r23, 0x04	; 4
    eb32:	8c e9       	ldi	r24, 0x9C	; 156
    eb34:	94 e0       	ldi	r25, 0x04	; 4
    eb36:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ADC);
    eb3a:	82 e0       	ldi	r24, 0x02	; 2
    eb3c:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Muestras_Cond_2, uMuestrasADCcond2);
    eb40:	80 91 f6 04 	lds	r24, 0x04F6
    eb44:	90 91 f7 04 	lds	r25, 0x04F7
    eb48:	29 2f       	mov	r18, r25
    eb4a:	2f 93       	push	r18
    eb4c:	8f 93       	push	r24
    eb4e:	89 e1       	ldi	r24, 0x19	; 25
    eb50:	96 e0       	ldi	r25, 0x06	; 6
    eb52:	89 2f       	mov	r24, r25
    eb54:	8f 93       	push	r24
    eb56:	89 e1       	ldi	r24, 0x19	; 25
    eb58:	96 e0       	ldi	r25, 0x06	; 6
    eb5a:	8f 93       	push	r24
    eb5c:	84 e0       	ldi	r24, 0x04	; 4
    eb5e:	92 e0       	ldi	r25, 0x02	; 2
    eb60:	89 2f       	mov	r24, r25
    eb62:	8f 93       	push	r24
    eb64:	84 e0       	ldi	r24, 0x04	; 4
    eb66:	92 e0       	ldi	r25, 0x02	; 2
    eb68:	8f 93       	push	r24
    eb6a:	81 e8       	ldi	r24, 0x81	; 129
    eb6c:	92 e0       	ldi	r25, 0x02	; 2
    eb6e:	89 2f       	mov	r24, r25
    eb70:	8f 93       	push	r24
    eb72:	81 e8       	ldi	r24, 0x81	; 129
    eb74:	92 e0       	ldi	r25, 0x02	; 2
    eb76:	8f 93       	push	r24
    eb78:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    eb7c:	ed b7       	in	r30, 0x3d	; 61
    eb7e:	fe b7       	in	r31, 0x3e	; 62
    eb80:	38 96       	adiw	r30, 0x08	; 8
    eb82:	0f b6       	in	r0, 0x3f	; 63
    eb84:	f8 94       	cli
    eb86:	de bf       	out	0x3e, r29	; 62
    eb88:	0f be       	out	0x3f, r0	; 63
    eb8a:	cd bf       	out	0x3d, r28	; 61
    eb8c:	66 c7       	rjmp	.+3788   	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Muestras_Cond_2, uMuestrasADCcond2);
    eb8e:	80 91 f6 04 	lds	r24, 0x04F6
    eb92:	90 91 f7 04 	lds	r25, 0x04F7
    eb96:	29 2f       	mov	r18, r25
    eb98:	2f 93       	push	r18
    eb9a:	8f 93       	push	r24
    eb9c:	89 e1       	ldi	r24, 0x19	; 25
    eb9e:	96 e0       	ldi	r25, 0x06	; 6
    eba0:	89 2f       	mov	r24, r25
    eba2:	8f 93       	push	r24
    eba4:	89 e1       	ldi	r24, 0x19	; 25
    eba6:	96 e0       	ldi	r25, 0x06	; 6
    eba8:	8f 93       	push	r24
    ebaa:	84 e0       	ldi	r24, 0x04	; 4
    ebac:	92 e0       	ldi	r25, 0x02	; 2
    ebae:	89 2f       	mov	r24, r25
    ebb0:	8f 93       	push	r24
    ebb2:	84 e0       	ldi	r24, 0x04	; 4
    ebb4:	92 e0       	ldi	r25, 0x02	; 2
    ebb6:	8f 93       	push	r24
    ebb8:	81 e8       	ldi	r24, 0x81	; 129
    ebba:	92 e0       	ldi	r25, 0x02	; 2
    ebbc:	89 2f       	mov	r24, r25
    ebbe:	8f 93       	push	r24
    ebc0:	81 e8       	ldi	r24, 0x81	; 129
    ebc2:	92 e0       	ldi	r25, 0x02	; 2
    ebc4:	8f 93       	push	r24
    ebc6:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    ebca:	8d b7       	in	r24, 0x3d	; 61
    ebcc:	9e b7       	in	r25, 0x3e	; 62
    ebce:	08 96       	adiw	r24, 0x08	; 8
    ebd0:	0f b6       	in	r0, 0x3f	; 63
    ebd2:	f8 94       	cli
    ebd4:	de bf       	out	0x3e, r29	; 62
    ebd6:	0f be       	out	0x3f, r0	; 63
    ebd8:	cd bf       	out	0x3d, r28	; 61
    ebda:	3f c7       	rjmp	.+3710   	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = GANANCIA PWM 1 xxxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Ganancia_PWM_1, chBufferRx_USART0)) {
    ebdc:	61 e8       	ldi	r22, 0x81	; 129
    ebde:	72 e0       	ldi	r23, 0x02	; 2
    ebe0:	88 e2       	ldi	r24, 0x28	; 40
    ebe2:	96 e0       	ldi	r25, 0x06	; 6
    ebe4:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    ebe8:	89 2b       	or	r24, r25
    ebea:	09 f4       	brne	.+2      	; 0xebee <Terminal+0x4a98>
    ebec:	e2 c0       	rjmp	.+452    	; 0xedb2 <Terminal+0x4c5c>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    ebee:	80 91 2a 06 	lds	r24, 0x062A
    ebf2:	90 91 2b 06 	lds	r25, 0x062B
    ebf6:	8f 57       	subi	r24, 0x7F	; 127
    ebf8:	9d 4f       	sbci	r25, 0xFD	; 253
    ebfa:	fc 01       	movw	r30, r24
    ebfc:	80 81       	ld	r24, Z
    ebfe:	80 33       	cpi	r24, 0x30	; 48
    ec00:	08 f4       	brcc	.+2      	; 0xec04 <Terminal+0x4aae>
    ec02:	67 c0       	rjmp	.+206    	; 0xecd2 <Terminal+0x4b7c>
    ec04:	80 91 2a 06 	lds	r24, 0x062A
    ec08:	90 91 2b 06 	lds	r25, 0x062B
    ec0c:	8f 57       	subi	r24, 0x7F	; 127
    ec0e:	9d 4f       	sbci	r25, 0xFD	; 253
    ec10:	fc 01       	movw	r30, r24
    ec12:	80 81       	ld	r24, Z
    ec14:	8a 33       	cpi	r24, 0x3A	; 58
    ec16:	08 f0       	brcs	.+2      	; 0xec1a <Terminal+0x4ac4>
    ec18:	5c c0       	rjmp	.+184    	; 0xecd2 <Terminal+0x4b7c>
					uGananciaPWM1 = atoi(chBufferRx_USART0+auxIndexTerminal);
    ec1a:	80 91 2a 06 	lds	r24, 0x062A
    ec1e:	90 91 2b 06 	lds	r25, 0x062B
    ec22:	8f 57       	subi	r24, 0x7F	; 127
    ec24:	9d 4f       	sbci	r25, 0xFD	; 253
    ec26:	0e 94 1f 84 	call	0x1083e	; 0x1083e <atoi>
    ec2a:	90 93 75 02 	sts	0x0275, r25
    ec2e:	80 93 74 02 	sts	0x0274, r24
					if (uGananciaPWM1 < MINIMO_GANANCIA_LAZO_PWM){
    ec32:	80 91 74 02 	lds	r24, 0x0274
    ec36:	90 91 75 02 	lds	r25, 0x0275
    ec3a:	89 2b       	or	r24, r25
    ec3c:	39 f4       	brne	.+14     	; 0xec4c <Terminal+0x4af6>
						uGananciaPWM1 = MINIMO_GANANCIA_LAZO_PWM;
    ec3e:	81 e0       	ldi	r24, 0x01	; 1
    ec40:	90 e0       	ldi	r25, 0x00	; 0
    ec42:	90 93 75 02 	sts	0x0275, r25
    ec46:	80 93 74 02 	sts	0x0274, r24
    ec4a:	0d c0       	rjmp	.+26     	; 0xec66 <Terminal+0x4b10>
					}
					else if (uGananciaPWM1 > MAXIMO_GANANCIA_LAZO_PWM){
    ec4c:	80 91 74 02 	lds	r24, 0x0274
    ec50:	90 91 75 02 	lds	r25, 0x0275
    ec54:	89 3e       	cpi	r24, 0xE9	; 233
    ec56:	93 40       	sbci	r25, 0x03	; 3
    ec58:	30 f0       	brcs	.+12     	; 0xec66 <Terminal+0x4b10>
						uGananciaPWM1 = MAXIMO_GANANCIA_LAZO_PWM;
    ec5a:	88 ee       	ldi	r24, 0xE8	; 232
    ec5c:	93 e0       	ldi	r25, 0x03	; 3
    ec5e:	90 93 75 02 	sts	0x0275, r25
    ec62:	80 93 74 02 	sts	0x0274, r24
					}
					UnsignedInt_a_Eeprom(&uGananciaPWM1_Eeprom, &uGananciaPWM1);
    ec66:	64 e7       	ldi	r22, 0x74	; 116
    ec68:	72 e0       	ldi	r23, 0x02	; 2
    ec6a:	82 eb       	ldi	r24, 0xB2	; 178
    ec6c:	94 e0       	ldi	r25, 0x04	; 4
    ec6e:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uGananciaPWM1_Eeprom_BK, &uGananciaPWM1);
    ec72:	64 e7       	ldi	r22, 0x74	; 116
    ec74:	72 e0       	ldi	r23, 0x02	; 2
    ec76:	8a eb       	ldi	r24, 0xBA	; 186
    ec78:	94 e0       	ldi	r25, 0x04	; 4
    ec7a:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PWM);
    ec7e:	83 e0       	ldi	r24, 0x03	; 3
    ec80:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Ganancia_PWM_1, uGananciaPWM1);
    ec84:	80 91 74 02 	lds	r24, 0x0274
    ec88:	90 91 75 02 	lds	r25, 0x0275
    ec8c:	29 2f       	mov	r18, r25
    ec8e:	2f 93       	push	r18
    ec90:	8f 93       	push	r24
    ec92:	88 e2       	ldi	r24, 0x28	; 40
    ec94:	96 e0       	ldi	r25, 0x06	; 6
    ec96:	89 2f       	mov	r24, r25
    ec98:	8f 93       	push	r24
    ec9a:	88 e2       	ldi	r24, 0x28	; 40
    ec9c:	96 e0       	ldi	r25, 0x06	; 6
    ec9e:	8f 93       	push	r24
    eca0:	84 e0       	ldi	r24, 0x04	; 4
    eca2:	92 e0       	ldi	r25, 0x02	; 2
    eca4:	89 2f       	mov	r24, r25
    eca6:	8f 93       	push	r24
    eca8:	84 e0       	ldi	r24, 0x04	; 4
    ecaa:	92 e0       	ldi	r25, 0x02	; 2
    ecac:	8f 93       	push	r24
    ecae:	81 e8       	ldi	r24, 0x81	; 129
    ecb0:	92 e0       	ldi	r25, 0x02	; 2
    ecb2:	89 2f       	mov	r24, r25
    ecb4:	8f 93       	push	r24
    ecb6:	81 e8       	ldi	r24, 0x81	; 129
    ecb8:	92 e0       	ldi	r25, 0x02	; 2
    ecba:	8f 93       	push	r24
    ecbc:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    ecc0:	8d b7       	in	r24, 0x3d	; 61
    ecc2:	9e b7       	in	r25, 0x3e	; 62
    ecc4:	08 96       	adiw	r24, 0x08	; 8
    ecc6:	0f b6       	in	r0, 0x3f	; 63
    ecc8:	f8 94       	cli
    ecca:	de bf       	out	0x3e, r29	; 62
    eccc:	0f be       	out	0x3f, r0	; 63
    ecce:	cd bf       	out	0x3d, r28	; 61
    ecd0:	c4 c6       	rjmp	.+3464   	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    ecd2:	80 91 2a 06 	lds	r24, 0x062A
    ecd6:	90 91 2b 06 	lds	r25, 0x062B
    ecda:	8f 57       	subi	r24, 0x7F	; 127
    ecdc:	9d 4f       	sbci	r25, 0xFD	; 253
    ecde:	bc 01       	movw	r22, r24
    ece0:	80 ee       	ldi	r24, 0xE0	; 224
    ece2:	95 e0       	ldi	r25, 0x05	; 5
    ece4:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    ece8:	89 2b       	or	r24, r25
    ecea:	e1 f1       	breq	.+120    	; 0xed64 <Terminal+0x4c0e>
					uGananciaPWM1 = DEFAULT_GANACIA_LAZO_PWM_1;
    ecec:	88 ec       	ldi	r24, 0xC8	; 200
    ecee:	90 e0       	ldi	r25, 0x00	; 0
    ecf0:	90 93 75 02 	sts	0x0275, r25
    ecf4:	80 93 74 02 	sts	0x0274, r24

					UnsignedInt_a_Eeprom(&uGananciaPWM1_Eeprom, &uGananciaPWM1);
    ecf8:	64 e7       	ldi	r22, 0x74	; 116
    ecfa:	72 e0       	ldi	r23, 0x02	; 2
    ecfc:	82 eb       	ldi	r24, 0xB2	; 178
    ecfe:	94 e0       	ldi	r25, 0x04	; 4
    ed00:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uGananciaPWM1_Eeprom_BK, &uGananciaPWM1);
    ed04:	64 e7       	ldi	r22, 0x74	; 116
    ed06:	72 e0       	ldi	r23, 0x02	; 2
    ed08:	8a eb       	ldi	r24, 0xBA	; 186
    ed0a:	94 e0       	ldi	r25, 0x04	; 4
    ed0c:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PWM);
    ed10:	83 e0       	ldi	r24, 0x03	; 3
    ed12:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Ganancia_PWM_1, uGananciaPWM1);
    ed16:	80 91 74 02 	lds	r24, 0x0274
    ed1a:	90 91 75 02 	lds	r25, 0x0275
    ed1e:	29 2f       	mov	r18, r25
    ed20:	2f 93       	push	r18
    ed22:	8f 93       	push	r24
    ed24:	88 e2       	ldi	r24, 0x28	; 40
    ed26:	96 e0       	ldi	r25, 0x06	; 6
    ed28:	89 2f       	mov	r24, r25
    ed2a:	8f 93       	push	r24
    ed2c:	88 e2       	ldi	r24, 0x28	; 40
    ed2e:	96 e0       	ldi	r25, 0x06	; 6
    ed30:	8f 93       	push	r24
    ed32:	84 e0       	ldi	r24, 0x04	; 4
    ed34:	92 e0       	ldi	r25, 0x02	; 2
    ed36:	89 2f       	mov	r24, r25
    ed38:	8f 93       	push	r24
    ed3a:	84 e0       	ldi	r24, 0x04	; 4
    ed3c:	92 e0       	ldi	r25, 0x02	; 2
    ed3e:	8f 93       	push	r24
    ed40:	81 e8       	ldi	r24, 0x81	; 129
    ed42:	92 e0       	ldi	r25, 0x02	; 2
    ed44:	89 2f       	mov	r24, r25
    ed46:	8f 93       	push	r24
    ed48:	81 e8       	ldi	r24, 0x81	; 129
    ed4a:	92 e0       	ldi	r25, 0x02	; 2
    ed4c:	8f 93       	push	r24
    ed4e:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    ed52:	ed b7       	in	r30, 0x3d	; 61
    ed54:	fe b7       	in	r31, 0x3e	; 62
    ed56:	38 96       	adiw	r30, 0x08	; 8
    ed58:	0f b6       	in	r0, 0x3f	; 63
    ed5a:	f8 94       	cli
    ed5c:	de bf       	out	0x3e, r29	; 62
    ed5e:	0f be       	out	0x3f, r0	; 63
    ed60:	cd bf       	out	0x3d, r28	; 61
    ed62:	7b c6       	rjmp	.+3318   	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Ganancia_PWM_1, uGananciaPWM1);
    ed64:	80 91 74 02 	lds	r24, 0x0274
    ed68:	90 91 75 02 	lds	r25, 0x0275
    ed6c:	29 2f       	mov	r18, r25
    ed6e:	2f 93       	push	r18
    ed70:	8f 93       	push	r24
    ed72:	88 e2       	ldi	r24, 0x28	; 40
    ed74:	96 e0       	ldi	r25, 0x06	; 6
    ed76:	89 2f       	mov	r24, r25
    ed78:	8f 93       	push	r24
    ed7a:	88 e2       	ldi	r24, 0x28	; 40
    ed7c:	96 e0       	ldi	r25, 0x06	; 6
    ed7e:	8f 93       	push	r24
    ed80:	84 e0       	ldi	r24, 0x04	; 4
    ed82:	92 e0       	ldi	r25, 0x02	; 2
    ed84:	89 2f       	mov	r24, r25
    ed86:	8f 93       	push	r24
    ed88:	84 e0       	ldi	r24, 0x04	; 4
    ed8a:	92 e0       	ldi	r25, 0x02	; 2
    ed8c:	8f 93       	push	r24
    ed8e:	81 e8       	ldi	r24, 0x81	; 129
    ed90:	92 e0       	ldi	r25, 0x02	; 2
    ed92:	89 2f       	mov	r24, r25
    ed94:	8f 93       	push	r24
    ed96:	81 e8       	ldi	r24, 0x81	; 129
    ed98:	92 e0       	ldi	r25, 0x02	; 2
    ed9a:	8f 93       	push	r24
    ed9c:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    eda0:	8d b7       	in	r24, 0x3d	; 61
    eda2:	9e b7       	in	r25, 0x3e	; 62
    eda4:	08 96       	adiw	r24, 0x08	; 8
    eda6:	0f b6       	in	r0, 0x3f	; 63
    eda8:	f8 94       	cli
    edaa:	de bf       	out	0x3e, r29	; 62
    edac:	0f be       	out	0x3f, r0	; 63
    edae:	cd bf       	out	0x3d, r28	; 61
    edb0:	54 c6       	rjmp	.+3240   	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = GANANCIA PWM 2 xxxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Ganancia_PWM_2, chBufferRx_USART0)) {
    edb2:	61 e8       	ldi	r22, 0x81	; 129
    edb4:	72 e0       	ldi	r23, 0x02	; 2
    edb6:	88 e3       	ldi	r24, 0x38	; 56
    edb8:	96 e0       	ldi	r25, 0x06	; 6
    edba:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    edbe:	89 2b       	or	r24, r25
    edc0:	09 f4       	brne	.+2      	; 0xedc4 <Terminal+0x4c6e>
    edc2:	e2 c0       	rjmp	.+452    	; 0xef88 <Terminal+0x4e32>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    edc4:	80 91 2a 06 	lds	r24, 0x062A
    edc8:	90 91 2b 06 	lds	r25, 0x062B
    edcc:	8f 57       	subi	r24, 0x7F	; 127
    edce:	9d 4f       	sbci	r25, 0xFD	; 253
    edd0:	fc 01       	movw	r30, r24
    edd2:	80 81       	ld	r24, Z
    edd4:	80 33       	cpi	r24, 0x30	; 48
    edd6:	08 f4       	brcc	.+2      	; 0xedda <Terminal+0x4c84>
    edd8:	67 c0       	rjmp	.+206    	; 0xeea8 <Terminal+0x4d52>
    edda:	80 91 2a 06 	lds	r24, 0x062A
    edde:	90 91 2b 06 	lds	r25, 0x062B
    ede2:	8f 57       	subi	r24, 0x7F	; 127
    ede4:	9d 4f       	sbci	r25, 0xFD	; 253
    ede6:	fc 01       	movw	r30, r24
    ede8:	80 81       	ld	r24, Z
    edea:	8a 33       	cpi	r24, 0x3A	; 58
    edec:	08 f0       	brcs	.+2      	; 0xedf0 <Terminal+0x4c9a>
    edee:	5c c0       	rjmp	.+184    	; 0xeea8 <Terminal+0x4d52>
					uGananciaPWM2 = atoi(chBufferRx_USART0+auxIndexTerminal);
    edf0:	80 91 2a 06 	lds	r24, 0x062A
    edf4:	90 91 2b 06 	lds	r25, 0x062B
    edf8:	8f 57       	subi	r24, 0x7F	; 127
    edfa:	9d 4f       	sbci	r25, 0xFD	; 253
    edfc:	0e 94 1f 84 	call	0x1083e	; 0x1083e <atoi>
    ee00:	90 93 78 02 	sts	0x0278, r25
    ee04:	80 93 77 02 	sts	0x0277, r24
					if (uGananciaPWM2 < MINIMO_GANANCIA_LAZO_PWM){
    ee08:	80 91 77 02 	lds	r24, 0x0277
    ee0c:	90 91 78 02 	lds	r25, 0x0278
    ee10:	89 2b       	or	r24, r25
    ee12:	39 f4       	brne	.+14     	; 0xee22 <Terminal+0x4ccc>
						uGananciaPWM2 = MINIMO_GANANCIA_LAZO_PWM;
    ee14:	81 e0       	ldi	r24, 0x01	; 1
    ee16:	90 e0       	ldi	r25, 0x00	; 0
    ee18:	90 93 78 02 	sts	0x0278, r25
    ee1c:	80 93 77 02 	sts	0x0277, r24
    ee20:	0d c0       	rjmp	.+26     	; 0xee3c <Terminal+0x4ce6>
					}
					else if (uGananciaPWM2 > MAXIMO_GANANCIA_LAZO_PWM){
    ee22:	80 91 77 02 	lds	r24, 0x0277
    ee26:	90 91 78 02 	lds	r25, 0x0278
    ee2a:	89 3e       	cpi	r24, 0xE9	; 233
    ee2c:	93 40       	sbci	r25, 0x03	; 3
    ee2e:	30 f0       	brcs	.+12     	; 0xee3c <Terminal+0x4ce6>
						uGananciaPWM2 = MAXIMO_GANANCIA_LAZO_PWM;
    ee30:	88 ee       	ldi	r24, 0xE8	; 232
    ee32:	93 e0       	ldi	r25, 0x03	; 3
    ee34:	90 93 78 02 	sts	0x0278, r25
    ee38:	80 93 77 02 	sts	0x0277, r24
					}
					UnsignedInt_a_Eeprom(&uGananciaPWM2_Eeprom, &uGananciaPWM2);
    ee3c:	67 e7       	ldi	r22, 0x77	; 119
    ee3e:	72 e0       	ldi	r23, 0x02	; 2
    ee40:	82 ea       	ldi	r24, 0xA2	; 162
    ee42:	94 e0       	ldi	r25, 0x04	; 4
    ee44:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uGananciaPWM2_Eeprom_BK, &uGananciaPWM2);
    ee48:	67 e7       	ldi	r22, 0x77	; 119
    ee4a:	72 e0       	ldi	r23, 0x02	; 2
    ee4c:	88 e8       	ldi	r24, 0x88	; 136
    ee4e:	94 e0       	ldi	r25, 0x04	; 4
    ee50:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PWM);
    ee54:	83 e0       	ldi	r24, 0x03	; 3
    ee56:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Ganancia_PWM_2, uGananciaPWM2);
    ee5a:	80 91 77 02 	lds	r24, 0x0277
    ee5e:	90 91 78 02 	lds	r25, 0x0278
    ee62:	29 2f       	mov	r18, r25
    ee64:	2f 93       	push	r18
    ee66:	8f 93       	push	r24
    ee68:	88 e3       	ldi	r24, 0x38	; 56
    ee6a:	96 e0       	ldi	r25, 0x06	; 6
    ee6c:	89 2f       	mov	r24, r25
    ee6e:	8f 93       	push	r24
    ee70:	88 e3       	ldi	r24, 0x38	; 56
    ee72:	96 e0       	ldi	r25, 0x06	; 6
    ee74:	8f 93       	push	r24
    ee76:	84 e0       	ldi	r24, 0x04	; 4
    ee78:	92 e0       	ldi	r25, 0x02	; 2
    ee7a:	89 2f       	mov	r24, r25
    ee7c:	8f 93       	push	r24
    ee7e:	84 e0       	ldi	r24, 0x04	; 4
    ee80:	92 e0       	ldi	r25, 0x02	; 2
    ee82:	8f 93       	push	r24
    ee84:	81 e8       	ldi	r24, 0x81	; 129
    ee86:	92 e0       	ldi	r25, 0x02	; 2
    ee88:	89 2f       	mov	r24, r25
    ee8a:	8f 93       	push	r24
    ee8c:	81 e8       	ldi	r24, 0x81	; 129
    ee8e:	92 e0       	ldi	r25, 0x02	; 2
    ee90:	8f 93       	push	r24
    ee92:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    ee96:	8d b7       	in	r24, 0x3d	; 61
    ee98:	9e b7       	in	r25, 0x3e	; 62
    ee9a:	08 96       	adiw	r24, 0x08	; 8
    ee9c:	0f b6       	in	r0, 0x3f	; 63
    ee9e:	f8 94       	cli
    eea0:	de bf       	out	0x3e, r29	; 62
    eea2:	0f be       	out	0x3f, r0	; 63
    eea4:	cd bf       	out	0x3d, r28	; 61
    eea6:	d9 c5       	rjmp	.+2994   	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    eea8:	80 91 2a 06 	lds	r24, 0x062A
    eeac:	90 91 2b 06 	lds	r25, 0x062B
    eeb0:	8f 57       	subi	r24, 0x7F	; 127
    eeb2:	9d 4f       	sbci	r25, 0xFD	; 253
    eeb4:	bc 01       	movw	r22, r24
    eeb6:	80 ee       	ldi	r24, 0xE0	; 224
    eeb8:	95 e0       	ldi	r25, 0x05	; 5
    eeba:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    eebe:	89 2b       	or	r24, r25
    eec0:	e1 f1       	breq	.+120    	; 0xef3a <Terminal+0x4de4>
					uGananciaPWM2 = DEFAULT_GANACIA_LAZO_PWM_2;
    eec2:	88 ec       	ldi	r24, 0xC8	; 200
    eec4:	90 e0       	ldi	r25, 0x00	; 0
    eec6:	90 93 78 02 	sts	0x0278, r25
    eeca:	80 93 77 02 	sts	0x0277, r24

					UnsignedInt_a_Eeprom(&uGananciaPWM2_Eeprom, &uGananciaPWM2);
    eece:	67 e7       	ldi	r22, 0x77	; 119
    eed0:	72 e0       	ldi	r23, 0x02	; 2
    eed2:	82 ea       	ldi	r24, 0xA2	; 162
    eed4:	94 e0       	ldi	r25, 0x04	; 4
    eed6:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uGananciaPWM2_Eeprom_BK, &uGananciaPWM2);
    eeda:	67 e7       	ldi	r22, 0x77	; 119
    eedc:	72 e0       	ldi	r23, 0x02	; 2
    eede:	88 e8       	ldi	r24, 0x88	; 136
    eee0:	94 e0       	ldi	r25, 0x04	; 4
    eee2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_PWM);
    eee6:	83 e0       	ldi	r24, 0x03	; 3
    eee8:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Ganancia_PWM_2, uGananciaPWM2);
    eeec:	80 91 77 02 	lds	r24, 0x0277
    eef0:	90 91 78 02 	lds	r25, 0x0278
    eef4:	29 2f       	mov	r18, r25
    eef6:	2f 93       	push	r18
    eef8:	8f 93       	push	r24
    eefa:	88 e3       	ldi	r24, 0x38	; 56
    eefc:	96 e0       	ldi	r25, 0x06	; 6
    eefe:	89 2f       	mov	r24, r25
    ef00:	8f 93       	push	r24
    ef02:	88 e3       	ldi	r24, 0x38	; 56
    ef04:	96 e0       	ldi	r25, 0x06	; 6
    ef06:	8f 93       	push	r24
    ef08:	84 e0       	ldi	r24, 0x04	; 4
    ef0a:	92 e0       	ldi	r25, 0x02	; 2
    ef0c:	89 2f       	mov	r24, r25
    ef0e:	8f 93       	push	r24
    ef10:	84 e0       	ldi	r24, 0x04	; 4
    ef12:	92 e0       	ldi	r25, 0x02	; 2
    ef14:	8f 93       	push	r24
    ef16:	81 e8       	ldi	r24, 0x81	; 129
    ef18:	92 e0       	ldi	r25, 0x02	; 2
    ef1a:	89 2f       	mov	r24, r25
    ef1c:	8f 93       	push	r24
    ef1e:	81 e8       	ldi	r24, 0x81	; 129
    ef20:	92 e0       	ldi	r25, 0x02	; 2
    ef22:	8f 93       	push	r24
    ef24:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    ef28:	ed b7       	in	r30, 0x3d	; 61
    ef2a:	fe b7       	in	r31, 0x3e	; 62
    ef2c:	38 96       	adiw	r30, 0x08	; 8
    ef2e:	0f b6       	in	r0, 0x3f	; 63
    ef30:	f8 94       	cli
    ef32:	de bf       	out	0x3e, r29	; 62
    ef34:	0f be       	out	0x3f, r0	; 63
    ef36:	cd bf       	out	0x3d, r28	; 61
    ef38:	90 c5       	rjmp	.+2848   	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					sprintf(chBufferRx_USART0, "%S: %d", (wchar_t*)Comando_Ganancia_PWM_2, uGananciaPWM2);
    ef3a:	80 91 77 02 	lds	r24, 0x0277
    ef3e:	90 91 78 02 	lds	r25, 0x0278
    ef42:	29 2f       	mov	r18, r25
    ef44:	2f 93       	push	r18
    ef46:	8f 93       	push	r24
    ef48:	88 e3       	ldi	r24, 0x38	; 56
    ef4a:	96 e0       	ldi	r25, 0x06	; 6
    ef4c:	89 2f       	mov	r24, r25
    ef4e:	8f 93       	push	r24
    ef50:	88 e3       	ldi	r24, 0x38	; 56
    ef52:	96 e0       	ldi	r25, 0x06	; 6
    ef54:	8f 93       	push	r24
    ef56:	84 e0       	ldi	r24, 0x04	; 4
    ef58:	92 e0       	ldi	r25, 0x02	; 2
    ef5a:	89 2f       	mov	r24, r25
    ef5c:	8f 93       	push	r24
    ef5e:	84 e0       	ldi	r24, 0x04	; 4
    ef60:	92 e0       	ldi	r25, 0x02	; 2
    ef62:	8f 93       	push	r24
    ef64:	81 e8       	ldi	r24, 0x81	; 129
    ef66:	92 e0       	ldi	r25, 0x02	; 2
    ef68:	89 2f       	mov	r24, r25
    ef6a:	8f 93       	push	r24
    ef6c:	81 e8       	ldi	r24, 0x81	; 129
    ef6e:	92 e0       	ldi	r25, 0x02	; 2
    ef70:	8f 93       	push	r24
    ef72:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    ef76:	8d b7       	in	r24, 0x3d	; 61
    ef78:	9e b7       	in	r25, 0x3e	; 62
    ef7a:	08 96       	adiw	r24, 0x08	; 8
    ef7c:	0f b6       	in	r0, 0x3f	; 63
    ef7e:	f8 94       	cli
    ef80:	de bf       	out	0x3e, r29	; 62
    ef82:	0f be       	out	0x3f, r0	; 63
    ef84:	cd bf       	out	0x3d, r28	; 61
    ef86:	69 c5       	rjmp	.+2770   	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = TIEMPO ALARMA 1 xxxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Tiempo_Alarma_Cond_1, chBufferRx_USART0)) {
    ef88:	61 e8       	ldi	r22, 0x81	; 129
    ef8a:	72 e0       	ldi	r23, 0x02	; 2
    ef8c:	88 e4       	ldi	r24, 0x48	; 72
    ef8e:	96 e0       	ldi	r25, 0x06	; 6
    ef90:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    ef94:	89 2b       	or	r24, r25
    ef96:	09 f4       	brne	.+2      	; 0xef9a <Terminal+0x4e44>
    ef98:	e1 c0       	rjmp	.+450    	; 0xf15c <Terminal+0x5006>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    ef9a:	80 91 2a 06 	lds	r24, 0x062A
    ef9e:	90 91 2b 06 	lds	r25, 0x062B
    efa2:	8f 57       	subi	r24, 0x7F	; 127
    efa4:	9d 4f       	sbci	r25, 0xFD	; 253
    efa6:	fc 01       	movw	r30, r24
    efa8:	80 81       	ld	r24, Z
    efaa:	80 33       	cpi	r24, 0x30	; 48
    efac:	08 f4       	brcc	.+2      	; 0xefb0 <Terminal+0x4e5a>
    efae:	66 c0       	rjmp	.+204    	; 0xf07c <Terminal+0x4f26>
    efb0:	80 91 2a 06 	lds	r24, 0x062A
    efb4:	90 91 2b 06 	lds	r25, 0x062B
    efb8:	8f 57       	subi	r24, 0x7F	; 127
    efba:	9d 4f       	sbci	r25, 0xFD	; 253
    efbc:	fc 01       	movw	r30, r24
    efbe:	80 81       	ld	r24, Z
    efc0:	8a 33       	cpi	r24, 0x3A	; 58
    efc2:	08 f0       	brcs	.+2      	; 0xefc6 <Terminal+0x4e70>
    efc4:	5b c0       	rjmp	.+182    	; 0xf07c <Terminal+0x4f26>
					uTiempoAlarmaCond1 = atoi(chBufferRx_USART0+auxIndexTerminal);
    efc6:	80 91 2a 06 	lds	r24, 0x062A
    efca:	90 91 2b 06 	lds	r25, 0x062B
    efce:	8f 57       	subi	r24, 0x7F	; 127
    efd0:	9d 4f       	sbci	r25, 0xFD	; 253
    efd2:	0e 94 1f 84 	call	0x1083e	; 0x1083e <atoi>
    efd6:	90 93 1e 04 	sts	0x041E, r25
    efda:	80 93 1d 04 	sts	0x041D, r24
					if (uTiempoAlarmaCond1 < MINIMO_TIEMPO_ALARMA_COND){
    efde:	80 91 1d 04 	lds	r24, 0x041D
    efe2:	90 91 1e 04 	lds	r25, 0x041E
    efe6:	89 2b       	or	r24, r25
    efe8:	39 f4       	brne	.+14     	; 0xeff8 <Terminal+0x4ea2>
						uTiempoAlarmaCond1 = MINIMO_TIEMPO_ALARMA_COND;
    efea:	81 e0       	ldi	r24, 0x01	; 1
    efec:	90 e0       	ldi	r25, 0x00	; 0
    efee:	90 93 1e 04 	sts	0x041E, r25
    eff2:	80 93 1d 04 	sts	0x041D, r24
    eff6:	0c c0       	rjmp	.+24     	; 0xf010 <Terminal+0x4eba>
					}
					else if (uTiempoAlarmaCond1 > MAXIMO_TIEMPO_ALARMA_COND){
    eff8:	80 91 1d 04 	lds	r24, 0x041D
    effc:	90 91 1e 04 	lds	r25, 0x041E
    f000:	cd 97       	sbiw	r24, 0x3d	; 61
    f002:	30 f0       	brcs	.+12     	; 0xf010 <Terminal+0x4eba>
						uTiempoAlarmaCond1 = MAXIMO_TIEMPO_ALARMA_COND;
    f004:	8c e3       	ldi	r24, 0x3C	; 60
    f006:	90 e0       	ldi	r25, 0x00	; 0
    f008:	90 93 1e 04 	sts	0x041E, r25
    f00c:	80 93 1d 04 	sts	0x041D, r24
					}
					UnsignedInt_a_Eeprom(&uTiempoAlarmaCond1_Eeprom, &uTiempoAlarmaCond1);
    f010:	6d e1       	ldi	r22, 0x1D	; 29
    f012:	74 e0       	ldi	r23, 0x04	; 4
    f014:	86 ec       	ldi	r24, 0xC6	; 198
    f016:	94 e0       	ldi	r25, 0x04	; 4
    f018:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uTiempoAlarmaCond1_Eeprom_BK, &uTiempoAlarmaCond1);
    f01c:	6d e1       	ldi	r22, 0x1D	; 29
    f01e:	74 e0       	ldi	r23, 0x04	; 4
    f020:	8e ec       	ldi	r24, 0xCE	; 206
    f022:	94 e0       	ldi	r25, 0x04	; 4
    f024:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ALARMAS);
    f028:	81 e0       	ldi	r24, 0x01	; 1
    f02a:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %dseg", (wchar_t*)Comando_Tiempo_Alarma_Cond_1, uTiempoAlarmaCond1);
    f02e:	80 91 1d 04 	lds	r24, 0x041D
    f032:	90 91 1e 04 	lds	r25, 0x041E
    f036:	29 2f       	mov	r18, r25
    f038:	2f 93       	push	r18
    f03a:	8f 93       	push	r24
    f03c:	88 e4       	ldi	r24, 0x48	; 72
    f03e:	96 e0       	ldi	r25, 0x06	; 6
    f040:	89 2f       	mov	r24, r25
    f042:	8f 93       	push	r24
    f044:	88 e4       	ldi	r24, 0x48	; 72
    f046:	96 e0       	ldi	r25, 0x06	; 6
    f048:	8f 93       	push	r24
    f04a:	8b e0       	ldi	r24, 0x0B	; 11
    f04c:	92 e0       	ldi	r25, 0x02	; 2
    f04e:	89 2f       	mov	r24, r25
    f050:	8f 93       	push	r24
    f052:	8b e0       	ldi	r24, 0x0B	; 11
    f054:	92 e0       	ldi	r25, 0x02	; 2
    f056:	8f 93       	push	r24
    f058:	81 e8       	ldi	r24, 0x81	; 129
    f05a:	92 e0       	ldi	r25, 0x02	; 2
    f05c:	89 2f       	mov	r24, r25
    f05e:	8f 93       	push	r24
    f060:	81 e8       	ldi	r24, 0x81	; 129
    f062:	92 e0       	ldi	r25, 0x02	; 2
    f064:	8f 93       	push	r24
    f066:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f06a:	8d b7       	in	r24, 0x3d	; 61
    f06c:	9e b7       	in	r25, 0x3e	; 62
    f06e:	08 96       	adiw	r24, 0x08	; 8
    f070:	0f b6       	in	r0, 0x3f	; 63
    f072:	f8 94       	cli
    f074:	de bf       	out	0x3e, r29	; 62
    f076:	0f be       	out	0x3f, r0	; 63
    f078:	cd bf       	out	0x3d, r28	; 61
    f07a:	ef c4       	rjmp	.+2526   	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    f07c:	80 91 2a 06 	lds	r24, 0x062A
    f080:	90 91 2b 06 	lds	r25, 0x062B
    f084:	8f 57       	subi	r24, 0x7F	; 127
    f086:	9d 4f       	sbci	r25, 0xFD	; 253
    f088:	bc 01       	movw	r22, r24
    f08a:	80 ee       	ldi	r24, 0xE0	; 224
    f08c:	95 e0       	ldi	r25, 0x05	; 5
    f08e:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    f092:	89 2b       	or	r24, r25
    f094:	e1 f1       	breq	.+120    	; 0xf10e <Terminal+0x4fb8>
					uTiempoAlarmaCond1 = DEFAULT_TIEMPO_ALARMA_COND_1;
    f096:	8e e1       	ldi	r24, 0x1E	; 30
    f098:	90 e0       	ldi	r25, 0x00	; 0
    f09a:	90 93 1e 04 	sts	0x041E, r25
    f09e:	80 93 1d 04 	sts	0x041D, r24

					UnsignedInt_a_Eeprom(&uTiempoAlarmaCond1_Eeprom, &uTiempoAlarmaCond1);
    f0a2:	6d e1       	ldi	r22, 0x1D	; 29
    f0a4:	74 e0       	ldi	r23, 0x04	; 4
    f0a6:	86 ec       	ldi	r24, 0xC6	; 198
    f0a8:	94 e0       	ldi	r25, 0x04	; 4
    f0aa:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uTiempoAlarmaCond1_Eeprom_BK, &uTiempoAlarmaCond1);
    f0ae:	6d e1       	ldi	r22, 0x1D	; 29
    f0b0:	74 e0       	ldi	r23, 0x04	; 4
    f0b2:	8e ec       	ldi	r24, 0xCE	; 206
    f0b4:	94 e0       	ldi	r25, 0x04	; 4
    f0b6:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ALARMAS);
    f0ba:	81 e0       	ldi	r24, 0x01	; 1
    f0bc:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %dseg", (wchar_t*)Comando_Tiempo_Alarma_Cond_1, uTiempoAlarmaCond1);
    f0c0:	80 91 1d 04 	lds	r24, 0x041D
    f0c4:	90 91 1e 04 	lds	r25, 0x041E
    f0c8:	29 2f       	mov	r18, r25
    f0ca:	2f 93       	push	r18
    f0cc:	8f 93       	push	r24
    f0ce:	88 e4       	ldi	r24, 0x48	; 72
    f0d0:	96 e0       	ldi	r25, 0x06	; 6
    f0d2:	89 2f       	mov	r24, r25
    f0d4:	8f 93       	push	r24
    f0d6:	88 e4       	ldi	r24, 0x48	; 72
    f0d8:	96 e0       	ldi	r25, 0x06	; 6
    f0da:	8f 93       	push	r24
    f0dc:	8b e0       	ldi	r24, 0x0B	; 11
    f0de:	92 e0       	ldi	r25, 0x02	; 2
    f0e0:	89 2f       	mov	r24, r25
    f0e2:	8f 93       	push	r24
    f0e4:	8b e0       	ldi	r24, 0x0B	; 11
    f0e6:	92 e0       	ldi	r25, 0x02	; 2
    f0e8:	8f 93       	push	r24
    f0ea:	81 e8       	ldi	r24, 0x81	; 129
    f0ec:	92 e0       	ldi	r25, 0x02	; 2
    f0ee:	89 2f       	mov	r24, r25
    f0f0:	8f 93       	push	r24
    f0f2:	81 e8       	ldi	r24, 0x81	; 129
    f0f4:	92 e0       	ldi	r25, 0x02	; 2
    f0f6:	8f 93       	push	r24
    f0f8:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f0fc:	ed b7       	in	r30, 0x3d	; 61
    f0fe:	fe b7       	in	r31, 0x3e	; 62
    f100:	38 96       	adiw	r30, 0x08	; 8
    f102:	0f b6       	in	r0, 0x3f	; 63
    f104:	f8 94       	cli
    f106:	de bf       	out	0x3e, r29	; 62
    f108:	0f be       	out	0x3f, r0	; 63
    f10a:	cd bf       	out	0x3d, r28	; 61
    f10c:	a6 c4       	rjmp	.+2380   	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					sprintf(chBufferRx_USART0, "%S: %dseg", (wchar_t*)Comando_Tiempo_Alarma_Cond_1, uTiempoAlarmaCond1);
    f10e:	80 91 1d 04 	lds	r24, 0x041D
    f112:	90 91 1e 04 	lds	r25, 0x041E
    f116:	29 2f       	mov	r18, r25
    f118:	2f 93       	push	r18
    f11a:	8f 93       	push	r24
    f11c:	88 e4       	ldi	r24, 0x48	; 72
    f11e:	96 e0       	ldi	r25, 0x06	; 6
    f120:	89 2f       	mov	r24, r25
    f122:	8f 93       	push	r24
    f124:	88 e4       	ldi	r24, 0x48	; 72
    f126:	96 e0       	ldi	r25, 0x06	; 6
    f128:	8f 93       	push	r24
    f12a:	8b e0       	ldi	r24, 0x0B	; 11
    f12c:	92 e0       	ldi	r25, 0x02	; 2
    f12e:	89 2f       	mov	r24, r25
    f130:	8f 93       	push	r24
    f132:	8b e0       	ldi	r24, 0x0B	; 11
    f134:	92 e0       	ldi	r25, 0x02	; 2
    f136:	8f 93       	push	r24
    f138:	81 e8       	ldi	r24, 0x81	; 129
    f13a:	92 e0       	ldi	r25, 0x02	; 2
    f13c:	89 2f       	mov	r24, r25
    f13e:	8f 93       	push	r24
    f140:	81 e8       	ldi	r24, 0x81	; 129
    f142:	92 e0       	ldi	r25, 0x02	; 2
    f144:	8f 93       	push	r24
    f146:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f14a:	8d b7       	in	r24, 0x3d	; 61
    f14c:	9e b7       	in	r25, 0x3e	; 62
    f14e:	08 96       	adiw	r24, 0x08	; 8
    f150:	0f b6       	in	r0, 0x3f	; 63
    f152:	f8 94       	cli
    f154:	de bf       	out	0x3e, r29	; 62
    f156:	0f be       	out	0x3f, r0	; 63
    f158:	cd bf       	out	0x3d, r28	; 61
    f15a:	7f c4       	rjmp	.+2302   	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = TIEMPO ALARMA 2 xxxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Tiempo_Alarma_Cond_2, chBufferRx_USART0)) {
    f15c:	61 e8       	ldi	r22, 0x81	; 129
    f15e:	72 e0       	ldi	r23, 0x02	; 2
    f160:	89 e5       	ldi	r24, 0x59	; 89
    f162:	96 e0       	ldi	r25, 0x06	; 6
    f164:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    f168:	89 2b       	or	r24, r25
    f16a:	09 f4       	brne	.+2      	; 0xf16e <Terminal+0x5018>
    f16c:	e1 c0       	rjmp	.+450    	; 0xf330 <Terminal+0x51da>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    f16e:	80 91 2a 06 	lds	r24, 0x062A
    f172:	90 91 2b 06 	lds	r25, 0x062B
    f176:	8f 57       	subi	r24, 0x7F	; 127
    f178:	9d 4f       	sbci	r25, 0xFD	; 253
    f17a:	fc 01       	movw	r30, r24
    f17c:	80 81       	ld	r24, Z
    f17e:	80 33       	cpi	r24, 0x30	; 48
    f180:	08 f4       	brcc	.+2      	; 0xf184 <Terminal+0x502e>
    f182:	66 c0       	rjmp	.+204    	; 0xf250 <Terminal+0x50fa>
    f184:	80 91 2a 06 	lds	r24, 0x062A
    f188:	90 91 2b 06 	lds	r25, 0x062B
    f18c:	8f 57       	subi	r24, 0x7F	; 127
    f18e:	9d 4f       	sbci	r25, 0xFD	; 253
    f190:	fc 01       	movw	r30, r24
    f192:	80 81       	ld	r24, Z
    f194:	8a 33       	cpi	r24, 0x3A	; 58
    f196:	08 f0       	brcs	.+2      	; 0xf19a <Terminal+0x5044>
    f198:	5b c0       	rjmp	.+182    	; 0xf250 <Terminal+0x50fa>
					uTiempoAlarmaCond2 = atoi(chBufferRx_USART0+auxIndexTerminal);
    f19a:	80 91 2a 06 	lds	r24, 0x062A
    f19e:	90 91 2b 06 	lds	r25, 0x062B
    f1a2:	8f 57       	subi	r24, 0x7F	; 127
    f1a4:	9d 4f       	sbci	r25, 0xFD	; 253
    f1a6:	0e 94 1f 84 	call	0x1083e	; 0x1083e <atoi>
    f1aa:	90 93 31 04 	sts	0x0431, r25
    f1ae:	80 93 30 04 	sts	0x0430, r24
					if (uTiempoAlarmaCond2 < MINIMO_TIEMPO_ALARMA_COND){
    f1b2:	80 91 30 04 	lds	r24, 0x0430
    f1b6:	90 91 31 04 	lds	r25, 0x0431
    f1ba:	89 2b       	or	r24, r25
    f1bc:	39 f4       	brne	.+14     	; 0xf1cc <Terminal+0x5076>
						uTiempoAlarmaCond2 = MINIMO_TIEMPO_ALARMA_COND;
    f1be:	81 e0       	ldi	r24, 0x01	; 1
    f1c0:	90 e0       	ldi	r25, 0x00	; 0
    f1c2:	90 93 31 04 	sts	0x0431, r25
    f1c6:	80 93 30 04 	sts	0x0430, r24
    f1ca:	0c c0       	rjmp	.+24     	; 0xf1e4 <Terminal+0x508e>
					}
					else if (uTiempoAlarmaCond2 > MAXIMO_TIEMPO_ALARMA_COND){
    f1cc:	80 91 30 04 	lds	r24, 0x0430
    f1d0:	90 91 31 04 	lds	r25, 0x0431
    f1d4:	cd 97       	sbiw	r24, 0x3d	; 61
    f1d6:	30 f0       	brcs	.+12     	; 0xf1e4 <Terminal+0x508e>
						uTiempoAlarmaCond2 = MAXIMO_TIEMPO_ALARMA_COND;
    f1d8:	8c e3       	ldi	r24, 0x3C	; 60
    f1da:	90 e0       	ldi	r25, 0x00	; 0
    f1dc:	90 93 31 04 	sts	0x0431, r25
    f1e0:	80 93 30 04 	sts	0x0430, r24
					}
					UnsignedInt_a_Eeprom(&uTiempoAlarmaCond2_Eeprom, &uTiempoAlarmaCond2);
    f1e4:	60 e3       	ldi	r22, 0x30	; 48
    f1e6:	74 e0       	ldi	r23, 0x04	; 4
    f1e8:	8a ed       	ldi	r24, 0xDA	; 218
    f1ea:	94 e0       	ldi	r25, 0x04	; 4
    f1ec:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uTiempoAlarmaCond2_Eeprom_BK, &uTiempoAlarmaCond2);
    f1f0:	60 e3       	ldi	r22, 0x30	; 48
    f1f2:	74 e0       	ldi	r23, 0x04	; 4
    f1f4:	84 ed       	ldi	r24, 0xD4	; 212
    f1f6:	94 e0       	ldi	r25, 0x04	; 4
    f1f8:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ALARMAS);
    f1fc:	81 e0       	ldi	r24, 0x01	; 1
    f1fe:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %dseg", (wchar_t*)Comando_Tiempo_Alarma_Cond_2, uTiempoAlarmaCond2);
    f202:	80 91 30 04 	lds	r24, 0x0430
    f206:	90 91 31 04 	lds	r25, 0x0431
    f20a:	29 2f       	mov	r18, r25
    f20c:	2f 93       	push	r18
    f20e:	8f 93       	push	r24
    f210:	89 e5       	ldi	r24, 0x59	; 89
    f212:	96 e0       	ldi	r25, 0x06	; 6
    f214:	89 2f       	mov	r24, r25
    f216:	8f 93       	push	r24
    f218:	89 e5       	ldi	r24, 0x59	; 89
    f21a:	96 e0       	ldi	r25, 0x06	; 6
    f21c:	8f 93       	push	r24
    f21e:	8b e0       	ldi	r24, 0x0B	; 11
    f220:	92 e0       	ldi	r25, 0x02	; 2
    f222:	89 2f       	mov	r24, r25
    f224:	8f 93       	push	r24
    f226:	8b e0       	ldi	r24, 0x0B	; 11
    f228:	92 e0       	ldi	r25, 0x02	; 2
    f22a:	8f 93       	push	r24
    f22c:	81 e8       	ldi	r24, 0x81	; 129
    f22e:	92 e0       	ldi	r25, 0x02	; 2
    f230:	89 2f       	mov	r24, r25
    f232:	8f 93       	push	r24
    f234:	81 e8       	ldi	r24, 0x81	; 129
    f236:	92 e0       	ldi	r25, 0x02	; 2
    f238:	8f 93       	push	r24
    f23a:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f23e:	8d b7       	in	r24, 0x3d	; 61
    f240:	9e b7       	in	r25, 0x3e	; 62
    f242:	08 96       	adiw	r24, 0x08	; 8
    f244:	0f b6       	in	r0, 0x3f	; 63
    f246:	f8 94       	cli
    f248:	de bf       	out	0x3e, r29	; 62
    f24a:	0f be       	out	0x3f, r0	; 63
    f24c:	cd bf       	out	0x3d, r28	; 61
    f24e:	05 c4       	rjmp	.+2058   	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    f250:	80 91 2a 06 	lds	r24, 0x062A
    f254:	90 91 2b 06 	lds	r25, 0x062B
    f258:	8f 57       	subi	r24, 0x7F	; 127
    f25a:	9d 4f       	sbci	r25, 0xFD	; 253
    f25c:	bc 01       	movw	r22, r24
    f25e:	80 ee       	ldi	r24, 0xE0	; 224
    f260:	95 e0       	ldi	r25, 0x05	; 5
    f262:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    f266:	89 2b       	or	r24, r25
    f268:	e1 f1       	breq	.+120    	; 0xf2e2 <Terminal+0x518c>
					uTiempoAlarmaCond2 = DEFAULT_TIEMPO_ALARMA_COND_2;
    f26a:	8e e1       	ldi	r24, 0x1E	; 30
    f26c:	90 e0       	ldi	r25, 0x00	; 0
    f26e:	90 93 31 04 	sts	0x0431, r25
    f272:	80 93 30 04 	sts	0x0430, r24

					UnsignedInt_a_Eeprom(&uTiempoAlarmaCond2_Eeprom, &uTiempoAlarmaCond2);
    f276:	60 e3       	ldi	r22, 0x30	; 48
    f278:	74 e0       	ldi	r23, 0x04	; 4
    f27a:	8a ed       	ldi	r24, 0xDA	; 218
    f27c:	94 e0       	ldi	r25, 0x04	; 4
    f27e:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uTiempoAlarmaCond2_Eeprom_BK, &uTiempoAlarmaCond2);
    f282:	60 e3       	ldi	r22, 0x30	; 48
    f284:	74 e0       	ldi	r23, 0x04	; 4
    f286:	84 ed       	ldi	r24, 0xD4	; 212
    f288:	94 e0       	ldi	r25, 0x04	; 4
    f28a:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ALARMAS);
    f28e:	81 e0       	ldi	r24, 0x01	; 1
    f290:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %dseg", (wchar_t*)Comando_Tiempo_Alarma_Cond_2, uTiempoAlarmaCond2);
    f294:	80 91 30 04 	lds	r24, 0x0430
    f298:	90 91 31 04 	lds	r25, 0x0431
    f29c:	29 2f       	mov	r18, r25
    f29e:	2f 93       	push	r18
    f2a0:	8f 93       	push	r24
    f2a2:	89 e5       	ldi	r24, 0x59	; 89
    f2a4:	96 e0       	ldi	r25, 0x06	; 6
    f2a6:	89 2f       	mov	r24, r25
    f2a8:	8f 93       	push	r24
    f2aa:	89 e5       	ldi	r24, 0x59	; 89
    f2ac:	96 e0       	ldi	r25, 0x06	; 6
    f2ae:	8f 93       	push	r24
    f2b0:	8b e0       	ldi	r24, 0x0B	; 11
    f2b2:	92 e0       	ldi	r25, 0x02	; 2
    f2b4:	89 2f       	mov	r24, r25
    f2b6:	8f 93       	push	r24
    f2b8:	8b e0       	ldi	r24, 0x0B	; 11
    f2ba:	92 e0       	ldi	r25, 0x02	; 2
    f2bc:	8f 93       	push	r24
    f2be:	81 e8       	ldi	r24, 0x81	; 129
    f2c0:	92 e0       	ldi	r25, 0x02	; 2
    f2c2:	89 2f       	mov	r24, r25
    f2c4:	8f 93       	push	r24
    f2c6:	81 e8       	ldi	r24, 0x81	; 129
    f2c8:	92 e0       	ldi	r25, 0x02	; 2
    f2ca:	8f 93       	push	r24
    f2cc:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f2d0:	ed b7       	in	r30, 0x3d	; 61
    f2d2:	fe b7       	in	r31, 0x3e	; 62
    f2d4:	38 96       	adiw	r30, 0x08	; 8
    f2d6:	0f b6       	in	r0, 0x3f	; 63
    f2d8:	f8 94       	cli
    f2da:	de bf       	out	0x3e, r29	; 62
    f2dc:	0f be       	out	0x3f, r0	; 63
    f2de:	cd bf       	out	0x3d, r28	; 61
    f2e0:	bc c3       	rjmp	.+1912   	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					sprintf(chBufferRx_USART0, "%S: %dseg", (wchar_t*)Comando_Tiempo_Alarma_Cond_2, uTiempoAlarmaCond2);
    f2e2:	80 91 30 04 	lds	r24, 0x0430
    f2e6:	90 91 31 04 	lds	r25, 0x0431
    f2ea:	29 2f       	mov	r18, r25
    f2ec:	2f 93       	push	r18
    f2ee:	8f 93       	push	r24
    f2f0:	89 e5       	ldi	r24, 0x59	; 89
    f2f2:	96 e0       	ldi	r25, 0x06	; 6
    f2f4:	89 2f       	mov	r24, r25
    f2f6:	8f 93       	push	r24
    f2f8:	89 e5       	ldi	r24, 0x59	; 89
    f2fa:	96 e0       	ldi	r25, 0x06	; 6
    f2fc:	8f 93       	push	r24
    f2fe:	8b e0       	ldi	r24, 0x0B	; 11
    f300:	92 e0       	ldi	r25, 0x02	; 2
    f302:	89 2f       	mov	r24, r25
    f304:	8f 93       	push	r24
    f306:	8b e0       	ldi	r24, 0x0B	; 11
    f308:	92 e0       	ldi	r25, 0x02	; 2
    f30a:	8f 93       	push	r24
    f30c:	81 e8       	ldi	r24, 0x81	; 129
    f30e:	92 e0       	ldi	r25, 0x02	; 2
    f310:	89 2f       	mov	r24, r25
    f312:	8f 93       	push	r24
    f314:	81 e8       	ldi	r24, 0x81	; 129
    f316:	92 e0       	ldi	r25, 0x02	; 2
    f318:	8f 93       	push	r24
    f31a:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f31e:	8d b7       	in	r24, 0x3d	; 61
    f320:	9e b7       	in	r25, 0x3e	; 62
    f322:	08 96       	adiw	r24, 0x08	; 8
    f324:	0f b6       	in	r0, 0x3f	; 63
    f326:	f8 94       	cli
    f328:	de bf       	out	0x3e, r29	; 62
    f32a:	0f be       	out	0x3f, r0	; 63
    f32c:	cd bf       	out	0x3d, r28	; 61
    f32e:	95 c3       	rjmp	.+1834   	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chBufferRx_USART0 = SILENCIAR ALARMA  xxxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Silenciar_Alarma, chBufferRx_USART0)) {
    f330:	61 e8       	ldi	r22, 0x81	; 129
    f332:	72 e0       	ldi	r23, 0x02	; 2
    f334:	84 e2       	ldi	r24, 0x24	; 36
    f336:	97 e0       	ldi	r25, 0x07	; 7
    f338:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    f33c:	89 2b       	or	r24, r25
    f33e:	09 f4       	brne	.+2      	; 0xf342 <Terminal+0x51ec>
    f340:	e2 c0       	rjmp	.+452    	; 0xf506 <Terminal+0x53b0>
				if ((*(chBufferRx_USART0+auxIndexTerminal) >= '0') && (*(chBufferRx_USART0+auxIndexTerminal) <= '9')) {
    f342:	80 91 2a 06 	lds	r24, 0x062A
    f346:	90 91 2b 06 	lds	r25, 0x062B
    f34a:	8f 57       	subi	r24, 0x7F	; 127
    f34c:	9d 4f       	sbci	r25, 0xFD	; 253
    f34e:	fc 01       	movw	r30, r24
    f350:	80 81       	ld	r24, Z
    f352:	80 33       	cpi	r24, 0x30	; 48
    f354:	08 f4       	brcc	.+2      	; 0xf358 <Terminal+0x5202>
    f356:	67 c0       	rjmp	.+206    	; 0xf426 <Terminal+0x52d0>
    f358:	80 91 2a 06 	lds	r24, 0x062A
    f35c:	90 91 2b 06 	lds	r25, 0x062B
    f360:	8f 57       	subi	r24, 0x7F	; 127
    f362:	9d 4f       	sbci	r25, 0xFD	; 253
    f364:	fc 01       	movw	r30, r24
    f366:	80 81       	ld	r24, Z
    f368:	8a 33       	cpi	r24, 0x3A	; 58
    f36a:	08 f0       	brcs	.+2      	; 0xf36e <Terminal+0x5218>
    f36c:	5c c0       	rjmp	.+184    	; 0xf426 <Terminal+0x52d0>
					uTiempoSilenciarAlarma = atoi(chBufferRx_USART0+auxIndexTerminal);
    f36e:	80 91 2a 06 	lds	r24, 0x062A
    f372:	90 91 2b 06 	lds	r25, 0x062B
    f376:	8f 57       	subi	r24, 0x7F	; 127
    f378:	9d 4f       	sbci	r25, 0xFD	; 253
    f37a:	0e 94 1f 84 	call	0x1083e	; 0x1083e <atoi>
    f37e:	90 93 20 04 	sts	0x0420, r25
    f382:	80 93 1f 04 	sts	0x041F, r24
					if (uTiempoSilenciarAlarma < MINIMO_TIEMPO_SILENCIAR_ALARMA){
    f386:	80 91 1f 04 	lds	r24, 0x041F
    f38a:	90 91 20 04 	lds	r25, 0x0420
    f38e:	89 2b       	or	r24, r25
    f390:	39 f4       	brne	.+14     	; 0xf3a0 <Terminal+0x524a>
						uTiempoSilenciarAlarma = MINIMO_TIEMPO_SILENCIAR_ALARMA;
    f392:	81 e0       	ldi	r24, 0x01	; 1
    f394:	90 e0       	ldi	r25, 0x00	; 0
    f396:	90 93 20 04 	sts	0x0420, r25
    f39a:	80 93 1f 04 	sts	0x041F, r24
    f39e:	0d c0       	rjmp	.+26     	; 0xf3ba <Terminal+0x5264>
					}
					else if (uTiempoSilenciarAlarma > MAXIMO_TIEMPO_SILENCIAR_ALARMA){
    f3a0:	80 91 1f 04 	lds	r24, 0x041F
    f3a4:	90 91 20 04 	lds	r25, 0x0420
    f3a8:	81 34       	cpi	r24, 0x41	; 65
    f3aa:	9b 40       	sbci	r25, 0x0B	; 11
    f3ac:	30 f0       	brcs	.+12     	; 0xf3ba <Terminal+0x5264>
						uTiempoSilenciarAlarma = MAXIMO_TIEMPO_SILENCIAR_ALARMA;
    f3ae:	80 e4       	ldi	r24, 0x40	; 64
    f3b0:	9b e0       	ldi	r25, 0x0B	; 11
    f3b2:	90 93 20 04 	sts	0x0420, r25
    f3b6:	80 93 1f 04 	sts	0x041F, r24
					}
					UnsignedInt_a_Eeprom(&uTiempoSilenciarAlarma_Eeprom, &uTiempoSilenciarAlarma);
    f3ba:	6f e1       	ldi	r22, 0x1F	; 31
    f3bc:	74 e0       	ldi	r23, 0x04	; 4
    f3be:	8c ed       	ldi	r24, 0xDC	; 220
    f3c0:	94 e0       	ldi	r25, 0x04	; 4
    f3c2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uTiempoSilenciarAlarma_Eeprom_BK, &uTiempoSilenciarAlarma);
    f3c6:	6f e1       	ldi	r22, 0x1F	; 31
    f3c8:	74 e0       	ldi	r23, 0x04	; 4
    f3ca:	8a e7       	ldi	r24, 0x7A	; 122
    f3cc:	94 e0       	ldi	r25, 0x04	; 4
    f3ce:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ALARMAS);
    f3d2:	81 e0       	ldi	r24, 0x01	; 1
    f3d4:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %dmin", (wchar_t*)Comando_Silenciar_Alarma, uTiempoSilenciarAlarma);
    f3d8:	80 91 1f 04 	lds	r24, 0x041F
    f3dc:	90 91 20 04 	lds	r25, 0x0420
    f3e0:	29 2f       	mov	r18, r25
    f3e2:	2f 93       	push	r18
    f3e4:	8f 93       	push	r24
    f3e6:	84 e2       	ldi	r24, 0x24	; 36
    f3e8:	97 e0       	ldi	r25, 0x07	; 7
    f3ea:	89 2f       	mov	r24, r25
    f3ec:	8f 93       	push	r24
    f3ee:	84 e2       	ldi	r24, 0x24	; 36
    f3f0:	97 e0       	ldi	r25, 0x07	; 7
    f3f2:	8f 93       	push	r24
    f3f4:	85 e1       	ldi	r24, 0x15	; 21
    f3f6:	92 e0       	ldi	r25, 0x02	; 2
    f3f8:	89 2f       	mov	r24, r25
    f3fa:	8f 93       	push	r24
    f3fc:	85 e1       	ldi	r24, 0x15	; 21
    f3fe:	92 e0       	ldi	r25, 0x02	; 2
    f400:	8f 93       	push	r24
    f402:	81 e8       	ldi	r24, 0x81	; 129
    f404:	92 e0       	ldi	r25, 0x02	; 2
    f406:	89 2f       	mov	r24, r25
    f408:	8f 93       	push	r24
    f40a:	81 e8       	ldi	r24, 0x81	; 129
    f40c:	92 e0       	ldi	r25, 0x02	; 2
    f40e:	8f 93       	push	r24
    f410:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f414:	8d b7       	in	r24, 0x3d	; 61
    f416:	9e b7       	in	r25, 0x3e	; 62
    f418:	08 96       	adiw	r24, 0x08	; 8
    f41a:	0f b6       	in	r0, 0x3f	; 63
    f41c:	f8 94       	cli
    f41e:	de bf       	out	0x3e, r29	; 62
    f420:	0f be       	out	0x3f, r0	; 63
    f422:	cd bf       	out	0x3d, r28	; 61
    f424:	1a c3       	rjmp	.+1588   	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Reset, chBufferRx_USART0+auxIndexTerminal)) {
    f426:	80 91 2a 06 	lds	r24, 0x062A
    f42a:	90 91 2b 06 	lds	r25, 0x062B
    f42e:	8f 57       	subi	r24, 0x7F	; 127
    f430:	9d 4f       	sbci	r25, 0xFD	; 253
    f432:	bc 01       	movw	r22, r24
    f434:	80 ee       	ldi	r24, 0xE0	; 224
    f436:	95 e0       	ldi	r25, 0x05	; 5
    f438:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    f43c:	89 2b       	or	r24, r25
    f43e:	e1 f1       	breq	.+120    	; 0xf4b8 <Terminal+0x5362>
					uTiempoSilenciarAlarma = DEFAULT_TIEMPO_SILENCIAR_ALARMA;
    f440:	8c e3       	ldi	r24, 0x3C	; 60
    f442:	90 e0       	ldi	r25, 0x00	; 0
    f444:	90 93 20 04 	sts	0x0420, r25
    f448:	80 93 1f 04 	sts	0x041F, r24

					UnsignedInt_a_Eeprom(&uTiempoSilenciarAlarma_Eeprom, &uTiempoSilenciarAlarma);
    f44c:	6f e1       	ldi	r22, 0x1F	; 31
    f44e:	74 e0       	ldi	r23, 0x04	; 4
    f450:	8c ed       	ldi	r24, 0xDC	; 220
    f452:	94 e0       	ldi	r25, 0x04	; 4
    f454:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					UnsignedInt_a_Eeprom(&uTiempoSilenciarAlarma_Eeprom_BK, &uTiempoSilenciarAlarma);
    f458:	6f e1       	ldi	r22, 0x1F	; 31
    f45a:	74 e0       	ldi	r23, 0x04	; 4
    f45c:	8a e7       	ldi	r24, 0x7A	; 122
    f45e:	94 e0       	ldi	r25, 0x04	; 4
    f460:	0e 94 22 27 	call	0x4e44	; 0x4e44 <UnsignedInt_a_Eeprom>
					Escribir_Checksum_Eeprom (GRUPO_ALARMAS);
    f464:	81 e0       	ldi	r24, 0x01	; 1
    f466:	0e 94 61 24 	call	0x48c2	; 0x48c2 <Escribir_Checksum_Eeprom>
					sprintf(chBufferRx_USART0, "%S: %dmin", (wchar_t*)Comando_Silenciar_Alarma, uTiempoSilenciarAlarma);
    f46a:	80 91 1f 04 	lds	r24, 0x041F
    f46e:	90 91 20 04 	lds	r25, 0x0420
    f472:	29 2f       	mov	r18, r25
    f474:	2f 93       	push	r18
    f476:	8f 93       	push	r24
    f478:	84 e2       	ldi	r24, 0x24	; 36
    f47a:	97 e0       	ldi	r25, 0x07	; 7
    f47c:	89 2f       	mov	r24, r25
    f47e:	8f 93       	push	r24
    f480:	84 e2       	ldi	r24, 0x24	; 36
    f482:	97 e0       	ldi	r25, 0x07	; 7
    f484:	8f 93       	push	r24
    f486:	85 e1       	ldi	r24, 0x15	; 21
    f488:	92 e0       	ldi	r25, 0x02	; 2
    f48a:	89 2f       	mov	r24, r25
    f48c:	8f 93       	push	r24
    f48e:	85 e1       	ldi	r24, 0x15	; 21
    f490:	92 e0       	ldi	r25, 0x02	; 2
    f492:	8f 93       	push	r24
    f494:	81 e8       	ldi	r24, 0x81	; 129
    f496:	92 e0       	ldi	r25, 0x02	; 2
    f498:	89 2f       	mov	r24, r25
    f49a:	8f 93       	push	r24
    f49c:	81 e8       	ldi	r24, 0x81	; 129
    f49e:	92 e0       	ldi	r25, 0x02	; 2
    f4a0:	8f 93       	push	r24
    f4a2:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f4a6:	ed b7       	in	r30, 0x3d	; 61
    f4a8:	fe b7       	in	r31, 0x3e	; 62
    f4aa:	38 96       	adiw	r30, 0x08	; 8
    f4ac:	0f b6       	in	r0, 0x3f	; 63
    f4ae:	f8 94       	cli
    f4b0:	de bf       	out	0x3e, r29	; 62
    f4b2:	0f be       	out	0x3f, r0	; 63
    f4b4:	cd bf       	out	0x3d, r28	; 61
    f4b6:	d1 c2       	rjmp	.+1442   	; 0xfa5a <Terminal+0x5904>
				}
				else {//if (*(chBufferRx_USART0+auxIndexTerminal) == '?') {
					sprintf(chBufferRx_USART0, "%S: %dmin", (wchar_t*)Comando_Silenciar_Alarma, uTiempoSilenciarAlarma);
    f4b8:	80 91 1f 04 	lds	r24, 0x041F
    f4bc:	90 91 20 04 	lds	r25, 0x0420
    f4c0:	29 2f       	mov	r18, r25
    f4c2:	2f 93       	push	r18
    f4c4:	8f 93       	push	r24
    f4c6:	84 e2       	ldi	r24, 0x24	; 36
    f4c8:	97 e0       	ldi	r25, 0x07	; 7
    f4ca:	89 2f       	mov	r24, r25
    f4cc:	8f 93       	push	r24
    f4ce:	84 e2       	ldi	r24, 0x24	; 36
    f4d0:	97 e0       	ldi	r25, 0x07	; 7
    f4d2:	8f 93       	push	r24
    f4d4:	85 e1       	ldi	r24, 0x15	; 21
    f4d6:	92 e0       	ldi	r25, 0x02	; 2
    f4d8:	89 2f       	mov	r24, r25
    f4da:	8f 93       	push	r24
    f4dc:	85 e1       	ldi	r24, 0x15	; 21
    f4de:	92 e0       	ldi	r25, 0x02	; 2
    f4e0:	8f 93       	push	r24
    f4e2:	81 e8       	ldi	r24, 0x81	; 129
    f4e4:	92 e0       	ldi	r25, 0x02	; 2
    f4e6:	89 2f       	mov	r24, r25
    f4e8:	8f 93       	push	r24
    f4ea:	81 e8       	ldi	r24, 0x81	; 129
    f4ec:	92 e0       	ldi	r25, 0x02	; 2
    f4ee:	8f 93       	push	r24
    f4f0:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f4f4:	8d b7       	in	r24, 0x3d	; 61
    f4f6:	9e b7       	in	r25, 0x3e	; 62
    f4f8:	08 96       	adiw	r24, 0x08	; 8
    f4fa:	0f b6       	in	r0, 0x3f	; 63
    f4fc:	f8 94       	cli
    f4fe:	de bf       	out	0x3e, r29	; 62
    f500:	0f be       	out	0x3f, r0	; 63
    f502:	cd bf       	out	0x3d, r28	; 61
    f504:	aa c2       	rjmp	.+1364   	; 0xfa5a <Terminal+0x5904>
//				}
			}


			// chTextoSMS = REINICIAR\0
			else if (Detectar_Comando_Buffer_P(Comando_Reiniciar, chBufferRx_USART0)) {
    f506:	61 e8       	ldi	r22, 0x81	; 129
    f508:	72 e0       	ldi	r23, 0x02	; 2
    f50a:	81 ea       	ldi	r24, 0xA1	; 161
    f50c:	95 e0       	ldi	r25, 0x05	; 5
    f50e:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    f512:	89 2b       	or	r24, r25
    f514:	09 f4       	brne	.+2      	; 0xf518 <Terminal+0x53c2>
    f516:	39 c0       	rjmp	.+114    	; 0xf58a <Terminal+0x5434>
				sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Reiniciar, (wchar_t*)MSG_Ok);
    f518:	80 e6       	ldi	r24, 0x60	; 96
    f51a:	97 e0       	ldi	r25, 0x07	; 7
    f51c:	89 2f       	mov	r24, r25
    f51e:	8f 93       	push	r24
    f520:	80 e6       	ldi	r24, 0x60	; 96
    f522:	97 e0       	ldi	r25, 0x07	; 7
    f524:	8f 93       	push	r24
    f526:	81 ea       	ldi	r24, 0xA1	; 161
    f528:	95 e0       	ldi	r25, 0x05	; 5
    f52a:	89 2f       	mov	r24, r25
    f52c:	8f 93       	push	r24
    f52e:	81 ea       	ldi	r24, 0xA1	; 161
    f530:	95 e0       	ldi	r25, 0x05	; 5
    f532:	8f 93       	push	r24
    f534:	80 ef       	ldi	r24, 0xF0	; 240
    f536:	91 e0       	ldi	r25, 0x01	; 1
    f538:	89 2f       	mov	r24, r25
    f53a:	8f 93       	push	r24
    f53c:	80 ef       	ldi	r24, 0xF0	; 240
    f53e:	91 e0       	ldi	r25, 0x01	; 1
    f540:	8f 93       	push	r24
    f542:	81 e8       	ldi	r24, 0x81	; 129
    f544:	92 e0       	ldi	r25, 0x02	; 2
    f546:	89 2f       	mov	r24, r25
    f548:	8f 93       	push	r24
    f54a:	81 e8       	ldi	r24, 0x81	; 129
    f54c:	92 e0       	ldi	r25, 0x02	; 2
    f54e:	8f 93       	push	r24
    f550:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f554:	ed b7       	in	r30, 0x3d	; 61
    f556:	fe b7       	in	r31, 0x3e	; 62
    f558:	38 96       	adiw	r30, 0x08	; 8
    f55a:	0f b6       	in	r0, 0x3f	; 63
    f55c:	f8 94       	cli
    f55e:	de bf       	out	0x3e, r29	; 62
    f560:	0f be       	out	0x3f, r0	; 63
    f562:	cd bf       	out	0x3d, r28	; 61
				Transmitir_Buffer_USART0 (chBufferRx_USART0, USART0_BUFFER_ZISE);
    f564:	68 ec       	ldi	r22, 0xC8	; 200
    f566:	70 e0       	ldi	r23, 0x00	; 0
    f568:	81 e8       	ldi	r24, 0x81	; 129
    f56a:	92 e0       	ldi	r25, 0x02	; 2
    f56c:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
				"out __SREG__,__tmp_reg__" "\n\t"
				"out %0, %2" "\n \t"
				: /* no outputs */
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    f570:	87 e0       	ldi	r24, 0x07	; 7
    f572:	87 70       	andi	r24, 0x07	; 7
    f574:	88 60       	ori	r24, 0x08	; 8
    f576:	98 2f       	mov	r25, r24
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    f578:	88 e1       	ldi	r24, 0x18	; 24
    f57a:	0f b6       	in	r0, 0x3f	; 63
    f57c:	f8 94       	cli
    f57e:	a8 95       	wdr
    f580:	81 bd       	out	0x21, r24	; 33
    f582:	0f be       	out	0x3f, r0	; 63
    f584:	91 bd       	out	0x21, r25	; 33
				UC_RESET();
    f586:	a8 95       	wdr
    f588:	ff cf       	rjmp	.-2      	; 0xf588 <Terminal+0x5432>
			}


			// chTextoSMS = FABRICA RESET\0
			else if (Detectar_Comando_Buffer_P(Comando_Factory_Reset, chBufferRx_USART0)) {
    f58a:	61 e8       	ldi	r22, 0x81	; 129
    f58c:	72 e0       	ldi	r23, 0x02	; 2
    f58e:	8c ea       	ldi	r24, 0xAC	; 172
    f590:	95 e0       	ldi	r25, 0x05	; 5
    f592:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    f596:	89 2b       	or	r24, r25
    f598:	09 f4       	brne	.+2      	; 0xf59c <Terminal+0x5446>
    f59a:	3d c0       	rjmp	.+122    	; 0xf616 <Terminal+0x54c0>
				Carga_Configuracion_Fabrica_Eeprom(GRUPO_TODOS);
    f59c:	84 e0       	ldi	r24, 0x04	; 4
    f59e:	90 e0       	ldi	r25, 0x00	; 0
    f5a0:	0e 94 69 22 	call	0x44d2	; 0x44d2 <Carga_Configuracion_Fabrica_Eeprom>
				sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Factory_Reset, (wchar_t*)MSG_Ok);
    f5a4:	80 e6       	ldi	r24, 0x60	; 96
    f5a6:	97 e0       	ldi	r25, 0x07	; 7
    f5a8:	89 2f       	mov	r24, r25
    f5aa:	8f 93       	push	r24
    f5ac:	80 e6       	ldi	r24, 0x60	; 96
    f5ae:	97 e0       	ldi	r25, 0x07	; 7
    f5b0:	8f 93       	push	r24
    f5b2:	8c ea       	ldi	r24, 0xAC	; 172
    f5b4:	95 e0       	ldi	r25, 0x05	; 5
    f5b6:	89 2f       	mov	r24, r25
    f5b8:	8f 93       	push	r24
    f5ba:	8c ea       	ldi	r24, 0xAC	; 172
    f5bc:	95 e0       	ldi	r25, 0x05	; 5
    f5be:	8f 93       	push	r24
    f5c0:	80 ef       	ldi	r24, 0xF0	; 240
    f5c2:	91 e0       	ldi	r25, 0x01	; 1
    f5c4:	89 2f       	mov	r24, r25
    f5c6:	8f 93       	push	r24
    f5c8:	80 ef       	ldi	r24, 0xF0	; 240
    f5ca:	91 e0       	ldi	r25, 0x01	; 1
    f5cc:	8f 93       	push	r24
    f5ce:	81 e8       	ldi	r24, 0x81	; 129
    f5d0:	92 e0       	ldi	r25, 0x02	; 2
    f5d2:	89 2f       	mov	r24, r25
    f5d4:	8f 93       	push	r24
    f5d6:	81 e8       	ldi	r24, 0x81	; 129
    f5d8:	92 e0       	ldi	r25, 0x02	; 2
    f5da:	8f 93       	push	r24
    f5dc:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f5e0:	8d b7       	in	r24, 0x3d	; 61
    f5e2:	9e b7       	in	r25, 0x3e	; 62
    f5e4:	08 96       	adiw	r24, 0x08	; 8
    f5e6:	0f b6       	in	r0, 0x3f	; 63
    f5e8:	f8 94       	cli
    f5ea:	de bf       	out	0x3e, r29	; 62
    f5ec:	0f be       	out	0x3f, r0	; 63
    f5ee:	cd bf       	out	0x3d, r28	; 61
				Transmitir_Buffer_USART0 (chBufferRx_USART0, USART0_BUFFER_ZISE);
    f5f0:	68 ec       	ldi	r22, 0xC8	; 200
    f5f2:	70 e0       	ldi	r23, 0x00	; 0
    f5f4:	81 e8       	ldi	r24, 0x81	; 129
    f5f6:	92 e0       	ldi	r25, 0x02	; 2
    f5f8:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
				"out __SREG__,__tmp_reg__" "\n\t"
				"out %0, %2" "\n \t"
				: /* no outputs */
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    f5fc:	87 e0       	ldi	r24, 0x07	; 7
    f5fe:	87 70       	andi	r24, 0x07	; 7
    f600:	88 60       	ori	r24, 0x08	; 8
    f602:	98 2f       	mov	r25, r24
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    f604:	88 e1       	ldi	r24, 0x18	; 24
    f606:	0f b6       	in	r0, 0x3f	; 63
    f608:	f8 94       	cli
    f60a:	a8 95       	wdr
    f60c:	81 bd       	out	0x21, r24	; 33
    f60e:	0f be       	out	0x3f, r0	; 63
    f610:	91 bd       	out	0x21, r25	; 33
				UC_RESET();
    f612:	a8 95       	wdr
    f614:	ff cf       	rjmp	.-2      	; 0xf614 <Terminal+0x54be>
			}


			// chTextoSMS = ALARMAS RESET\0
			else if (Detectar_Comando_Buffer_P(Comando_Alarmas_Reset, chBufferRx_USART0)) {
    f616:	61 e8       	ldi	r22, 0x81	; 129
    f618:	72 e0       	ldi	r23, 0x02	; 2
    f61a:	8b eb       	ldi	r24, 0xBB	; 187
    f61c:	95 e0       	ldi	r25, 0x05	; 5
    f61e:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    f622:	89 2b       	or	r24, r25
    f624:	09 f4       	brne	.+2      	; 0xf628 <Terminal+0x54d2>
    f626:	3d c0       	rjmp	.+122    	; 0xf6a2 <Terminal+0x554c>
				Carga_Configuracion_Fabrica_Eeprom(GRUPO_ALARMAS);
    f628:	81 e0       	ldi	r24, 0x01	; 1
    f62a:	90 e0       	ldi	r25, 0x00	; 0
    f62c:	0e 94 69 22 	call	0x44d2	; 0x44d2 <Carga_Configuracion_Fabrica_Eeprom>
				sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Alarmas_Reset, (wchar_t*)MSG_Ok);
    f630:	80 e6       	ldi	r24, 0x60	; 96
    f632:	97 e0       	ldi	r25, 0x07	; 7
    f634:	89 2f       	mov	r24, r25
    f636:	8f 93       	push	r24
    f638:	80 e6       	ldi	r24, 0x60	; 96
    f63a:	97 e0       	ldi	r25, 0x07	; 7
    f63c:	8f 93       	push	r24
    f63e:	8b eb       	ldi	r24, 0xBB	; 187
    f640:	95 e0       	ldi	r25, 0x05	; 5
    f642:	89 2f       	mov	r24, r25
    f644:	8f 93       	push	r24
    f646:	8b eb       	ldi	r24, 0xBB	; 187
    f648:	95 e0       	ldi	r25, 0x05	; 5
    f64a:	8f 93       	push	r24
    f64c:	80 ef       	ldi	r24, 0xF0	; 240
    f64e:	91 e0       	ldi	r25, 0x01	; 1
    f650:	89 2f       	mov	r24, r25
    f652:	8f 93       	push	r24
    f654:	80 ef       	ldi	r24, 0xF0	; 240
    f656:	91 e0       	ldi	r25, 0x01	; 1
    f658:	8f 93       	push	r24
    f65a:	81 e8       	ldi	r24, 0x81	; 129
    f65c:	92 e0       	ldi	r25, 0x02	; 2
    f65e:	89 2f       	mov	r24, r25
    f660:	8f 93       	push	r24
    f662:	81 e8       	ldi	r24, 0x81	; 129
    f664:	92 e0       	ldi	r25, 0x02	; 2
    f666:	8f 93       	push	r24
    f668:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f66c:	ed b7       	in	r30, 0x3d	; 61
    f66e:	fe b7       	in	r31, 0x3e	; 62
    f670:	38 96       	adiw	r30, 0x08	; 8
    f672:	0f b6       	in	r0, 0x3f	; 63
    f674:	f8 94       	cli
    f676:	de bf       	out	0x3e, r29	; 62
    f678:	0f be       	out	0x3f, r0	; 63
    f67a:	cd bf       	out	0x3d, r28	; 61
				Transmitir_Buffer_USART0 (chBufferRx_USART0, USART0_BUFFER_ZISE);
    f67c:	68 ec       	ldi	r22, 0xC8	; 200
    f67e:	70 e0       	ldi	r23, 0x00	; 0
    f680:	81 e8       	ldi	r24, 0x81	; 129
    f682:	92 e0       	ldi	r25, 0x02	; 2
    f684:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
				"out __SREG__,__tmp_reg__" "\n\t"
				"out %0, %2" "\n \t"
				: /* no outputs */
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    f688:	87 e0       	ldi	r24, 0x07	; 7
    f68a:	87 70       	andi	r24, 0x07	; 7
    f68c:	88 60       	ori	r24, 0x08	; 8
    f68e:	98 2f       	mov	r25, r24
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    f690:	88 e1       	ldi	r24, 0x18	; 24
    f692:	0f b6       	in	r0, 0x3f	; 63
    f694:	f8 94       	cli
    f696:	a8 95       	wdr
    f698:	81 bd       	out	0x21, r24	; 33
    f69a:	0f be       	out	0x3f, r0	; 63
    f69c:	91 bd       	out	0x21, r25	; 33
				UC_RESET();
    f69e:	a8 95       	wdr
    f6a0:	ff cf       	rjmp	.-2      	; 0xf6a0 <Terminal+0x554a>
			}


			// chTextoSMS = PWM RESET\0
			else if (Detectar_Comando_Buffer_P(Comando_PWM_Reset, chBufferRx_USART0)) {
    f6a2:	61 e8       	ldi	r22, 0x81	; 129
    f6a4:	72 e0       	ldi	r23, 0x02	; 2
    f6a6:	8a ec       	ldi	r24, 0xCA	; 202
    f6a8:	95 e0       	ldi	r25, 0x05	; 5
    f6aa:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    f6ae:	89 2b       	or	r24, r25
    f6b0:	09 f4       	brne	.+2      	; 0xf6b4 <Terminal+0x555e>
    f6b2:	3d c0       	rjmp	.+122    	; 0xf72e <Terminal+0x55d8>
				Carga_Configuracion_Fabrica_Eeprom(GRUPO_PWM);
    f6b4:	83 e0       	ldi	r24, 0x03	; 3
    f6b6:	90 e0       	ldi	r25, 0x00	; 0
    f6b8:	0e 94 69 22 	call	0x44d2	; 0x44d2 <Carga_Configuracion_Fabrica_Eeprom>
				sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_PWM_Reset, (wchar_t*)MSG_Ok);
    f6bc:	80 e6       	ldi	r24, 0x60	; 96
    f6be:	97 e0       	ldi	r25, 0x07	; 7
    f6c0:	89 2f       	mov	r24, r25
    f6c2:	8f 93       	push	r24
    f6c4:	80 e6       	ldi	r24, 0x60	; 96
    f6c6:	97 e0       	ldi	r25, 0x07	; 7
    f6c8:	8f 93       	push	r24
    f6ca:	8a ec       	ldi	r24, 0xCA	; 202
    f6cc:	95 e0       	ldi	r25, 0x05	; 5
    f6ce:	89 2f       	mov	r24, r25
    f6d0:	8f 93       	push	r24
    f6d2:	8a ec       	ldi	r24, 0xCA	; 202
    f6d4:	95 e0       	ldi	r25, 0x05	; 5
    f6d6:	8f 93       	push	r24
    f6d8:	80 ef       	ldi	r24, 0xF0	; 240
    f6da:	91 e0       	ldi	r25, 0x01	; 1
    f6dc:	89 2f       	mov	r24, r25
    f6de:	8f 93       	push	r24
    f6e0:	80 ef       	ldi	r24, 0xF0	; 240
    f6e2:	91 e0       	ldi	r25, 0x01	; 1
    f6e4:	8f 93       	push	r24
    f6e6:	81 e8       	ldi	r24, 0x81	; 129
    f6e8:	92 e0       	ldi	r25, 0x02	; 2
    f6ea:	89 2f       	mov	r24, r25
    f6ec:	8f 93       	push	r24
    f6ee:	81 e8       	ldi	r24, 0x81	; 129
    f6f0:	92 e0       	ldi	r25, 0x02	; 2
    f6f2:	8f 93       	push	r24
    f6f4:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f6f8:	8d b7       	in	r24, 0x3d	; 61
    f6fa:	9e b7       	in	r25, 0x3e	; 62
    f6fc:	08 96       	adiw	r24, 0x08	; 8
    f6fe:	0f b6       	in	r0, 0x3f	; 63
    f700:	f8 94       	cli
    f702:	de bf       	out	0x3e, r29	; 62
    f704:	0f be       	out	0x3f, r0	; 63
    f706:	cd bf       	out	0x3d, r28	; 61
				Transmitir_Buffer_USART0 (chBufferRx_USART0, USART0_BUFFER_ZISE);
    f708:	68 ec       	ldi	r22, 0xC8	; 200
    f70a:	70 e0       	ldi	r23, 0x00	; 0
    f70c:	81 e8       	ldi	r24, 0x81	; 129
    f70e:	92 e0       	ldi	r25, 0x02	; 2
    f710:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
				"out __SREG__,__tmp_reg__" "\n\t"
				"out %0, %2" "\n \t"
				: /* no outputs */
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    f714:	87 e0       	ldi	r24, 0x07	; 7
    f716:	87 70       	andi	r24, 0x07	; 7
    f718:	88 60       	ori	r24, 0x08	; 8
    f71a:	98 2f       	mov	r25, r24
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    f71c:	88 e1       	ldi	r24, 0x18	; 24
    f71e:	0f b6       	in	r0, 0x3f	; 63
    f720:	f8 94       	cli
    f722:	a8 95       	wdr
    f724:	81 bd       	out	0x21, r24	; 33
    f726:	0f be       	out	0x3f, r0	; 63
    f728:	91 bd       	out	0x21, r25	; 33
				UC_RESET();
    f72a:	a8 95       	wdr
    f72c:	ff cf       	rjmp	.-2      	; 0xf72c <Terminal+0x55d6>
			}


			// chTextoSMS = CAL RESET\0
			else if (Detectar_Comando_Buffer_P(Comando_Cal_Reset, chBufferRx_USART0)) {
    f72e:	61 e8       	ldi	r22, 0x81	; 129
    f730:	72 e0       	ldi	r23, 0x02	; 2
    f732:	85 ed       	ldi	r24, 0xD5	; 213
    f734:	95 e0       	ldi	r25, 0x05	; 5
    f736:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    f73a:	89 2b       	or	r24, r25
    f73c:	09 f4       	brne	.+2      	; 0xf740 <Terminal+0x55ea>
    f73e:	3d c0       	rjmp	.+122    	; 0xf7ba <Terminal+0x5664>
				Carga_Configuracion_Fabrica_Eeprom(GRUPO_ADC);
    f740:	82 e0       	ldi	r24, 0x02	; 2
    f742:	90 e0       	ldi	r25, 0x00	; 0
    f744:	0e 94 69 22 	call	0x44d2	; 0x44d2 <Carga_Configuracion_Fabrica_Eeprom>
				sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Cal_Reset, (wchar_t*)MSG_Ok);
    f748:	80 e6       	ldi	r24, 0x60	; 96
    f74a:	97 e0       	ldi	r25, 0x07	; 7
    f74c:	89 2f       	mov	r24, r25
    f74e:	8f 93       	push	r24
    f750:	80 e6       	ldi	r24, 0x60	; 96
    f752:	97 e0       	ldi	r25, 0x07	; 7
    f754:	8f 93       	push	r24
    f756:	85 ed       	ldi	r24, 0xD5	; 213
    f758:	95 e0       	ldi	r25, 0x05	; 5
    f75a:	89 2f       	mov	r24, r25
    f75c:	8f 93       	push	r24
    f75e:	85 ed       	ldi	r24, 0xD5	; 213
    f760:	95 e0       	ldi	r25, 0x05	; 5
    f762:	8f 93       	push	r24
    f764:	80 ef       	ldi	r24, 0xF0	; 240
    f766:	91 e0       	ldi	r25, 0x01	; 1
    f768:	89 2f       	mov	r24, r25
    f76a:	8f 93       	push	r24
    f76c:	80 ef       	ldi	r24, 0xF0	; 240
    f76e:	91 e0       	ldi	r25, 0x01	; 1
    f770:	8f 93       	push	r24
    f772:	81 e8       	ldi	r24, 0x81	; 129
    f774:	92 e0       	ldi	r25, 0x02	; 2
    f776:	89 2f       	mov	r24, r25
    f778:	8f 93       	push	r24
    f77a:	81 e8       	ldi	r24, 0x81	; 129
    f77c:	92 e0       	ldi	r25, 0x02	; 2
    f77e:	8f 93       	push	r24
    f780:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f784:	ed b7       	in	r30, 0x3d	; 61
    f786:	fe b7       	in	r31, 0x3e	; 62
    f788:	38 96       	adiw	r30, 0x08	; 8
    f78a:	0f b6       	in	r0, 0x3f	; 63
    f78c:	f8 94       	cli
    f78e:	de bf       	out	0x3e, r29	; 62
    f790:	0f be       	out	0x3f, r0	; 63
    f792:	cd bf       	out	0x3d, r28	; 61
				Transmitir_Buffer_USART0 (chBufferRx_USART0, USART0_BUFFER_ZISE);
    f794:	68 ec       	ldi	r22, 0xC8	; 200
    f796:	70 e0       	ldi	r23, 0x00	; 0
    f798:	81 e8       	ldi	r24, 0x81	; 129
    f79a:	92 e0       	ldi	r25, 0x02	; 2
    f79c:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
				"out __SREG__,__tmp_reg__" "\n\t"
				"out %0, %2" "\n \t"
				: /* no outputs */
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    f7a0:	87 e0       	ldi	r24, 0x07	; 7
    f7a2:	87 70       	andi	r24, 0x07	; 7
    f7a4:	88 60       	ori	r24, 0x08	; 8
    f7a6:	98 2f       	mov	r25, r24
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    f7a8:	88 e1       	ldi	r24, 0x18	; 24
    f7aa:	0f b6       	in	r0, 0x3f	; 63
    f7ac:	f8 94       	cli
    f7ae:	a8 95       	wdr
    f7b0:	81 bd       	out	0x21, r24	; 33
    f7b2:	0f be       	out	0x3f, r0	; 63
    f7b4:	91 bd       	out	0x21, r25	; 33
				UC_RESET();
    f7b6:	a8 95       	wdr
    f7b8:	ff cf       	rjmp	.-2      	; 0xf7b8 <Terminal+0x5662>
			}


			// chTextoSMS = PRINT xxxx\0
			else if (Detectar_Comando_Buffer_P(Comando_Print, chBufferRx_USART0)) {		// comando para dar inicio a la impresion de una variable
    f7ba:	61 e8       	ldi	r22, 0x81	; 129
    f7bc:	72 e0       	ldi	r23, 0x02	; 2
    f7be:	81 e8       	ldi	r24, 0x81	; 129
    f7c0:	95 e0       	ldi	r25, 0x05	; 5
    f7c2:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    f7c6:	89 2b       	or	r24, r25
    f7c8:	09 f4       	brne	.+2      	; 0xf7cc <Terminal+0x5676>
    f7ca:	e8 c0       	rjmp	.+464    	; 0xf99c <Terminal+0x5846>
				if (Detectar_Comando_Buffer_P(Comando_ADC, chBufferRx_USART0+auxIndexTerminal)) {
    f7cc:	80 91 2a 06 	lds	r24, 0x062A
    f7d0:	90 91 2b 06 	lds	r25, 0x062B
    f7d4:	8f 57       	subi	r24, 0x7F	; 127
    f7d6:	9d 4f       	sbci	r25, 0xFD	; 253
    f7d8:	bc 01       	movw	r22, r24
    f7da:	83 e9       	ldi	r24, 0x93	; 147
    f7dc:	95 e0       	ldi	r25, 0x05	; 5
    f7de:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    f7e2:	89 2b       	or	r24, r25
    f7e4:	89 f1       	breq	.+98     	; 0xf848 <Terminal+0x56f2>
					chADCprint = SI;
    f7e6:	81 e0       	ldi	r24, 0x01	; 1
    f7e8:	80 93 ec 04 	sts	0x04EC, r24
					sprintf(chBufferRx_USART0, "%S: %S %S", (wchar_t*)Comando_Print, (wchar_t*)Comando_ADC, (wchar_t*)MSG_Ok);
    f7ec:	80 e6       	ldi	r24, 0x60	; 96
    f7ee:	97 e0       	ldi	r25, 0x07	; 7
    f7f0:	89 2f       	mov	r24, r25
    f7f2:	8f 93       	push	r24
    f7f4:	80 e6       	ldi	r24, 0x60	; 96
    f7f6:	97 e0       	ldi	r25, 0x07	; 7
    f7f8:	8f 93       	push	r24
    f7fa:	83 e9       	ldi	r24, 0x93	; 147
    f7fc:	95 e0       	ldi	r25, 0x05	; 5
    f7fe:	89 2f       	mov	r24, r25
    f800:	8f 93       	push	r24
    f802:	83 e9       	ldi	r24, 0x93	; 147
    f804:	95 e0       	ldi	r25, 0x05	; 5
    f806:	8f 93       	push	r24
    f808:	81 e8       	ldi	r24, 0x81	; 129
    f80a:	95 e0       	ldi	r25, 0x05	; 5
    f80c:	89 2f       	mov	r24, r25
    f80e:	8f 93       	push	r24
    f810:	81 e8       	ldi	r24, 0x81	; 129
    f812:	95 e0       	ldi	r25, 0x05	; 5
    f814:	8f 93       	push	r24
    f816:	8f e1       	ldi	r24, 0x1F	; 31
    f818:	92 e0       	ldi	r25, 0x02	; 2
    f81a:	89 2f       	mov	r24, r25
    f81c:	8f 93       	push	r24
    f81e:	8f e1       	ldi	r24, 0x1F	; 31
    f820:	92 e0       	ldi	r25, 0x02	; 2
    f822:	8f 93       	push	r24
    f824:	81 e8       	ldi	r24, 0x81	; 129
    f826:	92 e0       	ldi	r25, 0x02	; 2
    f828:	89 2f       	mov	r24, r25
    f82a:	8f 93       	push	r24
    f82c:	81 e8       	ldi	r24, 0x81	; 129
    f82e:	92 e0       	ldi	r25, 0x02	; 2
    f830:	8f 93       	push	r24
    f832:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f836:	8d b7       	in	r24, 0x3d	; 61
    f838:	9e b7       	in	r25, 0x3e	; 62
    f83a:	0a 96       	adiw	r24, 0x0a	; 10
    f83c:	0f b6       	in	r0, 0x3f	; 63
    f83e:	f8 94       	cli
    f840:	de bf       	out	0x3e, r29	; 62
    f842:	0f be       	out	0x3f, r0	; 63
    f844:	cd bf       	out	0x3d, r28	; 61
    f846:	09 c1       	rjmp	.+530    	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Entradas, chBufferRx_USART0+auxIndexTerminal)) {
    f848:	80 91 2a 06 	lds	r24, 0x062A
    f84c:	90 91 2b 06 	lds	r25, 0x062B
    f850:	8f 57       	subi	r24, 0x7F	; 127
    f852:	9d 4f       	sbci	r25, 0xFD	; 253
    f854:	bc 01       	movw	r22, r24
    f856:	89 e8       	ldi	r24, 0x89	; 137
    f858:	95 e0       	ldi	r25, 0x05	; 5
    f85a:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    f85e:	89 2b       	or	r24, r25
    f860:	89 f1       	breq	.+98     	; 0xf8c4 <Terminal+0x576e>
					chPrintEntradas = SI;
    f862:	81 e0       	ldi	r24, 0x01	; 1
    f864:	80 93 41 04 	sts	0x0441, r24
					sprintf(chBufferRx_USART0, "%S: %S %S", (wchar_t*)Comando_Print, (wchar_t*)Comando_Entradas, (wchar_t*)MSG_Ok);
    f868:	80 e6       	ldi	r24, 0x60	; 96
    f86a:	97 e0       	ldi	r25, 0x07	; 7
    f86c:	89 2f       	mov	r24, r25
    f86e:	8f 93       	push	r24
    f870:	80 e6       	ldi	r24, 0x60	; 96
    f872:	97 e0       	ldi	r25, 0x07	; 7
    f874:	8f 93       	push	r24
    f876:	89 e8       	ldi	r24, 0x89	; 137
    f878:	95 e0       	ldi	r25, 0x05	; 5
    f87a:	89 2f       	mov	r24, r25
    f87c:	8f 93       	push	r24
    f87e:	89 e8       	ldi	r24, 0x89	; 137
    f880:	95 e0       	ldi	r25, 0x05	; 5
    f882:	8f 93       	push	r24
    f884:	81 e8       	ldi	r24, 0x81	; 129
    f886:	95 e0       	ldi	r25, 0x05	; 5
    f888:	89 2f       	mov	r24, r25
    f88a:	8f 93       	push	r24
    f88c:	81 e8       	ldi	r24, 0x81	; 129
    f88e:	95 e0       	ldi	r25, 0x05	; 5
    f890:	8f 93       	push	r24
    f892:	8f e1       	ldi	r24, 0x1F	; 31
    f894:	92 e0       	ldi	r25, 0x02	; 2
    f896:	89 2f       	mov	r24, r25
    f898:	8f 93       	push	r24
    f89a:	8f e1       	ldi	r24, 0x1F	; 31
    f89c:	92 e0       	ldi	r25, 0x02	; 2
    f89e:	8f 93       	push	r24
    f8a0:	81 e8       	ldi	r24, 0x81	; 129
    f8a2:	92 e0       	ldi	r25, 0x02	; 2
    f8a4:	89 2f       	mov	r24, r25
    f8a6:	8f 93       	push	r24
    f8a8:	81 e8       	ldi	r24, 0x81	; 129
    f8aa:	92 e0       	ldi	r25, 0x02	; 2
    f8ac:	8f 93       	push	r24
    f8ae:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f8b2:	ed b7       	in	r30, 0x3d	; 61
    f8b4:	fe b7       	in	r31, 0x3e	; 62
    f8b6:	3a 96       	adiw	r30, 0x0a	; 10
    f8b8:	0f b6       	in	r0, 0x3f	; 63
    f8ba:	f8 94       	cli
    f8bc:	de bf       	out	0x3e, r29	; 62
    f8be:	0f be       	out	0x3f, r0	; 63
    f8c0:	cd bf       	out	0x3d, r28	; 61
    f8c2:	cb c0       	rjmp	.+406    	; 0xfa5a <Terminal+0x5904>
				}
				else if (Detectar_Comando_Buffer_P(Comando_Salidas, chBufferRx_USART0+auxIndexTerminal)) {
    f8c4:	80 91 2a 06 	lds	r24, 0x062A
    f8c8:	90 91 2b 06 	lds	r25, 0x062B
    f8cc:	8f 57       	subi	r24, 0x7F	; 127
    f8ce:	9d 4f       	sbci	r25, 0xFD	; 253
    f8d0:	bc 01       	movw	r22, r24
    f8d2:	88 e9       	ldi	r24, 0x98	; 152
    f8d4:	95 e0       	ldi	r25, 0x05	; 5
    f8d6:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <Detectar_Comando_Buffer_P>
    f8da:	89 2b       	or	r24, r25
    f8dc:	89 f1       	breq	.+98     	; 0xf940 <Terminal+0x57ea>
					chPrintSalidas = SI;
    f8de:	81 e0       	ldi	r24, 0x01	; 1
    f8e0:	80 93 44 04 	sts	0x0444, r24
					sprintf(chBufferRx_USART0, "%S: %S %S", (wchar_t*)Comando_Print, (wchar_t*)Comando_Salidas, (wchar_t*)MSG_Ok);
    f8e4:	80 e6       	ldi	r24, 0x60	; 96
    f8e6:	97 e0       	ldi	r25, 0x07	; 7
    f8e8:	89 2f       	mov	r24, r25
    f8ea:	8f 93       	push	r24
    f8ec:	80 e6       	ldi	r24, 0x60	; 96
    f8ee:	97 e0       	ldi	r25, 0x07	; 7
    f8f0:	8f 93       	push	r24
    f8f2:	88 e9       	ldi	r24, 0x98	; 152
    f8f4:	95 e0       	ldi	r25, 0x05	; 5
    f8f6:	89 2f       	mov	r24, r25
    f8f8:	8f 93       	push	r24
    f8fa:	88 e9       	ldi	r24, 0x98	; 152
    f8fc:	95 e0       	ldi	r25, 0x05	; 5
    f8fe:	8f 93       	push	r24
    f900:	81 e8       	ldi	r24, 0x81	; 129
    f902:	95 e0       	ldi	r25, 0x05	; 5
    f904:	89 2f       	mov	r24, r25
    f906:	8f 93       	push	r24
    f908:	81 e8       	ldi	r24, 0x81	; 129
    f90a:	95 e0       	ldi	r25, 0x05	; 5
    f90c:	8f 93       	push	r24
    f90e:	8f e1       	ldi	r24, 0x1F	; 31
    f910:	92 e0       	ldi	r25, 0x02	; 2
    f912:	89 2f       	mov	r24, r25
    f914:	8f 93       	push	r24
    f916:	8f e1       	ldi	r24, 0x1F	; 31
    f918:	92 e0       	ldi	r25, 0x02	; 2
    f91a:	8f 93       	push	r24
    f91c:	81 e8       	ldi	r24, 0x81	; 129
    f91e:	92 e0       	ldi	r25, 0x02	; 2
    f920:	89 2f       	mov	r24, r25
    f922:	8f 93       	push	r24
    f924:	81 e8       	ldi	r24, 0x81	; 129
    f926:	92 e0       	ldi	r25, 0x02	; 2
    f928:	8f 93       	push	r24
    f92a:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f92e:	8d b7       	in	r24, 0x3d	; 61
    f930:	9e b7       	in	r25, 0x3e	; 62
    f932:	0a 96       	adiw	r24, 0x0a	; 10
    f934:	0f b6       	in	r0, 0x3f	; 63
    f936:	f8 94       	cli
    f938:	de bf       	out	0x3e, r29	; 62
    f93a:	0f be       	out	0x3f, r0	; 63
    f93c:	cd bf       	out	0x3d, r28	; 61
    f93e:	8d c0       	rjmp	.+282    	; 0xfa5a <Terminal+0x5904>
				}
				else {
					sprintf(chBufferRx_USART0, "%S: %S %S", (wchar_t*)Comando_Print, (wchar_t*)MSG_Parametro, (wchar_t*)MSG_Desconocido);
    f940:	8a e4       	ldi	r24, 0x4A	; 74
    f942:	97 e0       	ldi	r25, 0x07	; 7
    f944:	89 2f       	mov	r24, r25
    f946:	8f 93       	push	r24
    f948:	8a e4       	ldi	r24, 0x4A	; 74
    f94a:	97 e0       	ldi	r25, 0x07	; 7
    f94c:	8f 93       	push	r24
    f94e:	8f e3       	ldi	r24, 0x3F	; 63
    f950:	97 e0       	ldi	r25, 0x07	; 7
    f952:	89 2f       	mov	r24, r25
    f954:	8f 93       	push	r24
    f956:	8f e3       	ldi	r24, 0x3F	; 63
    f958:	97 e0       	ldi	r25, 0x07	; 7
    f95a:	8f 93       	push	r24
    f95c:	81 e8       	ldi	r24, 0x81	; 129
    f95e:	95 e0       	ldi	r25, 0x05	; 5
    f960:	89 2f       	mov	r24, r25
    f962:	8f 93       	push	r24
    f964:	81 e8       	ldi	r24, 0x81	; 129
    f966:	95 e0       	ldi	r25, 0x05	; 5
    f968:	8f 93       	push	r24
    f96a:	8f e1       	ldi	r24, 0x1F	; 31
    f96c:	92 e0       	ldi	r25, 0x02	; 2
    f96e:	89 2f       	mov	r24, r25
    f970:	8f 93       	push	r24
    f972:	8f e1       	ldi	r24, 0x1F	; 31
    f974:	92 e0       	ldi	r25, 0x02	; 2
    f976:	8f 93       	push	r24
    f978:	81 e8       	ldi	r24, 0x81	; 129
    f97a:	92 e0       	ldi	r25, 0x02	; 2
    f97c:	89 2f       	mov	r24, r25
    f97e:	8f 93       	push	r24
    f980:	81 e8       	ldi	r24, 0x81	; 129
    f982:	92 e0       	ldi	r25, 0x02	; 2
    f984:	8f 93       	push	r24
    f986:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f98a:	ed b7       	in	r30, 0x3d	; 61
    f98c:	fe b7       	in	r31, 0x3e	; 62
    f98e:	3a 96       	adiw	r30, 0x0a	; 10
    f990:	0f b6       	in	r0, 0x3f	; 63
    f992:	f8 94       	cli
    f994:	de bf       	out	0x3e, r29	; 62
    f996:	0f be       	out	0x3f, r0	; 63
    f998:	cd bf       	out	0x3d, r28	; 61
    f99a:	5f c0       	rjmp	.+190    	; 0xfa5a <Terminal+0x5904>
			 */


			// chBufferRx_USART0 no contiene un comando conocido
			else {
				if ((chADCprint == SI)||(chPrintEntradas == SI)||(chPrintSalidas == SI)) {		// si se toca una tecla o entra cualquier cosa corta las impresiones
    f99c:	80 91 ec 04 	lds	r24, 0x04EC
    f9a0:	81 30       	cpi	r24, 0x01	; 1
    f9a2:	41 f0       	breq	.+16     	; 0xf9b4 <Terminal+0x585e>
    f9a4:	80 91 41 04 	lds	r24, 0x0441
    f9a8:	81 30       	cpi	r24, 0x01	; 1
    f9aa:	21 f0       	breq	.+8      	; 0xf9b4 <Terminal+0x585e>
    f9ac:	80 91 44 04 	lds	r24, 0x0444
    f9b0:	81 30       	cpi	r24, 0x01	; 1
    f9b2:	69 f5       	brne	.+90     	; 0xfa0e <Terminal+0x58b8>
					chADCprint = NO;
    f9b4:	10 92 ec 04 	sts	0x04EC, r1
					chPrintEntradas = NO;
    f9b8:	10 92 41 04 	sts	0x0441, r1
					chPrintSalidas = NO;
    f9bc:	10 92 44 04 	sts	0x0444, r1
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)Comando_Print, (wchar_t*)MSG_End);
    f9c0:	84 e6       	ldi	r24, 0x64	; 100
    f9c2:	97 e0       	ldi	r25, 0x07	; 7
    f9c4:	89 2f       	mov	r24, r25
    f9c6:	8f 93       	push	r24
    f9c8:	84 e6       	ldi	r24, 0x64	; 100
    f9ca:	97 e0       	ldi	r25, 0x07	; 7
    f9cc:	8f 93       	push	r24
    f9ce:	81 e8       	ldi	r24, 0x81	; 129
    f9d0:	95 e0       	ldi	r25, 0x05	; 5
    f9d2:	89 2f       	mov	r24, r25
    f9d4:	8f 93       	push	r24
    f9d6:	81 e8       	ldi	r24, 0x81	; 129
    f9d8:	95 e0       	ldi	r25, 0x05	; 5
    f9da:	8f 93       	push	r24
    f9dc:	80 ef       	ldi	r24, 0xF0	; 240
    f9de:	91 e0       	ldi	r25, 0x01	; 1
    f9e0:	89 2f       	mov	r24, r25
    f9e2:	8f 93       	push	r24
    f9e4:	80 ef       	ldi	r24, 0xF0	; 240
    f9e6:	91 e0       	ldi	r25, 0x01	; 1
    f9e8:	8f 93       	push	r24
    f9ea:	81 e8       	ldi	r24, 0x81	; 129
    f9ec:	92 e0       	ldi	r25, 0x02	; 2
    f9ee:	89 2f       	mov	r24, r25
    f9f0:	8f 93       	push	r24
    f9f2:	81 e8       	ldi	r24, 0x81	; 129
    f9f4:	92 e0       	ldi	r25, 0x02	; 2
    f9f6:	8f 93       	push	r24
    f9f8:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    f9fc:	8d b7       	in	r24, 0x3d	; 61
    f9fe:	9e b7       	in	r25, 0x3e	; 62
    fa00:	08 96       	adiw	r24, 0x08	; 8
    fa02:	0f b6       	in	r0, 0x3f	; 63
    fa04:	f8 94       	cli
    fa06:	de bf       	out	0x3e, r29	; 62
    fa08:	0f be       	out	0x3f, r0	; 63
    fa0a:	cd bf       	out	0x3d, r28	; 61
    fa0c:	26 c0       	rjmp	.+76     	; 0xfa5a <Terminal+0x5904>
				}
				else {
					sprintf(chBufferRx_USART0, "%S: %S", (wchar_t*)MSG_Comando, (wchar_t*)MSG_Desconocido);
    fa0e:	8a e4       	ldi	r24, 0x4A	; 74
    fa10:	97 e0       	ldi	r25, 0x07	; 7
    fa12:	89 2f       	mov	r24, r25
    fa14:	8f 93       	push	r24
    fa16:	8a e4       	ldi	r24, 0x4A	; 74
    fa18:	97 e0       	ldi	r25, 0x07	; 7
    fa1a:	8f 93       	push	r24
    fa1c:	86 e3       	ldi	r24, 0x36	; 54
    fa1e:	97 e0       	ldi	r25, 0x07	; 7
    fa20:	89 2f       	mov	r24, r25
    fa22:	8f 93       	push	r24
    fa24:	86 e3       	ldi	r24, 0x36	; 54
    fa26:	97 e0       	ldi	r25, 0x07	; 7
    fa28:	8f 93       	push	r24
    fa2a:	80 ef       	ldi	r24, 0xF0	; 240
    fa2c:	91 e0       	ldi	r25, 0x01	; 1
    fa2e:	89 2f       	mov	r24, r25
    fa30:	8f 93       	push	r24
    fa32:	80 ef       	ldi	r24, 0xF0	; 240
    fa34:	91 e0       	ldi	r25, 0x01	; 1
    fa36:	8f 93       	push	r24
    fa38:	81 e8       	ldi	r24, 0x81	; 129
    fa3a:	92 e0       	ldi	r25, 0x02	; 2
    fa3c:	89 2f       	mov	r24, r25
    fa3e:	8f 93       	push	r24
    fa40:	81 e8       	ldi	r24, 0x81	; 129
    fa42:	92 e0       	ldi	r25, 0x02	; 2
    fa44:	8f 93       	push	r24
    fa46:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    fa4a:	ed b7       	in	r30, 0x3d	; 61
    fa4c:	fe b7       	in	r31, 0x3e	; 62
    fa4e:	38 96       	adiw	r30, 0x08	; 8
    fa50:	0f b6       	in	r0, 0x3f	; 63
    fa52:	f8 94       	cli
    fa54:	de bf       	out	0x3e, r29	; 62
    fa56:	0f be       	out	0x3f, r0	; 63
    fa58:	cd bf       	out	0x3d, r28	; 61
				}
			}

			Transmitir_Buffer_USART0 (chBufferRx_USART0, USART0_BUFFER_ZISE);
    fa5a:	68 ec       	ldi	r22, 0xC8	; 200
    fa5c:	70 e0       	ldi	r23, 0x00	; 0
    fa5e:	81 e8       	ldi	r24, 0x81	; 129
    fa60:	92 e0       	ldi	r25, 0x02	; 2
    fa62:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
			Transmitir_Buffer_USART0_P (PSTR("\n\r\0"));
    fa66:	81 ed       	ldi	r24, 0xD1	; 209
    fa68:	97 e0       	ldi	r25, 0x07	; 7
    fa6a:	0e 94 85 0b 	call	0x170a	; 0x170a <Transmitir_Buffer_USART0_P>

			auxIndexTerminal = 0;
    fa6e:	10 92 2b 06 	sts	0x062B, r1
    fa72:	10 92 2a 06 	sts	0x062A, r1
			uchEstadoBufferRx_USART0 = VACIO;											// libero el buffer de recepcion
    fa76:	10 92 52 03 	sts	0x0352, r1
			uchEstadoTerminal = TERMINAL_STANDBY;
    fa7a:	10 92 29 06 	sts	0x0629, r1
			break;
    fa7e:	0d c0       	rjmp	.+26     	; 0xfa9a <Terminal+0x5944>


		default:
			auxIndexTerminal = 0;
    fa80:	10 92 2b 06 	sts	0x062B, r1
    fa84:	10 92 2a 06 	sts	0x062A, r1
			Transmitir_Buffer_USART0_P (PSTR("\n\r\0"));
    fa88:	85 ed       	ldi	r24, 0xD5	; 213
    fa8a:	97 e0       	ldi	r25, 0x07	; 7
    fa8c:	0e 94 85 0b 	call	0x170a	; 0x170a <Transmitir_Buffer_USART0_P>
			uchEstadoBufferRx_USART0 = VACIO;											// libero el buffer de recepcion
    fa90:	10 92 52 03 	sts	0x0352, r1
			uchEstadoTerminal = TERMINAL_STANDBY;
    fa94:	10 92 29 06 	sts	0x0629, r1
			break;
    fa98:	00 00       	nop
	}
}
    fa9a:	62 96       	adiw	r28, 0x12	; 18
    fa9c:	0f b6       	in	r0, 0x3f	; 63
    fa9e:	f8 94       	cli
    faa0:	de bf       	out	0x3e, r29	; 62
    faa2:	0f be       	out	0x3f, r0	; 63
    faa4:	cd bf       	out	0x3d, r28	; 61
    faa6:	df 91       	pop	r29
    faa8:	cf 91       	pop	r28
    faaa:	1f 91       	pop	r17
    faac:	0f 91       	pop	r16
    faae:	ff 90       	pop	r15
    fab0:	ef 90       	pop	r14
    fab2:	df 90       	pop	r13
    fab4:	cf 90       	pop	r12
    fab6:	08 95       	ret

0000fab8 <Detectar_Comando_Buffer_P>:

/************************************************************************
* Funcion que reconoce un comando en el inicio de un mesaje recibido y modifica el index de la terminal solo si detecta
************************************************************************/
int Detectar_Comando_Buffer_P (const char *chBufferOriginalPtr, char *chBufferRecibidoPtr) {
    fab8:	cf 93       	push	r28
    faba:	df 93       	push	r29
    fabc:	cd b7       	in	r28, 0x3d	; 61
    fabe:	de b7       	in	r29, 0x3e	; 62
    fac0:	2e 97       	sbiw	r28, 0x0e	; 14
    fac2:	0f b6       	in	r0, 0x3f	; 63
    fac4:	f8 94       	cli
    fac6:	de bf       	out	0x3e, r29	; 62
    fac8:	0f be       	out	0x3f, r0	; 63
    faca:	cd bf       	out	0x3d, r28	; 61
    facc:	9c 87       	std	Y+12, r25	; 0x0c
    face:	8b 87       	std	Y+11, r24	; 0x0b
    fad0:	7e 87       	std	Y+14, r23	; 0x0e
    fad2:	6d 87       	std	Y+13, r22	; 0x0d
	int i = 0, endIndex = 0;
    fad4:	1a 82       	std	Y+2, r1	; 0x02
    fad6:	19 82       	std	Y+1, r1	; 0x01
    fad8:	1c 82       	std	Y+4, r1	; 0x04
    fada:	1b 82       	std	Y+3, r1	; 0x03
	while ((*(chBufferRecibidoPtr+endIndex) == '\n') || (*(chBufferRecibidoPtr+endIndex) == '\r'))	// si lo recibido comienza con \n o \r lo salto
    fadc:	05 c0       	rjmp	.+10     	; 0xfae8 <Detectar_Comando_Buffer_P+0x30>
		endIndex++;
    fade:	8b 81       	ldd	r24, Y+3	; 0x03
    fae0:	9c 81       	ldd	r25, Y+4	; 0x04
    fae2:	01 96       	adiw	r24, 0x01	; 1
    fae4:	9c 83       	std	Y+4, r25	; 0x04
    fae6:	8b 83       	std	Y+3, r24	; 0x03
/************************************************************************
* Funcion que reconoce un comando en el inicio de un mesaje recibido y modifica el index de la terminal solo si detecta
************************************************************************/
int Detectar_Comando_Buffer_P (const char *chBufferOriginalPtr, char *chBufferRecibidoPtr) {
	int i = 0, endIndex = 0;
	while ((*(chBufferRecibidoPtr+endIndex) == '\n') || (*(chBufferRecibidoPtr+endIndex) == '\r'))	// si lo recibido comienza con \n o \r lo salto
    fae8:	8b 81       	ldd	r24, Y+3	; 0x03
    faea:	9c 81       	ldd	r25, Y+4	; 0x04
    faec:	2d 85       	ldd	r18, Y+13	; 0x0d
    faee:	3e 85       	ldd	r19, Y+14	; 0x0e
    faf0:	82 0f       	add	r24, r18
    faf2:	93 1f       	adc	r25, r19
    faf4:	fc 01       	movw	r30, r24
    faf6:	80 81       	ld	r24, Z
    faf8:	8a 30       	cpi	r24, 0x0A	; 10
    fafa:	89 f3       	breq	.-30     	; 0xfade <Detectar_Comando_Buffer_P+0x26>
    fafc:	8b 81       	ldd	r24, Y+3	; 0x03
    fafe:	9c 81       	ldd	r25, Y+4	; 0x04
    fb00:	2d 85       	ldd	r18, Y+13	; 0x0d
    fb02:	3e 85       	ldd	r19, Y+14	; 0x0e
    fb04:	82 0f       	add	r24, r18
    fb06:	93 1f       	adc	r25, r19
    fb08:	fc 01       	movw	r30, r24
    fb0a:	80 81       	ld	r24, Z
    fb0c:	8d 30       	cpi	r24, 0x0D	; 13
    fb0e:	39 f3       	breq	.-50     	; 0xfade <Detectar_Comando_Buffer_P+0x26>
		endIndex++;

	while (pgm_read_byte(chBufferOriginalPtr+i) != '\0') {								// Comparo lo recibido
    fb10:	25 c0       	rjmp	.+74     	; 0xfb5c <Detectar_Comando_Buffer_P+0xa4>
		if (pgm_read_byte(chBufferOriginalPtr+i) != *(chBufferRecibidoPtr+endIndex)) {	// verifico que coincidan
    fb12:	89 81       	ldd	r24, Y+1	; 0x01
    fb14:	9a 81       	ldd	r25, Y+2	; 0x02
    fb16:	2b 85       	ldd	r18, Y+11	; 0x0b
    fb18:	3c 85       	ldd	r19, Y+12	; 0x0c
    fb1a:	82 0f       	add	r24, r18
    fb1c:	93 1f       	adc	r25, r19
    fb1e:	99 87       	std	Y+9, r25	; 0x09
    fb20:	88 87       	std	Y+8, r24	; 0x08
    fb22:	88 85       	ldd	r24, Y+8	; 0x08
    fb24:	99 85       	ldd	r25, Y+9	; 0x09
    fb26:	fc 01       	movw	r30, r24
    fb28:	84 91       	lpm	r24, Z
    fb2a:	8a 87       	std	Y+10, r24	; 0x0a
    fb2c:	4a 85       	ldd	r20, Y+10	; 0x0a
    fb2e:	8b 81       	ldd	r24, Y+3	; 0x03
    fb30:	9c 81       	ldd	r25, Y+4	; 0x04
    fb32:	2d 85       	ldd	r18, Y+13	; 0x0d
    fb34:	3e 85       	ldd	r19, Y+14	; 0x0e
    fb36:	82 0f       	add	r24, r18
    fb38:	93 1f       	adc	r25, r19
    fb3a:	fc 01       	movw	r30, r24
    fb3c:	80 81       	ld	r24, Z
    fb3e:	48 17       	cp	r20, r24
    fb40:	19 f0       	breq	.+6      	; 0xfb48 <Detectar_Comando_Buffer_P+0x90>
			endIndex=0;
    fb42:	1c 82       	std	Y+4, r1	; 0x04
    fb44:	1b 82       	std	Y+3, r1	; 0x03
			break;
    fb46:	1a c0       	rjmp	.+52     	; 0xfb7c <Detectar_Comando_Buffer_P+0xc4>
		}
		i++;
    fb48:	89 81       	ldd	r24, Y+1	; 0x01
    fb4a:	9a 81       	ldd	r25, Y+2	; 0x02
    fb4c:	01 96       	adiw	r24, 0x01	; 1
    fb4e:	9a 83       	std	Y+2, r25	; 0x02
    fb50:	89 83       	std	Y+1, r24	; 0x01
		endIndex++;
    fb52:	8b 81       	ldd	r24, Y+3	; 0x03
    fb54:	9c 81       	ldd	r25, Y+4	; 0x04
    fb56:	01 96       	adiw	r24, 0x01	; 1
    fb58:	9c 83       	std	Y+4, r25	; 0x04
    fb5a:	8b 83       	std	Y+3, r24	; 0x03
int Detectar_Comando_Buffer_P (const char *chBufferOriginalPtr, char *chBufferRecibidoPtr) {
	int i = 0, endIndex = 0;
	while ((*(chBufferRecibidoPtr+endIndex) == '\n') || (*(chBufferRecibidoPtr+endIndex) == '\r'))	// si lo recibido comienza con \n o \r lo salto
		endIndex++;

	while (pgm_read_byte(chBufferOriginalPtr+i) != '\0') {								// Comparo lo recibido
    fb5c:	89 81       	ldd	r24, Y+1	; 0x01
    fb5e:	9a 81       	ldd	r25, Y+2	; 0x02
    fb60:	2b 85       	ldd	r18, Y+11	; 0x0b
    fb62:	3c 85       	ldd	r19, Y+12	; 0x0c
    fb64:	82 0f       	add	r24, r18
    fb66:	93 1f       	adc	r25, r19
    fb68:	9e 83       	std	Y+6, r25	; 0x06
    fb6a:	8d 83       	std	Y+5, r24	; 0x05
    fb6c:	8d 81       	ldd	r24, Y+5	; 0x05
    fb6e:	9e 81       	ldd	r25, Y+6	; 0x06
    fb70:	fc 01       	movw	r30, r24
    fb72:	84 91       	lpm	r24, Z
    fb74:	8f 83       	std	Y+7, r24	; 0x07
    fb76:	8f 81       	ldd	r24, Y+7	; 0x07
    fb78:	88 23       	and	r24, r24
    fb7a:	59 f6       	brne	.-106    	; 0xfb12 <Detectar_Comando_Buffer_P+0x5a>
		}
		i++;
		endIndex++;
	}
	// si detecte...
	if (endIndex != 0){
    fb7c:	8b 81       	ldd	r24, Y+3	; 0x03
    fb7e:	9c 81       	ldd	r25, Y+4	; 0x04
    fb80:	89 2b       	or	r24, r25
    fb82:	a9 f0       	breq	.+42     	; 0xfbae <Detectar_Comando_Buffer_P+0xf6>
		// si hay un espacio
		if(*(chBufferRecibidoPtr+endIndex) == ' '){
    fb84:	8b 81       	ldd	r24, Y+3	; 0x03
    fb86:	9c 81       	ldd	r25, Y+4	; 0x04
    fb88:	2d 85       	ldd	r18, Y+13	; 0x0d
    fb8a:	3e 85       	ldd	r19, Y+14	; 0x0e
    fb8c:	82 0f       	add	r24, r18
    fb8e:	93 1f       	adc	r25, r19
    fb90:	fc 01       	movw	r30, r24
    fb92:	80 81       	ld	r24, Z
    fb94:	80 32       	cpi	r24, 0x20	; 32
    fb96:	29 f4       	brne	.+10     	; 0xfba2 <Detectar_Comando_Buffer_P+0xea>
		endIndex++;
    fb98:	8b 81       	ldd	r24, Y+3	; 0x03
    fb9a:	9c 81       	ldd	r25, Y+4	; 0x04
    fb9c:	01 96       	adiw	r24, 0x01	; 1
    fb9e:	9c 83       	std	Y+4, r25	; 0x04
    fba0:	8b 83       	std	Y+3, r24	; 0x03
		}
		auxIndexTerminal=endIndex;	//modifica el index de la terminal solo si detecta
    fba2:	8b 81       	ldd	r24, Y+3	; 0x03
    fba4:	9c 81       	ldd	r25, Y+4	; 0x04
    fba6:	90 93 2b 06 	sts	0x062B, r25
    fbaa:	80 93 2a 06 	sts	0x062A, r24
	}
	return endIndex;
    fbae:	8b 81       	ldd	r24, Y+3	; 0x03
    fbb0:	9c 81       	ldd	r25, Y+4	; 0x04
}
    fbb2:	2e 96       	adiw	r28, 0x0e	; 14
    fbb4:	0f b6       	in	r0, 0x3f	; 63
    fbb6:	f8 94       	cli
    fbb8:	de bf       	out	0x3e, r29	; 62
    fbba:	0f be       	out	0x3f, r0	; 63
    fbbc:	cd bf       	out	0x3d, r28	; 61
    fbbe:	df 91       	pop	r29
    fbc0:	cf 91       	pop	r28
    fbc2:	08 95       	ret

0000fbc4 <Inicio_Terminal>:

/*****************************************************************************
* Funcion de inicio
*****************************************************************************/
void Inicio_Terminal (void) {
    fbc4:	cf 93       	push	r28
    fbc6:	df 93       	push	r29
    fbc8:	cd b7       	in	r28, 0x3d	; 61
    fbca:	de b7       	in	r29, 0x3e	; 62
	sprintf(chBufferRx_USART0, "\n\n\r%S%s", (wchar_t*)Conductimetro_Info, chNumeroSerie);
    fbcc:	8f e1       	ldi	r24, 0x1F	; 31
    fbce:	96 e0       	ldi	r25, 0x06	; 6
    fbd0:	89 2f       	mov	r24, r25
    fbd2:	8f 93       	push	r24
    fbd4:	8f e1       	ldi	r24, 0x1F	; 31
    fbd6:	96 e0       	ldi	r25, 0x06	; 6
    fbd8:	8f 93       	push	r24
    fbda:	82 e1       	ldi	r24, 0x12	; 18
    fbdc:	95 e0       	ldi	r25, 0x05	; 5
    fbde:	89 2f       	mov	r24, r25
    fbe0:	8f 93       	push	r24
    fbe2:	82 e1       	ldi	r24, 0x12	; 18
    fbe4:	95 e0       	ldi	r25, 0x05	; 5
    fbe6:	8f 93       	push	r24
    fbe8:	89 e2       	ldi	r24, 0x29	; 41
    fbea:	92 e0       	ldi	r25, 0x02	; 2
    fbec:	89 2f       	mov	r24, r25
    fbee:	8f 93       	push	r24
    fbf0:	89 e2       	ldi	r24, 0x29	; 41
    fbf2:	92 e0       	ldi	r25, 0x02	; 2
    fbf4:	8f 93       	push	r24
    fbf6:	81 e8       	ldi	r24, 0x81	; 129
    fbf8:	92 e0       	ldi	r25, 0x02	; 2
    fbfa:	89 2f       	mov	r24, r25
    fbfc:	8f 93       	push	r24
    fbfe:	81 e8       	ldi	r24, 0x81	; 129
    fc00:	92 e0       	ldi	r25, 0x02	; 2
    fc02:	8f 93       	push	r24
    fc04:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    fc08:	8d b7       	in	r24, 0x3d	; 61
    fc0a:	9e b7       	in	r25, 0x3e	; 62
    fc0c:	08 96       	adiw	r24, 0x08	; 8
    fc0e:	0f b6       	in	r0, 0x3f	; 63
    fc10:	f8 94       	cli
    fc12:	de bf       	out	0x3e, r29	; 62
    fc14:	0f be       	out	0x3f, r0	; 63
    fc16:	cd bf       	out	0x3d, r28	; 61
	Transmitir_Buffer_USART0 (chBufferRx_USART0, USART0_BUFFER_ZISE);
    fc18:	68 ec       	ldi	r22, 0xC8	; 200
    fc1a:	70 e0       	ldi	r23, 0x00	; 0
    fc1c:	81 e8       	ldi	r24, 0x81	; 129
    fc1e:	92 e0       	ldi	r25, 0x02	; 2
    fc20:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>

	sprintf(chBufferRx_USART0, "%S", (wchar_t*)MSG_Terminal_Lista);
    fc24:	80 e7       	ldi	r24, 0x70	; 112
    fc26:	97 e0       	ldi	r25, 0x07	; 7
    fc28:	89 2f       	mov	r24, r25
    fc2a:	8f 93       	push	r24
    fc2c:	80 e7       	ldi	r24, 0x70	; 112
    fc2e:	97 e0       	ldi	r25, 0x07	; 7
    fc30:	8f 93       	push	r24
    fc32:	81 e3       	ldi	r24, 0x31	; 49
    fc34:	92 e0       	ldi	r25, 0x02	; 2
    fc36:	89 2f       	mov	r24, r25
    fc38:	8f 93       	push	r24
    fc3a:	81 e3       	ldi	r24, 0x31	; 49
    fc3c:	92 e0       	ldi	r25, 0x02	; 2
    fc3e:	8f 93       	push	r24
    fc40:	81 e8       	ldi	r24, 0x81	; 129
    fc42:	92 e0       	ldi	r25, 0x02	; 2
    fc44:	89 2f       	mov	r24, r25
    fc46:	8f 93       	push	r24
    fc48:	81 e8       	ldi	r24, 0x81	; 129
    fc4a:	92 e0       	ldi	r25, 0x02	; 2
    fc4c:	8f 93       	push	r24
    fc4e:	0e 94 45 84 	call	0x1088a	; 0x1088a <sprintf>
    fc52:	0f 90       	pop	r0
    fc54:	0f 90       	pop	r0
    fc56:	0f 90       	pop	r0
    fc58:	0f 90       	pop	r0
    fc5a:	0f 90       	pop	r0
    fc5c:	0f 90       	pop	r0
	Transmitir_Buffer_USART0 (chBufferRx_USART0, USART0_BUFFER_ZISE);
    fc5e:	68 ec       	ldi	r22, 0xC8	; 200
    fc60:	70 e0       	ldi	r23, 0x00	; 0
    fc62:	81 e8       	ldi	r24, 0x81	; 129
    fc64:	92 e0       	ldi	r25, 0x02	; 2
    fc66:	0e 94 46 0b 	call	0x168c	; 0x168c <Transmitir_Buffer_USART0>
}
    fc6a:	df 91       	pop	r29
    fc6c:	cf 91       	pop	r28
    fc6e:	08 95       	ret

0000fc70 <Buscar_en_Buffer_P>:
#include <avr/pgmspace.h>

/**************************************************************************
* Funcion que busca un string de memoria de programa dentro de uno en RAM
***************************************************************************/
char Buscar_en_Buffer_P (const char *chBufferOriginalPtr, char *chBufferRecibidoPtr, int bufferRecibidoZise) {
    fc70:	cf 93       	push	r28
    fc72:	df 93       	push	r29
    fc74:	cd b7       	in	r28, 0x3d	; 61
    fc76:	de b7       	in	r29, 0x3e	; 62
    fc78:	64 97       	sbiw	r28, 0x14	; 20
    fc7a:	0f b6       	in	r0, 0x3f	; 63
    fc7c:	f8 94       	cli
    fc7e:	de bf       	out	0x3e, r29	; 62
    fc80:	0f be       	out	0x3f, r0	; 63
    fc82:	cd bf       	out	0x3d, r28	; 61
    fc84:	98 8b       	std	Y+16, r25	; 0x10
    fc86:	8f 87       	std	Y+15, r24	; 0x0f
    fc88:	7a 8b       	std	Y+18, r23	; 0x12
    fc8a:	69 8b       	std	Y+17, r22	; 0x11
    fc8c:	5c 8b       	std	Y+20, r21	; 0x14
    fc8e:	4b 8b       	std	Y+19, r20	; 0x13

	char chError=ERROR;
    fc90:	81 e0       	ldi	r24, 0x01	; 1
    fc92:	89 83       	std	Y+1, r24	; 0x01
	int i = 0, j = 0;
    fc94:	1b 82       	std	Y+3, r1	; 0x03
    fc96:	1a 82       	std	Y+2, r1	; 0x02
    fc98:	1d 82       	std	Y+5, r1	; 0x05
    fc9a:	1c 82       	std	Y+4, r1	; 0x04

	while ((*(chBufferRecibidoPtr+i) != '\0') && (i < bufferRecibidoZise) && (pgm_read_byte(chBufferOriginalPtr+j) != '\0')) {	// Comparo lo recibido
    fc9c:	38 c0       	rjmp	.+112    	; 0xfd0e <Buscar_en_Buffer_P+0x9e>

		if (pgm_read_byte(chBufferOriginalPtr+j) != *(chBufferRecibidoPtr+i)) {				// verifico que coincidan
    fc9e:	8c 81       	ldd	r24, Y+4	; 0x04
    fca0:	9d 81       	ldd	r25, Y+5	; 0x05
    fca2:	2f 85       	ldd	r18, Y+15	; 0x0f
    fca4:	38 89       	ldd	r19, Y+16	; 0x10
    fca6:	82 0f       	add	r24, r18
    fca8:	93 1f       	adc	r25, r19
    fcaa:	9a 87       	std	Y+10, r25	; 0x0a
    fcac:	89 87       	std	Y+9, r24	; 0x09
    fcae:	89 85       	ldd	r24, Y+9	; 0x09
    fcb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    fcb2:	fc 01       	movw	r30, r24
    fcb4:	84 91       	lpm	r24, Z
    fcb6:	8b 87       	std	Y+11, r24	; 0x0b
    fcb8:	4b 85       	ldd	r20, Y+11	; 0x0b
    fcba:	8a 81       	ldd	r24, Y+2	; 0x02
    fcbc:	9b 81       	ldd	r25, Y+3	; 0x03
    fcbe:	29 89       	ldd	r18, Y+17	; 0x11
    fcc0:	3a 89       	ldd	r19, Y+18	; 0x12
    fcc2:	82 0f       	add	r24, r18
    fcc4:	93 1f       	adc	r25, r19
    fcc6:	fc 01       	movw	r30, r24
    fcc8:	80 81       	ld	r24, Z
    fcca:	48 17       	cp	r20, r24
    fccc:	29 f0       	breq	.+10     	; 0xfcd8 <Buscar_en_Buffer_P+0x68>
			chError = ERROR;
    fcce:	81 e0       	ldi	r24, 0x01	; 1
    fcd0:	89 83       	std	Y+1, r24	; 0x01
			j = 0;
    fcd2:	1d 82       	std	Y+5, r1	; 0x05
    fcd4:	1c 82       	std	Y+4, r1	; 0x04
    fcd6:	16 c0       	rjmp	.+44     	; 0xfd04 <Buscar_en_Buffer_P+0x94>
		}
		else {
			j++;
    fcd8:	8c 81       	ldd	r24, Y+4	; 0x04
    fcda:	9d 81       	ldd	r25, Y+5	; 0x05
    fcdc:	01 96       	adiw	r24, 0x01	; 1
    fcde:	9d 83       	std	Y+5, r25	; 0x05
    fce0:	8c 83       	std	Y+4, r24	; 0x04
			if (pgm_read_byte(chBufferOriginalPtr+j) == '\0'){
    fce2:	8c 81       	ldd	r24, Y+4	; 0x04
    fce4:	9d 81       	ldd	r25, Y+5	; 0x05
    fce6:	2f 85       	ldd	r18, Y+15	; 0x0f
    fce8:	38 89       	ldd	r19, Y+16	; 0x10
    fcea:	82 0f       	add	r24, r18
    fcec:	93 1f       	adc	r25, r19
    fcee:	9d 87       	std	Y+13, r25	; 0x0d
    fcf0:	8c 87       	std	Y+12, r24	; 0x0c
    fcf2:	8c 85       	ldd	r24, Y+12	; 0x0c
    fcf4:	9d 85       	ldd	r25, Y+13	; 0x0d
    fcf6:	fc 01       	movw	r30, r24
    fcf8:	84 91       	lpm	r24, Z
    fcfa:	8e 87       	std	Y+14, r24	; 0x0e
    fcfc:	8e 85       	ldd	r24, Y+14	; 0x0e
    fcfe:	88 23       	and	r24, r24
    fd00:	09 f4       	brne	.+2      	; 0xfd04 <Buscar_en_Buffer_P+0x94>
				chError = OK;
    fd02:	19 82       	std	Y+1, r1	; 0x01
			}
		}

		i++;
    fd04:	8a 81       	ldd	r24, Y+2	; 0x02
    fd06:	9b 81       	ldd	r25, Y+3	; 0x03
    fd08:	01 96       	adiw	r24, 0x01	; 1
    fd0a:	9b 83       	std	Y+3, r25	; 0x03
    fd0c:	8a 83       	std	Y+2, r24	; 0x02
char Buscar_en_Buffer_P (const char *chBufferOriginalPtr, char *chBufferRecibidoPtr, int bufferRecibidoZise) {

	char chError=ERROR;
	int i = 0, j = 0;

	while ((*(chBufferRecibidoPtr+i) != '\0') && (i < bufferRecibidoZise) && (pgm_read_byte(chBufferOriginalPtr+j) != '\0')) {	// Comparo lo recibido
    fd0e:	8a 81       	ldd	r24, Y+2	; 0x02
    fd10:	9b 81       	ldd	r25, Y+3	; 0x03
    fd12:	29 89       	ldd	r18, Y+17	; 0x11
    fd14:	3a 89       	ldd	r19, Y+18	; 0x12
    fd16:	82 0f       	add	r24, r18
    fd18:	93 1f       	adc	r25, r19
    fd1a:	fc 01       	movw	r30, r24
    fd1c:	80 81       	ld	r24, Z
    fd1e:	88 23       	and	r24, r24
    fd20:	c1 f0       	breq	.+48     	; 0xfd52 <Buscar_en_Buffer_P+0xe2>
    fd22:	2a 81       	ldd	r18, Y+2	; 0x02
    fd24:	3b 81       	ldd	r19, Y+3	; 0x03
    fd26:	8b 89       	ldd	r24, Y+19	; 0x13
    fd28:	9c 89       	ldd	r25, Y+20	; 0x14
    fd2a:	28 17       	cp	r18, r24
    fd2c:	39 07       	cpc	r19, r25
    fd2e:	8c f4       	brge	.+34     	; 0xfd52 <Buscar_en_Buffer_P+0xe2>
    fd30:	8c 81       	ldd	r24, Y+4	; 0x04
    fd32:	9d 81       	ldd	r25, Y+5	; 0x05
    fd34:	2f 85       	ldd	r18, Y+15	; 0x0f
    fd36:	38 89       	ldd	r19, Y+16	; 0x10
    fd38:	82 0f       	add	r24, r18
    fd3a:	93 1f       	adc	r25, r19
    fd3c:	9f 83       	std	Y+7, r25	; 0x07
    fd3e:	8e 83       	std	Y+6, r24	; 0x06
    fd40:	8e 81       	ldd	r24, Y+6	; 0x06
    fd42:	9f 81       	ldd	r25, Y+7	; 0x07
    fd44:	fc 01       	movw	r30, r24
    fd46:	84 91       	lpm	r24, Z
    fd48:	88 87       	std	Y+8, r24	; 0x08
    fd4a:	88 85       	ldd	r24, Y+8	; 0x08
    fd4c:	88 23       	and	r24, r24
    fd4e:	09 f0       	breq	.+2      	; 0xfd52 <Buscar_en_Buffer_P+0xe2>
    fd50:	a6 cf       	rjmp	.-180    	; 0xfc9e <Buscar_en_Buffer_P+0x2e>
			}
		}

		i++;
	}
	return chError;
    fd52:	89 81       	ldd	r24, Y+1	; 0x01
}
    fd54:	64 96       	adiw	r28, 0x14	; 20
    fd56:	0f b6       	in	r0, 0x3f	; 63
    fd58:	f8 94       	cli
    fd5a:	de bf       	out	0x3e, r29	; 62
    fd5c:	0f be       	out	0x3f, r0	; 63
    fd5e:	cd bf       	out	0x3d, r28	; 61
    fd60:	df 91       	pop	r29
    fd62:	cf 91       	pop	r28
    fd64:	08 95       	ret

0000fd66 <Buscar_en_Buffer>:

/**************************************************************************
* Funcion que busca un string de memoria ram dentro de uno en RAM
***************************************************************************/
char Buscar_en_Buffer (char *chBufferOriginalPtr, char *chBufferRecibidoPtr, int bufferRecibidoZise) {
    fd66:	cf 93       	push	r28
    fd68:	df 93       	push	r29
    fd6a:	cd b7       	in	r28, 0x3d	; 61
    fd6c:	de b7       	in	r29, 0x3e	; 62
    fd6e:	2b 97       	sbiw	r28, 0x0b	; 11
    fd70:	0f b6       	in	r0, 0x3f	; 63
    fd72:	f8 94       	cli
    fd74:	de bf       	out	0x3e, r29	; 62
    fd76:	0f be       	out	0x3f, r0	; 63
    fd78:	cd bf       	out	0x3d, r28	; 61
    fd7a:	9f 83       	std	Y+7, r25	; 0x07
    fd7c:	8e 83       	std	Y+6, r24	; 0x06
    fd7e:	79 87       	std	Y+9, r23	; 0x09
    fd80:	68 87       	std	Y+8, r22	; 0x08
    fd82:	5b 87       	std	Y+11, r21	; 0x0b
    fd84:	4a 87       	std	Y+10, r20	; 0x0a

	char chError=ERROR;
    fd86:	81 e0       	ldi	r24, 0x01	; 1
    fd88:	89 83       	std	Y+1, r24	; 0x01
	int i = 0, j = 0;
    fd8a:	1b 82       	std	Y+3, r1	; 0x03
    fd8c:	1a 82       	std	Y+2, r1	; 0x02
    fd8e:	1d 82       	std	Y+5, r1	; 0x05
    fd90:	1c 82       	std	Y+4, r1	; 0x04

	while ((*(chBufferRecibidoPtr+i) != '\0') && (i < bufferRecibidoZise-1) && (*(chBufferOriginalPtr+j) != '\0')) {	// Comparo lo recibido
    fd92:	2c c0       	rjmp	.+88     	; 0xfdec <Buscar_en_Buffer+0x86>

		if (*(chBufferOriginalPtr+j) != *(chBufferRecibidoPtr+i)) {				// verifico que coincidan
    fd94:	8c 81       	ldd	r24, Y+4	; 0x04
    fd96:	9d 81       	ldd	r25, Y+5	; 0x05
    fd98:	2e 81       	ldd	r18, Y+6	; 0x06
    fd9a:	3f 81       	ldd	r19, Y+7	; 0x07
    fd9c:	82 0f       	add	r24, r18
    fd9e:	93 1f       	adc	r25, r19
    fda0:	fc 01       	movw	r30, r24
    fda2:	40 81       	ld	r20, Z
    fda4:	8a 81       	ldd	r24, Y+2	; 0x02
    fda6:	9b 81       	ldd	r25, Y+3	; 0x03
    fda8:	28 85       	ldd	r18, Y+8	; 0x08
    fdaa:	39 85       	ldd	r19, Y+9	; 0x09
    fdac:	82 0f       	add	r24, r18
    fdae:	93 1f       	adc	r25, r19
    fdb0:	fc 01       	movw	r30, r24
    fdb2:	80 81       	ld	r24, Z
    fdb4:	48 17       	cp	r20, r24
    fdb6:	29 f0       	breq	.+10     	; 0xfdc2 <Buscar_en_Buffer+0x5c>
			chError = ERROR;
    fdb8:	81 e0       	ldi	r24, 0x01	; 1
    fdba:	89 83       	std	Y+1, r24	; 0x01
			j = 0;
    fdbc:	1d 82       	std	Y+5, r1	; 0x05
    fdbe:	1c 82       	std	Y+4, r1	; 0x04
    fdc0:	10 c0       	rjmp	.+32     	; 0xfde2 <Buscar_en_Buffer+0x7c>
		}
		else {
			j++;
    fdc2:	8c 81       	ldd	r24, Y+4	; 0x04
    fdc4:	9d 81       	ldd	r25, Y+5	; 0x05
    fdc6:	01 96       	adiw	r24, 0x01	; 1
    fdc8:	9d 83       	std	Y+5, r25	; 0x05
    fdca:	8c 83       	std	Y+4, r24	; 0x04
			if (*(chBufferOriginalPtr+j) == '\0'){
    fdcc:	8c 81       	ldd	r24, Y+4	; 0x04
    fdce:	9d 81       	ldd	r25, Y+5	; 0x05
    fdd0:	2e 81       	ldd	r18, Y+6	; 0x06
    fdd2:	3f 81       	ldd	r19, Y+7	; 0x07
    fdd4:	82 0f       	add	r24, r18
    fdd6:	93 1f       	adc	r25, r19
    fdd8:	fc 01       	movw	r30, r24
    fdda:	80 81       	ld	r24, Z
    fddc:	88 23       	and	r24, r24
    fdde:	09 f4       	brne	.+2      	; 0xfde2 <Buscar_en_Buffer+0x7c>
				chError = OK;
    fde0:	19 82       	std	Y+1, r1	; 0x01
			}
		}

		i++;
    fde2:	8a 81       	ldd	r24, Y+2	; 0x02
    fde4:	9b 81       	ldd	r25, Y+3	; 0x03
    fde6:	01 96       	adiw	r24, 0x01	; 1
    fde8:	9b 83       	std	Y+3, r25	; 0x03
    fdea:	8a 83       	std	Y+2, r24	; 0x02
char Buscar_en_Buffer (char *chBufferOriginalPtr, char *chBufferRecibidoPtr, int bufferRecibidoZise) {

	char chError=ERROR;
	int i = 0, j = 0;

	while ((*(chBufferRecibidoPtr+i) != '\0') && (i < bufferRecibidoZise-1) && (*(chBufferOriginalPtr+j) != '\0')) {	// Comparo lo recibido
    fdec:	8a 81       	ldd	r24, Y+2	; 0x02
    fdee:	9b 81       	ldd	r25, Y+3	; 0x03
    fdf0:	28 85       	ldd	r18, Y+8	; 0x08
    fdf2:	39 85       	ldd	r19, Y+9	; 0x09
    fdf4:	82 0f       	add	r24, r18
    fdf6:	93 1f       	adc	r25, r19
    fdf8:	fc 01       	movw	r30, r24
    fdfa:	80 81       	ld	r24, Z
    fdfc:	88 23       	and	r24, r24
    fdfe:	a9 f0       	breq	.+42     	; 0xfe2a <Buscar_en_Buffer+0xc4>
    fe00:	8a 85       	ldd	r24, Y+10	; 0x0a
    fe02:	9b 85       	ldd	r25, Y+11	; 0x0b
    fe04:	9c 01       	movw	r18, r24
    fe06:	21 50       	subi	r18, 0x01	; 1
    fe08:	31 09       	sbc	r19, r1
    fe0a:	8a 81       	ldd	r24, Y+2	; 0x02
    fe0c:	9b 81       	ldd	r25, Y+3	; 0x03
    fe0e:	82 17       	cp	r24, r18
    fe10:	93 07       	cpc	r25, r19
    fe12:	5c f4       	brge	.+22     	; 0xfe2a <Buscar_en_Buffer+0xc4>
    fe14:	8c 81       	ldd	r24, Y+4	; 0x04
    fe16:	9d 81       	ldd	r25, Y+5	; 0x05
    fe18:	2e 81       	ldd	r18, Y+6	; 0x06
    fe1a:	3f 81       	ldd	r19, Y+7	; 0x07
    fe1c:	82 0f       	add	r24, r18
    fe1e:	93 1f       	adc	r25, r19
    fe20:	fc 01       	movw	r30, r24
    fe22:	80 81       	ld	r24, Z
    fe24:	88 23       	and	r24, r24
    fe26:	09 f0       	breq	.+2      	; 0xfe2a <Buscar_en_Buffer+0xc4>
    fe28:	b5 cf       	rjmp	.-150    	; 0xfd94 <Buscar_en_Buffer+0x2e>
			}
		}

		i++;
	}
	return chError;
    fe2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    fe2c:	2b 96       	adiw	r28, 0x0b	; 11
    fe2e:	0f b6       	in	r0, 0x3f	; 63
    fe30:	f8 94       	cli
    fe32:	de bf       	out	0x3e, r29	; 62
    fe34:	0f be       	out	0x3f, r0	; 63
    fe36:	cd bf       	out	0x3d, r28	; 61
    fe38:	df 91       	pop	r29
    fe3a:	cf 91       	pop	r28
    fe3c:	08 95       	ret

0000fe3e <Comparar_Inicio_Buffer_P>:

/************************************************************************
* Funcion que reconoce el inicio de un mesaje recibido
************************************************************************/
char Comparar_Inicio_Buffer_P (const char *chBufferOriginalPtr, char *chBufferRecibidoPtr) {
    fe3e:	cf 93       	push	r28
    fe40:	df 93       	push	r29
    fe42:	cd b7       	in	r28, 0x3d	; 61
    fe44:	de b7       	in	r29, 0x3e	; 62
    fe46:	2f 97       	sbiw	r28, 0x0f	; 15
    fe48:	0f b6       	in	r0, 0x3f	; 63
    fe4a:	f8 94       	cli
    fe4c:	de bf       	out	0x3e, r29	; 62
    fe4e:	0f be       	out	0x3f, r0	; 63
    fe50:	cd bf       	out	0x3d, r28	; 61
    fe52:	9d 87       	std	Y+13, r25	; 0x0d
    fe54:	8c 87       	std	Y+12, r24	; 0x0c
    fe56:	7f 87       	std	Y+15, r23	; 0x0f
    fe58:	6e 87       	std	Y+14, r22	; 0x0e

	char chError = OK;
    fe5a:	19 82       	std	Y+1, r1	; 0x01
	int i = 0, j = 0;
    fe5c:	1b 82       	std	Y+3, r1	; 0x03
    fe5e:	1a 82       	std	Y+2, r1	; 0x02
    fe60:	1d 82       	std	Y+5, r1	; 0x05
    fe62:	1c 82       	std	Y+4, r1	; 0x04

	while ((*(chBufferRecibidoPtr+j) == '\n') || (*(chBufferRecibidoPtr+j) == '\r'))	// si lo recibido comienza con \n o \r lo salto
    fe64:	05 c0       	rjmp	.+10     	; 0xfe70 <Comparar_Inicio_Buffer_P+0x32>
		j++;
    fe66:	8c 81       	ldd	r24, Y+4	; 0x04
    fe68:	9d 81       	ldd	r25, Y+5	; 0x05
    fe6a:	01 96       	adiw	r24, 0x01	; 1
    fe6c:	9d 83       	std	Y+5, r25	; 0x05
    fe6e:	8c 83       	std	Y+4, r24	; 0x04
char Comparar_Inicio_Buffer_P (const char *chBufferOriginalPtr, char *chBufferRecibidoPtr) {

	char chError = OK;
	int i = 0, j = 0;

	while ((*(chBufferRecibidoPtr+j) == '\n') || (*(chBufferRecibidoPtr+j) == '\r'))	// si lo recibido comienza con \n o \r lo salto
    fe70:	8c 81       	ldd	r24, Y+4	; 0x04
    fe72:	9d 81       	ldd	r25, Y+5	; 0x05
    fe74:	2e 85       	ldd	r18, Y+14	; 0x0e
    fe76:	3f 85       	ldd	r19, Y+15	; 0x0f
    fe78:	82 0f       	add	r24, r18
    fe7a:	93 1f       	adc	r25, r19
    fe7c:	fc 01       	movw	r30, r24
    fe7e:	80 81       	ld	r24, Z
    fe80:	8a 30       	cpi	r24, 0x0A	; 10
    fe82:	89 f3       	breq	.-30     	; 0xfe66 <Comparar_Inicio_Buffer_P+0x28>
    fe84:	8c 81       	ldd	r24, Y+4	; 0x04
    fe86:	9d 81       	ldd	r25, Y+5	; 0x05
    fe88:	2e 85       	ldd	r18, Y+14	; 0x0e
    fe8a:	3f 85       	ldd	r19, Y+15	; 0x0f
    fe8c:	82 0f       	add	r24, r18
    fe8e:	93 1f       	adc	r25, r19
    fe90:	fc 01       	movw	r30, r24
    fe92:	80 81       	ld	r24, Z
    fe94:	8d 30       	cpi	r24, 0x0D	; 13
    fe96:	39 f3       	breq	.-50     	; 0xfe66 <Comparar_Inicio_Buffer_P+0x28>
		j++;

	while (pgm_read_byte(chBufferOriginalPtr+i) != '\0') {								// Comparo lo recibido
    fe98:	25 c0       	rjmp	.+74     	; 0xfee4 <Comparar_Inicio_Buffer_P+0xa6>

		if (pgm_read_byte(chBufferOriginalPtr+i) != *(chBufferRecibidoPtr+j)) {			// verifico que coincidan
    fe9a:	8a 81       	ldd	r24, Y+2	; 0x02
    fe9c:	9b 81       	ldd	r25, Y+3	; 0x03
    fe9e:	2c 85       	ldd	r18, Y+12	; 0x0c
    fea0:	3d 85       	ldd	r19, Y+13	; 0x0d
    fea2:	82 0f       	add	r24, r18
    fea4:	93 1f       	adc	r25, r19
    fea6:	9a 87       	std	Y+10, r25	; 0x0a
    fea8:	89 87       	std	Y+9, r24	; 0x09
    feaa:	89 85       	ldd	r24, Y+9	; 0x09
    feac:	9a 85       	ldd	r25, Y+10	; 0x0a
    feae:	fc 01       	movw	r30, r24
    feb0:	84 91       	lpm	r24, Z
    feb2:	8b 87       	std	Y+11, r24	; 0x0b
    feb4:	4b 85       	ldd	r20, Y+11	; 0x0b
    feb6:	8c 81       	ldd	r24, Y+4	; 0x04
    feb8:	9d 81       	ldd	r25, Y+5	; 0x05
    feba:	2e 85       	ldd	r18, Y+14	; 0x0e
    febc:	3f 85       	ldd	r19, Y+15	; 0x0f
    febe:	82 0f       	add	r24, r18
    fec0:	93 1f       	adc	r25, r19
    fec2:	fc 01       	movw	r30, r24
    fec4:	80 81       	ld	r24, Z
    fec6:	48 17       	cp	r20, r24
    fec8:	19 f0       	breq	.+6      	; 0xfed0 <Comparar_Inicio_Buffer_P+0x92>
			chError = ERROR;
    feca:	81 e0       	ldi	r24, 0x01	; 1
    fecc:	89 83       	std	Y+1, r24	; 0x01
			break;
    fece:	1a c0       	rjmp	.+52     	; 0xff04 <Comparar_Inicio_Buffer_P+0xc6>
		}

		i++;
    fed0:	8a 81       	ldd	r24, Y+2	; 0x02
    fed2:	9b 81       	ldd	r25, Y+3	; 0x03
    fed4:	01 96       	adiw	r24, 0x01	; 1
    fed6:	9b 83       	std	Y+3, r25	; 0x03
    fed8:	8a 83       	std	Y+2, r24	; 0x02
		j++;
    feda:	8c 81       	ldd	r24, Y+4	; 0x04
    fedc:	9d 81       	ldd	r25, Y+5	; 0x05
    fede:	01 96       	adiw	r24, 0x01	; 1
    fee0:	9d 83       	std	Y+5, r25	; 0x05
    fee2:	8c 83       	std	Y+4, r24	; 0x04
	int i = 0, j = 0;

	while ((*(chBufferRecibidoPtr+j) == '\n') || (*(chBufferRecibidoPtr+j) == '\r'))	// si lo recibido comienza con \n o \r lo salto
		j++;

	while (pgm_read_byte(chBufferOriginalPtr+i) != '\0') {								// Comparo lo recibido
    fee4:	8a 81       	ldd	r24, Y+2	; 0x02
    fee6:	9b 81       	ldd	r25, Y+3	; 0x03
    fee8:	2c 85       	ldd	r18, Y+12	; 0x0c
    feea:	3d 85       	ldd	r19, Y+13	; 0x0d
    feec:	82 0f       	add	r24, r18
    feee:	93 1f       	adc	r25, r19
    fef0:	9f 83       	std	Y+7, r25	; 0x07
    fef2:	8e 83       	std	Y+6, r24	; 0x06
    fef4:	8e 81       	ldd	r24, Y+6	; 0x06
    fef6:	9f 81       	ldd	r25, Y+7	; 0x07
    fef8:	fc 01       	movw	r30, r24
    fefa:	84 91       	lpm	r24, Z
    fefc:	88 87       	std	Y+8, r24	; 0x08
    fefe:	88 85       	ldd	r24, Y+8	; 0x08
    ff00:	88 23       	and	r24, r24
    ff02:	59 f6       	brne	.-106    	; 0xfe9a <Comparar_Inicio_Buffer_P+0x5c>
		}

		i++;
		j++;
	}
	return chError;
    ff04:	89 81       	ldd	r24, Y+1	; 0x01
}
    ff06:	2f 96       	adiw	r28, 0x0f	; 15
    ff08:	0f b6       	in	r0, 0x3f	; 63
    ff0a:	f8 94       	cli
    ff0c:	de bf       	out	0x3e, r29	; 62
    ff0e:	0f be       	out	0x3f, r0	; 63
    ff10:	cd bf       	out	0x3d, r28	; 61
    ff12:	df 91       	pop	r29
    ff14:	cf 91       	pop	r28
    ff16:	08 95       	ret

0000ff18 <Comparar_Inicio_Buffer>:

/************************************************************************
* Funcion que reconoce el inicio de un mesaje recibido
************************************************************************/
char Comparar_Inicio_Buffer (char *chBufferOriginalPtr, char *chBufferRecibidoPtr) {
    ff18:	cf 93       	push	r28
    ff1a:	df 93       	push	r29
    ff1c:	cd b7       	in	r28, 0x3d	; 61
    ff1e:	de b7       	in	r29, 0x3e	; 62
    ff20:	29 97       	sbiw	r28, 0x09	; 9
    ff22:	0f b6       	in	r0, 0x3f	; 63
    ff24:	f8 94       	cli
    ff26:	de bf       	out	0x3e, r29	; 62
    ff28:	0f be       	out	0x3f, r0	; 63
    ff2a:	cd bf       	out	0x3d, r28	; 61
    ff2c:	9f 83       	std	Y+7, r25	; 0x07
    ff2e:	8e 83       	std	Y+6, r24	; 0x06
    ff30:	79 87       	std	Y+9, r23	; 0x09
    ff32:	68 87       	std	Y+8, r22	; 0x08

	char chError = OK;
    ff34:	19 82       	std	Y+1, r1	; 0x01
	int i = 0, j = 0;
    ff36:	1b 82       	std	Y+3, r1	; 0x03
    ff38:	1a 82       	std	Y+2, r1	; 0x02
    ff3a:	1d 82       	std	Y+5, r1	; 0x05
    ff3c:	1c 82       	std	Y+4, r1	; 0x04

	while ((*(chBufferRecibidoPtr+j) == '\n') || (*(chBufferRecibidoPtr+j) == '\r'))	// si lo recibido comienza con \n o \r lo salto
    ff3e:	05 c0       	rjmp	.+10     	; 0xff4a <Comparar_Inicio_Buffer+0x32>
		j++;
    ff40:	8c 81       	ldd	r24, Y+4	; 0x04
    ff42:	9d 81       	ldd	r25, Y+5	; 0x05
    ff44:	01 96       	adiw	r24, 0x01	; 1
    ff46:	9d 83       	std	Y+5, r25	; 0x05
    ff48:	8c 83       	std	Y+4, r24	; 0x04
char Comparar_Inicio_Buffer (char *chBufferOriginalPtr, char *chBufferRecibidoPtr) {

	char chError = OK;
	int i = 0, j = 0;

	while ((*(chBufferRecibidoPtr+j) == '\n') || (*(chBufferRecibidoPtr+j) == '\r'))	// si lo recibido comienza con \n o \r lo salto
    ff4a:	8c 81       	ldd	r24, Y+4	; 0x04
    ff4c:	9d 81       	ldd	r25, Y+5	; 0x05
    ff4e:	28 85       	ldd	r18, Y+8	; 0x08
    ff50:	39 85       	ldd	r19, Y+9	; 0x09
    ff52:	82 0f       	add	r24, r18
    ff54:	93 1f       	adc	r25, r19
    ff56:	fc 01       	movw	r30, r24
    ff58:	80 81       	ld	r24, Z
    ff5a:	8a 30       	cpi	r24, 0x0A	; 10
    ff5c:	89 f3       	breq	.-30     	; 0xff40 <Comparar_Inicio_Buffer+0x28>
    ff5e:	8c 81       	ldd	r24, Y+4	; 0x04
    ff60:	9d 81       	ldd	r25, Y+5	; 0x05
    ff62:	28 85       	ldd	r18, Y+8	; 0x08
    ff64:	39 85       	ldd	r19, Y+9	; 0x09
    ff66:	82 0f       	add	r24, r18
    ff68:	93 1f       	adc	r25, r19
    ff6a:	fc 01       	movw	r30, r24
    ff6c:	80 81       	ld	r24, Z
    ff6e:	8d 30       	cpi	r24, 0x0D	; 13
    ff70:	39 f3       	breq	.-50     	; 0xff40 <Comparar_Inicio_Buffer+0x28>
		j++;

	while (*(chBufferOriginalPtr+i) != '\0') {											// Comparo lo recibido
    ff72:	1f c0       	rjmp	.+62     	; 0xffb2 <Comparar_Inicio_Buffer+0x9a>

		if (*(chBufferOriginalPtr+i) != *(chBufferRecibidoPtr+j)) {						// verifico que coincidan
    ff74:	8a 81       	ldd	r24, Y+2	; 0x02
    ff76:	9b 81       	ldd	r25, Y+3	; 0x03
    ff78:	2e 81       	ldd	r18, Y+6	; 0x06
    ff7a:	3f 81       	ldd	r19, Y+7	; 0x07
    ff7c:	82 0f       	add	r24, r18
    ff7e:	93 1f       	adc	r25, r19
    ff80:	fc 01       	movw	r30, r24
    ff82:	40 81       	ld	r20, Z
    ff84:	8c 81       	ldd	r24, Y+4	; 0x04
    ff86:	9d 81       	ldd	r25, Y+5	; 0x05
    ff88:	28 85       	ldd	r18, Y+8	; 0x08
    ff8a:	39 85       	ldd	r19, Y+9	; 0x09
    ff8c:	82 0f       	add	r24, r18
    ff8e:	93 1f       	adc	r25, r19
    ff90:	fc 01       	movw	r30, r24
    ff92:	80 81       	ld	r24, Z
    ff94:	48 17       	cp	r20, r24
    ff96:	19 f0       	breq	.+6      	; 0xff9e <Comparar_Inicio_Buffer+0x86>
			chError = ERROR;
    ff98:	81 e0       	ldi	r24, 0x01	; 1
    ff9a:	89 83       	std	Y+1, r24	; 0x01
			break;
    ff9c:	14 c0       	rjmp	.+40     	; 0xffc6 <Comparar_Inicio_Buffer+0xae>
		}

		i++;
    ff9e:	8a 81       	ldd	r24, Y+2	; 0x02
    ffa0:	9b 81       	ldd	r25, Y+3	; 0x03
    ffa2:	01 96       	adiw	r24, 0x01	; 1
    ffa4:	9b 83       	std	Y+3, r25	; 0x03
    ffa6:	8a 83       	std	Y+2, r24	; 0x02
		j++;
    ffa8:	8c 81       	ldd	r24, Y+4	; 0x04
    ffaa:	9d 81       	ldd	r25, Y+5	; 0x05
    ffac:	01 96       	adiw	r24, 0x01	; 1
    ffae:	9d 83       	std	Y+5, r25	; 0x05
    ffb0:	8c 83       	std	Y+4, r24	; 0x04
	int i = 0, j = 0;

	while ((*(chBufferRecibidoPtr+j) == '\n') || (*(chBufferRecibidoPtr+j) == '\r'))	// si lo recibido comienza con \n o \r lo salto
		j++;

	while (*(chBufferOriginalPtr+i) != '\0') {											// Comparo lo recibido
    ffb2:	8a 81       	ldd	r24, Y+2	; 0x02
    ffb4:	9b 81       	ldd	r25, Y+3	; 0x03
    ffb6:	2e 81       	ldd	r18, Y+6	; 0x06
    ffb8:	3f 81       	ldd	r19, Y+7	; 0x07
    ffba:	82 0f       	add	r24, r18
    ffbc:	93 1f       	adc	r25, r19
    ffbe:	fc 01       	movw	r30, r24
    ffc0:	80 81       	ld	r24, Z
    ffc2:	88 23       	and	r24, r24
    ffc4:	b9 f6       	brne	.-82     	; 0xff74 <Comparar_Inicio_Buffer+0x5c>
		}

		i++;
		j++;
	}
	return chError;
    ffc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    ffc8:	29 96       	adiw	r28, 0x09	; 9
    ffca:	0f b6       	in	r0, 0x3f	; 63
    ffcc:	f8 94       	cli
    ffce:	de bf       	out	0x3e, r29	; 62
    ffd0:	0f be       	out	0x3f, r0	; 63
    ffd2:	cd bf       	out	0x3d, r28	; 61
    ffd4:	df 91       	pop	r29
    ffd6:	cf 91       	pop	r28
    ffd8:	08 95       	ret

0000ffda <String_a_Mayusculas>:

/************************************************************************
* Funcion que conviertes un string a mayusculas
************************************************************************/

int String_a_Mayusculas (char * chStringPtr, int maxStringSize) {
    ffda:	cf 93       	push	r28
    ffdc:	df 93       	push	r29
    ffde:	00 d0       	rcall	.+0      	; 0xffe0 <String_a_Mayusculas+0x6>
    ffe0:	00 d0       	rcall	.+0      	; 0xffe2 <String_a_Mayusculas+0x8>
    ffe2:	00 d0       	rcall	.+0      	; 0xffe4 <String_a_Mayusculas+0xa>
    ffe4:	cd b7       	in	r28, 0x3d	; 61
    ffe6:	de b7       	in	r29, 0x3e	; 62
    ffe8:	9c 83       	std	Y+4, r25	; 0x04
    ffea:	8b 83       	std	Y+3, r24	; 0x03
    ffec:	7e 83       	std	Y+6, r23	; 0x06
    ffee:	6d 83       	std	Y+5, r22	; 0x05
	int i = 0;
    fff0:	1a 82       	std	Y+2, r1	; 0x02
    fff2:	19 82       	std	Y+1, r1	; 0x01

	while ((*(chStringPtr+i) != '\0') && (i<maxStringSize)) {
    fff4:	46 c0       	rjmp	.+140    	; 0x10082 <String_a_Mayusculas+0xa8>
		if ((*(chStringPtr+i) >= 'a' ) && (*(chStringPtr+i) <= 'z'))
    fff6:	89 81       	ldd	r24, Y+1	; 0x01
    fff8:	9a 81       	ldd	r25, Y+2	; 0x02
    fffa:	2b 81       	ldd	r18, Y+3	; 0x03
    fffc:	3c 81       	ldd	r19, Y+4	; 0x04
    fffe:	82 0f       	add	r24, r18
   10000:	93 1f       	adc	r25, r19
   10002:	fc 01       	movw	r30, r24
   10004:	80 81       	ld	r24, Z
   10006:	81 36       	cpi	r24, 0x61	; 97
   10008:	e0 f0       	brcs	.+56     	; 0x10042 <String_a_Mayusculas+0x68>
   1000a:	89 81       	ldd	r24, Y+1	; 0x01
   1000c:	9a 81       	ldd	r25, Y+2	; 0x02
   1000e:	2b 81       	ldd	r18, Y+3	; 0x03
   10010:	3c 81       	ldd	r19, Y+4	; 0x04
   10012:	82 0f       	add	r24, r18
   10014:	93 1f       	adc	r25, r19
   10016:	fc 01       	movw	r30, r24
   10018:	80 81       	ld	r24, Z
   1001a:	8b 37       	cpi	r24, 0x7B	; 123
   1001c:	90 f4       	brcc	.+36     	; 0x10042 <String_a_Mayusculas+0x68>
			*(chStringPtr+i) -= 32;
   1001e:	89 81       	ldd	r24, Y+1	; 0x01
   10020:	9a 81       	ldd	r25, Y+2	; 0x02
   10022:	2b 81       	ldd	r18, Y+3	; 0x03
   10024:	3c 81       	ldd	r19, Y+4	; 0x04
   10026:	82 0f       	add	r24, r18
   10028:	93 1f       	adc	r25, r19
   1002a:	29 81       	ldd	r18, Y+1	; 0x01
   1002c:	3a 81       	ldd	r19, Y+2	; 0x02
   1002e:	4b 81       	ldd	r20, Y+3	; 0x03
   10030:	5c 81       	ldd	r21, Y+4	; 0x04
   10032:	24 0f       	add	r18, r20
   10034:	35 1f       	adc	r19, r21
   10036:	f9 01       	movw	r30, r18
   10038:	20 81       	ld	r18, Z
   1003a:	20 52       	subi	r18, 0x20	; 32
   1003c:	fc 01       	movw	r30, r24
   1003e:	20 83       	st	Z, r18
   10040:	1b c0       	rjmp	.+54     	; 0x10078 <String_a_Mayusculas+0x9e>
		else if (*(chStringPtr+i) == 164 )	// ñ -> Ñ
   10042:	89 81       	ldd	r24, Y+1	; 0x01
   10044:	9a 81       	ldd	r25, Y+2	; 0x02
   10046:	2b 81       	ldd	r18, Y+3	; 0x03
   10048:	3c 81       	ldd	r19, Y+4	; 0x04
   1004a:	82 0f       	add	r24, r18
   1004c:	93 1f       	adc	r25, r19
   1004e:	fc 01       	movw	r30, r24
   10050:	80 81       	ld	r24, Z
   10052:	84 3a       	cpi	r24, 0xA4	; 164
   10054:	89 f4       	brne	.+34     	; 0x10078 <String_a_Mayusculas+0x9e>
			*(chStringPtr+i) += 1;
   10056:	89 81       	ldd	r24, Y+1	; 0x01
   10058:	9a 81       	ldd	r25, Y+2	; 0x02
   1005a:	2b 81       	ldd	r18, Y+3	; 0x03
   1005c:	3c 81       	ldd	r19, Y+4	; 0x04
   1005e:	82 0f       	add	r24, r18
   10060:	93 1f       	adc	r25, r19
   10062:	29 81       	ldd	r18, Y+1	; 0x01
   10064:	3a 81       	ldd	r19, Y+2	; 0x02
   10066:	4b 81       	ldd	r20, Y+3	; 0x03
   10068:	5c 81       	ldd	r21, Y+4	; 0x04
   1006a:	24 0f       	add	r18, r20
   1006c:	35 1f       	adc	r19, r21
   1006e:	f9 01       	movw	r30, r18
   10070:	20 81       	ld	r18, Z
   10072:	2f 5f       	subi	r18, 0xFF	; 255
   10074:	fc 01       	movw	r30, r24
   10076:	20 83       	st	Z, r18
		i++;
   10078:	89 81       	ldd	r24, Y+1	; 0x01
   1007a:	9a 81       	ldd	r25, Y+2	; 0x02
   1007c:	01 96       	adiw	r24, 0x01	; 1
   1007e:	9a 83       	std	Y+2, r25	; 0x02
   10080:	89 83       	std	Y+1, r24	; 0x01
************************************************************************/

int String_a_Mayusculas (char * chStringPtr, int maxStringSize) {
	int i = 0;

	while ((*(chStringPtr+i) != '\0') && (i<maxStringSize)) {
   10082:	89 81       	ldd	r24, Y+1	; 0x01
   10084:	9a 81       	ldd	r25, Y+2	; 0x02
   10086:	2b 81       	ldd	r18, Y+3	; 0x03
   10088:	3c 81       	ldd	r19, Y+4	; 0x04
   1008a:	82 0f       	add	r24, r18
   1008c:	93 1f       	adc	r25, r19
   1008e:	fc 01       	movw	r30, r24
   10090:	80 81       	ld	r24, Z
   10092:	88 23       	and	r24, r24
   10094:	41 f0       	breq	.+16     	; 0x100a6 <String_a_Mayusculas+0xcc>
   10096:	29 81       	ldd	r18, Y+1	; 0x01
   10098:	3a 81       	ldd	r19, Y+2	; 0x02
   1009a:	8d 81       	ldd	r24, Y+5	; 0x05
   1009c:	9e 81       	ldd	r25, Y+6	; 0x06
   1009e:	28 17       	cp	r18, r24
   100a0:	39 07       	cpc	r19, r25
   100a2:	0c f4       	brge	.+2      	; 0x100a6 <String_a_Mayusculas+0xcc>
   100a4:	a8 cf       	rjmp	.-176    	; 0xfff6 <String_a_Mayusculas+0x1c>
		else if (*(chStringPtr+i) == 164 )	// ñ -> Ñ
			*(chStringPtr+i) += 1;
		i++;
	}

	return i;
   100a6:	89 81       	ldd	r24, Y+1	; 0x01
   100a8:	9a 81       	ldd	r25, Y+2	; 0x02
}
   100aa:	26 96       	adiw	r28, 0x06	; 6
   100ac:	0f b6       	in	r0, 0x3f	; 63
   100ae:	f8 94       	cli
   100b0:	de bf       	out	0x3e, r29	; 62
   100b2:	0f be       	out	0x3f, r0	; 63
   100b4:	cd bf       	out	0x3d, r28	; 61
   100b6:	df 91       	pop	r29
   100b8:	cf 91       	pop	r28
   100ba:	08 95       	ret

000100bc <From_String_to_Float>:

/**************************************************************************
* Funcion que extrae un float de un string en RAM
***************************************************************************/
float From_String_to_Float (char *chBuffer, int maxBufferZise) {
   100bc:	cf 92       	push	r12
   100be:	df 92       	push	r13
   100c0:	ef 92       	push	r14
   100c2:	ff 92       	push	r15
   100c4:	cf 93       	push	r28
   100c6:	df 93       	push	r29
   100c8:	cd b7       	in	r28, 0x3d	; 61
   100ca:	de b7       	in	r29, 0x3e	; 62
   100cc:	2c 97       	sbiw	r28, 0x0c	; 12
   100ce:	0f b6       	in	r0, 0x3f	; 63
   100d0:	f8 94       	cli
   100d2:	de bf       	out	0x3e, r29	; 62
   100d4:	0f be       	out	0x3f, r0	; 63
   100d6:	cd bf       	out	0x3d, r28	; 61
   100d8:	9a 87       	std	Y+10, r25	; 0x0a
   100da:	89 87       	std	Y+9, r24	; 0x09
   100dc:	7c 87       	std	Y+12, r23	; 0x0c
   100de:	6b 87       	std	Y+11, r22	; 0x0b
	float flValor = (float)atoi(chBuffer);
   100e0:	89 85       	ldd	r24, Y+9	; 0x09
   100e2:	9a 85       	ldd	r25, Y+10	; 0x0a
   100e4:	0e 94 1f 84 	call	0x1083e	; 0x1083e <atoi>
   100e8:	09 2e       	mov	r0, r25
   100ea:	00 0c       	add	r0, r0
   100ec:	aa 0b       	sbc	r26, r26
   100ee:	bb 0b       	sbc	r27, r27
   100f0:	bc 01       	movw	r22, r24
   100f2:	cd 01       	movw	r24, r26
   100f4:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
   100f8:	dc 01       	movw	r26, r24
   100fa:	cb 01       	movw	r24, r22
   100fc:	89 83       	std	Y+1, r24	; 0x01
   100fe:	9a 83       	std	Y+2, r25	; 0x02
   10100:	ab 83       	std	Y+3, r26	; 0x03
   10102:	bc 83       	std	Y+4, r27	; 0x04
	int index = 0;
   10104:	1e 82       	std	Y+6, r1	; 0x06
   10106:	1d 82       	std	Y+5, r1	; 0x05
	while ((*(chBuffer+index) != '.') && (*(chBuffer+index) != '\0') && (index<maxBufferZise))
   10108:	05 c0       	rjmp	.+10     	; 0x10114 <From_String_to_Float+0x58>
		index++;
   1010a:	8d 81       	ldd	r24, Y+5	; 0x05
   1010c:	9e 81       	ldd	r25, Y+6	; 0x06
   1010e:	01 96       	adiw	r24, 0x01	; 1
   10110:	9e 83       	std	Y+6, r25	; 0x06
   10112:	8d 83       	std	Y+5, r24	; 0x05
* Funcion que extrae un float de un string en RAM
***************************************************************************/
float From_String_to_Float (char *chBuffer, int maxBufferZise) {
	float flValor = (float)atoi(chBuffer);
	int index = 0;
	while ((*(chBuffer+index) != '.') && (*(chBuffer+index) != '\0') && (index<maxBufferZise))
   10114:	8d 81       	ldd	r24, Y+5	; 0x05
   10116:	9e 81       	ldd	r25, Y+6	; 0x06
   10118:	29 85       	ldd	r18, Y+9	; 0x09
   1011a:	3a 85       	ldd	r19, Y+10	; 0x0a
   1011c:	82 0f       	add	r24, r18
   1011e:	93 1f       	adc	r25, r19
   10120:	fc 01       	movw	r30, r24
   10122:	80 81       	ld	r24, Z
   10124:	8e 32       	cpi	r24, 0x2E	; 46
   10126:	89 f0       	breq	.+34     	; 0x1014a <From_String_to_Float+0x8e>
   10128:	8d 81       	ldd	r24, Y+5	; 0x05
   1012a:	9e 81       	ldd	r25, Y+6	; 0x06
   1012c:	29 85       	ldd	r18, Y+9	; 0x09
   1012e:	3a 85       	ldd	r19, Y+10	; 0x0a
   10130:	82 0f       	add	r24, r18
   10132:	93 1f       	adc	r25, r19
   10134:	fc 01       	movw	r30, r24
   10136:	80 81       	ld	r24, Z
   10138:	88 23       	and	r24, r24
   1013a:	39 f0       	breq	.+14     	; 0x1014a <From_String_to_Float+0x8e>
   1013c:	2d 81       	ldd	r18, Y+5	; 0x05
   1013e:	3e 81       	ldd	r19, Y+6	; 0x06
   10140:	8b 85       	ldd	r24, Y+11	; 0x0b
   10142:	9c 85       	ldd	r25, Y+12	; 0x0c
   10144:	28 17       	cp	r18, r24
   10146:	39 07       	cpc	r19, r25
   10148:	04 f3       	brlt	.-64     	; 0x1010a <From_String_to_Float+0x4e>
		index++;

	if(*(chBuffer+index) == '.') {
   1014a:	8d 81       	ldd	r24, Y+5	; 0x05
   1014c:	9e 81       	ldd	r25, Y+6	; 0x06
   1014e:	29 85       	ldd	r18, Y+9	; 0x09
   10150:	3a 85       	ldd	r19, Y+10	; 0x0a
   10152:	82 0f       	add	r24, r18
   10154:	93 1f       	adc	r25, r19
   10156:	fc 01       	movw	r30, r24
   10158:	80 81       	ld	r24, Z
   1015a:	8e 32       	cpi	r24, 0x2E	; 46
   1015c:	09 f0       	breq	.+2      	; 0x10160 <From_String_to_Float+0xa4>
   1015e:	6f c0       	rjmp	.+222    	; 0x1023e <From_String_to_Float+0x182>
		index++;
   10160:	8d 81       	ldd	r24, Y+5	; 0x05
   10162:	9e 81       	ldd	r25, Y+6	; 0x06
   10164:	01 96       	adiw	r24, 0x01	; 1
   10166:	9e 83       	std	Y+6, r25	; 0x06
   10168:	8d 83       	std	Y+5, r24	; 0x05
		int j=10;
   1016a:	8a e0       	ldi	r24, 0x0A	; 10
   1016c:	90 e0       	ldi	r25, 0x00	; 0
   1016e:	98 87       	std	Y+8, r25	; 0x08
   10170:	8f 83       	std	Y+7, r24	; 0x07
		while ((*(chBuffer+index) >= '0') && (*(chBuffer+index) <= '9') && (index<maxBufferZise)) {
   10172:	49 c0       	rjmp	.+146    	; 0x10206 <From_String_to_Float+0x14a>
			flValor += (float)(*(chBuffer+index) - '0')/j;
   10174:	8d 81       	ldd	r24, Y+5	; 0x05
   10176:	9e 81       	ldd	r25, Y+6	; 0x06
   10178:	29 85       	ldd	r18, Y+9	; 0x09
   1017a:	3a 85       	ldd	r19, Y+10	; 0x0a
   1017c:	82 0f       	add	r24, r18
   1017e:	93 1f       	adc	r25, r19
   10180:	fc 01       	movw	r30, r24
   10182:	80 81       	ld	r24, Z
   10184:	88 2f       	mov	r24, r24
   10186:	90 e0       	ldi	r25, 0x00	; 0
   10188:	c0 97       	sbiw	r24, 0x30	; 48
   1018a:	09 2e       	mov	r0, r25
   1018c:	00 0c       	add	r0, r0
   1018e:	aa 0b       	sbc	r26, r26
   10190:	bb 0b       	sbc	r27, r27
   10192:	bc 01       	movw	r22, r24
   10194:	cd 01       	movw	r24, r26
   10196:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
   1019a:	6b 01       	movw	r12, r22
   1019c:	7c 01       	movw	r14, r24
   1019e:	8f 81       	ldd	r24, Y+7	; 0x07
   101a0:	98 85       	ldd	r25, Y+8	; 0x08
   101a2:	09 2e       	mov	r0, r25
   101a4:	00 0c       	add	r0, r0
   101a6:	aa 0b       	sbc	r26, r26
   101a8:	bb 0b       	sbc	r27, r27
   101aa:	bc 01       	movw	r22, r24
   101ac:	cd 01       	movw	r24, r26
   101ae:	0e 94 90 82 	call	0x10520	; 0x10520 <__floatsisf>
   101b2:	dc 01       	movw	r26, r24
   101b4:	cb 01       	movw	r24, r22
   101b6:	9c 01       	movw	r18, r24
   101b8:	ad 01       	movw	r20, r26
   101ba:	c7 01       	movw	r24, r14
   101bc:	b6 01       	movw	r22, r12
   101be:	0e 94 e6 81 	call	0x103cc	; 0x103cc <__divsf3>
   101c2:	dc 01       	movw	r26, r24
   101c4:	cb 01       	movw	r24, r22
   101c6:	9c 01       	movw	r18, r24
   101c8:	ad 01       	movw	r20, r26
   101ca:	69 81       	ldd	r22, Y+1	; 0x01
   101cc:	7a 81       	ldd	r23, Y+2	; 0x02
   101ce:	8b 81       	ldd	r24, Y+3	; 0x03
   101d0:	9c 81       	ldd	r25, Y+4	; 0x04
   101d2:	0e 94 75 81 	call	0x102ea	; 0x102ea <__addsf3>
   101d6:	dc 01       	movw	r26, r24
   101d8:	cb 01       	movw	r24, r22
   101da:	89 83       	std	Y+1, r24	; 0x01
   101dc:	9a 83       	std	Y+2, r25	; 0x02
   101de:	ab 83       	std	Y+3, r26	; 0x03
   101e0:	bc 83       	std	Y+4, r27	; 0x04
			index++;
   101e2:	8d 81       	ldd	r24, Y+5	; 0x05
   101e4:	9e 81       	ldd	r25, Y+6	; 0x06
   101e6:	01 96       	adiw	r24, 0x01	; 1
   101e8:	9e 83       	std	Y+6, r25	; 0x06
   101ea:	8d 83       	std	Y+5, r24	; 0x05
			j*=10;
   101ec:	8f 81       	ldd	r24, Y+7	; 0x07
   101ee:	98 85       	ldd	r25, Y+8	; 0x08
   101f0:	88 0f       	add	r24, r24
   101f2:	99 1f       	adc	r25, r25
   101f4:	9c 01       	movw	r18, r24
   101f6:	22 0f       	add	r18, r18
   101f8:	33 1f       	adc	r19, r19
   101fa:	22 0f       	add	r18, r18
   101fc:	33 1f       	adc	r19, r19
   101fe:	82 0f       	add	r24, r18
   10200:	93 1f       	adc	r25, r19
   10202:	98 87       	std	Y+8, r25	; 0x08
   10204:	8f 83       	std	Y+7, r24	; 0x07
		index++;

	if(*(chBuffer+index) == '.') {
		index++;
		int j=10;
		while ((*(chBuffer+index) >= '0') && (*(chBuffer+index) <= '9') && (index<maxBufferZise)) {
   10206:	8d 81       	ldd	r24, Y+5	; 0x05
   10208:	9e 81       	ldd	r25, Y+6	; 0x06
   1020a:	29 85       	ldd	r18, Y+9	; 0x09
   1020c:	3a 85       	ldd	r19, Y+10	; 0x0a
   1020e:	82 0f       	add	r24, r18
   10210:	93 1f       	adc	r25, r19
   10212:	fc 01       	movw	r30, r24
   10214:	80 81       	ld	r24, Z
   10216:	80 33       	cpi	r24, 0x30	; 48
   10218:	90 f0       	brcs	.+36     	; 0x1023e <From_String_to_Float+0x182>
   1021a:	8d 81       	ldd	r24, Y+5	; 0x05
   1021c:	9e 81       	ldd	r25, Y+6	; 0x06
   1021e:	29 85       	ldd	r18, Y+9	; 0x09
   10220:	3a 85       	ldd	r19, Y+10	; 0x0a
   10222:	82 0f       	add	r24, r18
   10224:	93 1f       	adc	r25, r19
   10226:	fc 01       	movw	r30, r24
   10228:	80 81       	ld	r24, Z
   1022a:	8a 33       	cpi	r24, 0x3A	; 58
   1022c:	40 f4       	brcc	.+16     	; 0x1023e <From_String_to_Float+0x182>
   1022e:	2d 81       	ldd	r18, Y+5	; 0x05
   10230:	3e 81       	ldd	r19, Y+6	; 0x06
   10232:	8b 85       	ldd	r24, Y+11	; 0x0b
   10234:	9c 85       	ldd	r25, Y+12	; 0x0c
   10236:	28 17       	cp	r18, r24
   10238:	39 07       	cpc	r19, r25
   1023a:	0c f4       	brge	.+2      	; 0x1023e <From_String_to_Float+0x182>
   1023c:	9b cf       	rjmp	.-202    	; 0x10174 <From_String_to_Float+0xb8>
			flValor += (float)(*(chBuffer+index) - '0')/j;
			index++;
			j*=10;
		}
	}
	return flValor;
   1023e:	89 81       	ldd	r24, Y+1	; 0x01
   10240:	9a 81       	ldd	r25, Y+2	; 0x02
   10242:	ab 81       	ldd	r26, Y+3	; 0x03
   10244:	bc 81       	ldd	r27, Y+4	; 0x04
}
   10246:	bc 01       	movw	r22, r24
   10248:	cd 01       	movw	r24, r26
   1024a:	2c 96       	adiw	r28, 0x0c	; 12
   1024c:	0f b6       	in	r0, 0x3f	; 63
   1024e:	f8 94       	cli
   10250:	de bf       	out	0x3e, r29	; 62
   10252:	0f be       	out	0x3f, r0	; 63
   10254:	cd bf       	out	0x3d, r28	; 61
   10256:	df 91       	pop	r29
   10258:	cf 91       	pop	r28
   1025a:	ff 90       	pop	r15
   1025c:	ef 90       	pop	r14
   1025e:	df 90       	pop	r13
   10260:	cf 90       	pop	r12
   10262:	08 95       	ret

00010264 <__divmodhi4>:
   10264:	97 fb       	bst	r25, 7
   10266:	07 2e       	mov	r0, r23
   10268:	16 f4       	brtc	.+4      	; 0x1026e <__divmodhi4+0xa>
   1026a:	00 94       	com	r0
   1026c:	07 d0       	rcall	.+14     	; 0x1027c <__divmodhi4_neg1>
   1026e:	77 fd       	sbrc	r23, 7
   10270:	09 d0       	rcall	.+18     	; 0x10284 <__divmodhi4_neg2>
   10272:	0e 94 51 81 	call	0x102a2	; 0x102a2 <__udivmodhi4>
   10276:	07 fc       	sbrc	r0, 7
   10278:	05 d0       	rcall	.+10     	; 0x10284 <__divmodhi4_neg2>
   1027a:	3e f4       	brtc	.+14     	; 0x1028a <__divmodhi4_exit>

0001027c <__divmodhi4_neg1>:
   1027c:	90 95       	com	r25
   1027e:	81 95       	neg	r24
   10280:	9f 4f       	sbci	r25, 0xFF	; 255
   10282:	08 95       	ret

00010284 <__divmodhi4_neg2>:
   10284:	70 95       	com	r23
   10286:	61 95       	neg	r22
   10288:	7f 4f       	sbci	r23, 0xFF	; 255

0001028a <__divmodhi4_exit>:
   1028a:	08 95       	ret

0001028c <__muluhisi3>:
   1028c:	0e 94 65 81 	call	0x102ca	; 0x102ca <__umulhisi3>
   10290:	a5 9f       	mul	r26, r21
   10292:	90 0d       	add	r25, r0
   10294:	b4 9f       	mul	r27, r20
   10296:	90 0d       	add	r25, r0
   10298:	a4 9f       	mul	r26, r20
   1029a:	80 0d       	add	r24, r0
   1029c:	91 1d       	adc	r25, r1
   1029e:	11 24       	eor	r1, r1
   102a0:	08 95       	ret

000102a2 <__udivmodhi4>:
   102a2:	aa 1b       	sub	r26, r26
   102a4:	bb 1b       	sub	r27, r27
   102a6:	51 e1       	ldi	r21, 0x11	; 17
   102a8:	07 c0       	rjmp	.+14     	; 0x102b8 <__udivmodhi4_ep>

000102aa <__udivmodhi4_loop>:
   102aa:	aa 1f       	adc	r26, r26
   102ac:	bb 1f       	adc	r27, r27
   102ae:	a6 17       	cp	r26, r22
   102b0:	b7 07       	cpc	r27, r23
   102b2:	10 f0       	brcs	.+4      	; 0x102b8 <__udivmodhi4_ep>
   102b4:	a6 1b       	sub	r26, r22
   102b6:	b7 0b       	sbc	r27, r23

000102b8 <__udivmodhi4_ep>:
   102b8:	88 1f       	adc	r24, r24
   102ba:	99 1f       	adc	r25, r25
   102bc:	5a 95       	dec	r21
   102be:	a9 f7       	brne	.-22     	; 0x102aa <__udivmodhi4_loop>
   102c0:	80 95       	com	r24
   102c2:	90 95       	com	r25
   102c4:	bc 01       	movw	r22, r24
   102c6:	cd 01       	movw	r24, r26
   102c8:	08 95       	ret

000102ca <__umulhisi3>:
   102ca:	a2 9f       	mul	r26, r18
   102cc:	b0 01       	movw	r22, r0
   102ce:	b3 9f       	mul	r27, r19
   102d0:	c0 01       	movw	r24, r0
   102d2:	a3 9f       	mul	r26, r19
   102d4:	70 0d       	add	r23, r0
   102d6:	81 1d       	adc	r24, r1
   102d8:	11 24       	eor	r1, r1
   102da:	91 1d       	adc	r25, r1
   102dc:	b2 9f       	mul	r27, r18
   102de:	70 0d       	add	r23, r0
   102e0:	81 1d       	adc	r24, r1
   102e2:	11 24       	eor	r1, r1
   102e4:	91 1d       	adc	r25, r1
   102e6:	08 95       	ret

000102e8 <__subsf3>:
   102e8:	50 58       	subi	r21, 0x80	; 128

000102ea <__addsf3>:
   102ea:	bb 27       	eor	r27, r27
   102ec:	aa 27       	eor	r26, r26
   102ee:	0e 94 8c 81 	call	0x10318	; 0x10318 <__addsf3x>
   102f2:	0c 94 06 83 	jmp	0x1060c	; 0x1060c <__fp_round>
   102f6:	0e 94 f8 82 	call	0x105f0	; 0x105f0 <__fp_pscA>
   102fa:	38 f0       	brcs	.+14     	; 0x1030a <__addsf3+0x20>
   102fc:	0e 94 ff 82 	call	0x105fe	; 0x105fe <__fp_pscB>
   10300:	20 f0       	brcs	.+8      	; 0x1030a <__addsf3+0x20>
   10302:	39 f4       	brne	.+14     	; 0x10312 <__addsf3+0x28>
   10304:	9f 3f       	cpi	r25, 0xFF	; 255
   10306:	19 f4       	brne	.+6      	; 0x1030e <__addsf3+0x24>
   10308:	26 f4       	brtc	.+8      	; 0x10312 <__addsf3+0x28>
   1030a:	0c 94 f5 82 	jmp	0x105ea	; 0x105ea <__fp_nan>
   1030e:	0e f4       	brtc	.+2      	; 0x10312 <__addsf3+0x28>
   10310:	e0 95       	com	r30
   10312:	e7 fb       	bst	r30, 7
   10314:	0c 94 ef 82 	jmp	0x105de	; 0x105de <__fp_inf>

00010318 <__addsf3x>:
   10318:	e9 2f       	mov	r30, r25
   1031a:	0e 94 17 83 	call	0x1062e	; 0x1062e <__fp_split3>
   1031e:	58 f3       	brcs	.-42     	; 0x102f6 <__addsf3+0xc>
   10320:	ba 17       	cp	r27, r26
   10322:	62 07       	cpc	r22, r18
   10324:	73 07       	cpc	r23, r19
   10326:	84 07       	cpc	r24, r20
   10328:	95 07       	cpc	r25, r21
   1032a:	20 f0       	brcs	.+8      	; 0x10334 <__addsf3x+0x1c>
   1032c:	79 f4       	brne	.+30     	; 0x1034c <__addsf3x+0x34>
   1032e:	a6 f5       	brtc	.+104    	; 0x10398 <__addsf3x+0x80>
   10330:	0c 94 39 83 	jmp	0x10672	; 0x10672 <__fp_zero>
   10334:	0e f4       	brtc	.+2      	; 0x10338 <__addsf3x+0x20>
   10336:	e0 95       	com	r30
   10338:	0b 2e       	mov	r0, r27
   1033a:	ba 2f       	mov	r27, r26
   1033c:	a0 2d       	mov	r26, r0
   1033e:	0b 01       	movw	r0, r22
   10340:	b9 01       	movw	r22, r18
   10342:	90 01       	movw	r18, r0
   10344:	0c 01       	movw	r0, r24
   10346:	ca 01       	movw	r24, r20
   10348:	a0 01       	movw	r20, r0
   1034a:	11 24       	eor	r1, r1
   1034c:	ff 27       	eor	r31, r31
   1034e:	59 1b       	sub	r21, r25
   10350:	99 f0       	breq	.+38     	; 0x10378 <__addsf3x+0x60>
   10352:	59 3f       	cpi	r21, 0xF9	; 249
   10354:	50 f4       	brcc	.+20     	; 0x1036a <__addsf3x+0x52>
   10356:	50 3e       	cpi	r21, 0xE0	; 224
   10358:	68 f1       	brcs	.+90     	; 0x103b4 <__addsf3x+0x9c>
   1035a:	1a 16       	cp	r1, r26
   1035c:	f0 40       	sbci	r31, 0x00	; 0
   1035e:	a2 2f       	mov	r26, r18
   10360:	23 2f       	mov	r18, r19
   10362:	34 2f       	mov	r19, r20
   10364:	44 27       	eor	r20, r20
   10366:	58 5f       	subi	r21, 0xF8	; 248
   10368:	f3 cf       	rjmp	.-26     	; 0x10350 <__addsf3x+0x38>
   1036a:	46 95       	lsr	r20
   1036c:	37 95       	ror	r19
   1036e:	27 95       	ror	r18
   10370:	a7 95       	ror	r26
   10372:	f0 40       	sbci	r31, 0x00	; 0
   10374:	53 95       	inc	r21
   10376:	c9 f7       	brne	.-14     	; 0x1036a <__addsf3x+0x52>
   10378:	7e f4       	brtc	.+30     	; 0x10398 <__addsf3x+0x80>
   1037a:	1f 16       	cp	r1, r31
   1037c:	ba 0b       	sbc	r27, r26
   1037e:	62 0b       	sbc	r22, r18
   10380:	73 0b       	sbc	r23, r19
   10382:	84 0b       	sbc	r24, r20
   10384:	ba f0       	brmi	.+46     	; 0x103b4 <__addsf3x+0x9c>
   10386:	91 50       	subi	r25, 0x01	; 1
   10388:	a1 f0       	breq	.+40     	; 0x103b2 <__addsf3x+0x9a>
   1038a:	ff 0f       	add	r31, r31
   1038c:	bb 1f       	adc	r27, r27
   1038e:	66 1f       	adc	r22, r22
   10390:	77 1f       	adc	r23, r23
   10392:	88 1f       	adc	r24, r24
   10394:	c2 f7       	brpl	.-16     	; 0x10386 <__addsf3x+0x6e>
   10396:	0e c0       	rjmp	.+28     	; 0x103b4 <__addsf3x+0x9c>
   10398:	ba 0f       	add	r27, r26
   1039a:	62 1f       	adc	r22, r18
   1039c:	73 1f       	adc	r23, r19
   1039e:	84 1f       	adc	r24, r20
   103a0:	48 f4       	brcc	.+18     	; 0x103b4 <__addsf3x+0x9c>
   103a2:	87 95       	ror	r24
   103a4:	77 95       	ror	r23
   103a6:	67 95       	ror	r22
   103a8:	b7 95       	ror	r27
   103aa:	f7 95       	ror	r31
   103ac:	9e 3f       	cpi	r25, 0xFE	; 254
   103ae:	08 f0       	brcs	.+2      	; 0x103b2 <__addsf3x+0x9a>
   103b0:	b0 cf       	rjmp	.-160    	; 0x10312 <__addsf3+0x28>
   103b2:	93 95       	inc	r25
   103b4:	88 0f       	add	r24, r24
   103b6:	08 f0       	brcs	.+2      	; 0x103ba <__addsf3x+0xa2>
   103b8:	99 27       	eor	r25, r25
   103ba:	ee 0f       	add	r30, r30
   103bc:	97 95       	ror	r25
   103be:	87 95       	ror	r24
   103c0:	08 95       	ret

000103c2 <__cmpsf2>:
   103c2:	0e 94 cb 82 	call	0x10596	; 0x10596 <__fp_cmp>
   103c6:	08 f4       	brcc	.+2      	; 0x103ca <__cmpsf2+0x8>
   103c8:	81 e0       	ldi	r24, 0x01	; 1
   103ca:	08 95       	ret

000103cc <__divsf3>:
   103cc:	0e 94 fa 81 	call	0x103f4	; 0x103f4 <__divsf3x>
   103d0:	0c 94 06 83 	jmp	0x1060c	; 0x1060c <__fp_round>
   103d4:	0e 94 ff 82 	call	0x105fe	; 0x105fe <__fp_pscB>
   103d8:	58 f0       	brcs	.+22     	; 0x103f0 <__divsf3+0x24>
   103da:	0e 94 f8 82 	call	0x105f0	; 0x105f0 <__fp_pscA>
   103de:	40 f0       	brcs	.+16     	; 0x103f0 <__divsf3+0x24>
   103e0:	29 f4       	brne	.+10     	; 0x103ec <__divsf3+0x20>
   103e2:	5f 3f       	cpi	r21, 0xFF	; 255
   103e4:	29 f0       	breq	.+10     	; 0x103f0 <__divsf3+0x24>
   103e6:	0c 94 ef 82 	jmp	0x105de	; 0x105de <__fp_inf>
   103ea:	51 11       	cpse	r21, r1
   103ec:	0c 94 3a 83 	jmp	0x10674	; 0x10674 <__fp_szero>
   103f0:	0c 94 f5 82 	jmp	0x105ea	; 0x105ea <__fp_nan>

000103f4 <__divsf3x>:
   103f4:	0e 94 17 83 	call	0x1062e	; 0x1062e <__fp_split3>
   103f8:	68 f3       	brcs	.-38     	; 0x103d4 <__divsf3+0x8>

000103fa <__divsf3_pse>:
   103fa:	99 23       	and	r25, r25
   103fc:	b1 f3       	breq	.-20     	; 0x103ea <__divsf3+0x1e>
   103fe:	55 23       	and	r21, r21
   10400:	91 f3       	breq	.-28     	; 0x103e6 <__divsf3+0x1a>
   10402:	95 1b       	sub	r25, r21
   10404:	55 0b       	sbc	r21, r21
   10406:	bb 27       	eor	r27, r27
   10408:	aa 27       	eor	r26, r26
   1040a:	62 17       	cp	r22, r18
   1040c:	73 07       	cpc	r23, r19
   1040e:	84 07       	cpc	r24, r20
   10410:	38 f0       	brcs	.+14     	; 0x10420 <__divsf3_pse+0x26>
   10412:	9f 5f       	subi	r25, 0xFF	; 255
   10414:	5f 4f       	sbci	r21, 0xFF	; 255
   10416:	22 0f       	add	r18, r18
   10418:	33 1f       	adc	r19, r19
   1041a:	44 1f       	adc	r20, r20
   1041c:	aa 1f       	adc	r26, r26
   1041e:	a9 f3       	breq	.-22     	; 0x1040a <__divsf3_pse+0x10>
   10420:	35 d0       	rcall	.+106    	; 0x1048c <__divsf3_pse+0x92>
   10422:	0e 2e       	mov	r0, r30
   10424:	3a f0       	brmi	.+14     	; 0x10434 <__divsf3_pse+0x3a>
   10426:	e0 e8       	ldi	r30, 0x80	; 128
   10428:	32 d0       	rcall	.+100    	; 0x1048e <__divsf3_pse+0x94>
   1042a:	91 50       	subi	r25, 0x01	; 1
   1042c:	50 40       	sbci	r21, 0x00	; 0
   1042e:	e6 95       	lsr	r30
   10430:	00 1c       	adc	r0, r0
   10432:	ca f7       	brpl	.-14     	; 0x10426 <__divsf3_pse+0x2c>
   10434:	2b d0       	rcall	.+86     	; 0x1048c <__divsf3_pse+0x92>
   10436:	fe 2f       	mov	r31, r30
   10438:	29 d0       	rcall	.+82     	; 0x1048c <__divsf3_pse+0x92>
   1043a:	66 0f       	add	r22, r22
   1043c:	77 1f       	adc	r23, r23
   1043e:	88 1f       	adc	r24, r24
   10440:	bb 1f       	adc	r27, r27
   10442:	26 17       	cp	r18, r22
   10444:	37 07       	cpc	r19, r23
   10446:	48 07       	cpc	r20, r24
   10448:	ab 07       	cpc	r26, r27
   1044a:	b0 e8       	ldi	r27, 0x80	; 128
   1044c:	09 f0       	breq	.+2      	; 0x10450 <__divsf3_pse+0x56>
   1044e:	bb 0b       	sbc	r27, r27
   10450:	80 2d       	mov	r24, r0
   10452:	bf 01       	movw	r22, r30
   10454:	ff 27       	eor	r31, r31
   10456:	93 58       	subi	r25, 0x83	; 131
   10458:	5f 4f       	sbci	r21, 0xFF	; 255
   1045a:	3a f0       	brmi	.+14     	; 0x1046a <__divsf3_pse+0x70>
   1045c:	9e 3f       	cpi	r25, 0xFE	; 254
   1045e:	51 05       	cpc	r21, r1
   10460:	78 f0       	brcs	.+30     	; 0x10480 <__divsf3_pse+0x86>
   10462:	0c 94 ef 82 	jmp	0x105de	; 0x105de <__fp_inf>
   10466:	0c 94 3a 83 	jmp	0x10674	; 0x10674 <__fp_szero>
   1046a:	5f 3f       	cpi	r21, 0xFF	; 255
   1046c:	e4 f3       	brlt	.-8      	; 0x10466 <__divsf3_pse+0x6c>
   1046e:	98 3e       	cpi	r25, 0xE8	; 232
   10470:	d4 f3       	brlt	.-12     	; 0x10466 <__divsf3_pse+0x6c>
   10472:	86 95       	lsr	r24
   10474:	77 95       	ror	r23
   10476:	67 95       	ror	r22
   10478:	b7 95       	ror	r27
   1047a:	f7 95       	ror	r31
   1047c:	9f 5f       	subi	r25, 0xFF	; 255
   1047e:	c9 f7       	brne	.-14     	; 0x10472 <__divsf3_pse+0x78>
   10480:	88 0f       	add	r24, r24
   10482:	91 1d       	adc	r25, r1
   10484:	96 95       	lsr	r25
   10486:	87 95       	ror	r24
   10488:	97 f9       	bld	r25, 7
   1048a:	08 95       	ret
   1048c:	e1 e0       	ldi	r30, 0x01	; 1
   1048e:	66 0f       	add	r22, r22
   10490:	77 1f       	adc	r23, r23
   10492:	88 1f       	adc	r24, r24
   10494:	bb 1f       	adc	r27, r27
   10496:	62 17       	cp	r22, r18
   10498:	73 07       	cpc	r23, r19
   1049a:	84 07       	cpc	r24, r20
   1049c:	ba 07       	cpc	r27, r26
   1049e:	20 f0       	brcs	.+8      	; 0x104a8 <__divsf3_pse+0xae>
   104a0:	62 1b       	sub	r22, r18
   104a2:	73 0b       	sbc	r23, r19
   104a4:	84 0b       	sbc	r24, r20
   104a6:	ba 0b       	sbc	r27, r26
   104a8:	ee 1f       	adc	r30, r30
   104aa:	88 f7       	brcc	.-30     	; 0x1048e <__divsf3_pse+0x94>
   104ac:	e0 95       	com	r30
   104ae:	08 95       	ret

000104b0 <__fixsfsi>:
   104b0:	0e 94 5f 82 	call	0x104be	; 0x104be <__fixunssfsi>
   104b4:	68 94       	set
   104b6:	b1 11       	cpse	r27, r1
   104b8:	0c 94 3a 83 	jmp	0x10674	; 0x10674 <__fp_szero>
   104bc:	08 95       	ret

000104be <__fixunssfsi>:
   104be:	0e 94 1f 83 	call	0x1063e	; 0x1063e <__fp_splitA>
   104c2:	88 f0       	brcs	.+34     	; 0x104e6 <__fixunssfsi+0x28>
   104c4:	9f 57       	subi	r25, 0x7F	; 127
   104c6:	98 f0       	brcs	.+38     	; 0x104ee <__fixunssfsi+0x30>
   104c8:	b9 2f       	mov	r27, r25
   104ca:	99 27       	eor	r25, r25
   104cc:	b7 51       	subi	r27, 0x17	; 23
   104ce:	b0 f0       	brcs	.+44     	; 0x104fc <__fixunssfsi+0x3e>
   104d0:	e1 f0       	breq	.+56     	; 0x1050a <__fixunssfsi+0x4c>
   104d2:	66 0f       	add	r22, r22
   104d4:	77 1f       	adc	r23, r23
   104d6:	88 1f       	adc	r24, r24
   104d8:	99 1f       	adc	r25, r25
   104da:	1a f0       	brmi	.+6      	; 0x104e2 <__fixunssfsi+0x24>
   104dc:	ba 95       	dec	r27
   104de:	c9 f7       	brne	.-14     	; 0x104d2 <__fixunssfsi+0x14>
   104e0:	14 c0       	rjmp	.+40     	; 0x1050a <__fixunssfsi+0x4c>
   104e2:	b1 30       	cpi	r27, 0x01	; 1
   104e4:	91 f0       	breq	.+36     	; 0x1050a <__fixunssfsi+0x4c>
   104e6:	0e 94 39 83 	call	0x10672	; 0x10672 <__fp_zero>
   104ea:	b1 e0       	ldi	r27, 0x01	; 1
   104ec:	08 95       	ret
   104ee:	0c 94 39 83 	jmp	0x10672	; 0x10672 <__fp_zero>
   104f2:	67 2f       	mov	r22, r23
   104f4:	78 2f       	mov	r23, r24
   104f6:	88 27       	eor	r24, r24
   104f8:	b8 5f       	subi	r27, 0xF8	; 248
   104fa:	39 f0       	breq	.+14     	; 0x1050a <__fixunssfsi+0x4c>
   104fc:	b9 3f       	cpi	r27, 0xF9	; 249
   104fe:	cc f3       	brlt	.-14     	; 0x104f2 <__fixunssfsi+0x34>
   10500:	86 95       	lsr	r24
   10502:	77 95       	ror	r23
   10504:	67 95       	ror	r22
   10506:	b3 95       	inc	r27
   10508:	d9 f7       	brne	.-10     	; 0x10500 <__fixunssfsi+0x42>
   1050a:	3e f4       	brtc	.+14     	; 0x1051a <__fixunssfsi+0x5c>
   1050c:	90 95       	com	r25
   1050e:	80 95       	com	r24
   10510:	70 95       	com	r23
   10512:	61 95       	neg	r22
   10514:	7f 4f       	sbci	r23, 0xFF	; 255
   10516:	8f 4f       	sbci	r24, 0xFF	; 255
   10518:	9f 4f       	sbci	r25, 0xFF	; 255
   1051a:	08 95       	ret

0001051c <__floatunsisf>:
   1051c:	e8 94       	clt
   1051e:	09 c0       	rjmp	.+18     	; 0x10532 <__floatsisf+0x12>

00010520 <__floatsisf>:
   10520:	97 fb       	bst	r25, 7
   10522:	3e f4       	brtc	.+14     	; 0x10532 <__floatsisf+0x12>
   10524:	90 95       	com	r25
   10526:	80 95       	com	r24
   10528:	70 95       	com	r23
   1052a:	61 95       	neg	r22
   1052c:	7f 4f       	sbci	r23, 0xFF	; 255
   1052e:	8f 4f       	sbci	r24, 0xFF	; 255
   10530:	9f 4f       	sbci	r25, 0xFF	; 255
   10532:	99 23       	and	r25, r25
   10534:	a9 f0       	breq	.+42     	; 0x10560 <__floatsisf+0x40>
   10536:	f9 2f       	mov	r31, r25
   10538:	96 e9       	ldi	r25, 0x96	; 150
   1053a:	bb 27       	eor	r27, r27
   1053c:	93 95       	inc	r25
   1053e:	f6 95       	lsr	r31
   10540:	87 95       	ror	r24
   10542:	77 95       	ror	r23
   10544:	67 95       	ror	r22
   10546:	b7 95       	ror	r27
   10548:	f1 11       	cpse	r31, r1
   1054a:	f8 cf       	rjmp	.-16     	; 0x1053c <__floatsisf+0x1c>
   1054c:	fa f4       	brpl	.+62     	; 0x1058c <__floatsisf+0x6c>
   1054e:	bb 0f       	add	r27, r27
   10550:	11 f4       	brne	.+4      	; 0x10556 <__floatsisf+0x36>
   10552:	60 ff       	sbrs	r22, 0
   10554:	1b c0       	rjmp	.+54     	; 0x1058c <__floatsisf+0x6c>
   10556:	6f 5f       	subi	r22, 0xFF	; 255
   10558:	7f 4f       	sbci	r23, 0xFF	; 255
   1055a:	8f 4f       	sbci	r24, 0xFF	; 255
   1055c:	9f 4f       	sbci	r25, 0xFF	; 255
   1055e:	16 c0       	rjmp	.+44     	; 0x1058c <__floatsisf+0x6c>
   10560:	88 23       	and	r24, r24
   10562:	11 f0       	breq	.+4      	; 0x10568 <__floatsisf+0x48>
   10564:	96 e9       	ldi	r25, 0x96	; 150
   10566:	11 c0       	rjmp	.+34     	; 0x1058a <__floatsisf+0x6a>
   10568:	77 23       	and	r23, r23
   1056a:	21 f0       	breq	.+8      	; 0x10574 <__floatsisf+0x54>
   1056c:	9e e8       	ldi	r25, 0x8E	; 142
   1056e:	87 2f       	mov	r24, r23
   10570:	76 2f       	mov	r23, r22
   10572:	05 c0       	rjmp	.+10     	; 0x1057e <__floatsisf+0x5e>
   10574:	66 23       	and	r22, r22
   10576:	71 f0       	breq	.+28     	; 0x10594 <__floatsisf+0x74>
   10578:	96 e8       	ldi	r25, 0x86	; 134
   1057a:	86 2f       	mov	r24, r22
   1057c:	70 e0       	ldi	r23, 0x00	; 0
   1057e:	60 e0       	ldi	r22, 0x00	; 0
   10580:	2a f0       	brmi	.+10     	; 0x1058c <__floatsisf+0x6c>
   10582:	9a 95       	dec	r25
   10584:	66 0f       	add	r22, r22
   10586:	77 1f       	adc	r23, r23
   10588:	88 1f       	adc	r24, r24
   1058a:	da f7       	brpl	.-10     	; 0x10582 <__floatsisf+0x62>
   1058c:	88 0f       	add	r24, r24
   1058e:	96 95       	lsr	r25
   10590:	87 95       	ror	r24
   10592:	97 f9       	bld	r25, 7
   10594:	08 95       	ret

00010596 <__fp_cmp>:
   10596:	99 0f       	add	r25, r25
   10598:	00 08       	sbc	r0, r0
   1059a:	55 0f       	add	r21, r21
   1059c:	aa 0b       	sbc	r26, r26
   1059e:	e0 e8       	ldi	r30, 0x80	; 128
   105a0:	fe ef       	ldi	r31, 0xFE	; 254
   105a2:	16 16       	cp	r1, r22
   105a4:	17 06       	cpc	r1, r23
   105a6:	e8 07       	cpc	r30, r24
   105a8:	f9 07       	cpc	r31, r25
   105aa:	c0 f0       	brcs	.+48     	; 0x105dc <__fp_cmp+0x46>
   105ac:	12 16       	cp	r1, r18
   105ae:	13 06       	cpc	r1, r19
   105b0:	e4 07       	cpc	r30, r20
   105b2:	f5 07       	cpc	r31, r21
   105b4:	98 f0       	brcs	.+38     	; 0x105dc <__fp_cmp+0x46>
   105b6:	62 1b       	sub	r22, r18
   105b8:	73 0b       	sbc	r23, r19
   105ba:	84 0b       	sbc	r24, r20
   105bc:	95 0b       	sbc	r25, r21
   105be:	39 f4       	brne	.+14     	; 0x105ce <__fp_cmp+0x38>
   105c0:	0a 26       	eor	r0, r26
   105c2:	61 f0       	breq	.+24     	; 0x105dc <__fp_cmp+0x46>
   105c4:	23 2b       	or	r18, r19
   105c6:	24 2b       	or	r18, r20
   105c8:	25 2b       	or	r18, r21
   105ca:	21 f4       	brne	.+8      	; 0x105d4 <__fp_cmp+0x3e>
   105cc:	08 95       	ret
   105ce:	0a 26       	eor	r0, r26
   105d0:	09 f4       	brne	.+2      	; 0x105d4 <__fp_cmp+0x3e>
   105d2:	a1 40       	sbci	r26, 0x01	; 1
   105d4:	a6 95       	lsr	r26
   105d6:	8f ef       	ldi	r24, 0xFF	; 255
   105d8:	81 1d       	adc	r24, r1
   105da:	81 1d       	adc	r24, r1
   105dc:	08 95       	ret

000105de <__fp_inf>:
   105de:	97 f9       	bld	r25, 7
   105e0:	9f 67       	ori	r25, 0x7F	; 127
   105e2:	80 e8       	ldi	r24, 0x80	; 128
   105e4:	70 e0       	ldi	r23, 0x00	; 0
   105e6:	60 e0       	ldi	r22, 0x00	; 0
   105e8:	08 95       	ret

000105ea <__fp_nan>:
   105ea:	9f ef       	ldi	r25, 0xFF	; 255
   105ec:	80 ec       	ldi	r24, 0xC0	; 192
   105ee:	08 95       	ret

000105f0 <__fp_pscA>:
   105f0:	00 24       	eor	r0, r0
   105f2:	0a 94       	dec	r0
   105f4:	16 16       	cp	r1, r22
   105f6:	17 06       	cpc	r1, r23
   105f8:	18 06       	cpc	r1, r24
   105fa:	09 06       	cpc	r0, r25
   105fc:	08 95       	ret

000105fe <__fp_pscB>:
   105fe:	00 24       	eor	r0, r0
   10600:	0a 94       	dec	r0
   10602:	12 16       	cp	r1, r18
   10604:	13 06       	cpc	r1, r19
   10606:	14 06       	cpc	r1, r20
   10608:	05 06       	cpc	r0, r21
   1060a:	08 95       	ret

0001060c <__fp_round>:
   1060c:	09 2e       	mov	r0, r25
   1060e:	03 94       	inc	r0
   10610:	00 0c       	add	r0, r0
   10612:	11 f4       	brne	.+4      	; 0x10618 <__fp_round+0xc>
   10614:	88 23       	and	r24, r24
   10616:	52 f0       	brmi	.+20     	; 0x1062c <__fp_round+0x20>
   10618:	bb 0f       	add	r27, r27
   1061a:	40 f4       	brcc	.+16     	; 0x1062c <__fp_round+0x20>
   1061c:	bf 2b       	or	r27, r31
   1061e:	11 f4       	brne	.+4      	; 0x10624 <__fp_round+0x18>
   10620:	60 ff       	sbrs	r22, 0
   10622:	04 c0       	rjmp	.+8      	; 0x1062c <__fp_round+0x20>
   10624:	6f 5f       	subi	r22, 0xFF	; 255
   10626:	7f 4f       	sbci	r23, 0xFF	; 255
   10628:	8f 4f       	sbci	r24, 0xFF	; 255
   1062a:	9f 4f       	sbci	r25, 0xFF	; 255
   1062c:	08 95       	ret

0001062e <__fp_split3>:
   1062e:	57 fd       	sbrc	r21, 7
   10630:	90 58       	subi	r25, 0x80	; 128
   10632:	44 0f       	add	r20, r20
   10634:	55 1f       	adc	r21, r21
   10636:	59 f0       	breq	.+22     	; 0x1064e <__fp_splitA+0x10>
   10638:	5f 3f       	cpi	r21, 0xFF	; 255
   1063a:	71 f0       	breq	.+28     	; 0x10658 <__fp_splitA+0x1a>
   1063c:	47 95       	ror	r20

0001063e <__fp_splitA>:
   1063e:	88 0f       	add	r24, r24
   10640:	97 fb       	bst	r25, 7
   10642:	99 1f       	adc	r25, r25
   10644:	61 f0       	breq	.+24     	; 0x1065e <__fp_splitA+0x20>
   10646:	9f 3f       	cpi	r25, 0xFF	; 255
   10648:	79 f0       	breq	.+30     	; 0x10668 <__fp_splitA+0x2a>
   1064a:	87 95       	ror	r24
   1064c:	08 95       	ret
   1064e:	12 16       	cp	r1, r18
   10650:	13 06       	cpc	r1, r19
   10652:	14 06       	cpc	r1, r20
   10654:	55 1f       	adc	r21, r21
   10656:	f2 cf       	rjmp	.-28     	; 0x1063c <__fp_split3+0xe>
   10658:	46 95       	lsr	r20
   1065a:	f1 df       	rcall	.-30     	; 0x1063e <__fp_splitA>
   1065c:	08 c0       	rjmp	.+16     	; 0x1066e <__fp_splitA+0x30>
   1065e:	16 16       	cp	r1, r22
   10660:	17 06       	cpc	r1, r23
   10662:	18 06       	cpc	r1, r24
   10664:	99 1f       	adc	r25, r25
   10666:	f1 cf       	rjmp	.-30     	; 0x1064a <__fp_splitA+0xc>
   10668:	86 95       	lsr	r24
   1066a:	71 05       	cpc	r23, r1
   1066c:	61 05       	cpc	r22, r1
   1066e:	08 94       	sec
   10670:	08 95       	ret

00010672 <__fp_zero>:
   10672:	e8 94       	clt

00010674 <__fp_szero>:
   10674:	bb 27       	eor	r27, r27
   10676:	66 27       	eor	r22, r22
   10678:	77 27       	eor	r23, r23
   1067a:	cb 01       	movw	r24, r22
   1067c:	97 f9       	bld	r25, 7
   1067e:	08 95       	ret

00010680 <__gesf2>:
   10680:	0e 94 cb 82 	call	0x10596	; 0x10596 <__fp_cmp>
   10684:	08 f4       	brcc	.+2      	; 0x10688 <__gesf2+0x8>
   10686:	8f ef       	ldi	r24, 0xFF	; 255
   10688:	08 95       	ret

0001068a <__mulsf3>:
   1068a:	0e 94 58 83 	call	0x106b0	; 0x106b0 <__mulsf3x>
   1068e:	0c 94 06 83 	jmp	0x1060c	; 0x1060c <__fp_round>
   10692:	0e 94 f8 82 	call	0x105f0	; 0x105f0 <__fp_pscA>
   10696:	38 f0       	brcs	.+14     	; 0x106a6 <__mulsf3+0x1c>
   10698:	0e 94 ff 82 	call	0x105fe	; 0x105fe <__fp_pscB>
   1069c:	20 f0       	brcs	.+8      	; 0x106a6 <__mulsf3+0x1c>
   1069e:	95 23       	and	r25, r21
   106a0:	11 f0       	breq	.+4      	; 0x106a6 <__mulsf3+0x1c>
   106a2:	0c 94 ef 82 	jmp	0x105de	; 0x105de <__fp_inf>
   106a6:	0c 94 f5 82 	jmp	0x105ea	; 0x105ea <__fp_nan>
   106aa:	11 24       	eor	r1, r1
   106ac:	0c 94 3a 83 	jmp	0x10674	; 0x10674 <__fp_szero>

000106b0 <__mulsf3x>:
   106b0:	0e 94 17 83 	call	0x1062e	; 0x1062e <__fp_split3>
   106b4:	70 f3       	brcs	.-36     	; 0x10692 <__mulsf3+0x8>

000106b6 <__mulsf3_pse>:
   106b6:	95 9f       	mul	r25, r21
   106b8:	c1 f3       	breq	.-16     	; 0x106aa <__mulsf3+0x20>
   106ba:	95 0f       	add	r25, r21
   106bc:	50 e0       	ldi	r21, 0x00	; 0
   106be:	55 1f       	adc	r21, r21
   106c0:	62 9f       	mul	r22, r18
   106c2:	f0 01       	movw	r30, r0
   106c4:	72 9f       	mul	r23, r18
   106c6:	bb 27       	eor	r27, r27
   106c8:	f0 0d       	add	r31, r0
   106ca:	b1 1d       	adc	r27, r1
   106cc:	63 9f       	mul	r22, r19
   106ce:	aa 27       	eor	r26, r26
   106d0:	f0 0d       	add	r31, r0
   106d2:	b1 1d       	adc	r27, r1
   106d4:	aa 1f       	adc	r26, r26
   106d6:	64 9f       	mul	r22, r20
   106d8:	66 27       	eor	r22, r22
   106da:	b0 0d       	add	r27, r0
   106dc:	a1 1d       	adc	r26, r1
   106de:	66 1f       	adc	r22, r22
   106e0:	82 9f       	mul	r24, r18
   106e2:	22 27       	eor	r18, r18
   106e4:	b0 0d       	add	r27, r0
   106e6:	a1 1d       	adc	r26, r1
   106e8:	62 1f       	adc	r22, r18
   106ea:	73 9f       	mul	r23, r19
   106ec:	b0 0d       	add	r27, r0
   106ee:	a1 1d       	adc	r26, r1
   106f0:	62 1f       	adc	r22, r18
   106f2:	83 9f       	mul	r24, r19
   106f4:	a0 0d       	add	r26, r0
   106f6:	61 1d       	adc	r22, r1
   106f8:	22 1f       	adc	r18, r18
   106fa:	74 9f       	mul	r23, r20
   106fc:	33 27       	eor	r19, r19
   106fe:	a0 0d       	add	r26, r0
   10700:	61 1d       	adc	r22, r1
   10702:	23 1f       	adc	r18, r19
   10704:	84 9f       	mul	r24, r20
   10706:	60 0d       	add	r22, r0
   10708:	21 1d       	adc	r18, r1
   1070a:	82 2f       	mov	r24, r18
   1070c:	76 2f       	mov	r23, r22
   1070e:	6a 2f       	mov	r22, r26
   10710:	11 24       	eor	r1, r1
   10712:	9f 57       	subi	r25, 0x7F	; 127
   10714:	50 40       	sbci	r21, 0x00	; 0
   10716:	9a f0       	brmi	.+38     	; 0x1073e <__mulsf3_pse+0x88>
   10718:	f1 f0       	breq	.+60     	; 0x10756 <__mulsf3_pse+0xa0>
   1071a:	88 23       	and	r24, r24
   1071c:	4a f0       	brmi	.+18     	; 0x10730 <__mulsf3_pse+0x7a>
   1071e:	ee 0f       	add	r30, r30
   10720:	ff 1f       	adc	r31, r31
   10722:	bb 1f       	adc	r27, r27
   10724:	66 1f       	adc	r22, r22
   10726:	77 1f       	adc	r23, r23
   10728:	88 1f       	adc	r24, r24
   1072a:	91 50       	subi	r25, 0x01	; 1
   1072c:	50 40       	sbci	r21, 0x00	; 0
   1072e:	a9 f7       	brne	.-22     	; 0x1071a <__mulsf3_pse+0x64>
   10730:	9e 3f       	cpi	r25, 0xFE	; 254
   10732:	51 05       	cpc	r21, r1
   10734:	80 f0       	brcs	.+32     	; 0x10756 <__mulsf3_pse+0xa0>
   10736:	0c 94 ef 82 	jmp	0x105de	; 0x105de <__fp_inf>
   1073a:	0c 94 3a 83 	jmp	0x10674	; 0x10674 <__fp_szero>
   1073e:	5f 3f       	cpi	r21, 0xFF	; 255
   10740:	e4 f3       	brlt	.-8      	; 0x1073a <__mulsf3_pse+0x84>
   10742:	98 3e       	cpi	r25, 0xE8	; 232
   10744:	d4 f3       	brlt	.-12     	; 0x1073a <__mulsf3_pse+0x84>
   10746:	86 95       	lsr	r24
   10748:	77 95       	ror	r23
   1074a:	67 95       	ror	r22
   1074c:	b7 95       	ror	r27
   1074e:	f7 95       	ror	r31
   10750:	e7 95       	ror	r30
   10752:	9f 5f       	subi	r25, 0xFF	; 255
   10754:	c1 f7       	brne	.-16     	; 0x10746 <__mulsf3_pse+0x90>
   10756:	fe 2b       	or	r31, r30
   10758:	88 0f       	add	r24, r24
   1075a:	91 1d       	adc	r25, r1
   1075c:	96 95       	lsr	r25
   1075e:	87 95       	ror	r24
   10760:	97 f9       	bld	r25, 7
   10762:	08 95       	ret

00010764 <round>:
   10764:	0e 94 1f 83 	call	0x1063e	; 0x1063e <__fp_splitA>
   10768:	e8 f0       	brcs	.+58     	; 0x107a4 <round+0x40>
   1076a:	9e 37       	cpi	r25, 0x7E	; 126
   1076c:	e8 f0       	brcs	.+58     	; 0x107a8 <round+0x44>
   1076e:	96 39       	cpi	r25, 0x96	; 150
   10770:	b8 f4       	brcc	.+46     	; 0x107a0 <round+0x3c>
   10772:	9e 38       	cpi	r25, 0x8E	; 142
   10774:	48 f4       	brcc	.+18     	; 0x10788 <round+0x24>
   10776:	67 2f       	mov	r22, r23
   10778:	78 2f       	mov	r23, r24
   1077a:	88 27       	eor	r24, r24
   1077c:	98 5f       	subi	r25, 0xF8	; 248
   1077e:	f9 cf       	rjmp	.-14     	; 0x10772 <round+0xe>
   10780:	86 95       	lsr	r24
   10782:	77 95       	ror	r23
   10784:	67 95       	ror	r22
   10786:	93 95       	inc	r25
   10788:	95 39       	cpi	r25, 0x95	; 149
   1078a:	d0 f3       	brcs	.-12     	; 0x10780 <round+0x1c>
   1078c:	b6 2f       	mov	r27, r22
   1078e:	b1 70       	andi	r27, 0x01	; 1
   10790:	6b 0f       	add	r22, r27
   10792:	71 1d       	adc	r23, r1
   10794:	81 1d       	adc	r24, r1
   10796:	20 f4       	brcc	.+8      	; 0x107a0 <round+0x3c>
   10798:	87 95       	ror	r24
   1079a:	77 95       	ror	r23
   1079c:	67 95       	ror	r22
   1079e:	93 95       	inc	r25
   107a0:	0c 94 d6 83 	jmp	0x107ac	; 0x107ac <__fp_mintl>
   107a4:	0c 94 f1 83 	jmp	0x107e2	; 0x107e2 <__fp_mpack>
   107a8:	0c 94 3a 83 	jmp	0x10674	; 0x10674 <__fp_szero>

000107ac <__fp_mintl>:
   107ac:	88 23       	and	r24, r24
   107ae:	71 f4       	brne	.+28     	; 0x107cc <__fp_mintl+0x20>
   107b0:	77 23       	and	r23, r23
   107b2:	21 f0       	breq	.+8      	; 0x107bc <__fp_mintl+0x10>
   107b4:	98 50       	subi	r25, 0x08	; 8
   107b6:	87 2b       	or	r24, r23
   107b8:	76 2f       	mov	r23, r22
   107ba:	07 c0       	rjmp	.+14     	; 0x107ca <__fp_mintl+0x1e>
   107bc:	66 23       	and	r22, r22
   107be:	11 f4       	brne	.+4      	; 0x107c4 <__fp_mintl+0x18>
   107c0:	99 27       	eor	r25, r25
   107c2:	0d c0       	rjmp	.+26     	; 0x107de <__fp_mintl+0x32>
   107c4:	90 51       	subi	r25, 0x10	; 16
   107c6:	86 2b       	or	r24, r22
   107c8:	70 e0       	ldi	r23, 0x00	; 0
   107ca:	60 e0       	ldi	r22, 0x00	; 0
   107cc:	2a f0       	brmi	.+10     	; 0x107d8 <__fp_mintl+0x2c>
   107ce:	9a 95       	dec	r25
   107d0:	66 0f       	add	r22, r22
   107d2:	77 1f       	adc	r23, r23
   107d4:	88 1f       	adc	r24, r24
   107d6:	da f7       	brpl	.-10     	; 0x107ce <__fp_mintl+0x22>
   107d8:	88 0f       	add	r24, r24
   107da:	96 95       	lsr	r25
   107dc:	87 95       	ror	r24
   107de:	97 f9       	bld	r25, 7
   107e0:	08 95       	ret

000107e2 <__fp_mpack>:
   107e2:	9f 3f       	cpi	r25, 0xFF	; 255
   107e4:	31 f0       	breq	.+12     	; 0x107f2 <__fp_mpack_finite+0xc>

000107e6 <__fp_mpack_finite>:
   107e6:	91 50       	subi	r25, 0x01	; 1
   107e8:	20 f4       	brcc	.+8      	; 0x107f2 <__fp_mpack_finite+0xc>
   107ea:	87 95       	ror	r24
   107ec:	77 95       	ror	r23
   107ee:	67 95       	ror	r22
   107f0:	b7 95       	ror	r27
   107f2:	88 0f       	add	r24, r24
   107f4:	91 1d       	adc	r25, r1
   107f6:	96 95       	lsr	r25
   107f8:	87 95       	ror	r24
   107fa:	97 f9       	bld	r25, 7
   107fc:	08 95       	ret

000107fe <dtostrf>:
   107fe:	ef 92       	push	r14
   10800:	0f 93       	push	r16
   10802:	1f 93       	push	r17
   10804:	cf 93       	push	r28
   10806:	df 93       	push	r29
   10808:	e8 01       	movw	r28, r16
   1080a:	47 fd       	sbrc	r20, 7
   1080c:	02 c0       	rjmp	.+4      	; 0x10812 <dtostrf+0x14>
   1080e:	34 e0       	ldi	r19, 0x04	; 4
   10810:	01 c0       	rjmp	.+2      	; 0x10814 <dtostrf+0x16>
   10812:	34 e1       	ldi	r19, 0x14	; 20
   10814:	e4 2f       	mov	r30, r20
   10816:	44 0f       	add	r20, r20
   10818:	ff 0b       	sbc	r31, r31
   1081a:	f7 ff       	sbrs	r31, 7
   1081c:	03 c0       	rjmp	.+6      	; 0x10824 <dtostrf+0x26>
   1081e:	f1 95       	neg	r31
   10820:	e1 95       	neg	r30
   10822:	f1 09       	sbc	r31, r1
   10824:	e3 2e       	mov	r14, r19
   10826:	02 2f       	mov	r16, r18
   10828:	2e 2f       	mov	r18, r30
   1082a:	ae 01       	movw	r20, r28
   1082c:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <dtoa_prf>
   10830:	ce 01       	movw	r24, r28
   10832:	df 91       	pop	r29
   10834:	cf 91       	pop	r28
   10836:	1f 91       	pop	r17
   10838:	0f 91       	pop	r16
   1083a:	ef 90       	pop	r14
   1083c:	08 95       	ret

0001083e <atoi>:
   1083e:	fc 01       	movw	r30, r24
   10840:	88 27       	eor	r24, r24
   10842:	99 27       	eor	r25, r25
   10844:	e8 94       	clt
   10846:	21 91       	ld	r18, Z+
   10848:	20 32       	cpi	r18, 0x20	; 32
   1084a:	e9 f3       	breq	.-6      	; 0x10846 <atoi+0x8>
   1084c:	29 30       	cpi	r18, 0x09	; 9
   1084e:	10 f0       	brcs	.+4      	; 0x10854 <atoi+0x16>
   10850:	2e 30       	cpi	r18, 0x0E	; 14
   10852:	c8 f3       	brcs	.-14     	; 0x10846 <atoi+0x8>
   10854:	2b 32       	cpi	r18, 0x2B	; 43
   10856:	41 f0       	breq	.+16     	; 0x10868 <atoi+0x2a>
   10858:	2d 32       	cpi	r18, 0x2D	; 45
   1085a:	39 f4       	brne	.+14     	; 0x1086a <atoi+0x2c>
   1085c:	68 94       	set
   1085e:	04 c0       	rjmp	.+8      	; 0x10868 <atoi+0x2a>
   10860:	0e 94 3d 84 	call	0x1087a	; 0x1087a <__mulhi_const_10>
   10864:	82 0f       	add	r24, r18
   10866:	91 1d       	adc	r25, r1
   10868:	21 91       	ld	r18, Z+
   1086a:	20 53       	subi	r18, 0x30	; 48
   1086c:	2a 30       	cpi	r18, 0x0A	; 10
   1086e:	c0 f3       	brcs	.-16     	; 0x10860 <atoi+0x22>
   10870:	1e f4       	brtc	.+6      	; 0x10878 <atoi+0x3a>
   10872:	90 95       	com	r25
   10874:	81 95       	neg	r24
   10876:	9f 4f       	sbci	r25, 0xFF	; 255
   10878:	08 95       	ret

0001087a <__mulhi_const_10>:
   1087a:	7a e0       	ldi	r23, 0x0A	; 10
   1087c:	97 9f       	mul	r25, r23
   1087e:	90 2d       	mov	r25, r0
   10880:	87 9f       	mul	r24, r23
   10882:	80 2d       	mov	r24, r0
   10884:	91 0d       	add	r25, r1
   10886:	11 24       	eor	r1, r1
   10888:	08 95       	ret

0001088a <sprintf>:
   1088a:	0f 93       	push	r16
   1088c:	1f 93       	push	r17
   1088e:	cf 93       	push	r28
   10890:	df 93       	push	r29
   10892:	cd b7       	in	r28, 0x3d	; 61
   10894:	de b7       	in	r29, 0x3e	; 62
   10896:	2e 97       	sbiw	r28, 0x0e	; 14
   10898:	0f b6       	in	r0, 0x3f	; 63
   1089a:	f8 94       	cli
   1089c:	de bf       	out	0x3e, r29	; 62
   1089e:	0f be       	out	0x3f, r0	; 63
   108a0:	cd bf       	out	0x3d, r28	; 61
   108a2:	0d 89       	ldd	r16, Y+21	; 0x15
   108a4:	1e 89       	ldd	r17, Y+22	; 0x16
   108a6:	86 e0       	ldi	r24, 0x06	; 6
   108a8:	8c 83       	std	Y+4, r24	; 0x04
   108aa:	1a 83       	std	Y+2, r17	; 0x02
   108ac:	09 83       	std	Y+1, r16	; 0x01
   108ae:	8f ef       	ldi	r24, 0xFF	; 255
   108b0:	9f e7       	ldi	r25, 0x7F	; 127
   108b2:	9e 83       	std	Y+6, r25	; 0x06
   108b4:	8d 83       	std	Y+5, r24	; 0x05
   108b6:	ae 01       	movw	r20, r28
   108b8:	47 5e       	subi	r20, 0xE7	; 231
   108ba:	5f 4f       	sbci	r21, 0xFF	; 255
   108bc:	6f 89       	ldd	r22, Y+23	; 0x17
   108be:	78 8d       	ldd	r23, Y+24	; 0x18
   108c0:	ce 01       	movw	r24, r28
   108c2:	01 96       	adiw	r24, 0x01	; 1
   108c4:	0e 94 75 84 	call	0x108ea	; 0x108ea <vfprintf>
   108c8:	2f 81       	ldd	r18, Y+7	; 0x07
   108ca:	38 85       	ldd	r19, Y+8	; 0x08
   108cc:	f8 01       	movw	r30, r16
   108ce:	e2 0f       	add	r30, r18
   108d0:	f3 1f       	adc	r31, r19
   108d2:	10 82       	st	Z, r1
   108d4:	2e 96       	adiw	r28, 0x0e	; 14
   108d6:	0f b6       	in	r0, 0x3f	; 63
   108d8:	f8 94       	cli
   108da:	de bf       	out	0x3e, r29	; 62
   108dc:	0f be       	out	0x3f, r0	; 63
   108de:	cd bf       	out	0x3d, r28	; 61
   108e0:	df 91       	pop	r29
   108e2:	cf 91       	pop	r28
   108e4:	1f 91       	pop	r17
   108e6:	0f 91       	pop	r16
   108e8:	08 95       	ret

000108ea <vfprintf>:
   108ea:	2f 92       	push	r2
   108ec:	3f 92       	push	r3
   108ee:	4f 92       	push	r4
   108f0:	5f 92       	push	r5
   108f2:	6f 92       	push	r6
   108f4:	7f 92       	push	r7
   108f6:	8f 92       	push	r8
   108f8:	9f 92       	push	r9
   108fa:	af 92       	push	r10
   108fc:	bf 92       	push	r11
   108fe:	cf 92       	push	r12
   10900:	df 92       	push	r13
   10902:	ef 92       	push	r14
   10904:	ff 92       	push	r15
   10906:	0f 93       	push	r16
   10908:	1f 93       	push	r17
   1090a:	cf 93       	push	r28
   1090c:	df 93       	push	r29
   1090e:	cd b7       	in	r28, 0x3d	; 61
   10910:	de b7       	in	r29, 0x3e	; 62
   10912:	2c 97       	sbiw	r28, 0x0c	; 12
   10914:	0f b6       	in	r0, 0x3f	; 63
   10916:	f8 94       	cli
   10918:	de bf       	out	0x3e, r29	; 62
   1091a:	0f be       	out	0x3f, r0	; 63
   1091c:	cd bf       	out	0x3d, r28	; 61
   1091e:	7c 01       	movw	r14, r24
   10920:	6b 01       	movw	r12, r22
   10922:	8a 01       	movw	r16, r20
   10924:	fc 01       	movw	r30, r24
   10926:	17 82       	std	Z+7, r1	; 0x07
   10928:	16 82       	std	Z+6, r1	; 0x06
   1092a:	83 81       	ldd	r24, Z+3	; 0x03
   1092c:	81 ff       	sbrs	r24, 1
   1092e:	bd c1       	rjmp	.+890    	; 0x10caa <vfprintf+0x3c0>
   10930:	ce 01       	movw	r24, r28
   10932:	01 96       	adiw	r24, 0x01	; 1
   10934:	4c 01       	movw	r8, r24
   10936:	f7 01       	movw	r30, r14
   10938:	93 81       	ldd	r25, Z+3	; 0x03
   1093a:	f6 01       	movw	r30, r12
   1093c:	93 fd       	sbrc	r25, 3
   1093e:	85 91       	lpm	r24, Z+
   10940:	93 ff       	sbrs	r25, 3
   10942:	81 91       	ld	r24, Z+
   10944:	6f 01       	movw	r12, r30
   10946:	88 23       	and	r24, r24
   10948:	09 f4       	brne	.+2      	; 0x1094c <vfprintf+0x62>
   1094a:	ab c1       	rjmp	.+854    	; 0x10ca2 <vfprintf+0x3b8>
   1094c:	85 32       	cpi	r24, 0x25	; 37
   1094e:	39 f4       	brne	.+14     	; 0x1095e <vfprintf+0x74>
   10950:	93 fd       	sbrc	r25, 3
   10952:	85 91       	lpm	r24, Z+
   10954:	93 ff       	sbrs	r25, 3
   10956:	81 91       	ld	r24, Z+
   10958:	6f 01       	movw	r12, r30
   1095a:	85 32       	cpi	r24, 0x25	; 37
   1095c:	29 f4       	brne	.+10     	; 0x10968 <vfprintf+0x7e>
   1095e:	b7 01       	movw	r22, r14
   10960:	90 e0       	ldi	r25, 0x00	; 0
   10962:	0e 94 ec 88 	call	0x111d8	; 0x111d8 <fputc>
   10966:	e7 cf       	rjmp	.-50     	; 0x10936 <vfprintf+0x4c>
   10968:	51 2c       	mov	r5, r1
   1096a:	31 2c       	mov	r3, r1
   1096c:	20 e0       	ldi	r18, 0x00	; 0
   1096e:	20 32       	cpi	r18, 0x20	; 32
   10970:	a0 f4       	brcc	.+40     	; 0x1099a <vfprintf+0xb0>
   10972:	8b 32       	cpi	r24, 0x2B	; 43
   10974:	69 f0       	breq	.+26     	; 0x10990 <vfprintf+0xa6>
   10976:	30 f4       	brcc	.+12     	; 0x10984 <vfprintf+0x9a>
   10978:	80 32       	cpi	r24, 0x20	; 32
   1097a:	59 f0       	breq	.+22     	; 0x10992 <vfprintf+0xa8>
   1097c:	83 32       	cpi	r24, 0x23	; 35
   1097e:	69 f4       	brne	.+26     	; 0x1099a <vfprintf+0xb0>
   10980:	20 61       	ori	r18, 0x10	; 16
   10982:	2c c0       	rjmp	.+88     	; 0x109dc <vfprintf+0xf2>
   10984:	8d 32       	cpi	r24, 0x2D	; 45
   10986:	39 f0       	breq	.+14     	; 0x10996 <vfprintf+0xac>
   10988:	80 33       	cpi	r24, 0x30	; 48
   1098a:	39 f4       	brne	.+14     	; 0x1099a <vfprintf+0xb0>
   1098c:	21 60       	ori	r18, 0x01	; 1
   1098e:	26 c0       	rjmp	.+76     	; 0x109dc <vfprintf+0xf2>
   10990:	22 60       	ori	r18, 0x02	; 2
   10992:	24 60       	ori	r18, 0x04	; 4
   10994:	23 c0       	rjmp	.+70     	; 0x109dc <vfprintf+0xf2>
   10996:	28 60       	ori	r18, 0x08	; 8
   10998:	21 c0       	rjmp	.+66     	; 0x109dc <vfprintf+0xf2>
   1099a:	27 fd       	sbrc	r18, 7
   1099c:	27 c0       	rjmp	.+78     	; 0x109ec <vfprintf+0x102>
   1099e:	30 ed       	ldi	r19, 0xD0	; 208
   109a0:	38 0f       	add	r19, r24
   109a2:	3a 30       	cpi	r19, 0x0A	; 10
   109a4:	78 f4       	brcc	.+30     	; 0x109c4 <vfprintf+0xda>
   109a6:	26 ff       	sbrs	r18, 6
   109a8:	06 c0       	rjmp	.+12     	; 0x109b6 <vfprintf+0xcc>
   109aa:	fa e0       	ldi	r31, 0x0A	; 10
   109ac:	5f 9e       	mul	r5, r31
   109ae:	30 0d       	add	r19, r0
   109b0:	11 24       	eor	r1, r1
   109b2:	53 2e       	mov	r5, r19
   109b4:	13 c0       	rjmp	.+38     	; 0x109dc <vfprintf+0xf2>
   109b6:	8a e0       	ldi	r24, 0x0A	; 10
   109b8:	38 9e       	mul	r3, r24
   109ba:	30 0d       	add	r19, r0
   109bc:	11 24       	eor	r1, r1
   109be:	33 2e       	mov	r3, r19
   109c0:	20 62       	ori	r18, 0x20	; 32
   109c2:	0c c0       	rjmp	.+24     	; 0x109dc <vfprintf+0xf2>
   109c4:	8e 32       	cpi	r24, 0x2E	; 46
   109c6:	21 f4       	brne	.+8      	; 0x109d0 <vfprintf+0xe6>
   109c8:	26 fd       	sbrc	r18, 6
   109ca:	6b c1       	rjmp	.+726    	; 0x10ca2 <vfprintf+0x3b8>
   109cc:	20 64       	ori	r18, 0x40	; 64
   109ce:	06 c0       	rjmp	.+12     	; 0x109dc <vfprintf+0xf2>
   109d0:	8c 36       	cpi	r24, 0x6C	; 108
   109d2:	11 f4       	brne	.+4      	; 0x109d8 <vfprintf+0xee>
   109d4:	20 68       	ori	r18, 0x80	; 128
   109d6:	02 c0       	rjmp	.+4      	; 0x109dc <vfprintf+0xf2>
   109d8:	88 36       	cpi	r24, 0x68	; 104
   109da:	41 f4       	brne	.+16     	; 0x109ec <vfprintf+0x102>
   109dc:	f6 01       	movw	r30, r12
   109de:	93 fd       	sbrc	r25, 3
   109e0:	85 91       	lpm	r24, Z+
   109e2:	93 ff       	sbrs	r25, 3
   109e4:	81 91       	ld	r24, Z+
   109e6:	6f 01       	movw	r12, r30
   109e8:	81 11       	cpse	r24, r1
   109ea:	c1 cf       	rjmp	.-126    	; 0x1096e <vfprintf+0x84>
   109ec:	98 2f       	mov	r25, r24
   109ee:	9f 7d       	andi	r25, 0xDF	; 223
   109f0:	95 54       	subi	r25, 0x45	; 69
   109f2:	93 30       	cpi	r25, 0x03	; 3
   109f4:	28 f4       	brcc	.+10     	; 0x10a00 <vfprintf+0x116>
   109f6:	0c 5f       	subi	r16, 0xFC	; 252
   109f8:	1f 4f       	sbci	r17, 0xFF	; 255
   109fa:	ff e3       	ldi	r31, 0x3F	; 63
   109fc:	f9 83       	std	Y+1, r31	; 0x01
   109fe:	0d c0       	rjmp	.+26     	; 0x10a1a <vfprintf+0x130>
   10a00:	83 36       	cpi	r24, 0x63	; 99
   10a02:	31 f0       	breq	.+12     	; 0x10a10 <vfprintf+0x126>
   10a04:	83 37       	cpi	r24, 0x73	; 115
   10a06:	71 f0       	breq	.+28     	; 0x10a24 <vfprintf+0x13a>
   10a08:	83 35       	cpi	r24, 0x53	; 83
   10a0a:	09 f0       	breq	.+2      	; 0x10a0e <vfprintf+0x124>
   10a0c:	5b c0       	rjmp	.+182    	; 0x10ac4 <vfprintf+0x1da>
   10a0e:	22 c0       	rjmp	.+68     	; 0x10a54 <vfprintf+0x16a>
   10a10:	f8 01       	movw	r30, r16
   10a12:	80 81       	ld	r24, Z
   10a14:	89 83       	std	Y+1, r24	; 0x01
   10a16:	0e 5f       	subi	r16, 0xFE	; 254
   10a18:	1f 4f       	sbci	r17, 0xFF	; 255
   10a1a:	44 24       	eor	r4, r4
   10a1c:	43 94       	inc	r4
   10a1e:	51 2c       	mov	r5, r1
   10a20:	54 01       	movw	r10, r8
   10a22:	15 c0       	rjmp	.+42     	; 0x10a4e <vfprintf+0x164>
   10a24:	38 01       	movw	r6, r16
   10a26:	f2 e0       	ldi	r31, 0x02	; 2
   10a28:	6f 0e       	add	r6, r31
   10a2a:	71 1c       	adc	r7, r1
   10a2c:	f8 01       	movw	r30, r16
   10a2e:	a0 80       	ld	r10, Z
   10a30:	b1 80       	ldd	r11, Z+1	; 0x01
   10a32:	26 ff       	sbrs	r18, 6
   10a34:	03 c0       	rjmp	.+6      	; 0x10a3c <vfprintf+0x152>
   10a36:	65 2d       	mov	r22, r5
   10a38:	70 e0       	ldi	r23, 0x00	; 0
   10a3a:	02 c0       	rjmp	.+4      	; 0x10a40 <vfprintf+0x156>
   10a3c:	6f ef       	ldi	r22, 0xFF	; 255
   10a3e:	7f ef       	ldi	r23, 0xFF	; 255
   10a40:	c5 01       	movw	r24, r10
   10a42:	2c 87       	std	Y+12, r18	; 0x0c
   10a44:	0e 94 e1 88 	call	0x111c2	; 0x111c2 <strnlen>
   10a48:	2c 01       	movw	r4, r24
   10a4a:	83 01       	movw	r16, r6
   10a4c:	2c 85       	ldd	r18, Y+12	; 0x0c
   10a4e:	2f 77       	andi	r18, 0x7F	; 127
   10a50:	22 2e       	mov	r2, r18
   10a52:	17 c0       	rjmp	.+46     	; 0x10a82 <vfprintf+0x198>
   10a54:	38 01       	movw	r6, r16
   10a56:	f2 e0       	ldi	r31, 0x02	; 2
   10a58:	6f 0e       	add	r6, r31
   10a5a:	71 1c       	adc	r7, r1
   10a5c:	f8 01       	movw	r30, r16
   10a5e:	a0 80       	ld	r10, Z
   10a60:	b1 80       	ldd	r11, Z+1	; 0x01
   10a62:	26 ff       	sbrs	r18, 6
   10a64:	03 c0       	rjmp	.+6      	; 0x10a6c <vfprintf+0x182>
   10a66:	65 2d       	mov	r22, r5
   10a68:	70 e0       	ldi	r23, 0x00	; 0
   10a6a:	02 c0       	rjmp	.+4      	; 0x10a70 <vfprintf+0x186>
   10a6c:	6f ef       	ldi	r22, 0xFF	; 255
   10a6e:	7f ef       	ldi	r23, 0xFF	; 255
   10a70:	c5 01       	movw	r24, r10
   10a72:	2c 87       	std	Y+12, r18	; 0x0c
   10a74:	0e 94 d6 88 	call	0x111ac	; 0x111ac <strnlen_P>
   10a78:	2c 01       	movw	r4, r24
   10a7a:	2c 85       	ldd	r18, Y+12	; 0x0c
   10a7c:	20 68       	ori	r18, 0x80	; 128
   10a7e:	22 2e       	mov	r2, r18
   10a80:	83 01       	movw	r16, r6
   10a82:	23 fc       	sbrc	r2, 3
   10a84:	1b c0       	rjmp	.+54     	; 0x10abc <vfprintf+0x1d2>
   10a86:	83 2d       	mov	r24, r3
   10a88:	90 e0       	ldi	r25, 0x00	; 0
   10a8a:	48 16       	cp	r4, r24
   10a8c:	59 06       	cpc	r5, r25
   10a8e:	b0 f4       	brcc	.+44     	; 0x10abc <vfprintf+0x1d2>
   10a90:	b7 01       	movw	r22, r14
   10a92:	80 e2       	ldi	r24, 0x20	; 32
   10a94:	90 e0       	ldi	r25, 0x00	; 0
   10a96:	0e 94 ec 88 	call	0x111d8	; 0x111d8 <fputc>
   10a9a:	3a 94       	dec	r3
   10a9c:	f4 cf       	rjmp	.-24     	; 0x10a86 <vfprintf+0x19c>
   10a9e:	f5 01       	movw	r30, r10
   10aa0:	27 fc       	sbrc	r2, 7
   10aa2:	85 91       	lpm	r24, Z+
   10aa4:	27 fe       	sbrs	r2, 7
   10aa6:	81 91       	ld	r24, Z+
   10aa8:	5f 01       	movw	r10, r30
   10aaa:	b7 01       	movw	r22, r14
   10aac:	90 e0       	ldi	r25, 0x00	; 0
   10aae:	0e 94 ec 88 	call	0x111d8	; 0x111d8 <fputc>
   10ab2:	31 10       	cpse	r3, r1
   10ab4:	3a 94       	dec	r3
   10ab6:	f1 e0       	ldi	r31, 0x01	; 1
   10ab8:	4f 1a       	sub	r4, r31
   10aba:	51 08       	sbc	r5, r1
   10abc:	41 14       	cp	r4, r1
   10abe:	51 04       	cpc	r5, r1
   10ac0:	71 f7       	brne	.-36     	; 0x10a9e <vfprintf+0x1b4>
   10ac2:	e5 c0       	rjmp	.+458    	; 0x10c8e <vfprintf+0x3a4>
   10ac4:	84 36       	cpi	r24, 0x64	; 100
   10ac6:	11 f0       	breq	.+4      	; 0x10acc <vfprintf+0x1e2>
   10ac8:	89 36       	cpi	r24, 0x69	; 105
   10aca:	39 f5       	brne	.+78     	; 0x10b1a <vfprintf+0x230>
   10acc:	f8 01       	movw	r30, r16
   10ace:	27 ff       	sbrs	r18, 7
   10ad0:	07 c0       	rjmp	.+14     	; 0x10ae0 <vfprintf+0x1f6>
   10ad2:	60 81       	ld	r22, Z
   10ad4:	71 81       	ldd	r23, Z+1	; 0x01
   10ad6:	82 81       	ldd	r24, Z+2	; 0x02
   10ad8:	93 81       	ldd	r25, Z+3	; 0x03
   10ada:	0c 5f       	subi	r16, 0xFC	; 252
   10adc:	1f 4f       	sbci	r17, 0xFF	; 255
   10ade:	08 c0       	rjmp	.+16     	; 0x10af0 <vfprintf+0x206>
   10ae0:	60 81       	ld	r22, Z
   10ae2:	71 81       	ldd	r23, Z+1	; 0x01
   10ae4:	07 2e       	mov	r0, r23
   10ae6:	00 0c       	add	r0, r0
   10ae8:	88 0b       	sbc	r24, r24
   10aea:	99 0b       	sbc	r25, r25
   10aec:	0e 5f       	subi	r16, 0xFE	; 254
   10aee:	1f 4f       	sbci	r17, 0xFF	; 255
   10af0:	2f 76       	andi	r18, 0x6F	; 111
   10af2:	72 2e       	mov	r7, r18
   10af4:	97 ff       	sbrs	r25, 7
   10af6:	09 c0       	rjmp	.+18     	; 0x10b0a <vfprintf+0x220>
   10af8:	90 95       	com	r25
   10afa:	80 95       	com	r24
   10afc:	70 95       	com	r23
   10afe:	61 95       	neg	r22
   10b00:	7f 4f       	sbci	r23, 0xFF	; 255
   10b02:	8f 4f       	sbci	r24, 0xFF	; 255
   10b04:	9f 4f       	sbci	r25, 0xFF	; 255
   10b06:	20 68       	ori	r18, 0x80	; 128
   10b08:	72 2e       	mov	r7, r18
   10b0a:	2a e0       	ldi	r18, 0x0A	; 10
   10b0c:	30 e0       	ldi	r19, 0x00	; 0
   10b0e:	a4 01       	movw	r20, r8
   10b10:	0e 94 24 89 	call	0x11248	; 0x11248 <__ultoa_invert>
   10b14:	a8 2e       	mov	r10, r24
   10b16:	a8 18       	sub	r10, r8
   10b18:	44 c0       	rjmp	.+136    	; 0x10ba2 <vfprintf+0x2b8>
   10b1a:	85 37       	cpi	r24, 0x75	; 117
   10b1c:	29 f4       	brne	.+10     	; 0x10b28 <vfprintf+0x23e>
   10b1e:	2f 7e       	andi	r18, 0xEF	; 239
   10b20:	b2 2e       	mov	r11, r18
   10b22:	2a e0       	ldi	r18, 0x0A	; 10
   10b24:	30 e0       	ldi	r19, 0x00	; 0
   10b26:	25 c0       	rjmp	.+74     	; 0x10b72 <vfprintf+0x288>
   10b28:	f2 2f       	mov	r31, r18
   10b2a:	f9 7f       	andi	r31, 0xF9	; 249
   10b2c:	bf 2e       	mov	r11, r31
   10b2e:	8f 36       	cpi	r24, 0x6F	; 111
   10b30:	c1 f0       	breq	.+48     	; 0x10b62 <vfprintf+0x278>
   10b32:	18 f4       	brcc	.+6      	; 0x10b3a <vfprintf+0x250>
   10b34:	88 35       	cpi	r24, 0x58	; 88
   10b36:	79 f0       	breq	.+30     	; 0x10b56 <vfprintf+0x26c>
   10b38:	b4 c0       	rjmp	.+360    	; 0x10ca2 <vfprintf+0x3b8>
   10b3a:	80 37       	cpi	r24, 0x70	; 112
   10b3c:	19 f0       	breq	.+6      	; 0x10b44 <vfprintf+0x25a>
   10b3e:	88 37       	cpi	r24, 0x78	; 120
   10b40:	21 f0       	breq	.+8      	; 0x10b4a <vfprintf+0x260>
   10b42:	af c0       	rjmp	.+350    	; 0x10ca2 <vfprintf+0x3b8>
   10b44:	2f 2f       	mov	r18, r31
   10b46:	20 61       	ori	r18, 0x10	; 16
   10b48:	b2 2e       	mov	r11, r18
   10b4a:	b4 fe       	sbrs	r11, 4
   10b4c:	0d c0       	rjmp	.+26     	; 0x10b68 <vfprintf+0x27e>
   10b4e:	8b 2d       	mov	r24, r11
   10b50:	84 60       	ori	r24, 0x04	; 4
   10b52:	b8 2e       	mov	r11, r24
   10b54:	09 c0       	rjmp	.+18     	; 0x10b68 <vfprintf+0x27e>
   10b56:	24 ff       	sbrs	r18, 4
   10b58:	0a c0       	rjmp	.+20     	; 0x10b6e <vfprintf+0x284>
   10b5a:	9f 2f       	mov	r25, r31
   10b5c:	96 60       	ori	r25, 0x06	; 6
   10b5e:	b9 2e       	mov	r11, r25
   10b60:	06 c0       	rjmp	.+12     	; 0x10b6e <vfprintf+0x284>
   10b62:	28 e0       	ldi	r18, 0x08	; 8
   10b64:	30 e0       	ldi	r19, 0x00	; 0
   10b66:	05 c0       	rjmp	.+10     	; 0x10b72 <vfprintf+0x288>
   10b68:	20 e1       	ldi	r18, 0x10	; 16
   10b6a:	30 e0       	ldi	r19, 0x00	; 0
   10b6c:	02 c0       	rjmp	.+4      	; 0x10b72 <vfprintf+0x288>
   10b6e:	20 e1       	ldi	r18, 0x10	; 16
   10b70:	32 e0       	ldi	r19, 0x02	; 2
   10b72:	f8 01       	movw	r30, r16
   10b74:	b7 fe       	sbrs	r11, 7
   10b76:	07 c0       	rjmp	.+14     	; 0x10b86 <vfprintf+0x29c>
   10b78:	60 81       	ld	r22, Z
   10b7a:	71 81       	ldd	r23, Z+1	; 0x01
   10b7c:	82 81       	ldd	r24, Z+2	; 0x02
   10b7e:	93 81       	ldd	r25, Z+3	; 0x03
   10b80:	0c 5f       	subi	r16, 0xFC	; 252
   10b82:	1f 4f       	sbci	r17, 0xFF	; 255
   10b84:	06 c0       	rjmp	.+12     	; 0x10b92 <vfprintf+0x2a8>
   10b86:	60 81       	ld	r22, Z
   10b88:	71 81       	ldd	r23, Z+1	; 0x01
   10b8a:	80 e0       	ldi	r24, 0x00	; 0
   10b8c:	90 e0       	ldi	r25, 0x00	; 0
   10b8e:	0e 5f       	subi	r16, 0xFE	; 254
   10b90:	1f 4f       	sbci	r17, 0xFF	; 255
   10b92:	a4 01       	movw	r20, r8
   10b94:	0e 94 24 89 	call	0x11248	; 0x11248 <__ultoa_invert>
   10b98:	a8 2e       	mov	r10, r24
   10b9a:	a8 18       	sub	r10, r8
   10b9c:	fb 2d       	mov	r31, r11
   10b9e:	ff 77       	andi	r31, 0x7F	; 127
   10ba0:	7f 2e       	mov	r7, r31
   10ba2:	76 fe       	sbrs	r7, 6
   10ba4:	0b c0       	rjmp	.+22     	; 0x10bbc <vfprintf+0x2d2>
   10ba6:	37 2d       	mov	r19, r7
   10ba8:	3e 7f       	andi	r19, 0xFE	; 254
   10baa:	a5 14       	cp	r10, r5
   10bac:	50 f4       	brcc	.+20     	; 0x10bc2 <vfprintf+0x2d8>
   10bae:	74 fe       	sbrs	r7, 4
   10bb0:	0a c0       	rjmp	.+20     	; 0x10bc6 <vfprintf+0x2dc>
   10bb2:	72 fc       	sbrc	r7, 2
   10bb4:	08 c0       	rjmp	.+16     	; 0x10bc6 <vfprintf+0x2dc>
   10bb6:	37 2d       	mov	r19, r7
   10bb8:	3e 7e       	andi	r19, 0xEE	; 238
   10bba:	05 c0       	rjmp	.+10     	; 0x10bc6 <vfprintf+0x2dc>
   10bbc:	ba 2c       	mov	r11, r10
   10bbe:	37 2d       	mov	r19, r7
   10bc0:	03 c0       	rjmp	.+6      	; 0x10bc8 <vfprintf+0x2de>
   10bc2:	ba 2c       	mov	r11, r10
   10bc4:	01 c0       	rjmp	.+2      	; 0x10bc8 <vfprintf+0x2de>
   10bc6:	b5 2c       	mov	r11, r5
   10bc8:	34 ff       	sbrs	r19, 4
   10bca:	0d c0       	rjmp	.+26     	; 0x10be6 <vfprintf+0x2fc>
   10bcc:	fe 01       	movw	r30, r28
   10bce:	ea 0d       	add	r30, r10
   10bd0:	f1 1d       	adc	r31, r1
   10bd2:	80 81       	ld	r24, Z
   10bd4:	80 33       	cpi	r24, 0x30	; 48
   10bd6:	11 f4       	brne	.+4      	; 0x10bdc <vfprintf+0x2f2>
   10bd8:	39 7e       	andi	r19, 0xE9	; 233
   10bda:	09 c0       	rjmp	.+18     	; 0x10bee <vfprintf+0x304>
   10bdc:	32 ff       	sbrs	r19, 2
   10bde:	06 c0       	rjmp	.+12     	; 0x10bec <vfprintf+0x302>
   10be0:	b3 94       	inc	r11
   10be2:	b3 94       	inc	r11
   10be4:	04 c0       	rjmp	.+8      	; 0x10bee <vfprintf+0x304>
   10be6:	83 2f       	mov	r24, r19
   10be8:	86 78       	andi	r24, 0x86	; 134
   10bea:	09 f0       	breq	.+2      	; 0x10bee <vfprintf+0x304>
   10bec:	b3 94       	inc	r11
   10bee:	33 fd       	sbrc	r19, 3
   10bf0:	13 c0       	rjmp	.+38     	; 0x10c18 <vfprintf+0x32e>
   10bf2:	30 ff       	sbrs	r19, 0
   10bf4:	06 c0       	rjmp	.+12     	; 0x10c02 <vfprintf+0x318>
   10bf6:	5a 2c       	mov	r5, r10
   10bf8:	b3 14       	cp	r11, r3
   10bfa:	18 f4       	brcc	.+6      	; 0x10c02 <vfprintf+0x318>
   10bfc:	53 0c       	add	r5, r3
   10bfe:	5b 18       	sub	r5, r11
   10c00:	b3 2c       	mov	r11, r3
   10c02:	b3 14       	cp	r11, r3
   10c04:	68 f4       	brcc	.+26     	; 0x10c20 <vfprintf+0x336>
   10c06:	b7 01       	movw	r22, r14
   10c08:	80 e2       	ldi	r24, 0x20	; 32
   10c0a:	90 e0       	ldi	r25, 0x00	; 0
   10c0c:	3c 87       	std	Y+12, r19	; 0x0c
   10c0e:	0e 94 ec 88 	call	0x111d8	; 0x111d8 <fputc>
   10c12:	b3 94       	inc	r11
   10c14:	3c 85       	ldd	r19, Y+12	; 0x0c
   10c16:	f5 cf       	rjmp	.-22     	; 0x10c02 <vfprintf+0x318>
   10c18:	b3 14       	cp	r11, r3
   10c1a:	10 f4       	brcc	.+4      	; 0x10c20 <vfprintf+0x336>
   10c1c:	3b 18       	sub	r3, r11
   10c1e:	01 c0       	rjmp	.+2      	; 0x10c22 <vfprintf+0x338>
   10c20:	31 2c       	mov	r3, r1
   10c22:	34 ff       	sbrs	r19, 4
   10c24:	12 c0       	rjmp	.+36     	; 0x10c4a <vfprintf+0x360>
   10c26:	b7 01       	movw	r22, r14
   10c28:	80 e3       	ldi	r24, 0x30	; 48
   10c2a:	90 e0       	ldi	r25, 0x00	; 0
   10c2c:	3c 87       	std	Y+12, r19	; 0x0c
   10c2e:	0e 94 ec 88 	call	0x111d8	; 0x111d8 <fputc>
   10c32:	3c 85       	ldd	r19, Y+12	; 0x0c
   10c34:	32 ff       	sbrs	r19, 2
   10c36:	17 c0       	rjmp	.+46     	; 0x10c66 <vfprintf+0x37c>
   10c38:	31 fd       	sbrc	r19, 1
   10c3a:	03 c0       	rjmp	.+6      	; 0x10c42 <vfprintf+0x358>
   10c3c:	88 e7       	ldi	r24, 0x78	; 120
   10c3e:	90 e0       	ldi	r25, 0x00	; 0
   10c40:	02 c0       	rjmp	.+4      	; 0x10c46 <vfprintf+0x35c>
   10c42:	88 e5       	ldi	r24, 0x58	; 88
   10c44:	90 e0       	ldi	r25, 0x00	; 0
   10c46:	b7 01       	movw	r22, r14
   10c48:	0c c0       	rjmp	.+24     	; 0x10c62 <vfprintf+0x378>
   10c4a:	83 2f       	mov	r24, r19
   10c4c:	86 78       	andi	r24, 0x86	; 134
   10c4e:	59 f0       	breq	.+22     	; 0x10c66 <vfprintf+0x37c>
   10c50:	31 ff       	sbrs	r19, 1
   10c52:	02 c0       	rjmp	.+4      	; 0x10c58 <vfprintf+0x36e>
   10c54:	8b e2       	ldi	r24, 0x2B	; 43
   10c56:	01 c0       	rjmp	.+2      	; 0x10c5a <vfprintf+0x370>
   10c58:	80 e2       	ldi	r24, 0x20	; 32
   10c5a:	37 fd       	sbrc	r19, 7
   10c5c:	8d e2       	ldi	r24, 0x2D	; 45
   10c5e:	b7 01       	movw	r22, r14
   10c60:	90 e0       	ldi	r25, 0x00	; 0
   10c62:	0e 94 ec 88 	call	0x111d8	; 0x111d8 <fputc>
   10c66:	a5 14       	cp	r10, r5
   10c68:	38 f4       	brcc	.+14     	; 0x10c78 <vfprintf+0x38e>
   10c6a:	b7 01       	movw	r22, r14
   10c6c:	80 e3       	ldi	r24, 0x30	; 48
   10c6e:	90 e0       	ldi	r25, 0x00	; 0
   10c70:	0e 94 ec 88 	call	0x111d8	; 0x111d8 <fputc>
   10c74:	5a 94       	dec	r5
   10c76:	f7 cf       	rjmp	.-18     	; 0x10c66 <vfprintf+0x37c>
   10c78:	aa 94       	dec	r10
   10c7a:	f4 01       	movw	r30, r8
   10c7c:	ea 0d       	add	r30, r10
   10c7e:	f1 1d       	adc	r31, r1
   10c80:	80 81       	ld	r24, Z
   10c82:	b7 01       	movw	r22, r14
   10c84:	90 e0       	ldi	r25, 0x00	; 0
   10c86:	0e 94 ec 88 	call	0x111d8	; 0x111d8 <fputc>
   10c8a:	a1 10       	cpse	r10, r1
   10c8c:	f5 cf       	rjmp	.-22     	; 0x10c78 <vfprintf+0x38e>
   10c8e:	33 20       	and	r3, r3
   10c90:	09 f4       	brne	.+2      	; 0x10c94 <vfprintf+0x3aa>
   10c92:	51 ce       	rjmp	.-862    	; 0x10936 <vfprintf+0x4c>
   10c94:	b7 01       	movw	r22, r14
   10c96:	80 e2       	ldi	r24, 0x20	; 32
   10c98:	90 e0       	ldi	r25, 0x00	; 0
   10c9a:	0e 94 ec 88 	call	0x111d8	; 0x111d8 <fputc>
   10c9e:	3a 94       	dec	r3
   10ca0:	f6 cf       	rjmp	.-20     	; 0x10c8e <vfprintf+0x3a4>
   10ca2:	f7 01       	movw	r30, r14
   10ca4:	86 81       	ldd	r24, Z+6	; 0x06
   10ca6:	97 81       	ldd	r25, Z+7	; 0x07
   10ca8:	02 c0       	rjmp	.+4      	; 0x10cae <vfprintf+0x3c4>
   10caa:	8f ef       	ldi	r24, 0xFF	; 255
   10cac:	9f ef       	ldi	r25, 0xFF	; 255
   10cae:	2c 96       	adiw	r28, 0x0c	; 12
   10cb0:	0f b6       	in	r0, 0x3f	; 63
   10cb2:	f8 94       	cli
   10cb4:	de bf       	out	0x3e, r29	; 62
   10cb6:	0f be       	out	0x3f, r0	; 63
   10cb8:	cd bf       	out	0x3d, r28	; 61
   10cba:	df 91       	pop	r29
   10cbc:	cf 91       	pop	r28
   10cbe:	1f 91       	pop	r17
   10cc0:	0f 91       	pop	r16
   10cc2:	ff 90       	pop	r15
   10cc4:	ef 90       	pop	r14
   10cc6:	df 90       	pop	r13
   10cc8:	cf 90       	pop	r12
   10cca:	bf 90       	pop	r11
   10ccc:	af 90       	pop	r10
   10cce:	9f 90       	pop	r9
   10cd0:	8f 90       	pop	r8
   10cd2:	7f 90       	pop	r7
   10cd4:	6f 90       	pop	r6
   10cd6:	5f 90       	pop	r5
   10cd8:	4f 90       	pop	r4
   10cda:	3f 90       	pop	r3
   10cdc:	2f 90       	pop	r2
   10cde:	08 95       	ret

00010ce0 <dtoa_prf>:
   10ce0:	4f 92       	push	r4
   10ce2:	5f 92       	push	r5
   10ce4:	6f 92       	push	r6
   10ce6:	7f 92       	push	r7
   10ce8:	9f 92       	push	r9
   10cea:	af 92       	push	r10
   10cec:	bf 92       	push	r11
   10cee:	cf 92       	push	r12
   10cf0:	df 92       	push	r13
   10cf2:	ef 92       	push	r14
   10cf4:	ff 92       	push	r15
   10cf6:	0f 93       	push	r16
   10cf8:	1f 93       	push	r17
   10cfa:	cf 93       	push	r28
   10cfc:	df 93       	push	r29
   10cfe:	cd b7       	in	r28, 0x3d	; 61
   10d00:	de b7       	in	r29, 0x3e	; 62
   10d02:	29 97       	sbiw	r28, 0x09	; 9
   10d04:	0f b6       	in	r0, 0x3f	; 63
   10d06:	f8 94       	cli
   10d08:	de bf       	out	0x3e, r29	; 62
   10d0a:	0f be       	out	0x3f, r0	; 63
   10d0c:	cd bf       	out	0x3d, r28	; 61
   10d0e:	6a 01       	movw	r12, r20
   10d10:	12 2f       	mov	r17, r18
   10d12:	b0 2e       	mov	r11, r16
   10d14:	2b e3       	ldi	r18, 0x3B	; 59
   10d16:	20 17       	cp	r18, r16
   10d18:	20 f0       	brcs	.+8      	; 0x10d22 <dtoa_prf+0x42>
   10d1a:	ff 24       	eor	r15, r15
   10d1c:	f3 94       	inc	r15
   10d1e:	f0 0e       	add	r15, r16
   10d20:	02 c0       	rjmp	.+4      	; 0x10d26 <dtoa_prf+0x46>
   10d22:	bc e3       	ldi	r27, 0x3C	; 60
   10d24:	fb 2e       	mov	r15, r27
   10d26:	0f 2d       	mov	r16, r15
   10d28:	27 e0       	ldi	r18, 0x07	; 7
   10d2a:	ae 01       	movw	r20, r28
   10d2c:	4f 5f       	subi	r20, 0xFF	; 255
   10d2e:	5f 4f       	sbci	r21, 0xFF	; 255
   10d30:	0e 94 fe 87 	call	0x10ffc	; 0x10ffc <__ftoa_engine>
   10d34:	ac 01       	movw	r20, r24
   10d36:	89 81       	ldd	r24, Y+1	; 0x01
   10d38:	98 2f       	mov	r25, r24
   10d3a:	99 70       	andi	r25, 0x09	; 9
   10d3c:	91 30       	cpi	r25, 0x01	; 1
   10d3e:	31 f0       	breq	.+12     	; 0x10d4c <dtoa_prf+0x6c>
   10d40:	e1 fc       	sbrc	r14, 1
   10d42:	06 c0       	rjmp	.+12     	; 0x10d50 <dtoa_prf+0x70>
   10d44:	e0 fe       	sbrs	r14, 0
   10d46:	06 c0       	rjmp	.+12     	; 0x10d54 <dtoa_prf+0x74>
   10d48:	90 e2       	ldi	r25, 0x20	; 32
   10d4a:	05 c0       	rjmp	.+10     	; 0x10d56 <dtoa_prf+0x76>
   10d4c:	9d e2       	ldi	r25, 0x2D	; 45
   10d4e:	03 c0       	rjmp	.+6      	; 0x10d56 <dtoa_prf+0x76>
   10d50:	9b e2       	ldi	r25, 0x2B	; 43
   10d52:	01 c0       	rjmp	.+2      	; 0x10d56 <dtoa_prf+0x76>
   10d54:	90 e0       	ldi	r25, 0x00	; 0
   10d56:	ee 2d       	mov	r30, r14
   10d58:	e0 71       	andi	r30, 0x10	; 16
   10d5a:	83 ff       	sbrs	r24, 3
   10d5c:	3c c0       	rjmp	.+120    	; 0x10dd6 <dtoa_prf+0xf6>
   10d5e:	91 11       	cpse	r25, r1
   10d60:	02 c0       	rjmp	.+4      	; 0x10d66 <dtoa_prf+0x86>
   10d62:	83 e0       	ldi	r24, 0x03	; 3
   10d64:	01 c0       	rjmp	.+2      	; 0x10d68 <dtoa_prf+0x88>
   10d66:	84 e0       	ldi	r24, 0x04	; 4
   10d68:	81 17       	cp	r24, r17
   10d6a:	18 f4       	brcc	.+6      	; 0x10d72 <dtoa_prf+0x92>
   10d6c:	21 2f       	mov	r18, r17
   10d6e:	28 1b       	sub	r18, r24
   10d70:	01 c0       	rjmp	.+2      	; 0x10d74 <dtoa_prf+0x94>
   10d72:	20 e0       	ldi	r18, 0x00	; 0
   10d74:	e1 11       	cpse	r30, r1
   10d76:	0b c0       	rjmp	.+22     	; 0x10d8e <dtoa_prf+0xae>
   10d78:	f6 01       	movw	r30, r12
   10d7a:	82 2f       	mov	r24, r18
   10d7c:	30 e2       	ldi	r19, 0x20	; 32
   10d7e:	88 23       	and	r24, r24
   10d80:	19 f0       	breq	.+6      	; 0x10d88 <dtoa_prf+0xa8>
   10d82:	31 93       	st	Z+, r19
   10d84:	81 50       	subi	r24, 0x01	; 1
   10d86:	fb cf       	rjmp	.-10     	; 0x10d7e <dtoa_prf+0x9e>
   10d88:	c2 0e       	add	r12, r18
   10d8a:	d1 1c       	adc	r13, r1
   10d8c:	20 e0       	ldi	r18, 0x00	; 0
   10d8e:	99 23       	and	r25, r25
   10d90:	29 f0       	breq	.+10     	; 0x10d9c <dtoa_prf+0xbc>
   10d92:	d6 01       	movw	r26, r12
   10d94:	9c 93       	st	X, r25
   10d96:	f6 01       	movw	r30, r12
   10d98:	31 96       	adiw	r30, 0x01	; 1
   10d9a:	6f 01       	movw	r12, r30
   10d9c:	c6 01       	movw	r24, r12
   10d9e:	03 96       	adiw	r24, 0x03	; 3
   10da0:	e2 fe       	sbrs	r14, 2
   10da2:	0a c0       	rjmp	.+20     	; 0x10db8 <dtoa_prf+0xd8>
   10da4:	3e e4       	ldi	r19, 0x4E	; 78
   10da6:	d6 01       	movw	r26, r12
   10da8:	3c 93       	st	X, r19
   10daa:	41 e4       	ldi	r20, 0x41	; 65
   10dac:	11 96       	adiw	r26, 0x01	; 1
   10dae:	4c 93       	st	X, r20
   10db0:	11 97       	sbiw	r26, 0x01	; 1
   10db2:	12 96       	adiw	r26, 0x02	; 2
   10db4:	3c 93       	st	X, r19
   10db6:	06 c0       	rjmp	.+12     	; 0x10dc4 <dtoa_prf+0xe4>
   10db8:	3e e6       	ldi	r19, 0x6E	; 110
   10dba:	f6 01       	movw	r30, r12
   10dbc:	30 83       	st	Z, r19
   10dbe:	41 e6       	ldi	r20, 0x61	; 97
   10dc0:	41 83       	std	Z+1, r20	; 0x01
   10dc2:	32 83       	std	Z+2, r19	; 0x02
   10dc4:	fc 01       	movw	r30, r24
   10dc6:	32 2f       	mov	r19, r18
   10dc8:	40 e2       	ldi	r20, 0x20	; 32
   10dca:	33 23       	and	r19, r19
   10dcc:	09 f4       	brne	.+2      	; 0x10dd0 <dtoa_prf+0xf0>
   10dce:	42 c0       	rjmp	.+132    	; 0x10e54 <dtoa_prf+0x174>
   10dd0:	41 93       	st	Z+, r20
   10dd2:	31 50       	subi	r19, 0x01	; 1
   10dd4:	fa cf       	rjmp	.-12     	; 0x10dca <dtoa_prf+0xea>
   10dd6:	82 ff       	sbrs	r24, 2
   10dd8:	44 c0       	rjmp	.+136    	; 0x10e62 <dtoa_prf+0x182>
   10dda:	91 11       	cpse	r25, r1
   10ddc:	02 c0       	rjmp	.+4      	; 0x10de2 <dtoa_prf+0x102>
   10dde:	83 e0       	ldi	r24, 0x03	; 3
   10de0:	01 c0       	rjmp	.+2      	; 0x10de4 <dtoa_prf+0x104>
   10de2:	84 e0       	ldi	r24, 0x04	; 4
   10de4:	81 17       	cp	r24, r17
   10de6:	18 f4       	brcc	.+6      	; 0x10dee <dtoa_prf+0x10e>
   10de8:	21 2f       	mov	r18, r17
   10dea:	28 1b       	sub	r18, r24
   10dec:	01 c0       	rjmp	.+2      	; 0x10df0 <dtoa_prf+0x110>
   10dee:	20 e0       	ldi	r18, 0x00	; 0
   10df0:	e1 11       	cpse	r30, r1
   10df2:	0b c0       	rjmp	.+22     	; 0x10e0a <dtoa_prf+0x12a>
   10df4:	f6 01       	movw	r30, r12
   10df6:	82 2f       	mov	r24, r18
   10df8:	30 e2       	ldi	r19, 0x20	; 32
   10dfa:	88 23       	and	r24, r24
   10dfc:	19 f0       	breq	.+6      	; 0x10e04 <dtoa_prf+0x124>
   10dfe:	31 93       	st	Z+, r19
   10e00:	81 50       	subi	r24, 0x01	; 1
   10e02:	fb cf       	rjmp	.-10     	; 0x10dfa <dtoa_prf+0x11a>
   10e04:	c2 0e       	add	r12, r18
   10e06:	d1 1c       	adc	r13, r1
   10e08:	20 e0       	ldi	r18, 0x00	; 0
   10e0a:	99 23       	and	r25, r25
   10e0c:	29 f0       	breq	.+10     	; 0x10e18 <dtoa_prf+0x138>
   10e0e:	d6 01       	movw	r26, r12
   10e10:	9c 93       	st	X, r25
   10e12:	f6 01       	movw	r30, r12
   10e14:	31 96       	adiw	r30, 0x01	; 1
   10e16:	6f 01       	movw	r12, r30
   10e18:	c6 01       	movw	r24, r12
   10e1a:	03 96       	adiw	r24, 0x03	; 3
   10e1c:	e2 fe       	sbrs	r14, 2
   10e1e:	0b c0       	rjmp	.+22     	; 0x10e36 <dtoa_prf+0x156>
   10e20:	39 e4       	ldi	r19, 0x49	; 73
   10e22:	d6 01       	movw	r26, r12
   10e24:	3c 93       	st	X, r19
   10e26:	3e e4       	ldi	r19, 0x4E	; 78
   10e28:	11 96       	adiw	r26, 0x01	; 1
   10e2a:	3c 93       	st	X, r19
   10e2c:	11 97       	sbiw	r26, 0x01	; 1
   10e2e:	36 e4       	ldi	r19, 0x46	; 70
   10e30:	12 96       	adiw	r26, 0x02	; 2
   10e32:	3c 93       	st	X, r19
   10e34:	07 c0       	rjmp	.+14     	; 0x10e44 <dtoa_prf+0x164>
   10e36:	39 e6       	ldi	r19, 0x69	; 105
   10e38:	f6 01       	movw	r30, r12
   10e3a:	30 83       	st	Z, r19
   10e3c:	3e e6       	ldi	r19, 0x6E	; 110
   10e3e:	31 83       	std	Z+1, r19	; 0x01
   10e40:	36 e6       	ldi	r19, 0x66	; 102
   10e42:	32 83       	std	Z+2, r19	; 0x02
   10e44:	fc 01       	movw	r30, r24
   10e46:	32 2f       	mov	r19, r18
   10e48:	40 e2       	ldi	r20, 0x20	; 32
   10e4a:	33 23       	and	r19, r19
   10e4c:	19 f0       	breq	.+6      	; 0x10e54 <dtoa_prf+0x174>
   10e4e:	41 93       	st	Z+, r20
   10e50:	31 50       	subi	r19, 0x01	; 1
   10e52:	fb cf       	rjmp	.-10     	; 0x10e4a <dtoa_prf+0x16a>
   10e54:	fc 01       	movw	r30, r24
   10e56:	e2 0f       	add	r30, r18
   10e58:	f1 1d       	adc	r31, r1
   10e5a:	10 82       	st	Z, r1
   10e5c:	8e ef       	ldi	r24, 0xFE	; 254
   10e5e:	9f ef       	ldi	r25, 0xFF	; 255
   10e60:	b7 c0       	rjmp	.+366    	; 0x10fd0 <dtoa_prf+0x2f0>
   10e62:	f1 e0       	ldi	r31, 0x01	; 1
   10e64:	91 11       	cpse	r25, r1
   10e66:	01 c0       	rjmp	.+2      	; 0x10e6a <dtoa_prf+0x18a>
   10e68:	f0 e0       	ldi	r31, 0x00	; 0
   10e6a:	6f 2f       	mov	r22, r31
   10e6c:	70 e0       	ldi	r23, 0x00	; 0
   10e6e:	14 16       	cp	r1, r20
   10e70:	15 06       	cpc	r1, r21
   10e72:	24 f4       	brge	.+8      	; 0x10e7c <dtoa_prf+0x19c>
   10e74:	9a 01       	movw	r18, r20
   10e76:	2f 5f       	subi	r18, 0xFF	; 255
   10e78:	3f 4f       	sbci	r19, 0xFF	; 255
   10e7a:	02 c0       	rjmp	.+4      	; 0x10e80 <dtoa_prf+0x1a0>
   10e7c:	21 e0       	ldi	r18, 0x01	; 1
   10e7e:	30 e0       	ldi	r19, 0x00	; 0
   10e80:	26 0f       	add	r18, r22
   10e82:	37 1f       	adc	r19, r23
   10e84:	bb 20       	and	r11, r11
   10e86:	29 f0       	breq	.+10     	; 0x10e92 <dtoa_prf+0x1b2>
   10e88:	6b 2d       	mov	r22, r11
   10e8a:	70 e0       	ldi	r23, 0x00	; 0
   10e8c:	6f 5f       	subi	r22, 0xFF	; 255
   10e8e:	7f 4f       	sbci	r23, 0xFF	; 255
   10e90:	02 c0       	rjmp	.+4      	; 0x10e96 <dtoa_prf+0x1b6>
   10e92:	60 e0       	ldi	r22, 0x00	; 0
   10e94:	70 e0       	ldi	r23, 0x00	; 0
   10e96:	26 0f       	add	r18, r22
   10e98:	37 1f       	adc	r19, r23
   10e9a:	61 2f       	mov	r22, r17
   10e9c:	70 e0       	ldi	r23, 0x00	; 0
   10e9e:	26 17       	cp	r18, r22
   10ea0:	37 07       	cpc	r19, r23
   10ea2:	1c f4       	brge	.+6      	; 0x10eaa <dtoa_prf+0x1ca>
   10ea4:	12 1b       	sub	r17, r18
   10ea6:	21 2f       	mov	r18, r17
   10ea8:	01 c0       	rjmp	.+2      	; 0x10eac <dtoa_prf+0x1cc>
   10eaa:	20 e0       	ldi	r18, 0x00	; 0
   10eac:	3e 2d       	mov	r19, r14
   10eae:	38 71       	andi	r19, 0x18	; 24
   10eb0:	59 f4       	brne	.+22     	; 0x10ec8 <dtoa_prf+0x1e8>
   10eb2:	d6 01       	movw	r26, r12
   10eb4:	32 2f       	mov	r19, r18
   10eb6:	60 e2       	ldi	r22, 0x20	; 32
   10eb8:	33 23       	and	r19, r19
   10eba:	19 f0       	breq	.+6      	; 0x10ec2 <dtoa_prf+0x1e2>
   10ebc:	6d 93       	st	X+, r22
   10ebe:	31 50       	subi	r19, 0x01	; 1
   10ec0:	fb cf       	rjmp	.-10     	; 0x10eb8 <dtoa_prf+0x1d8>
   10ec2:	c2 0e       	add	r12, r18
   10ec4:	d1 1c       	adc	r13, r1
   10ec6:	20 e0       	ldi	r18, 0x00	; 0
   10ec8:	ff 23       	and	r31, r31
   10eca:	31 f0       	breq	.+12     	; 0x10ed8 <dtoa_prf+0x1f8>
   10ecc:	d6 01       	movw	r26, r12
   10ece:	9c 93       	st	X, r25
   10ed0:	b6 01       	movw	r22, r12
   10ed2:	6f 5f       	subi	r22, 0xFF	; 255
   10ed4:	7f 4f       	sbci	r23, 0xFF	; 255
   10ed6:	6b 01       	movw	r12, r22
   10ed8:	e1 11       	cpse	r30, r1
   10eda:	0b c0       	rjmp	.+22     	; 0x10ef2 <dtoa_prf+0x212>
   10edc:	f6 01       	movw	r30, r12
   10ede:	92 2f       	mov	r25, r18
   10ee0:	30 e3       	ldi	r19, 0x30	; 48
   10ee2:	99 23       	and	r25, r25
   10ee4:	19 f0       	breq	.+6      	; 0x10eec <dtoa_prf+0x20c>
   10ee6:	31 93       	st	Z+, r19
   10ee8:	91 50       	subi	r25, 0x01	; 1
   10eea:	fb cf       	rjmp	.-10     	; 0x10ee2 <dtoa_prf+0x202>
   10eec:	c2 0e       	add	r12, r18
   10eee:	d1 1c       	adc	r13, r1
   10ef0:	20 e0       	ldi	r18, 0x00	; 0
   10ef2:	9f 2d       	mov	r25, r15
   10ef4:	94 0f       	add	r25, r20
   10ef6:	3a 81       	ldd	r19, Y+2	; 0x02
   10ef8:	78 2f       	mov	r23, r24
   10efa:	70 71       	andi	r23, 0x10	; 16
   10efc:	a7 2e       	mov	r10, r23
   10efe:	84 ff       	sbrs	r24, 4
   10f00:	03 c0       	rjmp	.+6      	; 0x10f08 <dtoa_prf+0x228>
   10f02:	31 33       	cpi	r19, 0x31	; 49
   10f04:	09 f4       	brne	.+2      	; 0x10f08 <dtoa_prf+0x228>
   10f06:	91 50       	subi	r25, 0x01	; 1
   10f08:	19 16       	cp	r1, r25
   10f0a:	24 f4       	brge	.+8      	; 0x10f14 <dtoa_prf+0x234>
   10f0c:	99 30       	cpi	r25, 0x09	; 9
   10f0e:	18 f0       	brcs	.+6      	; 0x10f16 <dtoa_prf+0x236>
   10f10:	98 e0       	ldi	r25, 0x08	; 8
   10f12:	01 c0       	rjmp	.+2      	; 0x10f16 <dtoa_prf+0x236>
   10f14:	91 e0       	ldi	r25, 0x01	; 1
   10f16:	e4 2f       	mov	r30, r20
   10f18:	85 2f       	mov	r24, r21
   10f1a:	57 ff       	sbrs	r21, 7
   10f1c:	02 c0       	rjmp	.+4      	; 0x10f22 <dtoa_prf+0x242>
   10f1e:	e0 e0       	ldi	r30, 0x00	; 0
   10f20:	80 e0       	ldi	r24, 0x00	; 0
   10f22:	6e 2f       	mov	r22, r30
   10f24:	78 2f       	mov	r23, r24
   10f26:	e0 e0       	ldi	r30, 0x00	; 0
   10f28:	f0 e0       	ldi	r31, 0x00	; 0
   10f2a:	ae e2       	ldi	r26, 0x2E	; 46
   10f2c:	9a 2e       	mov	r9, r26
   10f2e:	3a 01       	movw	r6, r20
   10f30:	69 1a       	sub	r6, r25
   10f32:	71 08       	sbc	r7, r1
   10f34:	2a 01       	movw	r4, r20
   10f36:	46 1a       	sub	r4, r22
   10f38:	57 0a       	sbc	r5, r23
   10f3a:	0b 2d       	mov	r16, r11
   10f3c:	10 e0       	ldi	r17, 0x00	; 0
   10f3e:	11 95       	neg	r17
   10f40:	01 95       	neg	r16
   10f42:	11 09       	sbc	r17, r1
   10f44:	6f 3f       	cpi	r22, 0xFF	; 255
   10f46:	8f ef       	ldi	r24, 0xFF	; 255
   10f48:	78 07       	cpc	r23, r24
   10f4a:	29 f4       	brne	.+10     	; 0x10f56 <dtoa_prf+0x276>
   10f4c:	d6 01       	movw	r26, r12
   10f4e:	9c 92       	st	X, r9
   10f50:	c6 01       	movw	r24, r12
   10f52:	01 96       	adiw	r24, 0x01	; 1
   10f54:	6c 01       	movw	r12, r24
   10f56:	46 17       	cp	r20, r22
   10f58:	57 07       	cpc	r21, r23
   10f5a:	84 f0       	brlt	.+32     	; 0x10f7c <dtoa_prf+0x29c>
   10f5c:	66 16       	cp	r6, r22
   10f5e:	77 06       	cpc	r7, r23
   10f60:	6c f4       	brge	.+26     	; 0x10f7c <dtoa_prf+0x29c>
   10f62:	7f 01       	movw	r14, r30
   10f64:	e4 0c       	add	r14, r4
   10f66:	f5 1c       	adc	r15, r5
   10f68:	a1 e0       	ldi	r26, 0x01	; 1
   10f6a:	b0 e0       	ldi	r27, 0x00	; 0
   10f6c:	ac 0f       	add	r26, r28
   10f6e:	bd 1f       	adc	r27, r29
   10f70:	ea 0e       	add	r14, r26
   10f72:	fb 1e       	adc	r15, r27
   10f74:	d7 01       	movw	r26, r14
   10f76:	11 96       	adiw	r26, 0x01	; 1
   10f78:	bc 90       	ld	r11, X
   10f7a:	02 c0       	rjmp	.+4      	; 0x10f80 <dtoa_prf+0x2a0>
   10f7c:	90 e3       	ldi	r25, 0x30	; 48
   10f7e:	b9 2e       	mov	r11, r25
   10f80:	61 50       	subi	r22, 0x01	; 1
   10f82:	71 09       	sbc	r23, r1
   10f84:	31 96       	adiw	r30, 0x01	; 1
   10f86:	c6 01       	movw	r24, r12
   10f88:	01 96       	adiw	r24, 0x01	; 1
   10f8a:	7c 01       	movw	r14, r24
   10f8c:	60 17       	cp	r22, r16
   10f8e:	71 07       	cpc	r23, r17
   10f90:	24 f0       	brlt	.+8      	; 0x10f9a <dtoa_prf+0x2ba>
   10f92:	d6 01       	movw	r26, r12
   10f94:	bc 92       	st	X, r11
   10f96:	6c 01       	movw	r12, r24
   10f98:	d5 cf       	rjmp	.-86     	; 0x10f44 <dtoa_prf+0x264>
   10f9a:	64 17       	cp	r22, r20
   10f9c:	75 07       	cpc	r23, r21
   10f9e:	41 f4       	brne	.+16     	; 0x10fb0 <dtoa_prf+0x2d0>
   10fa0:	36 33       	cpi	r19, 0x36	; 54
   10fa2:	20 f4       	brcc	.+8      	; 0x10fac <dtoa_prf+0x2cc>
   10fa4:	35 33       	cpi	r19, 0x35	; 53
   10fa6:	21 f4       	brne	.+8      	; 0x10fb0 <dtoa_prf+0x2d0>
   10fa8:	a1 10       	cpse	r10, r1
   10faa:	02 c0       	rjmp	.+4      	; 0x10fb0 <dtoa_prf+0x2d0>
   10fac:	81 e3       	ldi	r24, 0x31	; 49
   10fae:	b8 2e       	mov	r11, r24
   10fb0:	f6 01       	movw	r30, r12
   10fb2:	b0 82       	st	Z, r11
   10fb4:	f7 01       	movw	r30, r14
   10fb6:	82 2f       	mov	r24, r18
   10fb8:	90 e2       	ldi	r25, 0x20	; 32
   10fba:	88 23       	and	r24, r24
   10fbc:	19 f0       	breq	.+6      	; 0x10fc4 <dtoa_prf+0x2e4>
   10fbe:	91 93       	st	Z+, r25
   10fc0:	81 50       	subi	r24, 0x01	; 1
   10fc2:	fb cf       	rjmp	.-10     	; 0x10fba <dtoa_prf+0x2da>
   10fc4:	f7 01       	movw	r30, r14
   10fc6:	e2 0f       	add	r30, r18
   10fc8:	f1 1d       	adc	r31, r1
   10fca:	10 82       	st	Z, r1
   10fcc:	80 e0       	ldi	r24, 0x00	; 0
   10fce:	90 e0       	ldi	r25, 0x00	; 0
   10fd0:	29 96       	adiw	r28, 0x09	; 9
   10fd2:	0f b6       	in	r0, 0x3f	; 63
   10fd4:	f8 94       	cli
   10fd6:	de bf       	out	0x3e, r29	; 62
   10fd8:	0f be       	out	0x3f, r0	; 63
   10fda:	cd bf       	out	0x3d, r28	; 61
   10fdc:	df 91       	pop	r29
   10fde:	cf 91       	pop	r28
   10fe0:	1f 91       	pop	r17
   10fe2:	0f 91       	pop	r16
   10fe4:	ff 90       	pop	r15
   10fe6:	ef 90       	pop	r14
   10fe8:	df 90       	pop	r13
   10fea:	cf 90       	pop	r12
   10fec:	bf 90       	pop	r11
   10fee:	af 90       	pop	r10
   10ff0:	9f 90       	pop	r9
   10ff2:	7f 90       	pop	r7
   10ff4:	6f 90       	pop	r6
   10ff6:	5f 90       	pop	r5
   10ff8:	4f 90       	pop	r4
   10ffa:	08 95       	ret

00010ffc <__ftoa_engine>:
   10ffc:	28 30       	cpi	r18, 0x08	; 8
   10ffe:	08 f0       	brcs	.+2      	; 0x11002 <__ftoa_engine+0x6>
   11000:	27 e0       	ldi	r18, 0x07	; 7
   11002:	33 27       	eor	r19, r19
   11004:	da 01       	movw	r26, r20
   11006:	99 0f       	add	r25, r25
   11008:	31 1d       	adc	r19, r1
   1100a:	87 fd       	sbrc	r24, 7
   1100c:	91 60       	ori	r25, 0x01	; 1
   1100e:	00 96       	adiw	r24, 0x00	; 0
   11010:	61 05       	cpc	r22, r1
   11012:	71 05       	cpc	r23, r1
   11014:	39 f4       	brne	.+14     	; 0x11024 <__ftoa_engine+0x28>
   11016:	32 60       	ori	r19, 0x02	; 2
   11018:	2e 5f       	subi	r18, 0xFE	; 254
   1101a:	3d 93       	st	X+, r19
   1101c:	30 e3       	ldi	r19, 0x30	; 48
   1101e:	2a 95       	dec	r18
   11020:	e1 f7       	brne	.-8      	; 0x1101a <__ftoa_engine+0x1e>
   11022:	08 95       	ret
   11024:	9f 3f       	cpi	r25, 0xFF	; 255
   11026:	30 f0       	brcs	.+12     	; 0x11034 <__ftoa_engine+0x38>
   11028:	80 38       	cpi	r24, 0x80	; 128
   1102a:	71 05       	cpc	r23, r1
   1102c:	61 05       	cpc	r22, r1
   1102e:	09 f0       	breq	.+2      	; 0x11032 <__ftoa_engine+0x36>
   11030:	3c 5f       	subi	r19, 0xFC	; 252
   11032:	3c 5f       	subi	r19, 0xFC	; 252
   11034:	3d 93       	st	X+, r19
   11036:	91 30       	cpi	r25, 0x01	; 1
   11038:	08 f0       	brcs	.+2      	; 0x1103c <__ftoa_engine+0x40>
   1103a:	80 68       	ori	r24, 0x80	; 128
   1103c:	91 1d       	adc	r25, r1
   1103e:	df 93       	push	r29
   11040:	cf 93       	push	r28
   11042:	1f 93       	push	r17
   11044:	0f 93       	push	r16
   11046:	ff 92       	push	r15
   11048:	ef 92       	push	r14
   1104a:	19 2f       	mov	r17, r25
   1104c:	98 7f       	andi	r25, 0xF8	; 248
   1104e:	96 95       	lsr	r25
   11050:	e9 2f       	mov	r30, r25
   11052:	96 95       	lsr	r25
   11054:	96 95       	lsr	r25
   11056:	e9 0f       	add	r30, r25
   11058:	ff 27       	eor	r31, r31
   1105a:	ed 5c       	subi	r30, 0xCD	; 205
   1105c:	f7 4f       	sbci	r31, 0xF7	; 247
   1105e:	99 27       	eor	r25, r25
   11060:	33 27       	eor	r19, r19
   11062:	ee 24       	eor	r14, r14
   11064:	ff 24       	eor	r15, r15
   11066:	a7 01       	movw	r20, r14
   11068:	e7 01       	movw	r28, r14
   1106a:	05 90       	lpm	r0, Z+
   1106c:	08 94       	sec
   1106e:	07 94       	ror	r0
   11070:	28 f4       	brcc	.+10     	; 0x1107c <__ftoa_engine+0x80>
   11072:	36 0f       	add	r19, r22
   11074:	e7 1e       	adc	r14, r23
   11076:	f8 1e       	adc	r15, r24
   11078:	49 1f       	adc	r20, r25
   1107a:	51 1d       	adc	r21, r1
   1107c:	66 0f       	add	r22, r22
   1107e:	77 1f       	adc	r23, r23
   11080:	88 1f       	adc	r24, r24
   11082:	99 1f       	adc	r25, r25
   11084:	06 94       	lsr	r0
   11086:	a1 f7       	brne	.-24     	; 0x11070 <__ftoa_engine+0x74>
   11088:	05 90       	lpm	r0, Z+
   1108a:	07 94       	ror	r0
   1108c:	28 f4       	brcc	.+10     	; 0x11098 <__ftoa_engine+0x9c>
   1108e:	e7 0e       	add	r14, r23
   11090:	f8 1e       	adc	r15, r24
   11092:	49 1f       	adc	r20, r25
   11094:	56 1f       	adc	r21, r22
   11096:	c1 1d       	adc	r28, r1
   11098:	77 0f       	add	r23, r23
   1109a:	88 1f       	adc	r24, r24
   1109c:	99 1f       	adc	r25, r25
   1109e:	66 1f       	adc	r22, r22
   110a0:	06 94       	lsr	r0
   110a2:	a1 f7       	brne	.-24     	; 0x1108c <__ftoa_engine+0x90>
   110a4:	05 90       	lpm	r0, Z+
   110a6:	07 94       	ror	r0
   110a8:	28 f4       	brcc	.+10     	; 0x110b4 <__ftoa_engine+0xb8>
   110aa:	f8 0e       	add	r15, r24
   110ac:	49 1f       	adc	r20, r25
   110ae:	56 1f       	adc	r21, r22
   110b0:	c7 1f       	adc	r28, r23
   110b2:	d1 1d       	adc	r29, r1
   110b4:	88 0f       	add	r24, r24
   110b6:	99 1f       	adc	r25, r25
   110b8:	66 1f       	adc	r22, r22
   110ba:	77 1f       	adc	r23, r23
   110bc:	06 94       	lsr	r0
   110be:	a1 f7       	brne	.-24     	; 0x110a8 <__ftoa_engine+0xac>
   110c0:	05 90       	lpm	r0, Z+
   110c2:	07 94       	ror	r0
   110c4:	20 f4       	brcc	.+8      	; 0x110ce <__ftoa_engine+0xd2>
   110c6:	49 0f       	add	r20, r25
   110c8:	56 1f       	adc	r21, r22
   110ca:	c7 1f       	adc	r28, r23
   110cc:	d8 1f       	adc	r29, r24
   110ce:	99 0f       	add	r25, r25
   110d0:	66 1f       	adc	r22, r22
   110d2:	77 1f       	adc	r23, r23
   110d4:	88 1f       	adc	r24, r24
   110d6:	06 94       	lsr	r0
   110d8:	a9 f7       	brne	.-22     	; 0x110c4 <__ftoa_engine+0xc8>
   110da:	84 91       	lpm	r24, Z
   110dc:	10 95       	com	r17
   110de:	17 70       	andi	r17, 0x07	; 7
   110e0:	41 f0       	breq	.+16     	; 0x110f2 <__ftoa_engine+0xf6>
   110e2:	d6 95       	lsr	r29
   110e4:	c7 95       	ror	r28
   110e6:	57 95       	ror	r21
   110e8:	47 95       	ror	r20
   110ea:	f7 94       	ror	r15
   110ec:	e7 94       	ror	r14
   110ee:	1a 95       	dec	r17
   110f0:	c1 f7       	brne	.-16     	; 0x110e2 <__ftoa_engine+0xe6>
   110f2:	e9 ed       	ldi	r30, 0xD9	; 217
   110f4:	f7 e0       	ldi	r31, 0x07	; 7
   110f6:	68 94       	set
   110f8:	15 90       	lpm	r1, Z+
   110fa:	15 91       	lpm	r17, Z+
   110fc:	35 91       	lpm	r19, Z+
   110fe:	65 91       	lpm	r22, Z+
   11100:	95 91       	lpm	r25, Z+
   11102:	05 90       	lpm	r0, Z+
   11104:	7f e2       	ldi	r23, 0x2F	; 47
   11106:	73 95       	inc	r23
   11108:	e1 18       	sub	r14, r1
   1110a:	f1 0a       	sbc	r15, r17
   1110c:	43 0b       	sbc	r20, r19
   1110e:	56 0b       	sbc	r21, r22
   11110:	c9 0b       	sbc	r28, r25
   11112:	d0 09       	sbc	r29, r0
   11114:	c0 f7       	brcc	.-16     	; 0x11106 <__ftoa_engine+0x10a>
   11116:	e1 0c       	add	r14, r1
   11118:	f1 1e       	adc	r15, r17
   1111a:	43 1f       	adc	r20, r19
   1111c:	56 1f       	adc	r21, r22
   1111e:	c9 1f       	adc	r28, r25
   11120:	d0 1d       	adc	r29, r0
   11122:	7e f4       	brtc	.+30     	; 0x11142 <__ftoa_engine+0x146>
   11124:	70 33       	cpi	r23, 0x30	; 48
   11126:	11 f4       	brne	.+4      	; 0x1112c <__ftoa_engine+0x130>
   11128:	8a 95       	dec	r24
   1112a:	e6 cf       	rjmp	.-52     	; 0x110f8 <__ftoa_engine+0xfc>
   1112c:	e8 94       	clt
   1112e:	01 50       	subi	r16, 0x01	; 1
   11130:	30 f0       	brcs	.+12     	; 0x1113e <__ftoa_engine+0x142>
   11132:	08 0f       	add	r16, r24
   11134:	0a f4       	brpl	.+2      	; 0x11138 <__ftoa_engine+0x13c>
   11136:	00 27       	eor	r16, r16
   11138:	02 17       	cp	r16, r18
   1113a:	08 f4       	brcc	.+2      	; 0x1113e <__ftoa_engine+0x142>
   1113c:	20 2f       	mov	r18, r16
   1113e:	23 95       	inc	r18
   11140:	02 2f       	mov	r16, r18
   11142:	7a 33       	cpi	r23, 0x3A	; 58
   11144:	28 f0       	brcs	.+10     	; 0x11150 <__ftoa_engine+0x154>
   11146:	79 e3       	ldi	r23, 0x39	; 57
   11148:	7d 93       	st	X+, r23
   1114a:	2a 95       	dec	r18
   1114c:	e9 f7       	brne	.-6      	; 0x11148 <__ftoa_engine+0x14c>
   1114e:	10 c0       	rjmp	.+32     	; 0x11170 <__ftoa_engine+0x174>
   11150:	7d 93       	st	X+, r23
   11152:	2a 95       	dec	r18
   11154:	89 f6       	brne	.-94     	; 0x110f8 <__ftoa_engine+0xfc>
   11156:	06 94       	lsr	r0
   11158:	97 95       	ror	r25
   1115a:	67 95       	ror	r22
   1115c:	37 95       	ror	r19
   1115e:	17 95       	ror	r17
   11160:	17 94       	ror	r1
   11162:	e1 18       	sub	r14, r1
   11164:	f1 0a       	sbc	r15, r17
   11166:	43 0b       	sbc	r20, r19
   11168:	56 0b       	sbc	r21, r22
   1116a:	c9 0b       	sbc	r28, r25
   1116c:	d0 09       	sbc	r29, r0
   1116e:	98 f0       	brcs	.+38     	; 0x11196 <__ftoa_engine+0x19a>
   11170:	23 95       	inc	r18
   11172:	7e 91       	ld	r23, -X
   11174:	73 95       	inc	r23
   11176:	7a 33       	cpi	r23, 0x3A	; 58
   11178:	08 f0       	brcs	.+2      	; 0x1117c <__ftoa_engine+0x180>
   1117a:	70 e3       	ldi	r23, 0x30	; 48
   1117c:	7c 93       	st	X, r23
   1117e:	20 13       	cpse	r18, r16
   11180:	b8 f7       	brcc	.-18     	; 0x11170 <__ftoa_engine+0x174>
   11182:	7e 91       	ld	r23, -X
   11184:	70 61       	ori	r23, 0x10	; 16
   11186:	7d 93       	st	X+, r23
   11188:	30 f0       	brcs	.+12     	; 0x11196 <__ftoa_engine+0x19a>
   1118a:	83 95       	inc	r24
   1118c:	71 e3       	ldi	r23, 0x31	; 49
   1118e:	7d 93       	st	X+, r23
   11190:	70 e3       	ldi	r23, 0x30	; 48
   11192:	2a 95       	dec	r18
   11194:	e1 f7       	brne	.-8      	; 0x1118e <__ftoa_engine+0x192>
   11196:	11 24       	eor	r1, r1
   11198:	ef 90       	pop	r14
   1119a:	ff 90       	pop	r15
   1119c:	0f 91       	pop	r16
   1119e:	1f 91       	pop	r17
   111a0:	cf 91       	pop	r28
   111a2:	df 91       	pop	r29
   111a4:	99 27       	eor	r25, r25
   111a6:	87 fd       	sbrc	r24, 7
   111a8:	90 95       	com	r25
   111aa:	08 95       	ret

000111ac <strnlen_P>:
   111ac:	fc 01       	movw	r30, r24
   111ae:	05 90       	lpm	r0, Z+
   111b0:	61 50       	subi	r22, 0x01	; 1
   111b2:	70 40       	sbci	r23, 0x00	; 0
   111b4:	01 10       	cpse	r0, r1
   111b6:	d8 f7       	brcc	.-10     	; 0x111ae <strnlen_P+0x2>
   111b8:	80 95       	com	r24
   111ba:	90 95       	com	r25
   111bc:	8e 0f       	add	r24, r30
   111be:	9f 1f       	adc	r25, r31
   111c0:	08 95       	ret

000111c2 <strnlen>:
   111c2:	fc 01       	movw	r30, r24
   111c4:	61 50       	subi	r22, 0x01	; 1
   111c6:	70 40       	sbci	r23, 0x00	; 0
   111c8:	01 90       	ld	r0, Z+
   111ca:	01 10       	cpse	r0, r1
   111cc:	d8 f7       	brcc	.-10     	; 0x111c4 <strnlen+0x2>
   111ce:	80 95       	com	r24
   111d0:	90 95       	com	r25
   111d2:	8e 0f       	add	r24, r30
   111d4:	9f 1f       	adc	r25, r31
   111d6:	08 95       	ret

000111d8 <fputc>:
   111d8:	0f 93       	push	r16
   111da:	1f 93       	push	r17
   111dc:	cf 93       	push	r28
   111de:	df 93       	push	r29
   111e0:	fb 01       	movw	r30, r22
   111e2:	23 81       	ldd	r18, Z+3	; 0x03
   111e4:	21 fd       	sbrc	r18, 1
   111e6:	03 c0       	rjmp	.+6      	; 0x111ee <fputc+0x16>
   111e8:	8f ef       	ldi	r24, 0xFF	; 255
   111ea:	9f ef       	ldi	r25, 0xFF	; 255
   111ec:	28 c0       	rjmp	.+80     	; 0x1123e <fputc+0x66>
   111ee:	22 ff       	sbrs	r18, 2
   111f0:	16 c0       	rjmp	.+44     	; 0x1121e <fputc+0x46>
   111f2:	46 81       	ldd	r20, Z+6	; 0x06
   111f4:	57 81       	ldd	r21, Z+7	; 0x07
   111f6:	24 81       	ldd	r18, Z+4	; 0x04
   111f8:	35 81       	ldd	r19, Z+5	; 0x05
   111fa:	42 17       	cp	r20, r18
   111fc:	53 07       	cpc	r21, r19
   111fe:	44 f4       	brge	.+16     	; 0x11210 <fputc+0x38>
   11200:	a0 81       	ld	r26, Z
   11202:	b1 81       	ldd	r27, Z+1	; 0x01
   11204:	9d 01       	movw	r18, r26
   11206:	2f 5f       	subi	r18, 0xFF	; 255
   11208:	3f 4f       	sbci	r19, 0xFF	; 255
   1120a:	31 83       	std	Z+1, r19	; 0x01
   1120c:	20 83       	st	Z, r18
   1120e:	8c 93       	st	X, r24
   11210:	26 81       	ldd	r18, Z+6	; 0x06
   11212:	37 81       	ldd	r19, Z+7	; 0x07
   11214:	2f 5f       	subi	r18, 0xFF	; 255
   11216:	3f 4f       	sbci	r19, 0xFF	; 255
   11218:	37 83       	std	Z+7, r19	; 0x07
   1121a:	26 83       	std	Z+6, r18	; 0x06
   1121c:	10 c0       	rjmp	.+32     	; 0x1123e <fputc+0x66>
   1121e:	eb 01       	movw	r28, r22
   11220:	09 2f       	mov	r16, r25
   11222:	18 2f       	mov	r17, r24
   11224:	00 84       	ldd	r0, Z+8	; 0x08
   11226:	f1 85       	ldd	r31, Z+9	; 0x09
   11228:	e0 2d       	mov	r30, r0
   1122a:	09 95       	icall
   1122c:	89 2b       	or	r24, r25
   1122e:	e1 f6       	brne	.-72     	; 0x111e8 <fputc+0x10>
   11230:	8e 81       	ldd	r24, Y+6	; 0x06
   11232:	9f 81       	ldd	r25, Y+7	; 0x07
   11234:	01 96       	adiw	r24, 0x01	; 1
   11236:	9f 83       	std	Y+7, r25	; 0x07
   11238:	8e 83       	std	Y+6, r24	; 0x06
   1123a:	81 2f       	mov	r24, r17
   1123c:	90 2f       	mov	r25, r16
   1123e:	df 91       	pop	r29
   11240:	cf 91       	pop	r28
   11242:	1f 91       	pop	r17
   11244:	0f 91       	pop	r16
   11246:	08 95       	ret

00011248 <__ultoa_invert>:
   11248:	fa 01       	movw	r30, r20
   1124a:	aa 27       	eor	r26, r26
   1124c:	28 30       	cpi	r18, 0x08	; 8
   1124e:	51 f1       	breq	.+84     	; 0x112a4 <__ultoa_invert+0x5c>
   11250:	20 31       	cpi	r18, 0x10	; 16
   11252:	81 f1       	breq	.+96     	; 0x112b4 <__ultoa_invert+0x6c>
   11254:	e8 94       	clt
   11256:	6f 93       	push	r22
   11258:	6e 7f       	andi	r22, 0xFE	; 254
   1125a:	6e 5f       	subi	r22, 0xFE	; 254
   1125c:	7f 4f       	sbci	r23, 0xFF	; 255
   1125e:	8f 4f       	sbci	r24, 0xFF	; 255
   11260:	9f 4f       	sbci	r25, 0xFF	; 255
   11262:	af 4f       	sbci	r26, 0xFF	; 255
   11264:	b1 e0       	ldi	r27, 0x01	; 1
   11266:	3e d0       	rcall	.+124    	; 0x112e4 <__ultoa_invert+0x9c>
   11268:	b4 e0       	ldi	r27, 0x04	; 4
   1126a:	3c d0       	rcall	.+120    	; 0x112e4 <__ultoa_invert+0x9c>
   1126c:	67 0f       	add	r22, r23
   1126e:	78 1f       	adc	r23, r24
   11270:	89 1f       	adc	r24, r25
   11272:	9a 1f       	adc	r25, r26
   11274:	a1 1d       	adc	r26, r1
   11276:	68 0f       	add	r22, r24
   11278:	79 1f       	adc	r23, r25
   1127a:	8a 1f       	adc	r24, r26
   1127c:	91 1d       	adc	r25, r1
   1127e:	a1 1d       	adc	r26, r1
   11280:	6a 0f       	add	r22, r26
   11282:	71 1d       	adc	r23, r1
   11284:	81 1d       	adc	r24, r1
   11286:	91 1d       	adc	r25, r1
   11288:	a1 1d       	adc	r26, r1
   1128a:	20 d0       	rcall	.+64     	; 0x112cc <__ultoa_invert+0x84>
   1128c:	09 f4       	brne	.+2      	; 0x11290 <__ultoa_invert+0x48>
   1128e:	68 94       	set
   11290:	3f 91       	pop	r19
   11292:	2a e0       	ldi	r18, 0x0A	; 10
   11294:	26 9f       	mul	r18, r22
   11296:	11 24       	eor	r1, r1
   11298:	30 19       	sub	r19, r0
   1129a:	30 5d       	subi	r19, 0xD0	; 208
   1129c:	31 93       	st	Z+, r19
   1129e:	de f6       	brtc	.-74     	; 0x11256 <__ultoa_invert+0xe>
   112a0:	cf 01       	movw	r24, r30
   112a2:	08 95       	ret
   112a4:	46 2f       	mov	r20, r22
   112a6:	47 70       	andi	r20, 0x07	; 7
   112a8:	40 5d       	subi	r20, 0xD0	; 208
   112aa:	41 93       	st	Z+, r20
   112ac:	b3 e0       	ldi	r27, 0x03	; 3
   112ae:	0f d0       	rcall	.+30     	; 0x112ce <__ultoa_invert+0x86>
   112b0:	c9 f7       	brne	.-14     	; 0x112a4 <__ultoa_invert+0x5c>
   112b2:	f6 cf       	rjmp	.-20     	; 0x112a0 <__ultoa_invert+0x58>
   112b4:	46 2f       	mov	r20, r22
   112b6:	4f 70       	andi	r20, 0x0F	; 15
   112b8:	40 5d       	subi	r20, 0xD0	; 208
   112ba:	4a 33       	cpi	r20, 0x3A	; 58
   112bc:	18 f0       	brcs	.+6      	; 0x112c4 <__ultoa_invert+0x7c>
   112be:	49 5d       	subi	r20, 0xD9	; 217
   112c0:	31 fd       	sbrc	r19, 1
   112c2:	40 52       	subi	r20, 0x20	; 32
   112c4:	41 93       	st	Z+, r20
   112c6:	02 d0       	rcall	.+4      	; 0x112cc <__ultoa_invert+0x84>
   112c8:	a9 f7       	brne	.-22     	; 0x112b4 <__ultoa_invert+0x6c>
   112ca:	ea cf       	rjmp	.-44     	; 0x112a0 <__ultoa_invert+0x58>
   112cc:	b4 e0       	ldi	r27, 0x04	; 4
   112ce:	a6 95       	lsr	r26
   112d0:	97 95       	ror	r25
   112d2:	87 95       	ror	r24
   112d4:	77 95       	ror	r23
   112d6:	67 95       	ror	r22
   112d8:	ba 95       	dec	r27
   112da:	c9 f7       	brne	.-14     	; 0x112ce <__ultoa_invert+0x86>
   112dc:	00 97       	sbiw	r24, 0x00	; 0
   112de:	61 05       	cpc	r22, r1
   112e0:	71 05       	cpc	r23, r1
   112e2:	08 95       	ret
   112e4:	9b 01       	movw	r18, r22
   112e6:	ac 01       	movw	r20, r24
   112e8:	0a 2e       	mov	r0, r26
   112ea:	06 94       	lsr	r0
   112ec:	57 95       	ror	r21
   112ee:	47 95       	ror	r20
   112f0:	37 95       	ror	r19
   112f2:	27 95       	ror	r18
   112f4:	ba 95       	dec	r27
   112f6:	c9 f7       	brne	.-14     	; 0x112ea <__ultoa_invert+0xa2>
   112f8:	62 0f       	add	r22, r18
   112fa:	73 1f       	adc	r23, r19
   112fc:	84 1f       	adc	r24, r20
   112fe:	95 1f       	adc	r25, r21
   11300:	a0 1d       	adc	r26, r0
   11302:	08 95       	ret

00011304 <eeprom_read_byte>:
   11304:	e1 99       	sbic	0x1c, 1	; 28
   11306:	fe cf       	rjmp	.-4      	; 0x11304 <eeprom_read_byte>
   11308:	9f bb       	out	0x1f, r25	; 31
   1130a:	8e bb       	out	0x1e, r24	; 30
   1130c:	e0 9a       	sbi	0x1c, 0	; 28
   1130e:	99 27       	eor	r25, r25
   11310:	8d b3       	in	r24, 0x1d	; 29
   11312:	08 95       	ret

00011314 <eeprom_read_dword>:
   11314:	a6 e1       	ldi	r26, 0x16	; 22
   11316:	b0 e0       	ldi	r27, 0x00	; 0
   11318:	44 e0       	ldi	r20, 0x04	; 4
   1131a:	50 e0       	ldi	r21, 0x00	; 0
   1131c:	0c 94 b2 89 	jmp	0x11364	; 0x11364 <eeprom_read_blraw>

00011320 <eeprom_read_word>:
   11320:	a8 e1       	ldi	r26, 0x18	; 24
   11322:	b0 e0       	ldi	r27, 0x00	; 0
   11324:	42 e0       	ldi	r20, 0x02	; 2
   11326:	50 e0       	ldi	r21, 0x00	; 0
   11328:	0c 94 b2 89 	jmp	0x11364	; 0x11364 <eeprom_read_blraw>

0001132c <eeprom_write_byte>:
   1132c:	26 2f       	mov	r18, r22

0001132e <eeprom_write_r18>:
   1132e:	e1 99       	sbic	0x1c, 1	; 28
   11330:	fe cf       	rjmp	.-4      	; 0x1132e <eeprom_write_r18>
   11332:	9f bb       	out	0x1f, r25	; 31
   11334:	8e bb       	out	0x1e, r24	; 30
   11336:	2d bb       	out	0x1d, r18	; 29
   11338:	0f b6       	in	r0, 0x3f	; 63
   1133a:	f8 94       	cli
   1133c:	e2 9a       	sbi	0x1c, 2	; 28
   1133e:	e1 9a       	sbi	0x1c, 1	; 28
   11340:	0f be       	out	0x3f, r0	; 63
   11342:	01 96       	adiw	r24, 0x01	; 1
   11344:	08 95       	ret

00011346 <eeprom_write_dword>:
   11346:	24 2f       	mov	r18, r20
   11348:	0e 94 97 89 	call	0x1132e	; 0x1132e <eeprom_write_r18>
   1134c:	25 2f       	mov	r18, r21
   1134e:	0e 94 97 89 	call	0x1132e	; 0x1132e <eeprom_write_r18>
   11352:	0c 94 ab 89 	jmp	0x11356	; 0x11356 <eeprom_write_word>

00011356 <eeprom_write_word>:
   11356:	0e 94 96 89 	call	0x1132c	; 0x1132c <eeprom_write_byte>
   1135a:	27 2f       	mov	r18, r23
   1135c:	0c 94 97 89 	jmp	0x1132e	; 0x1132e <eeprom_write_r18>

00011360 <eeprom_read_block>:
   11360:	dc 01       	movw	r26, r24
   11362:	cb 01       	movw	r24, r22

00011364 <eeprom_read_blraw>:
   11364:	fc 01       	movw	r30, r24
   11366:	e1 99       	sbic	0x1c, 1	; 28
   11368:	fe cf       	rjmp	.-4      	; 0x11366 <eeprom_read_blraw+0x2>
   1136a:	06 c0       	rjmp	.+12     	; 0x11378 <eeprom_read_blraw+0x14>
   1136c:	ff bb       	out	0x1f, r31	; 31
   1136e:	ee bb       	out	0x1e, r30	; 30
   11370:	e0 9a       	sbi	0x1c, 0	; 28
   11372:	31 96       	adiw	r30, 0x01	; 1
   11374:	0d b2       	in	r0, 0x1d	; 29
   11376:	0d 92       	st	X+, r0
   11378:	41 50       	subi	r20, 0x01	; 1
   1137a:	50 40       	sbci	r21, 0x00	; 0
   1137c:	b8 f7       	brcc	.-18     	; 0x1136c <eeprom_read_blraw+0x8>
   1137e:	08 95       	ret

00011380 <_exit>:
   11380:	f8 94       	cli

00011382 <__stop_program>:
   11382:	ff cf       	rjmp	.-2      	; 0x11382 <__stop_program>
